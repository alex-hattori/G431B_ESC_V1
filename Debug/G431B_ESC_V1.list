
G431B_ESC_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012234  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014d0  08012418  08012418  00022418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080138e8  080138e8  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  080138e8  080138e8  000238e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080138f0  080138f0  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080138f0  080138f0  000238f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080138f4  080138f4  000238f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  080138f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052c4  20000208  08013afc  00030208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200054cc  08013afc  000354cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035198  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c1d  00000000  00000000  000653cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f38  00000000  00000000  0006aff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ce8  00000000  00000000  0006cf28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ac4  00000000  00000000  0006ec10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027aac  00000000  00000000  000956d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7bc5  00000000  00000000  000bd180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a4d45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a24  00000000  00000000  001a4d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	080123fc 	.word	0x080123fc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	080123fc 	.word	0x080123fc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a4 	b.w	8001038 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468c      	mov	ip, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8083 	bne.w	8000e8a <__udivmoddi4+0x116>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d947      	bls.n	8000e1a <__udivmoddi4+0xa6>
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	b142      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	f1c2 0020 	rsb	r0, r2, #32
 8000d94:	fa24 f000 	lsr.w	r0, r4, r0
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4097      	lsls	r7, r2
 8000d9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000da0:	4094      	lsls	r4, r2
 8000da2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da6:	0c23      	lsrs	r3, r4, #16
 8000da8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dac:	fa1f fe87 	uxth.w	lr, r7
 8000db0:	fb08 c116 	mls	r1, r8, r6, ip
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x60>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc6:	f080 8119 	bcs.w	8000ffc <__udivmoddi4+0x288>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 8116 	bls.w	8000ffc <__udivmoddi4+0x288>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ddc:	fb08 3310 	mls	r3, r8, r0, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d909      	bls.n	8000e00 <__udivmoddi4+0x8c>
 8000dec:	193c      	adds	r4, r7, r4
 8000dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df2:	f080 8105 	bcs.w	8001000 <__udivmoddi4+0x28c>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f240 8102 	bls.w	8001000 <__udivmoddi4+0x28c>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	443c      	add	r4, r7
 8000e00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e04:	eba4 040e 	sub.w	r4, r4, lr
 8000e08:	2600      	movs	r6, #0
 8000e0a:	b11d      	cbz	r5, 8000e14 <__udivmoddi4+0xa0>
 8000e0c:	40d4      	lsrs	r4, r2
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e9c5 4300 	strd	r4, r3, [r5]
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xaa>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f282 	clz	r2, r2
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d150      	bne.n	8000ec8 <__udivmoddi4+0x154>
 8000e26:	1bcb      	subs	r3, r1, r7
 8000e28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2c:	fa1f f887 	uxth.w	r8, r7
 8000e30:	2601      	movs	r6, #1
 8000e32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e36:	0c21      	lsrs	r1, r4, #16
 8000e38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb08 f30c 	mul.w	r3, r8, ip
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0xe4>
 8000e48:	1879      	adds	r1, r7, r1
 8000e4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0xe2>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	f200 80e9 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e56:	4684      	mov	ip, r0
 8000e58:	1ac9      	subs	r1, r1, r3
 8000e5a:	b2a3      	uxth	r3, r4
 8000e5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e68:	fb08 f800 	mul.w	r8, r8, r0
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x10c>
 8000e70:	193c      	adds	r4, r7, r4
 8000e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x10a>
 8000e78:	45a0      	cmp	r8, r4
 8000e7a:	f200 80d9 	bhi.w	8001030 <__udivmoddi4+0x2bc>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	eba4 0408 	sub.w	r4, r4, r8
 8000e84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e88:	e7bf      	b.n	8000e0a <__udivmoddi4+0x96>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d909      	bls.n	8000ea2 <__udivmoddi4+0x12e>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	f000 80b1 	beq.w	8000ff6 <__udivmoddi4+0x282>
 8000e94:	2600      	movs	r6, #0
 8000e96:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	fab3 f683 	clz	r6, r3
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d14a      	bne.n	8000f40 <__udivmoddi4+0x1cc>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d302      	bcc.n	8000eb4 <__udivmoddi4+0x140>
 8000eae:	4282      	cmp	r2, r0
 8000eb0:	f200 80b8 	bhi.w	8001024 <__udivmoddi4+0x2b0>
 8000eb4:	1a84      	subs	r4, r0, r2
 8000eb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eba:	2001      	movs	r0, #1
 8000ebc:	468c      	mov	ip, r1
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d0a8      	beq.n	8000e14 <__udivmoddi4+0xa0>
 8000ec2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ed0:	4097      	lsls	r7, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eda:	40d9      	lsrs	r1, r3
 8000edc:	4330      	orrs	r0, r6
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee4:	fa1f f887 	uxth.w	r8, r7
 8000ee8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef0:	fb06 f108 	mul.w	r1, r6, r8
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	fa04 f402 	lsl.w	r4, r4, r2
 8000efa:	d909      	bls.n	8000f10 <__udivmoddi4+0x19c>
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f02:	f080 808d 	bcs.w	8001020 <__udivmoddi4+0x2ac>
 8000f06:	4299      	cmp	r1, r3
 8000f08:	f240 808a 	bls.w	8001020 <__udivmoddi4+0x2ac>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	443b      	add	r3, r7
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b281      	uxth	r1, r0
 8000f14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f20:	fb00 f308 	mul.w	r3, r0, r8
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x1c4>
 8000f28:	1879      	adds	r1, r7, r1
 8000f2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2e:	d273      	bcs.n	8001018 <__udivmoddi4+0x2a4>
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d971      	bls.n	8001018 <__udivmoddi4+0x2a4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4439      	add	r1, r7
 8000f38:	1acb      	subs	r3, r1, r3
 8000f3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3e:	e778      	b.n	8000e32 <__udivmoddi4+0xbe>
 8000f40:	f1c6 0c20 	rsb	ip, r6, #32
 8000f44:	fa03 f406 	lsl.w	r4, r3, r6
 8000f48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f4c:	431c      	orrs	r4, r3
 8000f4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f52:	fa01 f306 	lsl.w	r3, r1, r6
 8000f56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	0c3b      	lsrs	r3, r7, #16
 8000f62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f66:	fa1f f884 	uxth.w	r8, r4
 8000f6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f72:	fb09 fa08 	mul.w	sl, r9, r8
 8000f76:	458a      	cmp	sl, r1
 8000f78:	fa02 f206 	lsl.w	r2, r2, r6
 8000f7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x220>
 8000f82:	1861      	adds	r1, r4, r1
 8000f84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f88:	d248      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000f8a:	458a      	cmp	sl, r1
 8000f8c:	d946      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000f8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f92:	4421      	add	r1, r4
 8000f94:	eba1 010a 	sub.w	r1, r1, sl
 8000f98:	b2bf      	uxth	r7, r7
 8000f9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa6:	fb00 f808 	mul.w	r8, r0, r8
 8000faa:	45b8      	cmp	r8, r7
 8000fac:	d907      	bls.n	8000fbe <__udivmoddi4+0x24a>
 8000fae:	19e7      	adds	r7, r4, r7
 8000fb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb4:	d22e      	bcs.n	8001014 <__udivmoddi4+0x2a0>
 8000fb6:	45b8      	cmp	r8, r7
 8000fb8:	d92c      	bls.n	8001014 <__udivmoddi4+0x2a0>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4427      	add	r7, r4
 8000fbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc2:	eba7 0708 	sub.w	r7, r7, r8
 8000fc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fca:	454f      	cmp	r7, r9
 8000fcc:	46c6      	mov	lr, r8
 8000fce:	4649      	mov	r1, r9
 8000fd0:	d31a      	bcc.n	8001008 <__udivmoddi4+0x294>
 8000fd2:	d017      	beq.n	8001004 <__udivmoddi4+0x290>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x27a>
 8000fd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fda:	eb67 0701 	sbc.w	r7, r7, r1
 8000fde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fe2:	40f2      	lsrs	r2, r6
 8000fe4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe8:	40f7      	lsrs	r7, r6
 8000fea:	e9c5 2700 	strd	r2, r7, [r5]
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e70b      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e9      	b.n	8000dd4 <__udivmoddi4+0x60>
 8001000:	4618      	mov	r0, r3
 8001002:	e6fd      	b.n	8000e00 <__udivmoddi4+0x8c>
 8001004:	4543      	cmp	r3, r8
 8001006:	d2e5      	bcs.n	8000fd4 <__udivmoddi4+0x260>
 8001008:	ebb8 0e02 	subs.w	lr, r8, r2
 800100c:	eb69 0104 	sbc.w	r1, r9, r4
 8001010:	3801      	subs	r0, #1
 8001012:	e7df      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001014:	4608      	mov	r0, r1
 8001016:	e7d2      	b.n	8000fbe <__udivmoddi4+0x24a>
 8001018:	4660      	mov	r0, ip
 800101a:	e78d      	b.n	8000f38 <__udivmoddi4+0x1c4>
 800101c:	4681      	mov	r9, r0
 800101e:	e7b9      	b.n	8000f94 <__udivmoddi4+0x220>
 8001020:	4666      	mov	r6, ip
 8001022:	e775      	b.n	8000f10 <__udivmoddi4+0x19c>
 8001024:	4630      	mov	r0, r6
 8001026:	e74a      	b.n	8000ebe <__udivmoddi4+0x14a>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	4439      	add	r1, r7
 800102e:	e713      	b.n	8000e58 <__udivmoddi4+0xe4>
 8001030:	3802      	subs	r0, #2
 8001032:	443c      	add	r4, r7
 8001034:	e724      	b.n	8000e80 <__udivmoddi4+0x10c>
 8001036:	bf00      	nop

08001038 <__aeabi_idiv0>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	; 0x30
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2220      	movs	r2, #32
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f00c fdaf 	bl	800dbb8 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800105a:	4b39      	ldr	r3, [pc, #228]	; (8001140 <MX_ADC1_Init+0x104>)
 800105c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001060:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001062:	4b37      	ldr	r3, [pc, #220]	; (8001140 <MX_ADC1_Init+0x104>)
 8001064:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001068:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800106a:	4b35      	ldr	r3, [pc, #212]	; (8001140 <MX_ADC1_Init+0x104>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001070:	4b33      	ldr	r3, [pc, #204]	; (8001140 <MX_ADC1_Init+0x104>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001076:	4b32      	ldr	r3, [pc, #200]	; (8001140 <MX_ADC1_Init+0x104>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800107c:	4b30      	ldr	r3, [pc, #192]	; (8001140 <MX_ADC1_Init+0x104>)
 800107e:	2201      	movs	r2, #1
 8001080:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001082:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <MX_ADC1_Init+0x104>)
 8001084:	2208      	movs	r2, #8
 8001086:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001088:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <MX_ADC1_Init+0x104>)
 800108a:	2200      	movs	r2, #0
 800108c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800108e:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <MX_ADC1_Init+0x104>)
 8001090:	2200      	movs	r2, #0
 8001092:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001094:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <MX_ADC1_Init+0x104>)
 8001096:	2202      	movs	r2, #2
 8001098:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109a:	4b29      	ldr	r3, [pc, #164]	; (8001140 <MX_ADC1_Init+0x104>)
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a2:	4b27      	ldr	r3, [pc, #156]	; (8001140 <MX_ADC1_Init+0x104>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a8:	4b25      	ldr	r3, [pc, #148]	; (8001140 <MX_ADC1_Init+0x104>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ae:	4b24      	ldr	r3, [pc, #144]	; (8001140 <MX_ADC1_Init+0x104>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010b6:	4b22      	ldr	r3, [pc, #136]	; (8001140 <MX_ADC1_Init+0x104>)
 80010b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <MX_ADC1_Init+0x104>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c6:	481e      	ldr	r0, [pc, #120]	; (8001140 <MX_ADC1_Init+0x104>)
 80010c8:	f004 fff4 	bl	80060b4 <HAL_ADC_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80010d2:	f003 fb74 	bl	80047be <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010de:	4619      	mov	r1, r3
 80010e0:	4817      	ldr	r0, [pc, #92]	; (8001140 <MX_ADC1_Init+0x104>)
 80010e2:	f005 ff4f 	bl	8006f84 <HAL_ADCEx_MultiModeConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80010ec:	f003 fb67 	bl	80047be <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_ADC1_Init+0x108>)
 80010f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f4:	2306      	movs	r3, #6
 80010f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010fc:	237f      	movs	r3, #127	; 0x7f
 80010fe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001100:	2304      	movs	r3, #4
 8001102:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	4619      	mov	r1, r3
 800110c:	480c      	ldr	r0, [pc, #48]	; (8001140 <MX_ADC1_Init+0x104>)
 800110e:	f005 fa2d 	bl	800656c <HAL_ADC_ConfigChannel>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001118:	f003 fb51 	bl	80047be <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <MX_ADC1_Init+0x10c>)
 800111e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001120:	230c      	movs	r3, #12
 8001122:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	4619      	mov	r1, r3
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_ADC1_Init+0x104>)
 800112a:	f005 fa1f 	bl	800656c <HAL_ADC_ConfigChannel>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001134:	f003 fb43 	bl	80047be <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	3730      	adds	r7, #48	; 0x30
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200002a0 	.word	0x200002a0
 8001144:	b6902000 	.word	0xb6902000
 8001148:	04300002 	.word	0x04300002

0800114c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001152:	463b      	mov	r3, r7
 8001154:	2220      	movs	r2, #32
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f00c fd2d 	bl	800dbb8 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800115e:	4b32      	ldr	r3, [pc, #200]	; (8001228 <MX_ADC2_Init+0xdc>)
 8001160:	4a32      	ldr	r2, [pc, #200]	; (800122c <MX_ADC2_Init+0xe0>)
 8001162:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001164:	4b30      	ldr	r3, [pc, #192]	; (8001228 <MX_ADC2_Init+0xdc>)
 8001166:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800116a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800116c:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <MX_ADC2_Init+0xdc>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001172:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <MX_ADC2_Init+0xdc>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <MX_ADC2_Init+0xdc>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <MX_ADC2_Init+0xdc>)
 8001180:	2201      	movs	r2, #1
 8001182:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001184:	4b28      	ldr	r3, [pc, #160]	; (8001228 <MX_ADC2_Init+0xdc>)
 8001186:	2208      	movs	r2, #8
 8001188:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800118a:	4b27      	ldr	r3, [pc, #156]	; (8001228 <MX_ADC2_Init+0xdc>)
 800118c:	2200      	movs	r2, #0
 800118e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001190:	4b25      	ldr	r3, [pc, #148]	; (8001228 <MX_ADC2_Init+0xdc>)
 8001192:	2200      	movs	r2, #0
 8001194:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8001196:	4b24      	ldr	r3, [pc, #144]	; (8001228 <MX_ADC2_Init+0xdc>)
 8001198:	2202      	movs	r2, #2
 800119a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800119c:	4b22      	ldr	r3, [pc, #136]	; (8001228 <MX_ADC2_Init+0xdc>)
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a4:	4b20      	ldr	r3, [pc, #128]	; (8001228 <MX_ADC2_Init+0xdc>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <MX_ADC2_Init+0xdc>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <MX_ADC2_Init+0xdc>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <MX_ADC2_Init+0xdc>)
 80011ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011be:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <MX_ADC2_Init+0xdc>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011c8:	4817      	ldr	r0, [pc, #92]	; (8001228 <MX_ADC2_Init+0xdc>)
 80011ca:	f004 ff73 	bl	80060b4 <HAL_ADC_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 80011d4:	f003 faf3 	bl	80047be <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_ADC2_Init+0xe4>)
 80011da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011dc:	2306      	movs	r3, #6
 80011de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011e4:	237f      	movs	r3, #127	; 0x7f
 80011e6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011e8:	2304      	movs	r3, #4
 80011ea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011f0:	463b      	mov	r3, r7
 80011f2:	4619      	mov	r1, r3
 80011f4:	480c      	ldr	r0, [pc, #48]	; (8001228 <MX_ADC2_Init+0xdc>)
 80011f6:	f005 f9b9 	bl	800656c <HAL_ADC_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8001200:	f003 fadd 	bl	80047be <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_ADC2_Init+0xe8>)
 8001206:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001208:	230c      	movs	r3, #12
 800120a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800120c:	463b      	mov	r3, r7
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_ADC2_Init+0xdc>)
 8001212:	f005 f9ab 	bl	800656c <HAL_ADC_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 800121c:	f003 facf 	bl	80047be <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	3720      	adds	r7, #32
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000234 	.word	0x20000234
 800122c:	50000100 	.word	0x50000100
 8001230:	c3290000 	.word	0xc3290000
 8001234:	cb8c0000 	.word	0xcb8c0000

08001238 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001258:	d159      	bne.n	800130e <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800125a:	4b51      	ldr	r3, [pc, #324]	; (80013a0 <HAL_ADC_MspInit+0x168>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	3301      	adds	r3, #1
 8001260:	4a4f      	ldr	r2, [pc, #316]	; (80013a0 <HAL_ADC_MspInit+0x168>)
 8001262:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001264:	4b4e      	ldr	r3, [pc, #312]	; (80013a0 <HAL_ADC_MspInit+0x168>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d10b      	bne.n	8001284 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800126c:	4b4d      	ldr	r3, [pc, #308]	; (80013a4 <HAL_ADC_MspInit+0x16c>)
 800126e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001270:	4a4c      	ldr	r2, [pc, #304]	; (80013a4 <HAL_ADC_MspInit+0x16c>)
 8001272:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001276:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001278:	4b4a      	ldr	r3, [pc, #296]	; (80013a4 <HAL_ADC_MspInit+0x16c>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	4b47      	ldr	r3, [pc, #284]	; (80013a4 <HAL_ADC_MspInit+0x16c>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001288:	4a46      	ldr	r2, [pc, #280]	; (80013a4 <HAL_ADC_MspInit+0x16c>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001290:	4b44      	ldr	r3, [pc, #272]	; (80013a4 <HAL_ADC_MspInit+0x16c>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800129c:	2301      	movs	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a0:	2303      	movs	r3, #3
 80012a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b2:	f007 f9bd 	bl	8008630 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012b6:	4b3c      	ldr	r3, [pc, #240]	; (80013a8 <HAL_ADC_MspInit+0x170>)
 80012b8:	4a3c      	ldr	r2, [pc, #240]	; (80013ac <HAL_ADC_MspInit+0x174>)
 80012ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012bc:	4b3a      	ldr	r3, [pc, #232]	; (80013a8 <HAL_ADC_MspInit+0x170>)
 80012be:	2205      	movs	r2, #5
 80012c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c2:	4b39      	ldr	r3, [pc, #228]	; (80013a8 <HAL_ADC_MspInit+0x170>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c8:	4b37      	ldr	r3, [pc, #220]	; (80013a8 <HAL_ADC_MspInit+0x170>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012ce:	4b36      	ldr	r3, [pc, #216]	; (80013a8 <HAL_ADC_MspInit+0x170>)
 80012d0:	2280      	movs	r2, #128	; 0x80
 80012d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012d4:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <HAL_ADC_MspInit+0x170>)
 80012d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012dc:	4b32      	ldr	r3, [pc, #200]	; (80013a8 <HAL_ADC_MspInit+0x170>)
 80012de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012e2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80012e4:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <HAL_ADC_MspInit+0x170>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012ea:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <HAL_ADC_MspInit+0x170>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012f0:	482d      	ldr	r0, [pc, #180]	; (80013a8 <HAL_ADC_MspInit+0x170>)
 80012f2:	f005 fffb 	bl	80072ec <HAL_DMA_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80012fc:	f003 fa5f 	bl	80047be <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a29      	ldr	r2, [pc, #164]	; (80013a8 <HAL_ADC_MspInit+0x170>)
 8001304:	655a      	str	r2, [r3, #84]	; 0x54
 8001306:	4a28      	ldr	r2, [pc, #160]	; (80013a8 <HAL_ADC_MspInit+0x170>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800130c:	e044      	b.n	8001398 <HAL_ADC_MspInit+0x160>
  else if(adcHandle->Instance==ADC2)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a27      	ldr	r2, [pc, #156]	; (80013b0 <HAL_ADC_MspInit+0x178>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d13f      	bne.n	8001398 <HAL_ADC_MspInit+0x160>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001318:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <HAL_ADC_MspInit+0x168>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	4a20      	ldr	r2, [pc, #128]	; (80013a0 <HAL_ADC_MspInit+0x168>)
 8001320:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <HAL_ADC_MspInit+0x168>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d10b      	bne.n	8001342 <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <HAL_ADC_MspInit+0x16c>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	4a1d      	ldr	r2, [pc, #116]	; (80013a4 <HAL_ADC_MspInit+0x16c>)
 8001330:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <HAL_ADC_MspInit+0x16c>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
    hdma_adc2.Instance = DMA1_Channel2;
 8001342:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <HAL_ADC_MspInit+0x17c>)
 8001344:	4a1c      	ldr	r2, [pc, #112]	; (80013b8 <HAL_ADC_MspInit+0x180>)
 8001346:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001348:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <HAL_ADC_MspInit+0x17c>)
 800134a:	2224      	movs	r2, #36	; 0x24
 800134c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_ADC_MspInit+0x17c>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <HAL_ADC_MspInit+0x17c>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <HAL_ADC_MspInit+0x17c>)
 800135c:	2280      	movs	r2, #128	; 0x80
 800135e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <HAL_ADC_MspInit+0x17c>)
 8001362:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001366:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_ADC_MspInit+0x17c>)
 800136a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800136e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001370:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <HAL_ADC_MspInit+0x17c>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <HAL_ADC_MspInit+0x17c>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800137c:	480d      	ldr	r0, [pc, #52]	; (80013b4 <HAL_ADC_MspInit+0x17c>)
 800137e:	f005 ffb5 	bl	80072ec <HAL_DMA_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_ADC_MspInit+0x154>
      Error_Handler();
 8001388:	f003 fa19 	bl	80047be <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <HAL_ADC_MspInit+0x17c>)
 8001390:	655a      	str	r2, [r3, #84]	; 0x54
 8001392:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <HAL_ADC_MspInit+0x17c>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001398:	bf00      	nop
 800139a:	3728      	adds	r7, #40	; 0x28
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000224 	.word	0x20000224
 80013a4:	40021000 	.word	0x40021000
 80013a8:	2000030c 	.word	0x2000030c
 80013ac:	40020008 	.word	0x40020008
 80013b0:	50000100 	.word	0x50000100
 80013b4:	2000036c 	.word	0x2000036c
 80013b8:	4002001c 	.word	0x4002001c

080013bc <order_phases>:
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"
#include "tim.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 80013bc:	b5b0      	push	{r4, r5, r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
 80013c8:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 80013ca:	4b7d      	ldr	r3, [pc, #500]	; (80015c0 <order_phases+0x204>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
	if(!cal->started){
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	7c1b      	ldrb	r3, [r3, #16]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d108      	bne.n	80013ea <order_phases+0x2e>
		printf("Checking phase sign, pole pairs\r\n");
 80013d8:	487a      	ldr	r0, [pc, #488]	; (80015c4 <order_phases+0x208>)
 80013da:	f00d f8e5 	bl	800e5a8 <puts>
		cal->started = 1;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	ee07 3a90 	vmov	s15, r3
 80013f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013fa:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80015c8 <order_phases+0x20c>
 80013fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	edd3 7a05 	vldr	s15, [r3, #20]
 800140e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141a:	d528      	bpl.n	800146e <order_phases+0xb2>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 800142e:	3308      	adds	r3, #8
 8001430:	601a      	str	r2, [r3, #0]
        cal->cal_position.elec_velocity = 0;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 8001438:	3310      	adds	r3, #16
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
        controller->i_d_des = I_CAL;
 8001440:	4b62      	ldr	r3, [pc, #392]	; (80015cc <order_phases+0x210>)
 8001442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 800145a:	332c      	adds	r3, #44	; 0x2c
 800145c:	4619      	mov	r1, r3
 800145e:	68b8      	ldr	r0, [r7, #8]
 8001460:	f001 fb8a 	bl	8002b78 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	68da      	ldr	r2, [r3, #12]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	619a      	str	r2, [r3, #24]
    	return;
 800146c:	e0a4      	b.n	80015b8 <order_phases+0x1fc>
    }
    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	edd3 7a05 	vldr	s15, [r3, #20]
 8001474:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80015d0 <order_phases+0x214>
 8001478:	eef4 7ac7 	vcmpe.f32	s15, s14
 800147c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001480:	d51d      	bpl.n	80014be <order_phases+0x102>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	edd3 7a05 	vldr	s15, [r3, #20]
 8001488:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800148c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001490:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80015d4 <order_phases+0x218>
 8001494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 80014a8:	3308      	adds	r3, #8
 80014aa:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80014b2:	332c      	adds	r3, #44	; 0x2c
 80014b4:	4619      	mov	r1, r3
 80014b6:	68b8      	ldr	r0, [r7, #8]
 80014b8:	f001 fb5e 	bl	8002b78 <commutate>
    	return;
 80014bc:	e07c      	b.n	80015b8 <order_phases+0x1fc>
    }
	reset_foc(controller);
 80014be:	68b8      	ldr	r0, [r7, #8]
 80014c0:	f001 fae6 	bl	8002a90 <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	edd3 7a06 	vldr	s15, [r3, #24]
 80014d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80014d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d8:	eef0 7ae7 	vabs.f32	s15, s15
 80014dc:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80015d8 <order_phases+0x21c>
 80014e0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014e4:	ee16 0a90 	vmov	r0, s13
 80014e8:	f7ff f856 	bl	8000598 <__aeabi_f2d>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	ec43 2b10 	vmov	d0, r2, r3
 80014f4:	f010 fc3e 	bl	8011d74 <round>
 80014f8:	ec53 2b10 	vmov	r2, r3, d0
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	f7ff fb7a 	bl	8000bf8 <__aeabi_d2uiz>
 8001504:	4603      	mov	r3, r0
 8001506:	b2da      	uxtb	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001512:	ed97 7a05 	vldr	s14, [r7, #20]
 8001516:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800151a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151e:	dd07      	ble.n	8001530 <order_phases+0x174>
		cal->phase_order = 0;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 8001528:	482c      	ldr	r0, [pc, #176]	; (80015dc <order_phases+0x220>)
 800152a:	f00d f83d 	bl	800e5a8 <puts>
 800152e:	e014      	b.n	800155a <order_phases+0x19e>
	}
	else{
		cal->phase_order = 1;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2020 	strb.w	r2, [r3, #32]
		int offsetATemp = controller->adc_a_offset;
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153e:	613b      	str	r3, [r7, #16]
		controller->adc_a_offset = controller->adc_b_offset;
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		controller->adc_b_offset = offsetATemp;
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		printf("Swapping phase sign\r\n");
 8001554:	4822      	ldr	r0, [pc, #136]	; (80015e0 <order_phases+0x224>)
 8001556:	f00d f827 	bl	800e5a8 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	4619      	mov	r1, r3
 8001560:	4820      	ldr	r0, [pc, #128]	; (80015e4 <order_phases+0x228>)
 8001562:	f00c ff9b 	bl	800e49c <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff f814 	bl	8000598 <__aeabi_f2d>
 8001570:	4604      	mov	r4, r0
 8001572:	460d      	mov	r5, r1
 8001574:	6978      	ldr	r0, [r7, #20]
 8001576:	f7ff f80f 	bl	8000598 <__aeabi_f2d>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	e9cd 2300 	strd	r2, r3, [sp]
 8001582:	4622      	mov	r2, r4
 8001584:	462b      	mov	r3, r5
 8001586:	4818      	ldr	r0, [pc, #96]	; (80015e8 <order_phases+0x22c>)
 8001588:	f00c ff88 	bl	800e49c <iprintf>
    PHASE_ORDER = cal->phase_order;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001592:	461a      	mov	r2, r3
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <order_phases+0x204>)
 8001596:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	ee07 3a90 	vmov	s15, r3
 80015a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <order_phases+0x210>)
 80015a6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    cal->started = 0;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bdb0      	pop	{r4, r5, r7, pc}
 80015be:	bf00      	nop
 80015c0:	20004d84 	.word	0x20004d84
 80015c4:	08012418 	.word	0x08012418
 80015c8:	388bcf64 	.word	0x388bcf64
 80015cc:	20000674 	.word	0x20000674
 80015d0:	3f8d6775 	.word	0x3f8d6775
 80015d4:	42700000 	.word	0x42700000
 80015d8:	40c90fdb 	.word	0x40c90fdb
 80015dc:	0801243c 	.word	0x0801243c
 80015e0:	08012454 	.word	0x08012454
 80015e4:	0801246c 	.word	0x0801246c
 80015e8:	08012480 	.word	0x08012480

080015ec <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 80015ec:	b5b0      	push	{r4, r5, r7, lr}
 80015ee:	b094      	sub	sp, #80	; 0x50
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	7c1b      	ldrb	r3, [r3, #16]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10f      	bne.n	8001622 <calibrate_encoder+0x36>
		printf("Starting offset cal and linearization\r\n");
 8001602:	489e      	ldr	r0, [pc, #632]	; (800187c <calibrate_encoder+0x290>)
 8001604:	f00c ffd0 	bl	800e5a8 <puts>
		cal->started = 1;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	60da      	str	r2, [r3, #12]
		cal->next_sample_time = T1;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
		cal->sample_count = 0;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	849a      	strh	r2, [r3, #36]	; 0x24
	}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001632:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001880 <calibrate_encoder+0x294>
 8001636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	edd3 7a05 	vldr	s15, [r3, #20]
 8001646:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800164a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800164e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001652:	d525      	bpl.n	80016a0 <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 8001666:	3308      	adds	r3, #8
 8001668:	601a      	str	r2, [r3, #0]
        controller->i_d_des = I_CAL;
 800166a:	4b86      	ldr	r3, [pc, #536]	; (8001884 <calibrate_encoder+0x298>)
 800166c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8001684:	332c      	adds	r3, #44	; 0x2c
 8001686:	4619      	mov	r1, r3
 8001688:	68b8      	ldr	r0, [r7, #8]
 800168a:	f001 fa75 	bl	8002b78 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695a      	ldr	r2, [r3, #20]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 800169e:	e258      	b.n	8001b52 <calibrate_encoder+0x566>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	ed93 7a05 	vldr	s14, [r3, #20]
 80016a6:	4b77      	ldr	r3, [pc, #476]	; (8001884 <calibrate_encoder+0x298>)
 80016a8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016ac:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001888 <calibrate_encoder+0x29c>
 80016b0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80016b4:	ed9f 6a75 	vldr	s12, [pc, #468]	; 800188c <calibrate_encoder+0x2a0>
 80016b8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80016bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80016c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016cc:	f140 808f 	bpl.w	80017ee <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80016d6:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001890 <calibrate_encoder+0x2a4>
 80016da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 80016ee:	3308      	adds	r3, #8
 80016f0:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80016f8:	332c      	adds	r3, #44	; 0x2c
 80016fa:	4619      	mov	r1, r3
 80016fc:	68b8      	ldr	r0, [r7, #8]
 80016fe:	f001 fa3b 	bl	8002b78 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	ed93 7a05 	vldr	s14, [r3, #20]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800170e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001716:	dc00      	bgt.n	800171a <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 8001718:	e21b      	b.n	8001b52 <calibrate_encoder+0x566>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001720:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80018a4 <calibrate_encoder+0x2b8>
 8001724:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001728:	4b56      	ldr	r3, [pc, #344]	; (8001884 <calibrate_encoder+0x298>)
 800172a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800172e:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001888 <calibrate_encoder+0x29c>
 8001732:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800173a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800173e:	ee17 3a90 	vmov	r3, s15
 8001742:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	14db      	asrs	r3, r3, #19
 8001752:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800175a:	4618      	mov	r0, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	441a      	add	r2, r3
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	f100 030a 	add.w	r3, r0, #10
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001770:	461d      	mov	r5, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	330a      	adds	r3, #10
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	685c      	ldr	r4, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe ff07 	bl	8000598 <__aeabi_f2d>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	e9cd 2300 	strd	r2, r3, [sp]
 8001792:	4623      	mov	r3, r4
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4629      	mov	r1, r5
 8001798:	483e      	ldr	r0, [pc, #248]	; (8001894 <calibrate_encoder+0x2a8>)
 800179a:	f00c fe7f 	bl	800e49c <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80017a4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001898 <calibrate_encoder+0x2ac>
 80017a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017be:	4b31      	ldr	r3, [pc, #196]	; (8001884 <calibrate_encoder+0x298>)
 80017c0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80017c4:	eddf 6a35 	vldr	s13, [pc, #212]	; 800189c <calibrate_encoder+0x2b0>
 80017c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80017d4:	eeb4 7a67 	vcmp.f32	s14, s15
 80017d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017dc:	f000 81b6 	beq.w	8001b4c <calibrate_encoder+0x560>
			cal->sample_count++;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017e4:	3301      	adds	r3, #1
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 80017ec:	e1b1      	b.n	8001b52 <calibrate_encoder+0x566>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	ed93 7a05 	vldr	s14, [r3, #20]
 80017f4:	4b23      	ldr	r3, [pc, #140]	; (8001884 <calibrate_encoder+0x298>)
 80017f6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80017fa:	eddf 6a29 	vldr	s13, [pc, #164]	; 80018a0 <calibrate_encoder+0x2b4>
 80017fe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001802:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800188c <calibrate_encoder+0x2a0>
 8001806:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800180a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800180e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001812:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181a:	f140 80ab 	bpl.w	8001974 <calibrate_encoder+0x388>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	edd3 7a02 	vldr	s15, [r3, #8]
 8001824:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001890 <calibrate_encoder+0x2a4>
 8001828:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <calibrate_encoder+0x298>)
 8001834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		controller->i_q_des = 0.0f;
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		cal->cal_position.elec_angle = cal->theta_ref;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 8001850:	3308      	adds	r3, #8
 8001852:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 800185a:	332c      	adds	r3, #44	; 0x2c
 800185c:	4619      	mov	r1, r3
 800185e:	68b8      	ldr	r0, [r7, #8]
 8001860:	f001 f98a 	bl	8002b78 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	ed93 7a05 	vldr	s14, [r3, #20]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001870:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001878:	dc16      	bgt.n	80018a8 <calibrate_encoder+0x2bc>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 800187a:	e169      	b.n	8001b50 <calibrate_encoder+0x564>
 800187c:	0801249c 	.word	0x0801249c
 8001880:	388bcf64 	.word	0x388bcf64
 8001884:	20000674 	.word	0x20000674
 8001888:	40c90fdb 	.word	0x40c90fdb
 800188c:	42700000 	.word	0x42700000
 8001890:	3b83126e 	.word	0x3b83126e
 8001894:	080124c4 	.word	0x080124c4
 8001898:	3ad67750 	.word	0x3ad67750
 800189c:	42800000 	.word	0x42800000
 80018a0:	41490fdb 	.word	0x41490fdb
 80018a4:	45800000 	.word	0x45800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 814f 	beq.w	8001b50 <calibrate_encoder+0x564>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80018b8:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80018a4 <calibrate_encoder+0x2b8>
 80018bc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80018c0:	4ba5      	ldr	r3, [pc, #660]	; (8001b58 <calibrate_encoder+0x56c>)
 80018c2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018c6:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8001b5c <calibrate_encoder+0x570>
 80018ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018d6:	ee17 3a90 	vmov	r3, s15
 80018da:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	14db      	asrs	r3, r3, #19
 80018ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	4413      	add	r3, r2
 80018f2:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	330a      	adds	r3, #10
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	4413      	add	r3, r2
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800190a:	4610      	mov	r0, r2
 800190c:	0fda      	lsrs	r2, r3, #31
 800190e:	4413      	add	r3, r2
 8001910:	105b      	asrs	r3, r3, #1
 8001912:	4619      	mov	r1, r3
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	f100 030a 	add.w	r3, r0, #10
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001924:	461d      	mov	r5, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	330a      	adds	r3, #10
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	685c      	ldr	r4, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fe2d 	bl	8000598 <__aeabi_f2d>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	e9cd 2300 	strd	r2, r3, [sp]
 8001946:	4623      	mov	r3, r4
 8001948:	6a3a      	ldr	r2, [r7, #32]
 800194a:	4629      	mov	r1, r5
 800194c:	4884      	ldr	r0, [pc, #528]	; (8001b60 <calibrate_encoder+0x574>)
 800194e:	f00c fda5 	bl	800e49c <iprintf>
			cal->sample_count--;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001956:	3b01      	subs	r3, #1
 8001958:	b29a      	uxth	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	849a      	strh	r2, [r3, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001964:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001b64 <calibrate_encoder+0x578>
 8001968:	ee77 7a87 	vadd.f32	s15, s15, s14
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 8001972:	e0ed      	b.n	8001b50 <calibrate_encoder+0x564>
    }

    reset_foc(controller);
 8001974:	68b8      	ldr	r0, [r7, #8]
 8001976:	f001 f88b 	bl	8002a90 <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 800197e:	2300      	movs	r3, #0
 8001980:	643b      	str	r3, [r7, #64]	; 0x40
 8001982:	e00b      	b.n	800199c <calibrate_encoder+0x3b0>
		ezero_mean += cal->error_arr[i];
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001988:	330a      	adds	r3, #10
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001992:	4413      	add	r3, r2
 8001994:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001998:	3301      	adds	r3, #1
 800199a:	643b      	str	r3, [r7, #64]	; 0x40
 800199c:	4b6e      	ldr	r3, [pc, #440]	; (8001b58 <calibrate_encoder+0x56c>)
 800199e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019a6:	ee17 3a90 	vmov	r3, s15
 80019aa:	019b      	lsls	r3, r3, #6
 80019ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019ae:	429a      	cmp	r2, r3
 80019b0:	dbe8      	blt.n	8001984 <calibrate_encoder+0x398>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 80019b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019bc:	4b66      	ldr	r3, [pc, #408]	; (8001b58 <calibrate_encoder+0x56c>)
 80019be:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019c2:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001b68 <calibrate_encoder+0x57c>
 80019c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d2:	ee17 2a90 	vmov	r2, s15
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 80019da:	2340      	movs	r3, #64	; 0x40
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
	int lut_offset = (cal->error_arr[0])*N_LUT/ENC_CPR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	da00      	bge.n	80019e8 <calibrate_encoder+0x3fc>
 80019e6:	333f      	adds	r3, #63	; 0x3f
 80019e8:	119b      	asrs	r3, r3, #6
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<N_LUT; i++){
 80019ec:	2300      	movs	r3, #0
 80019ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019f0:	e0a0      	b.n	8001b34 <calibrate_encoder+0x548>
			int moving_avg = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 80019f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f8:	0fda      	lsrs	r2, r3, #31
 80019fa:	4413      	add	r3, r2
 80019fc:	105b      	asrs	r3, r3, #1
 80019fe:	425b      	negs	r3, r3
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
 8001a02:	e068      	b.n	8001ad6 <calibrate_encoder+0x4ea>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a06:	ee07 3a90 	vmov	s15, r3
 8001a0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a0e:	4b52      	ldr	r3, [pc, #328]	; (8001b58 <calibrate_encoder+0x56c>)
 8001a10:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a18:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001b68 <calibrate_encoder+0x57c>
 8001a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a20:	eddf 6a51 	vldr	s13, [pc, #324]	; 8001b68 <calibrate_encoder+0x57c>
 8001a24:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a3a:	ee17 3a90 	vmov	r3, s15
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8001a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	da13      	bge.n	8001a6e <calibrate_encoder+0x482>
 8001a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a48:	ee07 3a90 	vmov	s15, r3
 8001a4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a50:	4b41      	ldr	r3, [pc, #260]	; (8001b58 <calibrate_encoder+0x56c>)
 8001a52:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a56:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001b68 <calibrate_encoder+0x57c>
 8001a5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a66:	ee17 3a90 	vmov	r3, s15
 8001a6a:	633b      	str	r3, [r7, #48]	; 0x30
 8001a6c:	e027      	b.n	8001abe <calibrate_encoder+0x4d2>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a78:	4b37      	ldr	r3, [pc, #220]	; (8001b58 <calibrate_encoder+0x56c>)
 8001a7a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a7e:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001b68 <calibrate_encoder+0x57c>
 8001a82:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a96:	dd12      	ble.n	8001abe <calibrate_encoder+0x4d2>
 8001a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <calibrate_encoder+0x56c>)
 8001aa4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001aa8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001b68 <calibrate_encoder+0x57c>
 8001aac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ab8:	ee17 3a90 	vmov	r3, s15
 8001abc:	633b      	str	r3, [r7, #48]	; 0x30
				moving_avg += cal->error_arr[index];
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac2:	330a      	adds	r3, #10
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001acc:	4413      	add	r3, r2
 8001ace:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad8:	0fda      	lsrs	r2, r3, #31
 8001ada:	4413      	add	r3, r2
 8001adc:	105b      	asrs	r3, r3, #1
 8001ade:	461a      	mov	r2, r3
 8001ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	db8e      	blt.n	8001a04 <calibrate_encoder+0x418>
			}
			moving_avg = moving_avg/window;
 8001ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aea:	fb92 f3f3 	sdiv	r3, r2, r3
 8001aee:	63bb      	str	r3, [r7, #56]	; 0x38
			int lut_index = lut_offset + i;
 8001af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af4:	4413      	add	r3, r2
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afa:	2b3f      	cmp	r3, #63	; 0x3f
 8001afc:	dd02      	ble.n	8001b04 <calibrate_encoder+0x518>
 8001afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b00:	3b40      	subs	r3, #64	; 0x40
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b0a:	1ad2      	subs	r2, r2, r3
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b14:	330a      	adds	r3, #10
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	461a      	mov	r2, r3
 8001b26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b28:	4810      	ldr	r0, [pc, #64]	; (8001b6c <calibrate_encoder+0x580>)
 8001b2a:	f00c fcb7 	bl	800e49c <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8001b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b30:	3301      	adds	r3, #1
 8001b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b36:	2b3f      	cmp	r3, #63	; 0x3f
 8001b38:	f77f af5b 	ble.w	80019f2 <calibrate_encoder+0x406>

		}

	cal->started = 0;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001b4a:	e002      	b.n	8001b52 <calibrate_encoder+0x566>
				return;
 8001b4c:	bf00      	nop
 8001b4e:	e000      	b.n	8001b52 <calibrate_encoder+0x566>
		return;
 8001b50:	bf00      	nop
}
 8001b52:	3748      	adds	r7, #72	; 0x48
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bdb0      	pop	{r4, r5, r7, pc}
 8001b58:	20000674 	.word	0x20000674
 8001b5c:	40c90fdb 	.word	0x40c90fdb
 8001b60:	080124c4 	.word	0x080124c4
 8001b64:	3ad67750 	.word	0x3ad67750
 8001b68:	42800000 	.word	0x42800000
 8001b6c:	080124d4 	.word	0x080124d4

08001b70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b76:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <MX_DMA_Init+0x60>)
 8001b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b7a:	4a15      	ldr	r2, [pc, #84]	; (8001bd0 <MX_DMA_Init+0x60>)
 8001b7c:	f043 0304 	orr.w	r3, r3, #4
 8001b80:	6493      	str	r3, [r2, #72]	; 0x48
 8001b82:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <MX_DMA_Init+0x60>)
 8001b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <MX_DMA_Init+0x60>)
 8001b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b92:	4a0f      	ldr	r2, [pc, #60]	; (8001bd0 <MX_DMA_Init+0x60>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6493      	str	r3, [r2, #72]	; 0x48
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <MX_DMA_Init+0x60>)
 8001b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	200b      	movs	r0, #11
 8001bac:	f005 fb69 	bl	8007282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bb0:	200b      	movs	r0, #11
 8001bb2:	f005 fb80 	bl	80072b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2100      	movs	r1, #0
 8001bba:	200c      	movs	r0, #12
 8001bbc:	f005 fb61 	bl	8007282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001bc0:	200c      	movs	r0, #12
 8001bc2:	f005 fb78 	bl	80072b6 <HAL_NVIC_EnableIRQ>

}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	00000000 	.word	0x00000000

08001bd8 <eeprom_restore>:

static uint32_t const page_nb = 58U; //(uint32_t)FLASH_PAGE_NB-1;
static uint32_t const start_address = 0x08000000UL+58*0x800U; //(FLASH_BASE)+page_nb*(FLASH_PAGE_SIZE);

HAL_StatusTypeDef eeprom_restore(float * float_regs, uint32_t float_size, int * int_regs, uint32_t int_size)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b090      	sub	sp, #64	; 0x40
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
	uint64_t data = 0xDEADBEEF;
 8001be6:	a33b      	add	r3, pc, #236	; (adr r3, 8001cd4 <eeprom_restore+0xfc>)
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bf4:	e02c      	b.n	8001c50 <eeprom_restore+0x78>
	{
		memcpy(&data, (uint32_t *)(start_address+32*index), sizeof(uint64_t));
 8001bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bf8:	015b      	lsls	r3, r3, #5
 8001bfa:	4a35      	ldr	r2, [pc, #212]	; (8001cd0 <eeprom_restore+0xf8>)
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c04:	2208      	movs	r2, #8
 8001c06:	4618      	mov	r0, r3
 8001c08:	f00b ffae 	bl	800db68 <memcpy>
		uint32_t temp = data&0xFFFFFFFF;
 8001c0c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c10:	4613      	mov	r3, r2
 8001c12:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t temp2 = data>>32;
 8001c14:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	000a      	movs	r2, r1
 8001c22:	2300      	movs	r3, #0
 8001c24:	4613      	mov	r3, r2
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		float value;
		float value2;
		memcpy(&value,&temp,sizeof(uint32_t));
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
		memcpy(&value2,&temp2,sizeof(uint32_t));
 8001c2e:	623b      	str	r3, [r7, #32]
		float_regs[index] = value;
 8001c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3a:	601a      	str	r2, [r3, #0]
		float_regs[index+1] = value2;
 8001c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c3e:	3301      	adds	r3, #1
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	4413      	add	r3, r2
 8001c46:	6a3a      	ldr	r2, [r7, #32]
 8001c48:	601a      	str	r2, [r3, #0]
	for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8001c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d3ce      	bcc.n	8001bf6 <eeprom_restore+0x1e>
	}
	for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8001c58:	2300      	movs	r3, #0
 8001c5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c5c:	e02e      	b.n	8001cbc <eeprom_restore+0xe4>
	{

		memcpy(&data, (uint32_t *)(start_address+32*(index+float_size)), sizeof(uint64_t));
 8001c5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4413      	add	r3, r2
 8001c64:	015b      	lsls	r3, r3, #5
 8001c66:	4a1a      	ldr	r2, [pc, #104]	; (8001cd0 <eeprom_restore+0xf8>)
 8001c68:	4413      	add	r3, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c70:	2208      	movs	r2, #8
 8001c72:	4618      	mov	r0, r3
 8001c74:	f00b ff78 	bl	800db68 <memcpy>
		uint32_t temp = data&0xFFFFFFFF;
 8001c78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	61fb      	str	r3, [r7, #28]
		uint32_t temp2 = data>>32;
 8001c80:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	000a      	movs	r2, r1
 8001c8e:	2300      	movs	r3, #0
 8001c90:	4613      	mov	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
 8001c94:	69fb      	ldr	r3, [r7, #28]
		int value;
		int value2;
		memcpy(&value,&temp,sizeof(uint32_t));
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	69bb      	ldr	r3, [r7, #24]
		memcpy(&value2,&temp2,sizeof(uint32_t));
 8001c9a:	613b      	str	r3, [r7, #16]
		int_regs[index] = value;
 8001c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	601a      	str	r2, [r3, #0]
		int_regs[index+1] = value2;
 8001ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001caa:	3301      	adds	r3, #1
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	601a      	str	r2, [r3, #0]
	for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8001cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb8:	3302      	adds	r3, #2
 8001cba:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d3cc      	bcc.n	8001c5e <eeprom_restore+0x86>
	}

	return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3740      	adds	r7, #64	; 0x40
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	0801d000 	.word	0x0801d000
 8001cd4:	deadbeef 	.word	0xdeadbeef
	...

08001ce0 <eeprom_store>:

HAL_StatusTypeDef eeprom_store(float const * float_regs, uint32_t float_size, int const * int_regs, uint32_t int_size)
{
 8001ce0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ce4:	b09c      	sub	sp, #112	; 0x70
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	603b      	str	r3, [r7, #0]
	HAL_FLASH_Unlock();
 8001cf0:	f006 fa82 	bl	80081f8 <HAL_FLASH_Unlock>
	// erase the last page of bank1 (STM32G43x : 1 bank, 64 pages, 2kB per page, 64-bit data)
	{
		FLASH_EraseInitTypeDef erase ={FLASH_TYPEERASE_PAGES,FLASH_BANK_1,page_nb,5};
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cfc:	233a      	movs	r3, #58	; 0x3a
 8001cfe:	633b      	str	r3, [r7, #48]	; 0x30
 8001d00:	2305      	movs	r3, #5
 8001d02:	637b      	str	r3, [r7, #52]	; 0x34
		uint32_t page_error = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&erase, &page_error);
 8001d08:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001d0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d10:	4611      	mov	r1, r2
 8001d12:	4618      	mov	r0, r3
 8001d14:	f006 fb68 	bl	80083e8 <HAL_FLASHEx_Erase>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if(result!=HAL_OK)
 8001d1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d004      	beq.n	8001d30 <eeprom_store+0x50>
		{
			HAL_FLASH_Lock();
 8001d26:	f006 fa89 	bl	800823c <HAL_FLASH_Lock>
			return result;
 8001d2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d2e:	e0a7      	b.n	8001e80 <eeprom_store+0x1a0>
		}
	}
	// write the last page
	{
		uint64_t data = 0xDEADBEEF;
 8001d30:	a358      	add	r3, pc, #352	; (adr r3, 8001e94 <eeprom_store+0x1b4>)
 8001d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d36:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		for(uint32_t index=0; index<float_size;index+=2)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d3e:	e047      	b.n	8001dd0 <eeprom_store+0xf0>
		{
			union UN {float a; uint32_t b;};
			union UN un1;
			union UN un2;
			un1.a = float_regs[index];
 8001d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	4413      	add	r3, r2
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	623b      	str	r3, [r7, #32]
			un2.a = float_regs[index+1];
 8001d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d4e:	3301      	adds	r3, #1
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	4413      	add	r3, r2
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	61fb      	str	r3, [r7, #28]
			uint64_t temp = un2.b;
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			data = (temp<<32)|un1.b;
 8001d66:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	0003      	movs	r3, r0
 8001d74:	2200      	movs	r2, #0
 8001d76:	6a39      	ldr	r1, [r7, #32]
 8001d78:	4608      	mov	r0, r1
 8001d7a:	f04f 0100 	mov.w	r1, #0
 8001d7e:	ea42 0800 	orr.w	r8, r2, r0
 8001d82:	ea43 0901 	orr.w	r9, r3, r1
 8001d86:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
			HAL_StatusTypeDef result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,start_address+index*32,data);
 8001d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d8c:	015b      	lsls	r3, r3, #5
 8001d8e:	4a40      	ldr	r2, [pc, #256]	; (8001e90 <eeprom_store+0x1b0>)
 8001d90:	1899      	adds	r1, r3, r2
 8001d92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d96:	2000      	movs	r0, #0
 8001d98:	f006 f9d8 	bl	800814c <HAL_FLASH_Program>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if(result!=HAL_OK)
 8001da2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00f      	beq.n	8001dca <eeprom_store+0xea>
			{
				uint32_t error = HAL_FLASH_GetError();
 8001daa:	f006 fa61 	bl	8008270 <HAL_FLASH_GetError>
 8001dae:	63b8      	str	r0, [r7, #56]	; 0x38
				if(error)
 8001db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d004      	beq.n	8001dc0 <eeprom_store+0xe0>
				{
					HAL_FLASH_Lock();
 8001db6:	f006 fa41 	bl	800823c <HAL_FLASH_Lock>
					return error;
 8001dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	e05f      	b.n	8001e80 <eeprom_store+0x1a0>
				}
				HAL_FLASH_Lock();
 8001dc0:	f006 fa3c 	bl	800823c <HAL_FLASH_Lock>
				return result;
 8001dc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001dc8:	e05a      	b.n	8001e80 <eeprom_store+0x1a0>
		for(uint32_t index=0; index<float_size;index+=2)
 8001dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dcc:	3302      	adds	r3, #2
 8001dce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001dd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d3b3      	bcc.n	8001d40 <eeprom_store+0x60>
			}
		}
		for(uint32_t index=0; index<int_size;index+=2)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	66bb      	str	r3, [r7, #104]	; 0x68
 8001ddc:	e049      	b.n	8001e72 <eeprom_store+0x192>
		{
			union UN {int a; uint32_t b;};
			union UN un1;
			union UN un2;
			un1.a = int_regs[index];
 8001dde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	61bb      	str	r3, [r7, #24]
			un2.a = int_regs[index+1];
 8001dea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dec:	3301      	adds	r3, #1
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	4413      	add	r3, r2
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	617b      	str	r3, [r7, #20]
			uint64_t temp = un2.b;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f04f 0300 	mov.w	r3, #0
 8001e00:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			data = (temp<<32)|un1.b;
 8001e04:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	0003      	movs	r3, r0
 8001e12:	2200      	movs	r2, #0
 8001e14:	69b9      	ldr	r1, [r7, #24]
 8001e16:	4608      	mov	r0, r1
 8001e18:	f04f 0100 	mov.w	r1, #0
 8001e1c:	ea42 0400 	orr.w	r4, r2, r0
 8001e20:	ea43 0501 	orr.w	r5, r3, r1
 8001e24:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
			HAL_StatusTypeDef result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,start_address+(float_size+index)*32,data);
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e2c:	4413      	add	r3, r2
 8001e2e:	015b      	lsls	r3, r3, #5
 8001e30:	4a17      	ldr	r2, [pc, #92]	; (8001e90 <eeprom_store+0x1b0>)
 8001e32:	1899      	adds	r1, r3, r2
 8001e34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f006 f987 	bl	800814c <HAL_FLASH_Program>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			if(result!=HAL_OK)
 8001e44:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00f      	beq.n	8001e6c <eeprom_store+0x18c>
			{
				uint32_t error = HAL_FLASH_GetError();
 8001e4c:	f006 fa10 	bl	8008270 <HAL_FLASH_GetError>
 8001e50:	64b8      	str	r0, [r7, #72]	; 0x48
				if(error)
 8001e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d004      	beq.n	8001e62 <eeprom_store+0x182>
				{
					HAL_FLASH_Lock();
 8001e58:	f006 f9f0 	bl	800823c <HAL_FLASH_Lock>
					return error;
 8001e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	e00e      	b.n	8001e80 <eeprom_store+0x1a0>
				}
				HAL_FLASH_Lock();
 8001e62:	f006 f9eb 	bl	800823c <HAL_FLASH_Lock>
				return result;
 8001e66:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e6a:	e009      	b.n	8001e80 <eeprom_store+0x1a0>
		for(uint32_t index=0; index<int_size;index+=2)
 8001e6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e6e:	3302      	adds	r3, #2
 8001e70:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d3b1      	bcc.n	8001dde <eeprom_store+0xfe>
			}
		}
	}
	HAL_FLASH_Lock();
 8001e7a:	f006 f9df 	bl	800823c <HAL_FLASH_Lock>
	return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3770      	adds	r7, #112	; 0x70
 8001e84:	46bd      	mov	sp, r7
 8001e86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e8a:	bf00      	nop
 8001e8c:	f3af 8000 	nop.w
 8001e90:	0801d000 	.word	0x0801d000
 8001e94:	deadbeef 	.word	0xdeadbeef
 8001e98:	00000000 	.word	0x00000000

08001e9c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001ea0:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <MX_FDCAN1_Init+0x84>)
 8001ea2:	4a20      	ldr	r2, [pc, #128]	; (8001f24 <MX_FDCAN1_Init+0x88>)
 8001ea4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV4;
 8001ea6:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <MX_FDCAN1_Init+0x84>)
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001eac:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <MX_FDCAN1_Init+0x84>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001eb2:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <MX_FDCAN1_Init+0x84>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <MX_FDCAN1_Init+0x84>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8001ebe:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <MX_FDCAN1_Init+0x84>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001ec4:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <MX_FDCAN1_Init+0x84>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <MX_FDCAN1_Init+0x84>)
 8001ecc:	2203      	movs	r2, #3
 8001ece:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001ed0:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <MX_FDCAN1_Init+0x84>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <MX_FDCAN1_Init+0x84>)
 8001ed8:	220b      	movs	r2, #11
 8001eda:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001edc:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <MX_FDCAN1_Init+0x84>)
 8001ede:	2202      	movs	r2, #2
 8001ee0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <MX_FDCAN1_Init+0x84>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <MX_FDCAN1_Init+0x84>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <MX_FDCAN1_Init+0x84>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <MX_FDCAN1_Init+0x84>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <MX_FDCAN1_Init+0x84>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001f00:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <MX_FDCAN1_Init+0x84>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <MX_FDCAN1_Init+0x84>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001f0c:	4804      	ldr	r0, [pc, #16]	; (8001f20 <MX_FDCAN1_Init+0x84>)
 8001f0e:	f005 fd1f 	bl	8007950 <HAL_FDCAN_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001f18:	f002 fc51 	bl	80047be <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	200003cc 	.word	0x200003cc
 8001f24:	40006400 	.word	0x40006400

08001f28 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a26      	ldr	r2, [pc, #152]	; (8001fe0 <HAL_FDCAN_MspInit+0xb8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d146      	bne.n	8001fd8 <HAL_FDCAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f4a:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <HAL_FDCAN_MspInit+0xbc>)
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4e:	4a25      	ldr	r2, [pc, #148]	; (8001fe4 <HAL_FDCAN_MspInit+0xbc>)
 8001f50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f54:	6593      	str	r3, [r2, #88]	; 0x58
 8001f56:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <HAL_FDCAN_MspInit+0xbc>)
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <HAL_FDCAN_MspInit+0xbc>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f66:	4a1f      	ldr	r2, [pc, #124]	; (8001fe4 <HAL_FDCAN_MspInit+0xbc>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <HAL_FDCAN_MspInit+0xbc>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7a:	4b1a      	ldr	r3, [pc, #104]	; (8001fe4 <HAL_FDCAN_MspInit+0xbc>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	4a19      	ldr	r2, [pc, #100]	; (8001fe4 <HAL_FDCAN_MspInit+0xbc>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f86:	4b17      	ldr	r3, [pc, #92]	; (8001fe4 <HAL_FDCAN_MspInit+0xbc>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001fa4:	2309      	movs	r3, #9
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	4619      	mov	r1, r3
 8001fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb2:	f006 fb3d 	bl	8008630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001fc8:	2309      	movs	r3, #9
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <HAL_FDCAN_MspInit+0xc0>)
 8001fd4:	f006 fb2c 	bl	8008630 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3728      	adds	r7, #40	; 0x28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40006400 	.word	0x40006400
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	48000400 	.word	0x48000400

08001fec <can_rx_init>:
  /* USER CODE END FDCAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void can_rx_init(CANRxMessage *msg){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	6078      	str	r0, [r7, #4]
	msg->filter.IdType = FDCAN_STANDARD_ID;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34
	msg->filter.FilterIndex = 0;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	639a      	str	r2, [r3, #56]	; 0x38
	msg->filter.FilterType = FDCAN_FILTER_RANGE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	63da      	str	r2, [r3, #60]	; 0x3c
	msg->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	641a      	str	r2, [r3, #64]	; 0x40
	msg->filter.FilterID1 = CAN_ID;
 800200c:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <can_rx_init+0x58>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	461a      	mov	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	645a      	str	r2, [r3, #68]	; 0x44
	msg->filter.FilterID2 = CAN_ID;
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <can_rx_init+0x58>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	461a      	mov	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	649a      	str	r2, [r3, #72]	; 0x48
	HAL_FDCAN_ConfigFilter(&CAN_H, &msg->filter);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3334      	adds	r3, #52	; 0x34
 8002024:	4619      	mov	r1, r3
 8002026:	4808      	ldr	r0, [pc, #32]	; (8002048 <can_rx_init+0x5c>)
 8002028:	f005 fdec 	bl	8007c04 <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&CAN_H,3,3,0,1);
 800202c:	2301      	movs	r3, #1
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	2300      	movs	r3, #0
 8002032:	2203      	movs	r2, #3
 8002034:	2103      	movs	r1, #3
 8002036:	4804      	ldr	r0, [pc, #16]	; (8002048 <can_rx_init+0x5c>)
 8002038:	f005 fe3e 	bl	8007cb8 <HAL_FDCAN_ConfigGlobalFilter>
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20004d84 	.word	0x20004d84
 8002048:	200003cc 	.word	0x200003cc

0800204c <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	msg->tx_header.Identifier = CAN_MASTER;
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <can_tx_init+0x50>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	461a      	mov	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	609a      	str	r2, [r3, #8]
	msg->tx_header.DataLength = FDCAN_DLC_BYTES_6;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8002064:	615a      	str	r2, [r3, #20]
	msg->tx_header.IdType = FDCAN_STANDARD_ID;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	60da      	str	r2, [r3, #12]
	msg->tx_header.TxFrameType = FDCAN_DATA_FRAME;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
	msg->tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
	msg->tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
	msg->tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	621a      	str	r2, [r3, #32]
	msg->tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	625a      	str	r2, [r3, #36]	; 0x24
	msg->tx_header.MessageMarker = 0;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	20004d84 	.word	0x20004d84

080020a0 <pack_reply>:
/// 0: [position[15-8]]
/// 1: [position[7-0]]
/// 2: [velocity[11-4]]
/// 3: [velocity[3-0], current[11-8]]
/// 4: [current[7-0]]
void pack_reply(CANTxMessage *msg, uint8_t id, float p, float v, float t){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	; 0x28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6178      	str	r0, [r7, #20]
 80020a8:	460b      	mov	r3, r1
 80020aa:	ed87 0a03 	vstr	s0, [r7, #12]
 80020ae:	edc7 0a02 	vstr	s1, [r7, #8]
 80020b2:	ed87 1a01 	vstr	s2, [r7, #4]
 80020b6:	74fb      	strb	r3, [r7, #19]
    int p_int = float_to_uint(p, P_MIN, P_MAX, 16);
 80020b8:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <pack_reply+0xc4>)
 80020ba:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80020be:	4b29      	ldr	r3, [pc, #164]	; (8002164 <pack_reply+0xc4>)
 80020c0:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80020c4:	2010      	movs	r0, #16
 80020c6:	eeb0 1a47 	vmov.f32	s2, s14
 80020ca:	eef0 0a67 	vmov.f32	s1, s15
 80020ce:	ed97 0a03 	vldr	s0, [r7, #12]
 80020d2:	f002 fc62 	bl	800499a <float_to_uint>
 80020d6:	6278      	str	r0, [r7, #36]	; 0x24
    int v_int = float_to_uint(v, V_MIN, V_MAX, 12);
 80020d8:	4b22      	ldr	r3, [pc, #136]	; (8002164 <pack_reply+0xc4>)
 80020da:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80020de:	4b21      	ldr	r3, [pc, #132]	; (8002164 <pack_reply+0xc4>)
 80020e0:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80020e4:	200c      	movs	r0, #12
 80020e6:	eeb0 1a47 	vmov.f32	s2, s14
 80020ea:	eef0 0a67 	vmov.f32	s1, s15
 80020ee:	ed97 0a02 	vldr	s0, [r7, #8]
 80020f2:	f002 fc52 	bl	800499a <float_to_uint>
 80020f6:	6238      	str	r0, [r7, #32]
    int t_int = float_to_uint(t, -T_MAX, T_MAX, 12);
 80020f8:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <pack_reply+0xc4>)
 80020fa:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80020fe:	eef1 7a67 	vneg.f32	s15, s15
 8002102:	4b18      	ldr	r3, [pc, #96]	; (8002164 <pack_reply+0xc4>)
 8002104:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8002108:	200c      	movs	r0, #12
 800210a:	eeb0 1a47 	vmov.f32	s2, s14
 800210e:	eef0 0a67 	vmov.f32	s1, s15
 8002112:	ed97 0a01 	vldr	s0, [r7, #4]
 8002116:	f002 fc40 	bl	800499a <float_to_uint>
 800211a:	61f8      	str	r0, [r7, #28]
    msg->data[0] = id;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	7cfa      	ldrb	r2, [r7, #19]
 8002120:	705a      	strb	r2, [r3, #1]
    msg->data[1] = p_int>>8;
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	121b      	asrs	r3, r3, #8
 8002126:	b2da      	uxtb	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	709a      	strb	r2, [r3, #2]
    msg->data[2] = p_int&0xFF;
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	b2da      	uxtb	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	70da      	strb	r2, [r3, #3]
    msg->data[3] = v_int>>4;
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	111b      	asrs	r3, r3, #4
 8002138:	b2da      	uxtb	r2, r3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	711a      	strb	r2, [r3, #4]
    msg->data[4] = ((v_int&0xF)<<4) + (t_int>>8);
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	b2da      	uxtb	r2, r3
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	121b      	asrs	r3, r3, #8
 8002148:	b2db      	uxtb	r3, r3
 800214a:	4413      	add	r3, r2
 800214c:	b2da      	uxtb	r2, r3
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	715a      	strb	r2, [r3, #5]
    msg->data[5] = t_int&0xFF;
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	719a      	strb	r2, [r3, #6]
    }
 800215a:	bf00      	nop
 800215c:	3728      	adds	r7, #40	; 0x28
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000674 	.word	0x20000674

08002168 <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 8002168:	b084      	sub	sp, #16
 800216a:	b590      	push	{r4, r7, lr}
 800216c:	b087      	sub	sp, #28
 800216e:	af00      	add	r7, sp, #0
 8002170:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002174:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int p_int = (msg.data[0]<<8)|msg.data[1];
 8002178:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002182:	4313      	orrs	r3, r2
 8002184:	617b      	str	r3, [r7, #20]
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8002186:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002190:	0912      	lsrs	r2, r2, #4
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8002198:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80021a2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 80021aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80021b4:	0912      	lsrs	r2, r2, #4
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60bb      	str	r3, [r7, #8]
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 80021bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80021c6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80021ca:	4313      	orrs	r3, r2
 80021cc:	607b      	str	r3, [r7, #4]

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 80021ce:	4b34      	ldr	r3, [pc, #208]	; (80022a0 <unpack_cmd+0x138>)
 80021d0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80021d4:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <unpack_cmd+0x138>)
 80021d6:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80021da:	2110      	movs	r1, #16
 80021dc:	eef0 0a47 	vmov.f32	s1, s14
 80021e0:	eeb0 0a67 	vmov.f32	s0, s15
 80021e4:	6978      	ldr	r0, [r7, #20]
 80021e6:	f002 fc0b 	bl	8004a00 <uint_to_float>
 80021ea:	eef0 7a40 	vmov.f32	s15, s0
 80021ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021f0:	edc3 7a00 	vstr	s15, [r3]
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
 80021f4:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <unpack_cmd+0x138>)
 80021f6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80021fa:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <unpack_cmd+0x138>)
 80021fc:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002200:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002202:	1d1c      	adds	r4, r3, #4
 8002204:	210c      	movs	r1, #12
 8002206:	eef0 0a47 	vmov.f32	s1, s14
 800220a:	eeb0 0a67 	vmov.f32	s0, s15
 800220e:	6938      	ldr	r0, [r7, #16]
 8002210:	f002 fbf6 	bl	8004a00 <uint_to_float>
 8002214:	eef0 7a40 	vmov.f32	s15, s0
 8002218:	edc4 7a00 	vstr	s15, [r4]
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 800221c:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <unpack_cmd+0x138>)
 800221e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002224:	f103 0408 	add.w	r4, r3, #8
 8002228:	210c      	movs	r1, #12
 800222a:	eef0 0a67 	vmov.f32	s1, s15
 800222e:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80022a4 <unpack_cmd+0x13c>
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f002 fbe4 	bl	8004a00 <uint_to_float>
 8002238:	eef0 7a40 	vmov.f32	s15, s0
 800223c:	edc4 7a00 	vstr	s15, [r4]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 8002240:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <unpack_cmd+0x138>)
 8002242:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002248:	f103 040c 	add.w	r4, r3, #12
 800224c:	210c      	movs	r1, #12
 800224e:	eef0 0a67 	vmov.f32	s1, s15
 8002252:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80022a4 <unpack_cmd+0x13c>
 8002256:	68b8      	ldr	r0, [r7, #8]
 8002258:	f002 fbd2 	bl	8004a00 <uint_to_float>
 800225c:	eef0 7a40 	vmov.f32	s15, s0
 8002260:	edc4 7a00 	vstr	s15, [r4]
        commands[4] = uint_to_float(t_int, -T_MAX, T_MAX, 12);
 8002264:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <unpack_cmd+0x138>)
 8002266:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800226a:	eef1 7a67 	vneg.f32	s15, s15
 800226e:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <unpack_cmd+0x138>)
 8002270:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8002274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002276:	f103 0410 	add.w	r4, r3, #16
 800227a:	210c      	movs	r1, #12
 800227c:	eef0 0a47 	vmov.f32	s1, s14
 8002280:	eeb0 0a67 	vmov.f32	s0, s15
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f002 fbbb 	bl	8004a00 <uint_to_float>
 800228a:	eef0 7a40 	vmov.f32	s15, s0
 800228e:	edc4 7a00 	vstr	s15, [r4]

//    printf("Received   ");
//    printf("%.3f  %.3f  %.3f  %.3f  %.3f",commands[0], commands[1], commands[2], commands[3], commands[4]);
//    printf("\n\r");
    }
 8002292:	bf00      	nop
 8002294:	371c      	adds	r7, #28
 8002296:	46bd      	mov	sp, r7
 8002298:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800229c:	b004      	add	sp, #16
 800229e:	4770      	bx	lr
 80022a0:	20000674 	.word	0x20000674
 80022a4:	00000000 	.word	0x00000000

080022a8 <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 80022a8:	b480      	push	{r7}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ba:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c0:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80022c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022d0:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80022da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e2:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80022ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f4:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 80022f8:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <set_dtc+0x140>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d136      	bne.n	800236e <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002300:	4b3a      	ldr	r3, [pc, #232]	; (80023ec <set_dtc+0x144>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	ee07 3a90 	vmov	s15, r3
 800230a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800230e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002316:	4b35      	ldr	r3, [pc, #212]	; (80023ec <set_dtc+0x144>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800231e:	ee17 2a90 	vmov	r2, s15
 8002322:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002324:	4b31      	ldr	r3, [pc, #196]	; (80023ec <set_dtc+0x144>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232a:	ee07 3a90 	vmov	s15, r3
 800232e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002332:	edd7 7a04 	vldr	s15, [r7, #16]
 8002336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233a:	4b2c      	ldr	r3, [pc, #176]	; (80023ec <set_dtc+0x144>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002342:	ee17 2a90 	vmov	r2, s15
 8002346:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 8002348:	4b28      	ldr	r3, [pc, #160]	; (80023ec <set_dtc+0x144>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	ee07 3a90 	vmov	s15, r3
 8002352:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002356:	edd7 7a03 	vldr	s15, [r7, #12]
 800235a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800235e:	4b23      	ldr	r3, [pc, #140]	; (80023ec <set_dtc+0x144>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002366:	ee17 2a90 	vmov	r2, s15
 800236a:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 800236c:	e035      	b.n	80023da <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 800236e:	4b1f      	ldr	r3, [pc, #124]	; (80023ec <set_dtc+0x144>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	ee07 3a90 	vmov	s15, r3
 8002378:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800237c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002384:	4b19      	ldr	r3, [pc, #100]	; (80023ec <set_dtc+0x144>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800238c:	ee17 2a90 	vmov	r2, s15
 8002390:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002392:	4b16      	ldr	r3, [pc, #88]	; (80023ec <set_dtc+0x144>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	ee07 3a90 	vmov	s15, r3
 800239c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80023a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a8:	4b10      	ldr	r3, [pc, #64]	; (80023ec <set_dtc+0x144>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023b0:	ee17 2a90 	vmov	r2, s15
 80023b4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <set_dtc+0x144>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023bc:	ee07 3a90 	vmov	s15, r3
 80023c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80023c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023cc:	4b07      	ldr	r3, [pc, #28]	; (80023ec <set_dtc+0x144>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023d4:	ee17 2a90 	vmov	r2, s15
 80023d8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80023da:	bf00      	nop
 80023dc:	371c      	adds	r7, #28
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20004d84 	.word	0x20004d84
 80023ec:	200053dc 	.word	0x200053dc

080023f0 <analog_sample>:

void analog_sample (ControllerStruct *controller){
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	/* Sample ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 80023f8:	4b41      	ldr	r3, [pc, #260]	; (8002500 <analog_sample+0x110>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d112      	bne.n	8002426 <analog_sample+0x36>
		controller->adc_a_raw = controller->ADC1_Val[0];
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 8002406:	461a      	mov	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = controller->ADC2_Val[0];
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 8002412:	461a      	mov	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	609a      	str	r2, [r3, #8]
		controller->adc_c_raw = controller->ADC2_Val[1];
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800241e:	461a      	mov	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	60da      	str	r2, [r3, #12]
 8002424:	e011      	b.n	800244a <analog_sample+0x5a>
	}
	else{
		controller->adc_a_raw = controller->ADC2_Val[0];
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 800242c:	461a      	mov	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = controller->ADC1_Val[0];
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 8002438:	461a      	mov	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	609a      	str	r2, [r3, #8]
		controller->adc_c_raw = controller->ADC2_Val[1];
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 8002444:	461a      	mov	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	60da      	str	r2, [r3, #12]
	}

    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)controller->ADC1_Val, 2);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8002450:	2202      	movs	r2, #2
 8002452:	4619      	mov	r1, r3
 8002454:	482b      	ldr	r0, [pc, #172]	; (8002504 <analog_sample+0x114>)
 8002456:	f003 ffb7 	bl	80063c8 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc2, (uint32_t *)controller->ADC2_Val, 2);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8002460:	2202      	movs	r2, #2
 8002462:	4619      	mov	r1, r3
 8002464:	4828      	ldr	r0, [pc, #160]	; (8002508 <analog_sample+0x118>)
 8002466:	f003 ffaf 	bl	80063c8 <HAL_ADC_Start_DMA>

	controller->adc_vbus_raw = controller->ADC1_Val[1];
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	; 0x2fa
 8002470:	461a      	mov	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002482:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800250c <analog_sample+0x11c>
 8002486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	edc3 7a08 	vstr	s15, [r3, #32]

	controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	ee07 3a90 	vmov	s15, r3
 80024a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002510 <analog_sample+0x120>
 80024a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	edc3 7a05 	vstr	s15, [r3, #20]
	controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002510 <analog_sample+0x120>
 80024ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	edc3 7a06 	vstr	s15, [r3, #24]
	controller->i_c = I_SCALE*(float)(controller->adc_c_raw - controller->adc_c_offset);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	ee07 3a90 	vmov	s15, r3
 80024e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024e8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002510 <analog_sample+0x120>
 80024ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	edc3 7a07 	vstr	s15, [r3, #28]

}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20004d84 	.word	0x20004d84
 8002504:	200002a0 	.word	0x200002a0
 8002508:	20000234 	.word	0x20000234
 800250c:	3c092822 	.word	0x3c092822
 8002510:	bcf0aa87 	.word	0xbcf0aa87

08002514 <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af00      	add	r7, sp, #0
 800251a:	ed87 0a05 	vstr	s0, [r7, #20]
 800251e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002522:	ed87 1a03 	vstr	s2, [r7, #12]
 8002526:	60b8      	str	r0, [r7, #8]
 8002528:	6079      	str	r1, [r7, #4]
 800252a:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 800252c:	ed97 0a05 	vldr	s0, [r7, #20]
 8002530:	f002 fad2 	bl	8004ad8 <cos_lut>
 8002534:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002538:	ed97 0a05 	vldr	s0, [r7, #20]
 800253c:	f002 fa92 	bl	8004a64 <sin_lut>
 8002540:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 8002544:	ed97 7a07 	vldr	s14, [r7, #28]
 8002548:	edd7 7a04 	vldr	s15, [r7, #16]
 800254c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002550:	edd7 6a06 	vldr	s13, [r7, #24]
 8002554:	edd7 7a03 	vldr	s15, [r7, #12]
 8002558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800255c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 8002566:	edd7 7a06 	vldr	s15, [r7, #24]
 800256a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002614 <abc+0x100>
 800256e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002572:	edd7 7a07 	vldr	s15, [r7, #28]
 8002576:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800257a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800257e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002582:	edd7 7a04 	vldr	s15, [r7, #16]
 8002586:	ee27 7a27 	vmul.f32	s14, s14, s15
 800258a:	edd7 7a07 	vldr	s15, [r7, #28]
 800258e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002618 <abc+0x104>
 8002592:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002596:	edd7 7a06 	vldr	s15, [r7, #24]
 800259a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800259e:	ee67 7a86 	vmul.f32	s15, s15, s12
 80025a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80025a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80025aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 80025b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80025bc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002618 <abc+0x104>
 80025c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80025c8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80025cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80025d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80025d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80025e0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002614 <abc+0x100>
 80025e4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80025e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80025ec:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80025f0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80025f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80025f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80025fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002600:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	edc3 7a00 	vstr	s15, [r3]
    }
 800260a:	bf00      	nop
 800260c:	3720      	adds	r7, #32
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	3f5db3d7 	.word	0x3f5db3d7
 8002618:	bf5db3d7 	.word	0xbf5db3d7

0800261c <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	ed87 0a05 	vstr	s0, [r7, #20]
 8002626:	edc7 0a04 	vstr	s1, [r7, #16]
 800262a:	ed87 1a03 	vstr	s2, [r7, #12]
 800262e:	edc7 1a02 	vstr	s3, [r7, #8]
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 8002636:	ed97 0a05 	vldr	s0, [r7, #20]
 800263a:	f002 fa4d 	bl	8004ad8 <cos_lut>
 800263e:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002642:	ed97 0a05 	vldr	s0, [r7, #20]
 8002646:	f002 fa0d 	bl	8004a64 <sin_lut>
 800264a:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 800264e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002652:	edd7 7a04 	vldr	s15, [r7, #16]
 8002656:	ee27 7a27 	vmul.f32	s14, s14, s15
 800265a:	edd7 7a06 	vldr	s15, [r7, #24]
 800265e:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002730 <dq0+0x114>
 8002662:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002666:	edd7 7a07 	vldr	s15, [r7, #28]
 800266a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800266e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002672:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002676:	edd7 7a03 	vldr	s15, [r7, #12]
 800267a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800267e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002682:	edd7 7a06 	vldr	s15, [r7, #24]
 8002686:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002734 <dq0+0x118>
 800268a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800268e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002692:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002696:	ee67 7a86 	vmul.f32	s15, s15, s12
 800269a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800269e:	edd7 7a02 	vldr	s15, [r7, #8]
 80026a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026aa:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002738 <dq0+0x11c>
 80026ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 80026b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80026bc:	eeb1 7a67 	vneg.f32	s14, s15
 80026c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80026c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80026cc:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002734 <dq0+0x118>
 80026d0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80026d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80026d8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80026dc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80026e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80026e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80026e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80026f4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002730 <dq0+0x114>
 80026f8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80026fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002700:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002704:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002708:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800270c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002718:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002738 <dq0+0x11c>
 800271c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	edc3 7a00 	vstr	s15, [r3]

    }
 8002726:	bf00      	nop
 8002728:	3720      	adds	r7, #32
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	3f5db3d7 	.word	0x3f5db3d7
 8002734:	bf5db3d7 	.word	0xbf5db3d7
 8002738:	3f2aaaab 	.word	0x3f2aaaab

0800273c <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 800273c:	b580      	push	{r7, lr}
 800273e:	ed2d 8b02 	vpush	{d8}
 8002742:	b08a      	sub	sp, #40	; 0x28
 8002744:	af00      	add	r7, sp, #0
 8002746:	ed87 0a07 	vstr	s0, [r7, #28]
 800274a:	edc7 0a06 	vstr	s1, [r7, #24]
 800274e:	ed87 1a05 	vstr	s2, [r7, #20]
 8002752:	edc7 1a04 	vstr	s3, [r7, #16]
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 800275c:	ed97 1a04 	vldr	s2, [r7, #16]
 8002760:	edd7 0a05 	vldr	s1, [r7, #20]
 8002764:	ed97 0a06 	vldr	s0, [r7, #24]
 8002768:	f002 f89a 	bl	80048a0 <fminf3>
 800276c:	eeb0 8a40 	vmov.f32	s16, s0
 8002770:	ed97 1a04 	vldr	s2, [r7, #16]
 8002774:	edd7 0a05 	vldr	s1, [r7, #20]
 8002778:	ed97 0a06 	vldr	s0, [r7, #24]
 800277c:	f002 f85c 	bl	8004838 <fmaxf3>
 8002780:	eef0 7a40 	vmov.f32	s15, s0
 8002784:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002788:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800278c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002790:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 8002794:	4b41      	ldr	r3, [pc, #260]	; (800289c <svm+0x160>)
 8002796:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002798:	ed97 7a06 	vldr	s14, [r7, #24]
 800279c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80027a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ac:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80028a0 <svm+0x164>
 80027b0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80027b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80027b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80027c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c4:	eddf 0a37 	vldr	s1, [pc, #220]	; 80028a4 <svm+0x168>
 80027c8:	eeb0 0a67 	vmov.f32	s0, s15
 80027cc:	f001 fffc 	bl	80047c8 <fast_fmaxf>
 80027d0:	eef0 7a40 	vmov.f32	s15, s0
 80027d4:	eddf 0a34 	vldr	s1, [pc, #208]	; 80028a8 <svm+0x16c>
 80027d8:	eeb0 0a67 	vmov.f32	s0, s15
 80027dc:	f002 f810 	bl	8004800 <fast_fminf>
 80027e0:	eef0 7a40 	vmov.f32	s15, s0
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80027ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80027ee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80027fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027fe:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80028a0 <svm+0x164>
 8002802:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002806:	edd7 7a07 	vldr	s15, [r7, #28]
 800280a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800280e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002816:	eddf 0a23 	vldr	s1, [pc, #140]	; 80028a4 <svm+0x168>
 800281a:	eeb0 0a67 	vmov.f32	s0, s15
 800281e:	f001 ffd3 	bl	80047c8 <fast_fmaxf>
 8002822:	eef0 7a40 	vmov.f32	s15, s0
 8002826:	eddf 0a20 	vldr	s1, [pc, #128]	; 80028a8 <svm+0x16c>
 800282a:	eeb0 0a67 	vmov.f32	s0, s15
 800282e:	f001 ffe7 	bl	8004800 <fast_fminf>
 8002832:	eef0 7a40 	vmov.f32	s15, s0
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 800283c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002840:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002844:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002848:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800284c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002850:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80028a0 <svm+0x164>
 8002854:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002858:	edd7 7a07 	vldr	s15, [r7, #28]
 800285c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002860:	edd7 7a08 	vldr	s15, [r7, #32]
 8002864:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002868:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80028a4 <svm+0x168>
 800286c:	eeb0 0a67 	vmov.f32	s0, s15
 8002870:	f001 ffaa 	bl	80047c8 <fast_fmaxf>
 8002874:	eef0 7a40 	vmov.f32	s15, s0
 8002878:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80028a8 <svm+0x16c>
 800287c:	eeb0 0a67 	vmov.f32	s0, s15
 8002880:	f001 ffbe 	bl	8004800 <fast_fminf>
 8002884:	eef0 7a40 	vmov.f32	s15, s0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	edc3 7a00 	vstr	s15, [r3]

    }
 800288e:	bf00      	nop
 8002890:	3728      	adds	r7, #40	; 0x28
 8002892:	46bd      	mov	sp, r7
 8002894:	ecbd 8b02 	vpop	{d8}
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	3ef0a3d7 	.word	0x3ef0a3d7
 80028a0:	3f933333 	.word	0x3f933333
 80028a4:	00000000 	.word	0x00000000
 80028a8:	3f70a3d7 	.word	0x3f70a3d7

080028ac <zero_current>:

void zero_current(ControllerStruct *controller){
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61fb      	str	r3, [r7, #28]
    int adc_b_offset = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
    int adc_c_offset = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
    int n = 1000;
 80028c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028c4:	60fb      	str	r3, [r7, #12]
    controller->dtc_u = 0.f;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	659a      	str	r2, [r3, #88]	; 0x58
    controller->dtc_v = 0.f;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_w = 0.f;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	661a      	str	r2, [r3, #96]	; 0x60
    set_dtc(controller);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff fce2 	bl	80022a8 <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 80028e4:	2300      	movs	r3, #0
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	e014      	b.n	8002914 <zero_current+0x68>
    	analog_sample(controller);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff fd80 	bl	80023f0 <analog_sample>
    	adc_a_offset += controller->adc_a_raw;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	4413      	add	r3, r2
 80028f8:	61fb      	str	r3, [r7, #28]
    	adc_b_offset += controller->adc_b_raw;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4413      	add	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
    	adc_c_offset += controller->adc_c_raw;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	4413      	add	r3, r2
 800290c:	617b      	str	r3, [r7, #20]
    for (int i = 0; i<n; i++){               // Average n samples
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	3301      	adds	r3, #1
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	429a      	cmp	r2, r3
 800291a:	dbe6      	blt.n	80028ea <zero_current+0x3e>
     }
    controller->adc_a_offset = adc_a_offset/n;
 800291c:	69fa      	ldr	r2, [r7, #28]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	fb92 f2f3 	sdiv	r2, r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    controller->adc_b_offset = adc_b_offset/n;
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	fb92 f2f3 	sdiv	r2, r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    controller->adc_c_offset = adc_c_offset/n;
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	fb92 f2f3 	sdiv	r2, r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    }
 8002946:	bf00      	nop
 8002948:	3720      	adds	r7, #32
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a42      	ldr	r2, [pc, #264]	; (8002a64 <init_controller_params+0x114>)
 800295c:	679a      	str	r2, [r3, #120]	; 0x78
    controller->ki_q = KI_Q;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a40      	ldr	r2, [pc, #256]	; (8002a64 <init_controller_params+0x114>)
 8002962:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->k_d = K_SCALE*I_BW;
 8002964:	4b40      	ldr	r3, [pc, #256]	; (8002a68 <init_controller_params+0x118>)
 8002966:	edd3 7a02 	vldr	s15, [r3, #8]
 800296a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002a6c <init_controller_params+0x11c>
 800296e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    controller->k_q = K_SCALE*I_BW;
 8002978:	4b3b      	ldr	r3, [pc, #236]	; (8002a68 <init_controller_params+0x118>)
 800297a:	edd3 7a02 	vldr	s15, [r3, #8]
 800297e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002a6c <init_controller_params+0x11c>
 8002982:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 800298c:	4b36      	ldr	r3, [pc, #216]	; (8002a68 <init_controller_params+0x118>)
 800298e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002992:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002a70 <init_controller_params+0x120>
 8002996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800299a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002a74 <init_controller_params+0x124>
 800299e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->ki_fw = .1f*controller->ki_d;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80029c6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002a78 <init_controller_params+0x128>
 80029ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
    controller->phase_order = PHASE_ORDER;
 80029d4:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <init_controller_params+0x12c>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	e036      	b.n	8002a52 <init_controller_params+0x102>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	ee07 3a90 	vmov	s15, r3
 80029ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ee:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002a80 <init_controller_params+0x130>
 80029f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029f6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002a84 <init_controller_params+0x134>
 80029fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80029fe:	ee16 0a90 	vmov	r0, s13
 8002a02:	f7fd fdc9 	bl	8000598 <__aeabi_f2d>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	ec43 2b10 	vmov	d0, r2, r3
 8002a0e:	f00f fa4b 	bl	8011ea8 <exp>
 8002a12:	ec51 0b10 	vmov	r0, r1, d0
 8002a16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a1a:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <init_controller_params+0x138>)
 8002a1c:	f7fd fe14 	bl	8000648 <__aeabi_dmul>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4610      	mov	r0, r2
 8002a26:	4619      	mov	r1, r3
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	4b17      	ldr	r3, [pc, #92]	; (8002a8c <init_controller_params+0x13c>)
 8002a2e:	f7fd fc55 	bl	80002dc <__adddf3>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4610      	mov	r0, r2
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f7fe f8fd 	bl	8000c38 <__aeabi_d2f>
 8002a3e:	4601      	mov	r1, r0
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	333c      	adds	r3, #60	; 0x3c
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b7f      	cmp	r3, #127	; 0x7f
 8002a56:	ddc5      	ble.n	80029e4 <init_controller_params+0x94>
    }
}
 8002a58:	bf00      	nop
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	3d3851ec 	.word	0x3d3851ec
 8002a68:	20000674 	.word	0x20000674
 8002a6c:	38d1b717 	.word	0x38d1b717
 8002a70:	388bcf64 	.word	0x388bcf64
 8002a74:	40c90fdb 	.word	0x40c90fdb
 8002a78:	3dcccccd 	.word	0x3dcccccd
 8002a7c:	20004d84 	.word	0x20004d84
 8002a80:	bc000000 	.word	0xbc000000
 8002a84:	3d03126f 	.word	0x3d03126f
 8002a88:	3ff33333 	.word	0x3ff33333
 8002a8c:	3ff00000 	.word	0x3ff00000

08002a90 <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002a98:	4b36      	ldr	r3, [pc, #216]	; (8002b74 <reset_foc+0xe4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	ee07 3a90 	vmov	s15, r3
 8002aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aae:	4b31      	ldr	r3, [pc, #196]	; (8002b74 <reset_foc+0xe4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ab6:	ee17 2a90 	vmov	r2, s15
 8002aba:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002abc:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <reset_foc+0xe4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac2:	ee07 3a90 	vmov	s15, r3
 8002ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ace:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad2:	4b28      	ldr	r3, [pc, #160]	; (8002b74 <reset_foc+0xe4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ada:	ee17 2a90 	vmov	r2, s15
 8002ade:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002ae0:	4b24      	ldr	r3, [pc, #144]	; (8002b74 <reset_foc+0xe4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae6:	ee07 3a90 	vmov	s15, r3
 8002aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002af2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002af6:	4b1f      	ldr	r3, [pc, #124]	; (8002b74 <reset_foc+0xe4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002afe:	ee17 2a90 	vmov	r2, s15
 8002b02:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    controller->i_q_des = 0;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller->i_d = 0;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    controller->d_int = 0;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    controller->v_q = 0;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	655a      	str	r2, [r3, #84]	; 0x54
    controller->v_d = 0;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	651a      	str	r2, [r3, #80]	; 0x50
    controller->fw_int = 0;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    controller->otw_flag = 0;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

    }
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	200053dc 	.word	0x200053dc

08002b78 <commutate>:


}

void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity/GR;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8002b98:	4bd7      	ldr	r3, [pc, #860]	; (8002ef8 <commutate+0x380>)
 8002b9a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002b9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	edd3 6a03 	vldr	s13, [r3, #12]
 8002bae:	4bd2      	ldr	r3, [pc, #840]	; (8002ef8 <commutate+0x380>)
 8002bb0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002bb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	ed93 7a05 	vldr	s14, [r3, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	edd3 6a06 	vldr	s13, [r3, #24]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	ed93 6a07 	vldr	s12, [r3, #28]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3340      	adds	r3, #64	; 0x40
 8002be0:	4619      	mov	r1, r3
 8002be2:	4610      	mov	r0, r2
 8002be4:	eef0 1a46 	vmov.f32	s3, s12
 8002be8:	eeb0 1a66 	vmov.f32	s2, s13
 8002bec:	eef0 0a47 	vmov.f32	s1, s14
 8002bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf4:	f7ff fd12 	bl	800261c <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002bfe:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8002efc <commutate+0x384>
 8002c02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002c0c:	eddf 6abc 	vldr	s13, [pc, #752]	; 8002f00 <commutate+0x388>
 8002c10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002c24:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002efc <commutate+0x384>
 8002c28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002c32:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8002f00 <commutate+0x388>
 8002c36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002c4a:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8002f04 <commutate+0x38c>
 8002c4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c58:	eddf 6aab 	vldr	s13, [pc, #684]	; 8002f08 <commutate+0x390>
 8002c5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002c70:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002f0c <commutate+0x394>
 8002c74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c78:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002f10 <commutate+0x398>
 8002c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c80:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8002f14 <commutate+0x39c>
 8002c84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 8002c8e:	4b9a      	ldr	r3, [pc, #616]	; (8002ef8 <commutate+0x380>)
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f103 01a4 	add.w	r1, r3, #164	; 0xa4
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8002caa:	eeb0 0a67 	vmov.f32	s0, s15
 8002cae:	4610      	mov	r0, r2
 8002cb0:	f001 fe2a 	bl	8004908 <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002cc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cc4:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd8:	edc7 7a06 	vstr	s15, [r7, #24]


       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8002cee:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002cfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d00:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002d1a:	eef0 0a47 	vmov.f32	s1, s14
 8002d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d22:	f001 fd6d 	bl	8004800 <fast_fminf>
 8002d26:	eeb0 7a40 	vmov.f32	s14, s0
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002d30:	eef1 7a67 	vneg.f32	s15, s15
 8002d34:	eef0 0a67 	vmov.f32	s1, s15
 8002d38:	eeb0 0a47 	vmov.f32	s0, s14
 8002d3c:	f001 fd44 	bl	80047c8 <fast_fmaxf>
 8002d40:	eef0 7a40 	vmov.f32	s15, s0
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002d5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d60:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002d7e:	eef0 0a47 	vmov.f32	s1, s14
 8002d82:	eeb0 0a67 	vmov.f32	s0, s15
 8002d86:	f001 fd3b 	bl	8004800 <fast_fminf>
 8002d8a:	eeb0 7a40 	vmov.f32	s14, s0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002d94:	eef1 7a67 	vneg.f32	s15, s15
 8002d98:	eef0 0a67 	vmov.f32	s1, s15
 8002d9c:	eeb0 0a47 	vmov.f32	s0, s14
 8002da0:	f001 fd12 	bl	80047c8 <fast_fmaxf>
 8002da4:	eef0 7a40 	vmov.f32	s15, s0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002dba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002dca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8002dd6:	f00f f8e1 	bl	8011f9c <sqrtf>
 8002dda:	ed87 0a03 	vstr	s0, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002de4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002de8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002df2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002df6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8002e16:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002e38:	eef0 0a47 	vmov.f32	s1, s14
 8002e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e40:	f001 fcde 	bl	8004800 <fast_fminf>
 8002e44:	eeb0 7a40 	vmov.f32	s14, s0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002e4e:	eef1 7a67 	vneg.f32	s15, s15
 8002e52:	eef0 0a67 	vmov.f32	s1, s15
 8002e56:	eeb0 0a47 	vmov.f32	s0, s14
 8002e5a:	f001 fcb5 	bl	80047c8 <fast_fmaxf>
 8002e5e:	eef0 7a40 	vmov.f32	s15, s0
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002e74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002e84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e90:	f00f f884 	bl	8011f9c <sqrtf>
 8002e94:	eef0 7a40 	vmov.f32	s15, s0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002ea4:	edd7 0a03 	vldr	s1, [r7, #12]
 8002ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8002eac:	f001 fca8 	bl	8004800 <fast_fminf>
 8002eb0:	eeb0 7a40 	vmov.f32	s14, s0
 8002eb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eb8:	eef1 7a67 	vneg.f32	s15, s15
 8002ebc:	eef0 0a67 	vmov.f32	s1, s15
 8002ec0:	eeb0 0a47 	vmov.f32	s0, s14
 8002ec4:	f001 fc80 	bl	80047c8 <fast_fmaxf>
 8002ec8:	eef0 7a40 	vmov.f32	s15, s0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ee8:	4610      	mov	r0, r2
 8002eea:	f001 fd0d 	bl	8004908 <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	e011      	b.n	8002f1c <commutate+0x3a4>
 8002ef8:	20000674 	.word	0x20000674
 8002efc:	3f7d70a4 	.word	0x3f7d70a4
 8002f00:	3c23d70a 	.word	0x3c23d70a
 8002f04:	3f666666 	.word	0x3f666666
 8002f08:	3dcccccd 	.word	0x3dcccccd
 8002f0c:	3f933333 	.word	0x3f933333
 8002f10:	3f70a3d7 	.word	0x3f70a3d7
 8002f14:	3f13cd3a 	.word	0x3f13cd3a
 8002f18:	38d1b716 	.word	0x38d1b716
 8002f1c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002f20:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8002f18 <commutate+0x3a0>
 8002f24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	336c      	adds	r3, #108	; 0x6c
 8002f48:	461a      	mov	r2, r3
 8002f4a:	eeb0 1a66 	vmov.f32	s2, s13
 8002f4e:	eef0 0a47 	vmov.f32	s1, s14
 8002f52:	eeb0 0a67 	vmov.f32	s0, s15
 8002f56:	f7ff fadd 	bl	8002514 <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	ed93 6a1b 	vldr	s12, [r3, #108]	; 0x6c
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3360      	adds	r3, #96	; 0x60
 8002f82:	461a      	mov	r2, r3
 8002f84:	eef0 1a46 	vmov.f32	s3, s12
 8002f88:	eeb0 1a66 	vmov.f32	s2, s13
 8002f8c:	eef0 0a47 	vmov.f32	s1, s14
 8002f90:	eeb0 0a67 	vmov.f32	s0, s15
 8002f94:	f7ff fbd2 	bl	800273c <svm>
       set_dtc(controller);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff f985 	bl	80022a8 <set_dtc>

    }
 8002f9e:	bf00      	nop
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop

08002fa8 <torque_control>:
void torque_control(ControllerStruct *controller){
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	edd3 6a32 	vldr	s13, [r3, #200]	; 0xc8
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002fc2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002fc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8002fd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	ed93 6a33 	vldr	s12, [r3, #204]	; 0xcc
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002fe6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002fea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ff2:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = torque_des/(KT*GR);
 8002ff6:	4b0d      	ldr	r3, [pc, #52]	; (800302c <torque_control+0x84>)
 8002ff8:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <torque_control+0x84>)
 8002ffe:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003002:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003006:	edd7 6a03 	vldr	s13, [r7, #12]
 800300a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    controller->i_d_des = 0.0f;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

}
 800301e:	bf00      	nop
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	20000674 	.word	0x20000674

08003030 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->kp = 0;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	controller->kd = 0;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	controller->p_des = 0;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	controller->v_des = 0;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	controller->i_q_des = 0;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "gatedrive.h"

 void run_fsm(FSMStruct * fsmstate){
 8003080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003082:	b085      	sub	sp, #20
 8003084:	af02      	add	r7, sp, #8
 8003086:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */
	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	785a      	ldrb	r2, [r3, #1]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d00d      	beq.n	80030b0 <run_fsm+0x30>
//		 printf("trans %i %i \r\n",fsmstate->state, fsmstate->next_state);
		 fsm_exit_state(fsmstate);		// safely exit the old state
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f929 	bl	80032ec <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	78db      	ldrb	r3, [r3, #3]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d006      	beq.n	80030b0 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	785a      	ldrb	r2, [r3, #1]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f8c4 	bl	8003238 <fsm_enter_state>
		 }

	 }

	 switch(fsmstate->state){
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b06      	cmp	r3, #6
 80030b6:	f200 80ab 	bhi.w	8003210 <run_fsm+0x190>
 80030ba:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <run_fsm+0x40>)
 80030bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c0:	0800320f 	.word	0x0800320f
 80030c4:	080030dd 	.word	0x080030dd
 80030c8:	080031c9 	.word	0x080031c9
 80030cc:	08003211 	.word	0x08003211
 80030d0:	0800320f 	.word	0x0800320f
 80030d4:	08003205 	.word	0x08003205
 80030d8:	0800320f 	.word	0x0800320f
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 80030dc:	4b4e      	ldr	r3, [pc, #312]	; (8003218 <run_fsm+0x198>)
 80030de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d108      	bne.n	80030f8 <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 80030e6:	4b4d      	ldr	r3, [pc, #308]	; (800321c <run_fsm+0x19c>)
 80030e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030ec:	4a4a      	ldr	r2, [pc, #296]	; (8003218 <run_fsm+0x198>)
 80030ee:	494b      	ldr	r1, [pc, #300]	; (800321c <run_fsm+0x19c>)
 80030f0:	484b      	ldr	r0, [pc, #300]	; (8003220 <run_fsm+0x1a0>)
 80030f2:	f7fe f963 	bl	80013bc <order_phases>
//				HAL_Delay(10);
//				zero_current(&controller);
//				HAL_Delay(100);
			 }

			 break;
 80030f6:	e08b      	b.n	8003210 <run_fsm+0x190>
			 else if(!comm_encoder_cal.done_cal){
 80030f8:	4b47      	ldr	r3, [pc, #284]	; (8003218 <run_fsm+0x198>)
 80030fa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d108      	bne.n	8003114 <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8003102:	4b46      	ldr	r3, [pc, #280]	; (800321c <run_fsm+0x19c>)
 8003104:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003108:	4a43      	ldr	r2, [pc, #268]	; (8003218 <run_fsm+0x198>)
 800310a:	4944      	ldr	r1, [pc, #272]	; (800321c <run_fsm+0x19c>)
 800310c:	4844      	ldr	r0, [pc, #272]	; (8003220 <run_fsm+0x1a0>)
 800310e:	f7fe fa6d 	bl	80015ec <calibrate_encoder>
			 break;
 8003112:	e07d      	b.n	8003210 <run_fsm+0x190>
				 E_ZERO = comm_encoder_cal.ezero;
 8003114:	4b40      	ldr	r3, [pc, #256]	; (8003218 <run_fsm+0x198>)
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	4a42      	ldr	r2, [pc, #264]	; (8003224 <run_fsm+0x1a4>)
 800311a:	6113      	str	r3, [r2, #16]
				 printf("E_ZERO: %d  PP: %.3f %f\r\n", E_ZERO, PPAIRS, TWO_PI_F*fmodf((PPAIRS*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 800311c:	4b41      	ldr	r3, [pc, #260]	; (8003224 <run_fsm+0x1a4>)
 800311e:	691e      	ldr	r6, [r3, #16]
 8003120:	4b41      	ldr	r3, [pc, #260]	; (8003228 <run_fsm+0x1a8>)
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	4618      	mov	r0, r3
 8003126:	f7fd fa37 	bl	8000598 <__aeabi_f2d>
 800312a:	4604      	mov	r4, r0
 800312c:	460d      	mov	r5, r1
 800312e:	4b3e      	ldr	r3, [pc, #248]	; (8003228 <run_fsm+0x1a8>)
 8003130:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003134:	4b3b      	ldr	r3, [pc, #236]	; (8003224 <run_fsm+0x1a4>)
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	425b      	negs	r3, r3
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003146:	eddf 6a39 	vldr	s13, [pc, #228]	; 800322c <run_fsm+0x1ac>
 800314a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800314e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003152:	eeb0 0a47 	vmov.f32	s0, s14
 8003156:	f00e fef5 	bl	8011f44 <fmodf>
 800315a:	eef0 7a40 	vmov.f32	s15, s0
 800315e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003230 <run_fsm+0x1b0>
 8003162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003166:	ee17 0a90 	vmov	r0, s15
 800316a:	f7fd fa15 	bl	8000598 <__aeabi_f2d>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	e9cd 2300 	strd	r2, r3, [sp]
 8003176:	4622      	mov	r2, r4
 8003178:	462b      	mov	r3, r5
 800317a:	4631      	mov	r1, r6
 800317c:	482d      	ldr	r0, [pc, #180]	; (8003234 <run_fsm+0x1b4>)
 800317e:	f00b f98d 	bl	800e49c <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 8003182:	4a27      	ldr	r2, [pc, #156]	; (8003220 <run_fsm+0x1a0>)
 8003184:	4b24      	ldr	r3, [pc, #144]	; (8003218 <run_fsm+0x198>)
 8003186:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800318a:	332c      	adds	r3, #44	; 0x2c
 800318c:	f102 00d8 	add.w	r0, r2, #216	; 0xd8
 8003190:	4619      	mov	r1, r3
 8003192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003196:	461a      	mov	r2, r3
 8003198:	f00a fce6 	bl	800db68 <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 800319c:	4a21      	ldr	r2, [pc, #132]	; (8003224 <run_fsm+0x1a4>)
 800319e:	4b1e      	ldr	r3, [pc, #120]	; (8003218 <run_fsm+0x198>)
 80031a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80031a4:	332c      	adds	r3, #44	; 0x2c
 80031a6:	f102 0018 	add.w	r0, r2, #24
 80031aa:	4619      	mov	r1, r3
 80031ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031b0:	461a      	mov	r2, r3
 80031b2:	f00a fcd9 	bl	800db68 <memcpy>
				 store_eeprom_regs();
 80031b6:	f002 fc87 	bl	8005ac8 <store_eeprom_regs>
				 load_eeprom_regs();
 80031ba:	f002 fc93 	bl	8005ae4 <load_eeprom_regs>
				 update_fsm(fsmstate, 27);
 80031be:	211b      	movs	r1, #27
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f8d9 	bl	8003378 <update_fsm>
			 break;
 80031c6:	e023      	b.n	8003210 <run_fsm+0x190>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 80031c8:	4b16      	ldr	r3, [pc, #88]	; (8003224 <run_fsm+0x1a4>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	dd0a      	ble.n	80031e6 <run_fsm+0x166>
 80031d0:	4b12      	ldr	r3, [pc, #72]	; (800321c <run_fsm+0x19c>)
 80031d2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80031d6:	4b13      	ldr	r3, [pc, #76]	; (8003224 <run_fsm+0x1a4>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	429a      	cmp	r2, r3
 80031dc:	dd03      	ble.n	80031e6 <run_fsm+0x166>
				 zero_commands(&controller);
 80031de:	480f      	ldr	r0, [pc, #60]	; (800321c <run_fsm+0x19c>)
 80031e0:	f7ff ff26 	bl	8003030 <zero_commands>
 80031e4:	e002      	b.n	80031ec <run_fsm+0x16c>
			 }
			 /* Otherwise, commutate */
			 else{
				 torque_control(&controller);
 80031e6:	480d      	ldr	r0, [pc, #52]	; (800321c <run_fsm+0x19c>)
 80031e8:	f7ff fede 	bl	8002fa8 <torque_control>
//				 field_weaken(&controller);
			 }
			 commutate(&controller, &comm_encoder);
 80031ec:	490c      	ldr	r1, [pc, #48]	; (8003220 <run_fsm+0x1a0>)
 80031ee:	480b      	ldr	r0, [pc, #44]	; (800321c <run_fsm+0x19c>)
 80031f0:	f7ff fcc2 	bl	8002b78 <commutate>
			 controller.timeout ++;
 80031f4:	4b09      	ldr	r3, [pc, #36]	; (800321c <run_fsm+0x19c>)
 80031f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031fa:	3301      	adds	r3, #1
 80031fc:	4a07      	ldr	r2, [pc, #28]	; (800321c <run_fsm+0x19c>)
 80031fe:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
			 break;
 8003202:	e005      	b.n	8003210 <run_fsm+0x190>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 8003204:	2164      	movs	r1, #100	; 0x64
 8003206:	4806      	ldr	r0, [pc, #24]	; (8003220 <run_fsm+0x1a0>)
 8003208:	f001 ff36 	bl	8005078 <ps_print>
			 break;
 800320c:	e000      	b.n	8003210 <run_fsm+0x190>
			 break;
 800320e:	bf00      	nop

		 case INIT_TEMP_MODE:
			 break;
	 }

 }
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003218:	20000a74 	.word	0x20000a74
 800321c:	20000774 	.word	0x20000774
 8003220:	20000480 	.word	0x20000480
 8003224:	20004d84 	.word	0x20004d84
 8003228:	20000674 	.word	0x20000674
 800322c:	45800000 	.word	0x45800000
 8003230:	40c90fdb 	.word	0x40c90fdb
 8003234:	080124e0 	.word	0x080124e0

08003238 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b05      	cmp	r3, #5
 8003246:	d841      	bhi.n	80032cc <fsm_enter_state+0x94>
 8003248:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <fsm_enter_state+0x18>)
 800324a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324e:	bf00      	nop
 8003250:	08003269 	.word	0x08003269
 8003254:	0800328d 	.word	0x0800328d
 8003258:	08003275 	.word	0x08003275
 800325c:	080032cd 	.word	0x080032cd
 8003260:	0800326f 	.word	0x0800326f
 8003264:	080032cb 	.word	0x080032cb
				case MENU_MODE:
//				printf("Entering Main Menu\r\n");
				enter_menu_state();
 8003268:	f000 f94c 	bl	8003504 <enter_menu_state>
				break;
 800326c:	e02e      	b.n	80032cc <fsm_enter_state+0x94>
			case SETUP_MODE:
//				printf("Entering Setup\r\n");
				enter_setup_state();
 800326e:	f000 f975 	bl	800355c <enter_setup_state>
				break;
 8003272:	e02b      	b.n	80032cc <fsm_enter_state+0x94>
			case ENCODER_MODE:
//				printf("Entering Encoder Mode\r\n");
				break;
			case MOTOR_MODE:
//				printf("Entering Motor Mode\r\n");
				HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 8003274:	2201      	movs	r2, #1
 8003276:	2140      	movs	r1, #64	; 0x40
 8003278:	4816      	ldr	r0, [pc, #88]	; (80032d4 <fsm_enter_state+0x9c>)
 800327a:	f005 fb5b 	bl	8008934 <HAL_GPIO_WritePin>
				reset_foc(&controller);
 800327e:	4816      	ldr	r0, [pc, #88]	; (80032d8 <fsm_enter_state+0xa0>)
 8003280:	f7ff fc06 	bl	8002a90 <reset_foc>
//				drv_enable_gd(drv);
				enable_gd(&controller);
 8003284:	4814      	ldr	r0, [pc, #80]	; (80032d8 <fsm_enter_state+0xa0>)
 8003286:	f000 fd9d 	bl	8003dc4 <enable_gd>

				break;
 800328a:	e01f      	b.n	80032cc <fsm_enter_state+0x94>
			case CALIBRATION_MODE:
//				printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 800328c:	4b13      	ldr	r3, [pc, #76]	; (80032dc <fsm_enter_state+0xa4>)
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 8003294:	4b11      	ldr	r3, [pc, #68]	; (80032dc <fsm_enter_state+0xa4>)
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 800329c:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <fsm_enter_state+0xa4>)
 800329e:	2200      	movs	r2, #0
 80032a0:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 80032a2:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <fsm_enter_state+0xa8>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 80032aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032ae:	2100      	movs	r1, #0
 80032b0:	480c      	ldr	r0, [pc, #48]	; (80032e4 <fsm_enter_state+0xac>)
 80032b2:	f00a fc81 	bl	800dbb8 <memset>
				PHASE_ORDER = 0;
 80032b6:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <fsm_enter_state+0xb0>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
//			   disable_gd(&controller);
//			   HAL_Delay(10);
			   zero_current(&controller);
 80032bc:	4806      	ldr	r0, [pc, #24]	; (80032d8 <fsm_enter_state+0xa0>)
 80032be:	f7ff faf5 	bl	80028ac <zero_current>
//			   HAL_Delay(100);

//				drv_enable_gd(drv);
				enable_gd(&controller);
 80032c2:	4805      	ldr	r0, [pc, #20]	; (80032d8 <fsm_enter_state+0xa0>)
 80032c4:	f000 fd7e 	bl	8003dc4 <enable_gd>
				break;
 80032c8:	e000      	b.n	80032cc <fsm_enter_state+0x94>
				break;
 80032ca:	bf00      	nop

		}
 }
 80032cc:	bf00      	nop
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	48000800 	.word	0x48000800
 80032d8:	20000774 	.word	0x20000774
 80032dc:	20000a74 	.word	0x20000a74
 80032e0:	20000480 	.word	0x20000480
 80032e4:	20000558 	.word	0x20000558
 80032e8:	20004d84 	.word	0x20004d84

080032ec <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b05      	cmp	r3, #5
 80032fa:	d834      	bhi.n	8003366 <fsm_exit_state+0x7a>
 80032fc:	a201      	add	r2, pc, #4	; (adr r2, 8003304 <fsm_exit_state+0x18>)
 80032fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003302:	bf00      	nop
 8003304:	0800331d 	.word	0x0800331d
 8003308:	08003359 	.word	0x08003359
 800330c:	08003335 	.word	0x08003335
 8003310:	08003367 	.word	0x08003367
 8003314:	08003325 	.word	0x08003325
 8003318:	0800332d 	.word	0x0800332d
			case MENU_MODE:
//				printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	70da      	strb	r2, [r3, #3]
				break;
 8003322:	e020      	b.n	8003366 <fsm_exit_state+0x7a>
			case SETUP_MODE:
//				printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	70da      	strb	r2, [r3, #3]
				break;
 800332a:	e01c      	b.n	8003366 <fsm_exit_state+0x7a>
			case ENCODER_MODE:
//				printf("Leaving Encoder Mode\r\n");
				fsmstate->ready = 1;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	70da      	strb	r2, [r3, #3]
				break;
 8003332:	e018      	b.n	8003366 <fsm_exit_state+0x7a>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
//				if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
					fsmstate->ready = 1;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	70da      	strb	r2, [r3, #3]
//					drv_disable_gd(drv);
					reset_foc(&controller);
 800333a:	480d      	ldr	r0, [pc, #52]	; (8003370 <fsm_exit_state+0x84>)
 800333c:	f7ff fba8 	bl	8002a90 <reset_foc>
					disable_gd(&controller);
 8003340:	480b      	ldr	r0, [pc, #44]	; (8003370 <fsm_exit_state+0x84>)
 8003342:	f000 fd65 	bl	8003e10 <disable_gd>
					HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 8003346:	2200      	movs	r2, #0
 8003348:	2140      	movs	r1, #64	; 0x40
 800334a:	480a      	ldr	r0, [pc, #40]	; (8003374 <fsm_exit_state+0x88>)
 800334c:	f005 faf2 	bl	8008934 <HAL_GPIO_WritePin>
//				}
				zero_commands(&controller);		// Set commands to zero
 8003350:	4807      	ldr	r0, [pc, #28]	; (8003370 <fsm_exit_state+0x84>)
 8003352:	f7ff fe6d 	bl	8003030 <zero_commands>
//				printf("Exiting Motor Mode\r\n");

				break;
 8003356:	e006      	b.n	8003366 <fsm_exit_state+0x7a>
			case CALIBRATION_MODE:
//				printf("Exiting Calibration Mode\r\n");
//				drv_disable_gd(drv);
				disable_gd(&controller);
 8003358:	4805      	ldr	r0, [pc, #20]	; (8003370 <fsm_exit_state+0x84>)
 800335a:	f000 fd59 	bl	8003e10 <disable_gd>
				//free(error_array);
				//free(lut_array);
				fsmstate->ready = 1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	70da      	strb	r2, [r3, #3]
				break;
 8003364:	bf00      	nop
		}

 }
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20000774 	.word	0x20000774
 8003374:	48000800 	.word	0x48000800

08003378 <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
//	 printf("%i %i %i\r\n",fsmstate->state, fsm_input, fsmstate->next_state);
	if(fsm_input == MENU_CMD){	// escape to exit do rest mode
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	2b1b      	cmp	r3, #27
 8003388:	d106      	bne.n	8003398 <update_fsm+0x20>
		fsmstate->next_state = MENU_MODE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	70da      	strb	r2, [r3, #3]
		return;
 8003396:	e0a9      	b.n	80034ec <update_fsm+0x174>
	}
	switch(fsmstate->state){
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b05      	cmp	r3, #5
 800339e:	f200 80a5 	bhi.w	80034ec <update_fsm+0x174>
 80033a2:	a201      	add	r2, pc, #4	; (adr r2, 80033a8 <update_fsm+0x30>)
 80033a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a8:	080033c1 	.word	0x080033c1
 80033ac:	080034ed 	.word	0x080034ed
 80033b0:	080034ed 	.word	0x080034ed
 80033b4:	080034ed 	.word	0x080034ed
 80033b8:	080034b1 	.word	0x080034b1
 80033bc:	080034ed 	.word	0x080034ed
		case MENU_MODE:
			switch (fsm_input){
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	3b63      	subs	r3, #99	; 0x63
 80033c4:	2b17      	cmp	r3, #23
 80033c6:	f200 8090 	bhi.w	80034ea <update_fsm+0x172>
 80033ca:	a201      	add	r2, pc, #4	; (adr r2, 80033d0 <update_fsm+0x58>)
 80033cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d0:	08003431 	.word	0x08003431
 80033d4:	080034eb 	.word	0x080034eb
 80033d8:	0800344d 	.word	0x0800344d
 80033dc:	080034eb 	.word	0x080034eb
 80033e0:	080034eb 	.word	0x080034eb
 80033e4:	080034eb 	.word	0x080034eb
 80033e8:	080034eb 	.word	0x080034eb
 80033ec:	080034eb 	.word	0x080034eb
 80033f0:	080034eb 	.word	0x080034eb
 80033f4:	080034eb 	.word	0x080034eb
 80033f8:	0800343f 	.word	0x0800343f
 80033fc:	080034eb 	.word	0x080034eb
 8003400:	080034eb 	.word	0x080034eb
 8003404:	080034eb 	.word	0x080034eb
 8003408:	080034eb 	.word	0x080034eb
 800340c:	080034eb 	.word	0x080034eb
 8003410:	0800345b 	.word	0x0800345b
 8003414:	080034eb 	.word	0x080034eb
 8003418:	080034eb 	.word	0x080034eb
 800341c:	080034eb 	.word	0x080034eb
 8003420:	080034eb 	.word	0x080034eb
 8003424:	080034eb 	.word	0x080034eb
 8003428:	080034eb 	.word	0x080034eb
 800342c:	08003469 	.word	0x08003469
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	70da      	strb	r2, [r3, #3]
					break;
 800343c:	e037      	b.n	80034ae <update_fsm+0x136>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2202      	movs	r2, #2
 8003442:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	70da      	strb	r2, [r3, #3]
					break;
 800344a:	e030      	b.n	80034ae <update_fsm+0x136>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2205      	movs	r2, #5
 8003450:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	70da      	strb	r2, [r3, #3]
					break;
 8003458:	e029      	b.n	80034ae <update_fsm+0x136>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2204      	movs	r2, #4
 800345e:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	70da      	strb	r2, [r3, #3]
					break;
 8003466:	e022      	b.n	80034ae <update_fsm+0x136>
				case ZERO_CMD:
					comm_encoder.mech_zero = 0.0f;
 8003468:	4b22      	ldr	r3, [pc, #136]	; (80034f4 <update_fsm+0x17c>)
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
					ps_sample(&comm_encoder, DT);
 8003472:	ed9f 0a21 	vldr	s0, [pc, #132]	; 80034f8 <update_fsm+0x180>
 8003476:	481f      	ldr	r0, [pc, #124]	; (80034f4 <update_fsm+0x17c>)
 8003478:	f001 fc9e 	bl	8004db8 <ps_sample>
					MECH_ZERO = comm_encoder.angle_multiturn[0];
 800347c:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <update_fsm+0x17c>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	4a1e      	ldr	r2, [pc, #120]	; (80034fc <update_fsm+0x184>)
 8003482:	65d3      	str	r3, [r2, #92]	; 0x5c
					comm_encoder.mech_zero = MECH_ZERO;
 8003484:	4b1d      	ldr	r3, [pc, #116]	; (80034fc <update_fsm+0x184>)
 8003486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003488:	4a1a      	ldr	r2, [pc, #104]	; (80034f4 <update_fsm+0x17c>)
 800348a:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc
					store_eeprom_regs();
 800348e:	f002 fb1b 	bl	8005ac8 <store_eeprom_regs>
					load_eeprom_regs();
 8003492:	f002 fb27 	bl	8005ae4 <load_eeprom_regs>
					printf("\n\r  Saved new zero position:  %.3f\n\r\n\r", comm_encoder.mech_zero);
 8003496:	4b17      	ldr	r3, [pc, #92]	; (80034f4 <update_fsm+0x17c>)
 8003498:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800349c:	4618      	mov	r0, r3
 800349e:	f7fd f87b 	bl	8000598 <__aeabi_f2d>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4816      	ldr	r0, [pc, #88]	; (8003500 <update_fsm+0x188>)
 80034a8:	f00a fff8 	bl	800e49c <iprintf>
					break;
 80034ac:	bf00      	nop
				}
			break;
 80034ae:	e01c      	b.n	80034ea <update_fsm+0x172>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 80034b0:	78fb      	ldrb	r3, [r7, #3]
 80034b2:	2b0d      	cmp	r3, #13
 80034b4:	d103      	bne.n	80034be <update_fsm+0x146>
				process_user_input(fsmstate);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f9c4 	bl	8003844 <process_user_input>
				break;
 80034bc:	e016      	b.n	80034ec <update_fsm+0x174>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	7b1b      	ldrb	r3, [r3, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d103      	bne.n	80034ce <update_fsm+0x156>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	735a      	strb	r2, [r3, #13]
 80034cc:	e006      	b.n	80034dc <update_fsm+0x164>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	7b1b      	ldrb	r3, [r3, #12]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	4413      	add	r3, r2
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	711a      	strb	r2, [r3, #4]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	7b1b      	ldrb	r3, [r3, #12]
 80034e0:	3301      	adds	r3, #1
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	731a      	strb	r2, [r3, #12]
			/* If enter is typed, process user input */

			break;
 80034e8:	e000      	b.n	80034ec <update_fsm+0x174>
			break;
 80034ea:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000480 	.word	0x20000480
 80034f8:	388bcf64 	.word	0x388bcf64
 80034fc:	20000674 	.word	0x20000674
 8003500:	080124fc 	.word	0x080124fc

08003504 <enter_menu_state>:


 void enter_menu_state(void){
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 8003508:	480c      	ldr	r0, [pc, #48]	; (800353c <enter_menu_state+0x38>)
 800350a:	f00a ffc7 	bl	800e49c <iprintf>
	    printf(" Commands:\n\r");
 800350e:	480c      	ldr	r0, [pc, #48]	; (8003540 <enter_menu_state+0x3c>)
 8003510:	f00a ffc4 	bl	800e49c <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003514:	480b      	ldr	r0, [pc, #44]	; (8003544 <enter_menu_state+0x40>)
 8003516:	f00a ffc1 	bl	800e49c <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 800351a:	480b      	ldr	r0, [pc, #44]	; (8003548 <enter_menu_state+0x44>)
 800351c:	f00a ffbe 	bl	800e49c <iprintf>
	    printf(" s - Setup\n\r");
 8003520:	480a      	ldr	r0, [pc, #40]	; (800354c <enter_menu_state+0x48>)
 8003522:	f00a ffbb 	bl	800e49c <iprintf>
	    printf(" e - Display Encoder\n\r");
 8003526:	480a      	ldr	r0, [pc, #40]	; (8003550 <enter_menu_state+0x4c>)
 8003528:	f00a ffb8 	bl	800e49c <iprintf>
	    printf(" z - Set Zero Position\n\r");
 800352c:	4809      	ldr	r0, [pc, #36]	; (8003554 <enter_menu_state+0x50>)
 800352e:	f00a ffb5 	bl	800e49c <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 8003532:	4809      	ldr	r0, [pc, #36]	; (8003558 <enter_menu_state+0x54>)
 8003534:	f00a ffb2 	bl	800e49c <iprintf>

	    //gpio.led->write(0);
 }
 8003538:	bf00      	nop
 800353a:	bd80      	pop	{r7, pc}
 800353c:	08012524 	.word	0x08012524
 8003540:	0801252c 	.word	0x0801252c
 8003544:	0801253c 	.word	0x0801253c
 8003548:	08012550 	.word	0x08012550
 800354c:	0801256c 	.word	0x0801256c
 8003550:	0801257c 	.word	0x0801257c
 8003554:	08012594 	.word	0x08012594
 8003558:	080125b0 	.word	0x080125b0

0800355c <enter_setup_state>:

 void enter_setup_state(void){
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 8003562:	487d      	ldr	r0, [pc, #500]	; (8003758 <enter_setup_state+0x1fc>)
 8003564:	f00a ff9a 	bl	800e49c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8003568:	4b7c      	ldr	r3, [pc, #496]	; (800375c <enter_setup_state+0x200>)
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	4b7c      	ldr	r3, [pc, #496]	; (8003760 <enter_setup_state+0x204>)
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	4b7c      	ldr	r3, [pc, #496]	; (8003764 <enter_setup_state+0x208>)
 8003572:	4a7d      	ldr	r2, [pc, #500]	; (8003768 <enter_setup_state+0x20c>)
 8003574:	497d      	ldr	r1, [pc, #500]	; (800376c <enter_setup_state+0x210>)
 8003576:	487e      	ldr	r0, [pc, #504]	; (8003770 <enter_setup_state+0x214>)
 8003578:	f00a ff90 	bl	800e49c <iprintf>
	    printf("\r\n Motor:\r\n");
 800357c:	487d      	ldr	r0, [pc, #500]	; (8003774 <enter_setup_state+0x218>)
 800357e:	f00b f813 	bl	800e5a8 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 8003582:	4b7d      	ldr	r3, [pc, #500]	; (8003778 <enter_setup_state+0x21c>)
 8003584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003586:	4618      	mov	r0, r3
 8003588:	f7fd f806 	bl	8000598 <__aeabi_f2d>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003594:	4b79      	ldr	r3, [pc, #484]	; (800377c <enter_setup_state+0x220>)
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	4b79      	ldr	r3, [pc, #484]	; (8003780 <enter_setup_state+0x224>)
 800359a:	4a7a      	ldr	r2, [pc, #488]	; (8003784 <enter_setup_state+0x228>)
 800359c:	497a      	ldr	r1, [pc, #488]	; (8003788 <enter_setup_state+0x22c>)
 800359e:	487b      	ldr	r0, [pc, #492]	; (800378c <enter_setup_state+0x230>)
 80035a0:	f00a ff7c 	bl	800e49c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 80035a4:	4b74      	ldr	r3, [pc, #464]	; (8003778 <enter_setup_state+0x21c>)
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fc fff5 	bl	8000598 <__aeabi_f2d>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035b6:	4b71      	ldr	r3, [pc, #452]	; (800377c <enter_setup_state+0x220>)
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	4b71      	ldr	r3, [pc, #452]	; (8003780 <enter_setup_state+0x224>)
 80035bc:	4a74      	ldr	r2, [pc, #464]	; (8003790 <enter_setup_state+0x234>)
 80035be:	4975      	ldr	r1, [pc, #468]	; (8003794 <enter_setup_state+0x238>)
 80035c0:	4875      	ldr	r0, [pc, #468]	; (8003798 <enter_setup_state+0x23c>)
 80035c2:	f00a ff6b 	bl	800e49c <iprintf>
	    printf("\r\n Control:\r\n");
 80035c6:	4875      	ldr	r0, [pc, #468]	; (800379c <enter_setup_state+0x240>)
 80035c8:	f00a ffee 	bl	800e5a8 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 80035cc:	4b6a      	ldr	r3, [pc, #424]	; (8003778 <enter_setup_state+0x21c>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fc ffe1 	bl	8000598 <__aeabi_f2d>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035de:	4b70      	ldr	r3, [pc, #448]	; (80037a0 <enter_setup_state+0x244>)
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	4b70      	ldr	r3, [pc, #448]	; (80037a4 <enter_setup_state+0x248>)
 80035e4:	4a70      	ldr	r2, [pc, #448]	; (80037a8 <enter_setup_state+0x24c>)
 80035e6:	4971      	ldr	r1, [pc, #452]	; (80037ac <enter_setup_state+0x250>)
 80035e8:	4871      	ldr	r0, [pc, #452]	; (80037b0 <enter_setup_state+0x254>)
 80035ea:	f00a ff57 	bl	800e49c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "60.0", I_MAX);
 80035ee:	4b62      	ldr	r3, [pc, #392]	; (8003778 <enter_setup_state+0x21c>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fc ffd0 	bl	8000598 <__aeabi_f2d>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003600:	4b6c      	ldr	r3, [pc, #432]	; (80037b4 <enter_setup_state+0x258>)
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	4b6c      	ldr	r3, [pc, #432]	; (80037b8 <enter_setup_state+0x25c>)
 8003606:	4a6d      	ldr	r2, [pc, #436]	; (80037bc <enter_setup_state+0x260>)
 8003608:	496d      	ldr	r1, [pc, #436]	; (80037c0 <enter_setup_state+0x264>)
 800360a:	4869      	ldr	r0, [pc, #420]	; (80037b0 <enter_setup_state+0x254>)
 800360c:	f00a ff46 	bl	800e49c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 8003610:	4b59      	ldr	r3, [pc, #356]	; (8003778 <enter_setup_state+0x21c>)
 8003612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003614:	4618      	mov	r0, r3
 8003616:	f7fc ffbf 	bl	8000598 <__aeabi_f2d>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003622:	4b56      	ldr	r3, [pc, #344]	; (800377c <enter_setup_state+0x220>)
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	4b55      	ldr	r3, [pc, #340]	; (800377c <enter_setup_state+0x220>)
 8003628:	4a66      	ldr	r2, [pc, #408]	; (80037c4 <enter_setup_state+0x268>)
 800362a:	4967      	ldr	r1, [pc, #412]	; (80037c8 <enter_setup_state+0x26c>)
 800362c:	4860      	ldr	r0, [pc, #384]	; (80037b0 <enter_setup_state+0x254>)
 800362e:	f00a ff35 	bl	800e49c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 8003632:	4b51      	ldr	r3, [pc, #324]	; (8003778 <enter_setup_state+0x21c>)
 8003634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003636:	4618      	mov	r0, r3
 8003638:	f7fc ffae 	bl	8000598 <__aeabi_f2d>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003644:	4b4d      	ldr	r3, [pc, #308]	; (800377c <enter_setup_state+0x220>)
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	4b4c      	ldr	r3, [pc, #304]	; (800377c <enter_setup_state+0x220>)
 800364a:	4a60      	ldr	r2, [pc, #384]	; (80037cc <enter_setup_state+0x270>)
 800364c:	4960      	ldr	r1, [pc, #384]	; (80037d0 <enter_setup_state+0x274>)
 800364e:	4858      	ldr	r0, [pc, #352]	; (80037b0 <enter_setup_state+0x254>)
 8003650:	f00a ff24 	bl	800e49c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 8003654:	4b48      	ldr	r3, [pc, #288]	; (8003778 <enter_setup_state+0x21c>)
 8003656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003658:	4618      	mov	r0, r3
 800365a:	f7fc ff9d 	bl	8000598 <__aeabi_f2d>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003666:	4b5b      	ldr	r3, [pc, #364]	; (80037d4 <enter_setup_state+0x278>)
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	4b53      	ldr	r3, [pc, #332]	; (80037b8 <enter_setup_state+0x25c>)
 800366c:	4a5a      	ldr	r2, [pc, #360]	; (80037d8 <enter_setup_state+0x27c>)
 800366e:	495b      	ldr	r1, [pc, #364]	; (80037dc <enter_setup_state+0x280>)
 8003670:	484f      	ldr	r0, [pc, #316]	; (80037b0 <enter_setup_state+0x254>)
 8003672:	f00a ff13 	bl	800e49c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 8003676:	4b40      	ldr	r3, [pc, #256]	; (8003778 <enter_setup_state+0x21c>)
 8003678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367a:	4618      	mov	r0, r3
 800367c:	f7fc ff8c 	bl	8000598 <__aeabi_f2d>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003688:	4b55      	ldr	r3, [pc, #340]	; (80037e0 <enter_setup_state+0x284>)
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	4b4a      	ldr	r3, [pc, #296]	; (80037b8 <enter_setup_state+0x25c>)
 800368e:	4a55      	ldr	r2, [pc, #340]	; (80037e4 <enter_setup_state+0x288>)
 8003690:	4955      	ldr	r1, [pc, #340]	; (80037e8 <enter_setup_state+0x28c>)
 8003692:	4847      	ldr	r0, [pc, #284]	; (80037b0 <enter_setup_state+0x254>)
 8003694:	f00a ff02 	bl	800e49c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 8003698:	4b37      	ldr	r3, [pc, #220]	; (8003778 <enter_setup_state+0x21c>)
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	4618      	mov	r0, r3
 800369e:	f7fc ff7b 	bl	8000598 <__aeabi_f2d>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036aa:	4b50      	ldr	r3, [pc, #320]	; (80037ec <enter_setup_state+0x290>)
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	4b42      	ldr	r3, [pc, #264]	; (80037b8 <enter_setup_state+0x25c>)
 80036b0:	4a4f      	ldr	r2, [pc, #316]	; (80037f0 <enter_setup_state+0x294>)
 80036b2:	4950      	ldr	r1, [pc, #320]	; (80037f4 <enter_setup_state+0x298>)
 80036b4:	483e      	ldr	r0, [pc, #248]	; (80037b0 <enter_setup_state+0x254>)
 80036b6:	f00a fef1 	bl	800e49c <iprintf>
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
//	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 80036ba:	4b2f      	ldr	r3, [pc, #188]	; (8003778 <enter_setup_state+0x21c>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fc ff6a 	bl	8000598 <__aeabi_f2d>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036cc:	4b4a      	ldr	r3, [pc, #296]	; (80037f8 <enter_setup_state+0x29c>)
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	4b39      	ldr	r3, [pc, #228]	; (80037b8 <enter_setup_state+0x25c>)
 80036d2:	4a4a      	ldr	r2, [pc, #296]	; (80037fc <enter_setup_state+0x2a0>)
 80036d4:	494a      	ldr	r1, [pc, #296]	; (8003800 <enter_setup_state+0x2a4>)
 80036d6:	4836      	ldr	r0, [pc, #216]	; (80037b0 <enter_setup_state+0x254>)
 80036d8:	f00a fee0 	bl	800e49c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "o", "Max Torque Setpoint (N-m)", "0.0", "-", T_MAX);
 80036dc:	4b26      	ldr	r3, [pc, #152]	; (8003778 <enter_setup_state+0x21c>)
 80036de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fc ff59 	bl	8000598 <__aeabi_f2d>
 80036e6:	4602      	mov	r2, r0
 80036e8:	460b      	mov	r3, r1
 80036ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036ee:	4b23      	ldr	r3, [pc, #140]	; (800377c <enter_setup_state+0x220>)
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <enter_setup_state+0x25c>)
 80036f4:	4a43      	ldr	r2, [pc, #268]	; (8003804 <enter_setup_state+0x2a8>)
 80036f6:	4944      	ldr	r1, [pc, #272]	; (8003808 <enter_setup_state+0x2ac>)
 80036f8:	482d      	ldr	r0, [pc, #180]	; (80037b0 <enter_setup_state+0x254>)
 80036fa:	f00a fecf 	bl	800e49c <iprintf>
	    printf("\r\n CAN:\r\n");
 80036fe:	4843      	ldr	r0, [pc, #268]	; (800380c <enter_setup_state+0x2b0>)
 8003700:	f00a ff52 	bl	800e5a8 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8003704:	4b42      	ldr	r3, [pc, #264]	; (8003810 <enter_setup_state+0x2b4>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	4b42      	ldr	r3, [pc, #264]	; (8003814 <enter_setup_state+0x2b8>)
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	4b1c      	ldr	r3, [pc, #112]	; (8003780 <enter_setup_state+0x224>)
 8003710:	4a41      	ldr	r2, [pc, #260]	; (8003818 <enter_setup_state+0x2bc>)
 8003712:	4942      	ldr	r1, [pc, #264]	; (800381c <enter_setup_state+0x2c0>)
 8003714:	4842      	ldr	r0, [pc, #264]	; (8003820 <enter_setup_state+0x2c4>)
 8003716:	f00a fec1 	bl	800e49c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN Master ID", "0", "127", CAN_MASTER);
 800371a:	4b3d      	ldr	r3, [pc, #244]	; (8003810 <enter_setup_state+0x2b4>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	9301      	str	r3, [sp, #4]
 8003720:	4b3c      	ldr	r3, [pc, #240]	; (8003814 <enter_setup_state+0x2b8>)
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	4b16      	ldr	r3, [pc, #88]	; (8003780 <enter_setup_state+0x224>)
 8003726:	4a3f      	ldr	r2, [pc, #252]	; (8003824 <enter_setup_state+0x2c8>)
 8003728:	493f      	ldr	r1, [pc, #252]	; (8003828 <enter_setup_state+0x2cc>)
 800372a:	483d      	ldr	r0, [pc, #244]	; (8003820 <enter_setup_state+0x2c4>)
 800372c:	f00a feb6 	bl	800e49c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 8003730:	4b37      	ldr	r3, [pc, #220]	; (8003810 <enter_setup_state+0x2b4>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	4b3d      	ldr	r3, [pc, #244]	; (800382c <enter_setup_state+0x2d0>)
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	4b11      	ldr	r3, [pc, #68]	; (8003780 <enter_setup_state+0x224>)
 800373c:	4a3c      	ldr	r2, [pc, #240]	; (8003830 <enter_setup_state+0x2d4>)
 800373e:	493d      	ldr	r1, [pc, #244]	; (8003834 <enter_setup_state+0x2d8>)
 8003740:	483d      	ldr	r0, [pc, #244]	; (8003838 <enter_setup_state+0x2dc>)
 8003742:	f00a feab 	bl	800e49c <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 8003746:	483d      	ldr	r0, [pc, #244]	; (800383c <enter_setup_state+0x2e0>)
 8003748:	f00a fea8 	bl	800e49c <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 800374c:	483c      	ldr	r0, [pc, #240]	; (8003840 <enter_setup_state+0x2e4>)
 800374e:	f00a fea5 	bl	800e49c <iprintf>
 }
 8003752:	bf00      	nop
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	080125c8 	.word	0x080125c8
 800375c:	0801261c 	.word	0x0801261c
 8003760:	0801262c 	.word	0x0801262c
 8003764:	080125e4 	.word	0x080125e4
 8003768:	080125e8 	.word	0x080125e8
 800376c:	080125f4 	.word	0x080125f4
 8003770:	080125fc 	.word	0x080125fc
 8003774:	08012630 	.word	0x08012630
 8003778:	20000674 	.word	0x20000674
 800377c:	08012670 	.word	0x08012670
 8003780:	0801263c 	.word	0x0801263c
 8003784:	08012640 	.word	0x08012640
 8003788:	0801264c 	.word	0x0801264c
 800378c:	08012650 	.word	0x08012650
 8003790:	08012674 	.word	0x08012674
 8003794:	0801268c 	.word	0x0801268c
 8003798:	08012690 	.word	0x08012690
 800379c:	080126b0 	.word	0x080126b0
 80037a0:	08012700 	.word	0x08012700
 80037a4:	080126c0 	.word	0x080126c0
 80037a8:	080126c4 	.word	0x080126c4
 80037ac:	080126dc 	.word	0x080126dc
 80037b0:	080126e0 	.word	0x080126e0
 80037b4:	08012724 	.word	0x08012724
 80037b8:	08012708 	.word	0x08012708
 80037bc:	0801270c 	.word	0x0801270c
 80037c0:	08012720 	.word	0x08012720
 80037c4:	0801272c 	.word	0x0801272c
 80037c8:	08012748 	.word	0x08012748
 80037cc:	0801274c 	.word	0x0801274c
 80037d0:	0801276c 	.word	0x0801276c
 80037d4:	08012790 	.word	0x08012790
 80037d8:	08012770 	.word	0x08012770
 80037dc:	0801278c 	.word	0x0801278c
 80037e0:	080127bc 	.word	0x080127bc
 80037e4:	08012798 	.word	0x08012798
 80037e8:	080127b8 	.word	0x080127b8
 80037ec:	080127dc 	.word	0x080127dc
 80037f0:	080127c0 	.word	0x080127c0
 80037f4:	080127d8 	.word	0x080127d8
 80037f8:	08012800 	.word	0x08012800
 80037fc:	080127e4 	.word	0x080127e4
 8003800:	080127fc 	.word	0x080127fc
 8003804:	08012808 	.word	0x08012808
 8003808:	08012824 	.word	0x08012824
 800380c:	08012828 	.word	0x08012828
 8003810:	20004d84 	.word	0x20004d84
 8003814:	08012860 	.word	0x08012860
 8003818:	08012834 	.word	0x08012834
 800381c:	0801283c 	.word	0x0801283c
 8003820:	08012840 	.word	0x08012840
 8003824:	08012864 	.word	0x08012864
 8003828:	08012874 	.word	0x08012874
 800382c:	080128b8 	.word	0x080128b8
 8003830:	08012878 	.word	0x08012878
 8003834:	08012898 	.word	0x08012898
 8003838:	0801289c 	.word	0x0801289c
 800383c:	080128c0 	.word	0x080128c0
 8003840:	0801290c 	.word	0x0801290c

08003844 <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	7b5b      	ldrb	r3, [r3, #13]
 8003850:	3b61      	subs	r3, #97	; 0x61
 8003852:	2b17      	cmp	r3, #23
 8003854:	f200 828a 	bhi.w	8003d6c <process_user_input+0x528>
 8003858:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <process_user_input+0x1c>)
 800385a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385e:	bf00      	nop
 8003860:	08003abf 	.word	0x08003abf
 8003864:	080038c1 	.word	0x080038c1
 8003868:	08003a6b 	.word	0x08003a6b
 800386c:	08003c3d 	.word	0x08003c3d
 8003870:	08003d6d 	.word	0x08003d6d
 8003874:	080039a5 	.word	0x080039a5
 8003878:	08003b13 	.word	0x08003b13
 800387c:	08003a17 	.word	0x08003a17
 8003880:	08003915 	.word	0x08003915
 8003884:	08003d6d 	.word	0x08003d6d
 8003888:	08003b57 	.word	0x08003b57
 800388c:	08003951 	.word	0x08003951
 8003890:	08003933 	.word	0x08003933
 8003894:	08003d6d 	.word	0x08003d6d
 8003898:	08003d29 	.word	0x08003d29
 800389c:	08003c81 	.word	0x08003c81
 80038a0:	08003d6d 	.word	0x08003d6d
 80038a4:	08003d6d 	.word	0x08003d6d
 80038a8:	08003d6d 	.word	0x08003d6d
 80038ac:	080039f9 	.word	0x080039f9
 80038b0:	08003d6d 	.word	0x08003d6d
 80038b4:	08003cd5 	.word	0x08003cd5
 80038b8:	08003d6d 	.word	0x08003d6d
 80038bc:	08003b9b 	.word	0x08003b9b
		 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3304      	adds	r3, #4
 80038c4:	4618      	mov	r0, r3
 80038c6:	f00a f91d 	bl	800db04 <atof>
 80038ca:	ec53 2b10 	vmov	r2, r3, d0
 80038ce:	4610      	mov	r0, r2
 80038d0:	4619      	mov	r1, r3
 80038d2:	f7fd f9b1 	bl	8000c38 <__aeabi_d2f>
 80038d6:	4603      	mov	r3, r0
 80038d8:	eddf 0ac1 	vldr	s1, [pc, #772]	; 8003be0 <process_user_input+0x39c>
 80038dc:	ee00 3a10 	vmov	s0, r3
 80038e0:	f00e faa9 	bl	8011e36 <fminf>
 80038e4:	eef0 7a40 	vmov.f32	s15, s0
 80038e8:	eddf 0abe 	vldr	s1, [pc, #760]	; 8003be4 <process_user_input+0x3a0>
 80038ec:	eeb0 0a67 	vmov.f32	s0, s15
 80038f0:	f00e fa86 	bl	8011e00 <fmaxf>
 80038f4:	eef0 7a40 	vmov.f32	s15, s0
 80038f8:	4bbb      	ldr	r3, [pc, #748]	; (8003be8 <process_user_input+0x3a4>)
 80038fa:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 80038fe:	4bba      	ldr	r3, [pc, #744]	; (8003be8 <process_user_input+0x3a4>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	4618      	mov	r0, r3
 8003904:	f7fc fe48 	bl	8000598 <__aeabi_f2d>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	48b7      	ldr	r0, [pc, #732]	; (8003bec <process_user_input+0x3a8>)
 800390e:	f00a fdc5 	bl	800e49c <iprintf>
			 break;
 8003912:	e232      	b.n	8003d7a <process_user_input+0x536>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3304      	adds	r3, #4
 8003918:	4618      	mov	r0, r3
 800391a:	f00a f8f6 	bl	800db0a <atoi>
 800391e:	4603      	mov	r3, r0
 8003920:	4ab3      	ldr	r2, [pc, #716]	; (8003bf0 <process_user_input+0x3ac>)
 8003922:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 8003924:	4bb2      	ldr	r3, [pc, #712]	; (8003bf0 <process_user_input+0x3ac>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	4619      	mov	r1, r3
 800392a:	48b2      	ldr	r0, [pc, #712]	; (8003bf4 <process_user_input+0x3b0>)
 800392c:	f00a fdb6 	bl	800e49c <iprintf>
			 break;
 8003930:	e223      	b.n	8003d7a <process_user_input+0x536>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3304      	adds	r3, #4
 8003936:	4618      	mov	r0, r3
 8003938:	f00a f8e7 	bl	800db0a <atoi>
 800393c:	4603      	mov	r3, r0
 800393e:	4aac      	ldr	r2, [pc, #688]	; (8003bf0 <process_user_input+0x3ac>)
 8003940:	6093      	str	r3, [r2, #8]
			 printf("CAN_MASTER set to %d\r\n", CAN_MASTER);
 8003942:	4bab      	ldr	r3, [pc, #684]	; (8003bf0 <process_user_input+0x3ac>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	4619      	mov	r1, r3
 8003948:	48ab      	ldr	r0, [pc, #684]	; (8003bf8 <process_user_input+0x3b4>)
 800394a:	f00a fda7 	bl	800e49c <iprintf>
			 break;
 800394e:	e214      	b.n	8003d7a <process_user_input+0x536>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 60.0f), 0.0f);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3304      	adds	r3, #4
 8003954:	4618      	mov	r0, r3
 8003956:	f00a f8d5 	bl	800db04 <atof>
 800395a:	ec53 2b10 	vmov	r2, r3, d0
 800395e:	4610      	mov	r0, r2
 8003960:	4619      	mov	r1, r3
 8003962:	f7fd f969 	bl	8000c38 <__aeabi_d2f>
 8003966:	4603      	mov	r3, r0
 8003968:	eddf 0aa4 	vldr	s1, [pc, #656]	; 8003bfc <process_user_input+0x3b8>
 800396c:	ee00 3a10 	vmov	s0, r3
 8003970:	f00e fa61 	bl	8011e36 <fminf>
 8003974:	eef0 7a40 	vmov.f32	s15, s0
 8003978:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8003c38 <process_user_input+0x3f4>
 800397c:	eeb0 0a67 	vmov.f32	s0, s15
 8003980:	f00e fa3e 	bl	8011e00 <fmaxf>
 8003984:	eef0 7a40 	vmov.f32	s15, s0
 8003988:	4b97      	ldr	r3, [pc, #604]	; (8003be8 <process_user_input+0x3a4>)
 800398a:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 800398e:	4b96      	ldr	r3, [pc, #600]	; (8003be8 <process_user_input+0x3a4>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	4618      	mov	r0, r3
 8003994:	f7fc fe00 	bl	8000598 <__aeabi_f2d>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4898      	ldr	r0, [pc, #608]	; (8003c00 <process_user_input+0x3bc>)
 800399e:	f00a fd7d 	bl	800e49c <iprintf>
			 break;
 80039a2:	e1ea      	b.n	8003d7a <process_user_input+0x536>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3304      	adds	r3, #4
 80039a8:	4618      	mov	r0, r3
 80039aa:	f00a f8ab 	bl	800db04 <atof>
 80039ae:	ec53 2b10 	vmov	r2, r3, d0
 80039b2:	4610      	mov	r0, r2
 80039b4:	4619      	mov	r1, r3
 80039b6:	f7fd f93f 	bl	8000c38 <__aeabi_d2f>
 80039ba:	4603      	mov	r3, r0
 80039bc:	eddf 0a91 	vldr	s1, [pc, #580]	; 8003c04 <process_user_input+0x3c0>
 80039c0:	ee00 3a10 	vmov	s0, r3
 80039c4:	f00e fa37 	bl	8011e36 <fminf>
 80039c8:	eef0 7a40 	vmov.f32	s15, s0
 80039cc:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8003c38 <process_user_input+0x3f4>
 80039d0:	eeb0 0a67 	vmov.f32	s0, s15
 80039d4:	f00e fa14 	bl	8011e00 <fmaxf>
 80039d8:	eef0 7a40 	vmov.f32	s15, s0
 80039dc:	4b82      	ldr	r3, [pc, #520]	; (8003be8 <process_user_input+0x3a4>)
 80039de:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 80039e2:	4b81      	ldr	r3, [pc, #516]	; (8003be8 <process_user_input+0x3a4>)
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fc fdd6 	bl	8000598 <__aeabi_f2d>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4885      	ldr	r0, [pc, #532]	; (8003c08 <process_user_input+0x3c4>)
 80039f2:	f00a fd53 	bl	800e49c <iprintf>
			 break;
 80039f6:	e1c0      	b.n	8003d7a <process_user_input+0x536>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3304      	adds	r3, #4
 80039fc:	4618      	mov	r0, r3
 80039fe:	f00a f884 	bl	800db0a <atoi>
 8003a02:	4603      	mov	r3, r0
 8003a04:	4a7a      	ldr	r2, [pc, #488]	; (8003bf0 <process_user_input+0x3ac>)
 8003a06:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 8003a08:	4b79      	ldr	r3, [pc, #484]	; (8003bf0 <process_user_input+0x3ac>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	487f      	ldr	r0, [pc, #508]	; (8003c0c <process_user_input+0x3c8>)
 8003a10:	f00a fd44 	bl	800e49c <iprintf>
			 break;
 8003a14:	e1b1      	b.n	8003d7a <process_user_input+0x536>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f00a f872 	bl	800db04 <atof>
 8003a20:	ec53 2b10 	vmov	r2, r3, d0
 8003a24:	4610      	mov	r0, r2
 8003a26:	4619      	mov	r1, r3
 8003a28:	f7fd f906 	bl	8000c38 <__aeabi_d2f>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	eddf 0a78 	vldr	s1, [pc, #480]	; 8003c10 <process_user_input+0x3cc>
 8003a32:	ee00 3a10 	vmov	s0, r3
 8003a36:	f00e f9fe 	bl	8011e36 <fminf>
 8003a3a:	eef0 7a40 	vmov.f32	s15, s0
 8003a3e:	eddf 0a7e 	vldr	s1, [pc, #504]	; 8003c38 <process_user_input+0x3f4>
 8003a42:	eeb0 0a67 	vmov.f32	s0, s15
 8003a46:	f00e f9db 	bl	8011e00 <fmaxf>
 8003a4a:	eef0 7a40 	vmov.f32	s15, s0
 8003a4e:	4b66      	ldr	r3, [pc, #408]	; (8003be8 <process_user_input+0x3a4>)
 8003a50:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 8003a54:	4b64      	ldr	r3, [pc, #400]	; (8003be8 <process_user_input+0x3a4>)
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fc fd9d 	bl	8000598 <__aeabi_f2d>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	486c      	ldr	r0, [pc, #432]	; (8003c14 <process_user_input+0x3d0>)
 8003a64:	f00a fd1a 	bl	800e49c <iprintf>
			 break;
 8003a68:	e187      	b.n	8003d7a <process_user_input+0x536>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f00a f848 	bl	800db04 <atof>
 8003a74:	ec53 2b10 	vmov	r2, r3, d0
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	f7fd f8dc 	bl	8000c38 <__aeabi_d2f>
 8003a80:	4603      	mov	r3, r0
 8003a82:	eddf 0a65 	vldr	s1, [pc, #404]	; 8003c18 <process_user_input+0x3d4>
 8003a86:	ee00 3a10 	vmov	s0, r3
 8003a8a:	f00e f9d4 	bl	8011e36 <fminf>
 8003a8e:	eef0 7a40 	vmov.f32	s15, s0
 8003a92:	eddf 0a69 	vldr	s1, [pc, #420]	; 8003c38 <process_user_input+0x3f4>
 8003a96:	eeb0 0a67 	vmov.f32	s0, s15
 8003a9a:	f00e f9b1 	bl	8011e00 <fmaxf>
 8003a9e:	eef0 7a40 	vmov.f32	s15, s0
 8003aa2:	4b51      	ldr	r3, [pc, #324]	; (8003be8 <process_user_input+0x3a4>)
 8003aa4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 8003aa8:	4b4f      	ldr	r3, [pc, #316]	; (8003be8 <process_user_input+0x3a4>)
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fc fd73 	bl	8000598 <__aeabi_f2d>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4859      	ldr	r0, [pc, #356]	; (8003c1c <process_user_input+0x3d8>)
 8003ab8:	f00a fcf0 	bl	800e49c <iprintf>
			 break;
 8003abc:	e15d      	b.n	8003d7a <process_user_input+0x536>
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f00a f81e 	bl	800db04 <atof>
 8003ac8:	ec53 2b10 	vmov	r2, r3, d0
 8003acc:	4610      	mov	r0, r2
 8003ace:	4619      	mov	r1, r3
 8003ad0:	f7fd f8b2 	bl	8000c38 <__aeabi_d2f>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8003ada:	ee00 3a10 	vmov	s0, r3
 8003ade:	f00e f9aa 	bl	8011e36 <fminf>
 8003ae2:	eef0 7a40 	vmov.f32	s15, s0
 8003ae6:	eddf 0a54 	vldr	s1, [pc, #336]	; 8003c38 <process_user_input+0x3f4>
 8003aea:	eeb0 0a67 	vmov.f32	s0, s15
 8003aee:	f00e f987 	bl	8011e00 <fmaxf>
 8003af2:	eef0 7a40 	vmov.f32	s15, s0
 8003af6:	4b3c      	ldr	r3, [pc, #240]	; (8003be8 <process_user_input+0x3a4>)
 8003af8:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			 printf("I_CAL set to %f\r\n", I_CAL);
 8003afc:	4b3a      	ldr	r3, [pc, #232]	; (8003be8 <process_user_input+0x3a4>)
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fc fd49 	bl	8000598 <__aeabi_f2d>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4845      	ldr	r0, [pc, #276]	; (8003c20 <process_user_input+0x3dc>)
 8003b0c:	f00a fcc6 	bl	800e49c <iprintf>
			 break;
 8003b10:	e133      	b.n	8003d7a <process_user_input+0x536>
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3304      	adds	r3, #4
 8003b16:	4618      	mov	r0, r3
 8003b18:	f009 fff4 	bl	800db04 <atof>
 8003b1c:	ec53 2b10 	vmov	r2, r3, d0
 8003b20:	4610      	mov	r0, r2
 8003b22:	4619      	mov	r1, r3
 8003b24:	f7fd f888 	bl	8000c38 <__aeabi_d2f>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8003c24 <process_user_input+0x3e0>
 8003b2e:	ee00 3a10 	vmov	s0, r3
 8003b32:	f00e f965 	bl	8011e00 <fmaxf>
 8003b36:	eef0 7a40 	vmov.f32	s15, s0
 8003b3a:	4b2b      	ldr	r3, [pc, #172]	; (8003be8 <process_user_input+0x3a4>)
 8003b3c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			 printf("GR set to %f\r\n", GR);
 8003b40:	4b29      	ldr	r3, [pc, #164]	; (8003be8 <process_user_input+0x3a4>)
 8003b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fc fd27 	bl	8000598 <__aeabi_f2d>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4836      	ldr	r0, [pc, #216]	; (8003c28 <process_user_input+0x3e4>)
 8003b50:	f00a fca4 	bl	800e49c <iprintf>
			 break;
 8003b54:	e111      	b.n	8003d7a <process_user_input+0x536>
		 case 'k':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f009 ffd2 	bl	800db04 <atof>
 8003b60:	ec53 2b10 	vmov	r2, r3, d0
 8003b64:	4610      	mov	r0, r2
 8003b66:	4619      	mov	r1, r3
 8003b68:	f7fd f866 	bl	8000c38 <__aeabi_d2f>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8003c2c <process_user_input+0x3e8>
 8003b72:	ee00 3a10 	vmov	s0, r3
 8003b76:	f00e f943 	bl	8011e00 <fmaxf>
 8003b7a:	eef0 7a40 	vmov.f32	s15, s0
 8003b7e:	4b1a      	ldr	r3, [pc, #104]	; (8003be8 <process_user_input+0x3a4>)
 8003b80:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			 printf("KT set to %f\r\n", KT);
 8003b84:	4b18      	ldr	r3, [pc, #96]	; (8003be8 <process_user_input+0x3a4>)
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fc fd05 	bl	8000598 <__aeabi_f2d>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4827      	ldr	r0, [pc, #156]	; (8003c30 <process_user_input+0x3ec>)
 8003b94:	f00a fc82 	bl	800e49c <iprintf>
			 break;
 8003b98:	e0ef      	b.n	8003d7a <process_user_input+0x536>
		 case 'x':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f009 ffb0 	bl	800db04 <atof>
 8003ba4:	ec53 2b10 	vmov	r2, r3, d0
 8003ba8:	4610      	mov	r0, r2
 8003baa:	4619      	mov	r1, r3
 8003bac:	f7fd f844 	bl	8000c38 <__aeabi_d2f>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	eddf 0a21 	vldr	s1, [pc, #132]	; 8003c38 <process_user_input+0x3f4>
 8003bb6:	ee00 3a10 	vmov	s0, r3
 8003bba:	f00e f921 	bl	8011e00 <fmaxf>
 8003bbe:	eef0 7a40 	vmov.f32	s15, s0
 8003bc2:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <process_user_input+0x3a4>)
 8003bc4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 8003bc8:	4b07      	ldr	r3, [pc, #28]	; (8003be8 <process_user_input+0x3a4>)
 8003bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fc fce3 	bl	8000598 <__aeabi_f2d>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4817      	ldr	r0, [pc, #92]	; (8003c34 <process_user_input+0x3f0>)
 8003bd8:	f00a fc60 	bl	800e49c <iprintf>
			 break;
 8003bdc:	e0cd      	b.n	8003d7a <process_user_input+0x536>
 8003bde:	bf00      	nop
 8003be0:	44fa0000 	.word	0x44fa0000
 8003be4:	42c80000 	.word	0x42c80000
 8003be8:	20000674 	.word	0x20000674
 8003bec:	08012938 	.word	0x08012938
 8003bf0:	20004d84 	.word	0x20004d84
 8003bf4:	0801294c 	.word	0x0801294c
 8003bf8:	08012960 	.word	0x08012960
 8003bfc:	42700000 	.word	0x42700000
 8003c00:	08012978 	.word	0x08012978
 8003c04:	42040000 	.word	0x42040000
 8003c08:	0801298c 	.word	0x0801298c
 8003c0c:	080129a4 	.word	0x080129a4
 8003c10:	43160000 	.word	0x43160000
 8003c14:	080129bc 	.word	0x080129bc
 8003c18:	42200000 	.word	0x42200000
 8003c1c:	080129d4 	.word	0x080129d4
 8003c20:	080129ec 	.word	0x080129ec
 8003c24:	3a83126f 	.word	0x3a83126f
 8003c28:	08012a00 	.word	0x08012a00
 8003c2c:	38d1b717 	.word	0x38d1b717
 8003c30:	08012a10 	.word	0x08012a10
 8003c34:	08012a20 	.word	0x08012a20
 8003c38:	00000000 	.word	0x00000000
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	4618      	mov	r0, r3
 8003c42:	f009 ff5f 	bl	800db04 <atof>
 8003c46:	ec53 2b10 	vmov	r2, r3, d0
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	f7fc fff3 	bl	8000c38 <__aeabi_d2f>
 8003c52:	4603      	mov	r3, r0
 8003c54:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 8003c38 <process_user_input+0x3f4>
 8003c58:	ee00 3a10 	vmov	s0, r3
 8003c5c:	f00e f8d0 	bl	8011e00 <fmaxf>
 8003c60:	eef0 7a40 	vmov.f32	s15, s0
 8003c64:	4b50      	ldr	r3, [pc, #320]	; (8003da8 <process_user_input+0x564>)
 8003c66:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 8003c6a:	4b4f      	ldr	r3, [pc, #316]	; (8003da8 <process_user_input+0x564>)
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fc fc92 	bl	8000598 <__aeabi_f2d>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	484c      	ldr	r0, [pc, #304]	; (8003dac <process_user_input+0x568>)
 8003c7a:	f00a fc0f 	bl	800e49c <iprintf>
			 break;
 8003c7e:	e07c      	b.n	8003d7a <process_user_input+0x536>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3304      	adds	r3, #4
 8003c84:	4618      	mov	r0, r3
 8003c86:	f009 ff3d 	bl	800db04 <atof>
 8003c8a:	ec53 2b10 	vmov	r2, r3, d0
 8003c8e:	4610      	mov	r0, r2
 8003c90:	4619      	mov	r1, r3
 8003c92:	f7fc ffd1 	bl	8000c38 <__aeabi_d2f>
 8003c96:	4603      	mov	r3, r0
 8003c98:	eddf 0a45 	vldr	s1, [pc, #276]	; 8003db0 <process_user_input+0x56c>
 8003c9c:	ee00 3a10 	vmov	s0, r3
 8003ca0:	f00e f8ae 	bl	8011e00 <fmaxf>
 8003ca4:	eef0 7a40 	vmov.f32	s15, s0
 8003ca8:	4b3f      	ldr	r3, [pc, #252]	; (8003da8 <process_user_input+0x564>)
 8003caa:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 P_MIN = -P_MAX;
 8003cae:	4b3e      	ldr	r3, [pc, #248]	; (8003da8 <process_user_input+0x564>)
 8003cb0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003cb4:	eef1 7a67 	vneg.f32	s15, s15
 8003cb8:	4b3b      	ldr	r3, [pc, #236]	; (8003da8 <process_user_input+0x564>)
 8003cba:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("P_MAX set to %f\r\n", P_MAX);
 8003cbe:	4b3a      	ldr	r3, [pc, #232]	; (8003da8 <process_user_input+0x564>)
 8003cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fc fc68 	bl	8000598 <__aeabi_f2d>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4839      	ldr	r0, [pc, #228]	; (8003db4 <process_user_input+0x570>)
 8003cce:	f00a fbe5 	bl	800e49c <iprintf>
			 break;
 8003cd2:	e052      	b.n	8003d7a <process_user_input+0x536>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f009 ff13 	bl	800db04 <atof>
 8003cde:	ec53 2b10 	vmov	r2, r3, d0
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	f7fc ffa7 	bl	8000c38 <__aeabi_d2f>
 8003cea:	4603      	mov	r3, r0
 8003cec:	eddf 0a30 	vldr	s1, [pc, #192]	; 8003db0 <process_user_input+0x56c>
 8003cf0:	ee00 3a10 	vmov	s0, r3
 8003cf4:	f00e f884 	bl	8011e00 <fmaxf>
 8003cf8:	eef0 7a40 	vmov.f32	s15, s0
 8003cfc:	4b2a      	ldr	r3, [pc, #168]	; (8003da8 <process_user_input+0x564>)
 8003cfe:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 V_MIN = -V_MAX;
 8003d02:	4b29      	ldr	r3, [pc, #164]	; (8003da8 <process_user_input+0x564>)
 8003d04:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003d08:	eef1 7a67 	vneg.f32	s15, s15
 8003d0c:	4b26      	ldr	r3, [pc, #152]	; (8003da8 <process_user_input+0x564>)
 8003d0e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			 printf("V_MAX set to %f\r\n", V_MAX);
 8003d12:	4b25      	ldr	r3, [pc, #148]	; (8003da8 <process_user_input+0x564>)
 8003d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fc fc3e 	bl	8000598 <__aeabi_f2d>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4825      	ldr	r0, [pc, #148]	; (8003db8 <process_user_input+0x574>)
 8003d22:	f00a fbbb 	bl	800e49c <iprintf>
			 break;
 8003d26:	e028      	b.n	8003d7a <process_user_input+0x536>
		 case 'o':
			 T_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f009 fee9 	bl	800db04 <atof>
 8003d32:	ec53 2b10 	vmov	r2, r3, d0
 8003d36:	4610      	mov	r0, r2
 8003d38:	4619      	mov	r1, r3
 8003d3a:	f7fc ff7d 	bl	8000c38 <__aeabi_d2f>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8003db0 <process_user_input+0x56c>
 8003d44:	ee00 3a10 	vmov	s0, r3
 8003d48:	f00e f85a 	bl	8011e00 <fmaxf>
 8003d4c:	eef0 7a40 	vmov.f32	s15, s0
 8003d50:	4b15      	ldr	r3, [pc, #84]	; (8003da8 <process_user_input+0x564>)
 8003d52:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("T_MAX set to %f\r\n", T_MAX);
 8003d56:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <process_user_input+0x564>)
 8003d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fc fc1c 	bl	8000598 <__aeabi_f2d>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4815      	ldr	r0, [pc, #84]	; (8003dbc <process_user_input+0x578>)
 8003d66:	f00a fb99 	bl	800e49c <iprintf>
			 break;
 8003d6a:	e006      	b.n	8003d7a <process_user_input+0x536>
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	4619      	mov	r1, r3
 8003d72:	4813      	ldr	r0, [pc, #76]	; (8003dc0 <process_user_input+0x57c>)
 8003d74:	f00a fb92 	bl	800e49c <iprintf>
			 break;
 8003d78:	bf00      	nop

		 }

	 /* Write new settings to flash */
	 store_eeprom_regs();
 8003d7a:	f001 fea5 	bl	8005ac8 <store_eeprom_regs>
	 load_eeprom_regs();
 8003d7e:	f001 feb1 	bl	8005ae4 <load_eeprom_regs>

	 enter_setup_state();
 8003d82:	f7ff fbeb 	bl	800355c <enter_setup_state>

	 fsmstate->bytecount = 0;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	731a      	strb	r2, [r3, #12]
	 fsmstate->cmd_id = 0;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	735a      	strb	r2, [r3, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3304      	adds	r3, #4
 8003d96:	2208      	movs	r2, #8
 8003d98:	2100      	movs	r1, #0
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f009 ff0c 	bl	800dbb8 <memset>
 }
 8003da0:	bf00      	nop
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000674 	.word	0x20000674
 8003dac:	08012a34 	.word	0x08012a34
 8003db0:	00000000 	.word	0x00000000
 8003db4:	08012a48 	.word	0x08012a48
 8003db8:	08012a5c 	.word	0x08012a5c
 8003dbc:	08012a70 	.word	0x08012a70
 8003dc0:	08012a84 	.word	0x08012a84

08003dc4 <enable_gd>:
 */
#include "gatedrive.h"
#include <stdio.h>


void enable_gd(ControllerStruct *controller){
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
	//Restart PWM
	controller->isEnabled = 1;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
    HAL_TIM_PWM_Start(&TIM_PWM, TIM_CHANNEL_1);
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	480d      	ldr	r0, [pc, #52]	; (8003e0c <enable_gd+0x48>)
 8003dd8:	f006 fe96 	bl	800ab08 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&TIM_PWM, TIM_CHANNEL_2);
 8003ddc:	2104      	movs	r1, #4
 8003dde:	480b      	ldr	r0, [pc, #44]	; (8003e0c <enable_gd+0x48>)
 8003de0:	f006 fe92 	bl	800ab08 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&TIM_PWM, TIM_CHANNEL_3);
 8003de4:	2108      	movs	r1, #8
 8003de6:	4809      	ldr	r0, [pc, #36]	; (8003e0c <enable_gd+0x48>)
 8003de8:	f006 fe8e 	bl	800ab08 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&TIM_PWM, TIM_CHANNEL_1);
 8003dec:	2100      	movs	r1, #0
 8003dee:	4807      	ldr	r0, [pc, #28]	; (8003e0c <enable_gd+0x48>)
 8003df0:	f007 ff8a 	bl	800bd08 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&TIM_PWM, TIM_CHANNEL_2);
 8003df4:	2104      	movs	r1, #4
 8003df6:	4805      	ldr	r0, [pc, #20]	; (8003e0c <enable_gd+0x48>)
 8003df8:	f007 ff86 	bl	800bd08 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&TIM_PWM, TIM_CHANNEL_3);
 8003dfc:	2108      	movs	r1, #8
 8003dfe:	4803      	ldr	r0, [pc, #12]	; (8003e0c <enable_gd+0x48>)
 8003e00:	f007 ff82 	bl	800bd08 <HAL_TIMEx_PWMN_Start>
}
 8003e04:	bf00      	nop
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	200053dc 	.word	0x200053dc

08003e10 <disable_gd>:
void disable_gd(ControllerStruct *controller){
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
	//Drive all gates low
	controller->isEnabled = 0;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.0f);
 8003e20:	4b30      	ldr	r3, [pc, #192]	; (8003ee4 <disable_gd+0xd4>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	ee07 3a90 	vmov	s15, r3
 8003e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e2e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003ee8 <disable_gd+0xd8>
 8003e32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e36:	4b2b      	ldr	r3, [pc, #172]	; (8003ee4 <disable_gd+0xd4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e3e:	ee17 2a90 	vmov	r2, s15
 8003e42:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.0f);
 8003e44:	4b27      	ldr	r3, [pc, #156]	; (8003ee4 <disable_gd+0xd4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e52:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003ee8 <disable_gd+0xd8>
 8003e56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e5a:	4b22      	ldr	r3, [pc, #136]	; (8003ee4 <disable_gd+0xd4>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e62:	ee17 2a90 	vmov	r2, s15
 8003e66:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.0f);
 8003e68:	4b1e      	ldr	r3, [pc, #120]	; (8003ee4 <disable_gd+0xd4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	ee07 3a90 	vmov	s15, r3
 8003e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e76:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003ee8 <disable_gd+0xd8>
 8003e7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e7e:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <disable_gd+0xd4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e86:	ee17 2a90 	vmov	r2, s15
 8003e8a:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(DRV_HA, GPIO_PIN_RESET );
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e96:	f004 fd4d 	bl	8008934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_HB, GPIO_PIN_RESET );
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ea4:	f004 fd46 	bl	8008934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_HC, GPIO_PIN_RESET );
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eb2:	f004 fd3f 	bl	8008934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_LA, GPIO_PIN_RESET );
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ebc:	480b      	ldr	r0, [pc, #44]	; (8003eec <disable_gd+0xdc>)
 8003ebe:	f004 fd39 	bl	8008934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_LB, GPIO_PIN_RESET );
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ecc:	f004 fd32 	bl	8008934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_LC, GPIO_PIN_RESET );
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ed6:	4806      	ldr	r0, [pc, #24]	; (8003ef0 <disable_gd+0xe0>)
 8003ed8:	f004 fd2c 	bl	8008934 <HAL_GPIO_WritePin>

}
 8003edc:	bf00      	nop
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	200053dc 	.word	0x200053dc
 8003ee8:	00000000 	.word	0x00000000
 8003eec:	48000800 	.word	0x48000800
 8003ef0:	48000400 	.word	0x48000400

08003ef4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08a      	sub	sp, #40	; 0x28
 8003ef8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003efa:	f107 0314 	add.w	r3, r7, #20
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	605a      	str	r2, [r3, #4]
 8003f04:	609a      	str	r2, [r3, #8]
 8003f06:	60da      	str	r2, [r3, #12]
 8003f08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f0a:	4b30      	ldr	r3, [pc, #192]	; (8003fcc <MX_GPIO_Init+0xd8>)
 8003f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0e:	4a2f      	ldr	r2, [pc, #188]	; (8003fcc <MX_GPIO_Init+0xd8>)
 8003f10:	f043 0304 	orr.w	r3, r3, #4
 8003f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f16:	4b2d      	ldr	r3, [pc, #180]	; (8003fcc <MX_GPIO_Init+0xd8>)
 8003f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	613b      	str	r3, [r7, #16]
 8003f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f22:	4b2a      	ldr	r3, [pc, #168]	; (8003fcc <MX_GPIO_Init+0xd8>)
 8003f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f26:	4a29      	ldr	r2, [pc, #164]	; (8003fcc <MX_GPIO_Init+0xd8>)
 8003f28:	f043 0320 	orr.w	r3, r3, #32
 8003f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f2e:	4b27      	ldr	r3, [pc, #156]	; (8003fcc <MX_GPIO_Init+0xd8>)
 8003f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f3a:	4b24      	ldr	r3, [pc, #144]	; (8003fcc <MX_GPIO_Init+0xd8>)
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3e:	4a23      	ldr	r2, [pc, #140]	; (8003fcc <MX_GPIO_Init+0xd8>)
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f46:	4b21      	ldr	r3, [pc, #132]	; (8003fcc <MX_GPIO_Init+0xd8>)
 8003f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	60bb      	str	r3, [r7, #8]
 8003f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f52:	4b1e      	ldr	r3, [pc, #120]	; (8003fcc <MX_GPIO_Init+0xd8>)
 8003f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f56:	4a1d      	ldr	r2, [pc, #116]	; (8003fcc <MX_GPIO_Init+0xd8>)
 8003f58:	f043 0302 	orr.w	r3, r3, #2
 8003f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f5e:	4b1b      	ldr	r3, [pc, #108]	; (8003fcc <MX_GPIO_Init+0xd8>)
 8003f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	607b      	str	r3, [r7, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_11, GPIO_PIN_RESET);
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f644 0140 	movw	r1, #18496	; 0x4840
 8003f70:	4817      	ldr	r0, [pc, #92]	; (8003fd0 <MX_GPIO_Init+0xdc>)
 8003f72:	f004 fcdf 	bl	8008934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8003f76:	2200      	movs	r2, #0
 8003f78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f80:	f004 fcd8 	bl	8008934 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC6 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_11;
 8003f84:	f644 0340 	movw	r3, #18496	; 0x4840
 8003f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f92:	2300      	movs	r3, #0
 8003f94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f96:	f107 0314 	add.w	r3, r7, #20
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	480c      	ldr	r0, [pc, #48]	; (8003fd0 <MX_GPIO_Init+0xdc>)
 8003f9e:	f004 fb47 	bl	8008630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb4:	f107 0314 	add.w	r3, r7, #20
 8003fb8:	4619      	mov	r1, r3
 8003fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fbe:	f004 fb37 	bl	8008630 <HAL_GPIO_Init>

}
 8003fc2:	bf00      	nop
 8003fc4:	3728      	adds	r7, #40	; 0x28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	48000800 	.word	0x48000800

08003fd4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003fd8:	4b1e      	ldr	r3, [pc, #120]	; (8004054 <MX_I2C1_Init+0x80>)
 8003fda:	4a1f      	ldr	r2, [pc, #124]	; (8004058 <MX_I2C1_Init+0x84>)
 8003fdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00802F62;
 8003fde:	4b1d      	ldr	r3, [pc, #116]	; (8004054 <MX_I2C1_Init+0x80>)
 8003fe0:	4a1e      	ldr	r2, [pc, #120]	; (800405c <MX_I2C1_Init+0x88>)
 8003fe2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <MX_I2C1_Init+0x80>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003fea:	4b1a      	ldr	r3, [pc, #104]	; (8004054 <MX_I2C1_Init+0x80>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ff0:	4b18      	ldr	r3, [pc, #96]	; (8004054 <MX_I2C1_Init+0x80>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003ff6:	4b17      	ldr	r3, [pc, #92]	; (8004054 <MX_I2C1_Init+0x80>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003ffc:	4b15      	ldr	r3, [pc, #84]	; (8004054 <MX_I2C1_Init+0x80>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004002:	4b14      	ldr	r3, [pc, #80]	; (8004054 <MX_I2C1_Init+0x80>)
 8004004:	2200      	movs	r2, #0
 8004006:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004008:	4b12      	ldr	r3, [pc, #72]	; (8004054 <MX_I2C1_Init+0x80>)
 800400a:	2200      	movs	r2, #0
 800400c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800400e:	4811      	ldr	r0, [pc, #68]	; (8004054 <MX_I2C1_Init+0x80>)
 8004010:	f004 fca8 	bl	8008964 <HAL_I2C_Init>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800401a:	f000 fbd0 	bl	80047be <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800401e:	2100      	movs	r1, #0
 8004020:	480c      	ldr	r0, [pc, #48]	; (8004054 <MX_I2C1_Init+0x80>)
 8004022:	f005 fadb 	bl	80095dc <HAL_I2CEx_ConfigAnalogFilter>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800402c:	f000 fbc7 	bl	80047be <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004030:	2100      	movs	r1, #0
 8004032:	4808      	ldr	r0, [pc, #32]	; (8004054 <MX_I2C1_Init+0x80>)
 8004034:	f005 fb1d 	bl	8009672 <HAL_I2CEx_ConfigDigitalFilter>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800403e:	f000 fbbe 	bl	80047be <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 8004042:	4b07      	ldr	r3, [pc, #28]	; (8004060 <MX_I2C1_Init+0x8c>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	4a06      	ldr	r2, [pc, #24]	; (8004060 <MX_I2C1_Init+0x8c>)
 8004048:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800404c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000430 	.word	0x20000430
 8004058:	40005400 	.word	0x40005400
 800405c:	00802f62 	.word	0x00802f62
 8004060:	40010000 	.word	0x40010000

08004064 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	; 0x28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800406c:	f107 0314 	add.w	r3, r7, #20
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	605a      	str	r2, [r3, #4]
 8004076:	609a      	str	r2, [r3, #8]
 8004078:	60da      	str	r2, [r3, #12]
 800407a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a17      	ldr	r2, [pc, #92]	; (80040e0 <HAL_I2C_MspInit+0x7c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d128      	bne.n	80040d8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004086:	4b17      	ldr	r3, [pc, #92]	; (80040e4 <HAL_I2C_MspInit+0x80>)
 8004088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408a:	4a16      	ldr	r2, [pc, #88]	; (80040e4 <HAL_I2C_MspInit+0x80>)
 800408c:	f043 0302 	orr.w	r3, r3, #2
 8004090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004092:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <HAL_I2C_MspInit+0x80>)
 8004094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800409e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80040a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040a4:	2312      	movs	r3, #18
 80040a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040a8:	2301      	movs	r3, #1
 80040aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ac:	2300      	movs	r3, #0
 80040ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80040b0:	2304      	movs	r3, #4
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040b4:	f107 0314 	add.w	r3, r7, #20
 80040b8:	4619      	mov	r1, r3
 80040ba:	480b      	ldr	r0, [pc, #44]	; (80040e8 <HAL_I2C_MspInit+0x84>)
 80040bc:	f004 fab8 	bl	8008630 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040c0:	4b08      	ldr	r3, [pc, #32]	; (80040e4 <HAL_I2C_MspInit+0x80>)
 80040c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c4:	4a07      	ldr	r2, [pc, #28]	; (80040e4 <HAL_I2C_MspInit+0x80>)
 80040c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040ca:	6593      	str	r3, [r2, #88]	; 0x58
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <HAL_I2C_MspInit+0x80>)
 80040ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80040d8:	bf00      	nop
 80040da:	3728      	adds	r7, #40	; 0x28
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40005400 	.word	0x40005400
 80040e4:	40021000 	.word	0x40021000
 80040e8:	48000400 	.word	0x48000400

080040ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	6039      	str	r1, [r7, #0]
 80040f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	db0a      	blt.n	8004116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	b2da      	uxtb	r2, r3
 8004104:	490c      	ldr	r1, [pc, #48]	; (8004138 <__NVIC_SetPriority+0x4c>)
 8004106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410a:	0112      	lsls	r2, r2, #4
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	440b      	add	r3, r1
 8004110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004114:	e00a      	b.n	800412c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	b2da      	uxtb	r2, r3
 800411a:	4908      	ldr	r1, [pc, #32]	; (800413c <__NVIC_SetPriority+0x50>)
 800411c:	79fb      	ldrb	r3, [r7, #7]
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	3b04      	subs	r3, #4
 8004124:	0112      	lsls	r2, r2, #4
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	440b      	add	r3, r1
 800412a:	761a      	strb	r2, [r3, #24]
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	e000e100 	.word	0xe000e100
 800413c:	e000ed00 	.word	0xe000ed00

08004140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004144:	f001 fd05 	bl	8005b52 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004148:	f000 face 	bl	80046e8 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	HAL_Delay(100);
 800414c:	2064      	movs	r0, #100	; 0x64
 800414e:	f001 fd71 	bl	8005c34 <HAL_Delay>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004152:	f7ff fecf 	bl	8003ef4 <MX_GPIO_Init>
	MX_DMA_Init();
 8004156:	f7fd fd0b 	bl	8001b70 <MX_DMA_Init>
	MX_USART2_UART_Init();
 800415a:	f001 fbf9 	bl	8005950 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 800415e:	f001 fa8d 	bl	800567c <MX_TIM1_Init>
	MX_I2C1_Init();
 8004162:	f7ff ff37 	bl	8003fd4 <MX_I2C1_Init>
	MX_OPAMP1_Init();
 8004166:	f000 fccf 	bl	8004b08 <MX_OPAMP1_Init>
	MX_OPAMP2_Init();
 800416a:	f000 fcfb 	bl	8004b64 <MX_OPAMP2_Init>
	MX_OPAMP3_Init();
 800416e:	f000 fd27 	bl	8004bc0 <MX_OPAMP3_Init>
	MX_ADC1_Init();
 8004172:	f7fc ff63 	bl	800103c <MX_ADC1_Init>
	MX_ADC2_Init();
 8004176:	f7fc ffe9 	bl	800114c <MX_ADC2_Init>
	MX_FDCAN1_Init();
 800417a:	f7fd fe8f 	bl	8001e9c <MX_FDCAN1_Init>
	/* USER CODE BEGIN 2 */
	load_eeprom_regs();
 800417e:	f001 fcb1 	bl	8005ae4 <load_eeprom_regs>
	/* Sanitize configs in case flash is empty*/
	if(E_ZERO==-1){E_ZERO = 0;}
 8004182:	4bba      	ldr	r3, [pc, #744]	; (800446c <main+0x32c>)
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418a:	d102      	bne.n	8004192 <main+0x52>
 800418c:	4bb7      	ldr	r3, [pc, #732]	; (800446c <main+0x32c>)
 800418e:	2200      	movs	r2, #0
 8004190:	611a      	str	r2, [r3, #16]
	if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8004192:	4bb7      	ldr	r3, [pc, #732]	; (8004470 <main+0x330>)
 8004194:	edd3 7a02 	vldr	s15, [r3, #8]
 8004198:	eef4 7a67 	vcmp.f32	s15, s15
 800419c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a0:	d609      	bvs.n	80041b6 <main+0x76>
 80041a2:	4bb3      	ldr	r3, [pc, #716]	; (8004470 <main+0x330>)
 80041a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80041a8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80041ac:	eef4 7a47 	vcmp.f32	s15, s14
 80041b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b4:	d102      	bne.n	80041bc <main+0x7c>
 80041b6:	4bae      	ldr	r3, [pc, #696]	; (8004470 <main+0x330>)
 80041b8:	4aae      	ldr	r2, [pc, #696]	; (8004474 <main+0x334>)
 80041ba:	609a      	str	r2, [r3, #8]
	if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 80041bc:	4bac      	ldr	r3, [pc, #688]	; (8004470 <main+0x330>)
 80041be:	edd3 7a03 	vldr	s15, [r3, #12]
 80041c2:	eef4 7a67 	vcmp.f32	s15, s15
 80041c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ca:	d609      	bvs.n	80041e0 <main+0xa0>
 80041cc:	4ba8      	ldr	r3, [pc, #672]	; (8004470 <main+0x330>)
 80041ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80041d2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80041d6:	eef4 7a47 	vcmp.f32	s15, s14
 80041da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041de:	d102      	bne.n	80041e6 <main+0xa6>
 80041e0:	4ba3      	ldr	r3, [pc, #652]	; (8004470 <main+0x330>)
 80041e2:	4aa5      	ldr	r2, [pc, #660]	; (8004478 <main+0x338>)
 80041e4:	60da      	str	r2, [r3, #12]
	if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 80041e6:	4ba2      	ldr	r3, [pc, #648]	; (8004470 <main+0x330>)
 80041e8:	edd3 7a06 	vldr	s15, [r3, #24]
 80041ec:	eef4 7a67 	vcmp.f32	s15, s15
 80041f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f4:	d609      	bvs.n	800420a <main+0xca>
 80041f6:	4b9e      	ldr	r3, [pc, #632]	; (8004470 <main+0x330>)
 80041f8:	edd3 7a06 	vldr	s15, [r3, #24]
 80041fc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004200:	eef4 7a47 	vcmp.f32	s15, s14
 8004204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004208:	d103      	bne.n	8004212 <main+0xd2>
 800420a:	4b99      	ldr	r3, [pc, #612]	; (8004470 <main+0x330>)
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	619a      	str	r2, [r3, #24]
	if(CAN_ID==-1){CAN_ID = 1;}
 8004212:	4b96      	ldr	r3, [pc, #600]	; (800446c <main+0x32c>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421a:	d102      	bne.n	8004222 <main+0xe2>
 800421c:	4b93      	ldr	r3, [pc, #588]	; (800446c <main+0x32c>)
 800421e:	2201      	movs	r2, #1
 8004220:	605a      	str	r2, [r3, #4]
	if(CAN_MASTER==-1){CAN_MASTER = 0;}
 8004222:	4b92      	ldr	r3, [pc, #584]	; (800446c <main+0x32c>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422a:	d102      	bne.n	8004232 <main+0xf2>
 800422c:	4b8f      	ldr	r3, [pc, #572]	; (800446c <main+0x32c>)
 800422e:	2200      	movs	r2, #0
 8004230:	609a      	str	r2, [r3, #8]
	if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 0;}
 8004232:	4b8e      	ldr	r3, [pc, #568]	; (800446c <main+0x32c>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423a:	d102      	bne.n	8004242 <main+0x102>
 800423c:	4b8b      	ldr	r3, [pc, #556]	; (800446c <main+0x32c>)
 800423e:	2200      	movs	r2, #0
 8004240:	60da      	str	r2, [r3, #12]
	if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8004242:	4b8b      	ldr	r3, [pc, #556]	; (8004470 <main+0x330>)
 8004244:	edd3 7a07 	vldr	s15, [r3, #28]
 8004248:	eef4 7a67 	vcmp.f32	s15, s15
 800424c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004250:	d609      	bvs.n	8004266 <main+0x126>
 8004252:	4b87      	ldr	r3, [pc, #540]	; (8004470 <main+0x330>)
 8004254:	edd3 7a07 	vldr	s15, [r3, #28]
 8004258:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800425c:	eef4 7a47 	vcmp.f32	s15, s14
 8004260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004264:	d103      	bne.n	800426e <main+0x12e>
 8004266:	4b82      	ldr	r3, [pc, #520]	; (8004470 <main+0x330>)
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	61da      	str	r2, [r3, #28]
	if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 800426e:	4b80      	ldr	r3, [pc, #512]	; (8004470 <main+0x330>)
 8004270:	edd3 7a08 	vldr	s15, [r3, #32]
 8004274:	eef4 7a67 	vcmp.f32	s15, s15
 8004278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800427c:	d609      	bvs.n	8004292 <main+0x152>
 800427e:	4b7c      	ldr	r3, [pc, #496]	; (8004470 <main+0x330>)
 8004280:	edd3 7a08 	vldr	s15, [r3, #32]
 8004284:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004288:	eef4 7a47 	vcmp.f32	s15, s14
 800428c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004290:	d102      	bne.n	8004298 <main+0x158>
 8004292:	4b77      	ldr	r3, [pc, #476]	; (8004470 <main+0x330>)
 8004294:	4a79      	ldr	r2, [pc, #484]	; (800447c <main+0x33c>)
 8004296:	621a      	str	r2, [r3, #32]
	if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8004298:	4b75      	ldr	r3, [pc, #468]	; (8004470 <main+0x330>)
 800429a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800429e:	eef4 7a67 	vcmp.f32	s15, s15
 80042a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a6:	d609      	bvs.n	80042bc <main+0x17c>
 80042a8:	4b71      	ldr	r3, [pc, #452]	; (8004470 <main+0x330>)
 80042aa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80042ae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80042b2:	eef4 7a47 	vcmp.f32	s15, s14
 80042b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ba:	d102      	bne.n	80042c2 <main+0x182>
 80042bc:	4b6c      	ldr	r3, [pc, #432]	; (8004470 <main+0x330>)
 80042be:	4a70      	ldr	r2, [pc, #448]	; (8004480 <main+0x340>)
 80042c0:	625a      	str	r2, [r3, #36]	; 0x24
	if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 80042c2:	4b6b      	ldr	r3, [pc, #428]	; (8004470 <main+0x330>)
 80042c4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80042c8:	eef4 7a67 	vcmp.f32	s15, s15
 80042cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d0:	d609      	bvs.n	80042e6 <main+0x1a6>
 80042d2:	4b67      	ldr	r3, [pc, #412]	; (8004470 <main+0x330>)
 80042d4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80042d8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80042dc:	eef4 7a47 	vcmp.f32	s15, s14
 80042e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e4:	d102      	bne.n	80042ec <main+0x1ac>
 80042e6:	4b62      	ldr	r3, [pc, #392]	; (8004470 <main+0x330>)
 80042e8:	4a66      	ldr	r2, [pc, #408]	; (8004484 <main+0x344>)
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40
	if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 80042ec:	4b60      	ldr	r3, [pc, #384]	; (8004470 <main+0x330>)
 80042ee:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80042f2:	eef4 7a67 	vcmp.f32	s15, s15
 80042f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fa:	d609      	bvs.n	8004310 <main+0x1d0>
 80042fc:	4b5c      	ldr	r3, [pc, #368]	; (8004470 <main+0x330>)
 80042fe:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004302:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004306:	eef4 7a47 	vcmp.f32	s15, s14
 800430a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800430e:	d102      	bne.n	8004316 <main+0x1d6>
 8004310:	4b57      	ldr	r3, [pc, #348]	; (8004470 <main+0x330>)
 8004312:	4a5d      	ldr	r2, [pc, #372]	; (8004488 <main+0x348>)
 8004314:	629a      	str	r2, [r3, #40]	; 0x28
	if(isnan(GR) || GR==-1){GR = 1.0f;}
 8004316:	4b56      	ldr	r3, [pc, #344]	; (8004470 <main+0x330>)
 8004318:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800431c:	eef4 7a67 	vcmp.f32	s15, s15
 8004320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004324:	d609      	bvs.n	800433a <main+0x1fa>
 8004326:	4b52      	ldr	r3, [pc, #328]	; (8004470 <main+0x330>)
 8004328:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800432c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004330:	eef4 7a47 	vcmp.f32	s15, s14
 8004334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004338:	d103      	bne.n	8004342 <main+0x202>
 800433a:	4b4d      	ldr	r3, [pc, #308]	; (8004470 <main+0x330>)
 800433c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004340:	63da      	str	r2, [r3, #60]	; 0x3c
	if(isnan(KT) || KT==-1){KT = 1.0f;}
 8004342:	4b4b      	ldr	r3, [pc, #300]	; (8004470 <main+0x330>)
 8004344:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004348:	eef4 7a67 	vcmp.f32	s15, s15
 800434c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004350:	d609      	bvs.n	8004366 <main+0x226>
 8004352:	4b47      	ldr	r3, [pc, #284]	; (8004470 <main+0x330>)
 8004354:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004358:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800435c:	eef4 7a47 	vcmp.f32	s15, s14
 8004360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004364:	d103      	bne.n	800436e <main+0x22e>
 8004366:	4b42      	ldr	r3, [pc, #264]	; (8004470 <main+0x330>)
 8004368:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800436c:	631a      	str	r2, [r3, #48]	; 0x30
	if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 800436e:	4b40      	ldr	r3, [pc, #256]	; (8004470 <main+0x330>)
 8004370:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004374:	eef4 7a67 	vcmp.f32	s15, s15
 8004378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437c:	d609      	bvs.n	8004392 <main+0x252>
 800437e:	4b3c      	ldr	r3, [pc, #240]	; (8004470 <main+0x330>)
 8004380:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004384:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004388:	eef4 7a47 	vcmp.f32	s15, s14
 800438c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004390:	d102      	bne.n	8004398 <main+0x258>
 8004392:	4b37      	ldr	r3, [pc, #220]	; (8004470 <main+0x330>)
 8004394:	4a3d      	ldr	r2, [pc, #244]	; (800448c <main+0x34c>)
 8004396:	655a      	str	r2, [r3, #84]	; 0x54
	if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 8004398:	4b35      	ldr	r3, [pc, #212]	; (8004470 <main+0x330>)
 800439a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800439e:	eef4 7a67 	vcmp.f32	s15, s15
 80043a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a6:	d609      	bvs.n	80043bc <main+0x27c>
 80043a8:	4b31      	ldr	r3, [pc, #196]	; (8004470 <main+0x330>)
 80043aa:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80043ae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80043b2:	eef4 7a47 	vcmp.f32	s15, s14
 80043b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ba:	d102      	bne.n	80043c2 <main+0x282>
 80043bc:	4b2c      	ldr	r3, [pc, #176]	; (8004470 <main+0x330>)
 80043be:	4a31      	ldr	r2, [pc, #196]	; (8004484 <main+0x344>)
 80043c0:	659a      	str	r2, [r3, #88]	; 0x58
	if(isnan(P_MAX)){P_MAX = 12.5f;}
 80043c2:	4b2b      	ldr	r3, [pc, #172]	; (8004470 <main+0x330>)
 80043c4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80043c8:	eef4 7a67 	vcmp.f32	s15, s15
 80043cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d0:	d702      	bvc.n	80043d8 <main+0x298>
 80043d2:	4b27      	ldr	r3, [pc, #156]	; (8004470 <main+0x330>)
 80043d4:	4a2e      	ldr	r2, [pc, #184]	; (8004490 <main+0x350>)
 80043d6:	649a      	str	r2, [r3, #72]	; 0x48
	if(isnan(P_MIN)){P_MIN = -12.5f;}
 80043d8:	4b25      	ldr	r3, [pc, #148]	; (8004470 <main+0x330>)
 80043da:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80043de:	eef4 7a67 	vcmp.f32	s15, s15
 80043e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e6:	d702      	bvc.n	80043ee <main+0x2ae>
 80043e8:	4b21      	ldr	r3, [pc, #132]	; (8004470 <main+0x330>)
 80043ea:	4a2a      	ldr	r2, [pc, #168]	; (8004494 <main+0x354>)
 80043ec:	645a      	str	r2, [r3, #68]	; 0x44
	if(isnan(V_MAX)){V_MAX = 200.0f;}
 80043ee:	4b20      	ldr	r3, [pc, #128]	; (8004470 <main+0x330>)
 80043f0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80043f4:	eef4 7a67 	vcmp.f32	s15, s15
 80043f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043fc:	d702      	bvc.n	8004404 <main+0x2c4>
 80043fe:	4b1c      	ldr	r3, [pc, #112]	; (8004470 <main+0x330>)
 8004400:	4a25      	ldr	r2, [pc, #148]	; (8004498 <main+0x358>)
 8004402:	651a      	str	r2, [r3, #80]	; 0x50
	if(isnan(V_MIN)){V_MIN = -200.0f;}
 8004404:	4b1a      	ldr	r3, [pc, #104]	; (8004470 <main+0x330>)
 8004406:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800440a:	eef4 7a67 	vcmp.f32	s15, s15
 800440e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004412:	d702      	bvc.n	800441a <main+0x2da>
 8004414:	4b16      	ldr	r3, [pc, #88]	; (8004470 <main+0x330>)
 8004416:	4a21      	ldr	r2, [pc, #132]	; (800449c <main+0x35c>)
 8004418:	64da      	str	r2, [r3, #76]	; 0x4c
	if(isnan(MECH_ZERO)){MECH_ZERO = 0.0f;}
 800441a:	4b15      	ldr	r3, [pc, #84]	; (8004470 <main+0x330>)
 800441c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004420:	eef4 7a67 	vcmp.f32	s15, s15
 8004424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004428:	d703      	bvc.n	8004432 <main+0x2f2>
 800442a:	4b11      	ldr	r3, [pc, #68]	; (8004470 <main+0x330>)
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	65da      	str	r2, [r3, #92]	; 0x5c
	if(isnan(T_MAX)){T_MAX = 10.0f;}
 8004432:	4b0f      	ldr	r3, [pc, #60]	; (8004470 <main+0x330>)
 8004434:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004438:	eef4 7a67 	vcmp.f32	s15, s15
 800443c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004440:	d702      	bvc.n	8004448 <main+0x308>
 8004442:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <main+0x330>)
 8004444:	4a16      	ldr	r2, [pc, #88]	; (80044a0 <main+0x360>)
 8004446:	661a      	str	r2, [r3, #96]	; 0x60

	printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	4b15      	ldr	r3, [pc, #84]	; (80044a4 <main+0x364>)
 800444e:	4816      	ldr	r0, [pc, #88]	; (80044a8 <main+0x368>)
 8004450:	f00a f824 	bl	800e49c <iprintf>
	/* Controller Setup */
	init_controller_params(&controller);
 8004454:	4815      	ldr	r0, [pc, #84]	; (80044ac <main+0x36c>)
 8004456:	f7fe fa7b 	bl	8002950 <init_controller_params>

	/* calibration "encoder" zeroing */
	memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 800445a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800445e:	2100      	movs	r1, #0
 8004460:	4813      	ldr	r0, [pc, #76]	; (80044b0 <main+0x370>)
 8004462:	f009 fba9 	bl	800dbb8 <memset>

	/* commutation encoder setup */
	comm_encoder.e_zero = E_ZERO;
 8004466:	4b01      	ldr	r3, [pc, #4]	; (800446c <main+0x32c>)
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	e023      	b.n	80044b4 <main+0x374>
 800446c:	20004d84 	.word	0x20004d84
 8004470:	20000674 	.word	0x20000674
 8004474:	447a0000 	.word	0x447a0000
 8004478:	42200000 	.word	0x42200000
 800447c:	42fa0000 	.word	0x42fa0000
 8004480:	41600000 	.word	0x41600000
 8004484:	40a00000 	.word	0x40a00000
 8004488:	41a80000 	.word	0x41a80000
 800448c:	43fa0000 	.word	0x43fa0000
 8004490:	41480000 	.word	0x41480000
 8004494:	c1480000 	.word	0xc1480000
 8004498:	43480000 	.word	0x43480000
 800449c:	c3480000 	.word	0xc3480000
 80044a0:	41200000 	.word	0x41200000
 80044a4:	3ff00000 	.word	0x3ff00000
 80044a8:	08012aac 	.word	0x08012aac
 80044ac:	20000774 	.word	0x20000774
 80044b0:	20004ba0 	.word	0x20004ba0
 80044b4:	4a71      	ldr	r2, [pc, #452]	; (800467c <main+0x53c>)
 80044b6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
	comm_encoder.ppairs = PPAIRS;
 80044ba:	4b71      	ldr	r3, [pc, #452]	; (8004680 <main+0x540>)
 80044bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044be:	4a6f      	ldr	r2, [pc, #444]	; (800467c <main+0x53c>)
 80044c0:	6693      	str	r3, [r2, #104]	; 0x68
	comm_encoder.mech_zero = MECH_ZERO;
 80044c2:	4b6f      	ldr	r3, [pc, #444]	; (8004680 <main+0x540>)
 80044c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c6:	4a6d      	ldr	r2, [pc, #436]	; (800467c <main+0x53c>)
 80044c8:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc
	ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 80044cc:	2164      	movs	r1, #100	; 0x64
 80044ce:	486b      	ldr	r0, [pc, #428]	; (800467c <main+0x53c>)
 80044d0:	f000 fc1a 	bl	8004d08 <ps_warmup>
	ps_sample(&comm_encoder, DT);
 80044d4:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8004684 <main+0x544>
 80044d8:	4868      	ldr	r0, [pc, #416]	; (800467c <main+0x53c>)
 80044da:	f000 fc6d 	bl	8004db8 <ps_sample>
	ps_sample(&comm_encoder, DT);
 80044de:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8004684 <main+0x544>
 80044e2:	4866      	ldr	r0, [pc, #408]	; (800467c <main+0x53c>)
 80044e4:	f000 fc68 	bl	8004db8 <ps_sample>
	ps_sample(&comm_encoder, DT);
 80044e8:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8004684 <main+0x544>
 80044ec:	4863      	ldr	r0, [pc, #396]	; (800467c <main+0x53c>)
 80044ee:	f000 fc63 	bl	8004db8 <ps_sample>
	if(comm_encoder.angle_multiturn[0]>PI_F){
 80044f2:	4b62      	ldr	r3, [pc, #392]	; (800467c <main+0x53c>)
 80044f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80044f8:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8004688 <main+0x548>
 80044fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004504:	dd14      	ble.n	8004530 <main+0x3f0>
	comm_encoder.angle_multiturn[0]-=TWO_PI_F;
 8004506:	4b5d      	ldr	r3, [pc, #372]	; (800467c <main+0x53c>)
 8004508:	edd3 7a03 	vldr	s15, [r3, #12]
 800450c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800468c <main+0x54c>
 8004510:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004514:	4b59      	ldr	r3, [pc, #356]	; (800467c <main+0x53c>)
 8004516:	edc3 7a03 	vstr	s15, [r3, #12]
	comm_encoder.turns--;
 800451a:	4b58      	ldr	r3, [pc, #352]	; (800467c <main+0x53c>)
 800451c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004520:	3b01      	subs	r3, #1
 8004522:	4a56      	ldr	r2, [pc, #344]	; (800467c <main+0x53c>)
 8004524:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	printf("Added\r\n");
 8004528:	4859      	ldr	r0, [pc, #356]	; (8004690 <main+0x550>)
 800452a:	f00a f83d 	bl	800e5a8 <puts>
 800452e:	e01d      	b.n	800456c <main+0x42c>
	}
	else if(comm_encoder.angle_multiturn[0]<-PI_F){
 8004530:	4b52      	ldr	r3, [pc, #328]	; (800467c <main+0x53c>)
 8004532:	edd3 7a03 	vldr	s15, [r3, #12]
 8004536:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8004694 <main+0x554>
 800453a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800453e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004542:	d513      	bpl.n	800456c <main+0x42c>
	comm_encoder.angle_multiturn[0] += TWO_PI_F;
 8004544:	4b4d      	ldr	r3, [pc, #308]	; (800467c <main+0x53c>)
 8004546:	edd3 7a03 	vldr	s15, [r3, #12]
 800454a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800468c <main+0x54c>
 800454e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004552:	4b4a      	ldr	r3, [pc, #296]	; (800467c <main+0x53c>)
 8004554:	edc3 7a03 	vstr	s15, [r3, #12]
	comm_encoder.turns++;
 8004558:	4b48      	ldr	r3, [pc, #288]	; (800467c <main+0x53c>)
 800455a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800455e:	3301      	adds	r3, #1
 8004560:	4a46      	ldr	r2, [pc, #280]	; (800467c <main+0x53c>)
 8004562:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	printf("Subtracted\r\n");
 8004566:	484c      	ldr	r0, [pc, #304]	; (8004698 <main+0x558>)
 8004568:	f00a f81e 	bl	800e5a8 <puts>
	}


	if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 800456c:	4b43      	ldr	r3, [pc, #268]	; (800467c <main+0x53c>)
 800456e:	4a4b      	ldr	r2, [pc, #300]	; (800469c <main+0x55c>)
 8004570:	33d8      	adds	r3, #216	; 0xd8
 8004572:	f102 0118 	add.w	r1, r2, #24
 8004576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800457a:	4618      	mov	r0, r3
 800457c:	f009 faf4 	bl	800db68 <memcpy>
	else{memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));}

	/* Turn on ADCs */
	HAL_OPAMP_Start(&hopamp1);
 8004580:	4847      	ldr	r0, [pc, #284]	; (80046a0 <main+0x560>)
 8004582:	f005 f993 	bl	80098ac <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp2);
 8004586:	4847      	ldr	r0, [pc, #284]	; (80046a4 <main+0x564>)
 8004588:	f005 f990 	bl	80098ac <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 800458c:	4846      	ldr	r0, [pc, #280]	; (80046a8 <main+0x568>)
 800458e:	f005 f98d 	bl	80098ac <HAL_OPAMP_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)controller.ADC1_Val, 2);
 8004592:	2202      	movs	r2, #2
 8004594:	4945      	ldr	r1, [pc, #276]	; (80046ac <main+0x56c>)
 8004596:	4846      	ldr	r0, [pc, #280]	; (80046b0 <main+0x570>)
 8004598:	f001 ff16 	bl	80063c8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)controller.ADC2_Val, 2);
 800459c:	2202      	movs	r2, #2
 800459e:	4945      	ldr	r1, [pc, #276]	; (80046b4 <main+0x574>)
 80045a0:	4845      	ldr	r0, [pc, #276]	; (80046b8 <main+0x578>)
 80045a2:	f001 ff11 	bl	80063c8 <HAL_ADC_Start_DMA>

	disable_gd(&controller);
 80045a6:	4845      	ldr	r0, [pc, #276]	; (80046bc <main+0x57c>)
 80045a8:	f7ff fc32 	bl	8003e10 <disable_gd>
	HAL_Delay(10);
 80045ac:	200a      	movs	r0, #10
 80045ae:	f001 fb41 	bl	8005c34 <HAL_Delay>

	zero_current(&controller);
 80045b2:	4842      	ldr	r0, [pc, #264]	; (80046bc <main+0x57c>)
 80045b4:	f7fe f97a 	bl	80028ac <zero_current>
	HAL_Delay(100);
 80045b8:	2064      	movs	r0, #100	; 0x64
 80045ba:	f001 fb3b 	bl	8005c34 <HAL_Delay>
	printf("ADC A OFFSET: %d     ADC B OFFSET: %d     ADC C OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset, controller.adc_c_offset);
 80045be:	4b3f      	ldr	r3, [pc, #252]	; (80046bc <main+0x57c>)
 80045c0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80045c4:	4b3d      	ldr	r3, [pc, #244]	; (80046bc <main+0x57c>)
 80045c6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80045ca:	4b3c      	ldr	r3, [pc, #240]	; (80046bc <main+0x57c>)
 80045cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045d0:	483b      	ldr	r0, [pc, #236]	; (80046c0 <main+0x580>)
 80045d2:	f009 ff63 	bl	800e49c <iprintf>
	printf("Vbus: %f\r\n",controller.v_bus);
 80045d6:	4b39      	ldr	r3, [pc, #228]	; (80046bc <main+0x57c>)
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fb ffdc 	bl	8000598 <__aeabi_f2d>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4837      	ldr	r0, [pc, #220]	; (80046c4 <main+0x584>)
 80045e6:	f009 ff59 	bl	800e49c <iprintf>
	/* Turn on PWM */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80045ea:	2100      	movs	r1, #0
 80045ec:	4836      	ldr	r0, [pc, #216]	; (80046c8 <main+0x588>)
 80045ee:	f006 fa8b 	bl	800ab08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80045f2:	2104      	movs	r1, #4
 80045f4:	4834      	ldr	r0, [pc, #208]	; (80046c8 <main+0x588>)
 80045f6:	f006 fa87 	bl	800ab08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80045fa:	2108      	movs	r1, #8
 80045fc:	4832      	ldr	r0, [pc, #200]	; (80046c8 <main+0x588>)
 80045fe:	f006 fa83 	bl	800ab08 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8004602:	2100      	movs	r1, #0
 8004604:	4830      	ldr	r0, [pc, #192]	; (80046c8 <main+0x588>)
 8004606:	f007 fb7f 	bl	800bd08 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800460a:	2104      	movs	r1, #4
 800460c:	482e      	ldr	r0, [pc, #184]	; (80046c8 <main+0x588>)
 800460e:	f007 fb7b 	bl	800bd08 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8004612:	2108      	movs	r1, #8
 8004614:	482c      	ldr	r0, [pc, #176]	; (80046c8 <main+0x588>)
 8004616:	f007 fb77 	bl	800bd08 <HAL_TIMEx_PWMN_Start>

	disable_gd(&controller);
 800461a:	4828      	ldr	r0, [pc, #160]	; (80046bc <main+0x57c>)
 800461c:	f7ff fbf8 	bl	8003e10 <disable_gd>

	/* CAN setup */
	HAL_GPIO_WritePin(CAN_SHDWN, GPIO_PIN_RESET); //Enable CAN
 8004620:	2200      	movs	r2, #0
 8004622:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004626:	4829      	ldr	r0, [pc, #164]	; (80046cc <main+0x58c>)
 8004628:	f004 f984 	bl	8008934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CAN_TERM, GPIO_PIN_RESET ); //Disable CAN termination resistor
 800462c:	2200      	movs	r2, #0
 800462e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004632:	4826      	ldr	r0, [pc, #152]	; (80046cc <main+0x58c>)
 8004634:	f004 f97e 	bl	8008934 <HAL_GPIO_WritePin>


	can_rx_init(&can_rx);
 8004638:	4825      	ldr	r0, [pc, #148]	; (80046d0 <main+0x590>)
 800463a:	f7fd fcd7 	bl	8001fec <can_rx_init>
	can_tx_init(&can_tx);
 800463e:	4825      	ldr	r0, [pc, #148]	; (80046d4 <main+0x594>)
 8004640:	f7fd fd04 	bl	800204c <can_tx_init>

	HAL_FDCAN_Start(&CAN_H); //start CAN
 8004644:	4824      	ldr	r0, [pc, #144]	; (80046d8 <main+0x598>)
 8004646:	f003 fb68 	bl	8007d1a <HAL_FDCAN_Start>

	/* Set Interrupt Priorities */
	NVIC_SetPriority(PWM_ISR, 1);
 800464a:	2101      	movs	r1, #1
 800464c:	2019      	movs	r0, #25
 800464e:	f7ff fd4d 	bl	80040ec <__NVIC_SetPriority>

	/* Start the FSM */
	state.state = MENU_MODE;
 8004652:	4b22      	ldr	r3, [pc, #136]	; (80046dc <main+0x59c>)
 8004654:	2200      	movs	r2, #0
 8004656:	701a      	strb	r2, [r3, #0]
	state.next_state = MENU_MODE;
 8004658:	4b20      	ldr	r3, [pc, #128]	; (80046dc <main+0x59c>)
 800465a:	2200      	movs	r2, #0
 800465c:	705a      	strb	r2, [r3, #1]
	state.ready = 1;
 800465e:	4b1f      	ldr	r3, [pc, #124]	; (80046dc <main+0x59c>)
 8004660:	2201      	movs	r2, #1
 8004662:	70da      	strb	r2, [r3, #3]

	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8004664:	2201      	movs	r2, #1
 8004666:	491e      	ldr	r1, [pc, #120]	; (80046e0 <main+0x5a0>)
 8004668:	481e      	ldr	r0, [pc, #120]	; (80046e4 <main+0x5a4>)
 800466a:	f007 fe87 	bl	800c37c <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 800466e:	4816      	ldr	r0, [pc, #88]	; (80046c8 <main+0x588>)
 8004670:	f006 f97e 	bl	800a970 <HAL_TIM_Base_Start_IT>

    /* USER CODE BEGIN 3 */
//	printf("A:%f B:%f C:%f V:%f \r\n",controller.i_a, controller.i_b, controller.i_c, controller.v_bus);
//	  printf("%f %f\r\n",controller.i_q, controller.i_q_des);

	HAL_Delay(100);
 8004674:	2064      	movs	r0, #100	; 0x64
 8004676:	f001 fadd 	bl	8005c34 <HAL_Delay>
 800467a:	e7fb      	b.n	8004674 <main+0x534>
 800467c:	20000480 	.word	0x20000480
 8004680:	20000674 	.word	0x20000674
 8004684:	388bcf64 	.word	0x388bcf64
 8004688:	40490fdb 	.word	0x40490fdb
 800468c:	40c90fdb 	.word	0x40c90fdb
 8004690:	08012ad0 	.word	0x08012ad0
 8004694:	c0490fdb 	.word	0xc0490fdb
 8004698:	08012ad8 	.word	0x08012ad8
 800469c:	20004d84 	.word	0x20004d84
 80046a0:	200053a0 	.word	0x200053a0
 80046a4:	20005328 	.word	0x20005328
 80046a8:	20005364 	.word	0x20005364
 80046ac:	20000a6c 	.word	0x20000a6c
 80046b0:	200002a0 	.word	0x200002a0
 80046b4:	20000a70 	.word	0x20000a70
 80046b8:	20000234 	.word	0x20000234
 80046bc:	20000774 	.word	0x20000774
 80046c0:	08012ae4 	.word	0x08012ae4
 80046c4:	08012b24 	.word	0x08012b24
 80046c8:	200053dc 	.word	0x200053dc
 80046cc:	48000800 	.word	0x48000800
 80046d0:	200052b0 	.word	0x200052b0
 80046d4:	20005284 	.word	0x20005284
 80046d8:	200003cc 	.word	0x200003cc
 80046dc:	20000664 	.word	0x20000664
 80046e0:	20000660 	.word	0x20000660
 80046e4:	20005428 	.word	0x20005428

080046e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b0a4      	sub	sp, #144	; 0x90
 80046ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80046f2:	2238      	movs	r2, #56	; 0x38
 80046f4:	2100      	movs	r1, #0
 80046f6:	4618      	mov	r0, r3
 80046f8:	f009 fa5e 	bl	800dbb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	605a      	str	r2, [r3, #4]
 8004706:	609a      	str	r2, [r3, #8]
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800470c:	463b      	mov	r3, r7
 800470e:	2244      	movs	r2, #68	; 0x44
 8004710:	2100      	movs	r1, #0
 8004712:	4618      	mov	r0, r3
 8004714:	f009 fa50 	bl	800dbb8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004718:	2000      	movs	r0, #0
 800471a:	f005 f8f9 	bl	8009910 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800471e:	2301      	movs	r3, #1
 8004720:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004726:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004728:	2302      	movs	r3, #2
 800472a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800472c:	2303      	movs	r3, #3
 800472e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8004730:	2302      	movs	r3, #2
 8004732:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8004734:	2354      	movs	r3, #84	; 0x54
 8004736:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800473a:	2302      	movs	r3, #2
 800473c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004740:	2302      	movs	r3, #2
 8004742:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004746:	2302      	movs	r3, #2
 8004748:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800474c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004750:	4618      	mov	r0, r3
 8004752:	f005 f991 	bl	8009a78 <HAL_RCC_OscConfig>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800475c:	f000 f82f 	bl	80047be <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004760:	230f      	movs	r3, #15
 8004762:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004764:	2303      	movs	r3, #3
 8004766:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004768:	2300      	movs	r3, #0
 800476a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800476c:	2300      	movs	r3, #0
 800476e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004770:	2300      	movs	r3, #0
 8004772:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004774:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004778:	2104      	movs	r1, #4
 800477a:	4618      	mov	r0, r3
 800477c:	f005 fc94 	bl	800a0a8 <HAL_RCC_ClockConfig>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8004786:	f000 f81a 	bl	80047be <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800478a:	f249 0342 	movw	r3, #36930	; 0x9042
 800478e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004790:	2300      	movs	r3, #0
 8004792:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004794:	2300      	movs	r3, #0
 8004796:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004798:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800479c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800479e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80047a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047a4:	463b      	mov	r3, r7
 80047a6:	4618      	mov	r0, r3
 80047a8:	f005 fe9a 	bl	800a4e0 <HAL_RCCEx_PeriphCLKConfig>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80047b2:	f000 f804 	bl	80047be <Error_Handler>
  }
}
 80047b6:	bf00      	nop
 80047b8:	3790      	adds	r7, #144	; 0x90
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047be:	b480      	push	{r7}
 80047c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047c2:	b672      	cpsid	i
}
 80047c4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80047c6:	e7fe      	b.n	80047c6 <Error_Handler+0x8>

080047c8 <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80047d2:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 80047d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80047da:	edd7 7a00 	vldr	s15, [r7]
 80047de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e6:	dd01      	ble.n	80047ec <fast_fmaxf+0x24>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	e000      	b.n	80047ee <fast_fmaxf+0x26>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	ee07 3a90 	vmov	s15, r3
    }
 80047f2:	eeb0 0a67 	vmov.f32	s0, s15
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <fast_fminf>:

float fast_fminf(float x, float y){
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	ed87 0a01 	vstr	s0, [r7, #4]
 800480a:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 800480e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004812:	edd7 7a00 	vldr	s15, [r7]
 8004816:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800481a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800481e:	d501      	bpl.n	8004824 <fast_fminf+0x24>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	e000      	b.n	8004826 <fast_fminf+0x26>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	ee07 3a90 	vmov	s15, r3
    }
 800482a:	eeb0 0a67 	vmov.f32	s0, s15
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <fmaxf3>:

float fmaxf3(float x, float y, float z){
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004842:	edc7 0a02 	vstr	s1, [r7, #8]
 8004846:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 800484a:	ed97 7a03 	vldr	s14, [r7, #12]
 800484e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004852:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800485a:	dd0c      	ble.n	8004876 <fmaxf3+0x3e>
 800485c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004860:	edd7 7a01 	vldr	s15, [r7, #4]
 8004864:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800486c:	dd01      	ble.n	8004872 <fmaxf3+0x3a>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	e00d      	b.n	800488e <fmaxf3+0x56>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	e00b      	b.n	800488e <fmaxf3+0x56>
 8004876:	ed97 7a02 	vldr	s14, [r7, #8]
 800487a:	edd7 7a01 	vldr	s15, [r7, #4]
 800487e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004886:	dd01      	ble.n	800488c <fmaxf3+0x54>
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	e000      	b.n	800488e <fmaxf3+0x56>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	ee07 3a90 	vmov	s15, r3
    }
 8004892:	eeb0 0a67 	vmov.f32	s0, s15
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <fminf3>:

float fminf3(float x, float y, float z){
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80048aa:	edc7 0a02 	vstr	s1, [r7, #8]
 80048ae:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 80048b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80048b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80048ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c2:	d50c      	bpl.n	80048de <fminf3+0x3e>
 80048c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80048c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80048cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d4:	d501      	bpl.n	80048da <fminf3+0x3a>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	e00d      	b.n	80048f6 <fminf3+0x56>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	e00b      	b.n	80048f6 <fminf3+0x56>
 80048de:	ed97 7a02 	vldr	s14, [r7, #8]
 80048e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80048e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ee:	d501      	bpl.n	80048f4 <fminf3+0x54>
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	e000      	b.n	80048f6 <fminf3+0x56>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	ee07 3a90 	vmov	s15, r3
    }
 80048fa:	eeb0 0a67 	vmov.f32	s0, s15
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	ed93 7a00 	vldr	s14, [r3]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	edd3 7a00 	vldr	s15, [r3]
 8004922:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	edd3 6a00 	vldr	s13, [r3]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	edd3 7a00 	vldr	s15, [r3]
 8004932:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800493a:	eeb0 0a67 	vmov.f32	s0, s15
 800493e:	f00d fb2d 	bl	8011f9c <sqrtf>
 8004942:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 8004946:	ed97 7a05 	vldr	s14, [r7, #20]
 800494a:	edd7 7a01 	vldr	s15, [r7, #4]
 800494e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004956:	dc00      	bgt.n	800495a <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 8004958:	e01b      	b.n	8004992 <limit_norm+0x8a>
        *x = *x * limit/norm;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	ed93 7a00 	vldr	s14, [r3]
 8004960:	edd7 7a01 	vldr	s15, [r7, #4]
 8004964:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004968:	ed97 7a05 	vldr	s14, [r7, #20]
 800496c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	ed93 7a00 	vldr	s14, [r3]
 800497c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004980:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004984:	ed97 7a05 	vldr	s14, [r7, #20]
 8004988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	edc3 7a00 	vstr	s15, [r3]
    }
 8004992:	bf00      	nop
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <float_to_uint>:
    
void limit(float *x, float min, float max){
    *x = fast_fmaxf(fast_fminf(*x, max), min);
    }

int float_to_uint(float x, float x_min, float x_max, int bits){
 800499a:	b480      	push	{r7}
 800499c:	b087      	sub	sp, #28
 800499e:	af00      	add	r7, sp, #0
 80049a0:	ed87 0a03 	vstr	s0, [r7, #12]
 80049a4:	edc7 0a02 	vstr	s1, [r7, #8]
 80049a8:	ed87 1a01 	vstr	s2, [r7, #4]
 80049ac:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 80049ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80049b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80049b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049ba:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 80049c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80049c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80049ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80049ce:	2201      	movs	r2, #1
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	3b01      	subs	r3, #1
 80049d8:	ee07 3a90 	vmov	s15, r3
 80049dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049e0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80049e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80049e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049f0:	ee17 3a90 	vmov	r3, s15
    }
 80049f4:	4618      	mov	r0, r3
 80049f6:	371c      	adds	r7, #28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <uint_to_float>:
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a0c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8004a12:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a16:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a1e:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	ee07 3a90 	vmov	s15, r3
 8004a2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a30:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a34:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004a38:	2201      	movs	r2, #1
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	3b01      	subs	r3, #1
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a52:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8004a56:	eeb0 0a67 	vmov.f32	s0, s15
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <sin_lut>:

float sin_lut(float theta){
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 8004a6e:	eddf 0a17 	vldr	s1, [pc, #92]	; 8004acc <sin_lut+0x68>
 8004a72:	ed97 0a01 	vldr	s0, [r7, #4]
 8004a76:	f00d fa65 	bl	8011f44 <fmodf>
 8004a7a:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8004a7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8a:	d506      	bpl.n	8004a9a <sin_lut+0x36>
 8004a8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a90:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004acc <sin_lut+0x68>
 8004a94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a98:	e001      	b.n	8004a9e <sin_lut+0x3a>
 8004a9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a9e:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 8004aa2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004aa6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004ad0 <sin_lut+0x6c>
 8004aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004aae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ab2:	ee17 3a90 	vmov	r3, s15
 8004ab6:	4a07      	ldr	r2, [pc, #28]	; (8004ad4 <sin_lut+0x70>)
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	ee07 3a90 	vmov	s15, r3
}
 8004ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	40c90fdb 	.word	0x40c90fdb
 8004ad0:	42a2f983 	.word	0x42a2f983
 8004ad4:	08012bac 	.word	0x08012bac

08004ad8 <cos_lut>:

float cos_lut(float theta){
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 8004ae2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004b04 <cos_lut+0x2c>
 8004ae6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004aee:	eeb0 0a67 	vmov.f32	s0, s15
 8004af2:	f7ff ffb7 	bl	8004a64 <sin_lut>
 8004af6:	eef0 7a40 	vmov.f32	s15, s0
}
 8004afa:	eeb0 0a67 	vmov.f32	s0, s15
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	3fc90fdb 	.word	0x3fc90fdb

08004b08 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8004b0c:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <MX_OPAMP1_Init+0x54>)
 8004b0e:	4a14      	ldr	r2, [pc, #80]	; (8004b60 <MX_OPAMP1_Init+0x58>)
 8004b10:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8004b12:	4b12      	ldr	r3, [pc, #72]	; (8004b5c <MX_OPAMP1_Init+0x54>)
 8004b14:	2280      	movs	r2, #128	; 0x80
 8004b16:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8004b18:	4b10      	ldr	r3, [pc, #64]	; (8004b5c <MX_OPAMP1_Init+0x54>)
 8004b1a:	2240      	movs	r2, #64	; 0x40
 8004b1c:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004b1e:	4b0f      	ldr	r3, [pc, #60]	; (8004b5c <MX_OPAMP1_Init+0x54>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8004b24:	4b0d      	ldr	r3, [pc, #52]	; (8004b5c <MX_OPAMP1_Init+0x54>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004b2a:	4b0c      	ldr	r3, [pc, #48]	; (8004b5c <MX_OPAMP1_Init+0x54>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004b30:	4b0a      	ldr	r3, [pc, #40]	; (8004b5c <MX_OPAMP1_Init+0x54>)
 8004b32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b36:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8004b38:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <MX_OPAMP1_Init+0x54>)
 8004b3a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004b3e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004b40:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <MX_OPAMP1_Init+0x54>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8004b46:	4805      	ldr	r0, [pc, #20]	; (8004b5c <MX_OPAMP1_Init+0x54>)
 8004b48:	f004 fde0 	bl	800970c <HAL_OPAMP_Init>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8004b52:	f7ff fe34 	bl	80047be <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8004b56:	bf00      	nop
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	200053a0 	.word	0x200053a0
 8004b60:	40010300 	.word	0x40010300

08004b64 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8004b68:	4b13      	ldr	r3, [pc, #76]	; (8004bb8 <MX_OPAMP2_Init+0x54>)
 8004b6a:	4a14      	ldr	r2, [pc, #80]	; (8004bbc <MX_OPAMP2_Init+0x58>)
 8004b6c:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8004b6e:	4b12      	ldr	r3, [pc, #72]	; (8004bb8 <MX_OPAMP2_Init+0x54>)
 8004b70:	2280      	movs	r2, #128	; 0x80
 8004b72:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8004b74:	4b10      	ldr	r3, [pc, #64]	; (8004bb8 <MX_OPAMP2_Init+0x54>)
 8004b76:	2240      	movs	r2, #64	; 0x40
 8004b78:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004b7a:	4b0f      	ldr	r3, [pc, #60]	; (8004bb8 <MX_OPAMP2_Init+0x54>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 8004b80:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <MX_OPAMP2_Init+0x54>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004b86:	4b0c      	ldr	r3, [pc, #48]	; (8004bb8 <MX_OPAMP2_Init+0x54>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004b8c:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <MX_OPAMP2_Init+0x54>)
 8004b8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b92:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8004b94:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <MX_OPAMP2_Init+0x54>)
 8004b96:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004b9a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004b9c:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <MX_OPAMP2_Init+0x54>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8004ba2:	4805      	ldr	r0, [pc, #20]	; (8004bb8 <MX_OPAMP2_Init+0x54>)
 8004ba4:	f004 fdb2 	bl	800970c <HAL_OPAMP_Init>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8004bae:	f7ff fe06 	bl	80047be <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8004bb2:	bf00      	nop
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20005328 	.word	0x20005328
 8004bbc:	40010304 	.word	0x40010304

08004bc0 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8004bc4:	4b13      	ldr	r3, [pc, #76]	; (8004c14 <MX_OPAMP3_Init+0x54>)
 8004bc6:	4a14      	ldr	r2, [pc, #80]	; (8004c18 <MX_OPAMP3_Init+0x58>)
 8004bc8:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8004bca:	4b12      	ldr	r3, [pc, #72]	; (8004c14 <MX_OPAMP3_Init+0x54>)
 8004bcc:	2280      	movs	r2, #128	; 0x80
 8004bce:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8004bd0:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <MX_OPAMP3_Init+0x54>)
 8004bd2:	2240      	movs	r2, #64	; 0x40
 8004bd4:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004bd6:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <MX_OPAMP3_Init+0x54>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8004bdc:	4b0d      	ldr	r3, [pc, #52]	; (8004c14 <MX_OPAMP3_Init+0x54>)
 8004bde:	2201      	movs	r2, #1
 8004be0:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004be2:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <MX_OPAMP3_Init+0x54>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004be8:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <MX_OPAMP3_Init+0x54>)
 8004bea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004bee:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8004bf0:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <MX_OPAMP3_Init+0x54>)
 8004bf2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004bf6:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004bf8:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <MX_OPAMP3_Init+0x54>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8004bfe:	4805      	ldr	r0, [pc, #20]	; (8004c14 <MX_OPAMP3_Init+0x54>)
 8004c00:	f004 fd84 	bl	800970c <HAL_OPAMP_Init>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8004c0a:	f7ff fdd8 	bl	80047be <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8004c0e:	bf00      	nop
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20005364 	.word	0x20005364
 8004c18:	40010308 	.word	0x40010308

08004c1c <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08a      	sub	sp, #40	; 0x28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c24:	f107 0314 	add.w	r3, r7, #20
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	605a      	str	r2, [r3, #4]
 8004c2e:	609a      	str	r2, [r3, #8]
 8004c30:	60da      	str	r2, [r3, #12]
 8004c32:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a2e      	ldr	r2, [pc, #184]	; (8004cf4 <HAL_OPAMP_MspInit+0xd8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d119      	bne.n	8004c72 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c3e:	4b2e      	ldr	r3, [pc, #184]	; (8004cf8 <HAL_OPAMP_MspInit+0xdc>)
 8004c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c42:	4a2d      	ldr	r2, [pc, #180]	; (8004cf8 <HAL_OPAMP_MspInit+0xdc>)
 8004c44:	f043 0301 	orr.w	r3, r3, #1
 8004c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c4a:	4b2b      	ldr	r3, [pc, #172]	; (8004cf8 <HAL_OPAMP_MspInit+0xdc>)
 8004c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	613b      	str	r3, [r7, #16]
 8004c54:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8004c56:	230a      	movs	r3, #10
 8004c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c62:	f107 0314 	add.w	r3, r7, #20
 8004c66:	4619      	mov	r1, r3
 8004c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c6c:	f003 fce0 	bl	8008630 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8004c70:	e03b      	b.n	8004cea <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a21      	ldr	r2, [pc, #132]	; (8004cfc <HAL_OPAMP_MspInit+0xe0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d119      	bne.n	8004cb0 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c7c:	4b1e      	ldr	r3, [pc, #120]	; (8004cf8 <HAL_OPAMP_MspInit+0xdc>)
 8004c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c80:	4a1d      	ldr	r2, [pc, #116]	; (8004cf8 <HAL_OPAMP_MspInit+0xdc>)
 8004c82:	f043 0301 	orr.w	r3, r3, #1
 8004c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c88:	4b1b      	ldr	r3, [pc, #108]	; (8004cf8 <HAL_OPAMP_MspInit+0xdc>)
 8004c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004c94:	23a0      	movs	r3, #160	; 0xa0
 8004c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ca0:	f107 0314 	add.w	r3, r7, #20
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004caa:	f003 fcc1 	bl	8008630 <HAL_GPIO_Init>
}
 8004cae:	e01c      	b.n	8004cea <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a12      	ldr	r2, [pc, #72]	; (8004d00 <HAL_OPAMP_MspInit+0xe4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d117      	bne.n	8004cea <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cba:	4b0f      	ldr	r3, [pc, #60]	; (8004cf8 <HAL_OPAMP_MspInit+0xdc>)
 8004cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cbe:	4a0e      	ldr	r2, [pc, #56]	; (8004cf8 <HAL_OPAMP_MspInit+0xdc>)
 8004cc0:	f043 0302 	orr.w	r3, r3, #2
 8004cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cc6:	4b0c      	ldr	r3, [pc, #48]	; (8004cf8 <HAL_OPAMP_MspInit+0xdc>)
 8004cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	60bb      	str	r3, [r7, #8]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8004cd2:	2305      	movs	r3, #5
 8004cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cde:	f107 0314 	add.w	r3, r7, #20
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4807      	ldr	r0, [pc, #28]	; (8004d04 <HAL_OPAMP_MspInit+0xe8>)
 8004ce6:	f003 fca3 	bl	8008630 <HAL_GPIO_Init>
}
 8004cea:	bf00      	nop
 8004cec:	3728      	adds	r7, #40	; 0x28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40010300 	.word	0x40010300
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	40010304 	.word	0x40010304
 8004d00:	40010308 	.word	0x40010308
 8004d04:	48000400 	.word	0x48000400

08004d08 <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	af04      	add	r7, sp, #16
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
	encoder->config.raw = 0;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	801a      	strh	r2, [r3, #0]
	encoder->config.bit.PM = 0;
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	8813      	ldrh	r3, [r2, #0]
 8004d1c:	f36f 2309 	bfc	r3, #8, #2
 8004d20:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.HYST = 0;
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	8813      	ldrh	r3, [r2, #0]
 8004d26:	f36f 238b 	bfc	r3, #10, #2
 8004d2a:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.OUTS = 0;
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	8813      	ldrh	r3, [r2, #0]
 8004d30:	f36f 330d 	bfc	r3, #12, #2
 8004d34:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.PWMF = 0;
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	8813      	ldrh	r3, [r2, #0]
 8004d3a:	f36f 338f 	bfc	r3, #14, #2
 8004d3e:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.SF = 3;
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	8813      	ldrh	r3, [r2, #0]
 8004d44:	f043 0303 	orr.w	r3, r3, #3
 8004d48:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.FTH = 7;
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	8813      	ldrh	r3, [r2, #0]
 8004d4e:	f043 031c 	orr.w	r3, r3, #28
 8004d52:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.WD = 0;
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	8813      	ldrh	r3, [r2, #0]
 8004d58:	f36f 1345 	bfc	r3, #5, #1
 8004d5c:	8013      	strh	r3, [r2, #0]
	HAL_I2C_Mem_Write(&ENC_I2C, ENC_ADDRESS,0x01,I2C_MEMADD_SIZE_8BIT, (uint8_t*)&encoder->config.raw, 2,2);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2202      	movs	r2, #2
 8004d62:	9202      	str	r2, [sp, #8]
 8004d64:	2202      	movs	r2, #2
 8004d66:	9201      	str	r2, [sp, #4]
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	216c      	movs	r1, #108	; 0x6c
 8004d70:	4810      	ldr	r0, [pc, #64]	; (8004db4 <ps_warmup+0xac>)
 8004d72:	f003 ff7d 	bl	8008c70 <HAL_I2C_Mem_Write>
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	e012      	b.n	8004da2 <ps_warmup+0x9a>
		encoder->data.raw = 0;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	805a      	strh	r2, [r3, #2]
		HAL_I2C_Mem_Read(&ENC_I2C, ENC_ADDRESS,0x0C,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&encoder->data.raw, 2,2);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3302      	adds	r3, #2
 8004d86:	2202      	movs	r2, #2
 8004d88:	9202      	str	r2, [sp, #8]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	9201      	str	r2, [sp, #4]
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	2301      	movs	r3, #1
 8004d92:	220c      	movs	r2, #12
 8004d94:	216c      	movs	r1, #108	; 0x6c
 8004d96:	4807      	ldr	r0, [pc, #28]	; (8004db4 <ps_warmup+0xac>)
 8004d98:	f004 f87e 	bl	8008e98 <HAL_I2C_Mem_Read>
	for(int i = 0; i<n; i++){
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	dbe8      	blt.n	8004d7c <ps_warmup+0x74>
	}
}
 8004daa:	bf00      	nop
 8004dac:	bf00      	nop
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20000430 	.word	0x20000430

08004db8 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08c      	sub	sp, #48	; 0x30
 8004dbc:	af02      	add	r7, sp, #8
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	609a      	str	r2, [r3, #8]
//	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
	memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f103 0010 	add.w	r0, r3, #16
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	330c      	adds	r3, #12
 8004dd6:	224c      	movs	r2, #76	; 0x4c
 8004dd8:	4619      	mov	r1, r3
 8004dda:	f008 fed3 	bl	800db84 <memmove>

	/* SPI read/write */
	encoder->data.raw = 0;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	805a      	strh	r2, [r3, #2]
	HAL_I2C_Master_Receive(&ENC_I2C, ENC_ADDRESS,(uint8_t*)&encoder->data.raw, 2,2);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	1c9a      	adds	r2, r3, #2
 8004de8:	2302      	movs	r3, #2
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	2302      	movs	r3, #2
 8004dee:	216c      	movs	r1, #108	; 0x6c
 8004df0:	489b      	ldr	r0, [pc, #620]	; (8005060 <ps_sample+0x2a8>)
 8004df2:	f003 fe47 	bl	8008a84 <HAL_I2C_Master_Receive>
	uint16_t angle = ((encoder->data.bit.angle8_12<<8)&0xF00)|encoder->data.bit.angle0_7;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	885b      	ldrh	r3, [r3, #2]
 8004dfa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	021b      	lsls	r3, r3, #8
 8004e02:	b21b      	sxth	r3, r3
 8004e04:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e08:	b21a      	sxth	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	885b      	ldrh	r3, [r3, #2]
 8004e0e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	b21b      	sxth	r3, r3
 8004e16:	4313      	orrs	r3, r2
 8004e18:	b21b      	sxth	r3, r3
 8004e1a:	847b      	strh	r3, [r7, #34]	; 0x22
	encoder->raw = angle;
 8004e1c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	675a      	str	r2, [r3, #116]	; 0x74

	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>7];				// lookup table lower entry
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e26:	11da      	asrs	r2, r3, #7
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3236      	adds	r2, #54	; 0x36
 8004e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e30:	61fb      	str	r3, [r7, #28]
	int off_2 = encoder->offset_lut[((encoder->raw>>7)+1)%128];		// lookup table higher entry
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e36:	11db      	asrs	r3, r3, #7
 8004e38:	3301      	adds	r3, #1
 8004e3a:	425a      	negs	r2, r3
 8004e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e44:	bf58      	it	pl
 8004e46:	4253      	negpl	r3, r2
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	3336      	adds	r3, #54	; 0x36
 8004e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e50:	61bb      	str	r3, [r7, #24]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>7)<<7))>>7);     // Interpolate between lookup table entries
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e60:	fb02 f303 	mul.w	r3, r2, r3
 8004e64:	11db      	asrs	r3, r3, #7
 8004e66:	69fa      	ldr	r2, [r7, #28]
 8004e68:	4413      	add	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]
	encoder->count = encoder->raw - off_interp;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	1ad2      	subs	r2, r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	679a      	str	r2, [r3, #120]	; 0x78


	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count))/((float)ENC_CPR);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e7c:	ee07 3a90 	vmov	s15, r3
 8004e80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e84:	eddf 6a77 	vldr	s13, [pc, #476]	; 8005064 <ps_sample+0x2ac>
 8004e88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	edc3 7a01 	vstr	s15, [r3, #4]
	int int_angle = encoder->angle_singleturn;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e9c:	ee17 3a90 	vmov	r3, s15
 8004ea0:	613b      	str	r3, [r7, #16]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	ee07 3a90 	vmov	s15, r3
 8004eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004eb6:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8005068 <ps_sample+0x2b0>
 8004eba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	edc3 7a01 	vstr	s15, [r3, #4]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	edd3 7a01 	vldr	s15, [r3, #4]
 8004eca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ed2:	d507      	bpl.n	8004ee4 <ps_sample+0x12c>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	edd3 7a01 	vldr	s15, [r3, #4]
 8004eda:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8005068 <ps_sample+0x2b0>
 8004ede:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ee2:	e002      	b.n	8004eea <ps_sample+0x132>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	edd3 7a01 	vldr	s15, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004efa:	4b5c      	ldr	r3, [pc, #368]	; (800506c <ps_sample+0x2b4>)
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	ee07 3a90 	vmov	s15, r3
 8004f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f0c:	eddf 6a55 	vldr	s13, [pc, #340]	; 8005064 <ps_sample+0x2ac>
 8004f10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	int_angle = (int)encoder->elec_angle;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f24:	ee17 3a90 	vmov	r3, s15
 8004f28:	613b      	str	r3, [r7, #16]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f3e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8005068 <ps_sample+0x2b0>
 8004f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004f52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5a:	d507      	bpl.n	8004f6c <ps_sample+0x1b4>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004f62:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8005068 <ps_sample+0x2b0>
 8004f66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f6a:	e002      	b.n	8004f72 <ps_sample+0x1ba>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	/* Rollover */
	int rollover = 0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f8c:	edc7 7a03 	vstr	s15, [r7, #12]
	if(angle_diff > PI_F){rollover = -1;}
 8004f90:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f94:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005070 <ps_sample+0x2b8>
 8004f98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa0:	dd03      	ble.n	8004faa <ps_sample+0x1f2>
 8004fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa8:	e00a      	b.n	8004fc0 <ps_sample+0x208>
	else if(angle_diff < -PI_F){rollover = 1;}
 8004faa:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fae:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005074 <ps_sample+0x2bc>
 8004fb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fba:	d501      	bpl.n	8004fc0 <ps_sample+0x208>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
	encoder->turns += rollover;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	441a      	add	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if(!encoder->first_sample){
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d107      	bne.n	8004fea <ps_sample+0x232>
		encoder->turns = 0;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		encoder->first_sample = 1;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
	}

	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns-encoder->mech_zero;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ffe:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8005068 <ps_sample+0x2b0>
 8005002:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005006:	ee37 7a27 	vadd.f32	s14, s14, s15
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8005010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	edc3 7a03 	vstr	s15, [r3, #12]

	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8005026:	ee77 6a67 	vsub.f32	s13, s14, s15
 800502a:	edd7 7a00 	vldr	s15, [r7]
 800502e:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8005032:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800504c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

}
 8005056:	bf00      	nop
 8005058:	3728      	adds	r7, #40	; 0x28
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000430 	.word	0x20000430
 8005064:	45800000 	.word	0x45800000
 8005068:	40c90fdb 	.word	0x40c90fdb
 800506c:	20004d84 	.word	0x20004d84
 8005070:	40490fdb 	.word	0x40490fdb
 8005074:	c0490fdb 	.word	0xc0490fdb

08005078 <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
//	printf("Raw: %d\r\n", encoder->raw);
	printf("Raw: %d", encoder->raw);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005086:	4619      	mov	r1, r3
 8005088:	481d      	ldr	r0, [pc, #116]	; (8005100 <ps_print+0x88>)
 800508a:	f009 fa07 	bl	800e49c <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005092:	4619      	mov	r1, r3
 8005094:	481b      	ldr	r0, [pc, #108]	; (8005104 <ps_print+0x8c>)
 8005096:	f009 fa01 	bl	800e49c <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fb fa7a 	bl	8000598 <__aeabi_f2d>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4817      	ldr	r0, [pc, #92]	; (8005108 <ps_print+0x90>)
 80050aa:	f009 f9f7 	bl	800e49c <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fb fa70 	bl	8000598 <__aeabi_f2d>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4813      	ldr	r0, [pc, #76]	; (800510c <ps_print+0x94>)
 80050be:	f009 f9ed 	bl	800e49c <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fb fa66 	bl	8000598 <__aeabi_f2d>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	480f      	ldr	r0, [pc, #60]	; (8005110 <ps_print+0x98>)
 80050d2:	f009 f9e3 	bl	800e49c <iprintf>
	printf("   Turns:  %d", encoder->turns);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050dc:	4619      	mov	r1, r3
 80050de:	480d      	ldr	r0, [pc, #52]	; (8005114 <ps_print+0x9c>)
 80050e0:	f009 f9dc 	bl	800e49c <iprintf>
	printf("   CAN:   %f\r\n", encoder->angle_multiturn[0]);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fb fa55 	bl	8000598 <__aeabi_f2d>
 80050ee:	4602      	mov	r2, r0
 80050f0:	460b      	mov	r3, r1
 80050f2:	4809      	ldr	r0, [pc, #36]	; (8005118 <ps_print+0xa0>)
 80050f4:	f009 f9d2 	bl	800e49c <iprintf>
	//HAL_Delay(dt_ms);
}
 80050f8:	bf00      	nop
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	08012b30 	.word	0x08012b30
 8005104:	08012b38 	.word	0x08012b38
 8005108:	08012b50 	.word	0x08012b50
 800510c:	08012b64 	.word	0x08012b64
 8005110:	08012b78 	.word	0x08012b78
 8005114:	08012b8c 	.word	0x08012b8c
 8005118:	08012b9c 	.word	0x08012b9c

0800511c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005122:	4b0f      	ldr	r3, [pc, #60]	; (8005160 <HAL_MspInit+0x44>)
 8005124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005126:	4a0e      	ldr	r2, [pc, #56]	; (8005160 <HAL_MspInit+0x44>)
 8005128:	f043 0301 	orr.w	r3, r3, #1
 800512c:	6613      	str	r3, [r2, #96]	; 0x60
 800512e:	4b0c      	ldr	r3, [pc, #48]	; (8005160 <HAL_MspInit+0x44>)
 8005130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	607b      	str	r3, [r7, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800513a:	4b09      	ldr	r3, [pc, #36]	; (8005160 <HAL_MspInit+0x44>)
 800513c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513e:	4a08      	ldr	r2, [pc, #32]	; (8005160 <HAL_MspInit+0x44>)
 8005140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005144:	6593      	str	r3, [r2, #88]	; 0x58
 8005146:	4b06      	ldr	r3, [pc, #24]	; (8005160 <HAL_MspInit+0x44>)
 8005148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005152:	f004 fc81 	bl	8009a58 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005156:	bf00      	nop
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	40021000 	.word	0x40021000

08005164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005168:	e7fe      	b.n	8005168 <NMI_Handler+0x4>

0800516a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800516a:	b480      	push	{r7}
 800516c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800516e:	e7fe      	b.n	800516e <HardFault_Handler+0x4>

08005170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005174:	e7fe      	b.n	8005174 <MemManage_Handler+0x4>

08005176 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005176:	b480      	push	{r7}
 8005178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800517a:	e7fe      	b.n	800517a <BusFault_Handler+0x4>

0800517c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005180:	e7fe      	b.n	8005180 <UsageFault_Handler+0x4>

08005182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005182:	b480      	push	{r7}
 8005184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005186:	bf00      	nop
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005194:	bf00      	nop
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800519e:	b480      	push	{r7}
 80051a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051a2:	bf00      	nop
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051b0:	f000 fd22 	bl	8005bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051b4:	bf00      	nop
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80051bc:	4802      	ldr	r0, [pc, #8]	; (80051c8 <DMA1_Channel1_IRQHandler+0x10>)
 80051be:	f002 fa78 	bl	80076b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80051c2:	bf00      	nop
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	2000030c 	.word	0x2000030c

080051cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80051d0:	4802      	ldr	r0, [pc, #8]	; (80051dc <DMA1_Channel2_IRQHandler+0x10>)
 80051d2:	f002 fa6e 	bl	80076b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80051d6:	bf00      	nop
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	2000036c 	.word	0x2000036c

080051e0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	HAL_GPIO_WritePin(PWM_PIN, GPIO_PIN_SET );	// Useful for timing
 80051e4:	2201      	movs	r2, #1
 80051e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051ee:	f003 fba1 	bl	8008934 <HAL_GPIO_WritePin>
	analog_sample(&controller);
 80051f2:	4810      	ldr	r0, [pc, #64]	; (8005234 <TIM1_UP_TIM16_IRQHandler+0x54>)
 80051f4:	f7fd f8fc 	bl	80023f0 <analog_sample>
	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 80051f8:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8005238 <TIM1_UP_TIM16_IRQHandler+0x58>
 80051fc:	480f      	ldr	r0, [pc, #60]	; (800523c <TIM1_UP_TIM16_IRQHandler+0x5c>)
 80051fe:	f7ff fddb 	bl	8004db8 <ps_sample>
	/* Run Finite State Machine */
	run_fsm(&state);
 8005202:	480f      	ldr	r0, [pc, #60]	; (8005240 <TIM1_UP_TIM16_IRQHandler+0x60>)
 8005204:	f7fd ff3c 	bl	8003080 <run_fsm>
	can_tx_rx();
 8005208:	f000 f83a 	bl	8005280 <can_tx_rx>
	/* increment loop count */
	controller.loop_count++;
 800520c:	4b09      	ldr	r3, [pc, #36]	; (8005234 <TIM1_UP_TIM16_IRQHandler+0x54>)
 800520e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005212:	3301      	adds	r3, #1
 8005214:	4a07      	ldr	r2, [pc, #28]	; (8005234 <TIM1_UP_TIM16_IRQHandler+0x54>)
 8005216:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800521a:	480a      	ldr	r0, [pc, #40]	; (8005244 <TIM1_UP_TIM16_IRQHandler+0x64>)
 800521c:	f005 fd74 	bl	800ad08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
	HAL_GPIO_WritePin(PWM_PIN, GPIO_PIN_RESET );	// Useful for timing
 8005220:	2200      	movs	r2, #0
 8005222:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800522a:	f003 fb83 	bl	8008934 <HAL_GPIO_WritePin>
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800522e:	bf00      	nop
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	20000774 	.word	0x20000774
 8005238:	388bcf64 	.word	0x388bcf64
 800523c:	20000480 	.word	0x20000480
 8005240:	20000664 	.word	0x20000664
 8005244:	200053dc 	.word	0x200053dc

08005248 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800524e:	4809      	ldr	r0, [pc, #36]	; (8005274 <USART2_IRQHandler+0x2c>)
 8005250:	f007 f8da 	bl	800c408 <HAL_UART_IRQHandler>

  char c = Serial2RxBuffer[0];
 8005254:	4b08      	ldr	r3, [pc, #32]	; (8005278 <USART2_IRQHandler+0x30>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	71fb      	strb	r3, [r7, #7]
  update_fsm(&state, c);
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	4619      	mov	r1, r3
 800525e:	4807      	ldr	r0, [pc, #28]	; (800527c <USART2_IRQHandler+0x34>)
 8005260:	f7fe f88a 	bl	8003378 <update_fsm>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005264:	4803      	ldr	r0, [pc, #12]	; (8005274 <USART2_IRQHandler+0x2c>)
 8005266:	f007 f8cf 	bl	800c408 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800526a:	bf00      	nop
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	20005428 	.word	0x20005428
 8005278:	20000660 	.word	0x20000660
 800527c:	20000664 	.word	0x20000664

08005280 <can_tx_rx>:

/* USER CODE BEGIN 1 */
void can_tx_rx(void){
 8005280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005282:	b093      	sub	sp, #76	; 0x4c
 8005284:	af10      	add	r7, sp, #64	; 0x40
	int no_message = HAL_FDCAN_GetRxMessage(&CAN_H, FDCAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);
 8005286:	4b84      	ldr	r3, [pc, #528]	; (8005498 <can_tx_rx+0x218>)
 8005288:	4a84      	ldr	r2, [pc, #528]	; (800549c <can_tx_rx+0x21c>)
 800528a:	2140      	movs	r1, #64	; 0x40
 800528c:	4884      	ldr	r0, [pc, #528]	; (80054a0 <can_tx_rx+0x220>)
 800528e:	f002 fdb1 	bl	8007df4 <HAL_FDCAN_GetRxMessage>
 8005292:	4603      	mov	r3, r0
 8005294:	607b      	str	r3, [r7, #4]
	if(!no_message){
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	f040 80f8 	bne.w	800548e <can_tx_rx+0x20e>
//		printf("%d\r\n",can_rx.rx_header.Identifier);
		pack_reply(&can_tx, CAN_ID,  comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR);	// Pack response
 800529e:	4b81      	ldr	r3, [pc, #516]	; (80054a4 <can_tx_rx+0x224>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	4a80      	ldr	r2, [pc, #512]	; (80054a8 <can_tx_rx+0x228>)
 80052a6:	ed92 7a03 	vldr	s14, [r2, #12]
 80052aa:	4a80      	ldr	r2, [pc, #512]	; (80054ac <can_tx_rx+0x22c>)
 80052ac:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 80052b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80052b4:	4a7c      	ldr	r2, [pc, #496]	; (80054a8 <can_tx_rx+0x228>)
 80052b6:	ed92 7a18 	vldr	s14, [r2, #96]	; 0x60
 80052ba:	4a7c      	ldr	r2, [pc, #496]	; (80054ac <can_tx_rx+0x22c>)
 80052bc:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 80052c0:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80052c4:	4a7a      	ldr	r2, [pc, #488]	; (80054b0 <can_tx_rx+0x230>)
 80052c6:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 80052ca:	4a78      	ldr	r2, [pc, #480]	; (80054ac <can_tx_rx+0x22c>)
 80052cc:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80052d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052d4:	4a75      	ldr	r2, [pc, #468]	; (80054ac <can_tx_rx+0x22c>)
 80052d6:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 80052da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052de:	eeb0 1a67 	vmov.f32	s2, s15
 80052e2:	eef0 0a46 	vmov.f32	s1, s12
 80052e6:	eeb0 0a66 	vmov.f32	s0, s13
 80052ea:	4619      	mov	r1, r3
 80052ec:	4871      	ldr	r0, [pc, #452]	; (80054b4 <can_tx_rx+0x234>)
 80052ee:	f7fc fed7 	bl	80020a0 <pack_reply>
		HAL_FDCAN_AddMessageToTxFifoQ(&CAN_H, &can_tx.tx_header, can_tx.data);	// Send response
 80052f2:	4a71      	ldr	r2, [pc, #452]	; (80054b8 <can_tx_rx+0x238>)
 80052f4:	4971      	ldr	r1, [pc, #452]	; (80054bc <can_tx_rx+0x23c>)
 80052f6:	486a      	ldr	r0, [pc, #424]	; (80054a0 <can_tx_rx+0x220>)
 80052f8:	f002 fd37 	bl	8007d6a <HAL_FDCAN_AddMessageToTxFifoQ>
	  if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 80052fc:	4b70      	ldr	r3, [pc, #448]	; (80054c0 <can_tx_rx+0x240>)
 80052fe:	785a      	ldrb	r2, [r3, #1]
 8005300:	4b6f      	ldr	r3, [pc, #444]	; (80054c0 <can_tx_rx+0x240>)
 8005302:	789b      	ldrb	r3, [r3, #2]
 8005304:	4013      	ands	r3, r2
 8005306:	b2da      	uxtb	r2, r3
 8005308:	4b6d      	ldr	r3, [pc, #436]	; (80054c0 <can_tx_rx+0x240>)
 800530a:	78db      	ldrb	r3, [r3, #3]
 800530c:	4013      	ands	r3, r2
 800530e:	b2da      	uxtb	r2, r3
 8005310:	4b6b      	ldr	r3, [pc, #428]	; (80054c0 <can_tx_rx+0x240>)
 8005312:	791b      	ldrb	r3, [r3, #4]
 8005314:	4013      	ands	r3, r2
 8005316:	b2da      	uxtb	r2, r3
 8005318:	4b69      	ldr	r3, [pc, #420]	; (80054c0 <can_tx_rx+0x240>)
 800531a:	795b      	ldrb	r3, [r3, #5]
 800531c:	4013      	ands	r3, r2
 800531e:	b2da      	uxtb	r2, r3
 8005320:	4b67      	ldr	r3, [pc, #412]	; (80054c0 <can_tx_rx+0x240>)
 8005322:	799b      	ldrb	r3, [r3, #6]
 8005324:	4013      	ands	r3, r2
 8005326:	b2da      	uxtb	r2, r3
 8005328:	4b65      	ldr	r3, [pc, #404]	; (80054c0 <can_tx_rx+0x240>)
 800532a:	79db      	ldrb	r3, [r3, #7]
 800532c:	4013      	ands	r3, r2
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2bff      	cmp	r3, #255	; 0xff
 8005332:	bf0c      	ite	eq
 8005334:	2301      	moveq	r3, #1
 8005336:	2300      	movne	r3, #0
 8005338:	b2da      	uxtb	r2, r3
 800533a:	4b61      	ldr	r3, [pc, #388]	; (80054c0 <can_tx_rx+0x240>)
 800533c:	7a1b      	ldrb	r3, [r3, #8]
 800533e:	2bfc      	cmp	r3, #252	; 0xfc
 8005340:	bf0c      	ite	eq
 8005342:	2301      	moveq	r3, #1
 8005344:	2300      	movne	r3, #0
 8005346:	b2db      	uxtb	r3, r3
 8005348:	4013      	ands	r3, r2
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d004      	beq.n	800535a <can_tx_rx+0xda>
		  update_fsm(&state, MOTOR_CMD);
 8005350:	216d      	movs	r1, #109	; 0x6d
 8005352:	485c      	ldr	r0, [pc, #368]	; (80054c4 <can_tx_rx+0x244>)
 8005354:	f7fe f810 	bl	8003378 <update_fsm>
	  else{
		  unpack_cmd(can_rx, controller.commands);	// Unpack commands
		  controller.timeout = 0;					// Reset timeout counter
	  }
	}
}
 8005358:	e099      	b.n	800548e <can_tx_rx+0x20e>
	  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 800535a:	4b59      	ldr	r3, [pc, #356]	; (80054c0 <can_tx_rx+0x240>)
 800535c:	785a      	ldrb	r2, [r3, #1]
 800535e:	4b58      	ldr	r3, [pc, #352]	; (80054c0 <can_tx_rx+0x240>)
 8005360:	789b      	ldrb	r3, [r3, #2]
 8005362:	4013      	ands	r3, r2
 8005364:	b2da      	uxtb	r2, r3
 8005366:	4b56      	ldr	r3, [pc, #344]	; (80054c0 <can_tx_rx+0x240>)
 8005368:	78db      	ldrb	r3, [r3, #3]
 800536a:	4013      	ands	r3, r2
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2bff      	cmp	r3, #255	; 0xff
 8005370:	bf0c      	ite	eq
 8005372:	2301      	moveq	r3, #1
 8005374:	2300      	movne	r3, #0
 8005376:	b2db      	uxtb	r3, r3
 8005378:	461a      	mov	r2, r3
 800537a:	4b51      	ldr	r3, [pc, #324]	; (80054c0 <can_tx_rx+0x240>)
 800537c:	791b      	ldrb	r3, [r3, #4]
 800537e:	2bff      	cmp	r3, #255	; 0xff
 8005380:	bf0c      	ite	eq
 8005382:	2301      	moveq	r3, #1
 8005384:	2300      	movne	r3, #0
 8005386:	b2db      	uxtb	r3, r3
 8005388:	4619      	mov	r1, r3
 800538a:	4b4d      	ldr	r3, [pc, #308]	; (80054c0 <can_tx_rx+0x240>)
 800538c:	795b      	ldrb	r3, [r3, #5]
 800538e:	2bff      	cmp	r3, #255	; 0xff
 8005390:	bf0c      	ite	eq
 8005392:	2301      	moveq	r3, #1
 8005394:	2300      	movne	r3, #0
 8005396:	b2db      	uxtb	r3, r3
 8005398:	fb03 f301 	mul.w	r3, r3, r1
 800539c:	4013      	ands	r3, r2
 800539e:	4a48      	ldr	r2, [pc, #288]	; (80054c0 <can_tx_rx+0x240>)
 80053a0:	7992      	ldrb	r2, [r2, #6]
 80053a2:	2aff      	cmp	r2, #255	; 0xff
 80053a4:	bf0c      	ite	eq
 80053a6:	2201      	moveq	r2, #1
 80053a8:	2200      	movne	r2, #0
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	4013      	ands	r3, r2
 80053ae:	4a44      	ldr	r2, [pc, #272]	; (80054c0 <can_tx_rx+0x240>)
 80053b0:	79d2      	ldrb	r2, [r2, #7]
 80053b2:	2aff      	cmp	r2, #255	; 0xff
 80053b4:	bf0c      	ite	eq
 80053b6:	2201      	moveq	r2, #1
 80053b8:	2200      	movne	r2, #0
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	4013      	ands	r3, r2
 80053be:	4a40      	ldr	r2, [pc, #256]	; (80054c0 <can_tx_rx+0x240>)
 80053c0:	7a12      	ldrb	r2, [r2, #8]
 80053c2:	2afd      	cmp	r2, #253	; 0xfd
 80053c4:	bf0c      	ite	eq
 80053c6:	2201      	moveq	r2, #1
 80053c8:	2200      	movne	r2, #0
 80053ca:	b2d2      	uxtb	r2, r2
 80053cc:	4013      	ands	r3, r2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d004      	beq.n	80053dc <can_tx_rx+0x15c>
		  update_fsm(&state, MENU_CMD);
 80053d2:	211b      	movs	r1, #27
 80053d4:	483b      	ldr	r0, [pc, #236]	; (80054c4 <can_tx_rx+0x244>)
 80053d6:	f7fd ffcf 	bl	8003378 <update_fsm>
}
 80053da:	e058      	b.n	800548e <can_tx_rx+0x20e>
	  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 80053dc:	4b38      	ldr	r3, [pc, #224]	; (80054c0 <can_tx_rx+0x240>)
 80053de:	785a      	ldrb	r2, [r3, #1]
 80053e0:	4b37      	ldr	r3, [pc, #220]	; (80054c0 <can_tx_rx+0x240>)
 80053e2:	789b      	ldrb	r3, [r3, #2]
 80053e4:	4013      	ands	r3, r2
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	4b35      	ldr	r3, [pc, #212]	; (80054c0 <can_tx_rx+0x240>)
 80053ea:	78db      	ldrb	r3, [r3, #3]
 80053ec:	4013      	ands	r3, r2
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2bff      	cmp	r3, #255	; 0xff
 80053f2:	bf0c      	ite	eq
 80053f4:	2301      	moveq	r3, #1
 80053f6:	2300      	movne	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	461a      	mov	r2, r3
 80053fc:	4b30      	ldr	r3, [pc, #192]	; (80054c0 <can_tx_rx+0x240>)
 80053fe:	791b      	ldrb	r3, [r3, #4]
 8005400:	2bff      	cmp	r3, #255	; 0xff
 8005402:	bf0c      	ite	eq
 8005404:	2301      	moveq	r3, #1
 8005406:	2300      	movne	r3, #0
 8005408:	b2db      	uxtb	r3, r3
 800540a:	4619      	mov	r1, r3
 800540c:	4b2c      	ldr	r3, [pc, #176]	; (80054c0 <can_tx_rx+0x240>)
 800540e:	795b      	ldrb	r3, [r3, #5]
 8005410:	2bff      	cmp	r3, #255	; 0xff
 8005412:	bf0c      	ite	eq
 8005414:	2301      	moveq	r3, #1
 8005416:	2300      	movne	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	fb03 f301 	mul.w	r3, r3, r1
 800541e:	4013      	ands	r3, r2
 8005420:	4a27      	ldr	r2, [pc, #156]	; (80054c0 <can_tx_rx+0x240>)
 8005422:	7992      	ldrb	r2, [r2, #6]
 8005424:	2aff      	cmp	r2, #255	; 0xff
 8005426:	bf0c      	ite	eq
 8005428:	2201      	moveq	r2, #1
 800542a:	2200      	movne	r2, #0
 800542c:	b2d2      	uxtb	r2, r2
 800542e:	4013      	ands	r3, r2
 8005430:	4a23      	ldr	r2, [pc, #140]	; (80054c0 <can_tx_rx+0x240>)
 8005432:	79d2      	ldrb	r2, [r2, #7]
 8005434:	2aff      	cmp	r2, #255	; 0xff
 8005436:	bf0c      	ite	eq
 8005438:	2201      	moveq	r2, #1
 800543a:	2200      	movne	r2, #0
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	4013      	ands	r3, r2
 8005440:	4a1f      	ldr	r2, [pc, #124]	; (80054c0 <can_tx_rx+0x240>)
 8005442:	7a12      	ldrb	r2, [r2, #8]
 8005444:	2afe      	cmp	r2, #254	; 0xfe
 8005446:	bf0c      	ite	eq
 8005448:	2201      	moveq	r2, #1
 800544a:	2200      	movne	r2, #0
 800544c:	b2d2      	uxtb	r2, r2
 800544e:	4013      	ands	r3, r2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d004      	beq.n	800545e <can_tx_rx+0x1de>
		  update_fsm(&state, ZERO_CMD);
 8005454:	217a      	movs	r1, #122	; 0x7a
 8005456:	481b      	ldr	r0, [pc, #108]	; (80054c4 <can_tx_rx+0x244>)
 8005458:	f7fd ff8e 	bl	8003378 <update_fsm>
}
 800545c:	e017      	b.n	800548e <can_tx_rx+0x20e>
		  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 800545e:	4e18      	ldr	r6, [pc, #96]	; (80054c0 <can_tx_rx+0x240>)
 8005460:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <can_tx_rx+0x248>)
 8005462:	930f      	str	r3, [sp, #60]	; 0x3c
 8005464:	466d      	mov	r5, sp
 8005466:	f106 0410 	add.w	r4, r6, #16
 800546a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800546c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800546e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005476:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800547a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800547e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005482:	f7fc fe71 	bl	8002168 <unpack_cmd>
		  controller.timeout = 0;					// Reset timeout counter
 8005486:	4b0a      	ldr	r3, [pc, #40]	; (80054b0 <can_tx_rx+0x230>)
 8005488:	2200      	movs	r2, #0
 800548a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005496:	bf00      	nop
 8005498:	200052b1 	.word	0x200052b1
 800549c:	200052bc 	.word	0x200052bc
 80054a0:	200003cc 	.word	0x200003cc
 80054a4:	20004d84 	.word	0x20004d84
 80054a8:	20000480 	.word	0x20000480
 80054ac:	20000674 	.word	0x20000674
 80054b0:	20000774 	.word	0x20000774
 80054b4:	20005284 	.word	0x20005284
 80054b8:	20005285 	.word	0x20005285
 80054bc:	2000528c 	.word	0x2000528c
 80054c0:	200052b0 	.word	0x200052b0
 80054c4:	20000664 	.word	0x20000664
 80054c8:	2000083c 	.word	0x2000083c

080054cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
	return 1;
 80054d0:	2301      	movs	r3, #1
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <_kill>:

int _kill(int pid, int sig)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80054e6:	f008 fb15 	bl	800db14 <__errno>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2216      	movs	r2, #22
 80054ee:	601a      	str	r2, [r3, #0]
	return -1;
 80054f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <_exit>:

void _exit (int status)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005504:	f04f 31ff 	mov.w	r1, #4294967295
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7ff ffe7 	bl	80054dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800550e:	e7fe      	b.n	800550e <_exit+0x12>

08005510 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800551c:	2300      	movs	r3, #0
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	e00a      	b.n	8005538 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005522:	f3af 8000 	nop.w
 8005526:	4601      	mov	r1, r0
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	60ba      	str	r2, [r7, #8]
 800552e:	b2ca      	uxtb	r2, r1
 8005530:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	3301      	adds	r3, #1
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	429a      	cmp	r2, r3
 800553e:	dbf0      	blt.n	8005522 <_read+0x12>
	}

return len;
 8005540:	687b      	ldr	r3, [r7, #4]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b086      	sub	sp, #24
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]
 800555a:	e009      	b.n	8005570 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	60ba      	str	r2, [r7, #8]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	4618      	mov	r0, r3
 8005566:	f000 fa8b 	bl	8005a80 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	3301      	adds	r3, #1
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	429a      	cmp	r2, r3
 8005576:	dbf1      	blt.n	800555c <_write+0x12>
	}
	return len;
 8005578:	687b      	ldr	r3, [r7, #4]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <_close>:

int _close(int file)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
	return -1;
 800558a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800558e:	4618      	mov	r0, r3
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80055aa:	605a      	str	r2, [r3, #4]
	return 0;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <_isatty>:

int _isatty(int file)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
	return 1;
 80055c2:	2301      	movs	r3, #1
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
	return 0;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
	...

080055ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80055f4:	4a14      	ldr	r2, [pc, #80]	; (8005648 <_sbrk+0x5c>)
 80055f6:	4b15      	ldr	r3, [pc, #84]	; (800564c <_sbrk+0x60>)
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005600:	4b13      	ldr	r3, [pc, #76]	; (8005650 <_sbrk+0x64>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d102      	bne.n	800560e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005608:	4b11      	ldr	r3, [pc, #68]	; (8005650 <_sbrk+0x64>)
 800560a:	4a12      	ldr	r2, [pc, #72]	; (8005654 <_sbrk+0x68>)
 800560c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800560e:	4b10      	ldr	r3, [pc, #64]	; (8005650 <_sbrk+0x64>)
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4413      	add	r3, r2
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	429a      	cmp	r2, r3
 800561a:	d207      	bcs.n	800562c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800561c:	f008 fa7a 	bl	800db14 <__errno>
 8005620:	4603      	mov	r3, r0
 8005622:	220c      	movs	r2, #12
 8005624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005626:	f04f 33ff 	mov.w	r3, #4294967295
 800562a:	e009      	b.n	8005640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800562c:	4b08      	ldr	r3, [pc, #32]	; (8005650 <_sbrk+0x64>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005632:	4b07      	ldr	r3, [pc, #28]	; (8005650 <_sbrk+0x64>)
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4413      	add	r3, r2
 800563a:	4a05      	ldr	r2, [pc, #20]	; (8005650 <_sbrk+0x64>)
 800563c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800563e:	68fb      	ldr	r3, [r7, #12]
}
 8005640:	4618      	mov	r0, r3
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	20008000 	.word	0x20008000
 800564c:	00000400 	.word	0x00000400
 8005650:	20000228 	.word	0x20000228
 8005654:	200054d0 	.word	0x200054d0

08005658 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800565c:	4b06      	ldr	r3, [pc, #24]	; (8005678 <SystemInit+0x20>)
 800565e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005662:	4a05      	ldr	r2, [pc, #20]	; (8005678 <SystemInit+0x20>)
 8005664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800566c:	bf00      	nop
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	e000ed00 	.word	0xe000ed00

0800567c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b09c      	sub	sp, #112	; 0x70
 8005680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005682:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	605a      	str	r2, [r3, #4]
 800568c:	609a      	str	r2, [r3, #8]
 800568e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005690:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	605a      	str	r2, [r3, #4]
 800569a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800569c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	605a      	str	r2, [r3, #4]
 80056a6:	609a      	str	r2, [r3, #8]
 80056a8:	60da      	str	r2, [r3, #12]
 80056aa:	611a      	str	r2, [r3, #16]
 80056ac:	615a      	str	r2, [r3, #20]
 80056ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80056b0:	1d3b      	adds	r3, r7, #4
 80056b2:	2234      	movs	r2, #52	; 0x34
 80056b4:	2100      	movs	r1, #0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f008 fa7e 	bl	800dbb8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80056bc:	4b54      	ldr	r3, [pc, #336]	; (8005810 <MX_TIM1_Init+0x194>)
 80056be:	4a55      	ldr	r2, [pc, #340]	; (8005814 <MX_TIM1_Init+0x198>)
 80056c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80056c2:	4b53      	ldr	r3, [pc, #332]	; (8005810 <MX_TIM1_Init+0x194>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80056c8:	4b51      	ldr	r3, [pc, #324]	; (8005810 <MX_TIM1_Init+0x194>)
 80056ca:	2220      	movs	r2, #32
 80056cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5600;
 80056ce:	4b50      	ldr	r3, [pc, #320]	; (8005810 <MX_TIM1_Init+0x194>)
 80056d0:	f44f 52af 	mov.w	r2, #5600	; 0x15e0
 80056d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056d6:	4b4e      	ldr	r3, [pc, #312]	; (8005810 <MX_TIM1_Init+0x194>)
 80056d8:	2200      	movs	r2, #0
 80056da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80056dc:	4b4c      	ldr	r3, [pc, #304]	; (8005810 <MX_TIM1_Init+0x194>)
 80056de:	2201      	movs	r2, #1
 80056e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80056e2:	4b4b      	ldr	r3, [pc, #300]	; (8005810 <MX_TIM1_Init+0x194>)
 80056e4:	2280      	movs	r2, #128	; 0x80
 80056e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80056e8:	4849      	ldr	r0, [pc, #292]	; (8005810 <MX_TIM1_Init+0x194>)
 80056ea:	f005 f8e9 	bl	800a8c0 <HAL_TIM_Base_Init>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80056f4:	f7ff f863 	bl	80047be <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056fc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80056fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005702:	4619      	mov	r1, r3
 8005704:	4842      	ldr	r0, [pc, #264]	; (8005810 <MX_TIM1_Init+0x194>)
 8005706:	f005 fd8f 	bl	800b228 <HAL_TIM_ConfigClockSource>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005710:	f7ff f855 	bl	80047be <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005714:	483e      	ldr	r0, [pc, #248]	; (8005810 <MX_TIM1_Init+0x194>)
 8005716:	f005 f995 	bl	800aa44 <HAL_TIM_PWM_Init>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005720:	f7ff f84d 	bl	80047be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005724:	2300      	movs	r3, #0
 8005726:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005728:	2300      	movs	r3, #0
 800572a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800572c:	2300      	movs	r3, #0
 800572e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005730:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005734:	4619      	mov	r1, r3
 8005736:	4836      	ldr	r0, [pc, #216]	; (8005810 <MX_TIM1_Init+0x194>)
 8005738:	f006 fb9a 	bl	800be70 <HAL_TIMEx_MasterConfigSynchronization>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8005742:	f7ff f83c 	bl	80047be <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005746:	2360      	movs	r3, #96	; 0x60
 8005748:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800574e:	2302      	movs	r3, #2
 8005750:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8005752:	2308      	movs	r3, #8
 8005754:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005756:	2304      	movs	r3, #4
 8005758:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800575a:	2300      	movs	r3, #0
 800575c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800575e:	2300      	movs	r3, #0
 8005760:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005762:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005766:	2200      	movs	r2, #0
 8005768:	4619      	mov	r1, r3
 800576a:	4829      	ldr	r0, [pc, #164]	; (8005810 <MX_TIM1_Init+0x194>)
 800576c:	f005 fc4c 	bl	800b008 <HAL_TIM_PWM_ConfigChannel>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8005776:	f7ff f822 	bl	80047be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800577a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800577e:	2204      	movs	r2, #4
 8005780:	4619      	mov	r1, r3
 8005782:	4823      	ldr	r0, [pc, #140]	; (8005810 <MX_TIM1_Init+0x194>)
 8005784:	f005 fc40 	bl	800b008 <HAL_TIM_PWM_ConfigChannel>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800578e:	f7ff f816 	bl	80047be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005792:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005796:	2208      	movs	r2, #8
 8005798:	4619      	mov	r1, r3
 800579a:	481d      	ldr	r0, [pc, #116]	; (8005810 <MX_TIM1_Init+0x194>)
 800579c:	f005 fc34 	bl	800b008 <HAL_TIM_PWM_ConfigChannel>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80057a6:	f7ff f80a 	bl	80047be <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 80057aa:	4819      	ldr	r0, [pc, #100]	; (8005810 <MX_TIM1_Init+0x194>)
 80057ac:	f006 fc82 	bl	800c0b4 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80057b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80057b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80057bc:	2300      	movs	r3, #0
 80057be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 80057c0:	2364      	movs	r3, #100	; 0x64
 80057c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80057c4:	2300      	movs	r3, #0
 80057c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80057c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80057d2:	2300      	movs	r3, #0
 80057d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80057d6:	2300      	movs	r3, #0
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80057da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057de:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80057e4:	2300      	movs	r3, #0
 80057e6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80057e8:	2300      	movs	r3, #0
 80057ea:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80057ec:	1d3b      	adds	r3, r7, #4
 80057ee:	4619      	mov	r1, r3
 80057f0:	4807      	ldr	r0, [pc, #28]	; (8005810 <MX_TIM1_Init+0x194>)
 80057f2:	f006 fbbf 	bl	800bf74 <HAL_TIMEx_ConfigBreakDeadTime>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 80057fc:	f7fe ffdf 	bl	80047be <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005800:	4803      	ldr	r0, [pc, #12]	; (8005810 <MX_TIM1_Init+0x194>)
 8005802:	f000 f82f 	bl	8005864 <HAL_TIM_MspPostInit>

}
 8005806:	bf00      	nop
 8005808:	3770      	adds	r7, #112	; 0x70
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	200053dc 	.word	0x200053dc
 8005814:	40012c00 	.word	0x40012c00

08005818 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a0d      	ldr	r2, [pc, #52]	; (800585c <HAL_TIM_Base_MspInit+0x44>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d113      	bne.n	8005852 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800582a:	4b0d      	ldr	r3, [pc, #52]	; (8005860 <HAL_TIM_Base_MspInit+0x48>)
 800582c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800582e:	4a0c      	ldr	r2, [pc, #48]	; (8005860 <HAL_TIM_Base_MspInit+0x48>)
 8005830:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005834:	6613      	str	r3, [r2, #96]	; 0x60
 8005836:	4b0a      	ldr	r3, [pc, #40]	; (8005860 <HAL_TIM_Base_MspInit+0x48>)
 8005838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800583a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005842:	2200      	movs	r2, #0
 8005844:	2100      	movs	r1, #0
 8005846:	2019      	movs	r0, #25
 8005848:	f001 fd1b 	bl	8007282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800584c:	2019      	movs	r0, #25
 800584e:	f001 fd32 	bl	80072b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	40012c00 	.word	0x40012c00
 8005860:	40021000 	.word	0x40021000

08005864 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b08a      	sub	sp, #40	; 0x28
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800586c:	f107 0314 	add.w	r3, r7, #20
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	605a      	str	r2, [r3, #4]
 8005876:	609a      	str	r2, [r3, #8]
 8005878:	60da      	str	r2, [r3, #12]
 800587a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a2f      	ldr	r2, [pc, #188]	; (8005940 <HAL_TIM_MspPostInit+0xdc>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d157      	bne.n	8005936 <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005886:	4b2f      	ldr	r3, [pc, #188]	; (8005944 <HAL_TIM_MspPostInit+0xe0>)
 8005888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800588a:	4a2e      	ldr	r2, [pc, #184]	; (8005944 <HAL_TIM_MspPostInit+0xe0>)
 800588c:	f043 0304 	orr.w	r3, r3, #4
 8005890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005892:	4b2c      	ldr	r3, [pc, #176]	; (8005944 <HAL_TIM_MspPostInit+0xe0>)
 8005894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	613b      	str	r3, [r7, #16]
 800589c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800589e:	4b29      	ldr	r3, [pc, #164]	; (8005944 <HAL_TIM_MspPostInit+0xe0>)
 80058a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a2:	4a28      	ldr	r2, [pc, #160]	; (8005944 <HAL_TIM_MspPostInit+0xe0>)
 80058a4:	f043 0302 	orr.w	r3, r3, #2
 80058a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058aa:	4b26      	ldr	r3, [pc, #152]	; (8005944 <HAL_TIM_MspPostInit+0xe0>)
 80058ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058b6:	4b23      	ldr	r3, [pc, #140]	; (8005944 <HAL_TIM_MspPostInit+0xe0>)
 80058b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ba:	4a22      	ldr	r2, [pc, #136]	; (8005944 <HAL_TIM_MspPostInit+0xe0>)
 80058bc:	f043 0301 	orr.w	r3, r3, #1
 80058c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058c2:	4b20      	ldr	r3, [pc, #128]	; (8005944 <HAL_TIM_MspPostInit+0xe0>)
 80058c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	60bb      	str	r3, [r7, #8]
 80058cc:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80058ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058d4:	2302      	movs	r3, #2
 80058d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058d8:	2300      	movs	r3, #0
 80058da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058dc:	2300      	movs	r3, #0
 80058de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80058e0:	2304      	movs	r3, #4
 80058e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058e4:	f107 0314 	add.w	r3, r7, #20
 80058e8:	4619      	mov	r1, r3
 80058ea:	4817      	ldr	r0, [pc, #92]	; (8005948 <HAL_TIM_MspPostInit+0xe4>)
 80058ec:	f002 fea0 	bl	8008630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80058f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058f6:	2302      	movs	r3, #2
 80058f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058fa:	2300      	movs	r3, #0
 80058fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058fe:	2300      	movs	r3, #0
 8005900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8005902:	2304      	movs	r3, #4
 8005904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005906:	f107 0314 	add.w	r3, r7, #20
 800590a:	4619      	mov	r1, r3
 800590c:	480f      	ldr	r0, [pc, #60]	; (800594c <HAL_TIM_MspPostInit+0xe8>)
 800590e:	f002 fe8f 	bl	8008630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8005912:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8005916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005918:	2302      	movs	r3, #2
 800591a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800591c:	2300      	movs	r3, #0
 800591e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005920:	2300      	movs	r3, #0
 8005922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005924:	2306      	movs	r3, #6
 8005926:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005928:	f107 0314 	add.w	r3, r7, #20
 800592c:	4619      	mov	r1, r3
 800592e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005932:	f002 fe7d 	bl	8008630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005936:	bf00      	nop
 8005938:	3728      	adds	r7, #40	; 0x28
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	40012c00 	.word	0x40012c00
 8005944:	40021000 	.word	0x40021000
 8005948:	48000800 	.word	0x48000800
 800594c:	48000400 	.word	0x48000400

08005950 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005954:	4b22      	ldr	r3, [pc, #136]	; (80059e0 <MX_USART2_UART_Init+0x90>)
 8005956:	4a23      	ldr	r2, [pc, #140]	; (80059e4 <MX_USART2_UART_Init+0x94>)
 8005958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800595a:	4b21      	ldr	r3, [pc, #132]	; (80059e0 <MX_USART2_UART_Init+0x90>)
 800595c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005962:	4b1f      	ldr	r3, [pc, #124]	; (80059e0 <MX_USART2_UART_Init+0x90>)
 8005964:	2200      	movs	r2, #0
 8005966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005968:	4b1d      	ldr	r3, [pc, #116]	; (80059e0 <MX_USART2_UART_Init+0x90>)
 800596a:	2200      	movs	r2, #0
 800596c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800596e:	4b1c      	ldr	r3, [pc, #112]	; (80059e0 <MX_USART2_UART_Init+0x90>)
 8005970:	2200      	movs	r2, #0
 8005972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005974:	4b1a      	ldr	r3, [pc, #104]	; (80059e0 <MX_USART2_UART_Init+0x90>)
 8005976:	220c      	movs	r2, #12
 8005978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800597a:	4b19      	ldr	r3, [pc, #100]	; (80059e0 <MX_USART2_UART_Init+0x90>)
 800597c:	2200      	movs	r2, #0
 800597e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005980:	4b17      	ldr	r3, [pc, #92]	; (80059e0 <MX_USART2_UART_Init+0x90>)
 8005982:	2200      	movs	r2, #0
 8005984:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005986:	4b16      	ldr	r3, [pc, #88]	; (80059e0 <MX_USART2_UART_Init+0x90>)
 8005988:	2200      	movs	r2, #0
 800598a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800598c:	4b14      	ldr	r3, [pc, #80]	; (80059e0 <MX_USART2_UART_Init+0x90>)
 800598e:	2200      	movs	r2, #0
 8005990:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005992:	4b13      	ldr	r3, [pc, #76]	; (80059e0 <MX_USART2_UART_Init+0x90>)
 8005994:	2200      	movs	r2, #0
 8005996:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005998:	4811      	ldr	r0, [pc, #68]	; (80059e0 <MX_USART2_UART_Init+0x90>)
 800599a:	f006 fc09 	bl	800c1b0 <HAL_UART_Init>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80059a4:	f7fe ff0b 	bl	80047be <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80059a8:	2100      	movs	r1, #0
 80059aa:	480d      	ldr	r0, [pc, #52]	; (80059e0 <MX_USART2_UART_Init+0x90>)
 80059ac:	f007 ffdf 	bl	800d96e <HAL_UARTEx_SetTxFifoThreshold>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80059b6:	f7fe ff02 	bl	80047be <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80059ba:	2100      	movs	r1, #0
 80059bc:	4808      	ldr	r0, [pc, #32]	; (80059e0 <MX_USART2_UART_Init+0x90>)
 80059be:	f008 f814 	bl	800d9ea <HAL_UARTEx_SetRxFifoThreshold>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80059c8:	f7fe fef9 	bl	80047be <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80059cc:	4804      	ldr	r0, [pc, #16]	; (80059e0 <MX_USART2_UART_Init+0x90>)
 80059ce:	f007 ff95 	bl	800d8fc <HAL_UARTEx_DisableFifoMode>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80059d8:	f7fe fef1 	bl	80047be <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80059dc:	bf00      	nop
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	20005428 	.word	0x20005428
 80059e4:	40004400 	.word	0x40004400

080059e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08a      	sub	sp, #40	; 0x28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059f0:	f107 0314 	add.w	r3, r7, #20
 80059f4:	2200      	movs	r2, #0
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	605a      	str	r2, [r3, #4]
 80059fa:	609a      	str	r2, [r3, #8]
 80059fc:	60da      	str	r2, [r3, #12]
 80059fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a1b      	ldr	r2, [pc, #108]	; (8005a74 <HAL_UART_MspInit+0x8c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d12f      	bne.n	8005a6a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005a0a:	4b1b      	ldr	r3, [pc, #108]	; (8005a78 <HAL_UART_MspInit+0x90>)
 8005a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a0e:	4a1a      	ldr	r2, [pc, #104]	; (8005a78 <HAL_UART_MspInit+0x90>)
 8005a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a14:	6593      	str	r3, [r2, #88]	; 0x58
 8005a16:	4b18      	ldr	r3, [pc, #96]	; (8005a78 <HAL_UART_MspInit+0x90>)
 8005a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a22:	4b15      	ldr	r3, [pc, #84]	; (8005a78 <HAL_UART_MspInit+0x90>)
 8005a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a26:	4a14      	ldr	r2, [pc, #80]	; (8005a78 <HAL_UART_MspInit+0x90>)
 8005a28:	f043 0302 	orr.w	r3, r3, #2
 8005a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a2e:	4b12      	ldr	r3, [pc, #72]	; (8005a78 <HAL_UART_MspInit+0x90>)
 8005a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8005a3a:	2318      	movs	r3, #24
 8005a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a3e:	2302      	movs	r3, #2
 8005a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a46:	2300      	movs	r3, #0
 8005a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005a4a:	2307      	movs	r3, #7
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a4e:	f107 0314 	add.w	r3, r7, #20
 8005a52:	4619      	mov	r1, r3
 8005a54:	4809      	ldr	r0, [pc, #36]	; (8005a7c <HAL_UART_MspInit+0x94>)
 8005a56:	f002 fdeb 	bl	8008630 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	2026      	movs	r0, #38	; 0x26
 8005a60:	f001 fc0f 	bl	8007282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005a64:	2026      	movs	r0, #38	; 0x26
 8005a66:	f001 fc26 	bl	80072b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005a6a:	bf00      	nop
 8005a6c:	3728      	adds	r7, #40	; 0x28
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	40004400 	.word	0x40004400
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	48000400 	.word	0x48000400

08005a80 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8005a88:	1d39      	adds	r1, r7, #4
 8005a8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a8e:	2201      	movs	r2, #1
 8005a90:	4803      	ldr	r0, [pc, #12]	; (8005aa0 <__io_putchar+0x20>)
 8005a92:	f006 fbdd 	bl	800c250 <HAL_UART_Transmit>
return 0;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	20005428 	.word	0x20005428

08005aa4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8005aac:	2201      	movs	r2, #1
 8005aae:	4904      	ldr	r1, [pc, #16]	; (8005ac0 <HAL_UART_RxCpltCallback+0x1c>)
 8005ab0:	4804      	ldr	r0, [pc, #16]	; (8005ac4 <HAL_UART_RxCpltCallback+0x20>)
 8005ab2:	f006 fc63 	bl	800c37c <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ab6:	bf00      	nop
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20000660 	.word	0x20000660
 8005ac4:	20005428 	.word	0x20005428

08005ac8 <store_eeprom_regs>:

#include "user_config.h"
#include "eeprom.h"

void store_eeprom_regs()
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	af00      	add	r7, sp, #0
	eeprom_store(__float_reg, FLOAT_REG_LEN, __int_reg, INT_REG_LEN);
 8005acc:	2380      	movs	r3, #128	; 0x80
 8005ace:	4a03      	ldr	r2, [pc, #12]	; (8005adc <store_eeprom_regs+0x14>)
 8005ad0:	2140      	movs	r1, #64	; 0x40
 8005ad2:	4803      	ldr	r0, [pc, #12]	; (8005ae0 <store_eeprom_regs+0x18>)
 8005ad4:	f7fc f904 	bl	8001ce0 <eeprom_store>
}
 8005ad8:	bf00      	nop
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	20004d84 	.word	0x20004d84
 8005ae0:	20000674 	.word	0x20000674

08005ae4 <load_eeprom_regs>:

void load_eeprom_regs()
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
	eeprom_restore(__float_reg, FLOAT_REG_LEN, __int_reg, INT_REG_LEN);
 8005ae8:	2380      	movs	r3, #128	; 0x80
 8005aea:	4a03      	ldr	r2, [pc, #12]	; (8005af8 <load_eeprom_regs+0x14>)
 8005aec:	2140      	movs	r1, #64	; 0x40
 8005aee:	4803      	ldr	r0, [pc, #12]	; (8005afc <load_eeprom_regs+0x18>)
 8005af0:	f7fc f872 	bl	8001bd8 <eeprom_restore>
}
 8005af4:	bf00      	nop
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	20004d84 	.word	0x20004d84
 8005afc:	20000674 	.word	0x20000674

08005b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005b00:	480d      	ldr	r0, [pc, #52]	; (8005b38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005b02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005b04:	480d      	ldr	r0, [pc, #52]	; (8005b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8005b06:	490e      	ldr	r1, [pc, #56]	; (8005b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005b08:	4a0e      	ldr	r2, [pc, #56]	; (8005b44 <LoopForever+0xe>)
  movs r3, #0
 8005b0a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005b0c:	e002      	b.n	8005b14 <LoopCopyDataInit>

08005b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b12:	3304      	adds	r3, #4

08005b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b18:	d3f9      	bcc.n	8005b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b1a:	4a0b      	ldr	r2, [pc, #44]	; (8005b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005b1c:	4c0b      	ldr	r4, [pc, #44]	; (8005b4c <LoopForever+0x16>)
  movs r3, #0
 8005b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b20:	e001      	b.n	8005b26 <LoopFillZerobss>

08005b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b24:	3204      	adds	r2, #4

08005b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b28:	d3fb      	bcc.n	8005b22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005b2a:	f7ff fd95 	bl	8005658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b2e:	f007 fff7 	bl	800db20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005b32:	f7fe fb05 	bl	8004140 <main>

08005b36 <LoopForever>:

LoopForever:
    b LoopForever
 8005b36:	e7fe      	b.n	8005b36 <LoopForever>
  ldr   r0, =_estack
 8005b38:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b40:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8005b44:	080138f8 	.word	0x080138f8
  ldr r2, =_sbss
 8005b48:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8005b4c:	200054cc 	.word	0x200054cc

08005b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005b50:	e7fe      	b.n	8005b50 <ADC1_2_IRQHandler>

08005b52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b082      	sub	sp, #8
 8005b56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b5c:	2003      	movs	r0, #3
 8005b5e:	f001 fb85 	bl	800726c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005b62:	2000      	movs	r0, #0
 8005b64:	f000 f80e 	bl	8005b84 <HAL_InitTick>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	71fb      	strb	r3, [r7, #7]
 8005b72:	e001      	b.n	8005b78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005b74:	f7ff fad2 	bl	800511c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005b78:	79fb      	ldrb	r3, [r7, #7]

}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005b90:	4b16      	ldr	r3, [pc, #88]	; (8005bec <HAL_InitTick+0x68>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d022      	beq.n	8005bde <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005b98:	4b15      	ldr	r3, [pc, #84]	; (8005bf0 <HAL_InitTick+0x6c>)
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	4b13      	ldr	r3, [pc, #76]	; (8005bec <HAL_InitTick+0x68>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005ba4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bac:	4618      	mov	r0, r3
 8005bae:	f001 fb90 	bl	80072d2 <HAL_SYSTICK_Config>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10f      	bne.n	8005bd8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b0f      	cmp	r3, #15
 8005bbc:	d809      	bhi.n	8005bd2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	6879      	ldr	r1, [r7, #4]
 8005bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc6:	f001 fb5c 	bl	8007282 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005bca:	4a0a      	ldr	r2, [pc, #40]	; (8005bf4 <HAL_InitTick+0x70>)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6013      	str	r3, [r2, #0]
 8005bd0:	e007      	b.n	8005be2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	73fb      	strb	r3, [r7, #15]
 8005bd6:	e004      	b.n	8005be2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	73fb      	strb	r3, [r7, #15]
 8005bdc:	e001      	b.n	8005be2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	20000008 	.word	0x20000008
 8005bf0:	20000000 	.word	0x20000000
 8005bf4:	20000004 	.word	0x20000004

08005bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <HAL_IncTick+0x1c>)
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <HAL_IncTick+0x20>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4413      	add	r3, r2
 8005c06:	4a03      	ldr	r2, [pc, #12]	; (8005c14 <HAL_IncTick+0x1c>)
 8005c08:	6013      	str	r3, [r2, #0]
}
 8005c0a:	bf00      	nop
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	200054b8 	.word	0x200054b8
 8005c18:	20000008 	.word	0x20000008

08005c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8005c20:	4b03      	ldr	r3, [pc, #12]	; (8005c30 <HAL_GetTick+0x14>)
 8005c22:	681b      	ldr	r3, [r3, #0]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	200054b8 	.word	0x200054b8

08005c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c3c:	f7ff ffee 	bl	8005c1c <HAL_GetTick>
 8005c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4c:	d004      	beq.n	8005c58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c4e:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <HAL_Delay+0x40>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4413      	add	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c58:	bf00      	nop
 8005c5a:	f7ff ffdf 	bl	8005c1c <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d8f7      	bhi.n	8005c5a <HAL_Delay+0x26>
  {
  }
}
 8005c6a:	bf00      	nop
 8005c6c:	bf00      	nop
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	20000008 	.word	0x20000008

08005c78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	609a      	str	r2, [r3, #8]
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	609a      	str	r2, [r3, #8]
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3360      	adds	r3, #96	; 0x60
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	4b08      	ldr	r3, [pc, #32]	; (8005d24 <LL_ADC_SetOffset+0x44>)
 8005d02:	4013      	ands	r3, r2
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005d18:	bf00      	nop
 8005d1a:	371c      	adds	r7, #28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	03fff000 	.word	0x03fff000

08005d28 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	3360      	adds	r3, #96	; 0x60
 8005d36:	461a      	mov	r2, r3
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3360      	adds	r3, #96	; 0x60
 8005d64:	461a      	mov	r2, r3
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005d7e:	bf00      	nop
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b087      	sub	sp, #28
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	60f8      	str	r0, [r7, #12]
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	3360      	adds	r3, #96	; 0x60
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005db4:	bf00      	nop
 8005db6:	371c      	adds	r7, #28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3360      	adds	r3, #96	; 0x60
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	431a      	orrs	r2, r3
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	615a      	str	r2, [r3, #20]
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005e30:	2301      	movs	r3, #1
 8005e32:	e000      	b.n	8005e36 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b087      	sub	sp, #28
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	60f8      	str	r0, [r7, #12]
 8005e4a:	60b9      	str	r1, [r7, #8]
 8005e4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3330      	adds	r3, #48	; 0x30
 8005e52:	461a      	mov	r2, r3
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	0a1b      	lsrs	r3, r3, #8
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	f003 030c 	and.w	r3, r3, #12
 8005e5e:	4413      	add	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f003 031f 	and.w	r3, r3, #31
 8005e6c:	211f      	movs	r1, #31
 8005e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e72:	43db      	mvns	r3, r3
 8005e74:	401a      	ands	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	0e9b      	lsrs	r3, r3, #26
 8005e7a:	f003 011f 	and.w	r1, r3, #31
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f003 031f 	and.w	r3, r3, #31
 8005e84:	fa01 f303 	lsl.w	r3, r1, r3
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005e8e:	bf00      	nop
 8005e90:	371c      	adds	r7, #28
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b087      	sub	sp, #28
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	60b9      	str	r1, [r7, #8]
 8005ea4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	3314      	adds	r3, #20
 8005eaa:	461a      	mov	r2, r3
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	0e5b      	lsrs	r3, r3, #25
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	f003 0304 	and.w	r3, r3, #4
 8005eb6:	4413      	add	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	0d1b      	lsrs	r3, r3, #20
 8005ec2:	f003 031f 	and.w	r3, r3, #31
 8005ec6:	2107      	movs	r1, #7
 8005ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ecc:	43db      	mvns	r3, r3
 8005ece:	401a      	ands	r2, r3
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	0d1b      	lsrs	r3, r3, #20
 8005ed4:	f003 031f 	and.w	r3, r3, #31
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	fa01 f303 	lsl.w	r3, r1, r3
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005ee4:	bf00      	nop
 8005ee6:	371c      	adds	r7, #28
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	401a      	ands	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f003 0318 	and.w	r3, r3, #24
 8005f12:	4908      	ldr	r1, [pc, #32]	; (8005f34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005f14:	40d9      	lsrs	r1, r3
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	400b      	ands	r3, r1
 8005f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005f26:	bf00      	nop
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	0007ffff 	.word	0x0007ffff

08005f38 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f003 031f 	and.w	r3, r3, #31
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005f64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6093      	str	r3, [r2, #8]
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f8c:	d101      	bne.n	8005f92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e000      	b.n	8005f94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005fb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005fb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fdc:	d101      	bne.n	8005fe2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e000      	b.n	8005fe4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006000:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006004:	f043 0201 	orr.w	r2, r3, #1
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b01      	cmp	r3, #1
 800602a:	d101      	bne.n	8006030 <LL_ADC_IsEnabled+0x18>
 800602c:	2301      	movs	r3, #1
 800602e:	e000      	b.n	8006032 <LL_ADC_IsEnabled+0x1a>
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800603e:	b480      	push	{r7}
 8006040:	b083      	sub	sp, #12
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800604e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006052:	f043 0204 	orr.w	r2, r3, #4
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f003 0304 	and.w	r3, r3, #4
 8006076:	2b04      	cmp	r3, #4
 8006078:	d101      	bne.n	800607e <LL_ADC_REG_IsConversionOngoing+0x18>
 800607a:	2301      	movs	r3, #1
 800607c:	e000      	b.n	8006080 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f003 0308 	and.w	r3, r3, #8
 800609c:	2b08      	cmp	r3, #8
 800609e:	d101      	bne.n	80060a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80060a0:	2301      	movs	r3, #1
 80060a2:	e000      	b.n	80060a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
	...

080060b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80060b4:	b590      	push	{r4, r7, lr}
 80060b6:	b089      	sub	sp, #36	; 0x24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060bc:	2300      	movs	r3, #0
 80060be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80060c0:	2300      	movs	r3, #0
 80060c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e16d      	b.n	80063aa <HAL_ADC_Init+0x2f6>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d109      	bne.n	80060f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7fb f8ab 	bl	8001238 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7ff ff3f 	bl	8005f78 <LL_ADC_IsDeepPowerDownEnabled>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d004      	beq.n	800610a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4618      	mov	r0, r3
 8006106:	f7ff ff25 	bl	8005f54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4618      	mov	r0, r3
 8006110:	f7ff ff5a 	bl	8005fc8 <LL_ADC_IsInternalRegulatorEnabled>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d115      	bne.n	8006146 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff ff3e 	bl	8005fa0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006124:	4ba3      	ldr	r3, [pc, #652]	; (80063b4 <HAL_ADC_Init+0x300>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	099b      	lsrs	r3, r3, #6
 800612a:	4aa3      	ldr	r2, [pc, #652]	; (80063b8 <HAL_ADC_Init+0x304>)
 800612c:	fba2 2303 	umull	r2, r3, r2, r3
 8006130:	099b      	lsrs	r3, r3, #6
 8006132:	3301      	adds	r3, #1
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006138:	e002      	b.n	8006140 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	3b01      	subs	r3, #1
 800613e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f9      	bne.n	800613a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff ff3c 	bl	8005fc8 <LL_ADC_IsInternalRegulatorEnabled>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10d      	bne.n	8006172 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800615a:	f043 0210 	orr.w	r2, r3, #16
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006166:	f043 0201 	orr.w	r2, r3, #1
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4618      	mov	r0, r3
 8006178:	f7ff ff75 	bl	8006066 <LL_ADC_REG_IsConversionOngoing>
 800617c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006182:	f003 0310 	and.w	r3, r3, #16
 8006186:	2b00      	cmp	r3, #0
 8006188:	f040 8106 	bne.w	8006398 <HAL_ADC_Init+0x2e4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	2b00      	cmp	r3, #0
 8006190:	f040 8102 	bne.w	8006398 <HAL_ADC_Init+0x2e4>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006198:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800619c:	f043 0202 	orr.w	r2, r3, #2
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff ff35 	bl	8006018 <LL_ADC_IsEnabled>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d111      	bne.n	80061d8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80061b4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80061b8:	f7ff ff2e 	bl	8006018 <LL_ADC_IsEnabled>
 80061bc:	4604      	mov	r4, r0
 80061be:	487f      	ldr	r0, [pc, #508]	; (80063bc <HAL_ADC_Init+0x308>)
 80061c0:	f7ff ff2a 	bl	8006018 <LL_ADC_IsEnabled>
 80061c4:	4603      	mov	r3, r0
 80061c6:	4323      	orrs	r3, r4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d105      	bne.n	80061d8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	4619      	mov	r1, r3
 80061d2:	487b      	ldr	r0, [pc, #492]	; (80063c0 <HAL_ADC_Init+0x30c>)
 80061d4:	f7ff fd50 	bl	8005c78 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	7f5b      	ldrb	r3, [r3, #29]
 80061dc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80061e2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80061e8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80061ee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061f6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80061f8:	4313      	orrs	r3, r2
 80061fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006202:	2b01      	cmp	r3, #1
 8006204:	d106      	bne.n	8006214 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620a:	3b01      	subs	r3, #1
 800620c:	045b      	lsls	r3, r3, #17
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	4313      	orrs	r3, r2
 8006212:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	2b00      	cmp	r3, #0
 800621a:	d009      	beq.n	8006230 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006228:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	4313      	orrs	r3, r2
 800622e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	4b63      	ldr	r3, [pc, #396]	; (80063c4 <HAL_ADC_Init+0x310>)
 8006238:	4013      	ands	r3, r2
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	6812      	ldr	r2, [r2, #0]
 800623e:	69b9      	ldr	r1, [r7, #24]
 8006240:	430b      	orrs	r3, r1
 8006242:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4618      	mov	r0, r3
 8006260:	f7ff ff01 	bl	8006066 <LL_ADC_REG_IsConversionOngoing>
 8006264:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4618      	mov	r0, r3
 800626c:	f7ff ff0e 	bl	800608c <LL_ADC_INJ_IsConversionOngoing>
 8006270:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d16d      	bne.n	8006354 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d16a      	bne.n	8006354 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006282:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800628a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800628c:	4313      	orrs	r3, r2
 800628e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800629a:	f023 0302 	bic.w	r3, r3, #2
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	6812      	ldr	r2, [r2, #0]
 80062a2:	69b9      	ldr	r1, [r7, #24]
 80062a4:	430b      	orrs	r3, r1
 80062a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d017      	beq.n	80062e0 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691a      	ldr	r2, [r3, #16]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80062be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80062c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80062cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	6911      	ldr	r1, [r2, #16]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	6812      	ldr	r2, [r2, #0]
 80062d8:	430b      	orrs	r3, r1
 80062da:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80062de:	e013      	b.n	8006308 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	691a      	ldr	r2, [r3, #16]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80062ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6812      	ldr	r2, [r2, #0]
 80062fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006300:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006304:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800630e:	2b01      	cmp	r3, #1
 8006310:	d118      	bne.n	8006344 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800631c:	f023 0304 	bic.w	r3, r3, #4
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006328:	4311      	orrs	r1, r2
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800632e:	4311      	orrs	r1, r2
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006334:	430a      	orrs	r2, r1
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0201 	orr.w	r2, r2, #1
 8006340:	611a      	str	r2, [r3, #16]
 8006342:	e007      	b.n	8006354 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691a      	ldr	r2, [r3, #16]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0201 	bic.w	r2, r2, #1
 8006352:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d10c      	bne.n	8006376 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006362:	f023 010f 	bic.w	r1, r3, #15
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	1e5a      	subs	r2, r3, #1
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	631a      	str	r2, [r3, #48]	; 0x30
 8006374:	e007      	b.n	8006386 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 020f 	bic.w	r2, r2, #15
 8006384:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638a:	f023 0303 	bic.w	r3, r3, #3
 800638e:	f043 0201 	orr.w	r2, r3, #1
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	65da      	str	r2, [r3, #92]	; 0x5c
 8006396:	e007      	b.n	80063a8 <HAL_ADC_Init+0x2f4>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800639c:	f043 0210 	orr.w	r2, r3, #16
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80063a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3724      	adds	r7, #36	; 0x24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd90      	pop	{r4, r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20000000 	.word	0x20000000
 80063b8:	053e2d63 	.word	0x053e2d63
 80063bc:	50000100 	.word	0x50000100
 80063c0:	50000300 	.word	0x50000300
 80063c4:	fff04007 	.word	0xfff04007

080063c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80063d4:	4851      	ldr	r0, [pc, #324]	; (800651c <HAL_ADC_Start_DMA+0x154>)
 80063d6:	f7ff fdaf 	bl	8005f38 <LL_ADC_GetMultimode>
 80063da:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff fe40 	bl	8006066 <LL_ADC_REG_IsConversionOngoing>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f040 808f 	bne.w	800650c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d101      	bne.n	80063fc <HAL_ADC_Start_DMA+0x34>
 80063f8:	2302      	movs	r3, #2
 80063fa:	e08a      	b.n	8006512 <HAL_ADC_Start_DMA+0x14a>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d005      	beq.n	8006416 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	2b05      	cmp	r3, #5
 800640e:	d002      	beq.n	8006416 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	2b09      	cmp	r3, #9
 8006414:	d173      	bne.n	80064fe <HAL_ADC_Start_DMA+0x136>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 fc98 	bl	8006d4c <ADC_Enable>
 800641c:	4603      	mov	r3, r0
 800641e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006420:	7dfb      	ldrb	r3, [r7, #23]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d166      	bne.n	80064f4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800642a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800642e:	f023 0301 	bic.w	r3, r3, #1
 8006432:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a38      	ldr	r2, [pc, #224]	; (8006520 <HAL_ADC_Start_DMA+0x158>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d002      	beq.n	800644a <HAL_ADC_Start_DMA+0x82>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	e001      	b.n	800644e <HAL_ADC_Start_DMA+0x86>
 800644a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	6812      	ldr	r2, [r2, #0]
 8006452:	4293      	cmp	r3, r2
 8006454:	d002      	beq.n	800645c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d105      	bne.n	8006468 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006460:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800646c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d006      	beq.n	8006482 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006478:	f023 0206 	bic.w	r2, r3, #6
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	661a      	str	r2, [r3, #96]	; 0x60
 8006480:	e002      	b.n	8006488 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648c:	4a25      	ldr	r2, [pc, #148]	; (8006524 <HAL_ADC_Start_DMA+0x15c>)
 800648e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006494:	4a24      	ldr	r2, [pc, #144]	; (8006528 <HAL_ADC_Start_DMA+0x160>)
 8006496:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649c:	4a23      	ldr	r2, [pc, #140]	; (800652c <HAL_ADC_Start_DMA+0x164>)
 800649e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	221c      	movs	r2, #28
 80064a6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f042 0210 	orr.w	r2, r2, #16
 80064be:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0201 	orr.w	r2, r2, #1
 80064ce:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3340      	adds	r3, #64	; 0x40
 80064da:	4619      	mov	r1, r3
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f000 ffac 	bl	800743c <HAL_DMA_Start_IT>
 80064e4:	4603      	mov	r3, r0
 80064e6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7ff fda6 	bl	800603e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80064f2:	e00d      	b.n	8006510 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80064fc:	e008      	b.n	8006510 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800650a:	e001      	b.n	8006510 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800650c:	2302      	movs	r3, #2
 800650e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006510:	7dfb      	ldrb	r3, [r7, #23]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	50000300 	.word	0x50000300
 8006520:	50000100 	.word	0x50000100
 8006524:	08006e11 	.word	0x08006e11
 8006528:	08006ee9 	.word	0x08006ee9
 800652c:	08006f05 	.word	0x08006f05

08006530 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b0b6      	sub	sp, #216	; 0xd8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800657c:	2300      	movs	r3, #0
 800657e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006586:	2b01      	cmp	r3, #1
 8006588:	d101      	bne.n	800658e <HAL_ADC_ConfigChannel+0x22>
 800658a:	2302      	movs	r3, #2
 800658c:	e3c8      	b.n	8006d20 <HAL_ADC_ConfigChannel+0x7b4>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff fd63 	bl	8006066 <LL_ADC_REG_IsConversionOngoing>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f040 83ad 	bne.w	8006d02 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6818      	ldr	r0, [r3, #0]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	6859      	ldr	r1, [r3, #4]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	461a      	mov	r2, r3
 80065b6:	f7ff fc44 	bl	8005e42 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4618      	mov	r0, r3
 80065c0:	f7ff fd51 	bl	8006066 <LL_ADC_REG_IsConversionOngoing>
 80065c4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff fd5d 	bl	800608c <LL_ADC_INJ_IsConversionOngoing>
 80065d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80065d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f040 81d9 	bne.w	8006992 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80065e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f040 81d4 	bne.w	8006992 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065f2:	d10f      	bne.n	8006614 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2200      	movs	r2, #0
 80065fe:	4619      	mov	r1, r3
 8006600:	f7ff fc4b 	bl	8005e9a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff fbf2 	bl	8005df6 <LL_ADC_SetSamplingTimeCommonConfig>
 8006612:	e00e      	b.n	8006632 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6818      	ldr	r0, [r3, #0]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	6819      	ldr	r1, [r3, #0]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	461a      	mov	r2, r3
 8006622:	f7ff fc3a 	bl	8005e9a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2100      	movs	r1, #0
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff fbe2 	bl	8005df6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	695a      	ldr	r2, [r3, #20]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	08db      	lsrs	r3, r3, #3
 800663e:	f003 0303 	and.w	r3, r3, #3
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	fa02 f303 	lsl.w	r3, r2, r3
 8006648:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	2b04      	cmp	r3, #4
 8006652:	d022      	beq.n	800669a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6818      	ldr	r0, [r3, #0]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	6919      	ldr	r1, [r3, #16]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006664:	f7ff fb3c 	bl	8005ce0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6818      	ldr	r0, [r3, #0]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	6919      	ldr	r1, [r3, #16]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	461a      	mov	r2, r3
 8006676:	f7ff fb88 	bl	8005d8a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	6919      	ldr	r1, [r3, #16]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	7f1b      	ldrb	r3, [r3, #28]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d102      	bne.n	8006690 <HAL_ADC_ConfigChannel+0x124>
 800668a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800668e:	e000      	b.n	8006692 <HAL_ADC_ConfigChannel+0x126>
 8006690:	2300      	movs	r3, #0
 8006692:	461a      	mov	r2, r3
 8006694:	f7ff fb94 	bl	8005dc0 <LL_ADC_SetOffsetSaturation>
 8006698:	e17b      	b.n	8006992 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2100      	movs	r1, #0
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff fb41 	bl	8005d28 <LL_ADC_GetOffsetChannel>
 80066a6:	4603      	mov	r3, r0
 80066a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10a      	bne.n	80066c6 <HAL_ADC_ConfigChannel+0x15a>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2100      	movs	r1, #0
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7ff fb36 	bl	8005d28 <LL_ADC_GetOffsetChannel>
 80066bc:	4603      	mov	r3, r0
 80066be:	0e9b      	lsrs	r3, r3, #26
 80066c0:	f003 021f 	and.w	r2, r3, #31
 80066c4:	e01e      	b.n	8006704 <HAL_ADC_ConfigChannel+0x198>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2100      	movs	r1, #0
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7ff fb2b 	bl	8005d28 <LL_ADC_GetOffsetChannel>
 80066d2:	4603      	mov	r3, r0
 80066d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066dc:	fa93 f3a3 	rbit	r3, r3
 80066e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80066e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80066ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80066f4:	2320      	movs	r3, #32
 80066f6:	e004      	b.n	8006702 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80066f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066fc:	fab3 f383 	clz	r3, r3
 8006700:	b2db      	uxtb	r3, r3
 8006702:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800670c:	2b00      	cmp	r3, #0
 800670e:	d105      	bne.n	800671c <HAL_ADC_ConfigChannel+0x1b0>
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	0e9b      	lsrs	r3, r3, #26
 8006716:	f003 031f 	and.w	r3, r3, #31
 800671a:	e018      	b.n	800674e <HAL_ADC_ConfigChannel+0x1e2>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006724:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006728:	fa93 f3a3 	rbit	r3, r3
 800672c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006730:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006738:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8006740:	2320      	movs	r3, #32
 8006742:	e004      	b.n	800674e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8006744:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006748:	fab3 f383 	clz	r3, r3
 800674c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800674e:	429a      	cmp	r2, r3
 8006750:	d106      	bne.n	8006760 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2200      	movs	r2, #0
 8006758:	2100      	movs	r1, #0
 800675a:	4618      	mov	r0, r3
 800675c:	f7ff fafa 	bl	8005d54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2101      	movs	r1, #1
 8006766:	4618      	mov	r0, r3
 8006768:	f7ff fade 	bl	8005d28 <LL_ADC_GetOffsetChannel>
 800676c:	4603      	mov	r3, r0
 800676e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10a      	bne.n	800678c <HAL_ADC_ConfigChannel+0x220>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2101      	movs	r1, #1
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff fad3 	bl	8005d28 <LL_ADC_GetOffsetChannel>
 8006782:	4603      	mov	r3, r0
 8006784:	0e9b      	lsrs	r3, r3, #26
 8006786:	f003 021f 	and.w	r2, r3, #31
 800678a:	e01e      	b.n	80067ca <HAL_ADC_ConfigChannel+0x25e>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2101      	movs	r1, #1
 8006792:	4618      	mov	r0, r3
 8006794:	f7ff fac8 	bl	8005d28 <LL_ADC_GetOffsetChannel>
 8006798:	4603      	mov	r3, r0
 800679a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800679e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80067a2:	fa93 f3a3 	rbit	r3, r3
 80067a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80067aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80067b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80067ba:	2320      	movs	r3, #32
 80067bc:	e004      	b.n	80067c8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80067be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067c2:	fab3 f383 	clz	r3, r3
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d105      	bne.n	80067e2 <HAL_ADC_ConfigChannel+0x276>
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	0e9b      	lsrs	r3, r3, #26
 80067dc:	f003 031f 	and.w	r3, r3, #31
 80067e0:	e018      	b.n	8006814 <HAL_ADC_ConfigChannel+0x2a8>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067ee:	fa93 f3a3 	rbit	r3, r3
 80067f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80067f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80067fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80067fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8006806:	2320      	movs	r3, #32
 8006808:	e004      	b.n	8006814 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800680a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800680e:	fab3 f383 	clz	r3, r3
 8006812:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006814:	429a      	cmp	r2, r3
 8006816:	d106      	bne.n	8006826 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2200      	movs	r2, #0
 800681e:	2101      	movs	r1, #1
 8006820:	4618      	mov	r0, r3
 8006822:	f7ff fa97 	bl	8005d54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2102      	movs	r1, #2
 800682c:	4618      	mov	r0, r3
 800682e:	f7ff fa7b 	bl	8005d28 <LL_ADC_GetOffsetChannel>
 8006832:	4603      	mov	r3, r0
 8006834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10a      	bne.n	8006852 <HAL_ADC_ConfigChannel+0x2e6>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2102      	movs	r1, #2
 8006842:	4618      	mov	r0, r3
 8006844:	f7ff fa70 	bl	8005d28 <LL_ADC_GetOffsetChannel>
 8006848:	4603      	mov	r3, r0
 800684a:	0e9b      	lsrs	r3, r3, #26
 800684c:	f003 021f 	and.w	r2, r3, #31
 8006850:	e01e      	b.n	8006890 <HAL_ADC_ConfigChannel+0x324>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2102      	movs	r1, #2
 8006858:	4618      	mov	r0, r3
 800685a:	f7ff fa65 	bl	8005d28 <LL_ADC_GetOffsetChannel>
 800685e:	4603      	mov	r3, r0
 8006860:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006864:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006868:	fa93 f3a3 	rbit	r3, r3
 800686c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006870:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006874:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006878:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8006880:	2320      	movs	r3, #32
 8006882:	e004      	b.n	800688e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8006884:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006888:	fab3 f383 	clz	r3, r3
 800688c:	b2db      	uxtb	r3, r3
 800688e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006898:	2b00      	cmp	r3, #0
 800689a:	d105      	bne.n	80068a8 <HAL_ADC_ConfigChannel+0x33c>
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	0e9b      	lsrs	r3, r3, #26
 80068a2:	f003 031f 	and.w	r3, r3, #31
 80068a6:	e016      	b.n	80068d6 <HAL_ADC_ConfigChannel+0x36a>
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068b4:	fa93 f3a3 	rbit	r3, r3
 80068b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80068ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80068c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80068c8:	2320      	movs	r3, #32
 80068ca:	e004      	b.n	80068d6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80068cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068d0:	fab3 f383 	clz	r3, r3
 80068d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d106      	bne.n	80068e8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2200      	movs	r2, #0
 80068e0:	2102      	movs	r1, #2
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7ff fa36 	bl	8005d54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2103      	movs	r1, #3
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff fa1a 	bl	8005d28 <LL_ADC_GetOffsetChannel>
 80068f4:	4603      	mov	r3, r0
 80068f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10a      	bne.n	8006914 <HAL_ADC_ConfigChannel+0x3a8>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2103      	movs	r1, #3
 8006904:	4618      	mov	r0, r3
 8006906:	f7ff fa0f 	bl	8005d28 <LL_ADC_GetOffsetChannel>
 800690a:	4603      	mov	r3, r0
 800690c:	0e9b      	lsrs	r3, r3, #26
 800690e:	f003 021f 	and.w	r2, r3, #31
 8006912:	e017      	b.n	8006944 <HAL_ADC_ConfigChannel+0x3d8>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2103      	movs	r1, #3
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff fa04 	bl	8005d28 <LL_ADC_GetOffsetChannel>
 8006920:	4603      	mov	r3, r0
 8006922:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006926:	fa93 f3a3 	rbit	r3, r3
 800692a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800692c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800692e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8006936:	2320      	movs	r3, #32
 8006938:	e003      	b.n	8006942 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800693a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800693c:	fab3 f383 	clz	r3, r3
 8006940:	b2db      	uxtb	r3, r3
 8006942:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800694c:	2b00      	cmp	r3, #0
 800694e:	d105      	bne.n	800695c <HAL_ADC_ConfigChannel+0x3f0>
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	0e9b      	lsrs	r3, r3, #26
 8006956:	f003 031f 	and.w	r3, r3, #31
 800695a:	e011      	b.n	8006980 <HAL_ADC_ConfigChannel+0x414>
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006962:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006964:	fa93 f3a3 	rbit	r3, r3
 8006968:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800696a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800696c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800696e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8006974:	2320      	movs	r3, #32
 8006976:	e003      	b.n	8006980 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8006978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800697a:	fab3 f383 	clz	r3, r3
 800697e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006980:	429a      	cmp	r2, r3
 8006982:	d106      	bne.n	8006992 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2200      	movs	r2, #0
 800698a:	2103      	movs	r1, #3
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff f9e1 	bl	8005d54 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff fb3e 	bl	8006018 <LL_ADC_IsEnabled>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f040 8140 	bne.w	8006c24 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6818      	ldr	r0, [r3, #0]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	6819      	ldr	r1, [r3, #0]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	461a      	mov	r2, r3
 80069b2:	f7ff fa9d 	bl	8005ef0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	4a8f      	ldr	r2, [pc, #572]	; (8006bf8 <HAL_ADC_ConfigChannel+0x68c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	f040 8131 	bne.w	8006c24 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10b      	bne.n	80069ea <HAL_ADC_ConfigChannel+0x47e>
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	0e9b      	lsrs	r3, r3, #26
 80069d8:	3301      	adds	r3, #1
 80069da:	f003 031f 	and.w	r3, r3, #31
 80069de:	2b09      	cmp	r3, #9
 80069e0:	bf94      	ite	ls
 80069e2:	2301      	movls	r3, #1
 80069e4:	2300      	movhi	r3, #0
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	e019      	b.n	8006a1e <HAL_ADC_ConfigChannel+0x4b2>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069f2:	fa93 f3a3 	rbit	r3, r3
 80069f6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80069f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069fa:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80069fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8006a02:	2320      	movs	r3, #32
 8006a04:	e003      	b.n	8006a0e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8006a06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a08:	fab3 f383 	clz	r3, r3
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	3301      	adds	r3, #1
 8006a10:	f003 031f 	and.w	r3, r3, #31
 8006a14:	2b09      	cmp	r3, #9
 8006a16:	bf94      	ite	ls
 8006a18:	2301      	movls	r3, #1
 8006a1a:	2300      	movhi	r3, #0
 8006a1c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d079      	beq.n	8006b16 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d107      	bne.n	8006a3e <HAL_ADC_ConfigChannel+0x4d2>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	0e9b      	lsrs	r3, r3, #26
 8006a34:	3301      	adds	r3, #1
 8006a36:	069b      	lsls	r3, r3, #26
 8006a38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a3c:	e015      	b.n	8006a6a <HAL_ADC_ConfigChannel+0x4fe>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a46:	fa93 f3a3 	rbit	r3, r3
 8006a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a4e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8006a56:	2320      	movs	r3, #32
 8006a58:	e003      	b.n	8006a62 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8006a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a5c:	fab3 f383 	clz	r3, r3
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	3301      	adds	r3, #1
 8006a64:	069b      	lsls	r3, r3, #26
 8006a66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d109      	bne.n	8006a8a <HAL_ADC_ConfigChannel+0x51e>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	0e9b      	lsrs	r3, r3, #26
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	f003 031f 	and.w	r3, r3, #31
 8006a82:	2101      	movs	r1, #1
 8006a84:	fa01 f303 	lsl.w	r3, r1, r3
 8006a88:	e017      	b.n	8006aba <HAL_ADC_ConfigChannel+0x54e>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a92:	fa93 f3a3 	rbit	r3, r3
 8006a96:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a9a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8006aa2:	2320      	movs	r3, #32
 8006aa4:	e003      	b.n	8006aae <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8006aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aa8:	fab3 f383 	clz	r3, r3
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	3301      	adds	r3, #1
 8006ab0:	f003 031f 	and.w	r3, r3, #31
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aba:	ea42 0103 	orr.w	r1, r2, r3
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10a      	bne.n	8006ae0 <HAL_ADC_ConfigChannel+0x574>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	0e9b      	lsrs	r3, r3, #26
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	f003 021f 	and.w	r2, r3, #31
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	4413      	add	r3, r2
 8006adc:	051b      	lsls	r3, r3, #20
 8006ade:	e018      	b.n	8006b12 <HAL_ADC_ConfigChannel+0x5a6>
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	fa93 f3a3 	rbit	r3, r3
 8006aec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8006af8:	2320      	movs	r3, #32
 8006afa:	e003      	b.n	8006b04 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8006afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006afe:	fab3 f383 	clz	r3, r3
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	3301      	adds	r3, #1
 8006b06:	f003 021f 	and.w	r2, r3, #31
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	4413      	add	r3, r2
 8006b10:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b12:	430b      	orrs	r3, r1
 8006b14:	e081      	b.n	8006c1a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d107      	bne.n	8006b32 <HAL_ADC_ConfigChannel+0x5c6>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	0e9b      	lsrs	r3, r3, #26
 8006b28:	3301      	adds	r3, #1
 8006b2a:	069b      	lsls	r3, r3, #26
 8006b2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b30:	e015      	b.n	8006b5e <HAL_ADC_ConfigChannel+0x5f2>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3a:	fa93 f3a3 	rbit	r3, r3
 8006b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b42:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8006b4a:	2320      	movs	r3, #32
 8006b4c:	e003      	b.n	8006b56 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	fab3 f383 	clz	r3, r3
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	3301      	adds	r3, #1
 8006b58:	069b      	lsls	r3, r3, #26
 8006b5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d109      	bne.n	8006b7e <HAL_ADC_ConfigChannel+0x612>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	0e9b      	lsrs	r3, r3, #26
 8006b70:	3301      	adds	r3, #1
 8006b72:	f003 031f 	and.w	r3, r3, #31
 8006b76:	2101      	movs	r1, #1
 8006b78:	fa01 f303 	lsl.w	r3, r1, r3
 8006b7c:	e017      	b.n	8006bae <HAL_ADC_ConfigChannel+0x642>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	fa93 f3a3 	rbit	r3, r3
 8006b8a:	61fb      	str	r3, [r7, #28]
  return result;
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8006b96:	2320      	movs	r3, #32
 8006b98:	e003      	b.n	8006ba2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	fab3 f383 	clz	r3, r3
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	f003 031f 	and.w	r3, r3, #31
 8006ba8:	2101      	movs	r1, #1
 8006baa:	fa01 f303 	lsl.w	r3, r1, r3
 8006bae:	ea42 0103 	orr.w	r1, r2, r3
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10d      	bne.n	8006bda <HAL_ADC_ConfigChannel+0x66e>
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	0e9b      	lsrs	r3, r3, #26
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	f003 021f 	and.w	r2, r3, #31
 8006bca:	4613      	mov	r3, r2
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	4413      	add	r3, r2
 8006bd0:	3b1e      	subs	r3, #30
 8006bd2:	051b      	lsls	r3, r3, #20
 8006bd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006bd8:	e01e      	b.n	8006c18 <HAL_ADC_ConfigChannel+0x6ac>
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	fa93 f3a3 	rbit	r3, r3
 8006be6:	613b      	str	r3, [r7, #16]
  return result;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d104      	bne.n	8006bfc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8006bf2:	2320      	movs	r3, #32
 8006bf4:	e006      	b.n	8006c04 <HAL_ADC_ConfigChannel+0x698>
 8006bf6:	bf00      	nop
 8006bf8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	fab3 f383 	clz	r3, r3
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	3301      	adds	r3, #1
 8006c06:	f003 021f 	and.w	r2, r3, #31
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	4413      	add	r3, r2
 8006c10:	3b1e      	subs	r3, #30
 8006c12:	051b      	lsls	r3, r3, #20
 8006c14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c18:	430b      	orrs	r3, r1
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	6892      	ldr	r2, [r2, #8]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	f7ff f93b 	bl	8005e9a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	4b3f      	ldr	r3, [pc, #252]	; (8006d28 <HAL_ADC_ConfigChannel+0x7bc>)
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d071      	beq.n	8006d14 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006c30:	483e      	ldr	r0, [pc, #248]	; (8006d2c <HAL_ADC_ConfigChannel+0x7c0>)
 8006c32:	f7ff f847 	bl	8005cc4 <LL_ADC_GetCommonPathInternalCh>
 8006c36:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a3c      	ldr	r2, [pc, #240]	; (8006d30 <HAL_ADC_ConfigChannel+0x7c4>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d004      	beq.n	8006c4e <HAL_ADC_ConfigChannel+0x6e2>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a3a      	ldr	r2, [pc, #232]	; (8006d34 <HAL_ADC_ConfigChannel+0x7c8>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d127      	bne.n	8006c9e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006c4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d121      	bne.n	8006c9e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c62:	d157      	bne.n	8006d14 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006c64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	482f      	ldr	r0, [pc, #188]	; (8006d2c <HAL_ADC_ConfigChannel+0x7c0>)
 8006c70:	f7ff f815 	bl	8005c9e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006c74:	4b30      	ldr	r3, [pc, #192]	; (8006d38 <HAL_ADC_ConfigChannel+0x7cc>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	099b      	lsrs	r3, r3, #6
 8006c7a:	4a30      	ldr	r2, [pc, #192]	; (8006d3c <HAL_ADC_ConfigChannel+0x7d0>)
 8006c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c80:	099b      	lsrs	r3, r3, #6
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	4613      	mov	r3, r2
 8006c86:	005b      	lsls	r3, r3, #1
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006c8e:	e002      	b.n	8006c96 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	3b01      	subs	r3, #1
 8006c94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1f9      	bne.n	8006c90 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006c9c:	e03a      	b.n	8006d14 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a27      	ldr	r2, [pc, #156]	; (8006d40 <HAL_ADC_ConfigChannel+0x7d4>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d113      	bne.n	8006cd0 <HAL_ADC_ConfigChannel+0x764>
 8006ca8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10d      	bne.n	8006cd0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a22      	ldr	r2, [pc, #136]	; (8006d44 <HAL_ADC_ConfigChannel+0x7d8>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d02a      	beq.n	8006d14 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006cbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	4818      	ldr	r0, [pc, #96]	; (8006d2c <HAL_ADC_ConfigChannel+0x7c0>)
 8006cca:	f7fe ffe8 	bl	8005c9e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006cce:	e021      	b.n	8006d14 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a1c      	ldr	r2, [pc, #112]	; (8006d48 <HAL_ADC_ConfigChannel+0x7dc>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d11c      	bne.n	8006d14 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006cda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d116      	bne.n	8006d14 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a16      	ldr	r2, [pc, #88]	; (8006d44 <HAL_ADC_ConfigChannel+0x7d8>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d011      	beq.n	8006d14 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006cf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006cf4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	480c      	ldr	r0, [pc, #48]	; (8006d2c <HAL_ADC_ConfigChannel+0x7c0>)
 8006cfc:	f7fe ffcf 	bl	8005c9e <LL_ADC_SetCommonPathInternalCh>
 8006d00:	e008      	b.n	8006d14 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d06:	f043 0220 	orr.w	r2, r3, #32
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006d1c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	37d8      	adds	r7, #216	; 0xd8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	80080000 	.word	0x80080000
 8006d2c:	50000300 	.word	0x50000300
 8006d30:	c3210000 	.word	0xc3210000
 8006d34:	90c00010 	.word	0x90c00010
 8006d38:	20000000 	.word	0x20000000
 8006d3c:	053e2d63 	.word	0x053e2d63
 8006d40:	c7520000 	.word	0xc7520000
 8006d44:	50000100 	.word	0x50000100
 8006d48:	cb840000 	.word	0xcb840000

08006d4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7ff f95d 	bl	8006018 <LL_ADC_IsEnabled>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d14d      	bne.n	8006e00 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689a      	ldr	r2, [r3, #8]
 8006d6a:	4b28      	ldr	r3, [pc, #160]	; (8006e0c <ADC_Enable+0xc0>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00d      	beq.n	8006d8e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d76:	f043 0210 	orr.w	r2, r3, #16
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d82:	f043 0201 	orr.w	r2, r3, #1
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e039      	b.n	8006e02 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff f92c 	bl	8005ff0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006d98:	f7fe ff40 	bl	8005c1c <HAL_GetTick>
 8006d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006d9e:	e028      	b.n	8006df2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7ff f937 	bl	8006018 <LL_ADC_IsEnabled>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d104      	bne.n	8006dba <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7ff f91b 	bl	8005ff0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006dba:	f7fe ff2f 	bl	8005c1c <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d914      	bls.n	8006df2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d00d      	beq.n	8006df2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dda:	f043 0210 	orr.w	r2, r3, #16
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006de6:	f043 0201 	orr.w	r2, r3, #1
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e007      	b.n	8006e02 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d1cf      	bne.n	8006da0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	8000003f 	.word	0x8000003f

08006e10 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d14b      	bne.n	8006ec2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0308 	and.w	r3, r3, #8
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d021      	beq.n	8006e88 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7fe ffe7 	bl	8005e1c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d032      	beq.n	8006eba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d12b      	bne.n	8006eba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d11f      	bne.n	8006eba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e7e:	f043 0201 	orr.w	r2, r3, #1
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e86:	e018      	b.n	8006eba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d111      	bne.n	8006eba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d105      	bne.n	8006eba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb2:	f043 0201 	orr.w	r2, r3, #1
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f7ff fb38 	bl	8006530 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006ec0:	e00e      	b.n	8006ee0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec6:	f003 0310 	and.w	r3, r3, #16
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f7ff fb42 	bl	8006558 <HAL_ADC_ErrorCallback>
}
 8006ed4:	e004      	b.n	8006ee0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	4798      	blx	r3
}
 8006ee0:	bf00      	nop
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f7ff fb24 	bl	8006544 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006efc:	bf00      	nop
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f10:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f22:	f043 0204 	orr.w	r2, r3, #4
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f7ff fb14 	bl	8006558 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f30:	bf00      	nop
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <LL_ADC_IsEnabled>:
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d101      	bne.n	8006f50 <LL_ADC_IsEnabled+0x18>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e000      	b.n	8006f52 <LL_ADC_IsEnabled+0x1a>
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <LL_ADC_REG_IsConversionOngoing>:
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f003 0304 	and.w	r3, r3, #4
 8006f6e:	2b04      	cmp	r3, #4
 8006f70:	d101      	bne.n	8006f76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e000      	b.n	8006f78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006f84:	b590      	push	{r4, r7, lr}
 8006f86:	b0a1      	sub	sp, #132	; 0x84
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d101      	bne.n	8006fa2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	e08b      	b.n	80070ba <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006faa:	2300      	movs	r3, #0
 8006fac:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006fae:	2300      	movs	r3, #0
 8006fb0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fba:	d102      	bne.n	8006fc2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006fbc:	4b41      	ldr	r3, [pc, #260]	; (80070c4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006fbe:	60bb      	str	r3, [r7, #8]
 8006fc0:	e001      	b.n	8006fc6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10b      	bne.n	8006fe4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fd0:	f043 0220 	orr.w	r2, r3, #32
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e06a      	b.n	80070ba <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7ff ffb9 	bl	8006f5e <LL_ADC_REG_IsConversionOngoing>
 8006fec:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7ff ffb3 	bl	8006f5e <LL_ADC_REG_IsConversionOngoing>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d14c      	bne.n	8007098 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006ffe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007000:	2b00      	cmp	r3, #0
 8007002:	d149      	bne.n	8007098 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007004:	4b30      	ldr	r3, [pc, #192]	; (80070c8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8007006:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d028      	beq.n	8007062 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	6859      	ldr	r1, [r3, #4]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007022:	035b      	lsls	r3, r3, #13
 8007024:	430b      	orrs	r3, r1
 8007026:	431a      	orrs	r2, r3
 8007028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800702a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800702c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007030:	f7ff ff82 	bl	8006f38 <LL_ADC_IsEnabled>
 8007034:	4604      	mov	r4, r0
 8007036:	4823      	ldr	r0, [pc, #140]	; (80070c4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007038:	f7ff ff7e 	bl	8006f38 <LL_ADC_IsEnabled>
 800703c:	4603      	mov	r3, r0
 800703e:	4323      	orrs	r3, r4
 8007040:	2b00      	cmp	r3, #0
 8007042:	d133      	bne.n	80070ac <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800704c:	f023 030f 	bic.w	r3, r3, #15
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	6811      	ldr	r1, [r2, #0]
 8007054:	683a      	ldr	r2, [r7, #0]
 8007056:	6892      	ldr	r2, [r2, #8]
 8007058:	430a      	orrs	r2, r1
 800705a:	431a      	orrs	r2, r3
 800705c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800705e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007060:	e024      	b.n	80070ac <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800706a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800706c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800706e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007072:	f7ff ff61 	bl	8006f38 <LL_ADC_IsEnabled>
 8007076:	4604      	mov	r4, r0
 8007078:	4812      	ldr	r0, [pc, #72]	; (80070c4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800707a:	f7ff ff5d 	bl	8006f38 <LL_ADC_IsEnabled>
 800707e:	4603      	mov	r3, r0
 8007080:	4323      	orrs	r3, r4
 8007082:	2b00      	cmp	r3, #0
 8007084:	d112      	bne.n	80070ac <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800708e:	f023 030f 	bic.w	r3, r3, #15
 8007092:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007094:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007096:	e009      	b.n	80070ac <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800709c:	f043 0220 	orr.w	r2, r3, #32
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80070aa:	e000      	b.n	80070ae <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80070ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80070b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3784      	adds	r7, #132	; 0x84
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd90      	pop	{r4, r7, pc}
 80070c2:	bf00      	nop
 80070c4:	50000100 	.word	0x50000100
 80070c8:	50000300 	.word	0x50000300

080070cc <__NVIC_SetPriorityGrouping>:
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070dc:	4b0c      	ldr	r3, [pc, #48]	; (8007110 <__NVIC_SetPriorityGrouping+0x44>)
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80070e8:	4013      	ands	r3, r2
 80070ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80070f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070fe:	4a04      	ldr	r2, [pc, #16]	; (8007110 <__NVIC_SetPriorityGrouping+0x44>)
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	60d3      	str	r3, [r2, #12]
}
 8007104:	bf00      	nop
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	e000ed00 	.word	0xe000ed00

08007114 <__NVIC_GetPriorityGrouping>:
{
 8007114:	b480      	push	{r7}
 8007116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007118:	4b04      	ldr	r3, [pc, #16]	; (800712c <__NVIC_GetPriorityGrouping+0x18>)
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	0a1b      	lsrs	r3, r3, #8
 800711e:	f003 0307 	and.w	r3, r3, #7
}
 8007122:	4618      	mov	r0, r3
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	e000ed00 	.word	0xe000ed00

08007130 <__NVIC_EnableIRQ>:
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	4603      	mov	r3, r0
 8007138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800713a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800713e:	2b00      	cmp	r3, #0
 8007140:	db0b      	blt.n	800715a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007142:	79fb      	ldrb	r3, [r7, #7]
 8007144:	f003 021f 	and.w	r2, r3, #31
 8007148:	4907      	ldr	r1, [pc, #28]	; (8007168 <__NVIC_EnableIRQ+0x38>)
 800714a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800714e:	095b      	lsrs	r3, r3, #5
 8007150:	2001      	movs	r0, #1
 8007152:	fa00 f202 	lsl.w	r2, r0, r2
 8007156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800715a:	bf00      	nop
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	e000e100 	.word	0xe000e100

0800716c <__NVIC_SetPriority>:
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	4603      	mov	r3, r0
 8007174:	6039      	str	r1, [r7, #0]
 8007176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800717c:	2b00      	cmp	r3, #0
 800717e:	db0a      	blt.n	8007196 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	b2da      	uxtb	r2, r3
 8007184:	490c      	ldr	r1, [pc, #48]	; (80071b8 <__NVIC_SetPriority+0x4c>)
 8007186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800718a:	0112      	lsls	r2, r2, #4
 800718c:	b2d2      	uxtb	r2, r2
 800718e:	440b      	add	r3, r1
 8007190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007194:	e00a      	b.n	80071ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	b2da      	uxtb	r2, r3
 800719a:	4908      	ldr	r1, [pc, #32]	; (80071bc <__NVIC_SetPriority+0x50>)
 800719c:	79fb      	ldrb	r3, [r7, #7]
 800719e:	f003 030f 	and.w	r3, r3, #15
 80071a2:	3b04      	subs	r3, #4
 80071a4:	0112      	lsls	r2, r2, #4
 80071a6:	b2d2      	uxtb	r2, r2
 80071a8:	440b      	add	r3, r1
 80071aa:	761a      	strb	r2, [r3, #24]
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	e000e100 	.word	0xe000e100
 80071bc:	e000ed00 	.word	0xe000ed00

080071c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b089      	sub	sp, #36	; 0x24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f003 0307 	and.w	r3, r3, #7
 80071d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	f1c3 0307 	rsb	r3, r3, #7
 80071da:	2b04      	cmp	r3, #4
 80071dc:	bf28      	it	cs
 80071de:	2304      	movcs	r3, #4
 80071e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	3304      	adds	r3, #4
 80071e6:	2b06      	cmp	r3, #6
 80071e8:	d902      	bls.n	80071f0 <NVIC_EncodePriority+0x30>
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	3b03      	subs	r3, #3
 80071ee:	e000      	b.n	80071f2 <NVIC_EncodePriority+0x32>
 80071f0:	2300      	movs	r3, #0
 80071f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071f4:	f04f 32ff 	mov.w	r2, #4294967295
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	fa02 f303 	lsl.w	r3, r2, r3
 80071fe:	43da      	mvns	r2, r3
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	401a      	ands	r2, r3
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007208:	f04f 31ff 	mov.w	r1, #4294967295
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	fa01 f303 	lsl.w	r3, r1, r3
 8007212:	43d9      	mvns	r1, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007218:	4313      	orrs	r3, r2
         );
}
 800721a:	4618      	mov	r0, r3
 800721c:	3724      	adds	r7, #36	; 0x24
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
	...

08007228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	3b01      	subs	r3, #1
 8007234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007238:	d301      	bcc.n	800723e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800723a:	2301      	movs	r3, #1
 800723c:	e00f      	b.n	800725e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800723e:	4a0a      	ldr	r2, [pc, #40]	; (8007268 <SysTick_Config+0x40>)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3b01      	subs	r3, #1
 8007244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007246:	210f      	movs	r1, #15
 8007248:	f04f 30ff 	mov.w	r0, #4294967295
 800724c:	f7ff ff8e 	bl	800716c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007250:	4b05      	ldr	r3, [pc, #20]	; (8007268 <SysTick_Config+0x40>)
 8007252:	2200      	movs	r2, #0
 8007254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007256:	4b04      	ldr	r3, [pc, #16]	; (8007268 <SysTick_Config+0x40>)
 8007258:	2207      	movs	r2, #7
 800725a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	e000e010 	.word	0xe000e010

0800726c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7ff ff29 	bl	80070cc <__NVIC_SetPriorityGrouping>
}
 800727a:	bf00      	nop
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b086      	sub	sp, #24
 8007286:	af00      	add	r7, sp, #0
 8007288:	4603      	mov	r3, r0
 800728a:	60b9      	str	r1, [r7, #8]
 800728c:	607a      	str	r2, [r7, #4]
 800728e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007290:	f7ff ff40 	bl	8007114 <__NVIC_GetPriorityGrouping>
 8007294:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	68b9      	ldr	r1, [r7, #8]
 800729a:	6978      	ldr	r0, [r7, #20]
 800729c:	f7ff ff90 	bl	80071c0 <NVIC_EncodePriority>
 80072a0:	4602      	mov	r2, r0
 80072a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072a6:	4611      	mov	r1, r2
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7ff ff5f 	bl	800716c <__NVIC_SetPriority>
}
 80072ae:	bf00      	nop
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b082      	sub	sp, #8
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	4603      	mov	r3, r0
 80072be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80072c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7ff ff33 	bl	8007130 <__NVIC_EnableIRQ>
}
 80072ca:	bf00      	nop
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b082      	sub	sp, #8
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7ff ffa4 	bl	8007228 <SysTick_Config>
 80072e0:	4603      	mov	r3, r0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e08d      	b.n	800741a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	4b47      	ldr	r3, [pc, #284]	; (8007424 <HAL_DMA_Init+0x138>)
 8007306:	429a      	cmp	r2, r3
 8007308:	d80f      	bhi.n	800732a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	461a      	mov	r2, r3
 8007310:	4b45      	ldr	r3, [pc, #276]	; (8007428 <HAL_DMA_Init+0x13c>)
 8007312:	4413      	add	r3, r2
 8007314:	4a45      	ldr	r2, [pc, #276]	; (800742c <HAL_DMA_Init+0x140>)
 8007316:	fba2 2303 	umull	r2, r3, r2, r3
 800731a:	091b      	lsrs	r3, r3, #4
 800731c:	009a      	lsls	r2, r3, #2
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a42      	ldr	r2, [pc, #264]	; (8007430 <HAL_DMA_Init+0x144>)
 8007326:	641a      	str	r2, [r3, #64]	; 0x40
 8007328:	e00e      	b.n	8007348 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	4b40      	ldr	r3, [pc, #256]	; (8007434 <HAL_DMA_Init+0x148>)
 8007332:	4413      	add	r3, r2
 8007334:	4a3d      	ldr	r2, [pc, #244]	; (800742c <HAL_DMA_Init+0x140>)
 8007336:	fba2 2303 	umull	r2, r3, r2, r3
 800733a:	091b      	lsrs	r3, r3, #4
 800733c:	009a      	lsls	r2, r3, #2
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a3c      	ldr	r2, [pc, #240]	; (8007438 <HAL_DMA_Init+0x14c>)
 8007346:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2202      	movs	r2, #2
 800734c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800735e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007362:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800736c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007378:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007384:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	4313      	orrs	r3, r2
 8007390:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fa76 	bl	800788c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073a8:	d102      	bne.n	80073b0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073b8:	b2d2      	uxtb	r2, r2
 80073ba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80073c4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d010      	beq.n	80073f0 <HAL_DMA_Init+0x104>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	2b04      	cmp	r3, #4
 80073d4:	d80c      	bhi.n	80073f0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fa96 	bl	8007908 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e0:	2200      	movs	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80073ec:	605a      	str	r2, [r3, #4]
 80073ee:	e008      	b.n	8007402 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	40020407 	.word	0x40020407
 8007428:	bffdfff8 	.word	0xbffdfff8
 800742c:	cccccccd 	.word	0xcccccccd
 8007430:	40020000 	.word	0x40020000
 8007434:	bffdfbf8 	.word	0xbffdfbf8
 8007438:	40020400 	.word	0x40020400

0800743c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
 8007448:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007454:	2b01      	cmp	r3, #1
 8007456:	d101      	bne.n	800745c <HAL_DMA_Start_IT+0x20>
 8007458:	2302      	movs	r3, #2
 800745a:	e066      	b.n	800752a <HAL_DMA_Start_IT+0xee>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b01      	cmp	r3, #1
 800746e:	d155      	bne.n	800751c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2202      	movs	r2, #2
 8007474:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 0201 	bic.w	r2, r2, #1
 800748c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	68b9      	ldr	r1, [r7, #8]
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 f9bb 	bl	8007810 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d008      	beq.n	80074b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f042 020e 	orr.w	r2, r2, #14
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	e00f      	b.n	80074d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f022 0204 	bic.w	r2, r2, #4
 80074c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f042 020a 	orr.w	r2, r2, #10
 80074d2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d007      	beq.n	80074f2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074f0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d007      	beq.n	800750a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007508:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f042 0201 	orr.w	r2, r2, #1
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	e005      	b.n	8007528 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007524:	2302      	movs	r3, #2
 8007526:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007528:	7dfb      	ldrb	r3, [r7, #23]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3718      	adds	r7, #24
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007532:	b480      	push	{r7}
 8007534:	b085      	sub	sp, #20
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b02      	cmp	r3, #2
 8007548:	d005      	beq.n	8007556 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2204      	movs	r2, #4
 800754e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	73fb      	strb	r3, [r7, #15]
 8007554:	e037      	b.n	80075c6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f022 020e 	bic.w	r2, r2, #14
 8007564:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007570:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007574:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 0201 	bic.w	r2, r2, #1
 8007584:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800758a:	f003 021f 	and.w	r2, r3, #31
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	2101      	movs	r1, #1
 8007594:	fa01 f202 	lsl.w	r2, r1, r2
 8007598:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80075a2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00c      	beq.n	80075c6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075ba:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80075c4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3714      	adds	r7, #20
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d00d      	beq.n	8007618 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2204      	movs	r2, #4
 8007600:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	73fb      	strb	r3, [r7, #15]
 8007616:	e047      	b.n	80076a8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f022 020e 	bic.w	r2, r2, #14
 8007626:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0201 	bic.w	r2, r2, #1
 8007636:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007642:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007646:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800764c:	f003 021f 	and.w	r2, r3, #31
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007654:	2101      	movs	r1, #1
 8007656:	fa01 f202 	lsl.w	r2, r1, r2
 800765a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007664:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00c      	beq.n	8007688 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007678:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800767c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007686:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769c:	2b00      	cmp	r3, #0
 800769e:	d003      	beq.n	80076a8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	4798      	blx	r3
    }
  }
  return status;
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b084      	sub	sp, #16
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ce:	f003 031f 	and.w	r3, r3, #31
 80076d2:	2204      	movs	r2, #4
 80076d4:	409a      	lsls	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	4013      	ands	r3, r2
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d026      	beq.n	800772c <HAL_DMA_IRQHandler+0x7a>
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	f003 0304 	and.w	r3, r3, #4
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d021      	beq.n	800772c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0320 	and.w	r3, r3, #32
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d107      	bne.n	8007706 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f022 0204 	bic.w	r2, r2, #4
 8007704:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770a:	f003 021f 	and.w	r2, r3, #31
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007712:	2104      	movs	r1, #4
 8007714:	fa01 f202 	lsl.w	r2, r1, r2
 8007718:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771e:	2b00      	cmp	r3, #0
 8007720:	d071      	beq.n	8007806 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800772a:	e06c      	b.n	8007806 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007730:	f003 031f 	and.w	r3, r3, #31
 8007734:	2202      	movs	r2, #2
 8007736:	409a      	lsls	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	4013      	ands	r3, r2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d02e      	beq.n	800779e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d029      	beq.n	800779e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0320 	and.w	r3, r3, #32
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10b      	bne.n	8007770 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f022 020a 	bic.w	r2, r2, #10
 8007766:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007774:	f003 021f 	and.w	r2, r3, #31
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777c:	2102      	movs	r1, #2
 800777e:	fa01 f202 	lsl.w	r2, r1, r2
 8007782:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007790:	2b00      	cmp	r3, #0
 8007792:	d038      	beq.n	8007806 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800779c:	e033      	b.n	8007806 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a2:	f003 031f 	and.w	r3, r3, #31
 80077a6:	2208      	movs	r2, #8
 80077a8:	409a      	lsls	r2, r3
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	4013      	ands	r3, r2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d02a      	beq.n	8007808 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	f003 0308 	and.w	r3, r3, #8
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d025      	beq.n	8007808 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 020e 	bic.w	r2, r2, #14
 80077ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d0:	f003 021f 	and.w	r2, r3, #31
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d8:	2101      	movs	r1, #1
 80077da:	fa01 f202 	lsl.w	r2, r1, r2
 80077de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d004      	beq.n	8007808 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007806:	bf00      	nop
 8007808:	bf00      	nop
}
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
 800781c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007826:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782c:	2b00      	cmp	r3, #0
 800782e:	d004      	beq.n	800783a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007838:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783e:	f003 021f 	and.w	r2, r3, #31
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007846:	2101      	movs	r1, #1
 8007848:	fa01 f202 	lsl.w	r2, r1, r2
 800784c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	2b10      	cmp	r3, #16
 800785c:	d108      	bne.n	8007870 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800786e:	e007      	b.n	8007880 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	60da      	str	r2, [r3, #12]
}
 8007880:	bf00      	nop
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	461a      	mov	r2, r3
 800789a:	4b16      	ldr	r3, [pc, #88]	; (80078f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800789c:	429a      	cmp	r2, r3
 800789e:	d802      	bhi.n	80078a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80078a0:	4b15      	ldr	r3, [pc, #84]	; (80078f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	e001      	b.n	80078aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80078a6:	4b15      	ldr	r3, [pc, #84]	; (80078fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80078a8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	3b08      	subs	r3, #8
 80078b6:	4a12      	ldr	r2, [pc, #72]	; (8007900 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80078b8:	fba2 2303 	umull	r2, r3, r2, r3
 80078bc:	091b      	lsrs	r3, r3, #4
 80078be:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c4:	089b      	lsrs	r3, r3, #2
 80078c6:	009a      	lsls	r2, r3, #2
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	4413      	add	r3, r2
 80078cc:	461a      	mov	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a0b      	ldr	r2, [pc, #44]	; (8007904 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80078d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f003 031f 	and.w	r3, r3, #31
 80078de:	2201      	movs	r2, #1
 80078e0:	409a      	lsls	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80078e6:	bf00      	nop
 80078e8:	371c      	adds	r7, #28
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	40020407 	.word	0x40020407
 80078f8:	40020800 	.word	0x40020800
 80078fc:	40020820 	.word	0x40020820
 8007900:	cccccccd 	.word	0xcccccccd
 8007904:	40020880 	.word	0x40020880

08007908 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	b2db      	uxtb	r3, r3
 8007916:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	4b0b      	ldr	r3, [pc, #44]	; (8007948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800791c:	4413      	add	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	461a      	mov	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a08      	ldr	r2, [pc, #32]	; (800794c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800792a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	3b01      	subs	r3, #1
 8007930:	f003 031f 	and.w	r3, r3, #31
 8007934:	2201      	movs	r2, #1
 8007936:	409a      	lsls	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800793c:	bf00      	nop
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	1000823f 	.word	0x1000823f
 800794c:	40020940 	.word	0x40020940

08007950 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d101      	bne.n	8007962 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e147      	b.n	8007bf2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d106      	bne.n	800797c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7fa fad6 	bl	8001f28 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	699a      	ldr	r2, [r3, #24]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f022 0210 	bic.w	r2, r2, #16
 800798a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800798c:	f7fe f946 	bl	8005c1c <HAL_GetTick>
 8007990:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007992:	e012      	b.n	80079ba <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007994:	f7fe f942 	bl	8005c1c <HAL_GetTick>
 8007998:	4602      	mov	r2, r0
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	2b0a      	cmp	r3, #10
 80079a0:	d90b      	bls.n	80079ba <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079a6:	f043 0201 	orr.w	r2, r3, #1
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2203      	movs	r2, #3
 80079b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e11b      	b.n	8007bf2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	f003 0308 	and.w	r3, r3, #8
 80079c4:	2b08      	cmp	r3, #8
 80079c6:	d0e5      	beq.n	8007994 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	699a      	ldr	r2, [r3, #24]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f042 0201 	orr.w	r2, r2, #1
 80079d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80079d8:	f7fe f920 	bl	8005c1c <HAL_GetTick>
 80079dc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80079de:	e012      	b.n	8007a06 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80079e0:	f7fe f91c 	bl	8005c1c <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	2b0a      	cmp	r3, #10
 80079ec:	d90b      	bls.n	8007a06 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079f2:	f043 0201 	orr.w	r2, r3, #1
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2203      	movs	r2, #3
 80079fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e0f5      	b.n	8007bf2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	f003 0301 	and.w	r3, r3, #1
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d0e5      	beq.n	80079e0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	699a      	ldr	r2, [r3, #24]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0202 	orr.w	r2, r2, #2
 8007a22:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a74      	ldr	r2, [pc, #464]	; (8007bfc <HAL_FDCAN_Init+0x2ac>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d103      	bne.n	8007a36 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007a2e:	4a74      	ldr	r2, [pc, #464]	; (8007c00 <HAL_FDCAN_Init+0x2b0>)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	7c1b      	ldrb	r3, [r3, #16]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d108      	bne.n	8007a50 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	699a      	ldr	r2, [r3, #24]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a4c:	619a      	str	r2, [r3, #24]
 8007a4e:	e007      	b.n	8007a60 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699a      	ldr	r2, [r3, #24]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a5e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	7c5b      	ldrb	r3, [r3, #17]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d108      	bne.n	8007a7a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	699a      	ldr	r2, [r3, #24]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a76:	619a      	str	r2, [r3, #24]
 8007a78:	e007      	b.n	8007a8a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	699a      	ldr	r2, [r3, #24]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a88:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	7c9b      	ldrb	r3, [r3, #18]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d108      	bne.n	8007aa4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	699a      	ldr	r2, [r3, #24]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007aa0:	619a      	str	r2, [r3, #24]
 8007aa2:	e007      	b.n	8007ab4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	699a      	ldr	r2, [r3, #24]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ab2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	689a      	ldr	r2, [r3, #8]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	699a      	ldr	r2, [r3, #24]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007ad8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	691a      	ldr	r2, [r3, #16]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0210 	bic.w	r2, r2, #16
 8007ae8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d108      	bne.n	8007b04 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	699a      	ldr	r2, [r3, #24]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f042 0204 	orr.w	r2, r2, #4
 8007b00:	619a      	str	r2, [r3, #24]
 8007b02:	e02c      	b.n	8007b5e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d028      	beq.n	8007b5e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d01c      	beq.n	8007b4e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	699a      	ldr	r2, [r3, #24]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b22:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	691a      	ldr	r2, [r3, #16]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f042 0210 	orr.w	r2, r2, #16
 8007b32:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	2b03      	cmp	r3, #3
 8007b3a:	d110      	bne.n	8007b5e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	699a      	ldr	r2, [r3, #24]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f042 0220 	orr.w	r2, r2, #32
 8007b4a:	619a      	str	r2, [r3, #24]
 8007b4c:	e007      	b.n	8007b5e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	699a      	ldr	r2, [r3, #24]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f042 0220 	orr.w	r2, r2, #32
 8007b5c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	3b01      	subs	r3, #1
 8007b64:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007b6e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007b76:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007b86:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007b88:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b92:	d115      	bne.n	8007bc0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b98:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007ba2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007bac:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007bbc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007bbe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f9e6 	bl	8007fa8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	40006400 	.word	0x40006400
 8007c00:	40006500 	.word	0x40006500

08007c04 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c14:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d002      	beq.n	8007c22 <HAL_FDCAN_ConfigFilter+0x1e>
 8007c1c:	7dfb      	ldrb	r3, [r7, #23]
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d13d      	bne.n	8007c9e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d119      	bne.n	8007c5e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007c36:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8007c3e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007c44:	4313      	orrs	r3, r2
 8007c46:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	601a      	str	r2, [r3, #0]
 8007c5c:	e01d      	b.n	8007c9a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	075a      	lsls	r2, r3, #29
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	079a      	lsls	r2, r3, #30
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	00db      	lsls	r3, r3, #3
 8007c84:	4413      	add	r3, r2
 8007c86:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	693a      	ldr	r2, [r7, #16]
 8007c8c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	3304      	adds	r3, #4
 8007c92:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	e006      	b.n	8007cac <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ca2:	f043 0202 	orr.w	r2, r3, #2
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
  }
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	371c      	adds	r7, #28
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
 8007cc4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d116      	bne.n	8007d00 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cda:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	011a      	lsls	r2, r3, #4
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	005b      	lsls	r3, r3, #1
 8007cec:	431a      	orrs	r2, r3
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	e006      	b.n	8007d0e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d04:	f043 0204 	orr.w	r2, r3, #4
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
  }
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b083      	sub	sp, #12
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d110      	bne.n	8007d50 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2202      	movs	r2, #2
 8007d32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	699a      	ldr	r2, [r3, #24]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f022 0201 	bic.w	r2, r2, #1
 8007d44:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	e006      	b.n	8007d5e <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d54:	f043 0204 	orr.w	r2, r3, #4
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
  }
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b086      	sub	sp, #24
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d12c      	bne.n	8007ddc <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007d8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d007      	beq.n	8007da2 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e023      	b.n	8007dea <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007daa:	0c1b      	lsrs	r3, r3, #16
 8007dac:	f003 0303 	and.w	r3, r3, #3
 8007db0:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	68b9      	ldr	r1, [r7, #8]
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f000 f94b 	bl	8008054 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2101      	movs	r1, #1
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8007dca:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007dce:	2201      	movs	r2, #1
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	409a      	lsls	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	e006      	b.n	8007dea <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de0:	f043 0208 	orr.w	r2, r3, #8
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
  }
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
	...

08007df4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b08b      	sub	sp, #44	; 0x2c
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007e08:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8007e0a:	7efb      	ldrb	r3, [r7, #27]
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	f040 80bc 	bne.w	8007f8a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	2b40      	cmp	r3, #64	; 0x40
 8007e16:	d121      	bne.n	8007e5c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e20:	f003 030f 	and.w	r3, r3, #15
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d107      	bne.n	8007e38 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e0af      	b.n	8007f98 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e40:	0a1b      	lsrs	r3, r3, #8
 8007e42:	f003 0303 	and.w	r3, r3, #3
 8007e46:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007e4c:	69fa      	ldr	r2, [r7, #28]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	00db      	lsls	r3, r3, #3
 8007e52:	4413      	add	r3, r2
 8007e54:	00db      	lsls	r3, r3, #3
 8007e56:	440b      	add	r3, r1
 8007e58:	627b      	str	r3, [r7, #36]	; 0x24
 8007e5a:	e020      	b.n	8007e9e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e64:	f003 030f 	and.w	r3, r3, #15
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d107      	bne.n	8007e7c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e08d      	b.n	8007f98 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e84:	0a1b      	lsrs	r3, r3, #8
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007e90:	69fa      	ldr	r2, [r7, #28]
 8007e92:	4613      	mov	r3, r2
 8007e94:	00db      	lsls	r3, r3, #3
 8007e96:	4413      	add	r3, r2
 8007e98:	00db      	lsls	r3, r3, #3
 8007e9a:	440b      	add	r3, r1
 8007e9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d107      	bne.n	8007ec2 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	0c9b      	lsrs	r3, r3, #18
 8007eb8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	601a      	str	r2, [r3, #0]
 8007ec0:	e005      	b.n	8007ece <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	3304      	adds	r3, #4
 8007eea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	0e1b      	lsrs	r3, r3, #24
 8007f20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	0fda      	lsrs	r2, r3, #31
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f34:	3304      	adds	r3, #4
 8007f36:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	623b      	str	r3, [r7, #32]
 8007f40:	e00a      	b.n	8007f58 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	441a      	add	r2, r3
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	440b      	add	r3, r1
 8007f4e:	7812      	ldrb	r2, [r2, #0]
 8007f50:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007f52:	6a3b      	ldr	r3, [r7, #32]
 8007f54:	3301      	adds	r3, #1
 8007f56:	623b      	str	r3, [r7, #32]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	0c1b      	lsrs	r3, r3, #16
 8007f5e:	4a11      	ldr	r2, [pc, #68]	; (8007fa4 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8007f60:	5cd3      	ldrb	r3, [r2, r3]
 8007f62:	461a      	mov	r2, r3
 8007f64:	6a3b      	ldr	r3, [r7, #32]
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d3eb      	bcc.n	8007f42 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	2b40      	cmp	r3, #64	; 0x40
 8007f6e:	d105      	bne.n	8007f7c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	69fa      	ldr	r2, [r7, #28]
 8007f76:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007f7a:	e004      	b.n	8007f86 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	69fa      	ldr	r2, [r7, #28]
 8007f82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	e006      	b.n	8007f98 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f8e:	f043 0208 	orr.w	r2, r3, #8
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
  }
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	372c      	adds	r7, #44	; 0x2c
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	080133c4 	.word	0x080133c4

08007fa8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007fb0:	4b27      	ldr	r3, [pc, #156]	; (8008050 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8007fb2:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fc2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fca:	041a      	lsls	r2, r3, #16
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fe8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff0:	061a      	lsls	r2, r3, #24
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	e005      	b.n	8008036 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	3304      	adds	r3, #4
 8008034:	60fb      	str	r3, [r7, #12]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	429a      	cmp	r2, r3
 8008040:	d3f3      	bcc.n	800802a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8008042:	bf00      	nop
 8008044:	bf00      	nop
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	4000a400 	.word	0x4000a400

08008054 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8008054:	b480      	push	{r7}
 8008056:	b089      	sub	sp, #36	; 0x24
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
 8008060:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10a      	bne.n	8008080 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8008072:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800807a:	4313      	orrs	r3, r2
 800807c:	61fb      	str	r3, [r7, #28]
 800807e:	e00a      	b.n	8008096 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008088:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800808e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008090:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008094:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80080a0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80080a6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80080ac:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80080b2:	4313      	orrs	r3, r2
 80080b4:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	4613      	mov	r3, r2
 80080be:	00db      	lsls	r3, r3, #3
 80080c0:	4413      	add	r3, r2
 80080c2:	00db      	lsls	r3, r3, #3
 80080c4:	440b      	add	r3, r1
 80080c6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	69fa      	ldr	r2, [r7, #28]
 80080cc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	3304      	adds	r3, #4
 80080d2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	3304      	adds	r3, #4
 80080de:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80080e0:	2300      	movs	r3, #0
 80080e2:	617b      	str	r3, [r7, #20]
 80080e4:	e020      	b.n	8008128 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	3303      	adds	r3, #3
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	4413      	add	r3, r2
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	3302      	adds	r3, #2
 80080f6:	6879      	ldr	r1, [r7, #4]
 80080f8:	440b      	add	r3, r1
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80080fe:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	3301      	adds	r3, #1
 8008104:	6879      	ldr	r1, [r7, #4]
 8008106:	440b      	add	r3, r1
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800810c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	440a      	add	r2, r1
 8008114:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008116:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	3304      	adds	r3, #4
 8008120:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	3304      	adds	r3, #4
 8008126:	617b      	str	r3, [r7, #20]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	0c1b      	lsrs	r3, r3, #16
 800812e:	4a06      	ldr	r2, [pc, #24]	; (8008148 <FDCAN_CopyMessageToRAM+0xf4>)
 8008130:	5cd3      	ldrb	r3, [r2, r3]
 8008132:	461a      	mov	r2, r3
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	4293      	cmp	r3, r2
 8008138:	d3d5      	bcc.n	80080e6 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800813a:	bf00      	nop
 800813c:	bf00      	nop
 800813e:	3724      	adds	r7, #36	; 0x24
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	080133c4 	.word	0x080133c4

0800814c <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800815a:	2300      	movs	r3, #0
 800815c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800815e:	4b24      	ldr	r3, [pc, #144]	; (80081f0 <HAL_FLASH_Program+0xa4>)
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d101      	bne.n	800816a <HAL_FLASH_Program+0x1e>
 8008166:	2302      	movs	r3, #2
 8008168:	e03e      	b.n	80081e8 <HAL_FLASH_Program+0x9c>
 800816a:	4b21      	ldr	r3, [pc, #132]	; (80081f0 <HAL_FLASH_Program+0xa4>)
 800816c:	2201      	movs	r2, #1
 800816e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008170:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008174:	f000 f888 	bl	8008288 <FLASH_WaitForLastOperation>
 8008178:	4603      	mov	r3, r0
 800817a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800817c:	7dfb      	ldrb	r3, [r7, #23]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d12e      	bne.n	80081e0 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008182:	4b1b      	ldr	r3, [pc, #108]	; (80081f0 <HAL_FLASH_Program+0xa4>)
 8008184:	2200      	movs	r2, #0
 8008186:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d107      	bne.n	800819e <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800818e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008192:	68b8      	ldr	r0, [r7, #8]
 8008194:	f000 f8cc 	bl	8008330 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8008198:	2301      	movs	r3, #1
 800819a:	613b      	str	r3, [r7, #16]
 800819c:	e010      	b.n	80081c0 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d002      	beq.n	80081aa <HAL_FLASH_Program+0x5e>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d10a      	bne.n	80081c0 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	4619      	mov	r1, r3
 80081ae:	68b8      	ldr	r0, [r7, #8]
 80081b0:	f000 f8e4 	bl	800837c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d102      	bne.n	80081c0 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 80081ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80081be:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80081c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80081c4:	f000 f860 	bl	8008288 <FLASH_WaitForLastOperation>
 80081c8:	4603      	mov	r3, r0
 80081ca:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d006      	beq.n	80081e0 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80081d2:	4b08      	ldr	r3, [pc, #32]	; (80081f4 <HAL_FLASH_Program+0xa8>)
 80081d4:	695a      	ldr	r2, [r3, #20]
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	43db      	mvns	r3, r3
 80081da:	4906      	ldr	r1, [pc, #24]	; (80081f4 <HAL_FLASH_Program+0xa8>)
 80081dc:	4013      	ands	r3, r2
 80081de:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80081e0:	4b03      	ldr	r3, [pc, #12]	; (80081f0 <HAL_FLASH_Program+0xa4>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3718      	adds	r7, #24
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	2000000c 	.word	0x2000000c
 80081f4:	40022000 	.word	0x40022000

080081f8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8008202:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <HAL_FLASH_Unlock+0x38>)
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	2b00      	cmp	r3, #0
 8008208:	da0b      	bge.n	8008222 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800820a:	4b09      	ldr	r3, [pc, #36]	; (8008230 <HAL_FLASH_Unlock+0x38>)
 800820c:	4a09      	ldr	r2, [pc, #36]	; (8008234 <HAL_FLASH_Unlock+0x3c>)
 800820e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008210:	4b07      	ldr	r3, [pc, #28]	; (8008230 <HAL_FLASH_Unlock+0x38>)
 8008212:	4a09      	ldr	r2, [pc, #36]	; (8008238 <HAL_FLASH_Unlock+0x40>)
 8008214:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8008216:	4b06      	ldr	r3, [pc, #24]	; (8008230 <HAL_FLASH_Unlock+0x38>)
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	2b00      	cmp	r3, #0
 800821c:	da01      	bge.n	8008222 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8008222:	79fb      	ldrb	r3, [r7, #7]
}
 8008224:	4618      	mov	r0, r3
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	40022000 	.word	0x40022000
 8008234:	45670123 	.word	0x45670123
 8008238:	cdef89ab 	.word	0xcdef89ab

0800823c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8008246:	4b09      	ldr	r3, [pc, #36]	; (800826c <HAL_FLASH_Lock+0x30>)
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	4a08      	ldr	r2, [pc, #32]	; (800826c <HAL_FLASH_Lock+0x30>)
 800824c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008250:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8008252:	4b06      	ldr	r3, [pc, #24]	; (800826c <HAL_FLASH_Lock+0x30>)
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	2b00      	cmp	r3, #0
 8008258:	da01      	bge.n	800825e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800825e:	79fb      	ldrb	r3, [r7, #7]
}
 8008260:	4618      	mov	r0, r3
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	40022000 	.word	0x40022000

08008270 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 8008270:	b480      	push	{r7}
 8008272:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8008274:	4b03      	ldr	r3, [pc, #12]	; (8008284 <HAL_FLASH_GetError+0x14>)
 8008276:	685b      	ldr	r3, [r3, #4]
}
 8008278:	4618      	mov	r0, r3
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	2000000c 	.word	0x2000000c

08008288 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8008290:	f7fd fcc4 	bl	8005c1c <HAL_GetTick>
 8008294:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8008296:	e009      	b.n	80082ac <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8008298:	f7fd fcc0 	bl	8005c1c <HAL_GetTick>
 800829c:	4602      	mov	r2, r0
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d201      	bcs.n	80082ac <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80082a8:	2303      	movs	r3, #3
 80082aa:	e038      	b.n	800831e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80082ac:	4b1e      	ldr	r3, [pc, #120]	; (8008328 <FLASH_WaitForLastOperation+0xa0>)
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082b8:	d0ee      	beq.n	8008298 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80082ba:	4b1b      	ldr	r3, [pc, #108]	; (8008328 <FLASH_WaitForLastOperation+0xa0>)
 80082bc:	691a      	ldr	r2, [r3, #16]
 80082be:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80082c2:	4013      	ands	r3, r2
 80082c4:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d01e      	beq.n	800830a <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80082cc:	4b17      	ldr	r3, [pc, #92]	; (800832c <FLASH_WaitForLastOperation+0xa4>)
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	4a15      	ldr	r2, [pc, #84]	; (800832c <FLASH_WaitForLastOperation+0xa4>)
 80082d6:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d007      	beq.n	80082f2 <FLASH_WaitForLastOperation+0x6a>
 80082e2:	4b11      	ldr	r3, [pc, #68]	; (8008328 <FLASH_WaitForLastOperation+0xa0>)
 80082e4:	699a      	ldr	r2, [r3, #24]
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80082ec:	490e      	ldr	r1, [pc, #56]	; (8008328 <FLASH_WaitForLastOperation+0xa0>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	618b      	str	r3, [r1, #24]
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d004      	beq.n	8008306 <FLASH_WaitForLastOperation+0x7e>
 80082fc:	4a0a      	ldr	r2, [pc, #40]	; (8008328 <FLASH_WaitForLastOperation+0xa0>)
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008304:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e009      	b.n	800831e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800830a:	4b07      	ldr	r3, [pc, #28]	; (8008328 <FLASH_WaitForLastOperation+0xa0>)
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	2b01      	cmp	r3, #1
 8008314:	d102      	bne.n	800831c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008316:	4b04      	ldr	r3, [pc, #16]	; (8008328 <FLASH_WaitForLastOperation+0xa0>)
 8008318:	2201      	movs	r2, #1
 800831a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	40022000 	.word	0x40022000
 800832c:	2000000c 	.word	0x2000000c

08008330 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800833c:	4b0e      	ldr	r3, [pc, #56]	; (8008378 <FLASH_Program_DoubleWord+0x48>)
 800833e:	695b      	ldr	r3, [r3, #20]
 8008340:	4a0d      	ldr	r2, [pc, #52]	; (8008378 <FLASH_Program_DoubleWord+0x48>)
 8008342:	f043 0301 	orr.w	r3, r3, #1
 8008346:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800834e:	f3bf 8f6f 	isb	sy
}
 8008352:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8008354:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008358:	f04f 0200 	mov.w	r2, #0
 800835c:	f04f 0300 	mov.w	r3, #0
 8008360:	000a      	movs	r2, r1
 8008362:	2300      	movs	r3, #0
 8008364:	68f9      	ldr	r1, [r7, #12]
 8008366:	3104      	adds	r1, #4
 8008368:	4613      	mov	r3, r2
 800836a:	600b      	str	r3, [r1, #0]
}
 800836c:	bf00      	nop
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr
 8008378:	40022000 	.word	0x40022000

0800837c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800837c:	b480      	push	{r7}
 800837e:	b089      	sub	sp, #36	; 0x24
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8008386:	2340      	movs	r3, #64	; 0x40
 8008388:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8008392:	4b14      	ldr	r3, [pc, #80]	; (80083e4 <FLASH_Program_Fast+0x68>)
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	4a13      	ldr	r2, [pc, #76]	; (80083e4 <FLASH_Program_Fast+0x68>)
 8008398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800839c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800839e:	f3ef 8310 	mrs	r3, PRIMASK
 80083a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80083a4:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80083a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80083a8:	b672      	cpsid	i
}
 80083aa:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	3304      	adds	r3, #4
 80083b8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	3304      	adds	r3, #4
 80083be:	617b      	str	r3, [r7, #20]
    row_index--;
 80083c0:	7ffb      	ldrb	r3, [r7, #31]
 80083c2:	3b01      	subs	r3, #1
 80083c4:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80083c6:	7ffb      	ldrb	r3, [r7, #31]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1ef      	bne.n	80083ac <FLASH_Program_Fast+0x30>
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	f383 8810 	msr	PRIMASK, r3
}
 80083d6:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80083d8:	bf00      	nop
 80083da:	3724      	adds	r7, #36	; 0x24
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	40022000 	.word	0x40022000

080083e8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80083f2:	4b4a      	ldr	r3, [pc, #296]	; (800851c <HAL_FLASHEx_Erase+0x134>)
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d101      	bne.n	80083fe <HAL_FLASHEx_Erase+0x16>
 80083fa:	2302      	movs	r3, #2
 80083fc:	e089      	b.n	8008512 <HAL_FLASHEx_Erase+0x12a>
 80083fe:	4b47      	ldr	r3, [pc, #284]	; (800851c <HAL_FLASHEx_Erase+0x134>)
 8008400:	2201      	movs	r2, #1
 8008402:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008404:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008408:	f7ff ff3e 	bl	8008288 <FLASH_WaitForLastOperation>
 800840c:	4603      	mov	r3, r0
 800840e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008410:	7bfb      	ldrb	r3, [r7, #15]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d179      	bne.n	800850a <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008416:	4b41      	ldr	r3, [pc, #260]	; (800851c <HAL_FLASHEx_Erase+0x134>)
 8008418:	2200      	movs	r2, #0
 800841a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800841c:	4b40      	ldr	r3, [pc, #256]	; (8008520 <HAL_FLASHEx_Erase+0x138>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008424:	2b00      	cmp	r3, #0
 8008426:	d019      	beq.n	800845c <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008428:	4b3d      	ldr	r3, [pc, #244]	; (8008520 <HAL_FLASHEx_Erase+0x138>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a3c      	ldr	r2, [pc, #240]	; (8008520 <HAL_FLASHEx_Erase+0x138>)
 800842e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008432:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8008434:	4b3a      	ldr	r3, [pc, #232]	; (8008520 <HAL_FLASHEx_Erase+0x138>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800843c:	2b00      	cmp	r3, #0
 800843e:	d009      	beq.n	8008454 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8008440:	4b37      	ldr	r3, [pc, #220]	; (8008520 <HAL_FLASHEx_Erase+0x138>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a36      	ldr	r2, [pc, #216]	; (8008520 <HAL_FLASHEx_Erase+0x138>)
 8008446:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800844a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800844c:	4b33      	ldr	r3, [pc, #204]	; (800851c <HAL_FLASHEx_Erase+0x134>)
 800844e:	2203      	movs	r2, #3
 8008450:	771a      	strb	r2, [r3, #28]
 8008452:	e016      	b.n	8008482 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8008454:	4b31      	ldr	r3, [pc, #196]	; (800851c <HAL_FLASHEx_Erase+0x134>)
 8008456:	2201      	movs	r2, #1
 8008458:	771a      	strb	r2, [r3, #28]
 800845a:	e012      	b.n	8008482 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800845c:	4b30      	ldr	r3, [pc, #192]	; (8008520 <HAL_FLASHEx_Erase+0x138>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008464:	2b00      	cmp	r3, #0
 8008466:	d009      	beq.n	800847c <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8008468:	4b2d      	ldr	r3, [pc, #180]	; (8008520 <HAL_FLASHEx_Erase+0x138>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a2c      	ldr	r2, [pc, #176]	; (8008520 <HAL_FLASHEx_Erase+0x138>)
 800846e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008472:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8008474:	4b29      	ldr	r3, [pc, #164]	; (800851c <HAL_FLASHEx_Erase+0x134>)
 8008476:	2202      	movs	r2, #2
 8008478:	771a      	strb	r2, [r3, #28]
 800847a:	e002      	b.n	8008482 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800847c:	4b27      	ldr	r3, [pc, #156]	; (800851c <HAL_FLASHEx_Erase+0x134>)
 800847e:	2200      	movs	r2, #0
 8008480:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d111      	bne.n	80084ae <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	4618      	mov	r0, r3
 8008490:	f000 f848 	bl	8008524 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008494:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008498:	f7ff fef6 	bl	8008288 <FLASH_WaitForLastOperation>
 800849c:	4603      	mov	r3, r0
 800849e:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80084a0:	4b1f      	ldr	r3, [pc, #124]	; (8008520 <HAL_FLASHEx_Erase+0x138>)
 80084a2:	695b      	ldr	r3, [r3, #20]
 80084a4:	4a1e      	ldr	r2, [pc, #120]	; (8008520 <HAL_FLASHEx_Erase+0x138>)
 80084a6:	f023 0304 	bic.w	r3, r3, #4
 80084aa:	6153      	str	r3, [r2, #20]
 80084ac:	e02b      	b.n	8008506 <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	f04f 32ff 	mov.w	r2, #4294967295
 80084b4:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	60bb      	str	r3, [r7, #8]
 80084bc:	e01b      	b.n	80084f6 <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	4619      	mov	r1, r3
 80084c4:	68b8      	ldr	r0, [r7, #8]
 80084c6:	f000 f84b 	bl	8008560 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80084ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80084ce:	f7ff fedb 	bl	8008288 <FLASH_WaitForLastOperation>
 80084d2:	4603      	mov	r3, r0
 80084d4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80084d6:	4b12      	ldr	r3, [pc, #72]	; (8008520 <HAL_FLASHEx_Erase+0x138>)
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	4a11      	ldr	r2, [pc, #68]	; (8008520 <HAL_FLASHEx_Erase+0x138>)
 80084dc:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80084e0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d003      	beq.n	80084f0 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	601a      	str	r2, [r3, #0]
          break;
 80084ee:	e00a      	b.n	8008506 <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	3301      	adds	r3, #1
 80084f4:	60bb      	str	r3, [r7, #8]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	689a      	ldr	r2, [r3, #8]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	4413      	add	r3, r2
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	429a      	cmp	r2, r3
 8008504:	d3db      	bcc.n	80084be <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8008506:	f000 f84f 	bl	80085a8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800850a:	4b04      	ldr	r3, [pc, #16]	; (800851c <HAL_FLASHEx_Erase+0x134>)
 800850c:	2200      	movs	r2, #0
 800850e:	701a      	strb	r2, [r3, #0]

  return status;
 8008510:	7bfb      	ldrb	r3, [r7, #15]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	2000000c 	.word	0x2000000c
 8008520:	40022000 	.word	0x40022000

08008524 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	2b00      	cmp	r3, #0
 8008534:	d005      	beq.n	8008542 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8008536:	4b09      	ldr	r3, [pc, #36]	; (800855c <FLASH_MassErase+0x38>)
 8008538:	695b      	ldr	r3, [r3, #20]
 800853a:	4a08      	ldr	r2, [pc, #32]	; (800855c <FLASH_MassErase+0x38>)
 800853c:	f043 0304 	orr.w	r3, r3, #4
 8008540:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008542:	4b06      	ldr	r3, [pc, #24]	; (800855c <FLASH_MassErase+0x38>)
 8008544:	695b      	ldr	r3, [r3, #20]
 8008546:	4a05      	ldr	r2, [pc, #20]	; (800855c <FLASH_MassErase+0x38>)
 8008548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800854c:	6153      	str	r3, [r2, #20]
}
 800854e:	bf00      	nop
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	40022000 	.word	0x40022000

08008560 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800856a:	4b0e      	ldr	r3, [pc, #56]	; (80085a4 <FLASH_PageErase+0x44>)
 800856c:	695b      	ldr	r3, [r3, #20]
 800856e:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	00db      	lsls	r3, r3, #3
 8008576:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800857a:	490a      	ldr	r1, [pc, #40]	; (80085a4 <FLASH_PageErase+0x44>)
 800857c:	4313      	orrs	r3, r2
 800857e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8008580:	4b08      	ldr	r3, [pc, #32]	; (80085a4 <FLASH_PageErase+0x44>)
 8008582:	695b      	ldr	r3, [r3, #20]
 8008584:	4a07      	ldr	r2, [pc, #28]	; (80085a4 <FLASH_PageErase+0x44>)
 8008586:	f043 0302 	orr.w	r3, r3, #2
 800858a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800858c:	4b05      	ldr	r3, [pc, #20]	; (80085a4 <FLASH_PageErase+0x44>)
 800858e:	695b      	ldr	r3, [r3, #20]
 8008590:	4a04      	ldr	r2, [pc, #16]	; (80085a4 <FLASH_PageErase+0x44>)
 8008592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008596:	6153      	str	r3, [r2, #20]
}
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr
 80085a4:	40022000 	.word	0x40022000

080085a8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80085ae:	4b1e      	ldr	r3, [pc, #120]	; (8008628 <FLASH_FlushCaches+0x80>)
 80085b0:	7f1b      	ldrb	r3, [r3, #28]
 80085b2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80085b4:	79fb      	ldrb	r3, [r7, #7]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d002      	beq.n	80085c0 <FLASH_FlushCaches+0x18>
 80085ba:	79fb      	ldrb	r3, [r7, #7]
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d111      	bne.n	80085e4 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80085c0:	4b1a      	ldr	r3, [pc, #104]	; (800862c <FLASH_FlushCaches+0x84>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a19      	ldr	r2, [pc, #100]	; (800862c <FLASH_FlushCaches+0x84>)
 80085c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80085ca:	6013      	str	r3, [r2, #0]
 80085cc:	4b17      	ldr	r3, [pc, #92]	; (800862c <FLASH_FlushCaches+0x84>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a16      	ldr	r2, [pc, #88]	; (800862c <FLASH_FlushCaches+0x84>)
 80085d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085d6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80085d8:	4b14      	ldr	r3, [pc, #80]	; (800862c <FLASH_FlushCaches+0x84>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a13      	ldr	r2, [pc, #76]	; (800862c <FLASH_FlushCaches+0x84>)
 80085de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80085e2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80085e4:	79fb      	ldrb	r3, [r7, #7]
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d002      	beq.n	80085f0 <FLASH_FlushCaches+0x48>
 80085ea:	79fb      	ldrb	r3, [r7, #7]
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d111      	bne.n	8008614 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80085f0:	4b0e      	ldr	r3, [pc, #56]	; (800862c <FLASH_FlushCaches+0x84>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a0d      	ldr	r2, [pc, #52]	; (800862c <FLASH_FlushCaches+0x84>)
 80085f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80085fa:	6013      	str	r3, [r2, #0]
 80085fc:	4b0b      	ldr	r3, [pc, #44]	; (800862c <FLASH_FlushCaches+0x84>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a0a      	ldr	r2, [pc, #40]	; (800862c <FLASH_FlushCaches+0x84>)
 8008602:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008606:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008608:	4b08      	ldr	r3, [pc, #32]	; (800862c <FLASH_FlushCaches+0x84>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a07      	ldr	r2, [pc, #28]	; (800862c <FLASH_FlushCaches+0x84>)
 800860e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008612:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008614:	4b04      	ldr	r3, [pc, #16]	; (8008628 <FLASH_FlushCaches+0x80>)
 8008616:	2200      	movs	r2, #0
 8008618:	771a      	strb	r2, [r3, #28]
}
 800861a:	bf00      	nop
 800861c:	370c      	adds	r7, #12
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	2000000c 	.word	0x2000000c
 800862c:	40022000 	.word	0x40022000

08008630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008630:	b480      	push	{r7}
 8008632:	b087      	sub	sp, #28
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800863a:	2300      	movs	r3, #0
 800863c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800863e:	e15a      	b.n	80088f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	2101      	movs	r1, #1
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	fa01 f303 	lsl.w	r3, r1, r3
 800864c:	4013      	ands	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2b00      	cmp	r3, #0
 8008654:	f000 814c 	beq.w	80088f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	2b01      	cmp	r3, #1
 800865e:	d00b      	beq.n	8008678 <HAL_GPIO_Init+0x48>
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	2b02      	cmp	r3, #2
 8008666:	d007      	beq.n	8008678 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800866c:	2b11      	cmp	r3, #17
 800866e:	d003      	beq.n	8008678 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	2b12      	cmp	r3, #18
 8008676:	d130      	bne.n	80086da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	005b      	lsls	r3, r3, #1
 8008682:	2203      	movs	r2, #3
 8008684:	fa02 f303 	lsl.w	r3, r2, r3
 8008688:	43db      	mvns	r3, r3
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	4013      	ands	r3, r2
 800868e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	68da      	ldr	r2, [r3, #12]
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	005b      	lsls	r3, r3, #1
 8008698:	fa02 f303 	lsl.w	r3, r2, r3
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	4313      	orrs	r3, r2
 80086a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80086ae:	2201      	movs	r2, #1
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	fa02 f303 	lsl.w	r3, r2, r3
 80086b6:	43db      	mvns	r3, r3
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	4013      	ands	r3, r2
 80086bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	091b      	lsrs	r3, r3, #4
 80086c4:	f003 0201 	and.w	r2, r3, #1
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	fa02 f303 	lsl.w	r3, r2, r3
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	005b      	lsls	r3, r3, #1
 80086e4:	2203      	movs	r2, #3
 80086e6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ea:	43db      	mvns	r3, r3
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	4013      	ands	r3, r2
 80086f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	689a      	ldr	r2, [r3, #8]
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	005b      	lsls	r3, r3, #1
 80086fa:	fa02 f303 	lsl.w	r3, r2, r3
 80086fe:	693a      	ldr	r2, [r7, #16]
 8008700:	4313      	orrs	r3, r2
 8008702:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	2b02      	cmp	r3, #2
 8008710:	d003      	beq.n	800871a <HAL_GPIO_Init+0xea>
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	2b12      	cmp	r3, #18
 8008718:	d123      	bne.n	8008762 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	08da      	lsrs	r2, r3, #3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	3208      	adds	r2, #8
 8008722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008726:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	f003 0307 	and.w	r3, r3, #7
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	220f      	movs	r2, #15
 8008732:	fa02 f303 	lsl.w	r3, r2, r3
 8008736:	43db      	mvns	r3, r3
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	4013      	ands	r3, r2
 800873c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	691a      	ldr	r2, [r3, #16]
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f003 0307 	and.w	r3, r3, #7
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	fa02 f303 	lsl.w	r3, r2, r3
 800874e:	693a      	ldr	r2, [r7, #16]
 8008750:	4313      	orrs	r3, r2
 8008752:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	08da      	lsrs	r2, r3, #3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	3208      	adds	r2, #8
 800875c:	6939      	ldr	r1, [r7, #16]
 800875e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	005b      	lsls	r3, r3, #1
 800876c:	2203      	movs	r2, #3
 800876e:	fa02 f303 	lsl.w	r3, r2, r3
 8008772:	43db      	mvns	r3, r3
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	4013      	ands	r3, r2
 8008778:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f003 0203 	and.w	r2, r3, #3
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	005b      	lsls	r3, r3, #1
 8008786:	fa02 f303 	lsl.w	r3, r2, r3
 800878a:	693a      	ldr	r2, [r7, #16]
 800878c:	4313      	orrs	r3, r2
 800878e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	693a      	ldr	r2, [r7, #16]
 8008794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f000 80a6 	beq.w	80088f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087a4:	4b5b      	ldr	r3, [pc, #364]	; (8008914 <HAL_GPIO_Init+0x2e4>)
 80087a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087a8:	4a5a      	ldr	r2, [pc, #360]	; (8008914 <HAL_GPIO_Init+0x2e4>)
 80087aa:	f043 0301 	orr.w	r3, r3, #1
 80087ae:	6613      	str	r3, [r2, #96]	; 0x60
 80087b0:	4b58      	ldr	r3, [pc, #352]	; (8008914 <HAL_GPIO_Init+0x2e4>)
 80087b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087b4:	f003 0301 	and.w	r3, r3, #1
 80087b8:	60bb      	str	r3, [r7, #8]
 80087ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80087bc:	4a56      	ldr	r2, [pc, #344]	; (8008918 <HAL_GPIO_Init+0x2e8>)
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	089b      	lsrs	r3, r3, #2
 80087c2:	3302      	adds	r3, #2
 80087c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	f003 0303 	and.w	r3, r3, #3
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	220f      	movs	r2, #15
 80087d4:	fa02 f303 	lsl.w	r3, r2, r3
 80087d8:	43db      	mvns	r3, r3
 80087da:	693a      	ldr	r2, [r7, #16]
 80087dc:	4013      	ands	r3, r2
 80087de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80087e6:	d01f      	beq.n	8008828 <HAL_GPIO_Init+0x1f8>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a4c      	ldr	r2, [pc, #304]	; (800891c <HAL_GPIO_Init+0x2ec>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d019      	beq.n	8008824 <HAL_GPIO_Init+0x1f4>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a4b      	ldr	r2, [pc, #300]	; (8008920 <HAL_GPIO_Init+0x2f0>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d013      	beq.n	8008820 <HAL_GPIO_Init+0x1f0>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a4a      	ldr	r2, [pc, #296]	; (8008924 <HAL_GPIO_Init+0x2f4>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d00d      	beq.n	800881c <HAL_GPIO_Init+0x1ec>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a49      	ldr	r2, [pc, #292]	; (8008928 <HAL_GPIO_Init+0x2f8>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d007      	beq.n	8008818 <HAL_GPIO_Init+0x1e8>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a48      	ldr	r2, [pc, #288]	; (800892c <HAL_GPIO_Init+0x2fc>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d101      	bne.n	8008814 <HAL_GPIO_Init+0x1e4>
 8008810:	2305      	movs	r3, #5
 8008812:	e00a      	b.n	800882a <HAL_GPIO_Init+0x1fa>
 8008814:	2306      	movs	r3, #6
 8008816:	e008      	b.n	800882a <HAL_GPIO_Init+0x1fa>
 8008818:	2304      	movs	r3, #4
 800881a:	e006      	b.n	800882a <HAL_GPIO_Init+0x1fa>
 800881c:	2303      	movs	r3, #3
 800881e:	e004      	b.n	800882a <HAL_GPIO_Init+0x1fa>
 8008820:	2302      	movs	r3, #2
 8008822:	e002      	b.n	800882a <HAL_GPIO_Init+0x1fa>
 8008824:	2301      	movs	r3, #1
 8008826:	e000      	b.n	800882a <HAL_GPIO_Init+0x1fa>
 8008828:	2300      	movs	r3, #0
 800882a:	697a      	ldr	r2, [r7, #20]
 800882c:	f002 0203 	and.w	r2, r2, #3
 8008830:	0092      	lsls	r2, r2, #2
 8008832:	4093      	lsls	r3, r2
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	4313      	orrs	r3, r2
 8008838:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800883a:	4937      	ldr	r1, [pc, #220]	; (8008918 <HAL_GPIO_Init+0x2e8>)
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	089b      	lsrs	r3, r3, #2
 8008840:	3302      	adds	r3, #2
 8008842:	693a      	ldr	r2, [r7, #16]
 8008844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008848:	4b39      	ldr	r3, [pc, #228]	; (8008930 <HAL_GPIO_Init+0x300>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	43db      	mvns	r3, r3
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	4013      	ands	r3, r2
 8008856:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d003      	beq.n	800886c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	4313      	orrs	r3, r2
 800886a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800886c:	4a30      	ldr	r2, [pc, #192]	; (8008930 <HAL_GPIO_Init+0x300>)
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8008872:	4b2f      	ldr	r3, [pc, #188]	; (8008930 <HAL_GPIO_Init+0x300>)
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	43db      	mvns	r3, r3
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	4013      	ands	r3, r2
 8008880:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800888a:	2b00      	cmp	r3, #0
 800888c:	d003      	beq.n	8008896 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800888e:	693a      	ldr	r2, [r7, #16]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4313      	orrs	r3, r2
 8008894:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008896:	4a26      	ldr	r2, [pc, #152]	; (8008930 <HAL_GPIO_Init+0x300>)
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800889c:	4b24      	ldr	r3, [pc, #144]	; (8008930 <HAL_GPIO_Init+0x300>)
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	43db      	mvns	r3, r3
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	4013      	ands	r3, r2
 80088aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d003      	beq.n	80088c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	4313      	orrs	r3, r2
 80088be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80088c0:	4a1b      	ldr	r2, [pc, #108]	; (8008930 <HAL_GPIO_Init+0x300>)
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80088c6:	4b1a      	ldr	r3, [pc, #104]	; (8008930 <HAL_GPIO_Init+0x300>)
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	43db      	mvns	r3, r3
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	4013      	ands	r3, r2
 80088d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d003      	beq.n	80088ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80088ea:	4a11      	ldr	r2, [pc, #68]	; (8008930 <HAL_GPIO_Init+0x300>)
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	3301      	adds	r3, #1
 80088f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008900:	2b00      	cmp	r3, #0
 8008902:	f47f ae9d 	bne.w	8008640 <HAL_GPIO_Init+0x10>
  }
}
 8008906:	bf00      	nop
 8008908:	bf00      	nop
 800890a:	371c      	adds	r7, #28
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr
 8008914:	40021000 	.word	0x40021000
 8008918:	40010000 	.word	0x40010000
 800891c:	48000400 	.word	0x48000400
 8008920:	48000800 	.word	0x48000800
 8008924:	48000c00 	.word	0x48000c00
 8008928:	48001000 	.word	0x48001000
 800892c:	48001400 	.word	0x48001400
 8008930:	40010400 	.word	0x40010400

08008934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	460b      	mov	r3, r1
 800893e:	807b      	strh	r3, [r7, #2]
 8008940:	4613      	mov	r3, r2
 8008942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008944:	787b      	ldrb	r3, [r7, #1]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d003      	beq.n	8008952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800894a:	887a      	ldrh	r2, [r7, #2]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008950:	e002      	b.n	8008958 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008952:	887a      	ldrh	r2, [r7, #2]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e081      	b.n	8008a7a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d106      	bne.n	8008990 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7fb fb6a 	bl	8004064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2224      	movs	r2, #36	; 0x24
 8008994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f022 0201 	bic.w	r2, r2, #1
 80089a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80089b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	689a      	ldr	r2, [r3, #8]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d107      	bne.n	80089de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	689a      	ldr	r2, [r3, #8]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089da:	609a      	str	r2, [r3, #8]
 80089dc:	e006      	b.n	80089ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	689a      	ldr	r2, [r3, #8]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80089ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d104      	bne.n	80089fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	6812      	ldr	r2, [r2, #0]
 8008a08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68da      	ldr	r2, [r3, #12]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	691a      	ldr	r2, [r3, #16]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	ea42 0103 	orr.w	r1, r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	021a      	lsls	r2, r3, #8
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	69d9      	ldr	r1, [r3, #28]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a1a      	ldr	r2, [r3, #32]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	430a      	orrs	r2, r1
 8008a4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f042 0201 	orr.w	r2, r2, #1
 8008a5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2220      	movs	r2, #32
 8008a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
	...

08008a84 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af02      	add	r7, sp, #8
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	607a      	str	r2, [r7, #4]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	460b      	mov	r3, r1
 8008a92:	817b      	strh	r3, [r7, #10]
 8008a94:	4613      	mov	r3, r2
 8008a96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	2b20      	cmp	r3, #32
 8008aa2:	f040 80db 	bne.w	8008c5c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d101      	bne.n	8008ab4 <HAL_I2C_Master_Receive+0x30>
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	e0d4      	b.n	8008c5e <HAL_I2C_Master_Receive+0x1da>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008abc:	f7fd f8ae 	bl	8005c1c <HAL_GetTick>
 8008ac0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	2319      	movs	r3, #25
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f000 fbc8 	bl	8009264 <I2C_WaitOnFlagUntilTimeout>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d001      	beq.n	8008ade <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e0bf      	b.n	8008c5e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2222      	movs	r2, #34	; 0x22
 8008ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2210      	movs	r2, #16
 8008aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2200      	movs	r2, #0
 8008af2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	893a      	ldrh	r2, [r7, #8]
 8008afe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2200      	movs	r2, #0
 8008b04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	2bff      	cmp	r3, #255	; 0xff
 8008b0e:	d90e      	bls.n	8008b2e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	22ff      	movs	r2, #255	; 0xff
 8008b14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	8979      	ldrh	r1, [r7, #10]
 8008b1e:	4b52      	ldr	r3, [pc, #328]	; (8008c68 <HAL_I2C_Master_Receive+0x1e4>)
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f000 fd2a 	bl	8009580 <I2C_TransferConfig>
 8008b2c:	e06d      	b.n	8008c0a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b3c:	b2da      	uxtb	r2, r3
 8008b3e:	8979      	ldrh	r1, [r7, #10]
 8008b40:	4b49      	ldr	r3, [pc, #292]	; (8008c68 <HAL_I2C_Master_Receive+0x1e4>)
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 fd19 	bl	8009580 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8008b4e:	e05c      	b.n	8008c0a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b50:	697a      	ldr	r2, [r7, #20]
 8008b52:	6a39      	ldr	r1, [r7, #32]
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f000 fc41 	bl	80093dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e07c      	b.n	8008c5e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6e:	b2d2      	uxtb	r2, r2
 8008b70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b76:	1c5a      	adds	r2, r3, #1
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b80:	3b01      	subs	r3, #1
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d034      	beq.n	8008c0a <HAL_I2C_Master_Receive+0x186>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d130      	bne.n	8008c0a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	6a3b      	ldr	r3, [r7, #32]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	2180      	movs	r1, #128	; 0x80
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f000 fb56 	bl	8009264 <I2C_WaitOnFlagUntilTimeout>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e04d      	b.n	8008c5e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	2bff      	cmp	r3, #255	; 0xff
 8008bca:	d90e      	bls.n	8008bea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	22ff      	movs	r2, #255	; 0xff
 8008bd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	8979      	ldrh	r1, [r7, #10]
 8008bda:	2300      	movs	r3, #0
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f000 fccc 	bl	8009580 <I2C_TransferConfig>
 8008be8:	e00f      	b.n	8008c0a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bf8:	b2da      	uxtb	r2, r3
 8008bfa:	8979      	ldrh	r1, [r7, #10]
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f000 fcbb 	bl	8009580 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d19d      	bne.n	8008b50 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c14:	697a      	ldr	r2, [r7, #20]
 8008c16:	6a39      	ldr	r1, [r7, #32]
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f000 fba3 	bl	8009364 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d001      	beq.n	8008c28 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e01a      	b.n	8008c5e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2220      	movs	r2, #32
 8008c2e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6859      	ldr	r1, [r3, #4]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	4b0c      	ldr	r3, [pc, #48]	; (8008c6c <HAL_I2C_Master_Receive+0x1e8>)
 8008c3c:	400b      	ands	r3, r1
 8008c3e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2220      	movs	r2, #32
 8008c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	e000      	b.n	8008c5e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008c5c:	2302      	movs	r3, #2
  }
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3718      	adds	r7, #24
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	80002400 	.word	0x80002400
 8008c6c:	fe00e800 	.word	0xfe00e800

08008c70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b088      	sub	sp, #32
 8008c74:	af02      	add	r7, sp, #8
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	4608      	mov	r0, r1
 8008c7a:	4611      	mov	r1, r2
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	4603      	mov	r3, r0
 8008c80:	817b      	strh	r3, [r7, #10]
 8008c82:	460b      	mov	r3, r1
 8008c84:	813b      	strh	r3, [r7, #8]
 8008c86:	4613      	mov	r3, r2
 8008c88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b20      	cmp	r3, #32
 8008c94:	f040 80f9 	bne.w	8008e8a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c98:	6a3b      	ldr	r3, [r7, #32]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <HAL_I2C_Mem_Write+0x34>
 8008c9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d105      	bne.n	8008cb0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008caa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e0ed      	b.n	8008e8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d101      	bne.n	8008cbe <HAL_I2C_Mem_Write+0x4e>
 8008cba:	2302      	movs	r3, #2
 8008cbc:	e0e6      	b.n	8008e8c <HAL_I2C_Mem_Write+0x21c>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008cc6:	f7fc ffa9 	bl	8005c1c <HAL_GetTick>
 8008cca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	2319      	movs	r3, #25
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f000 fac3 	bl	8009264 <I2C_WaitOnFlagUntilTimeout>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e0d1      	b.n	8008e8c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2221      	movs	r2, #33	; 0x21
 8008cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2240      	movs	r2, #64	; 0x40
 8008cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6a3a      	ldr	r2, [r7, #32]
 8008d02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008d08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008d10:	88f8      	ldrh	r0, [r7, #6]
 8008d12:	893a      	ldrh	r2, [r7, #8]
 8008d14:	8979      	ldrh	r1, [r7, #10]
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	9301      	str	r3, [sp, #4]
 8008d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	4603      	mov	r3, r0
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f000 f9d3 	bl	80090cc <I2C_RequestMemoryWrite>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d005      	beq.n	8008d38 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	e0a9      	b.n	8008e8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	2bff      	cmp	r3, #255	; 0xff
 8008d40:	d90e      	bls.n	8008d60 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	22ff      	movs	r2, #255	; 0xff
 8008d46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d4c:	b2da      	uxtb	r2, r3
 8008d4e:	8979      	ldrh	r1, [r7, #10]
 8008d50:	2300      	movs	r3, #0
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f000 fc11 	bl	8009580 <I2C_TransferConfig>
 8008d5e:	e00f      	b.n	8008d80 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d64:	b29a      	uxth	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d6e:	b2da      	uxtb	r2, r3
 8008d70:	8979      	ldrh	r1, [r7, #10]
 8008d72:	2300      	movs	r3, #0
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f000 fc00 	bl	8009580 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f000 faad 	bl	80092e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d001      	beq.n	8008d94 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e07b      	b.n	8008e8c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d98:	781a      	ldrb	r2, [r3, #0]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da4:	1c5a      	adds	r2, r3, #1
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	3b01      	subs	r3, #1
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d034      	beq.n	8008e38 <HAL_I2C_Mem_Write+0x1c8>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d130      	bne.n	8008e38 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	9300      	str	r3, [sp, #0]
 8008dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ddc:	2200      	movs	r2, #0
 8008dde:	2180      	movs	r1, #128	; 0x80
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f000 fa3f 	bl	8009264 <I2C_WaitOnFlagUntilTimeout>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d001      	beq.n	8008df0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e04d      	b.n	8008e8c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	2bff      	cmp	r3, #255	; 0xff
 8008df8:	d90e      	bls.n	8008e18 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	22ff      	movs	r2, #255	; 0xff
 8008dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	8979      	ldrh	r1, [r7, #10]
 8008e08:	2300      	movs	r3, #0
 8008e0a:	9300      	str	r3, [sp, #0]
 8008e0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f000 fbb5 	bl	8009580 <I2C_TransferConfig>
 8008e16:	e00f      	b.n	8008e38 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	8979      	ldrh	r1, [r7, #10]
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f000 fba4 	bl	8009580 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d19e      	bne.n	8008d80 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 fa8c 	bl	8009364 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d001      	beq.n	8008e56 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e01a      	b.n	8008e8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6859      	ldr	r1, [r3, #4]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	4b0a      	ldr	r3, [pc, #40]	; (8008e94 <HAL_I2C_Mem_Write+0x224>)
 8008e6a:	400b      	ands	r3, r1
 8008e6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2220      	movs	r2, #32
 8008e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	e000      	b.n	8008e8c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008e8a:	2302      	movs	r3, #2
  }
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3718      	adds	r7, #24
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	fe00e800 	.word	0xfe00e800

08008e98 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b088      	sub	sp, #32
 8008e9c:	af02      	add	r7, sp, #8
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	4608      	mov	r0, r1
 8008ea2:	4611      	mov	r1, r2
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	817b      	strh	r3, [r7, #10]
 8008eaa:	460b      	mov	r3, r1
 8008eac:	813b      	strh	r3, [r7, #8]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	2b20      	cmp	r3, #32
 8008ebc:	f040 80fd 	bne.w	80090ba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ec0:	6a3b      	ldr	r3, [r7, #32]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d002      	beq.n	8008ecc <HAL_I2C_Mem_Read+0x34>
 8008ec6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d105      	bne.n	8008ed8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ed2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e0f1      	b.n	80090bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d101      	bne.n	8008ee6 <HAL_I2C_Mem_Read+0x4e>
 8008ee2:	2302      	movs	r3, #2
 8008ee4:	e0ea      	b.n	80090bc <HAL_I2C_Mem_Read+0x224>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008eee:	f7fc fe95 	bl	8005c1c <HAL_GetTick>
 8008ef2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	2319      	movs	r3, #25
 8008efa:	2201      	movs	r2, #1
 8008efc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f000 f9af 	bl	8009264 <I2C_WaitOnFlagUntilTimeout>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e0d5      	b.n	80090bc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2222      	movs	r2, #34	; 0x22
 8008f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2240      	movs	r2, #64	; 0x40
 8008f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6a3a      	ldr	r2, [r7, #32]
 8008f2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008f30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008f38:	88f8      	ldrh	r0, [r7, #6]
 8008f3a:	893a      	ldrh	r2, [r7, #8]
 8008f3c:	8979      	ldrh	r1, [r7, #10]
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	9301      	str	r3, [sp, #4]
 8008f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f44:	9300      	str	r3, [sp, #0]
 8008f46:	4603      	mov	r3, r0
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 f913 	bl	8009174 <I2C_RequestMemoryRead>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d005      	beq.n	8008f60 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e0ad      	b.n	80090bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	2bff      	cmp	r3, #255	; 0xff
 8008f68:	d90e      	bls.n	8008f88 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	22ff      	movs	r2, #255	; 0xff
 8008f6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	8979      	ldrh	r1, [r7, #10]
 8008f78:	4b52      	ldr	r3, [pc, #328]	; (80090c4 <HAL_I2C_Mem_Read+0x22c>)
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f000 fafd 	bl	8009580 <I2C_TransferConfig>
 8008f86:	e00f      	b.n	8008fa8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	8979      	ldrh	r1, [r7, #10]
 8008f9a:	4b4a      	ldr	r3, [pc, #296]	; (80090c4 <HAL_I2C_Mem_Read+0x22c>)
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f000 faec 	bl	8009580 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fae:	2200      	movs	r2, #0
 8008fb0:	2104      	movs	r1, #4
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f000 f956 	bl	8009264 <I2C_WaitOnFlagUntilTimeout>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d001      	beq.n	8008fc2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e07c      	b.n	80090bc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fcc:	b2d2      	uxtb	r2, r2
 8008fce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd4:	1c5a      	adds	r2, r3, #1
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	3b01      	subs	r3, #1
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d034      	beq.n	8009068 <HAL_I2C_Mem_Read+0x1d0>
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009002:	2b00      	cmp	r3, #0
 8009004:	d130      	bne.n	8009068 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900c:	2200      	movs	r2, #0
 800900e:	2180      	movs	r1, #128	; 0x80
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f000 f927 	bl	8009264 <I2C_WaitOnFlagUntilTimeout>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d001      	beq.n	8009020 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	e04d      	b.n	80090bc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009024:	b29b      	uxth	r3, r3
 8009026:	2bff      	cmp	r3, #255	; 0xff
 8009028:	d90e      	bls.n	8009048 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	22ff      	movs	r2, #255	; 0xff
 800902e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009034:	b2da      	uxtb	r2, r3
 8009036:	8979      	ldrh	r1, [r7, #10]
 8009038:	2300      	movs	r3, #0
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f000 fa9d 	bl	8009580 <I2C_TransferConfig>
 8009046:	e00f      	b.n	8009068 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800904c:	b29a      	uxth	r2, r3
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009056:	b2da      	uxtb	r2, r3
 8009058:	8979      	ldrh	r1, [r7, #10]
 800905a:	2300      	movs	r3, #0
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f000 fa8c 	bl	8009580 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800906c:	b29b      	uxth	r3, r3
 800906e:	2b00      	cmp	r3, #0
 8009070:	d19a      	bne.n	8008fa8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009072:	697a      	ldr	r2, [r7, #20]
 8009074:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f000 f974 	bl	8009364 <I2C_WaitOnSTOPFlagUntilTimeout>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e01a      	b.n	80090bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2220      	movs	r2, #32
 800908c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	6859      	ldr	r1, [r3, #4]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	4b0b      	ldr	r3, [pc, #44]	; (80090c8 <HAL_I2C_Mem_Read+0x230>)
 800909a:	400b      	ands	r3, r1
 800909c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2220      	movs	r2, #32
 80090a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	e000      	b.n	80090bc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80090ba:	2302      	movs	r3, #2
  }
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	80002400 	.word	0x80002400
 80090c8:	fe00e800 	.word	0xfe00e800

080090cc <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af02      	add	r7, sp, #8
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	4608      	mov	r0, r1
 80090d6:	4611      	mov	r1, r2
 80090d8:	461a      	mov	r2, r3
 80090da:	4603      	mov	r3, r0
 80090dc:	817b      	strh	r3, [r7, #10]
 80090de:	460b      	mov	r3, r1
 80090e0:	813b      	strh	r3, [r7, #8]
 80090e2:	4613      	mov	r3, r2
 80090e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80090e6:	88fb      	ldrh	r3, [r7, #6]
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	8979      	ldrh	r1, [r7, #10]
 80090ec:	4b20      	ldr	r3, [pc, #128]	; (8009170 <I2C_RequestMemoryWrite+0xa4>)
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f000 fa43 	bl	8009580 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090fa:	69fa      	ldr	r2, [r7, #28]
 80090fc:	69b9      	ldr	r1, [r7, #24]
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f000 f8f0 	bl	80092e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e02c      	b.n	8009168 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800910e:	88fb      	ldrh	r3, [r7, #6]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d105      	bne.n	8009120 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009114:	893b      	ldrh	r3, [r7, #8]
 8009116:	b2da      	uxtb	r2, r3
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	629a      	str	r2, [r3, #40]	; 0x28
 800911e:	e015      	b.n	800914c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009120:	893b      	ldrh	r3, [r7, #8]
 8009122:	0a1b      	lsrs	r3, r3, #8
 8009124:	b29b      	uxth	r3, r3
 8009126:	b2da      	uxtb	r2, r3
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800912e:	69fa      	ldr	r2, [r7, #28]
 8009130:	69b9      	ldr	r1, [r7, #24]
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f000 f8d6 	bl	80092e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e012      	b.n	8009168 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009142:	893b      	ldrh	r3, [r7, #8]
 8009144:	b2da      	uxtb	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	2200      	movs	r2, #0
 8009154:	2180      	movs	r1, #128	; 0x80
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f000 f884 	bl	8009264 <I2C_WaitOnFlagUntilTimeout>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e000      	b.n	8009168 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	80002000 	.word	0x80002000

08009174 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af02      	add	r7, sp, #8
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	4608      	mov	r0, r1
 800917e:	4611      	mov	r1, r2
 8009180:	461a      	mov	r2, r3
 8009182:	4603      	mov	r3, r0
 8009184:	817b      	strh	r3, [r7, #10]
 8009186:	460b      	mov	r3, r1
 8009188:	813b      	strh	r3, [r7, #8]
 800918a:	4613      	mov	r3, r2
 800918c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800918e:	88fb      	ldrh	r3, [r7, #6]
 8009190:	b2da      	uxtb	r2, r3
 8009192:	8979      	ldrh	r1, [r7, #10]
 8009194:	4b20      	ldr	r3, [pc, #128]	; (8009218 <I2C_RequestMemoryRead+0xa4>)
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	2300      	movs	r3, #0
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f000 f9f0 	bl	8009580 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091a0:	69fa      	ldr	r2, [r7, #28]
 80091a2:	69b9      	ldr	r1, [r7, #24]
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f000 f89d 	bl	80092e4 <I2C_WaitOnTXISFlagUntilTimeout>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d001      	beq.n	80091b4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	e02c      	b.n	800920e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80091b4:	88fb      	ldrh	r3, [r7, #6]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d105      	bne.n	80091c6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80091ba:	893b      	ldrh	r3, [r7, #8]
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	629a      	str	r2, [r3, #40]	; 0x28
 80091c4:	e015      	b.n	80091f2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80091c6:	893b      	ldrh	r3, [r7, #8]
 80091c8:	0a1b      	lsrs	r3, r3, #8
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	b2da      	uxtb	r2, r3
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091d4:	69fa      	ldr	r2, [r7, #28]
 80091d6:	69b9      	ldr	r1, [r7, #24]
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f000 f883 	bl	80092e4 <I2C_WaitOnTXISFlagUntilTimeout>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	e012      	b.n	800920e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80091e8:	893b      	ldrh	r3, [r7, #8]
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	2200      	movs	r2, #0
 80091fa:	2140      	movs	r1, #64	; 0x40
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f000 f831 	bl	8009264 <I2C_WaitOnFlagUntilTimeout>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	e000      	b.n	800920e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	80002000 	.word	0x80002000

0800921c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	f003 0302 	and.w	r3, r3, #2
 800922e:	2b02      	cmp	r3, #2
 8009230:	d103      	bne.n	800923a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2200      	movs	r2, #0
 8009238:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	f003 0301 	and.w	r3, r3, #1
 8009244:	2b01      	cmp	r3, #1
 8009246:	d007      	beq.n	8009258 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	699a      	ldr	r2, [r3, #24]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f042 0201 	orr.w	r2, r2, #1
 8009256:	619a      	str	r2, [r3, #24]
  }
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	603b      	str	r3, [r7, #0]
 8009270:	4613      	mov	r3, r2
 8009272:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009274:	e022      	b.n	80092bc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800927c:	d01e      	beq.n	80092bc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800927e:	f7fc fccd 	bl	8005c1c <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	429a      	cmp	r2, r3
 800928c:	d302      	bcc.n	8009294 <I2C_WaitOnFlagUntilTimeout+0x30>
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d113      	bne.n	80092bc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009298:	f043 0220 	orr.w	r2, r3, #32
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2220      	movs	r2, #32
 80092a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e00f      	b.n	80092dc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	699a      	ldr	r2, [r3, #24]
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	4013      	ands	r3, r2
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	bf0c      	ite	eq
 80092cc:	2301      	moveq	r3, #1
 80092ce:	2300      	movne	r3, #0
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	461a      	mov	r2, r3
 80092d4:	79fb      	ldrb	r3, [r7, #7]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d0cd      	beq.n	8009276 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80092f0:	e02c      	b.n	800934c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	68b9      	ldr	r1, [r7, #8]
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f000 f8dc 	bl	80094b4 <I2C_IsAcknowledgeFailed>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e02a      	b.n	800935c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800930c:	d01e      	beq.n	800934c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800930e:	f7fc fc85 	bl	8005c1c <HAL_GetTick>
 8009312:	4602      	mov	r2, r0
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	1ad3      	subs	r3, r2, r3
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	429a      	cmp	r2, r3
 800931c:	d302      	bcc.n	8009324 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d113      	bne.n	800934c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009328:	f043 0220 	orr.w	r2, r3, #32
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2220      	movs	r2, #32
 8009334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	e007      	b.n	800935c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	f003 0302 	and.w	r3, r3, #2
 8009356:	2b02      	cmp	r3, #2
 8009358:	d1cb      	bne.n	80092f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009370:	e028      	b.n	80093c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	68b9      	ldr	r1, [r7, #8]
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f000 f89c 	bl	80094b4 <I2C_IsAcknowledgeFailed>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e026      	b.n	80093d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009386:	f7fc fc49 	bl	8005c1c <HAL_GetTick>
 800938a:	4602      	mov	r2, r0
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	1ad3      	subs	r3, r2, r3
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	429a      	cmp	r2, r3
 8009394:	d302      	bcc.n	800939c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d113      	bne.n	80093c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093a0:	f043 0220 	orr.w	r2, r3, #32
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2220      	movs	r2, #32
 80093ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e007      	b.n	80093d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	699b      	ldr	r3, [r3, #24]
 80093ca:	f003 0320 	and.w	r3, r3, #32
 80093ce:	2b20      	cmp	r3, #32
 80093d0:	d1cf      	bne.n	8009372 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80093e8:	e055      	b.n	8009496 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	68b9      	ldr	r1, [r7, #8]
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f000 f860 	bl	80094b4 <I2C_IsAcknowledgeFailed>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d001      	beq.n	80093fe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	e053      	b.n	80094a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	f003 0320 	and.w	r3, r3, #32
 8009408:	2b20      	cmp	r3, #32
 800940a:	d129      	bne.n	8009460 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	699b      	ldr	r3, [r3, #24]
 8009412:	f003 0304 	and.w	r3, r3, #4
 8009416:	2b04      	cmp	r3, #4
 8009418:	d105      	bne.n	8009426 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800941e:	2b00      	cmp	r3, #0
 8009420:	d001      	beq.n	8009426 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	e03f      	b.n	80094a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2220      	movs	r2, #32
 800942c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6859      	ldr	r1, [r3, #4]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	4b1d      	ldr	r3, [pc, #116]	; (80094b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800943a:	400b      	ands	r3, r1
 800943c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2200      	movs	r2, #0
 8009442:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2220      	movs	r2, #32
 8009448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2200      	movs	r2, #0
 8009458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	e022      	b.n	80094a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009460:	f7fc fbdc 	bl	8005c1c <HAL_GetTick>
 8009464:	4602      	mov	r2, r0
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	429a      	cmp	r2, r3
 800946e:	d302      	bcc.n	8009476 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10f      	bne.n	8009496 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800947a:	f043 0220 	orr.w	r2, r3, #32
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2220      	movs	r2, #32
 8009486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e007      	b.n	80094a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	f003 0304 	and.w	r3, r3, #4
 80094a0:	2b04      	cmp	r3, #4
 80094a2:	d1a2      	bne.n	80093ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	fe00e800 	.word	0xfe00e800

080094b4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	699b      	ldr	r3, [r3, #24]
 80094c6:	f003 0310 	and.w	r3, r3, #16
 80094ca:	2b10      	cmp	r3, #16
 80094cc:	d151      	bne.n	8009572 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094ce:	e022      	b.n	8009516 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d6:	d01e      	beq.n	8009516 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094d8:	f7fc fba0 	bl	8005c1c <HAL_GetTick>
 80094dc:	4602      	mov	r2, r0
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	1ad3      	subs	r3, r2, r3
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d302      	bcc.n	80094ee <I2C_IsAcknowledgeFailed+0x3a>
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d113      	bne.n	8009516 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094f2:	f043 0220 	orr.w	r2, r3, #32
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2220      	movs	r2, #32
 80094fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2200      	movs	r2, #0
 800950e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	e02e      	b.n	8009574 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	699b      	ldr	r3, [r3, #24]
 800951c:	f003 0320 	and.w	r3, r3, #32
 8009520:	2b20      	cmp	r3, #32
 8009522:	d1d5      	bne.n	80094d0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2210      	movs	r2, #16
 800952a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2220      	movs	r2, #32
 8009532:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f7ff fe71 	bl	800921c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	6859      	ldr	r1, [r3, #4]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	4b0d      	ldr	r3, [pc, #52]	; (800957c <I2C_IsAcknowledgeFailed+0xc8>)
 8009546:	400b      	ands	r3, r1
 8009548:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800954e:	f043 0204 	orr.w	r2, r3, #4
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2220      	movs	r2, #32
 800955a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e000      	b.n	8009574 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	fe00e800 	.word	0xfe00e800

08009580 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	607b      	str	r3, [r7, #4]
 800958a:	460b      	mov	r3, r1
 800958c:	817b      	strh	r3, [r7, #10]
 800958e:	4613      	mov	r3, r2
 8009590:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	685a      	ldr	r2, [r3, #4]
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	0d5b      	lsrs	r3, r3, #21
 800959c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80095a0:	4b0d      	ldr	r3, [pc, #52]	; (80095d8 <I2C_TransferConfig+0x58>)
 80095a2:	430b      	orrs	r3, r1
 80095a4:	43db      	mvns	r3, r3
 80095a6:	ea02 0103 	and.w	r1, r2, r3
 80095aa:	897b      	ldrh	r3, [r7, #10]
 80095ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80095b0:	7a7b      	ldrb	r3, [r7, #9]
 80095b2:	041b      	lsls	r3, r3, #16
 80095b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80095b8:	431a      	orrs	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	431a      	orrs	r2, r3
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	431a      	orrs	r2, r3
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	430a      	orrs	r2, r1
 80095c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80095ca:	bf00      	nop
 80095cc:	3714      	adds	r7, #20
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	03ff63ff 	.word	0x03ff63ff

080095dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	2b20      	cmp	r3, #32
 80095f0:	d138      	bne.n	8009664 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d101      	bne.n	8009600 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80095fc:	2302      	movs	r3, #2
 80095fe:	e032      	b.n	8009666 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2224      	movs	r2, #36	; 0x24
 800960c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f022 0201 	bic.w	r2, r2, #1
 800961e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800962e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6819      	ldr	r1, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	430a      	orrs	r2, r1
 800963e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f042 0201 	orr.w	r2, r2, #1
 800964e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2220      	movs	r2, #32
 8009654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	e000      	b.n	8009666 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009664:	2302      	movs	r3, #2
  }
}
 8009666:	4618      	mov	r0, r3
 8009668:	370c      	adds	r7, #12
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr

08009672 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009672:	b480      	push	{r7}
 8009674:	b085      	sub	sp, #20
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
 800967a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009682:	b2db      	uxtb	r3, r3
 8009684:	2b20      	cmp	r3, #32
 8009686:	d139      	bne.n	80096fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800968e:	2b01      	cmp	r3, #1
 8009690:	d101      	bne.n	8009696 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009692:	2302      	movs	r3, #2
 8009694:	e033      	b.n	80096fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2224      	movs	r2, #36	; 0x24
 80096a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f022 0201 	bic.w	r2, r2, #1
 80096b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80096c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	021b      	lsls	r3, r3, #8
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f042 0201 	orr.w	r2, r2, #1
 80096e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2220      	movs	r2, #32
 80096ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80096f8:	2300      	movs	r3, #0
 80096fa:	e000      	b.n	80096fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80096fc:	2302      	movs	r3, #2
  }
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3714      	adds	r7, #20
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
	...

0800970c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d101      	bne.n	8009722 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e0bb      	b.n	800989a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b05      	cmp	r3, #5
 800972c:	d101      	bne.n	8009732 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e0b3      	b.n	800989a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009738:	b2db      	uxtb	r3, r3
 800973a:	2b02      	cmp	r3, #2
 800973c:	d101      	bne.n	8009742 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e0ab      	b.n	800989a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009742:	4b58      	ldr	r3, [pc, #352]	; (80098a4 <HAL_OPAMP_Init+0x198>)
 8009744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009746:	4a57      	ldr	r2, [pc, #348]	; (80098a4 <HAL_OPAMP_Init+0x198>)
 8009748:	f043 0301 	orr.w	r3, r3, #1
 800974c:	6613      	str	r3, [r2, #96]	; 0x60
 800974e:	4b55      	ldr	r3, [pc, #340]	; (80098a4 <HAL_OPAMP_Init+0x198>)
 8009750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009752:	f003 0301 	and.w	r3, r3, #1
 8009756:	60bb      	str	r3, [r7, #8]
 8009758:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d103      	bne.n	800976e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7fb fa54 	bl	8004c1c <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	2b40      	cmp	r3, #64	; 0x40
 800977a:	d003      	beq.n	8009784 <HAL_OPAMP_Init+0x78>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	2b60      	cmp	r3, #96	; 0x60
 8009782:	d133      	bne.n	80097ec <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f023 0110 	bic.w	r1, r3, #16
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	430a      	orrs	r2, r1
 8009798:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	4b41      	ldr	r3, [pc, #260]	; (80098a8 <HAL_OPAMP_Init+0x19c>)
 80097a2:	4013      	ands	r3, r2
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	6851      	ldr	r1, [r2, #4]
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	6892      	ldr	r2, [r2, #8]
 80097ac:	4311      	orrs	r1, r2
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	6912      	ldr	r2, [r2, #16]
 80097b2:	430a      	orrs	r2, r1
 80097b4:	6879      	ldr	r1, [r7, #4]
 80097b6:	7d09      	ldrb	r1, [r1, #20]
 80097b8:	2901      	cmp	r1, #1
 80097ba:	d102      	bne.n	80097c2 <HAL_OPAMP_Init+0xb6>
 80097bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80097c0:	e000      	b.n	80097c4 <HAL_OPAMP_Init+0xb8>
 80097c2:	2100      	movs	r1, #0
 80097c4:	4311      	orrs	r1, r2
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80097ca:	4311      	orrs	r1, r2
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80097d0:	4311      	orrs	r1, r2
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80097d6:	04d2      	lsls	r2, r2, #19
 80097d8:	4311      	orrs	r1, r2
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80097de:	0612      	lsls	r2, r2, #24
 80097e0:	4311      	orrs	r1, r2
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	6812      	ldr	r2, [r2, #0]
 80097e6:	430b      	orrs	r3, r1
 80097e8:	6013      	str	r3, [r2, #0]
 80097ea:	e035      	b.n	8009858 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f023 0110 	bic.w	r1, r3, #16
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	430a      	orrs	r2, r1
 8009800:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	4b27      	ldr	r3, [pc, #156]	; (80098a8 <HAL_OPAMP_Init+0x19c>)
 800980a:	4013      	ands	r3, r2
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	6851      	ldr	r1, [r2, #4]
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	6892      	ldr	r2, [r2, #8]
 8009814:	4311      	orrs	r1, r2
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	68d2      	ldr	r2, [r2, #12]
 800981a:	4311      	orrs	r1, r2
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	6912      	ldr	r2, [r2, #16]
 8009820:	430a      	orrs	r2, r1
 8009822:	6879      	ldr	r1, [r7, #4]
 8009824:	7d09      	ldrb	r1, [r1, #20]
 8009826:	2901      	cmp	r1, #1
 8009828:	d102      	bne.n	8009830 <HAL_OPAMP_Init+0x124>
 800982a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800982e:	e000      	b.n	8009832 <HAL_OPAMP_Init+0x126>
 8009830:	2100      	movs	r1, #0
 8009832:	4311      	orrs	r1, r2
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009838:	4311      	orrs	r1, r2
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800983e:	4311      	orrs	r1, r2
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009844:	04d2      	lsls	r2, r2, #19
 8009846:	4311      	orrs	r1, r2
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800984c:	0612      	lsls	r2, r2, #24
 800984e:	4311      	orrs	r1, r2
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	6812      	ldr	r2, [r2, #0]
 8009854:	430b      	orrs	r3, r1
 8009856:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	699b      	ldr	r3, [r3, #24]
 800985e:	2b00      	cmp	r3, #0
 8009860:	db10      	blt.n	8009884 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	699a      	ldr	r2, [r3, #24]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	69db      	ldr	r3, [r3, #28]
 8009874:	431a      	orrs	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	431a      	orrs	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	430a      	orrs	r2, r1
 8009882:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800988a:	b2db      	uxtb	r3, r3
 800988c:	2b00      	cmp	r3, #0
 800988e:	d103      	bne.n	8009898 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8009898:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	40021000 	.word	0x40021000
 80098a8:	e0003e11 	.word	0xe0003e11

080098ac <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098b4:	2300      	movs	r3, #0
 80098b6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d102      	bne.n	80098c4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	73fb      	strb	r3, [r7, #15]
 80098c2:	e01d      	b.n	8009900 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	2b05      	cmp	r3, #5
 80098ce:	d102      	bne.n	80098d6 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	73fb      	strb	r3, [r7, #15]
 80098d4:	e014      	b.n	8009900 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d10c      	bne.n	80098fc <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f042 0201 	orr.w	r2, r2, #1
 80098f0:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2204      	movs	r2, #4
 80098f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80098fa:	e001      	b.n	8009900 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8009900:	7bfb      	ldrb	r3, [r7, #15]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
	...

08009910 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d141      	bne.n	80099a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800991e:	4b4b      	ldr	r3, [pc, #300]	; (8009a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800992a:	d131      	bne.n	8009990 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800992c:	4b47      	ldr	r3, [pc, #284]	; (8009a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800992e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009932:	4a46      	ldr	r2, [pc, #280]	; (8009a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009938:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800993c:	4b43      	ldr	r3, [pc, #268]	; (8009a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009944:	4a41      	ldr	r2, [pc, #260]	; (8009a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009946:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800994a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800994c:	4b40      	ldr	r3, [pc, #256]	; (8009a50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2232      	movs	r2, #50	; 0x32
 8009952:	fb02 f303 	mul.w	r3, r2, r3
 8009956:	4a3f      	ldr	r2, [pc, #252]	; (8009a54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009958:	fba2 2303 	umull	r2, r3, r2, r3
 800995c:	0c9b      	lsrs	r3, r3, #18
 800995e:	3301      	adds	r3, #1
 8009960:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009962:	e002      	b.n	800996a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	3b01      	subs	r3, #1
 8009968:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800996a:	4b38      	ldr	r3, [pc, #224]	; (8009a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009976:	d102      	bne.n	800997e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1f2      	bne.n	8009964 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800997e:	4b33      	ldr	r3, [pc, #204]	; (8009a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009980:	695b      	ldr	r3, [r3, #20]
 8009982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800998a:	d158      	bne.n	8009a3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800998c:	2303      	movs	r3, #3
 800998e:	e057      	b.n	8009a40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009990:	4b2e      	ldr	r3, [pc, #184]	; (8009a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009996:	4a2d      	ldr	r2, [pc, #180]	; (8009a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800999c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80099a0:	e04d      	b.n	8009a3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099a8:	d141      	bne.n	8009a2e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80099aa:	4b28      	ldr	r3, [pc, #160]	; (8009a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80099b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099b6:	d131      	bne.n	8009a1c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80099b8:	4b24      	ldr	r3, [pc, #144]	; (8009a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099be:	4a23      	ldr	r2, [pc, #140]	; (8009a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80099c8:	4b20      	ldr	r3, [pc, #128]	; (8009a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80099d0:	4a1e      	ldr	r2, [pc, #120]	; (8009a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80099d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80099d8:	4b1d      	ldr	r3, [pc, #116]	; (8009a50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2232      	movs	r2, #50	; 0x32
 80099de:	fb02 f303 	mul.w	r3, r2, r3
 80099e2:	4a1c      	ldr	r2, [pc, #112]	; (8009a54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80099e4:	fba2 2303 	umull	r2, r3, r2, r3
 80099e8:	0c9b      	lsrs	r3, r3, #18
 80099ea:	3301      	adds	r3, #1
 80099ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80099ee:	e002      	b.n	80099f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	3b01      	subs	r3, #1
 80099f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80099f6:	4b15      	ldr	r3, [pc, #84]	; (8009a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099f8:	695b      	ldr	r3, [r3, #20]
 80099fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a02:	d102      	bne.n	8009a0a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1f2      	bne.n	80099f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009a0a:	4b10      	ldr	r3, [pc, #64]	; (8009a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a0c:	695b      	ldr	r3, [r3, #20]
 8009a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a16:	d112      	bne.n	8009a3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009a18:	2303      	movs	r3, #3
 8009a1a:	e011      	b.n	8009a40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009a1c:	4b0b      	ldr	r3, [pc, #44]	; (8009a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a22:	4a0a      	ldr	r2, [pc, #40]	; (8009a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009a2c:	e007      	b.n	8009a3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009a2e:	4b07      	ldr	r3, [pc, #28]	; (8009a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009a36:	4a05      	ldr	r2, [pc, #20]	; (8009a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009a3c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3714      	adds	r7, #20
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr
 8009a4c:	40007000 	.word	0x40007000
 8009a50:	20000000 	.word	0x20000000
 8009a54:	431bde83 	.word	0x431bde83

08009a58 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009a5c:	4b05      	ldr	r3, [pc, #20]	; (8009a74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	4a04      	ldr	r2, [pc, #16]	; (8009a74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a66:	6093      	str	r3, [r2, #8]
}
 8009a68:	bf00      	nop
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	40007000 	.word	0x40007000

08009a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b088      	sub	sp, #32
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d101      	bne.n	8009a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	e308      	b.n	800a09c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f003 0301 	and.w	r3, r3, #1
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d075      	beq.n	8009b82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a96:	4ba3      	ldr	r3, [pc, #652]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f003 030c 	and.w	r3, r3, #12
 8009a9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009aa0:	4ba0      	ldr	r3, [pc, #640]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	f003 0303 	and.w	r3, r3, #3
 8009aa8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	2b0c      	cmp	r3, #12
 8009aae:	d102      	bne.n	8009ab6 <HAL_RCC_OscConfig+0x3e>
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	2b03      	cmp	r3, #3
 8009ab4:	d002      	beq.n	8009abc <HAL_RCC_OscConfig+0x44>
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	2b08      	cmp	r3, #8
 8009aba:	d10b      	bne.n	8009ad4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009abc:	4b99      	ldr	r3, [pc, #612]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d05b      	beq.n	8009b80 <HAL_RCC_OscConfig+0x108>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d157      	bne.n	8009b80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e2e3      	b.n	800a09c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009adc:	d106      	bne.n	8009aec <HAL_RCC_OscConfig+0x74>
 8009ade:	4b91      	ldr	r3, [pc, #580]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a90      	ldr	r2, [pc, #576]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ae8:	6013      	str	r3, [r2, #0]
 8009aea:	e01d      	b.n	8009b28 <HAL_RCC_OscConfig+0xb0>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009af4:	d10c      	bne.n	8009b10 <HAL_RCC_OscConfig+0x98>
 8009af6:	4b8b      	ldr	r3, [pc, #556]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a8a      	ldr	r2, [pc, #552]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b00:	6013      	str	r3, [r2, #0]
 8009b02:	4b88      	ldr	r3, [pc, #544]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a87      	ldr	r2, [pc, #540]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b0c:	6013      	str	r3, [r2, #0]
 8009b0e:	e00b      	b.n	8009b28 <HAL_RCC_OscConfig+0xb0>
 8009b10:	4b84      	ldr	r3, [pc, #528]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a83      	ldr	r2, [pc, #524]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b1a:	6013      	str	r3, [r2, #0]
 8009b1c:	4b81      	ldr	r3, [pc, #516]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a80      	ldr	r2, [pc, #512]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d013      	beq.n	8009b58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b30:	f7fc f874 	bl	8005c1c <HAL_GetTick>
 8009b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009b36:	e008      	b.n	8009b4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b38:	f7fc f870 	bl	8005c1c <HAL_GetTick>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	2b64      	cmp	r3, #100	; 0x64
 8009b44:	d901      	bls.n	8009b4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009b46:	2303      	movs	r3, #3
 8009b48:	e2a8      	b.n	800a09c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009b4a:	4b76      	ldr	r3, [pc, #472]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d0f0      	beq.n	8009b38 <HAL_RCC_OscConfig+0xc0>
 8009b56:	e014      	b.n	8009b82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b58:	f7fc f860 	bl	8005c1c <HAL_GetTick>
 8009b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009b5e:	e008      	b.n	8009b72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b60:	f7fc f85c 	bl	8005c1c <HAL_GetTick>
 8009b64:	4602      	mov	r2, r0
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	2b64      	cmp	r3, #100	; 0x64
 8009b6c:	d901      	bls.n	8009b72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	e294      	b.n	800a09c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009b72:	4b6c      	ldr	r3, [pc, #432]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1f0      	bne.n	8009b60 <HAL_RCC_OscConfig+0xe8>
 8009b7e:	e000      	b.n	8009b82 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 0302 	and.w	r3, r3, #2
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d075      	beq.n	8009c7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b8e:	4b65      	ldr	r3, [pc, #404]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	f003 030c 	and.w	r3, r3, #12
 8009b96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009b98:	4b62      	ldr	r3, [pc, #392]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	f003 0303 	and.w	r3, r3, #3
 8009ba0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	2b0c      	cmp	r3, #12
 8009ba6:	d102      	bne.n	8009bae <HAL_RCC_OscConfig+0x136>
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	2b02      	cmp	r3, #2
 8009bac:	d002      	beq.n	8009bb4 <HAL_RCC_OscConfig+0x13c>
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	2b04      	cmp	r3, #4
 8009bb2:	d11f      	bne.n	8009bf4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009bb4:	4b5b      	ldr	r3, [pc, #364]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d005      	beq.n	8009bcc <HAL_RCC_OscConfig+0x154>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d101      	bne.n	8009bcc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e267      	b.n	800a09c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bcc:	4b55      	ldr	r3, [pc, #340]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	061b      	lsls	r3, r3, #24
 8009bda:	4952      	ldr	r1, [pc, #328]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009be0:	4b51      	ldr	r3, [pc, #324]	; (8009d28 <HAL_RCC_OscConfig+0x2b0>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7fb ffcd 	bl	8005b84 <HAL_InitTick>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d043      	beq.n	8009c78 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e253      	b.n	800a09c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d023      	beq.n	8009c44 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009bfc:	4b49      	ldr	r3, [pc, #292]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a48      	ldr	r2, [pc, #288]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c08:	f7fc f808 	bl	8005c1c <HAL_GetTick>
 8009c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009c0e:	e008      	b.n	8009c22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c10:	f7fc f804 	bl	8005c1c <HAL_GetTick>
 8009c14:	4602      	mov	r2, r0
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d901      	bls.n	8009c22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	e23c      	b.n	800a09c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009c22:	4b40      	ldr	r3, [pc, #256]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d0f0      	beq.n	8009c10 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c2e:	4b3d      	ldr	r3, [pc, #244]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	691b      	ldr	r3, [r3, #16]
 8009c3a:	061b      	lsls	r3, r3, #24
 8009c3c:	4939      	ldr	r1, [pc, #228]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	604b      	str	r3, [r1, #4]
 8009c42:	e01a      	b.n	8009c7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c44:	4b37      	ldr	r3, [pc, #220]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a36      	ldr	r2, [pc, #216]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009c4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c50:	f7fb ffe4 	bl	8005c1c <HAL_GetTick>
 8009c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009c56:	e008      	b.n	8009c6a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c58:	f7fb ffe0 	bl	8005c1c <HAL_GetTick>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d901      	bls.n	8009c6a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009c66:	2303      	movs	r3, #3
 8009c68:	e218      	b.n	800a09c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009c6a:	4b2e      	ldr	r3, [pc, #184]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1f0      	bne.n	8009c58 <HAL_RCC_OscConfig+0x1e0>
 8009c76:	e000      	b.n	8009c7a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 0308 	and.w	r3, r3, #8
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d03c      	beq.n	8009d00 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	695b      	ldr	r3, [r3, #20]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d01c      	beq.n	8009cc8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c8e:	4b25      	ldr	r3, [pc, #148]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c94:	4a23      	ldr	r2, [pc, #140]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009c96:	f043 0301 	orr.w	r3, r3, #1
 8009c9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c9e:	f7fb ffbd 	bl	8005c1c <HAL_GetTick>
 8009ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009ca4:	e008      	b.n	8009cb8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ca6:	f7fb ffb9 	bl	8005c1c <HAL_GetTick>
 8009caa:	4602      	mov	r2, r0
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	1ad3      	subs	r3, r2, r3
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d901      	bls.n	8009cb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	e1f1      	b.n	800a09c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009cb8:	4b1a      	ldr	r3, [pc, #104]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cbe:	f003 0302 	and.w	r3, r3, #2
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d0ef      	beq.n	8009ca6 <HAL_RCC_OscConfig+0x22e>
 8009cc6:	e01b      	b.n	8009d00 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009cc8:	4b16      	ldr	r3, [pc, #88]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cce:	4a15      	ldr	r2, [pc, #84]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009cd0:	f023 0301 	bic.w	r3, r3, #1
 8009cd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cd8:	f7fb ffa0 	bl	8005c1c <HAL_GetTick>
 8009cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009cde:	e008      	b.n	8009cf2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ce0:	f7fb ff9c 	bl	8005c1c <HAL_GetTick>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	1ad3      	subs	r3, r2, r3
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	d901      	bls.n	8009cf2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8009cee:	2303      	movs	r3, #3
 8009cf0:	e1d4      	b.n	800a09c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009cf2:	4b0c      	ldr	r3, [pc, #48]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cf8:	f003 0302 	and.w	r3, r3, #2
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d1ef      	bne.n	8009ce0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f003 0304 	and.w	r3, r3, #4
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f000 80ab 	beq.w	8009e64 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009d12:	4b04      	ldr	r3, [pc, #16]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d106      	bne.n	8009d2c <HAL_RCC_OscConfig+0x2b4>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e005      	b.n	8009d2e <HAL_RCC_OscConfig+0x2b6>
 8009d22:	bf00      	nop
 8009d24:	40021000 	.word	0x40021000
 8009d28:	20000004 	.word	0x20000004
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00d      	beq.n	8009d4e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d32:	4baf      	ldr	r3, [pc, #700]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d36:	4aae      	ldr	r2, [pc, #696]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8009d3e:	4bac      	ldr	r3, [pc, #688]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d46:	60fb      	str	r3, [r7, #12]
 8009d48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009d4e:	4ba9      	ldr	r3, [pc, #676]	; (8009ff4 <HAL_RCC_OscConfig+0x57c>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d118      	bne.n	8009d8c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d5a:	4ba6      	ldr	r3, [pc, #664]	; (8009ff4 <HAL_RCC_OscConfig+0x57c>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4aa5      	ldr	r2, [pc, #660]	; (8009ff4 <HAL_RCC_OscConfig+0x57c>)
 8009d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d66:	f7fb ff59 	bl	8005c1c <HAL_GetTick>
 8009d6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009d6c:	e008      	b.n	8009d80 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d6e:	f7fb ff55 	bl	8005c1c <HAL_GetTick>
 8009d72:	4602      	mov	r2, r0
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d901      	bls.n	8009d80 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e18d      	b.n	800a09c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009d80:	4b9c      	ldr	r3, [pc, #624]	; (8009ff4 <HAL_RCC_OscConfig+0x57c>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d0f0      	beq.n	8009d6e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d108      	bne.n	8009da6 <HAL_RCC_OscConfig+0x32e>
 8009d94:	4b96      	ldr	r3, [pc, #600]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d9a:	4a95      	ldr	r2, [pc, #596]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009d9c:	f043 0301 	orr.w	r3, r3, #1
 8009da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009da4:	e024      	b.n	8009df0 <HAL_RCC_OscConfig+0x378>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	2b05      	cmp	r3, #5
 8009dac:	d110      	bne.n	8009dd0 <HAL_RCC_OscConfig+0x358>
 8009dae:	4b90      	ldr	r3, [pc, #576]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009db4:	4a8e      	ldr	r2, [pc, #568]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009db6:	f043 0304 	orr.w	r3, r3, #4
 8009dba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009dbe:	4b8c      	ldr	r3, [pc, #560]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dc4:	4a8a      	ldr	r2, [pc, #552]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009dc6:	f043 0301 	orr.w	r3, r3, #1
 8009dca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009dce:	e00f      	b.n	8009df0 <HAL_RCC_OscConfig+0x378>
 8009dd0:	4b87      	ldr	r3, [pc, #540]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dd6:	4a86      	ldr	r2, [pc, #536]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009dd8:	f023 0301 	bic.w	r3, r3, #1
 8009ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009de0:	4b83      	ldr	r3, [pc, #524]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009de6:	4a82      	ldr	r2, [pc, #520]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009de8:	f023 0304 	bic.w	r3, r3, #4
 8009dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d016      	beq.n	8009e26 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009df8:	f7fb ff10 	bl	8005c1c <HAL_GetTick>
 8009dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009dfe:	e00a      	b.n	8009e16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e00:	f7fb ff0c 	bl	8005c1c <HAL_GetTick>
 8009e04:	4602      	mov	r2, r0
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d901      	bls.n	8009e16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009e12:	2303      	movs	r3, #3
 8009e14:	e142      	b.n	800a09c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e16:	4b76      	ldr	r3, [pc, #472]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e1c:	f003 0302 	and.w	r3, r3, #2
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d0ed      	beq.n	8009e00 <HAL_RCC_OscConfig+0x388>
 8009e24:	e015      	b.n	8009e52 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e26:	f7fb fef9 	bl	8005c1c <HAL_GetTick>
 8009e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009e2c:	e00a      	b.n	8009e44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e2e:	f7fb fef5 	bl	8005c1c <HAL_GetTick>
 8009e32:	4602      	mov	r2, r0
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	1ad3      	subs	r3, r2, r3
 8009e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d901      	bls.n	8009e44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009e40:	2303      	movs	r3, #3
 8009e42:	e12b      	b.n	800a09c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009e44:	4b6a      	ldr	r3, [pc, #424]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e4a:	f003 0302 	and.w	r3, r3, #2
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1ed      	bne.n	8009e2e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009e52:	7ffb      	ldrb	r3, [r7, #31]
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d105      	bne.n	8009e64 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e58:	4b65      	ldr	r3, [pc, #404]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e5c:	4a64      	ldr	r2, [pc, #400]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e62:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f003 0320 	and.w	r3, r3, #32
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d03c      	beq.n	8009eea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	699b      	ldr	r3, [r3, #24]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d01c      	beq.n	8009eb2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009e78:	4b5d      	ldr	r3, [pc, #372]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009e7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009e7e:	4a5c      	ldr	r2, [pc, #368]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009e80:	f043 0301 	orr.w	r3, r3, #1
 8009e84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e88:	f7fb fec8 	bl	8005c1c <HAL_GetTick>
 8009e8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009e8e:	e008      	b.n	8009ea2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e90:	f7fb fec4 	bl	8005c1c <HAL_GetTick>
 8009e94:	4602      	mov	r2, r0
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	1ad3      	subs	r3, r2, r3
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	d901      	bls.n	8009ea2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	e0fc      	b.n	800a09c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009ea2:	4b53      	ldr	r3, [pc, #332]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009ea4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ea8:	f003 0302 	and.w	r3, r3, #2
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d0ef      	beq.n	8009e90 <HAL_RCC_OscConfig+0x418>
 8009eb0:	e01b      	b.n	8009eea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009eb2:	4b4f      	ldr	r3, [pc, #316]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009eb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009eb8:	4a4d      	ldr	r2, [pc, #308]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009eba:	f023 0301 	bic.w	r3, r3, #1
 8009ebe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ec2:	f7fb feab 	bl	8005c1c <HAL_GetTick>
 8009ec6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009ec8:	e008      	b.n	8009edc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009eca:	f7fb fea7 	bl	8005c1c <HAL_GetTick>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	1ad3      	subs	r3, r2, r3
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	d901      	bls.n	8009edc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009ed8:	2303      	movs	r3, #3
 8009eda:	e0df      	b.n	800a09c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009edc:	4b44      	ldr	r3, [pc, #272]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009ede:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ee2:	f003 0302 	and.w	r3, r3, #2
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1ef      	bne.n	8009eca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	69db      	ldr	r3, [r3, #28]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	f000 80d3 	beq.w	800a09a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009ef4:	4b3e      	ldr	r3, [pc, #248]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	f003 030c 	and.w	r3, r3, #12
 8009efc:	2b0c      	cmp	r3, #12
 8009efe:	f000 808d 	beq.w	800a01c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	69db      	ldr	r3, [r3, #28]
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	d15a      	bne.n	8009fc0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f0a:	4b39      	ldr	r3, [pc, #228]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a38      	ldr	r2, [pc, #224]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009f10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f16:	f7fb fe81 	bl	8005c1c <HAL_GetTick>
 8009f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f1c:	e008      	b.n	8009f30 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f1e:	f7fb fe7d 	bl	8005c1c <HAL_GetTick>
 8009f22:	4602      	mov	r2, r0
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	1ad3      	subs	r3, r2, r3
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	d901      	bls.n	8009f30 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8009f2c:	2303      	movs	r3, #3
 8009f2e:	e0b5      	b.n	800a09c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f30:	4b2f      	ldr	r3, [pc, #188]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1f0      	bne.n	8009f1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009f3c:	4b2c      	ldr	r3, [pc, #176]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009f3e:	68da      	ldr	r2, [r3, #12]
 8009f40:	4b2d      	ldr	r3, [pc, #180]	; (8009ff8 <HAL_RCC_OscConfig+0x580>)
 8009f42:	4013      	ands	r3, r2
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	6a11      	ldr	r1, [r2, #32]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009f4c:	3a01      	subs	r2, #1
 8009f4e:	0112      	lsls	r2, r2, #4
 8009f50:	4311      	orrs	r1, r2
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009f56:	0212      	lsls	r2, r2, #8
 8009f58:	4311      	orrs	r1, r2
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009f5e:	0852      	lsrs	r2, r2, #1
 8009f60:	3a01      	subs	r2, #1
 8009f62:	0552      	lsls	r2, r2, #21
 8009f64:	4311      	orrs	r1, r2
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009f6a:	0852      	lsrs	r2, r2, #1
 8009f6c:	3a01      	subs	r2, #1
 8009f6e:	0652      	lsls	r2, r2, #25
 8009f70:	4311      	orrs	r1, r2
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009f76:	06d2      	lsls	r2, r2, #27
 8009f78:	430a      	orrs	r2, r1
 8009f7a:	491d      	ldr	r1, [pc, #116]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f80:	4b1b      	ldr	r3, [pc, #108]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a1a      	ldr	r2, [pc, #104]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f8a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009f8c:	4b18      	ldr	r3, [pc, #96]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	4a17      	ldr	r2, [pc, #92]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f98:	f7fb fe40 	bl	8005c1c <HAL_GetTick>
 8009f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f9e:	e008      	b.n	8009fb2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fa0:	f7fb fe3c 	bl	8005c1c <HAL_GetTick>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d901      	bls.n	8009fb2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8009fae:	2303      	movs	r3, #3
 8009fb0:	e074      	b.n	800a09c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009fb2:	4b0f      	ldr	r3, [pc, #60]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d0f0      	beq.n	8009fa0 <HAL_RCC_OscConfig+0x528>
 8009fbe:	e06c      	b.n	800a09a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fc0:	4b0b      	ldr	r3, [pc, #44]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a0a      	ldr	r2, [pc, #40]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009fca:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009fcc:	4b08      	ldr	r3, [pc, #32]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	4a07      	ldr	r2, [pc, #28]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009fd2:	f023 0303 	bic.w	r3, r3, #3
 8009fd6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009fd8:	4b05      	ldr	r3, [pc, #20]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	4a04      	ldr	r2, [pc, #16]	; (8009ff0 <HAL_RCC_OscConfig+0x578>)
 8009fde:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fe6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fe8:	f7fb fe18 	bl	8005c1c <HAL_GetTick>
 8009fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009fee:	e00e      	b.n	800a00e <HAL_RCC_OscConfig+0x596>
 8009ff0:	40021000 	.word	0x40021000
 8009ff4:	40007000 	.word	0x40007000
 8009ff8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ffc:	f7fb fe0e 	bl	8005c1c <HAL_GetTick>
 800a000:	4602      	mov	r2, r0
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	1ad3      	subs	r3, r2, r3
 800a006:	2b02      	cmp	r3, #2
 800a008:	d901      	bls.n	800a00e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800a00a:	2303      	movs	r3, #3
 800a00c:	e046      	b.n	800a09c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a00e:	4b25      	ldr	r3, [pc, #148]	; (800a0a4 <HAL_RCC_OscConfig+0x62c>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a016:	2b00      	cmp	r3, #0
 800a018:	d1f0      	bne.n	8009ffc <HAL_RCC_OscConfig+0x584>
 800a01a:	e03e      	b.n	800a09a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	69db      	ldr	r3, [r3, #28]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d101      	bne.n	800a028 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	e039      	b.n	800a09c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a028:	4b1e      	ldr	r3, [pc, #120]	; (800a0a4 <HAL_RCC_OscConfig+0x62c>)
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	f003 0203 	and.w	r2, r3, #3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a1b      	ldr	r3, [r3, #32]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d12c      	bne.n	800a096 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a046:	3b01      	subs	r3, #1
 800a048:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d123      	bne.n	800a096 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a058:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d11b      	bne.n	800a096 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a068:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d113      	bne.n	800a096 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a078:	085b      	lsrs	r3, r3, #1
 800a07a:	3b01      	subs	r3, #1
 800a07c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a07e:	429a      	cmp	r2, r3
 800a080:	d109      	bne.n	800a096 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a08c:	085b      	lsrs	r3, r3, #1
 800a08e:	3b01      	subs	r3, #1
 800a090:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a092:	429a      	cmp	r2, r3
 800a094:	d001      	beq.n	800a09a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e000      	b.n	800a09c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800a09a:	2300      	movs	r3, #0
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3720      	adds	r7, #32
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	40021000 	.word	0x40021000

0800a0a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b086      	sub	sp, #24
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d101      	bne.n	800a0c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e11e      	b.n	800a2fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a0c0:	4b91      	ldr	r3, [pc, #580]	; (800a308 <HAL_RCC_ClockConfig+0x260>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f003 030f 	and.w	r3, r3, #15
 800a0c8:	683a      	ldr	r2, [r7, #0]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d910      	bls.n	800a0f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0ce:	4b8e      	ldr	r3, [pc, #568]	; (800a308 <HAL_RCC_ClockConfig+0x260>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f023 020f 	bic.w	r2, r3, #15
 800a0d6:	498c      	ldr	r1, [pc, #560]	; (800a308 <HAL_RCC_ClockConfig+0x260>)
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0de:	4b8a      	ldr	r3, [pc, #552]	; (800a308 <HAL_RCC_ClockConfig+0x260>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f003 030f 	and.w	r3, r3, #15
 800a0e6:	683a      	ldr	r2, [r7, #0]
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d001      	beq.n	800a0f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e106      	b.n	800a2fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f003 0301 	and.w	r3, r3, #1
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d073      	beq.n	800a1e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	2b03      	cmp	r3, #3
 800a102:	d129      	bne.n	800a158 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a104:	4b81      	ldr	r3, [pc, #516]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d101      	bne.n	800a114 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e0f4      	b.n	800a2fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a114:	f000 f99e 	bl	800a454 <RCC_GetSysClockFreqFromPLLSource>
 800a118:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	4a7c      	ldr	r2, [pc, #496]	; (800a310 <HAL_RCC_ClockConfig+0x268>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d93f      	bls.n	800a1a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a122:	4b7a      	ldr	r3, [pc, #488]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d009      	beq.n	800a142 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a136:	2b00      	cmp	r3, #0
 800a138:	d033      	beq.n	800a1a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d12f      	bne.n	800a1a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a142:	4b72      	ldr	r3, [pc, #456]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a14a:	4a70      	ldr	r2, [pc, #448]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a14c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a150:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a152:	2380      	movs	r3, #128	; 0x80
 800a154:	617b      	str	r3, [r7, #20]
 800a156:	e024      	b.n	800a1a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	d107      	bne.n	800a170 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a160:	4b6a      	ldr	r3, [pc, #424]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d109      	bne.n	800a180 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a16c:	2301      	movs	r3, #1
 800a16e:	e0c6      	b.n	800a2fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a170:	4b66      	ldr	r3, [pc, #408]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d101      	bne.n	800a180 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	e0be      	b.n	800a2fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a180:	f000 f8ce 	bl	800a320 <HAL_RCC_GetSysClockFreq>
 800a184:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	4a61      	ldr	r2, [pc, #388]	; (800a310 <HAL_RCC_ClockConfig+0x268>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d909      	bls.n	800a1a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a18e:	4b5f      	ldr	r3, [pc, #380]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a196:	4a5d      	ldr	r2, [pc, #372]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a19c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a19e:	2380      	movs	r3, #128	; 0x80
 800a1a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a1a2:	4b5a      	ldr	r3, [pc, #360]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	f023 0203 	bic.w	r2, r3, #3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	4957      	ldr	r1, [pc, #348]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1b4:	f7fb fd32 	bl	8005c1c <HAL_GetTick>
 800a1b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1ba:	e00a      	b.n	800a1d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1bc:	f7fb fd2e 	bl	8005c1c <HAL_GetTick>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d901      	bls.n	800a1d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	e095      	b.n	800a2fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1d2:	4b4e      	ldr	r3, [pc, #312]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	f003 020c 	and.w	r2, r3, #12
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d1eb      	bne.n	800a1bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 0302 	and.w	r3, r3, #2
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d023      	beq.n	800a238 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 0304 	and.w	r3, r3, #4
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d005      	beq.n	800a208 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a1fc:	4b43      	ldr	r3, [pc, #268]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	4a42      	ldr	r2, [pc, #264]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a202:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a206:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 0308 	and.w	r3, r3, #8
 800a210:	2b00      	cmp	r3, #0
 800a212:	d007      	beq.n	800a224 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a214:	4b3d      	ldr	r3, [pc, #244]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a21c:	4a3b      	ldr	r2, [pc, #236]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a21e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a222:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a224:	4b39      	ldr	r3, [pc, #228]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	4936      	ldr	r1, [pc, #216]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a232:	4313      	orrs	r3, r2
 800a234:	608b      	str	r3, [r1, #8]
 800a236:	e008      	b.n	800a24a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	2b80      	cmp	r3, #128	; 0x80
 800a23c:	d105      	bne.n	800a24a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a23e:	4b33      	ldr	r3, [pc, #204]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	4a32      	ldr	r2, [pc, #200]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a244:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a248:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a24a:	4b2f      	ldr	r3, [pc, #188]	; (800a308 <HAL_RCC_ClockConfig+0x260>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f003 030f 	and.w	r3, r3, #15
 800a252:	683a      	ldr	r2, [r7, #0]
 800a254:	429a      	cmp	r2, r3
 800a256:	d21d      	bcs.n	800a294 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a258:	4b2b      	ldr	r3, [pc, #172]	; (800a308 <HAL_RCC_ClockConfig+0x260>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f023 020f 	bic.w	r2, r3, #15
 800a260:	4929      	ldr	r1, [pc, #164]	; (800a308 <HAL_RCC_ClockConfig+0x260>)
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	4313      	orrs	r3, r2
 800a266:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a268:	f7fb fcd8 	bl	8005c1c <HAL_GetTick>
 800a26c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a26e:	e00a      	b.n	800a286 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a270:	f7fb fcd4 	bl	8005c1c <HAL_GetTick>
 800a274:	4602      	mov	r2, r0
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	1ad3      	subs	r3, r2, r3
 800a27a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a27e:	4293      	cmp	r3, r2
 800a280:	d901      	bls.n	800a286 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a282:	2303      	movs	r3, #3
 800a284:	e03b      	b.n	800a2fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a286:	4b20      	ldr	r3, [pc, #128]	; (800a308 <HAL_RCC_ClockConfig+0x260>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f003 030f 	and.w	r3, r3, #15
 800a28e:	683a      	ldr	r2, [r7, #0]
 800a290:	429a      	cmp	r2, r3
 800a292:	d1ed      	bne.n	800a270 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 0304 	and.w	r3, r3, #4
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d008      	beq.n	800a2b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a2a0:	4b1a      	ldr	r3, [pc, #104]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	4917      	ldr	r1, [pc, #92]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 0308 	and.w	r3, r3, #8
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d009      	beq.n	800a2d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a2be:	4b13      	ldr	r3, [pc, #76]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	00db      	lsls	r3, r3, #3
 800a2cc:	490f      	ldr	r1, [pc, #60]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a2d2:	f000 f825 	bl	800a320 <HAL_RCC_GetSysClockFreq>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	4b0c      	ldr	r3, [pc, #48]	; (800a30c <HAL_RCC_ClockConfig+0x264>)
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	091b      	lsrs	r3, r3, #4
 800a2de:	f003 030f 	and.w	r3, r3, #15
 800a2e2:	490c      	ldr	r1, [pc, #48]	; (800a314 <HAL_RCC_ClockConfig+0x26c>)
 800a2e4:	5ccb      	ldrb	r3, [r1, r3]
 800a2e6:	f003 031f 	and.w	r3, r3, #31
 800a2ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a2ee:	4a0a      	ldr	r2, [pc, #40]	; (800a318 <HAL_RCC_ClockConfig+0x270>)
 800a2f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a2f2:	4b0a      	ldr	r3, [pc, #40]	; (800a31c <HAL_RCC_ClockConfig+0x274>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7fb fc44 	bl	8005b84 <HAL_InitTick>
 800a2fc:	4603      	mov	r3, r0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3718      	adds	r7, #24
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	40022000 	.word	0x40022000
 800a30c:	40021000 	.word	0x40021000
 800a310:	04c4b400 	.word	0x04c4b400
 800a314:	080133ac 	.word	0x080133ac
 800a318:	20000000 	.word	0x20000000
 800a31c:	20000004 	.word	0x20000004

0800a320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a320:	b480      	push	{r7}
 800a322:	b087      	sub	sp, #28
 800a324:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a326:	4b2c      	ldr	r3, [pc, #176]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	f003 030c 	and.w	r3, r3, #12
 800a32e:	2b04      	cmp	r3, #4
 800a330:	d102      	bne.n	800a338 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a332:	4b2a      	ldr	r3, [pc, #168]	; (800a3dc <HAL_RCC_GetSysClockFreq+0xbc>)
 800a334:	613b      	str	r3, [r7, #16]
 800a336:	e047      	b.n	800a3c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a338:	4b27      	ldr	r3, [pc, #156]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f003 030c 	and.w	r3, r3, #12
 800a340:	2b08      	cmp	r3, #8
 800a342:	d102      	bne.n	800a34a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a344:	4b26      	ldr	r3, [pc, #152]	; (800a3e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a346:	613b      	str	r3, [r7, #16]
 800a348:	e03e      	b.n	800a3c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a34a:	4b23      	ldr	r3, [pc, #140]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	f003 030c 	and.w	r3, r3, #12
 800a352:	2b0c      	cmp	r3, #12
 800a354:	d136      	bne.n	800a3c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a356:	4b20      	ldr	r3, [pc, #128]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	f003 0303 	and.w	r3, r3, #3
 800a35e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a360:	4b1d      	ldr	r3, [pc, #116]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a362:	68db      	ldr	r3, [r3, #12]
 800a364:	091b      	lsrs	r3, r3, #4
 800a366:	f003 030f 	and.w	r3, r3, #15
 800a36a:	3301      	adds	r3, #1
 800a36c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2b03      	cmp	r3, #3
 800a372:	d10c      	bne.n	800a38e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a374:	4a1a      	ldr	r2, [pc, #104]	; (800a3e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	fbb2 f3f3 	udiv	r3, r2, r3
 800a37c:	4a16      	ldr	r2, [pc, #88]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a37e:	68d2      	ldr	r2, [r2, #12]
 800a380:	0a12      	lsrs	r2, r2, #8
 800a382:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a386:	fb02 f303 	mul.w	r3, r2, r3
 800a38a:	617b      	str	r3, [r7, #20]
      break;
 800a38c:	e00c      	b.n	800a3a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a38e:	4a13      	ldr	r2, [pc, #76]	; (800a3dc <HAL_RCC_GetSysClockFreq+0xbc>)
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	fbb2 f3f3 	udiv	r3, r2, r3
 800a396:	4a10      	ldr	r2, [pc, #64]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a398:	68d2      	ldr	r2, [r2, #12]
 800a39a:	0a12      	lsrs	r2, r2, #8
 800a39c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a3a0:	fb02 f303 	mul.w	r3, r2, r3
 800a3a4:	617b      	str	r3, [r7, #20]
      break;
 800a3a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a3a8:	4b0b      	ldr	r3, [pc, #44]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	0e5b      	lsrs	r3, r3, #25
 800a3ae:	f003 0303 	and.w	r3, r3, #3
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	005b      	lsls	r3, r3, #1
 800a3b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a3b8:	697a      	ldr	r2, [r7, #20]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3c0:	613b      	str	r3, [r7, #16]
 800a3c2:	e001      	b.n	800a3c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a3c8:	693b      	ldr	r3, [r7, #16]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	371c      	adds	r7, #28
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	40021000 	.word	0x40021000
 800a3dc:	00f42400 	.word	0x00f42400
 800a3e0:	007a1200 	.word	0x007a1200

0800a3e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a3e8:	4b03      	ldr	r3, [pc, #12]	; (800a3f8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	20000000 	.word	0x20000000

0800a3fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a400:	f7ff fff0 	bl	800a3e4 <HAL_RCC_GetHCLKFreq>
 800a404:	4602      	mov	r2, r0
 800a406:	4b06      	ldr	r3, [pc, #24]	; (800a420 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	0a1b      	lsrs	r3, r3, #8
 800a40c:	f003 0307 	and.w	r3, r3, #7
 800a410:	4904      	ldr	r1, [pc, #16]	; (800a424 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a412:	5ccb      	ldrb	r3, [r1, r3]
 800a414:	f003 031f 	and.w	r3, r3, #31
 800a418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	40021000 	.word	0x40021000
 800a424:	080133bc 	.word	0x080133bc

0800a428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a42c:	f7ff ffda 	bl	800a3e4 <HAL_RCC_GetHCLKFreq>
 800a430:	4602      	mov	r2, r0
 800a432:	4b06      	ldr	r3, [pc, #24]	; (800a44c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	0adb      	lsrs	r3, r3, #11
 800a438:	f003 0307 	and.w	r3, r3, #7
 800a43c:	4904      	ldr	r1, [pc, #16]	; (800a450 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a43e:	5ccb      	ldrb	r3, [r1, r3]
 800a440:	f003 031f 	and.w	r3, r3, #31
 800a444:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a448:	4618      	mov	r0, r3
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	40021000 	.word	0x40021000
 800a450:	080133bc 	.word	0x080133bc

0800a454 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a454:	b480      	push	{r7}
 800a456:	b087      	sub	sp, #28
 800a458:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a45a:	4b1e      	ldr	r3, [pc, #120]	; (800a4d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	f003 0303 	and.w	r3, r3, #3
 800a462:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a464:	4b1b      	ldr	r3, [pc, #108]	; (800a4d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	091b      	lsrs	r3, r3, #4
 800a46a:	f003 030f 	and.w	r3, r3, #15
 800a46e:	3301      	adds	r3, #1
 800a470:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	2b03      	cmp	r3, #3
 800a476:	d10c      	bne.n	800a492 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a478:	4a17      	ldr	r2, [pc, #92]	; (800a4d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a480:	4a14      	ldr	r2, [pc, #80]	; (800a4d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a482:	68d2      	ldr	r2, [r2, #12]
 800a484:	0a12      	lsrs	r2, r2, #8
 800a486:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a48a:	fb02 f303 	mul.w	r3, r2, r3
 800a48e:	617b      	str	r3, [r7, #20]
    break;
 800a490:	e00c      	b.n	800a4ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a492:	4a12      	ldr	r2, [pc, #72]	; (800a4dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	fbb2 f3f3 	udiv	r3, r2, r3
 800a49a:	4a0e      	ldr	r2, [pc, #56]	; (800a4d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a49c:	68d2      	ldr	r2, [r2, #12]
 800a49e:	0a12      	lsrs	r2, r2, #8
 800a4a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a4a4:	fb02 f303 	mul.w	r3, r2, r3
 800a4a8:	617b      	str	r3, [r7, #20]
    break;
 800a4aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a4ac:	4b09      	ldr	r3, [pc, #36]	; (800a4d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	0e5b      	lsrs	r3, r3, #25
 800a4b2:	f003 0303 	and.w	r3, r3, #3
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	005b      	lsls	r3, r3, #1
 800a4ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a4bc:	697a      	ldr	r2, [r7, #20]
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a4c6:	687b      	ldr	r3, [r7, #4]
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	371c      	adds	r7, #28
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr
 800a4d4:	40021000 	.word	0x40021000
 800a4d8:	007a1200 	.word	0x007a1200
 800a4dc:	00f42400 	.word	0x00f42400

0800a4e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f000 8098 	beq.w	800a62e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a4fe:	2300      	movs	r3, #0
 800a500:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a502:	4b43      	ldr	r3, [pc, #268]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d10d      	bne.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a50e:	4b40      	ldr	r3, [pc, #256]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a512:	4a3f      	ldr	r2, [pc, #252]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a518:	6593      	str	r3, [r2, #88]	; 0x58
 800a51a:	4b3d      	ldr	r3, [pc, #244]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a51c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a51e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a522:	60bb      	str	r3, [r7, #8]
 800a524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a526:	2301      	movs	r3, #1
 800a528:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a52a:	4b3a      	ldr	r3, [pc, #232]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a39      	ldr	r2, [pc, #228]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a534:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a536:	f7fb fb71 	bl	8005c1c <HAL_GetTick>
 800a53a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a53c:	e009      	b.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a53e:	f7fb fb6d 	bl	8005c1c <HAL_GetTick>
 800a542:	4602      	mov	r2, r0
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	1ad3      	subs	r3, r2, r3
 800a548:	2b02      	cmp	r3, #2
 800a54a:	d902      	bls.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a54c:	2303      	movs	r3, #3
 800a54e:	74fb      	strb	r3, [r7, #19]
        break;
 800a550:	e005      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a552:	4b30      	ldr	r3, [pc, #192]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d0ef      	beq.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a55e:	7cfb      	ldrb	r3, [r7, #19]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d159      	bne.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a564:	4b2a      	ldr	r3, [pc, #168]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a56a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a56e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d01e      	beq.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a57a:	697a      	ldr	r2, [r7, #20]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d019      	beq.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a580:	4b23      	ldr	r3, [pc, #140]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a58a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a58c:	4b20      	ldr	r3, [pc, #128]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a58e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a592:	4a1f      	ldr	r2, [pc, #124]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a59c:	4b1c      	ldr	r3, [pc, #112]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a59e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5a2:	4a1b      	ldr	r2, [pc, #108]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a5ac:	4a18      	ldr	r2, [pc, #96]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	f003 0301 	and.w	r3, r3, #1
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d016      	beq.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5be:	f7fb fb2d 	bl	8005c1c <HAL_GetTick>
 800a5c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5c4:	e00b      	b.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5c6:	f7fb fb29 	bl	8005c1c <HAL_GetTick>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	1ad3      	subs	r3, r2, r3
 800a5d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d902      	bls.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	74fb      	strb	r3, [r7, #19]
            break;
 800a5dc:	e006      	b.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5de:	4b0c      	ldr	r3, [pc, #48]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5e4:	f003 0302 	and.w	r3, r3, #2
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d0ec      	beq.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a5ec:	7cfb      	ldrb	r3, [r7, #19]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d10b      	bne.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a5f2:	4b07      	ldr	r3, [pc, #28]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a600:	4903      	ldr	r1, [pc, #12]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a602:	4313      	orrs	r3, r2
 800a604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a608:	e008      	b.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a60a:	7cfb      	ldrb	r3, [r7, #19]
 800a60c:	74bb      	strb	r3, [r7, #18]
 800a60e:	e005      	b.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a610:	40021000 	.word	0x40021000
 800a614:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a618:	7cfb      	ldrb	r3, [r7, #19]
 800a61a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a61c:	7c7b      	ldrb	r3, [r7, #17]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d105      	bne.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a622:	4ba6      	ldr	r3, [pc, #664]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a626:	4aa5      	ldr	r2, [pc, #660]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a62c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f003 0301 	and.w	r3, r3, #1
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00a      	beq.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a63a:	4ba0      	ldr	r3, [pc, #640]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a63c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a640:	f023 0203 	bic.w	r2, r3, #3
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	499c      	ldr	r1, [pc, #624]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a64a:	4313      	orrs	r3, r2
 800a64c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f003 0302 	and.w	r3, r3, #2
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d00a      	beq.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a65c:	4b97      	ldr	r3, [pc, #604]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a65e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a662:	f023 020c 	bic.w	r2, r3, #12
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	4994      	ldr	r1, [pc, #592]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a66c:	4313      	orrs	r3, r2
 800a66e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 0304 	and.w	r3, r3, #4
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00a      	beq.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a67e:	4b8f      	ldr	r3, [pc, #572]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a684:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	68db      	ldr	r3, [r3, #12]
 800a68c:	498b      	ldr	r1, [pc, #556]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a68e:	4313      	orrs	r3, r2
 800a690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 0308 	and.w	r3, r3, #8
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d00a      	beq.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a6a0:	4b86      	ldr	r3, [pc, #536]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	4983      	ldr	r1, [pc, #524]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f003 0320 	and.w	r3, r3, #32
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00a      	beq.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a6c2:	4b7e      	ldr	r3, [pc, #504]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	695b      	ldr	r3, [r3, #20]
 800a6d0:	497a      	ldr	r1, [pc, #488]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d00a      	beq.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a6e4:	4b75      	ldr	r3, [pc, #468]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	699b      	ldr	r3, [r3, #24]
 800a6f2:	4972      	ldr	r1, [pc, #456]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00a      	beq.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a706:	4b6d      	ldr	r3, [pc, #436]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a70c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	69db      	ldr	r3, [r3, #28]
 800a714:	4969      	ldr	r1, [pc, #420]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a716:	4313      	orrs	r3, r2
 800a718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a724:	2b00      	cmp	r3, #0
 800a726:	d00a      	beq.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a728:	4b64      	ldr	r3, [pc, #400]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a72a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a72e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6a1b      	ldr	r3, [r3, #32]
 800a736:	4961      	ldr	r1, [pc, #388]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a738:	4313      	orrs	r3, r2
 800a73a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a746:	2b00      	cmp	r3, #0
 800a748:	d00a      	beq.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a74a:	4b5c      	ldr	r3, [pc, #368]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a74c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a750:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a758:	4958      	ldr	r1, [pc, #352]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a75a:	4313      	orrs	r3, r2
 800a75c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d015      	beq.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a76c:	4b53      	ldr	r3, [pc, #332]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a76e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a772:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a77a:	4950      	ldr	r1, [pc, #320]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a77c:	4313      	orrs	r3, r2
 800a77e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a78a:	d105      	bne.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a78c:	4b4b      	ldr	r3, [pc, #300]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	4a4a      	ldr	r2, [pc, #296]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a796:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d015      	beq.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a7a4:	4b45      	ldr	r3, [pc, #276]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b2:	4942      	ldr	r1, [pc, #264]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7c2:	d105      	bne.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a7c4:	4b3d      	ldr	r3, [pc, #244]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	4a3c      	ldr	r2, [pc, #240]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7ce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d015      	beq.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a7dc:	4b37      	ldr	r3, [pc, #220]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ea:	4934      	ldr	r1, [pc, #208]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a7fa:	d105      	bne.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a7fc:	4b2f      	ldr	r3, [pc, #188]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	4a2e      	ldr	r2, [pc, #184]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a802:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a806:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a810:	2b00      	cmp	r3, #0
 800a812:	d015      	beq.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a814:	4b29      	ldr	r3, [pc, #164]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a81a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a822:	4926      	ldr	r1, [pc, #152]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a824:	4313      	orrs	r3, r2
 800a826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a82e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a832:	d105      	bne.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a834:	4b21      	ldr	r3, [pc, #132]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	4a20      	ldr	r2, [pc, #128]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a83a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a83e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d015      	beq.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a84c:	4b1b      	ldr	r3, [pc, #108]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a84e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a852:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a85a:	4918      	ldr	r1, [pc, #96]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a85c:	4313      	orrs	r3, r2
 800a85e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a866:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a86a:	d105      	bne.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a86c:	4b13      	ldr	r3, [pc, #76]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	4a12      	ldr	r2, [pc, #72]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a872:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a876:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a880:	2b00      	cmp	r3, #0
 800a882:	d015      	beq.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a884:	4b0d      	ldr	r3, [pc, #52]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a88a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a892:	490a      	ldr	r1, [pc, #40]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a894:	4313      	orrs	r3, r2
 800a896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a89e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8a2:	d105      	bne.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a8a4:	4b05      	ldr	r3, [pc, #20]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	4a04      	ldr	r2, [pc, #16]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a8b0:	7cbb      	ldrb	r3, [r7, #18]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3718      	adds	r7, #24
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	40021000 	.word	0x40021000

0800a8c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d101      	bne.n	800a8d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e049      	b.n	800a966 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d106      	bne.n	800a8ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f7fa ff96 	bl	8005818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2202      	movs	r2, #2
 800a8f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	3304      	adds	r3, #4
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	4610      	mov	r0, r2
 800a900:	f000 fdba 	bl	800b478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2201      	movs	r2, #1
 800a908:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2201      	movs	r2, #1
 800a920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2201      	movs	r2, #1
 800a938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2201      	movs	r2, #1
 800a940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2201      	movs	r2, #1
 800a948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a964:	2300      	movs	r3, #0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
	...

0800a970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	2b01      	cmp	r3, #1
 800a982:	d001      	beq.n	800a988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	e04a      	b.n	800aa1e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2202      	movs	r2, #2
 800a98c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68da      	ldr	r2, [r3, #12]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f042 0201 	orr.w	r2, r2, #1
 800a99e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a21      	ldr	r2, [pc, #132]	; (800aa2c <HAL_TIM_Base_Start_IT+0xbc>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d018      	beq.n	800a9dc <HAL_TIM_Base_Start_IT+0x6c>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9b2:	d013      	beq.n	800a9dc <HAL_TIM_Base_Start_IT+0x6c>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a1d      	ldr	r2, [pc, #116]	; (800aa30 <HAL_TIM_Base_Start_IT+0xc0>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d00e      	beq.n	800a9dc <HAL_TIM_Base_Start_IT+0x6c>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a1c      	ldr	r2, [pc, #112]	; (800aa34 <HAL_TIM_Base_Start_IT+0xc4>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d009      	beq.n	800a9dc <HAL_TIM_Base_Start_IT+0x6c>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a1a      	ldr	r2, [pc, #104]	; (800aa38 <HAL_TIM_Base_Start_IT+0xc8>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d004      	beq.n	800a9dc <HAL_TIM_Base_Start_IT+0x6c>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a19      	ldr	r2, [pc, #100]	; (800aa3c <HAL_TIM_Base_Start_IT+0xcc>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d115      	bne.n	800aa08 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	689a      	ldr	r2, [r3, #8]
 800a9e2:	4b17      	ldr	r3, [pc, #92]	; (800aa40 <HAL_TIM_Base_Start_IT+0xd0>)
 800a9e4:	4013      	ands	r3, r2
 800a9e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2b06      	cmp	r3, #6
 800a9ec:	d015      	beq.n	800aa1a <HAL_TIM_Base_Start_IT+0xaa>
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9f4:	d011      	beq.n	800aa1a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f042 0201 	orr.w	r2, r2, #1
 800aa04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa06:	e008      	b.n	800aa1a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f042 0201 	orr.w	r2, r2, #1
 800aa16:	601a      	str	r2, [r3, #0]
 800aa18:	e000      	b.n	800aa1c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3714      	adds	r7, #20
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	40012c00 	.word	0x40012c00
 800aa30:	40000400 	.word	0x40000400
 800aa34:	40000800 	.word	0x40000800
 800aa38:	40013400 	.word	0x40013400
 800aa3c:	40014000 	.word	0x40014000
 800aa40:	00010007 	.word	0x00010007

0800aa44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d101      	bne.n	800aa56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aa52:	2301      	movs	r3, #1
 800aa54:	e049      	b.n	800aaea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d106      	bne.n	800aa70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 f841 	bl	800aaf2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2202      	movs	r2, #2
 800aa74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	3304      	adds	r3, #4
 800aa80:	4619      	mov	r1, r3
 800aa82:	4610      	mov	r0, r2
 800aa84:	f000 fcf8 	bl	800b478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2201      	movs	r2, #1
 800aab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3708      	adds	r7, #8
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800aaf2:	b480      	push	{r7}
 800aaf4:	b083      	sub	sp, #12
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800aafa:	bf00      	nop
 800aafc:	370c      	adds	r7, #12
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
	...

0800ab08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d109      	bne.n	800ab2c <HAL_TIM_PWM_Start+0x24>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	bf14      	ite	ne
 800ab24:	2301      	movne	r3, #1
 800ab26:	2300      	moveq	r3, #0
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	e03c      	b.n	800aba6 <HAL_TIM_PWM_Start+0x9e>
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	2b04      	cmp	r3, #4
 800ab30:	d109      	bne.n	800ab46 <HAL_TIM_PWM_Start+0x3e>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	bf14      	ite	ne
 800ab3e:	2301      	movne	r3, #1
 800ab40:	2300      	moveq	r3, #0
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	e02f      	b.n	800aba6 <HAL_TIM_PWM_Start+0x9e>
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	2b08      	cmp	r3, #8
 800ab4a:	d109      	bne.n	800ab60 <HAL_TIM_PWM_Start+0x58>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	bf14      	ite	ne
 800ab58:	2301      	movne	r3, #1
 800ab5a:	2300      	moveq	r3, #0
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	e022      	b.n	800aba6 <HAL_TIM_PWM_Start+0x9e>
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	2b0c      	cmp	r3, #12
 800ab64:	d109      	bne.n	800ab7a <HAL_TIM_PWM_Start+0x72>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	bf14      	ite	ne
 800ab72:	2301      	movne	r3, #1
 800ab74:	2300      	moveq	r3, #0
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	e015      	b.n	800aba6 <HAL_TIM_PWM_Start+0x9e>
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	2b10      	cmp	r3, #16
 800ab7e:	d109      	bne.n	800ab94 <HAL_TIM_PWM_Start+0x8c>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	bf14      	ite	ne
 800ab8c:	2301      	movne	r3, #1
 800ab8e:	2300      	moveq	r3, #0
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	e008      	b.n	800aba6 <HAL_TIM_PWM_Start+0x9e>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	bf14      	ite	ne
 800aba0:	2301      	movne	r3, #1
 800aba2:	2300      	moveq	r3, #0
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d001      	beq.n	800abae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	e097      	b.n	800acde <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d104      	bne.n	800abbe <HAL_TIM_PWM_Start+0xb6>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2202      	movs	r2, #2
 800abb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abbc:	e023      	b.n	800ac06 <HAL_TIM_PWM_Start+0xfe>
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	2b04      	cmp	r3, #4
 800abc2:	d104      	bne.n	800abce <HAL_TIM_PWM_Start+0xc6>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2202      	movs	r2, #2
 800abc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800abcc:	e01b      	b.n	800ac06 <HAL_TIM_PWM_Start+0xfe>
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	2b08      	cmp	r3, #8
 800abd2:	d104      	bne.n	800abde <HAL_TIM_PWM_Start+0xd6>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2202      	movs	r2, #2
 800abd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800abdc:	e013      	b.n	800ac06 <HAL_TIM_PWM_Start+0xfe>
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	2b0c      	cmp	r3, #12
 800abe2:	d104      	bne.n	800abee <HAL_TIM_PWM_Start+0xe6>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2202      	movs	r2, #2
 800abe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800abec:	e00b      	b.n	800ac06 <HAL_TIM_PWM_Start+0xfe>
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	2b10      	cmp	r3, #16
 800abf2:	d104      	bne.n	800abfe <HAL_TIM_PWM_Start+0xf6>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2202      	movs	r2, #2
 800abf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abfc:	e003      	b.n	800ac06 <HAL_TIM_PWM_Start+0xfe>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2202      	movs	r2, #2
 800ac02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	6839      	ldr	r1, [r7, #0]
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f001 f854 	bl	800bcbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a33      	ldr	r2, [pc, #204]	; (800ace8 <HAL_TIM_PWM_Start+0x1e0>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d013      	beq.n	800ac46 <HAL_TIM_PWM_Start+0x13e>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a32      	ldr	r2, [pc, #200]	; (800acec <HAL_TIM_PWM_Start+0x1e4>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d00e      	beq.n	800ac46 <HAL_TIM_PWM_Start+0x13e>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a30      	ldr	r2, [pc, #192]	; (800acf0 <HAL_TIM_PWM_Start+0x1e8>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d009      	beq.n	800ac46 <HAL_TIM_PWM_Start+0x13e>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a2f      	ldr	r2, [pc, #188]	; (800acf4 <HAL_TIM_PWM_Start+0x1ec>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d004      	beq.n	800ac46 <HAL_TIM_PWM_Start+0x13e>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a2d      	ldr	r2, [pc, #180]	; (800acf8 <HAL_TIM_PWM_Start+0x1f0>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d101      	bne.n	800ac4a <HAL_TIM_PWM_Start+0x142>
 800ac46:	2301      	movs	r3, #1
 800ac48:	e000      	b.n	800ac4c <HAL_TIM_PWM_Start+0x144>
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d007      	beq.n	800ac60 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac5e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4a20      	ldr	r2, [pc, #128]	; (800ace8 <HAL_TIM_PWM_Start+0x1e0>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d018      	beq.n	800ac9c <HAL_TIM_PWM_Start+0x194>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac72:	d013      	beq.n	800ac9c <HAL_TIM_PWM_Start+0x194>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a20      	ldr	r2, [pc, #128]	; (800acfc <HAL_TIM_PWM_Start+0x1f4>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d00e      	beq.n	800ac9c <HAL_TIM_PWM_Start+0x194>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a1f      	ldr	r2, [pc, #124]	; (800ad00 <HAL_TIM_PWM_Start+0x1f8>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d009      	beq.n	800ac9c <HAL_TIM_PWM_Start+0x194>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a17      	ldr	r2, [pc, #92]	; (800acec <HAL_TIM_PWM_Start+0x1e4>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d004      	beq.n	800ac9c <HAL_TIM_PWM_Start+0x194>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a16      	ldr	r2, [pc, #88]	; (800acf0 <HAL_TIM_PWM_Start+0x1e8>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d115      	bne.n	800acc8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	689a      	ldr	r2, [r3, #8]
 800aca2:	4b18      	ldr	r3, [pc, #96]	; (800ad04 <HAL_TIM_PWM_Start+0x1fc>)
 800aca4:	4013      	ands	r3, r2
 800aca6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2b06      	cmp	r3, #6
 800acac:	d015      	beq.n	800acda <HAL_TIM_PWM_Start+0x1d2>
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acb4:	d011      	beq.n	800acda <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f042 0201 	orr.w	r2, r2, #1
 800acc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acc6:	e008      	b.n	800acda <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f042 0201 	orr.w	r2, r2, #1
 800acd6:	601a      	str	r2, [r3, #0]
 800acd8:	e000      	b.n	800acdc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3710      	adds	r7, #16
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	40012c00 	.word	0x40012c00
 800acec:	40013400 	.word	0x40013400
 800acf0:	40014000 	.word	0x40014000
 800acf4:	40014400 	.word	0x40014400
 800acf8:	40014800 	.word	0x40014800
 800acfc:	40000400 	.word	0x40000400
 800ad00:	40000800 	.word	0x40000800
 800ad04:	00010007 	.word	0x00010007

0800ad08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	691b      	ldr	r3, [r3, #16]
 800ad16:	f003 0302 	and.w	r3, r3, #2
 800ad1a:	2b02      	cmp	r3, #2
 800ad1c:	d122      	bne.n	800ad64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	f003 0302 	and.w	r3, r3, #2
 800ad28:	2b02      	cmp	r3, #2
 800ad2a:	d11b      	bne.n	800ad64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f06f 0202 	mvn.w	r2, #2
 800ad34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2201      	movs	r2, #1
 800ad3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	699b      	ldr	r3, [r3, #24]
 800ad42:	f003 0303 	and.w	r3, r3, #3
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d003      	beq.n	800ad52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fb76 	bl	800b43c <HAL_TIM_IC_CaptureCallback>
 800ad50:	e005      	b.n	800ad5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 fb68 	bl	800b428 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 fb79 	bl	800b450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	691b      	ldr	r3, [r3, #16]
 800ad6a:	f003 0304 	and.w	r3, r3, #4
 800ad6e:	2b04      	cmp	r3, #4
 800ad70:	d122      	bne.n	800adb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	68db      	ldr	r3, [r3, #12]
 800ad78:	f003 0304 	and.w	r3, r3, #4
 800ad7c:	2b04      	cmp	r3, #4
 800ad7e:	d11b      	bne.n	800adb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f06f 0204 	mvn.w	r2, #4
 800ad88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2202      	movs	r2, #2
 800ad8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	699b      	ldr	r3, [r3, #24]
 800ad96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d003      	beq.n	800ada6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fb4c 	bl	800b43c <HAL_TIM_IC_CaptureCallback>
 800ada4:	e005      	b.n	800adb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 fb3e 	bl	800b428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 fb4f 	bl	800b450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	691b      	ldr	r3, [r3, #16]
 800adbe:	f003 0308 	and.w	r3, r3, #8
 800adc2:	2b08      	cmp	r3, #8
 800adc4:	d122      	bne.n	800ae0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	f003 0308 	and.w	r3, r3, #8
 800add0:	2b08      	cmp	r3, #8
 800add2:	d11b      	bne.n	800ae0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f06f 0208 	mvn.w	r2, #8
 800addc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2204      	movs	r2, #4
 800ade2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	69db      	ldr	r3, [r3, #28]
 800adea:	f003 0303 	and.w	r3, r3, #3
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d003      	beq.n	800adfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fb22 	bl	800b43c <HAL_TIM_IC_CaptureCallback>
 800adf8:	e005      	b.n	800ae06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 fb14 	bl	800b428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 fb25 	bl	800b450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	f003 0310 	and.w	r3, r3, #16
 800ae16:	2b10      	cmp	r3, #16
 800ae18:	d122      	bne.n	800ae60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	f003 0310 	and.w	r3, r3, #16
 800ae24:	2b10      	cmp	r3, #16
 800ae26:	d11b      	bne.n	800ae60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f06f 0210 	mvn.w	r2, #16
 800ae30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2208      	movs	r2, #8
 800ae36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	69db      	ldr	r3, [r3, #28]
 800ae3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d003      	beq.n	800ae4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 faf8 	bl	800b43c <HAL_TIM_IC_CaptureCallback>
 800ae4c:	e005      	b.n	800ae5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 faea 	bl	800b428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 fafb 	bl	800b450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	691b      	ldr	r3, [r3, #16]
 800ae66:	f003 0301 	and.w	r3, r3, #1
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d10e      	bne.n	800ae8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	f003 0301 	and.w	r3, r3, #1
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d107      	bne.n	800ae8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f06f 0201 	mvn.w	r2, #1
 800ae84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fac4 	bl	800b414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	691b      	ldr	r3, [r3, #16]
 800ae92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae96:	2b80      	cmp	r3, #128	; 0x80
 800ae98:	d10e      	bne.n	800aeb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aea4:	2b80      	cmp	r3, #128	; 0x80
 800aea6:	d107      	bne.n	800aeb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aeb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f001 f91b 	bl	800c0ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	691b      	ldr	r3, [r3, #16]
 800aebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aec6:	d10e      	bne.n	800aee6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aed2:	2b80      	cmp	r3, #128	; 0x80
 800aed4:	d107      	bne.n	800aee6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f001 f90e 	bl	800c102 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aef0:	2b40      	cmp	r3, #64	; 0x40
 800aef2:	d10e      	bne.n	800af12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aefe:	2b40      	cmp	r3, #64	; 0x40
 800af00:	d107      	bne.n	800af12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 faa9 	bl	800b464 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	691b      	ldr	r3, [r3, #16]
 800af18:	f003 0320 	and.w	r3, r3, #32
 800af1c:	2b20      	cmp	r3, #32
 800af1e:	d10e      	bne.n	800af3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	f003 0320 	and.w	r3, r3, #32
 800af2a:	2b20      	cmp	r3, #32
 800af2c:	d107      	bne.n	800af3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f06f 0220 	mvn.w	r2, #32
 800af36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f001 f8ce 	bl	800c0da <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	691b      	ldr	r3, [r3, #16]
 800af44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af4c:	d10f      	bne.n	800af6e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af5c:	d107      	bne.n	800af6e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800af66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f001 f8d4 	bl	800c116 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	691b      	ldr	r3, [r3, #16]
 800af74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af7c:	d10f      	bne.n	800af9e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af8c:	d107      	bne.n	800af9e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800af96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f001 f8c6 	bl	800c12a <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800afac:	d10f      	bne.n	800afce <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800afbc:	d107      	bne.n	800afce <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800afc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f001 f8b8 	bl	800c13e <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	691b      	ldr	r3, [r3, #16]
 800afd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800afd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800afdc:	d10f      	bne.n	800affe <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800afe8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800afec:	d107      	bne.n	800affe <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800aff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f001 f8aa 	bl	800c152 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800affe:	bf00      	nop
 800b000:	3708      	adds	r7, #8
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
	...

0800b008 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	60f8      	str	r0, [r7, #12]
 800b010:	60b9      	str	r1, [r7, #8]
 800b012:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d101      	bne.n	800b022 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b01e:	2302      	movs	r3, #2
 800b020:	e0fd      	b.n	800b21e <HAL_TIM_PWM_ConfigChannel+0x216>
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2201      	movs	r2, #1
 800b026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2b14      	cmp	r3, #20
 800b02e:	f200 80f0 	bhi.w	800b212 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b032:	a201      	add	r2, pc, #4	; (adr r2, 800b038 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b038:	0800b08d 	.word	0x0800b08d
 800b03c:	0800b213 	.word	0x0800b213
 800b040:	0800b213 	.word	0x0800b213
 800b044:	0800b213 	.word	0x0800b213
 800b048:	0800b0cd 	.word	0x0800b0cd
 800b04c:	0800b213 	.word	0x0800b213
 800b050:	0800b213 	.word	0x0800b213
 800b054:	0800b213 	.word	0x0800b213
 800b058:	0800b10f 	.word	0x0800b10f
 800b05c:	0800b213 	.word	0x0800b213
 800b060:	0800b213 	.word	0x0800b213
 800b064:	0800b213 	.word	0x0800b213
 800b068:	0800b14f 	.word	0x0800b14f
 800b06c:	0800b213 	.word	0x0800b213
 800b070:	0800b213 	.word	0x0800b213
 800b074:	0800b213 	.word	0x0800b213
 800b078:	0800b191 	.word	0x0800b191
 800b07c:	0800b213 	.word	0x0800b213
 800b080:	0800b213 	.word	0x0800b213
 800b084:	0800b213 	.word	0x0800b213
 800b088:	0800b1d1 	.word	0x0800b1d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	68b9      	ldr	r1, [r7, #8]
 800b092:	4618      	mov	r0, r3
 800b094:	f000 fa80 	bl	800b598 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	699a      	ldr	r2, [r3, #24]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f042 0208 	orr.w	r2, r2, #8
 800b0a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	699a      	ldr	r2, [r3, #24]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f022 0204 	bic.w	r2, r2, #4
 800b0b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	6999      	ldr	r1, [r3, #24]
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	691a      	ldr	r2, [r3, #16]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	430a      	orrs	r2, r1
 800b0c8:	619a      	str	r2, [r3, #24]
      break;
 800b0ca:	e0a3      	b.n	800b214 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	68b9      	ldr	r1, [r7, #8]
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 faf0 	bl	800b6b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	699a      	ldr	r2, [r3, #24]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	699a      	ldr	r2, [r3, #24]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	6999      	ldr	r1, [r3, #24]
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	021a      	lsls	r2, r3, #8
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	430a      	orrs	r2, r1
 800b10a:	619a      	str	r2, [r3, #24]
      break;
 800b10c:	e082      	b.n	800b214 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	68b9      	ldr	r1, [r7, #8]
 800b114:	4618      	mov	r0, r3
 800b116:	f000 fb59 	bl	800b7cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	69da      	ldr	r2, [r3, #28]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f042 0208 	orr.w	r2, r2, #8
 800b128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	69da      	ldr	r2, [r3, #28]
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f022 0204 	bic.w	r2, r2, #4
 800b138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	69d9      	ldr	r1, [r3, #28]
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	691a      	ldr	r2, [r3, #16]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	430a      	orrs	r2, r1
 800b14a:	61da      	str	r2, [r3, #28]
      break;
 800b14c:	e062      	b.n	800b214 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	68b9      	ldr	r1, [r7, #8]
 800b154:	4618      	mov	r0, r3
 800b156:	f000 fbc1 	bl	800b8dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	69da      	ldr	r2, [r3, #28]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	69da      	ldr	r2, [r3, #28]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	69d9      	ldr	r1, [r3, #28]
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	021a      	lsls	r2, r3, #8
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	430a      	orrs	r2, r1
 800b18c:	61da      	str	r2, [r3, #28]
      break;
 800b18e:	e041      	b.n	800b214 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	68b9      	ldr	r1, [r7, #8]
 800b196:	4618      	mov	r0, r3
 800b198:	f000 fc2a 	bl	800b9f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f042 0208 	orr.w	r2, r2, #8
 800b1aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f022 0204 	bic.w	r2, r2, #4
 800b1ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	691a      	ldr	r2, [r3, #16]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	430a      	orrs	r2, r1
 800b1cc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b1ce:	e021      	b.n	800b214 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	68b9      	ldr	r1, [r7, #8]
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f000 fc6e 	bl	800bab8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	021a      	lsls	r2, r3, #8
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	430a      	orrs	r2, r1
 800b20e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b210:	e000      	b.n	800b214 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b212:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2200      	movs	r2, #0
 800b218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b21c:	2300      	movs	r3, #0
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop

0800b228 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d101      	bne.n	800b240 <HAL_TIM_ConfigClockSource+0x18>
 800b23c:	2302      	movs	r3, #2
 800b23e:	e0dd      	b.n	800b3fc <HAL_TIM_ConfigClockSource+0x1d4>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2202      	movs	r2, #2
 800b24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800b25e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b262:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b26a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a62      	ldr	r2, [pc, #392]	; (800b404 <HAL_TIM_ConfigClockSource+0x1dc>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	f000 80a9 	beq.w	800b3d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b280:	4a60      	ldr	r2, [pc, #384]	; (800b404 <HAL_TIM_ConfigClockSource+0x1dc>)
 800b282:	4293      	cmp	r3, r2
 800b284:	f200 80ae 	bhi.w	800b3e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b288:	4a5f      	ldr	r2, [pc, #380]	; (800b408 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	f000 80a1 	beq.w	800b3d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b290:	4a5d      	ldr	r2, [pc, #372]	; (800b408 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b292:	4293      	cmp	r3, r2
 800b294:	f200 80a6 	bhi.w	800b3e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b298:	4a5c      	ldr	r2, [pc, #368]	; (800b40c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	f000 8099 	beq.w	800b3d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b2a0:	4a5a      	ldr	r2, [pc, #360]	; (800b40c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	f200 809e 	bhi.w	800b3e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2a8:	4a59      	ldr	r2, [pc, #356]	; (800b410 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	f000 8091 	beq.w	800b3d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b2b0:	4a57      	ldr	r2, [pc, #348]	; (800b410 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	f200 8096 	bhi.w	800b3e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b2bc:	f000 8089 	beq.w	800b3d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b2c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b2c4:	f200 808e 	bhi.w	800b3e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2cc:	d03e      	beq.n	800b34c <HAL_TIM_ConfigClockSource+0x124>
 800b2ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2d2:	f200 8087 	bhi.w	800b3e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2da:	f000 8085 	beq.w	800b3e8 <HAL_TIM_ConfigClockSource+0x1c0>
 800b2de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2e2:	d87f      	bhi.n	800b3e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2e4:	2b70      	cmp	r3, #112	; 0x70
 800b2e6:	d01a      	beq.n	800b31e <HAL_TIM_ConfigClockSource+0xf6>
 800b2e8:	2b70      	cmp	r3, #112	; 0x70
 800b2ea:	d87b      	bhi.n	800b3e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2ec:	2b60      	cmp	r3, #96	; 0x60
 800b2ee:	d050      	beq.n	800b392 <HAL_TIM_ConfigClockSource+0x16a>
 800b2f0:	2b60      	cmp	r3, #96	; 0x60
 800b2f2:	d877      	bhi.n	800b3e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2f4:	2b50      	cmp	r3, #80	; 0x50
 800b2f6:	d03c      	beq.n	800b372 <HAL_TIM_ConfigClockSource+0x14a>
 800b2f8:	2b50      	cmp	r3, #80	; 0x50
 800b2fa:	d873      	bhi.n	800b3e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2fc:	2b40      	cmp	r3, #64	; 0x40
 800b2fe:	d058      	beq.n	800b3b2 <HAL_TIM_ConfigClockSource+0x18a>
 800b300:	2b40      	cmp	r3, #64	; 0x40
 800b302:	d86f      	bhi.n	800b3e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b304:	2b30      	cmp	r3, #48	; 0x30
 800b306:	d064      	beq.n	800b3d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b308:	2b30      	cmp	r3, #48	; 0x30
 800b30a:	d86b      	bhi.n	800b3e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b30c:	2b20      	cmp	r3, #32
 800b30e:	d060      	beq.n	800b3d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b310:	2b20      	cmp	r3, #32
 800b312:	d867      	bhi.n	800b3e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b314:	2b00      	cmp	r3, #0
 800b316:	d05c      	beq.n	800b3d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b318:	2b10      	cmp	r3, #16
 800b31a:	d05a      	beq.n	800b3d2 <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b31c:	e062      	b.n	800b3e4 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6818      	ldr	r0, [r3, #0]
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	6899      	ldr	r1, [r3, #8]
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	685a      	ldr	r2, [r3, #4]
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	f000 fca5 	bl	800bc7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b340:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	68fa      	ldr	r2, [r7, #12]
 800b348:	609a      	str	r2, [r3, #8]
      break;
 800b34a:	e04e      	b.n	800b3ea <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6818      	ldr	r0, [r3, #0]
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	6899      	ldr	r1, [r3, #8]
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	685a      	ldr	r2, [r3, #4]
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	f000 fc8e 	bl	800bc7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	689a      	ldr	r2, [r3, #8]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b36e:	609a      	str	r2, [r3, #8]
      break;
 800b370:	e03b      	b.n	800b3ea <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6818      	ldr	r0, [r3, #0]
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	6859      	ldr	r1, [r3, #4]
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	68db      	ldr	r3, [r3, #12]
 800b37e:	461a      	mov	r2, r3
 800b380:	f000 fc00 	bl	800bb84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2150      	movs	r1, #80	; 0x50
 800b38a:	4618      	mov	r0, r3
 800b38c:	f000 fc59 	bl	800bc42 <TIM_ITRx_SetConfig>
      break;
 800b390:	e02b      	b.n	800b3ea <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6818      	ldr	r0, [r3, #0]
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	6859      	ldr	r1, [r3, #4]
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	f000 fc1f 	bl	800bbe2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2160      	movs	r1, #96	; 0x60
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f000 fc49 	bl	800bc42 <TIM_ITRx_SetConfig>
      break;
 800b3b0:	e01b      	b.n	800b3ea <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6818      	ldr	r0, [r3, #0]
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	6859      	ldr	r1, [r3, #4]
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	68db      	ldr	r3, [r3, #12]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	f000 fbe0 	bl	800bb84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2140      	movs	r1, #64	; 0x40
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f000 fc39 	bl	800bc42 <TIM_ITRx_SetConfig>
      break;
 800b3d0:	e00b      	b.n	800b3ea <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681a      	ldr	r2, [r3, #0]
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4619      	mov	r1, r3
 800b3dc:	4610      	mov	r0, r2
 800b3de:	f000 fc30 	bl	800bc42 <TIM_ITRx_SetConfig>
        break;
 800b3e2:	e002      	b.n	800b3ea <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800b3e4:	bf00      	nop
 800b3e6:	e000      	b.n	800b3ea <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800b3e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3710      	adds	r7, #16
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	00100070 	.word	0x00100070
 800b408:	00100040 	.word	0x00100040
 800b40c:	00100030 	.word	0x00100030
 800b410:	00100020 	.word	0x00100020

0800b414 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b41c:	bf00      	nop
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b430:	bf00      	nop
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b444:	bf00      	nop
 800b446:	370c      	adds	r7, #12
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b458:	bf00      	nop
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b46c:	bf00      	nop
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b478:	b480      	push	{r7}
 800b47a:	b085      	sub	sp, #20
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	4a3c      	ldr	r2, [pc, #240]	; (800b57c <TIM_Base_SetConfig+0x104>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d00f      	beq.n	800b4b0 <TIM_Base_SetConfig+0x38>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b496:	d00b      	beq.n	800b4b0 <TIM_Base_SetConfig+0x38>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	4a39      	ldr	r2, [pc, #228]	; (800b580 <TIM_Base_SetConfig+0x108>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d007      	beq.n	800b4b0 <TIM_Base_SetConfig+0x38>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4a38      	ldr	r2, [pc, #224]	; (800b584 <TIM_Base_SetConfig+0x10c>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d003      	beq.n	800b4b0 <TIM_Base_SetConfig+0x38>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	4a37      	ldr	r2, [pc, #220]	; (800b588 <TIM_Base_SetConfig+0x110>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d108      	bne.n	800b4c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4a2d      	ldr	r2, [pc, #180]	; (800b57c <TIM_Base_SetConfig+0x104>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d01b      	beq.n	800b502 <TIM_Base_SetConfig+0x8a>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4d0:	d017      	beq.n	800b502 <TIM_Base_SetConfig+0x8a>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4a2a      	ldr	r2, [pc, #168]	; (800b580 <TIM_Base_SetConfig+0x108>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d013      	beq.n	800b502 <TIM_Base_SetConfig+0x8a>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4a29      	ldr	r2, [pc, #164]	; (800b584 <TIM_Base_SetConfig+0x10c>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d00f      	beq.n	800b502 <TIM_Base_SetConfig+0x8a>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	4a28      	ldr	r2, [pc, #160]	; (800b588 <TIM_Base_SetConfig+0x110>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d00b      	beq.n	800b502 <TIM_Base_SetConfig+0x8a>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	4a27      	ldr	r2, [pc, #156]	; (800b58c <TIM_Base_SetConfig+0x114>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d007      	beq.n	800b502 <TIM_Base_SetConfig+0x8a>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4a26      	ldr	r2, [pc, #152]	; (800b590 <TIM_Base_SetConfig+0x118>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d003      	beq.n	800b502 <TIM_Base_SetConfig+0x8a>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4a25      	ldr	r2, [pc, #148]	; (800b594 <TIM_Base_SetConfig+0x11c>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d108      	bne.n	800b514 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	68fa      	ldr	r2, [r7, #12]
 800b510:	4313      	orrs	r3, r2
 800b512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	695b      	ldr	r3, [r3, #20]
 800b51e:	4313      	orrs	r3, r2
 800b520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	68fa      	ldr	r2, [r7, #12]
 800b526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	689a      	ldr	r2, [r3, #8]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4a10      	ldr	r2, [pc, #64]	; (800b57c <TIM_Base_SetConfig+0x104>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d00f      	beq.n	800b560 <TIM_Base_SetConfig+0xe8>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4a11      	ldr	r2, [pc, #68]	; (800b588 <TIM_Base_SetConfig+0x110>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d00b      	beq.n	800b560 <TIM_Base_SetConfig+0xe8>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	4a10      	ldr	r2, [pc, #64]	; (800b58c <TIM_Base_SetConfig+0x114>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d007      	beq.n	800b560 <TIM_Base_SetConfig+0xe8>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	4a0f      	ldr	r2, [pc, #60]	; (800b590 <TIM_Base_SetConfig+0x118>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d003      	beq.n	800b560 <TIM_Base_SetConfig+0xe8>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a0e      	ldr	r2, [pc, #56]	; (800b594 <TIM_Base_SetConfig+0x11c>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d103      	bne.n	800b568 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	691a      	ldr	r2, [r3, #16]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2201      	movs	r2, #1
 800b56c:	615a      	str	r2, [r3, #20]
}
 800b56e:	bf00      	nop
 800b570:	3714      	adds	r7, #20
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr
 800b57a:	bf00      	nop
 800b57c:	40012c00 	.word	0x40012c00
 800b580:	40000400 	.word	0x40000400
 800b584:	40000800 	.word	0x40000800
 800b588:	40013400 	.word	0x40013400
 800b58c:	40014000 	.word	0x40014000
 800b590:	40014400 	.word	0x40014400
 800b594:	40014800 	.word	0x40014800

0800b598 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b598:	b480      	push	{r7}
 800b59a:	b087      	sub	sp, #28
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6a1b      	ldr	r3, [r3, #32]
 800b5a6:	f023 0201 	bic.w	r2, r3, #1
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a1b      	ldr	r3, [r3, #32]
 800b5b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	699b      	ldr	r3, [r3, #24]
 800b5be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f023 0303 	bic.w	r3, r3, #3
 800b5d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	f023 0302 	bic.w	r3, r3, #2
 800b5e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	697a      	ldr	r2, [r7, #20]
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a2c      	ldr	r2, [pc, #176]	; (800b6a4 <TIM_OC1_SetConfig+0x10c>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d00f      	beq.n	800b618 <TIM_OC1_SetConfig+0x80>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a2b      	ldr	r2, [pc, #172]	; (800b6a8 <TIM_OC1_SetConfig+0x110>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d00b      	beq.n	800b618 <TIM_OC1_SetConfig+0x80>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	4a2a      	ldr	r2, [pc, #168]	; (800b6ac <TIM_OC1_SetConfig+0x114>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d007      	beq.n	800b618 <TIM_OC1_SetConfig+0x80>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a29      	ldr	r2, [pc, #164]	; (800b6b0 <TIM_OC1_SetConfig+0x118>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d003      	beq.n	800b618 <TIM_OC1_SetConfig+0x80>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4a28      	ldr	r2, [pc, #160]	; (800b6b4 <TIM_OC1_SetConfig+0x11c>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d10c      	bne.n	800b632 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	f023 0308 	bic.w	r3, r3, #8
 800b61e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	697a      	ldr	r2, [r7, #20]
 800b626:	4313      	orrs	r3, r2
 800b628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	f023 0304 	bic.w	r3, r3, #4
 800b630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a1b      	ldr	r2, [pc, #108]	; (800b6a4 <TIM_OC1_SetConfig+0x10c>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d00f      	beq.n	800b65a <TIM_OC1_SetConfig+0xc2>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a1a      	ldr	r2, [pc, #104]	; (800b6a8 <TIM_OC1_SetConfig+0x110>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d00b      	beq.n	800b65a <TIM_OC1_SetConfig+0xc2>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a19      	ldr	r2, [pc, #100]	; (800b6ac <TIM_OC1_SetConfig+0x114>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d007      	beq.n	800b65a <TIM_OC1_SetConfig+0xc2>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4a18      	ldr	r2, [pc, #96]	; (800b6b0 <TIM_OC1_SetConfig+0x118>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d003      	beq.n	800b65a <TIM_OC1_SetConfig+0xc2>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4a17      	ldr	r2, [pc, #92]	; (800b6b4 <TIM_OC1_SetConfig+0x11c>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d111      	bne.n	800b67e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	695b      	ldr	r3, [r3, #20]
 800b66e:	693a      	ldr	r2, [r7, #16]
 800b670:	4313      	orrs	r3, r2
 800b672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	699b      	ldr	r3, [r3, #24]
 800b678:	693a      	ldr	r2, [r7, #16]
 800b67a:	4313      	orrs	r3, r2
 800b67c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	693a      	ldr	r2, [r7, #16]
 800b682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	685a      	ldr	r2, [r3, #4]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	697a      	ldr	r2, [r7, #20]
 800b696:	621a      	str	r2, [r3, #32]
}
 800b698:	bf00      	nop
 800b69a:	371c      	adds	r7, #28
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr
 800b6a4:	40012c00 	.word	0x40012c00
 800b6a8:	40013400 	.word	0x40013400
 800b6ac:	40014000 	.word	0x40014000
 800b6b0:	40014400 	.word	0x40014400
 800b6b4:	40014800 	.word	0x40014800

0800b6b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b087      	sub	sp, #28
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6a1b      	ldr	r3, [r3, #32]
 800b6c6:	f023 0210 	bic.w	r2, r3, #16
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6a1b      	ldr	r3, [r3, #32]
 800b6d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	699b      	ldr	r3, [r3, #24]
 800b6de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b6e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	021b      	lsls	r3, r3, #8
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	f023 0320 	bic.w	r3, r3, #32
 800b706:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	011b      	lsls	r3, r3, #4
 800b70e:	697a      	ldr	r2, [r7, #20]
 800b710:	4313      	orrs	r3, r2
 800b712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	4a28      	ldr	r2, [pc, #160]	; (800b7b8 <TIM_OC2_SetConfig+0x100>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d003      	beq.n	800b724 <TIM_OC2_SetConfig+0x6c>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4a27      	ldr	r2, [pc, #156]	; (800b7bc <TIM_OC2_SetConfig+0x104>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d10d      	bne.n	800b740 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b72a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	011b      	lsls	r3, r3, #4
 800b732:	697a      	ldr	r2, [r7, #20]
 800b734:	4313      	orrs	r3, r2
 800b736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b73e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	4a1d      	ldr	r2, [pc, #116]	; (800b7b8 <TIM_OC2_SetConfig+0x100>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d00f      	beq.n	800b768 <TIM_OC2_SetConfig+0xb0>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	4a1c      	ldr	r2, [pc, #112]	; (800b7bc <TIM_OC2_SetConfig+0x104>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d00b      	beq.n	800b768 <TIM_OC2_SetConfig+0xb0>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	4a1b      	ldr	r2, [pc, #108]	; (800b7c0 <TIM_OC2_SetConfig+0x108>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d007      	beq.n	800b768 <TIM_OC2_SetConfig+0xb0>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4a1a      	ldr	r2, [pc, #104]	; (800b7c4 <TIM_OC2_SetConfig+0x10c>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d003      	beq.n	800b768 <TIM_OC2_SetConfig+0xb0>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	4a19      	ldr	r2, [pc, #100]	; (800b7c8 <TIM_OC2_SetConfig+0x110>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d113      	bne.n	800b790 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b76e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b776:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	695b      	ldr	r3, [r3, #20]
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	693a      	ldr	r2, [r7, #16]
 800b780:	4313      	orrs	r3, r2
 800b782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	699b      	ldr	r3, [r3, #24]
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	693a      	ldr	r2, [r7, #16]
 800b78c:	4313      	orrs	r3, r2
 800b78e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	693a      	ldr	r2, [r7, #16]
 800b794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	685a      	ldr	r2, [r3, #4]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	697a      	ldr	r2, [r7, #20]
 800b7a8:	621a      	str	r2, [r3, #32]
}
 800b7aa:	bf00      	nop
 800b7ac:	371c      	adds	r7, #28
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop
 800b7b8:	40012c00 	.word	0x40012c00
 800b7bc:	40013400 	.word	0x40013400
 800b7c0:	40014000 	.word	0x40014000
 800b7c4:	40014400 	.word	0x40014400
 800b7c8:	40014800 	.word	0x40014800

0800b7cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b087      	sub	sp, #28
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6a1b      	ldr	r3, [r3, #32]
 800b7da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6a1b      	ldr	r3, [r3, #32]
 800b7e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	69db      	ldr	r3, [r3, #28]
 800b7f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f023 0303 	bic.w	r3, r3, #3
 800b806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	68fa      	ldr	r2, [r7, #12]
 800b80e:	4313      	orrs	r3, r2
 800b810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	021b      	lsls	r3, r3, #8
 800b820:	697a      	ldr	r2, [r7, #20]
 800b822:	4313      	orrs	r3, r2
 800b824:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	4a27      	ldr	r2, [pc, #156]	; (800b8c8 <TIM_OC3_SetConfig+0xfc>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d003      	beq.n	800b836 <TIM_OC3_SetConfig+0x6a>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	4a26      	ldr	r2, [pc, #152]	; (800b8cc <TIM_OC3_SetConfig+0x100>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d10d      	bne.n	800b852 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b83c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	021b      	lsls	r3, r3, #8
 800b844:	697a      	ldr	r2, [r7, #20]
 800b846:	4313      	orrs	r3, r2
 800b848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	4a1c      	ldr	r2, [pc, #112]	; (800b8c8 <TIM_OC3_SetConfig+0xfc>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d00f      	beq.n	800b87a <TIM_OC3_SetConfig+0xae>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4a1b      	ldr	r2, [pc, #108]	; (800b8cc <TIM_OC3_SetConfig+0x100>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d00b      	beq.n	800b87a <TIM_OC3_SetConfig+0xae>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4a1a      	ldr	r2, [pc, #104]	; (800b8d0 <TIM_OC3_SetConfig+0x104>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d007      	beq.n	800b87a <TIM_OC3_SetConfig+0xae>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	4a19      	ldr	r2, [pc, #100]	; (800b8d4 <TIM_OC3_SetConfig+0x108>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d003      	beq.n	800b87a <TIM_OC3_SetConfig+0xae>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4a18      	ldr	r2, [pc, #96]	; (800b8d8 <TIM_OC3_SetConfig+0x10c>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d113      	bne.n	800b8a2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	695b      	ldr	r3, [r3, #20]
 800b88e:	011b      	lsls	r3, r3, #4
 800b890:	693a      	ldr	r2, [r7, #16]
 800b892:	4313      	orrs	r3, r2
 800b894:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	699b      	ldr	r3, [r3, #24]
 800b89a:	011b      	lsls	r3, r3, #4
 800b89c:	693a      	ldr	r2, [r7, #16]
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	693a      	ldr	r2, [r7, #16]
 800b8a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	68fa      	ldr	r2, [r7, #12]
 800b8ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	685a      	ldr	r2, [r3, #4]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	697a      	ldr	r2, [r7, #20]
 800b8ba:	621a      	str	r2, [r3, #32]
}
 800b8bc:	bf00      	nop
 800b8be:	371c      	adds	r7, #28
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr
 800b8c8:	40012c00 	.word	0x40012c00
 800b8cc:	40013400 	.word	0x40013400
 800b8d0:	40014000 	.word	0x40014000
 800b8d4:	40014400 	.word	0x40014400
 800b8d8:	40014800 	.word	0x40014800

0800b8dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b087      	sub	sp, #28
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a1b      	ldr	r3, [r3, #32]
 800b8ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a1b      	ldr	r3, [r3, #32]
 800b8f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	69db      	ldr	r3, [r3, #28]
 800b902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b90a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b90e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	021b      	lsls	r3, r3, #8
 800b91e:	68fa      	ldr	r2, [r7, #12]
 800b920:	4313      	orrs	r3, r2
 800b922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b92a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	689b      	ldr	r3, [r3, #8]
 800b930:	031b      	lsls	r3, r3, #12
 800b932:	697a      	ldr	r2, [r7, #20]
 800b934:	4313      	orrs	r3, r2
 800b936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4a28      	ldr	r2, [pc, #160]	; (800b9dc <TIM_OC4_SetConfig+0x100>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d003      	beq.n	800b948 <TIM_OC4_SetConfig+0x6c>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4a27      	ldr	r2, [pc, #156]	; (800b9e0 <TIM_OC4_SetConfig+0x104>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d10d      	bne.n	800b964 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b94e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	031b      	lsls	r3, r3, #12
 800b956:	697a      	ldr	r2, [r7, #20]
 800b958:	4313      	orrs	r3, r2
 800b95a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b962:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	4a1d      	ldr	r2, [pc, #116]	; (800b9dc <TIM_OC4_SetConfig+0x100>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d00f      	beq.n	800b98c <TIM_OC4_SetConfig+0xb0>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4a1c      	ldr	r2, [pc, #112]	; (800b9e0 <TIM_OC4_SetConfig+0x104>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d00b      	beq.n	800b98c <TIM_OC4_SetConfig+0xb0>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	4a1b      	ldr	r2, [pc, #108]	; (800b9e4 <TIM_OC4_SetConfig+0x108>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d007      	beq.n	800b98c <TIM_OC4_SetConfig+0xb0>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4a1a      	ldr	r2, [pc, #104]	; (800b9e8 <TIM_OC4_SetConfig+0x10c>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d003      	beq.n	800b98c <TIM_OC4_SetConfig+0xb0>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	4a19      	ldr	r2, [pc, #100]	; (800b9ec <TIM_OC4_SetConfig+0x110>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d113      	bne.n	800b9b4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b992:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b99a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	695b      	ldr	r3, [r3, #20]
 800b9a0:	019b      	lsls	r3, r3, #6
 800b9a2:	693a      	ldr	r2, [r7, #16]
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	699b      	ldr	r3, [r3, #24]
 800b9ac:	019b      	lsls	r3, r3, #6
 800b9ae:	693a      	ldr	r2, [r7, #16]
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	693a      	ldr	r2, [r7, #16]
 800b9b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	685a      	ldr	r2, [r3, #4]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	697a      	ldr	r2, [r7, #20]
 800b9cc:	621a      	str	r2, [r3, #32]
}
 800b9ce:	bf00      	nop
 800b9d0:	371c      	adds	r7, #28
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	40012c00 	.word	0x40012c00
 800b9e0:	40013400 	.word	0x40013400
 800b9e4:	40014000 	.word	0x40014000
 800b9e8:	40014400 	.word	0x40014400
 800b9ec:	40014800 	.word	0x40014800

0800b9f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b087      	sub	sp, #28
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6a1b      	ldr	r3, [r3, #32]
 800b9fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6a1b      	ldr	r3, [r3, #32]
 800ba0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ba34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	041b      	lsls	r3, r3, #16
 800ba3c:	693a      	ldr	r2, [r7, #16]
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	4a17      	ldr	r2, [pc, #92]	; (800baa4 <TIM_OC5_SetConfig+0xb4>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d00f      	beq.n	800ba6a <TIM_OC5_SetConfig+0x7a>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4a16      	ldr	r2, [pc, #88]	; (800baa8 <TIM_OC5_SetConfig+0xb8>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d00b      	beq.n	800ba6a <TIM_OC5_SetConfig+0x7a>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	4a15      	ldr	r2, [pc, #84]	; (800baac <TIM_OC5_SetConfig+0xbc>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d007      	beq.n	800ba6a <TIM_OC5_SetConfig+0x7a>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4a14      	ldr	r2, [pc, #80]	; (800bab0 <TIM_OC5_SetConfig+0xc0>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d003      	beq.n	800ba6a <TIM_OC5_SetConfig+0x7a>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	4a13      	ldr	r2, [pc, #76]	; (800bab4 <TIM_OC5_SetConfig+0xc4>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d109      	bne.n	800ba7e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	695b      	ldr	r3, [r3, #20]
 800ba76:	021b      	lsls	r3, r3, #8
 800ba78:	697a      	ldr	r2, [r7, #20]
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	697a      	ldr	r2, [r7, #20]
 800ba82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	68fa      	ldr	r2, [r7, #12]
 800ba88:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	685a      	ldr	r2, [r3, #4]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	693a      	ldr	r2, [r7, #16]
 800ba96:	621a      	str	r2, [r3, #32]
}
 800ba98:	bf00      	nop
 800ba9a:	371c      	adds	r7, #28
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr
 800baa4:	40012c00 	.word	0x40012c00
 800baa8:	40013400 	.word	0x40013400
 800baac:	40014000 	.word	0x40014000
 800bab0:	40014400 	.word	0x40014400
 800bab4:	40014800 	.word	0x40014800

0800bab8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bab8:	b480      	push	{r7}
 800baba:	b087      	sub	sp, #28
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6a1b      	ldr	r3, [r3, #32]
 800bac6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6a1b      	ldr	r3, [r3, #32]
 800bad2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800baea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	021b      	lsls	r3, r3, #8
 800baf2:	68fa      	ldr	r2, [r7, #12]
 800baf4:	4313      	orrs	r3, r2
 800baf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bafe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	051b      	lsls	r3, r3, #20
 800bb06:	693a      	ldr	r2, [r7, #16]
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	4a18      	ldr	r2, [pc, #96]	; (800bb70 <TIM_OC6_SetConfig+0xb8>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d00f      	beq.n	800bb34 <TIM_OC6_SetConfig+0x7c>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	4a17      	ldr	r2, [pc, #92]	; (800bb74 <TIM_OC6_SetConfig+0xbc>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d00b      	beq.n	800bb34 <TIM_OC6_SetConfig+0x7c>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	4a16      	ldr	r2, [pc, #88]	; (800bb78 <TIM_OC6_SetConfig+0xc0>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d007      	beq.n	800bb34 <TIM_OC6_SetConfig+0x7c>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	4a15      	ldr	r2, [pc, #84]	; (800bb7c <TIM_OC6_SetConfig+0xc4>)
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d003      	beq.n	800bb34 <TIM_OC6_SetConfig+0x7c>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	4a14      	ldr	r2, [pc, #80]	; (800bb80 <TIM_OC6_SetConfig+0xc8>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d109      	bne.n	800bb48 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bb3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	695b      	ldr	r3, [r3, #20]
 800bb40:	029b      	lsls	r3, r3, #10
 800bb42:	697a      	ldr	r2, [r7, #20]
 800bb44:	4313      	orrs	r3, r2
 800bb46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	697a      	ldr	r2, [r7, #20]
 800bb4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	685a      	ldr	r2, [r3, #4]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	693a      	ldr	r2, [r7, #16]
 800bb60:	621a      	str	r2, [r3, #32]
}
 800bb62:	bf00      	nop
 800bb64:	371c      	adds	r7, #28
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop
 800bb70:	40012c00 	.word	0x40012c00
 800bb74:	40013400 	.word	0x40013400
 800bb78:	40014000 	.word	0x40014000
 800bb7c:	40014400 	.word	0x40014400
 800bb80:	40014800 	.word	0x40014800

0800bb84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b087      	sub	sp, #28
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6a1b      	ldr	r3, [r3, #32]
 800bb94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	6a1b      	ldr	r3, [r3, #32]
 800bb9a:	f023 0201 	bic.w	r2, r3, #1
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	699b      	ldr	r3, [r3, #24]
 800bba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bbae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	011b      	lsls	r3, r3, #4
 800bbb4:	693a      	ldr	r2, [r7, #16]
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	f023 030a 	bic.w	r3, r3, #10
 800bbc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bbc2:	697a      	ldr	r2, [r7, #20]
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	693a      	ldr	r2, [r7, #16]
 800bbce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	697a      	ldr	r2, [r7, #20]
 800bbd4:	621a      	str	r2, [r3, #32]
}
 800bbd6:	bf00      	nop
 800bbd8:	371c      	adds	r7, #28
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr

0800bbe2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	b087      	sub	sp, #28
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	60f8      	str	r0, [r7, #12]
 800bbea:	60b9      	str	r1, [r7, #8]
 800bbec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	6a1b      	ldr	r3, [r3, #32]
 800bbf2:	f023 0210 	bic.w	r2, r3, #16
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	699b      	ldr	r3, [r3, #24]
 800bbfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	6a1b      	ldr	r3, [r3, #32]
 800bc04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bc0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	031b      	lsls	r3, r3, #12
 800bc12:	697a      	ldr	r2, [r7, #20]
 800bc14:	4313      	orrs	r3, r2
 800bc16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bc1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	011b      	lsls	r3, r3, #4
 800bc24:	693a      	ldr	r2, [r7, #16]
 800bc26:	4313      	orrs	r3, r2
 800bc28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	697a      	ldr	r2, [r7, #20]
 800bc2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	693a      	ldr	r2, [r7, #16]
 800bc34:	621a      	str	r2, [r3, #32]
}
 800bc36:	bf00      	nop
 800bc38:	371c      	adds	r7, #28
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr

0800bc42 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc42:	b480      	push	{r7}
 800bc44:	b085      	sub	sp, #20
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
 800bc4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	689b      	ldr	r3, [r3, #8]
 800bc50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800bc58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc5e:	683a      	ldr	r2, [r7, #0]
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	4313      	orrs	r3, r2
 800bc64:	f043 0307 	orr.w	r3, r3, #7
 800bc68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	68fa      	ldr	r2, [r7, #12]
 800bc6e:	609a      	str	r2, [r3, #8]
}
 800bc70:	bf00      	nop
 800bc72:	3714      	adds	r7, #20
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b087      	sub	sp, #28
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	607a      	str	r2, [r7, #4]
 800bc88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	021a      	lsls	r2, r3, #8
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	431a      	orrs	r2, r3
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	4313      	orrs	r3, r2
 800bca4:	697a      	ldr	r2, [r7, #20]
 800bca6:	4313      	orrs	r3, r2
 800bca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	697a      	ldr	r2, [r7, #20]
 800bcae:	609a      	str	r2, [r3, #8]
}
 800bcb0:	bf00      	nop
 800bcb2:	371c      	adds	r7, #28
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b087      	sub	sp, #28
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	f003 031f 	and.w	r3, r3, #31
 800bcce:	2201      	movs	r2, #1
 800bcd0:	fa02 f303 	lsl.w	r3, r2, r3
 800bcd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	6a1a      	ldr	r2, [r3, #32]
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	43db      	mvns	r3, r3
 800bcde:	401a      	ands	r2, r3
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6a1a      	ldr	r2, [r3, #32]
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	f003 031f 	and.w	r3, r3, #31
 800bcee:	6879      	ldr	r1, [r7, #4]
 800bcf0:	fa01 f303 	lsl.w	r3, r1, r3
 800bcf4:	431a      	orrs	r2, r3
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	621a      	str	r2, [r3, #32]
}
 800bcfa:	bf00      	nop
 800bcfc:	371c      	adds	r7, #28
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
	...

0800bd08 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d109      	bne.n	800bd2c <HAL_TIMEx_PWMN_Start+0x24>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	bf14      	ite	ne
 800bd24:	2301      	movne	r3, #1
 800bd26:	2300      	moveq	r3, #0
 800bd28:	b2db      	uxtb	r3, r3
 800bd2a:	e022      	b.n	800bd72 <HAL_TIMEx_PWMN_Start+0x6a>
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	2b04      	cmp	r3, #4
 800bd30:	d109      	bne.n	800bd46 <HAL_TIMEx_PWMN_Start+0x3e>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	bf14      	ite	ne
 800bd3e:	2301      	movne	r3, #1
 800bd40:	2300      	moveq	r3, #0
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	e015      	b.n	800bd72 <HAL_TIMEx_PWMN_Start+0x6a>
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	2b08      	cmp	r3, #8
 800bd4a:	d109      	bne.n	800bd60 <HAL_TIMEx_PWMN_Start+0x58>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	bf14      	ite	ne
 800bd58:	2301      	movne	r3, #1
 800bd5a:	2300      	moveq	r3, #0
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	e008      	b.n	800bd72 <HAL_TIMEx_PWMN_Start+0x6a>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	bf14      	ite	ne
 800bd6c:	2301      	movne	r3, #1
 800bd6e:	2300      	moveq	r3, #0
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d001      	beq.n	800bd7a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800bd76:	2301      	movs	r3, #1
 800bd78:	e069      	b.n	800be4e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d104      	bne.n	800bd8a <HAL_TIMEx_PWMN_Start+0x82>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2202      	movs	r2, #2
 800bd84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd88:	e013      	b.n	800bdb2 <HAL_TIMEx_PWMN_Start+0xaa>
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	2b04      	cmp	r3, #4
 800bd8e:	d104      	bne.n	800bd9a <HAL_TIMEx_PWMN_Start+0x92>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2202      	movs	r2, #2
 800bd94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd98:	e00b      	b.n	800bdb2 <HAL_TIMEx_PWMN_Start+0xaa>
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	2b08      	cmp	r3, #8
 800bd9e:	d104      	bne.n	800bdaa <HAL_TIMEx_PWMN_Start+0xa2>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2202      	movs	r2, #2
 800bda4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bda8:	e003      	b.n	800bdb2 <HAL_TIMEx_PWMN_Start+0xaa>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2202      	movs	r2, #2
 800bdae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2204      	movs	r2, #4
 800bdb8:	6839      	ldr	r1, [r7, #0]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f000 f9d3 	bl	800c166 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bdce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a20      	ldr	r2, [pc, #128]	; (800be58 <HAL_TIMEx_PWMN_Start+0x150>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d018      	beq.n	800be0c <HAL_TIMEx_PWMN_Start+0x104>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bde2:	d013      	beq.n	800be0c <HAL_TIMEx_PWMN_Start+0x104>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a1c      	ldr	r2, [pc, #112]	; (800be5c <HAL_TIMEx_PWMN_Start+0x154>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d00e      	beq.n	800be0c <HAL_TIMEx_PWMN_Start+0x104>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a1b      	ldr	r2, [pc, #108]	; (800be60 <HAL_TIMEx_PWMN_Start+0x158>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d009      	beq.n	800be0c <HAL_TIMEx_PWMN_Start+0x104>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4a19      	ldr	r2, [pc, #100]	; (800be64 <HAL_TIMEx_PWMN_Start+0x15c>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d004      	beq.n	800be0c <HAL_TIMEx_PWMN_Start+0x104>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a18      	ldr	r2, [pc, #96]	; (800be68 <HAL_TIMEx_PWMN_Start+0x160>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d115      	bne.n	800be38 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	689a      	ldr	r2, [r3, #8]
 800be12:	4b16      	ldr	r3, [pc, #88]	; (800be6c <HAL_TIMEx_PWMN_Start+0x164>)
 800be14:	4013      	ands	r3, r2
 800be16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2b06      	cmp	r3, #6
 800be1c:	d015      	beq.n	800be4a <HAL_TIMEx_PWMN_Start+0x142>
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be24:	d011      	beq.n	800be4a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f042 0201 	orr.w	r2, r2, #1
 800be34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be36:	e008      	b.n	800be4a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	681a      	ldr	r2, [r3, #0]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f042 0201 	orr.w	r2, r2, #1
 800be46:	601a      	str	r2, [r3, #0]
 800be48:	e000      	b.n	800be4c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be4c:	2300      	movs	r3, #0
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3710      	adds	r7, #16
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	40012c00 	.word	0x40012c00
 800be5c:	40000400 	.word	0x40000400
 800be60:	40000800 	.word	0x40000800
 800be64:	40013400 	.word	0x40013400
 800be68:	40014000 	.word	0x40014000
 800be6c:	00010007 	.word	0x00010007

0800be70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be70:	b480      	push	{r7}
 800be72:	b085      	sub	sp, #20
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be80:	2b01      	cmp	r3, #1
 800be82:	d101      	bne.n	800be88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be84:	2302      	movs	r3, #2
 800be86:	e065      	b.n	800bf54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2201      	movs	r2, #1
 800be8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2202      	movs	r2, #2
 800be94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4a2c      	ldr	r2, [pc, #176]	; (800bf60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d004      	beq.n	800bebc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4a2b      	ldr	r2, [pc, #172]	; (800bf64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d108      	bne.n	800bece <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bec2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	68fa      	ldr	r2, [r7, #12]
 800beca:	4313      	orrs	r3, r2
 800becc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800bed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bed8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	68fa      	ldr	r2, [r7, #12]
 800bee0:	4313      	orrs	r3, r2
 800bee2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	68fa      	ldr	r2, [r7, #12]
 800beea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a1b      	ldr	r2, [pc, #108]	; (800bf60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d018      	beq.n	800bf28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800befe:	d013      	beq.n	800bf28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a18      	ldr	r2, [pc, #96]	; (800bf68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d00e      	beq.n	800bf28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a17      	ldr	r2, [pc, #92]	; (800bf6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d009      	beq.n	800bf28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a12      	ldr	r2, [pc, #72]	; (800bf64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d004      	beq.n	800bf28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a13      	ldr	r2, [pc, #76]	; (800bf70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d10c      	bne.n	800bf42 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	689b      	ldr	r3, [r3, #8]
 800bf34:	68ba      	ldr	r2, [r7, #8]
 800bf36:	4313      	orrs	r3, r2
 800bf38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	68ba      	ldr	r2, [r7, #8]
 800bf40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2201      	movs	r2, #1
 800bf46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf52:	2300      	movs	r3, #0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3714      	adds	r7, #20
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr
 800bf60:	40012c00 	.word	0x40012c00
 800bf64:	40013400 	.word	0x40013400
 800bf68:	40000400 	.word	0x40000400
 800bf6c:	40000800 	.word	0x40000800
 800bf70:	40014000 	.word	0x40014000

0800bf74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b085      	sub	sp, #20
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d101      	bne.n	800bf90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bf8c:	2302      	movs	r3, #2
 800bf8e:	e087      	b.n	800c0a0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2201      	movs	r2, #1
 800bf94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	68db      	ldr	r3, [r3, #12]
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	689b      	ldr	r3, [r3, #8]
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	691b      	ldr	r3, [r3, #16]
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	695b      	ldr	r3, [r3, #20]
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff6:	4313      	orrs	r3, r2
 800bff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	699b      	ldr	r3, [r3, #24]
 800c004:	041b      	lsls	r3, r3, #16
 800c006:	4313      	orrs	r3, r2
 800c008:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4a27      	ldr	r2, [pc, #156]	; (800c0ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d004      	beq.n	800c01e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4a25      	ldr	r2, [pc, #148]	; (800c0b0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d106      	bne.n	800c02c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	69db      	ldr	r3, [r3, #28]
 800c028:	4313      	orrs	r3, r2
 800c02a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a1e      	ldr	r2, [pc, #120]	; (800c0ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d004      	beq.n	800c040 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4a1d      	ldr	r2, [pc, #116]	; (800c0b0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d126      	bne.n	800c08e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c04a:	051b      	lsls	r3, r3, #20
 800c04c:	4313      	orrs	r3, r2
 800c04e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	6a1b      	ldr	r3, [r3, #32]
 800c05a:	4313      	orrs	r3, r2
 800c05c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c068:	4313      	orrs	r3, r2
 800c06a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a0e      	ldr	r2, [pc, #56]	; (800c0ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d004      	beq.n	800c080 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4a0d      	ldr	r2, [pc, #52]	; (800c0b0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d106      	bne.n	800c08e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c08a:	4313      	orrs	r3, r2
 800c08c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	68fa      	ldr	r2, [r7, #12]
 800c094:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2200      	movs	r2, #0
 800c09a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c09e:	2300      	movs	r3, #0
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3714      	adds	r7, #20
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr
 800c0ac:	40012c00 	.word	0x40012c00
 800c0b0:	40013400 	.word	0x40013400

0800c0b4 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c0ca:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 800c0cc:	2300      	movs	r3, #0
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	370c      	adds	r7, #12
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr

0800c0da <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c0da:	b480      	push	{r7}
 800c0dc:	b083      	sub	sp, #12
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c0e2:	bf00      	nop
 800c0e4:	370c      	adds	r7, #12
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr

0800c0ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c0ee:	b480      	push	{r7}
 800c0f0:	b083      	sub	sp, #12
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c0f6:	bf00      	nop
 800c0f8:	370c      	adds	r7, #12
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr

0800c102 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c102:	b480      	push	{r7}
 800c104:	b083      	sub	sp, #12
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c10a:	bf00      	nop
 800c10c:	370c      	adds	r7, #12
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr

0800c116 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c116:	b480      	push	{r7}
 800c118:	b083      	sub	sp, #12
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c11e:	bf00      	nop
 800c120:	370c      	adds	r7, #12
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr

0800c12a <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c12a:	b480      	push	{r7}
 800c12c:	b083      	sub	sp, #12
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c132:	bf00      	nop
 800c134:	370c      	adds	r7, #12
 800c136:	46bd      	mov	sp, r7
 800c138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13c:	4770      	bx	lr

0800c13e <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c13e:	b480      	push	{r7}
 800c140:	b083      	sub	sp, #12
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c146:	bf00      	nop
 800c148:	370c      	adds	r7, #12
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr

0800c152 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c152:	b480      	push	{r7}
 800c154:	b083      	sub	sp, #12
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c15a:	bf00      	nop
 800c15c:	370c      	adds	r7, #12
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr

0800c166 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800c166:	b480      	push	{r7}
 800c168:	b087      	sub	sp, #28
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	60f8      	str	r0, [r7, #12]
 800c16e:	60b9      	str	r1, [r7, #8]
 800c170:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	f003 031f 	and.w	r3, r3, #31
 800c178:	2204      	movs	r2, #4
 800c17a:	fa02 f303 	lsl.w	r3, r2, r3
 800c17e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6a1a      	ldr	r2, [r3, #32]
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	43db      	mvns	r3, r3
 800c188:	401a      	ands	r2, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	6a1a      	ldr	r2, [r3, #32]
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	f003 031f 	and.w	r3, r3, #31
 800c198:	6879      	ldr	r1, [r7, #4]
 800c19a:	fa01 f303 	lsl.w	r3, r1, r3
 800c19e:	431a      	orrs	r2, r3
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	621a      	str	r2, [r3, #32]
}
 800c1a4:	bf00      	nop
 800c1a6:	371c      	adds	r7, #28
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr

0800c1b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d101      	bne.n	800c1c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e042      	b.n	800c248 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d106      	bne.n	800c1da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f7f9 fc07 	bl	80059e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2224      	movs	r2, #36	; 0x24
 800c1de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f022 0201 	bic.w	r2, r2, #1
 800c1f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 fb5c 	bl	800c8b0 <UART_SetConfig>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d101      	bne.n	800c202 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c1fe:	2301      	movs	r3, #1
 800c200:	e022      	b.n	800c248 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c206:	2b00      	cmp	r3, #0
 800c208:	d002      	beq.n	800c210 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 fdee 	bl	800cdec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	685a      	ldr	r2, [r3, #4]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c21e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	689a      	ldr	r2, [r3, #8]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c22e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f042 0201 	orr.w	r2, r2, #1
 800c23e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 fe75 	bl	800cf30 <UART_CheckIdleState>
 800c246:	4603      	mov	r3, r0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3708      	adds	r7, #8
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b08a      	sub	sp, #40	; 0x28
 800c254:	af02      	add	r7, sp, #8
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	603b      	str	r3, [r7, #0]
 800c25c:	4613      	mov	r3, r2
 800c25e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c266:	2b20      	cmp	r3, #32
 800c268:	f040 8083 	bne.w	800c372 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d002      	beq.n	800c278 <HAL_UART_Transmit+0x28>
 800c272:	88fb      	ldrh	r3, [r7, #6]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d101      	bne.n	800c27c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c278:	2301      	movs	r3, #1
 800c27a:	e07b      	b.n	800c374 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c282:	2b01      	cmp	r3, #1
 800c284:	d101      	bne.n	800c28a <HAL_UART_Transmit+0x3a>
 800c286:	2302      	movs	r3, #2
 800c288:	e074      	b.n	800c374 <HAL_UART_Transmit+0x124>
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2201      	movs	r2, #1
 800c28e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2200      	movs	r2, #0
 800c296:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2221      	movs	r2, #33	; 0x21
 800c29e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c2a2:	f7f9 fcbb 	bl	8005c1c <HAL_GetTick>
 800c2a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	88fa      	ldrh	r2, [r7, #6]
 800c2ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	88fa      	ldrh	r2, [r7, #6]
 800c2b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	689b      	ldr	r3, [r3, #8]
 800c2bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2c0:	d108      	bne.n	800c2d4 <HAL_UART_Transmit+0x84>
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	691b      	ldr	r3, [r3, #16]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d104      	bne.n	800c2d4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	61bb      	str	r3, [r7, #24]
 800c2d2:	e003      	b.n	800c2dc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c2e4:	e02c      	b.n	800c340 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	9300      	str	r3, [sp, #0]
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	2180      	movs	r1, #128	; 0x80
 800c2f0:	68f8      	ldr	r0, [r7, #12]
 800c2f2:	f000 fe68 	bl	800cfc6 <UART_WaitOnFlagUntilTimeout>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d001      	beq.n	800c300 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c2fc:	2303      	movs	r3, #3
 800c2fe:	e039      	b.n	800c374 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d10b      	bne.n	800c31e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	881b      	ldrh	r3, [r3, #0]
 800c30a:	461a      	mov	r2, r3
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c314:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	3302      	adds	r3, #2
 800c31a:	61bb      	str	r3, [r7, #24]
 800c31c:	e007      	b.n	800c32e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c31e:	69fb      	ldr	r3, [r7, #28]
 800c320:	781a      	ldrb	r2, [r3, #0]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	3301      	adds	r3, #1
 800c32c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c334:	b29b      	uxth	r3, r3
 800c336:	3b01      	subs	r3, #1
 800c338:	b29a      	uxth	r2, r3
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c346:	b29b      	uxth	r3, r3
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d1cc      	bne.n	800c2e6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	9300      	str	r3, [sp, #0]
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	2200      	movs	r2, #0
 800c354:	2140      	movs	r1, #64	; 0x40
 800c356:	68f8      	ldr	r0, [r7, #12]
 800c358:	f000 fe35 	bl	800cfc6 <UART_WaitOnFlagUntilTimeout>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d001      	beq.n	800c366 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c362:	2303      	movs	r3, #3
 800c364:	e006      	b.n	800c374 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2220      	movs	r2, #32
 800c36a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c36e:	2300      	movs	r3, #0
 800c370:	e000      	b.n	800c374 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c372:	2302      	movs	r3, #2
  }
}
 800c374:	4618      	mov	r0, r3
 800c376:	3720      	adds	r7, #32
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	4613      	mov	r3, r2
 800c388:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c390:	2b20      	cmp	r3, #32
 800c392:	d131      	bne.n	800c3f8 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d002      	beq.n	800c3a0 <HAL_UART_Receive_IT+0x24>
 800c39a:	88fb      	ldrh	r3, [r7, #6]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d101      	bne.n	800c3a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e02a      	b.n	800c3fa <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d101      	bne.n	800c3b2 <HAL_UART_Receive_IT+0x36>
 800c3ae:	2302      	movs	r3, #2
 800c3b0:	e023      	b.n	800c3fa <HAL_UART_Receive_IT+0x7e>
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a0f      	ldr	r2, [pc, #60]	; (800c404 <HAL_UART_Receive_IT+0x88>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d00e      	beq.n	800c3e8 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d007      	beq.n	800c3e8 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	681a      	ldr	r2, [r3, #0]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c3e6:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c3e8:	88fb      	ldrh	r3, [r7, #6]
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	68b9      	ldr	r1, [r7, #8]
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	f000 fe6a 	bl	800d0c8 <UART_Start_Receive_IT>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	e000      	b.n	800c3fa <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800c3f8:	2302      	movs	r3, #2
  }
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3710      	adds	r7, #16
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	40008000 	.word	0x40008000

0800c408 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b088      	sub	sp, #32
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	69db      	ldr	r3, [r3, #28]
 800c416:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c428:	69fa      	ldr	r2, [r7, #28]
 800c42a:	f640 030f 	movw	r3, #2063	; 0x80f
 800c42e:	4013      	ands	r3, r2
 800c430:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d118      	bne.n	800c46a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	f003 0320 	and.w	r3, r3, #32
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d013      	beq.n	800c46a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	f003 0320 	and.w	r3, r3, #32
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d104      	bne.n	800c456 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c452:	2b00      	cmp	r3, #0
 800c454:	d009      	beq.n	800c46a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	f000 81fb 	beq.w	800c856 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	4798      	blx	r3
      }
      return;
 800c468:	e1f5      	b.n	800c856 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	f000 80ef 	beq.w	800c650 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c472:	697a      	ldr	r2, [r7, #20]
 800c474:	4b73      	ldr	r3, [pc, #460]	; (800c644 <HAL_UART_IRQHandler+0x23c>)
 800c476:	4013      	ands	r3, r2
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d105      	bne.n	800c488 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c47c:	69ba      	ldr	r2, [r7, #24]
 800c47e:	4b72      	ldr	r3, [pc, #456]	; (800c648 <HAL_UART_IRQHandler+0x240>)
 800c480:	4013      	ands	r3, r2
 800c482:	2b00      	cmp	r3, #0
 800c484:	f000 80e4 	beq.w	800c650 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c488:	69fb      	ldr	r3, [r7, #28]
 800c48a:	f003 0301 	and.w	r3, r3, #1
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d010      	beq.n	800c4b4 <HAL_UART_IRQHandler+0xac>
 800c492:	69bb      	ldr	r3, [r7, #24]
 800c494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d00b      	beq.n	800c4b4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4aa:	f043 0201 	orr.w	r2, r3, #1
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c4b4:	69fb      	ldr	r3, [r7, #28]
 800c4b6:	f003 0302 	and.w	r3, r3, #2
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d010      	beq.n	800c4e0 <HAL_UART_IRQHandler+0xd8>
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	f003 0301 	and.w	r3, r3, #1
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d00b      	beq.n	800c4e0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	2202      	movs	r2, #2
 800c4ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4d6:	f043 0204 	orr.w	r2, r3, #4
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	f003 0304 	and.w	r3, r3, #4
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d010      	beq.n	800c50c <HAL_UART_IRQHandler+0x104>
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	f003 0301 	and.w	r3, r3, #1
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d00b      	beq.n	800c50c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2204      	movs	r2, #4
 800c4fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c502:	f043 0202 	orr.w	r2, r3, #2
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	f003 0308 	and.w	r3, r3, #8
 800c512:	2b00      	cmp	r3, #0
 800c514:	d015      	beq.n	800c542 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c516:	69bb      	ldr	r3, [r7, #24]
 800c518:	f003 0320 	and.w	r3, r3, #32
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d104      	bne.n	800c52a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c520:	697a      	ldr	r2, [r7, #20]
 800c522:	4b48      	ldr	r3, [pc, #288]	; (800c644 <HAL_UART_IRQHandler+0x23c>)
 800c524:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c526:	2b00      	cmp	r3, #0
 800c528:	d00b      	beq.n	800c542 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2208      	movs	r2, #8
 800c530:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c538:	f043 0208 	orr.w	r2, r3, #8
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d011      	beq.n	800c570 <HAL_UART_IRQHandler+0x168>
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c552:	2b00      	cmp	r3, #0
 800c554:	d00c      	beq.n	800c570 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c55e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c566:	f043 0220 	orr.w	r2, r3, #32
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c576:	2b00      	cmp	r3, #0
 800c578:	f000 816f 	beq.w	800c85a <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c57c:	69fb      	ldr	r3, [r7, #28]
 800c57e:	f003 0320 	and.w	r3, r3, #32
 800c582:	2b00      	cmp	r3, #0
 800c584:	d011      	beq.n	800c5aa <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c586:	69bb      	ldr	r3, [r7, #24]
 800c588:	f003 0320 	and.w	r3, r3, #32
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d104      	bne.n	800c59a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c596:	2b00      	cmp	r3, #0
 800c598:	d007      	beq.n	800c5aa <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d003      	beq.n	800c5aa <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5b0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	689b      	ldr	r3, [r3, #8]
 800c5b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5bc:	2b40      	cmp	r3, #64	; 0x40
 800c5be:	d004      	beq.n	800c5ca <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d031      	beq.n	800c62e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 fe3a 	bl	800d244 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5da:	2b40      	cmp	r3, #64	; 0x40
 800c5dc:	d123      	bne.n	800c626 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	689a      	ldr	r2, [r3, #8]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5ec:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d013      	beq.n	800c61e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5fa:	4a14      	ldr	r2, [pc, #80]	; (800c64c <HAL_UART_IRQHandler+0x244>)
 800c5fc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c602:	4618      	mov	r0, r3
 800c604:	f7fa ffee 	bl	80075e4 <HAL_DMA_Abort_IT>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d017      	beq.n	800c63e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c618:	4610      	mov	r0, r2
 800c61a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c61c:	e00f      	b.n	800c63e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 f930 	bl	800c884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c624:	e00b      	b.n	800c63e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f000 f92c 	bl	800c884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c62c:	e007      	b.n	800c63e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f000 f928 	bl	800c884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2200      	movs	r2, #0
 800c638:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c63c:	e10d      	b.n	800c85a <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c63e:	bf00      	nop
    return;
 800c640:	e10b      	b.n	800c85a <HAL_UART_IRQHandler+0x452>
 800c642:	bf00      	nop
 800c644:	10000001 	.word	0x10000001
 800c648:	04000120 	.word	0x04000120
 800c64c:	0800d2a9 	.word	0x0800d2a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c654:	2b01      	cmp	r3, #1
 800c656:	f040 80ab 	bne.w	800c7b0 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	f003 0310 	and.w	r3, r3, #16
 800c660:	2b00      	cmp	r3, #0
 800c662:	f000 80a5 	beq.w	800c7b0 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c666:	69bb      	ldr	r3, [r7, #24]
 800c668:	f003 0310 	and.w	r3, r3, #16
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f000 809f 	beq.w	800c7b0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2210      	movs	r2, #16
 800c678:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c684:	2b40      	cmp	r3, #64	; 0x40
 800c686:	d155      	bne.n	800c734 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800c692:	893b      	ldrh	r3, [r7, #8]
 800c694:	2b00      	cmp	r3, #0
 800c696:	f000 80e2 	beq.w	800c85e <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c6a0:	893a      	ldrh	r2, [r7, #8]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	f080 80db 	bcs.w	800c85e <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	893a      	ldrh	r2, [r7, #8]
 800c6ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f003 0320 	and.w	r3, r3, #32
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d12b      	bne.n	800c718 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c6ce:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	689a      	ldr	r2, [r3, #8]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f022 0201 	bic.w	r2, r2, #1
 800c6de:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	689a      	ldr	r2, [r3, #8]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c6ee:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2220      	movs	r2, #32
 800c6f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f022 0210 	bic.w	r2, r2, #16
 800c70c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c712:	4618      	mov	r0, r3
 800c714:	f7fa ff0d 	bl	8007532 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c724:	b29b      	uxth	r3, r3
 800c726:	1ad3      	subs	r3, r2, r3
 800c728:	b29b      	uxth	r3, r3
 800c72a:	4619      	mov	r1, r3
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f000 f8b3 	bl	800c898 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c732:	e094      	b.n	800c85e <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c740:	b29b      	uxth	r3, r3
 800c742:	1ad3      	subs	r3, r2, r3
 800c744:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	2b00      	cmp	r3, #0
 800c750:	f000 8087 	beq.w	800c862 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 800c754:	897b      	ldrh	r3, [r7, #10]
 800c756:	2b00      	cmp	r3, #0
 800c758:	f000 8083 	beq.w	800c862 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	681a      	ldr	r2, [r3, #0]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c76a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	6812      	ldr	r2, [r2, #0]
 800c776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c77a:	f023 0301 	bic.w	r3, r3, #1
 800c77e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2220      	movs	r2, #32
 800c784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2200      	movs	r2, #0
 800c792:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f022 0210 	bic.w	r2, r2, #16
 800c7a2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c7a4:	897b      	ldrh	r3, [r7, #10]
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 f875 	bl	800c898 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c7ae:	e058      	b.n	800c862 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d00d      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x3ce>
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d008      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c7cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f001 f876 	bl	800d8c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7d4:	e048      	b.n	800c868 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c7d6:	69fb      	ldr	r3, [r7, #28]
 800c7d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d012      	beq.n	800c806 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c7e0:	69bb      	ldr	r3, [r7, #24]
 800c7e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d104      	bne.n	800c7f4 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d008      	beq.n	800c806 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d034      	beq.n	800c866 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	4798      	blx	r3
    }
    return;
 800c804:	e02f      	b.n	800c866 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d008      	beq.n	800c822 <HAL_UART_IRQHandler+0x41a>
 800c810:	69bb      	ldr	r3, [r7, #24]
 800c812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c816:	2b00      	cmp	r3, #0
 800c818:	d003      	beq.n	800c822 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 fd5a 	bl	800d2d4 <UART_EndTransmit_IT>
    return;
 800c820:	e022      	b.n	800c868 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d008      	beq.n	800c83e <HAL_UART_IRQHandler+0x436>
 800c82c:	69bb      	ldr	r3, [r7, #24]
 800c82e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c832:	2b00      	cmp	r3, #0
 800c834:	d003      	beq.n	800c83e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f001 f856 	bl	800d8e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c83c:	e014      	b.n	800c868 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c83e:	69fb      	ldr	r3, [r7, #28]
 800c840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c844:	2b00      	cmp	r3, #0
 800c846:	d00f      	beq.n	800c868 <HAL_UART_IRQHandler+0x460>
 800c848:	69bb      	ldr	r3, [r7, #24]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	da0c      	bge.n	800c868 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f001 f840 	bl	800d8d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c854:	e008      	b.n	800c868 <HAL_UART_IRQHandler+0x460>
      return;
 800c856:	bf00      	nop
 800c858:	e006      	b.n	800c868 <HAL_UART_IRQHandler+0x460>
    return;
 800c85a:	bf00      	nop
 800c85c:	e004      	b.n	800c868 <HAL_UART_IRQHandler+0x460>
      return;
 800c85e:	bf00      	nop
 800c860:	e002      	b.n	800c868 <HAL_UART_IRQHandler+0x460>
      return;
 800c862:	bf00      	nop
 800c864:	e000      	b.n	800c868 <HAL_UART_IRQHandler+0x460>
    return;
 800c866:	bf00      	nop
  }
}
 800c868:	3720      	adds	r7, #32
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop

0800c870 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c870:	b480      	push	{r7}
 800c872:	b083      	sub	sp, #12
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c878:	bf00      	nop
 800c87a:	370c      	adds	r7, #12
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr

0800c884 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c884:	b480      	push	{r7}
 800c886:	b083      	sub	sp, #12
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c88c:	bf00      	nop
 800c88e:	370c      	adds	r7, #12
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr

0800c898 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c898:	b480      	push	{r7}
 800c89a:	b083      	sub	sp, #12
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c8a4:	bf00      	nop
 800c8a6:	370c      	adds	r7, #12
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr

0800c8b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c8b0:	b5b0      	push	{r4, r5, r7, lr}
 800c8b2:	b088      	sub	sp, #32
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	689a      	ldr	r2, [r3, #8]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	691b      	ldr	r3, [r3, #16]
 800c8c4:	431a      	orrs	r2, r3
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	695b      	ldr	r3, [r3, #20]
 800c8ca:	431a      	orrs	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	69db      	ldr	r3, [r3, #28]
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	681a      	ldr	r2, [r3, #0]
 800c8da:	4baf      	ldr	r3, [pc, #700]	; (800cb98 <UART_SetConfig+0x2e8>)
 800c8dc:	4013      	ands	r3, r2
 800c8de:	687a      	ldr	r2, [r7, #4]
 800c8e0:	6812      	ldr	r2, [r2, #0]
 800c8e2:	69f9      	ldr	r1, [r7, #28]
 800c8e4:	430b      	orrs	r3, r1
 800c8e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	68da      	ldr	r2, [r3, #12]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	430a      	orrs	r2, r1
 800c8fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	699b      	ldr	r3, [r3, #24]
 800c902:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4aa4      	ldr	r2, [pc, #656]	; (800cb9c <UART_SetConfig+0x2ec>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d004      	beq.n	800c918 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6a1b      	ldr	r3, [r3, #32]
 800c912:	69fa      	ldr	r2, [r7, #28]
 800c914:	4313      	orrs	r3, r2
 800c916:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c922:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c926:	687a      	ldr	r2, [r7, #4]
 800c928:	6812      	ldr	r2, [r2, #0]
 800c92a:	69f9      	ldr	r1, [r7, #28]
 800c92c:	430b      	orrs	r3, r1
 800c92e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c936:	f023 010f 	bic.w	r1, r3, #15
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	430a      	orrs	r2, r1
 800c944:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4a95      	ldr	r2, [pc, #596]	; (800cba0 <UART_SetConfig+0x2f0>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d120      	bne.n	800c992 <UART_SetConfig+0xe2>
 800c950:	4b94      	ldr	r3, [pc, #592]	; (800cba4 <UART_SetConfig+0x2f4>)
 800c952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c956:	f003 0303 	and.w	r3, r3, #3
 800c95a:	2b03      	cmp	r3, #3
 800c95c:	d816      	bhi.n	800c98c <UART_SetConfig+0xdc>
 800c95e:	a201      	add	r2, pc, #4	; (adr r2, 800c964 <UART_SetConfig+0xb4>)
 800c960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c964:	0800c975 	.word	0x0800c975
 800c968:	0800c981 	.word	0x0800c981
 800c96c:	0800c97b 	.word	0x0800c97b
 800c970:	0800c987 	.word	0x0800c987
 800c974:	2301      	movs	r3, #1
 800c976:	76fb      	strb	r3, [r7, #27]
 800c978:	e0bc      	b.n	800caf4 <UART_SetConfig+0x244>
 800c97a:	2302      	movs	r3, #2
 800c97c:	76fb      	strb	r3, [r7, #27]
 800c97e:	e0b9      	b.n	800caf4 <UART_SetConfig+0x244>
 800c980:	2304      	movs	r3, #4
 800c982:	76fb      	strb	r3, [r7, #27]
 800c984:	e0b6      	b.n	800caf4 <UART_SetConfig+0x244>
 800c986:	2308      	movs	r3, #8
 800c988:	76fb      	strb	r3, [r7, #27]
 800c98a:	e0b3      	b.n	800caf4 <UART_SetConfig+0x244>
 800c98c:	2310      	movs	r3, #16
 800c98e:	76fb      	strb	r3, [r7, #27]
 800c990:	e0b0      	b.n	800caf4 <UART_SetConfig+0x244>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4a84      	ldr	r2, [pc, #528]	; (800cba8 <UART_SetConfig+0x2f8>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d132      	bne.n	800ca02 <UART_SetConfig+0x152>
 800c99c:	4b81      	ldr	r3, [pc, #516]	; (800cba4 <UART_SetConfig+0x2f4>)
 800c99e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9a2:	f003 030c 	and.w	r3, r3, #12
 800c9a6:	2b0c      	cmp	r3, #12
 800c9a8:	d828      	bhi.n	800c9fc <UART_SetConfig+0x14c>
 800c9aa:	a201      	add	r2, pc, #4	; (adr r2, 800c9b0 <UART_SetConfig+0x100>)
 800c9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b0:	0800c9e5 	.word	0x0800c9e5
 800c9b4:	0800c9fd 	.word	0x0800c9fd
 800c9b8:	0800c9fd 	.word	0x0800c9fd
 800c9bc:	0800c9fd 	.word	0x0800c9fd
 800c9c0:	0800c9f1 	.word	0x0800c9f1
 800c9c4:	0800c9fd 	.word	0x0800c9fd
 800c9c8:	0800c9fd 	.word	0x0800c9fd
 800c9cc:	0800c9fd 	.word	0x0800c9fd
 800c9d0:	0800c9eb 	.word	0x0800c9eb
 800c9d4:	0800c9fd 	.word	0x0800c9fd
 800c9d8:	0800c9fd 	.word	0x0800c9fd
 800c9dc:	0800c9fd 	.word	0x0800c9fd
 800c9e0:	0800c9f7 	.word	0x0800c9f7
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	76fb      	strb	r3, [r7, #27]
 800c9e8:	e084      	b.n	800caf4 <UART_SetConfig+0x244>
 800c9ea:	2302      	movs	r3, #2
 800c9ec:	76fb      	strb	r3, [r7, #27]
 800c9ee:	e081      	b.n	800caf4 <UART_SetConfig+0x244>
 800c9f0:	2304      	movs	r3, #4
 800c9f2:	76fb      	strb	r3, [r7, #27]
 800c9f4:	e07e      	b.n	800caf4 <UART_SetConfig+0x244>
 800c9f6:	2308      	movs	r3, #8
 800c9f8:	76fb      	strb	r3, [r7, #27]
 800c9fa:	e07b      	b.n	800caf4 <UART_SetConfig+0x244>
 800c9fc:	2310      	movs	r3, #16
 800c9fe:	76fb      	strb	r3, [r7, #27]
 800ca00:	e078      	b.n	800caf4 <UART_SetConfig+0x244>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a69      	ldr	r2, [pc, #420]	; (800cbac <UART_SetConfig+0x2fc>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d120      	bne.n	800ca4e <UART_SetConfig+0x19e>
 800ca0c:	4b65      	ldr	r3, [pc, #404]	; (800cba4 <UART_SetConfig+0x2f4>)
 800ca0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca12:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ca16:	2b30      	cmp	r3, #48	; 0x30
 800ca18:	d013      	beq.n	800ca42 <UART_SetConfig+0x192>
 800ca1a:	2b30      	cmp	r3, #48	; 0x30
 800ca1c:	d814      	bhi.n	800ca48 <UART_SetConfig+0x198>
 800ca1e:	2b20      	cmp	r3, #32
 800ca20:	d009      	beq.n	800ca36 <UART_SetConfig+0x186>
 800ca22:	2b20      	cmp	r3, #32
 800ca24:	d810      	bhi.n	800ca48 <UART_SetConfig+0x198>
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d002      	beq.n	800ca30 <UART_SetConfig+0x180>
 800ca2a:	2b10      	cmp	r3, #16
 800ca2c:	d006      	beq.n	800ca3c <UART_SetConfig+0x18c>
 800ca2e:	e00b      	b.n	800ca48 <UART_SetConfig+0x198>
 800ca30:	2300      	movs	r3, #0
 800ca32:	76fb      	strb	r3, [r7, #27]
 800ca34:	e05e      	b.n	800caf4 <UART_SetConfig+0x244>
 800ca36:	2302      	movs	r3, #2
 800ca38:	76fb      	strb	r3, [r7, #27]
 800ca3a:	e05b      	b.n	800caf4 <UART_SetConfig+0x244>
 800ca3c:	2304      	movs	r3, #4
 800ca3e:	76fb      	strb	r3, [r7, #27]
 800ca40:	e058      	b.n	800caf4 <UART_SetConfig+0x244>
 800ca42:	2308      	movs	r3, #8
 800ca44:	76fb      	strb	r3, [r7, #27]
 800ca46:	e055      	b.n	800caf4 <UART_SetConfig+0x244>
 800ca48:	2310      	movs	r3, #16
 800ca4a:	76fb      	strb	r3, [r7, #27]
 800ca4c:	e052      	b.n	800caf4 <UART_SetConfig+0x244>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4a57      	ldr	r2, [pc, #348]	; (800cbb0 <UART_SetConfig+0x300>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d120      	bne.n	800ca9a <UART_SetConfig+0x1ea>
 800ca58:	4b52      	ldr	r3, [pc, #328]	; (800cba4 <UART_SetConfig+0x2f4>)
 800ca5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ca62:	2bc0      	cmp	r3, #192	; 0xc0
 800ca64:	d013      	beq.n	800ca8e <UART_SetConfig+0x1de>
 800ca66:	2bc0      	cmp	r3, #192	; 0xc0
 800ca68:	d814      	bhi.n	800ca94 <UART_SetConfig+0x1e4>
 800ca6a:	2b80      	cmp	r3, #128	; 0x80
 800ca6c:	d009      	beq.n	800ca82 <UART_SetConfig+0x1d2>
 800ca6e:	2b80      	cmp	r3, #128	; 0x80
 800ca70:	d810      	bhi.n	800ca94 <UART_SetConfig+0x1e4>
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d002      	beq.n	800ca7c <UART_SetConfig+0x1cc>
 800ca76:	2b40      	cmp	r3, #64	; 0x40
 800ca78:	d006      	beq.n	800ca88 <UART_SetConfig+0x1d8>
 800ca7a:	e00b      	b.n	800ca94 <UART_SetConfig+0x1e4>
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	76fb      	strb	r3, [r7, #27]
 800ca80:	e038      	b.n	800caf4 <UART_SetConfig+0x244>
 800ca82:	2302      	movs	r3, #2
 800ca84:	76fb      	strb	r3, [r7, #27]
 800ca86:	e035      	b.n	800caf4 <UART_SetConfig+0x244>
 800ca88:	2304      	movs	r3, #4
 800ca8a:	76fb      	strb	r3, [r7, #27]
 800ca8c:	e032      	b.n	800caf4 <UART_SetConfig+0x244>
 800ca8e:	2308      	movs	r3, #8
 800ca90:	76fb      	strb	r3, [r7, #27]
 800ca92:	e02f      	b.n	800caf4 <UART_SetConfig+0x244>
 800ca94:	2310      	movs	r3, #16
 800ca96:	76fb      	strb	r3, [r7, #27]
 800ca98:	e02c      	b.n	800caf4 <UART_SetConfig+0x244>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4a3f      	ldr	r2, [pc, #252]	; (800cb9c <UART_SetConfig+0x2ec>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d125      	bne.n	800caf0 <UART_SetConfig+0x240>
 800caa4:	4b3f      	ldr	r3, [pc, #252]	; (800cba4 <UART_SetConfig+0x2f4>)
 800caa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800caaa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800caae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cab2:	d017      	beq.n	800cae4 <UART_SetConfig+0x234>
 800cab4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cab8:	d817      	bhi.n	800caea <UART_SetConfig+0x23a>
 800caba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cabe:	d00b      	beq.n	800cad8 <UART_SetConfig+0x228>
 800cac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cac4:	d811      	bhi.n	800caea <UART_SetConfig+0x23a>
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d003      	beq.n	800cad2 <UART_SetConfig+0x222>
 800caca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cace:	d006      	beq.n	800cade <UART_SetConfig+0x22e>
 800cad0:	e00b      	b.n	800caea <UART_SetConfig+0x23a>
 800cad2:	2300      	movs	r3, #0
 800cad4:	76fb      	strb	r3, [r7, #27]
 800cad6:	e00d      	b.n	800caf4 <UART_SetConfig+0x244>
 800cad8:	2302      	movs	r3, #2
 800cada:	76fb      	strb	r3, [r7, #27]
 800cadc:	e00a      	b.n	800caf4 <UART_SetConfig+0x244>
 800cade:	2304      	movs	r3, #4
 800cae0:	76fb      	strb	r3, [r7, #27]
 800cae2:	e007      	b.n	800caf4 <UART_SetConfig+0x244>
 800cae4:	2308      	movs	r3, #8
 800cae6:	76fb      	strb	r3, [r7, #27]
 800cae8:	e004      	b.n	800caf4 <UART_SetConfig+0x244>
 800caea:	2310      	movs	r3, #16
 800caec:	76fb      	strb	r3, [r7, #27]
 800caee:	e001      	b.n	800caf4 <UART_SetConfig+0x244>
 800caf0:	2310      	movs	r3, #16
 800caf2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4a28      	ldr	r2, [pc, #160]	; (800cb9c <UART_SetConfig+0x2ec>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	f040 809e 	bne.w	800cc3c <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cb00:	7efb      	ldrb	r3, [r7, #27]
 800cb02:	2b08      	cmp	r3, #8
 800cb04:	d823      	bhi.n	800cb4e <UART_SetConfig+0x29e>
 800cb06:	a201      	add	r2, pc, #4	; (adr r2, 800cb0c <UART_SetConfig+0x25c>)
 800cb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb0c:	0800cb31 	.word	0x0800cb31
 800cb10:	0800cb4f 	.word	0x0800cb4f
 800cb14:	0800cb39 	.word	0x0800cb39
 800cb18:	0800cb4f 	.word	0x0800cb4f
 800cb1c:	0800cb3f 	.word	0x0800cb3f
 800cb20:	0800cb4f 	.word	0x0800cb4f
 800cb24:	0800cb4f 	.word	0x0800cb4f
 800cb28:	0800cb4f 	.word	0x0800cb4f
 800cb2c:	0800cb47 	.word	0x0800cb47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb30:	f7fd fc64 	bl	800a3fc <HAL_RCC_GetPCLK1Freq>
 800cb34:	6178      	str	r0, [r7, #20]
        break;
 800cb36:	e00f      	b.n	800cb58 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cb38:	4b1e      	ldr	r3, [pc, #120]	; (800cbb4 <UART_SetConfig+0x304>)
 800cb3a:	617b      	str	r3, [r7, #20]
        break;
 800cb3c:	e00c      	b.n	800cb58 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cb3e:	f7fd fbef 	bl	800a320 <HAL_RCC_GetSysClockFreq>
 800cb42:	6178      	str	r0, [r7, #20]
        break;
 800cb44:	e008      	b.n	800cb58 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb4a:	617b      	str	r3, [r7, #20]
        break;
 800cb4c:	e004      	b.n	800cb58 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800cb52:	2301      	movs	r3, #1
 800cb54:	76bb      	strb	r3, [r7, #26]
        break;
 800cb56:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	f000 812e 	beq.w	800cdbc <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb64:	4a14      	ldr	r2, [pc, #80]	; (800cbb8 <UART_SetConfig+0x308>)
 800cb66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb72:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	685a      	ldr	r2, [r3, #4]
 800cb78:	4613      	mov	r3, r2
 800cb7a:	005b      	lsls	r3, r3, #1
 800cb7c:	4413      	add	r3, r2
 800cb7e:	68ba      	ldr	r2, [r7, #8]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d305      	bcc.n	800cb90 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb8a:	68ba      	ldr	r2, [r7, #8]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d915      	bls.n	800cbbc <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 800cb90:	2301      	movs	r3, #1
 800cb92:	76bb      	strb	r3, [r7, #26]
 800cb94:	e112      	b.n	800cdbc <UART_SetConfig+0x50c>
 800cb96:	bf00      	nop
 800cb98:	cfff69f3 	.word	0xcfff69f3
 800cb9c:	40008000 	.word	0x40008000
 800cba0:	40013800 	.word	0x40013800
 800cba4:	40021000 	.word	0x40021000
 800cba8:	40004400 	.word	0x40004400
 800cbac:	40004800 	.word	0x40004800
 800cbb0:	40004c00 	.word	0x40004c00
 800cbb4:	00f42400 	.word	0x00f42400
 800cbb8:	080133d4 	.word	0x080133d4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f04f 0100 	mov.w	r1, #0
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc8:	4a86      	ldr	r2, [pc, #536]	; (800cde4 <UART_SetConfig+0x534>)
 800cbca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbce:	b29a      	uxth	r2, r3
 800cbd0:	f04f 0300 	mov.w	r3, #0
 800cbd4:	f7f4 f880 	bl	8000cd8 <__aeabi_uldivmod>
 800cbd8:	4602      	mov	r2, r0
 800cbda:	460b      	mov	r3, r1
 800cbdc:	4610      	mov	r0, r2
 800cbde:	4619      	mov	r1, r3
 800cbe0:	f04f 0200 	mov.w	r2, #0
 800cbe4:	f04f 0300 	mov.w	r3, #0
 800cbe8:	020b      	lsls	r3, r1, #8
 800cbea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cbee:	0202      	lsls	r2, r0, #8
 800cbf0:	6879      	ldr	r1, [r7, #4]
 800cbf2:	6849      	ldr	r1, [r1, #4]
 800cbf4:	0849      	lsrs	r1, r1, #1
 800cbf6:	4608      	mov	r0, r1
 800cbf8:	f04f 0100 	mov.w	r1, #0
 800cbfc:	1814      	adds	r4, r2, r0
 800cbfe:	eb43 0501 	adc.w	r5, r3, r1
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	461a      	mov	r2, r3
 800cc08:	f04f 0300 	mov.w	r3, #0
 800cc0c:	4620      	mov	r0, r4
 800cc0e:	4629      	mov	r1, r5
 800cc10:	f7f4 f862 	bl	8000cd8 <__aeabi_uldivmod>
 800cc14:	4602      	mov	r2, r0
 800cc16:	460b      	mov	r3, r1
 800cc18:	4613      	mov	r3, r2
 800cc1a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc22:	d308      	bcc.n	800cc36 <UART_SetConfig+0x386>
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc2a:	d204      	bcs.n	800cc36 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	693a      	ldr	r2, [r7, #16]
 800cc32:	60da      	str	r2, [r3, #12]
 800cc34:	e0c2      	b.n	800cdbc <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800cc36:	2301      	movs	r3, #1
 800cc38:	76bb      	strb	r3, [r7, #26]
 800cc3a:	e0bf      	b.n	800cdbc <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	69db      	ldr	r3, [r3, #28]
 800cc40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc44:	d165      	bne.n	800cd12 <UART_SetConfig+0x462>
  {
    switch (clocksource)
 800cc46:	7efb      	ldrb	r3, [r7, #27]
 800cc48:	2b08      	cmp	r3, #8
 800cc4a:	d828      	bhi.n	800cc9e <UART_SetConfig+0x3ee>
 800cc4c:	a201      	add	r2, pc, #4	; (adr r2, 800cc54 <UART_SetConfig+0x3a4>)
 800cc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc52:	bf00      	nop
 800cc54:	0800cc79 	.word	0x0800cc79
 800cc58:	0800cc81 	.word	0x0800cc81
 800cc5c:	0800cc89 	.word	0x0800cc89
 800cc60:	0800cc9f 	.word	0x0800cc9f
 800cc64:	0800cc8f 	.word	0x0800cc8f
 800cc68:	0800cc9f 	.word	0x0800cc9f
 800cc6c:	0800cc9f 	.word	0x0800cc9f
 800cc70:	0800cc9f 	.word	0x0800cc9f
 800cc74:	0800cc97 	.word	0x0800cc97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc78:	f7fd fbc0 	bl	800a3fc <HAL_RCC_GetPCLK1Freq>
 800cc7c:	6178      	str	r0, [r7, #20]
        break;
 800cc7e:	e013      	b.n	800cca8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc80:	f7fd fbd2 	bl	800a428 <HAL_RCC_GetPCLK2Freq>
 800cc84:	6178      	str	r0, [r7, #20]
        break;
 800cc86:	e00f      	b.n	800cca8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cc88:	4b57      	ldr	r3, [pc, #348]	; (800cde8 <UART_SetConfig+0x538>)
 800cc8a:	617b      	str	r3, [r7, #20]
        break;
 800cc8c:	e00c      	b.n	800cca8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cc8e:	f7fd fb47 	bl	800a320 <HAL_RCC_GetSysClockFreq>
 800cc92:	6178      	str	r0, [r7, #20]
        break;
 800cc94:	e008      	b.n	800cca8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc9a:	617b      	str	r3, [r7, #20]
        break;
 800cc9c:	e004      	b.n	800cca8 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800cca2:	2301      	movs	r3, #1
 800cca4:	76bb      	strb	r3, [r7, #26]
        break;
 800cca6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	f000 8086 	beq.w	800cdbc <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb4:	4a4b      	ldr	r2, [pc, #300]	; (800cde4 <UART_SetConfig+0x534>)
 800ccb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccba:	461a      	mov	r2, r3
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccc2:	005a      	lsls	r2, r3, #1
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	085b      	lsrs	r3, r3, #1
 800ccca:	441a      	add	r2, r3
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccd4:	b29b      	uxth	r3, r3
 800ccd6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	2b0f      	cmp	r3, #15
 800ccdc:	d916      	bls.n	800cd0c <UART_SetConfig+0x45c>
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cce4:	d212      	bcs.n	800cd0c <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	b29b      	uxth	r3, r3
 800ccea:	f023 030f 	bic.w	r3, r3, #15
 800ccee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	085b      	lsrs	r3, r3, #1
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	f003 0307 	and.w	r3, r3, #7
 800ccfa:	b29a      	uxth	r2, r3
 800ccfc:	89fb      	ldrh	r3, [r7, #14]
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	89fa      	ldrh	r2, [r7, #14]
 800cd08:	60da      	str	r2, [r3, #12]
 800cd0a:	e057      	b.n	800cdbc <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	76bb      	strb	r3, [r7, #26]
 800cd10:	e054      	b.n	800cdbc <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cd12:	7efb      	ldrb	r3, [r7, #27]
 800cd14:	2b08      	cmp	r3, #8
 800cd16:	d828      	bhi.n	800cd6a <UART_SetConfig+0x4ba>
 800cd18:	a201      	add	r2, pc, #4	; (adr r2, 800cd20 <UART_SetConfig+0x470>)
 800cd1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd1e:	bf00      	nop
 800cd20:	0800cd45 	.word	0x0800cd45
 800cd24:	0800cd4d 	.word	0x0800cd4d
 800cd28:	0800cd55 	.word	0x0800cd55
 800cd2c:	0800cd6b 	.word	0x0800cd6b
 800cd30:	0800cd5b 	.word	0x0800cd5b
 800cd34:	0800cd6b 	.word	0x0800cd6b
 800cd38:	0800cd6b 	.word	0x0800cd6b
 800cd3c:	0800cd6b 	.word	0x0800cd6b
 800cd40:	0800cd63 	.word	0x0800cd63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd44:	f7fd fb5a 	bl	800a3fc <HAL_RCC_GetPCLK1Freq>
 800cd48:	6178      	str	r0, [r7, #20]
        break;
 800cd4a:	e013      	b.n	800cd74 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd4c:	f7fd fb6c 	bl	800a428 <HAL_RCC_GetPCLK2Freq>
 800cd50:	6178      	str	r0, [r7, #20]
        break;
 800cd52:	e00f      	b.n	800cd74 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd54:	4b24      	ldr	r3, [pc, #144]	; (800cde8 <UART_SetConfig+0x538>)
 800cd56:	617b      	str	r3, [r7, #20]
        break;
 800cd58:	e00c      	b.n	800cd74 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd5a:	f7fd fae1 	bl	800a320 <HAL_RCC_GetSysClockFreq>
 800cd5e:	6178      	str	r0, [r7, #20]
        break;
 800cd60:	e008      	b.n	800cd74 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd66:	617b      	str	r3, [r7, #20]
        break;
 800cd68:	e004      	b.n	800cd74 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	76bb      	strb	r3, [r7, #26]
        break;
 800cd72:	bf00      	nop
    }

    if (pclk != 0U)
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d020      	beq.n	800cdbc <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd7e:	4a19      	ldr	r2, [pc, #100]	; (800cde4 <UART_SetConfig+0x534>)
 800cd80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd84:	461a      	mov	r2, r3
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	085b      	lsrs	r3, r3, #1
 800cd92:	441a      	add	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	2b0f      	cmp	r3, #15
 800cda4:	d908      	bls.n	800cdb8 <UART_SetConfig+0x508>
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdac:	d204      	bcs.n	800cdb8 <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	693a      	ldr	r2, [r7, #16]
 800cdb4:	60da      	str	r2, [r3, #12]
 800cdb6:	e001      	b.n	800cdbc <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800cdb8:	2301      	movs	r3, #1
 800cdba:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cdd8:	7ebb      	ldrb	r3, [r7, #26]
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3720      	adds	r7, #32
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bdb0      	pop	{r4, r5, r7, pc}
 800cde2:	bf00      	nop
 800cde4:	080133d4 	.word	0x080133d4
 800cde8:	00f42400 	.word	0x00f42400

0800cdec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b083      	sub	sp, #12
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdf8:	f003 0301 	and.w	r3, r3, #1
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d00a      	beq.n	800ce16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	430a      	orrs	r2, r1
 800ce14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce1a:	f003 0302 	and.w	r3, r3, #2
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d00a      	beq.n	800ce38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	430a      	orrs	r2, r1
 800ce36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce3c:	f003 0304 	and.w	r3, r3, #4
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d00a      	beq.n	800ce5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	685b      	ldr	r3, [r3, #4]
 800ce4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	430a      	orrs	r2, r1
 800ce58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce5e:	f003 0308 	and.w	r3, r3, #8
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d00a      	beq.n	800ce7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	430a      	orrs	r2, r1
 800ce7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce80:	f003 0310 	and.w	r3, r3, #16
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d00a      	beq.n	800ce9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	689b      	ldr	r3, [r3, #8]
 800ce8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	430a      	orrs	r2, r1
 800ce9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cea2:	f003 0320 	and.w	r3, r3, #32
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d00a      	beq.n	800cec0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	689b      	ldr	r3, [r3, #8]
 800ceb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	430a      	orrs	r2, r1
 800cebe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d01a      	beq.n	800cf02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	430a      	orrs	r2, r1
 800cee0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ceea:	d10a      	bne.n	800cf02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	430a      	orrs	r2, r1
 800cf00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00a      	beq.n	800cf24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	430a      	orrs	r2, r1
 800cf22:	605a      	str	r2, [r3, #4]
  }
}
 800cf24:	bf00      	nop
 800cf26:	370c      	adds	r7, #12
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr

0800cf30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b086      	sub	sp, #24
 800cf34:	af02      	add	r7, sp, #8
 800cf36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf40:	f7f8 fe6c 	bl	8005c1c <HAL_GetTick>
 800cf44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f003 0308 	and.w	r3, r3, #8
 800cf50:	2b08      	cmp	r3, #8
 800cf52:	d10e      	bne.n	800cf72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf58:	9300      	str	r3, [sp, #0]
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f000 f82f 	bl	800cfc6 <UART_WaitOnFlagUntilTimeout>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d001      	beq.n	800cf72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf6e:	2303      	movs	r3, #3
 800cf70:	e025      	b.n	800cfbe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f003 0304 	and.w	r3, r3, #4
 800cf7c:	2b04      	cmp	r3, #4
 800cf7e:	d10e      	bne.n	800cf9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf84:	9300      	str	r3, [sp, #0]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f000 f819 	bl	800cfc6 <UART_WaitOnFlagUntilTimeout>
 800cf94:	4603      	mov	r3, r0
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d001      	beq.n	800cf9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf9a:	2303      	movs	r3, #3
 800cf9c:	e00f      	b.n	800cfbe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2220      	movs	r2, #32
 800cfa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2220      	movs	r2, #32
 800cfaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b084      	sub	sp, #16
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	60f8      	str	r0, [r7, #12]
 800cfce:	60b9      	str	r1, [r7, #8]
 800cfd0:	603b      	str	r3, [r7, #0]
 800cfd2:	4613      	mov	r3, r2
 800cfd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cfd6:	e062      	b.n	800d09e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfde:	d05e      	beq.n	800d09e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cfe0:	f7f8 fe1c 	bl	8005c1c <HAL_GetTick>
 800cfe4:	4602      	mov	r2, r0
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	1ad3      	subs	r3, r2, r3
 800cfea:	69ba      	ldr	r2, [r7, #24]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d302      	bcc.n	800cff6 <UART_WaitOnFlagUntilTimeout+0x30>
 800cff0:	69bb      	ldr	r3, [r7, #24]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d11d      	bne.n	800d032 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d004:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	689a      	ldr	r2, [r3, #8]
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f022 0201 	bic.w	r2, r2, #1
 800d014:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2220      	movs	r2, #32
 800d01a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2220      	movs	r2, #32
 800d022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2200      	movs	r2, #0
 800d02a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d02e:	2303      	movs	r3, #3
 800d030:	e045      	b.n	800d0be <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f003 0304 	and.w	r3, r3, #4
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d02e      	beq.n	800d09e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	69db      	ldr	r3, [r3, #28]
 800d046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d04a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d04e:	d126      	bne.n	800d09e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d058:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	681a      	ldr	r2, [r3, #0]
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d068:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	689a      	ldr	r2, [r3, #8]
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f022 0201 	bic.w	r2, r2, #1
 800d078:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2220      	movs	r2, #32
 800d07e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2220      	movs	r2, #32
 800d086:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2220      	movs	r2, #32
 800d08e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2200      	movs	r2, #0
 800d096:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d09a:	2303      	movs	r3, #3
 800d09c:	e00f      	b.n	800d0be <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	69da      	ldr	r2, [r3, #28]
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	4013      	ands	r3, r2
 800d0a8:	68ba      	ldr	r2, [r7, #8]
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	bf0c      	ite	eq
 800d0ae:	2301      	moveq	r3, #1
 800d0b0:	2300      	movne	r3, #0
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	79fb      	ldrb	r3, [r7, #7]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d08d      	beq.n	800cfd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d0bc:	2300      	movs	r3, #0
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3710      	adds	r7, #16
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
	...

0800d0c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b085      	sub	sp, #20
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	60b9      	str	r1, [r7, #8]
 800d0d2:	4613      	mov	r3, r2
 800d0d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	68ba      	ldr	r2, [r7, #8]
 800d0da:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	88fa      	ldrh	r2, [r7, #6]
 800d0e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	88fa      	ldrh	r2, [r7, #6]
 800d0e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	689b      	ldr	r3, [r3, #8]
 800d0f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0fa:	d10e      	bne.n	800d11a <UART_Start_Receive_IT+0x52>
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	691b      	ldr	r3, [r3, #16]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d105      	bne.n	800d110 <UART_Start_Receive_IT+0x48>
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d10a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d10e:	e02d      	b.n	800d16c <UART_Start_Receive_IT+0xa4>
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	22ff      	movs	r2, #255	; 0xff
 800d114:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d118:	e028      	b.n	800d16c <UART_Start_Receive_IT+0xa4>
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	689b      	ldr	r3, [r3, #8]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d10d      	bne.n	800d13e <UART_Start_Receive_IT+0x76>
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	691b      	ldr	r3, [r3, #16]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d104      	bne.n	800d134 <UART_Start_Receive_IT+0x6c>
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	22ff      	movs	r2, #255	; 0xff
 800d12e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d132:	e01b      	b.n	800d16c <UART_Start_Receive_IT+0xa4>
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	227f      	movs	r2, #127	; 0x7f
 800d138:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d13c:	e016      	b.n	800d16c <UART_Start_Receive_IT+0xa4>
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	689b      	ldr	r3, [r3, #8]
 800d142:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d146:	d10d      	bne.n	800d164 <UART_Start_Receive_IT+0x9c>
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	691b      	ldr	r3, [r3, #16]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d104      	bne.n	800d15a <UART_Start_Receive_IT+0x92>
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	227f      	movs	r2, #127	; 0x7f
 800d154:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d158:	e008      	b.n	800d16c <UART_Start_Receive_IT+0xa4>
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	223f      	movs	r2, #63	; 0x3f
 800d15e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d162:	e003      	b.n	800d16c <UART_Start_Receive_IT+0xa4>
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2200      	movs	r2, #0
 800d168:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2200      	movs	r2, #0
 800d170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2222      	movs	r2, #34	; 0x22
 800d178:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	689a      	ldr	r2, [r3, #8]
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f042 0201 	orr.w	r2, r2, #1
 800d18a:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d194:	d12a      	bne.n	800d1ec <UART_Start_Receive_IT+0x124>
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d19c:	88fa      	ldrh	r2, [r7, #6]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d324      	bcc.n	800d1ec <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	689b      	ldr	r3, [r3, #8]
 800d1a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1aa:	d107      	bne.n	800d1bc <UART_Start_Receive_IT+0xf4>
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	691b      	ldr	r3, [r3, #16]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d103      	bne.n	800d1bc <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	4a1f      	ldr	r2, [pc, #124]	; (800d234 <UART_Start_Receive_IT+0x16c>)
 800d1b8:	671a      	str	r2, [r3, #112]	; 0x70
 800d1ba:	e002      	b.n	800d1c2 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	4a1e      	ldr	r2, [pc, #120]	; (800d238 <UART_Start_Receive_IT+0x170>)
 800d1c0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	681a      	ldr	r2, [r3, #0]
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d1d8:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	689a      	ldr	r2, [r3, #8]
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d1e8:	609a      	str	r2, [r3, #8]
 800d1ea:	e01b      	b.n	800d224 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	689b      	ldr	r3, [r3, #8]
 800d1f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1f4:	d107      	bne.n	800d206 <UART_Start_Receive_IT+0x13e>
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	691b      	ldr	r3, [r3, #16]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d103      	bne.n	800d206 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	4a0e      	ldr	r2, [pc, #56]	; (800d23c <UART_Start_Receive_IT+0x174>)
 800d202:	671a      	str	r2, [r3, #112]	; 0x70
 800d204:	e002      	b.n	800d20c <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	4a0d      	ldr	r2, [pc, #52]	; (800d240 <UART_Start_Receive_IT+0x178>)
 800d20a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2200      	movs	r2, #0
 800d210:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800d222:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800d224:	2300      	movs	r3, #0
}
 800d226:	4618      	mov	r0, r3
 800d228:	3714      	adds	r7, #20
 800d22a:	46bd      	mov	sp, r7
 800d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d230:	4770      	bx	lr
 800d232:	bf00      	nop
 800d234:	0800d6bd 	.word	0x0800d6bd
 800d238:	0800d4b9 	.word	0x0800d4b9
 800d23c:	0800d3e1 	.word	0x0800d3e1
 800d240:	0800d309 	.word	0x0800d309

0800d244 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	681a      	ldr	r2, [r3, #0]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d25a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	689b      	ldr	r3, [r3, #8]
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	6812      	ldr	r2, [r2, #0]
 800d266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d26a:	f023 0301 	bic.w	r3, r3, #1
 800d26e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d274:	2b01      	cmp	r3, #1
 800d276:	d107      	bne.n	800d288 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	681a      	ldr	r2, [r3, #0]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f022 0210 	bic.w	r2, r2, #16
 800d286:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2220      	movs	r2, #32
 800d28c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2200      	movs	r2, #0
 800d29a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d29c:	bf00      	nop
 800d29e:	370c      	adds	r7, #12
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr

0800d2a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b084      	sub	sp, #16
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d2c6:	68f8      	ldr	r0, [r7, #12]
 800d2c8:	f7ff fadc 	bl	800c884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d2cc:	bf00      	nop
 800d2ce:	3710      	adds	r7, #16
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d2ea:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2220      	movs	r2, #32
 800d2f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f7ff fab8 	bl	800c870 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d300:	bf00      	nop
 800d302:	3708      	adds	r7, #8
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d316:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d31e:	2b22      	cmp	r3, #34	; 0x22
 800d320:	d152      	bne.n	800d3c8 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d328:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d32a:	89bb      	ldrh	r3, [r7, #12]
 800d32c:	b2d9      	uxtb	r1, r3
 800d32e:	89fb      	ldrh	r3, [r7, #14]
 800d330:	b2da      	uxtb	r2, r3
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d336:	400a      	ands	r2, r1
 800d338:	b2d2      	uxtb	r2, r2
 800d33a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d340:	1c5a      	adds	r2, r3, #1
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	3b01      	subs	r3, #1
 800d350:	b29a      	uxth	r2, r3
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d35e:	b29b      	uxth	r3, r3
 800d360:	2b00      	cmp	r3, #0
 800d362:	d139      	bne.n	800d3d8 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d372:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	689a      	ldr	r2, [r3, #8]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f022 0201 	bic.w	r2, r2, #1
 800d382:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2220      	movs	r2, #32
 800d388:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2200      	movs	r2, #0
 800d390:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d396:	2b01      	cmp	r3, #1
 800d398:	d10f      	bne.n	800d3ba <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	681a      	ldr	r2, [r3, #0]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f022 0210 	bic.w	r2, r2, #16
 800d3a8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f7ff fa70 	bl	800c898 <HAL_UARTEx_RxEventCallback>
 800d3b8:	e002      	b.n	800d3c0 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f7f8 fb72 	bl	8005aa4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d3c6:	e007      	b.n	800d3d8 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	699a      	ldr	r2, [r3, #24]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f042 0208 	orr.w	r2, r2, #8
 800d3d6:	619a      	str	r2, [r3, #24]
}
 800d3d8:	bf00      	nop
 800d3da:	3710      	adds	r7, #16
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b084      	sub	sp, #16
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d3ee:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3f6:	2b22      	cmp	r3, #34	; 0x22
 800d3f8:	d152      	bne.n	800d4a0 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d400:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d406:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800d408:	89ba      	ldrh	r2, [r7, #12]
 800d40a:	89fb      	ldrh	r3, [r7, #14]
 800d40c:	4013      	ands	r3, r2
 800d40e:	b29a      	uxth	r2, r3
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d418:	1c9a      	adds	r2, r3, #2
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d424:	b29b      	uxth	r3, r3
 800d426:	3b01      	subs	r3, #1
 800d428:	b29a      	uxth	r2, r3
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d436:	b29b      	uxth	r3, r3
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d139      	bne.n	800d4b0 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d44a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	689a      	ldr	r2, [r3, #8]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f022 0201 	bic.w	r2, r2, #1
 800d45a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2220      	movs	r2, #32
 800d460:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d46e:	2b01      	cmp	r3, #1
 800d470:	d10f      	bne.n	800d492 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	681a      	ldr	r2, [r3, #0]
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f022 0210 	bic.w	r2, r2, #16
 800d480:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d488:	4619      	mov	r1, r3
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f7ff fa04 	bl	800c898 <HAL_UARTEx_RxEventCallback>
 800d490:	e002      	b.n	800d498 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f7f8 fb06 	bl	8005aa4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2200      	movs	r2, #0
 800d49c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d49e:	e007      	b.n	800d4b0 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	699a      	ldr	r2, [r3, #24]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f042 0208 	orr.w	r2, r2, #8
 800d4ae:	619a      	str	r2, [r3, #24]
}
 800d4b0:	bf00      	nop
 800d4b2:	3710      	adds	r7, #16
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b088      	sub	sp, #32
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d4c6:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	69db      	ldr	r3, [r3, #28]
 800d4ce:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	689b      	ldr	r3, [r3, #8]
 800d4de:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4e6:	2b22      	cmp	r3, #34	; 0x22
 800d4e8:	f040 80da 	bne.w	800d6a0 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d4f2:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d4f4:	e0aa      	b.n	800d64c <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4fc:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d4fe:	89bb      	ldrh	r3, [r7, #12]
 800d500:	b2d9      	uxtb	r1, r3
 800d502:	8b7b      	ldrh	r3, [r7, #26]
 800d504:	b2da      	uxtb	r2, r3
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d50a:	400a      	ands	r2, r1
 800d50c:	b2d2      	uxtb	r2, r2
 800d50e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d514:	1c5a      	adds	r2, r3, #1
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d520:	b29b      	uxth	r3, r3
 800d522:	3b01      	subs	r3, #1
 800d524:	b29a      	uxth	r2, r3
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	69db      	ldr	r3, [r3, #28]
 800d532:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	f003 0307 	and.w	r3, r3, #7
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d04d      	beq.n	800d5da <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d53e:	69fb      	ldr	r3, [r7, #28]
 800d540:	f003 0301 	and.w	r3, r3, #1
 800d544:	2b00      	cmp	r3, #0
 800d546:	d010      	beq.n	800d56a <UART_RxISR_8BIT_FIFOEN+0xb2>
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d00b      	beq.n	800d56a <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	2201      	movs	r2, #1
 800d558:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d560:	f043 0201 	orr.w	r2, r3, #1
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d56a:	69fb      	ldr	r3, [r7, #28]
 800d56c:	f003 0302 	and.w	r3, r3, #2
 800d570:	2b00      	cmp	r3, #0
 800d572:	d010      	beq.n	800d596 <UART_RxISR_8BIT_FIFOEN+0xde>
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	f003 0301 	and.w	r3, r3, #1
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d00b      	beq.n	800d596 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	2202      	movs	r2, #2
 800d584:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d58c:	f043 0204 	orr.w	r2, r3, #4
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d596:	69fb      	ldr	r3, [r7, #28]
 800d598:	f003 0304 	and.w	r3, r3, #4
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d010      	beq.n	800d5c2 <UART_RxISR_8BIT_FIFOEN+0x10a>
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	f003 0301 	and.w	r3, r3, #1
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d00b      	beq.n	800d5c2 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	2204      	movs	r2, #4
 800d5b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5b8:	f043 0202 	orr.w	r2, r3, #2
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d006      	beq.n	800d5da <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f7ff f959 	bl	800c884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d5e0:	b29b      	uxth	r3, r3
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d132      	bne.n	800d64c <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	681a      	ldr	r2, [r3, #0]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d5f4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	689b      	ldr	r3, [r3, #8]
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	6812      	ldr	r2, [r2, #0]
 800d600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d604:	f023 0301 	bic.w	r3, r3, #1
 800d608:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2220      	movs	r2, #32
 800d60e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2200      	movs	r2, #0
 800d616:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d10f      	bne.n	800d640 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	681a      	ldr	r2, [r3, #0]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f022 0210 	bic.w	r2, r2, #16
 800d62e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d636:	4619      	mov	r1, r3
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f7ff f92d 	bl	800c898 <HAL_UARTEx_RxEventCallback>
 800d63e:	e002      	b.n	800d646 <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f7f8 fa2f 	bl	8005aa4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2200      	movs	r2, #0
 800d64a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d64c:	89fb      	ldrh	r3, [r7, #14]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d005      	beq.n	800d65e <UART_RxISR_8BIT_FIFOEN+0x1a6>
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	f003 0320 	and.w	r3, r3, #32
 800d658:	2b00      	cmp	r3, #0
 800d65a:	f47f af4c 	bne.w	800d4f6 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d664:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d666:	897b      	ldrh	r3, [r7, #10]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d021      	beq.n	800d6b0 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d672:	897a      	ldrh	r2, [r7, #10]
 800d674:	429a      	cmp	r2, r3
 800d676:	d21b      	bcs.n	800d6b0 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	689a      	ldr	r2, [r3, #8]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d686:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	4a0b      	ldr	r2, [pc, #44]	; (800d6b8 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800d68c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	681a      	ldr	r2, [r3, #0]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f042 0220 	orr.w	r2, r2, #32
 800d69c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d69e:	e007      	b.n	800d6b0 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	699a      	ldr	r2, [r3, #24]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f042 0208 	orr.w	r2, r2, #8
 800d6ae:	619a      	str	r2, [r3, #24]
}
 800d6b0:	bf00      	nop
 800d6b2:	3720      	adds	r7, #32
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	0800d309 	.word	0x0800d309

0800d6bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b08a      	sub	sp, #40	; 0x28
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d6ca:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	69db      	ldr	r3, [r3, #28]
 800d6d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	689b      	ldr	r3, [r3, #8]
 800d6e2:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6ea:	2b22      	cmp	r3, #34	; 0x22
 800d6ec:	f040 80da 	bne.w	800d8a4 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d6f6:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d6f8:	e0aa      	b.n	800d850 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d700:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d706:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800d708:	8aba      	ldrh	r2, [r7, #20]
 800d70a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d70c:	4013      	ands	r3, r2
 800d70e:	b29a      	uxth	r2, r3
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d718:	1c9a      	adds	r2, r3, #2
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d724:	b29b      	uxth	r3, r3
 800d726:	3b01      	subs	r3, #1
 800d728:	b29a      	uxth	r2, r3
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	69db      	ldr	r3, [r3, #28]
 800d736:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73a:	f003 0307 	and.w	r3, r3, #7
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d04d      	beq.n	800d7de <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d744:	f003 0301 	and.w	r3, r3, #1
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d010      	beq.n	800d76e <UART_RxISR_16BIT_FIFOEN+0xb2>
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d752:	2b00      	cmp	r3, #0
 800d754:	d00b      	beq.n	800d76e <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	2201      	movs	r2, #1
 800d75c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d764:	f043 0201 	orr.w	r2, r3, #1
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d770:	f003 0302 	and.w	r3, r3, #2
 800d774:	2b00      	cmp	r3, #0
 800d776:	d010      	beq.n	800d79a <UART_RxISR_16BIT_FIFOEN+0xde>
 800d778:	69bb      	ldr	r3, [r7, #24]
 800d77a:	f003 0301 	and.w	r3, r3, #1
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d00b      	beq.n	800d79a <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	2202      	movs	r2, #2
 800d788:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d790:	f043 0204 	orr.w	r2, r3, #4
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79c:	f003 0304 	and.w	r3, r3, #4
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d010      	beq.n	800d7c6 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800d7a4:	69bb      	ldr	r3, [r7, #24]
 800d7a6:	f003 0301 	and.w	r3, r3, #1
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d00b      	beq.n	800d7c6 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	2204      	movs	r2, #4
 800d7b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7bc:	f043 0202 	orr.w	r2, r3, #2
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d006      	beq.n	800d7de <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f7ff f857 	bl	800c884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d7e4:	b29b      	uxth	r3, r3
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d132      	bne.n	800d850 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d7f8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	689b      	ldr	r3, [r3, #8]
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	6812      	ldr	r2, [r2, #0]
 800d804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d808:	f023 0301 	bic.w	r3, r3, #1
 800d80c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2220      	movs	r2, #32
 800d812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2200      	movs	r2, #0
 800d81a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d820:	2b01      	cmp	r3, #1
 800d822:	d10f      	bne.n	800d844 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f022 0210 	bic.w	r2, r2, #16
 800d832:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d83a:	4619      	mov	r1, r3
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f7ff f82b 	bl	800c898 <HAL_UARTEx_RxEventCallback>
 800d842:	e002      	b.n	800d84a <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f7f8 f92d 	bl	8005aa4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2200      	movs	r2, #0
 800d84e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d850:	8afb      	ldrh	r3, [r7, #22]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d005      	beq.n	800d862 <UART_RxISR_16BIT_FIFOEN+0x1a6>
 800d856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d858:	f003 0320 	and.w	r3, r3, #32
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f47f af4c 	bne.w	800d6fa <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d868:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d86a:	89fb      	ldrh	r3, [r7, #14]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d021      	beq.n	800d8b4 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d876:	89fa      	ldrh	r2, [r7, #14]
 800d878:	429a      	cmp	r2, r3
 800d87a:	d21b      	bcs.n	800d8b4 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	689a      	ldr	r2, [r3, #8]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d88a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	4a0b      	ldr	r2, [pc, #44]	; (800d8bc <UART_RxISR_16BIT_FIFOEN+0x200>)
 800d890:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	681a      	ldr	r2, [r3, #0]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f042 0220 	orr.w	r2, r2, #32
 800d8a0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d8a2:	e007      	b.n	800d8b4 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	699a      	ldr	r2, [r3, #24]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f042 0208 	orr.w	r2, r2, #8
 800d8b2:	619a      	str	r2, [r3, #24]
}
 800d8b4:	bf00      	nop
 800d8b6:	3728      	adds	r7, #40	; 0x28
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	0800d3e1 	.word	0x0800d3e1

0800d8c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b083      	sub	sp, #12
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d8c8:	bf00      	nop
 800d8ca:	370c      	adds	r7, #12
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d2:	4770      	bx	lr

0800d8d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d8dc:	bf00      	nop
 800d8de:	370c      	adds	r7, #12
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr

0800d8e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b083      	sub	sp, #12
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d8f0:	bf00      	nop
 800d8f2:	370c      	adds	r7, #12
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr

0800d8fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b085      	sub	sp, #20
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	d101      	bne.n	800d912 <HAL_UARTEx_DisableFifoMode+0x16>
 800d90e:	2302      	movs	r3, #2
 800d910:	e027      	b.n	800d962 <HAL_UARTEx_DisableFifoMode+0x66>
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2201      	movs	r2, #1
 800d916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2224      	movs	r2, #36	; 0x24
 800d91e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	681a      	ldr	r2, [r3, #0]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f022 0201 	bic.w	r2, r2, #1
 800d938:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d940:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2200      	movs	r2, #0
 800d946:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	68fa      	ldr	r2, [r7, #12]
 800d94e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2220      	movs	r2, #32
 800d954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2200      	movs	r2, #0
 800d95c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d960:	2300      	movs	r3, #0
}
 800d962:	4618      	mov	r0, r3
 800d964:	3714      	adds	r7, #20
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr

0800d96e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d96e:	b580      	push	{r7, lr}
 800d970:	b084      	sub	sp, #16
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]
 800d976:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d97e:	2b01      	cmp	r3, #1
 800d980:	d101      	bne.n	800d986 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d982:	2302      	movs	r3, #2
 800d984:	e02d      	b.n	800d9e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2201      	movs	r2, #1
 800d98a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2224      	movs	r2, #36	; 0x24
 800d992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	681a      	ldr	r2, [r3, #0]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f022 0201 	bic.w	r2, r2, #1
 800d9ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	689b      	ldr	r3, [r3, #8]
 800d9b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	683a      	ldr	r2, [r7, #0]
 800d9be:	430a      	orrs	r2, r1
 800d9c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f000 f850 	bl	800da68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	68fa      	ldr	r2, [r7, #12]
 800d9ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2220      	movs	r2, #32
 800d9d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d9e0:	2300      	movs	r3, #0
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3710      	adds	r7, #16
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}

0800d9ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d9ea:	b580      	push	{r7, lr}
 800d9ec:	b084      	sub	sp, #16
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	6078      	str	r0, [r7, #4]
 800d9f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	d101      	bne.n	800da02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d9fe:	2302      	movs	r3, #2
 800da00:	e02d      	b.n	800da5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2201      	movs	r2, #1
 800da06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2224      	movs	r2, #36	; 0x24
 800da0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	681a      	ldr	r2, [r3, #0]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f022 0201 	bic.w	r2, r2, #1
 800da28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	689b      	ldr	r3, [r3, #8]
 800da30:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	683a      	ldr	r2, [r7, #0]
 800da3a:	430a      	orrs	r2, r1
 800da3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f000 f812 	bl	800da68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	68fa      	ldr	r2, [r7, #12]
 800da4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2220      	movs	r2, #32
 800da50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2200      	movs	r2, #0
 800da58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800da5c:	2300      	movs	r3, #0
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3710      	adds	r7, #16
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
	...

0800da68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800da68:	b480      	push	{r7}
 800da6a:	b085      	sub	sp, #20
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da74:	2b00      	cmp	r3, #0
 800da76:	d108      	bne.n	800da8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2201      	movs	r2, #1
 800da7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2201      	movs	r2, #1
 800da84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800da88:	e031      	b.n	800daee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800da8a:	2308      	movs	r3, #8
 800da8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800da8e:	2308      	movs	r3, #8
 800da90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	689b      	ldr	r3, [r3, #8]
 800da98:	0e5b      	lsrs	r3, r3, #25
 800da9a:	b2db      	uxtb	r3, r3
 800da9c:	f003 0307 	and.w	r3, r3, #7
 800daa0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	689b      	ldr	r3, [r3, #8]
 800daa8:	0f5b      	lsrs	r3, r3, #29
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	f003 0307 	and.w	r3, r3, #7
 800dab0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dab2:	7bbb      	ldrb	r3, [r7, #14]
 800dab4:	7b3a      	ldrb	r2, [r7, #12]
 800dab6:	4911      	ldr	r1, [pc, #68]	; (800dafc <UARTEx_SetNbDataToProcess+0x94>)
 800dab8:	5c8a      	ldrb	r2, [r1, r2]
 800daba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dabe:	7b3a      	ldrb	r2, [r7, #12]
 800dac0:	490f      	ldr	r1, [pc, #60]	; (800db00 <UARTEx_SetNbDataToProcess+0x98>)
 800dac2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dac4:	fb93 f3f2 	sdiv	r3, r3, r2
 800dac8:	b29a      	uxth	r2, r3
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dad0:	7bfb      	ldrb	r3, [r7, #15]
 800dad2:	7b7a      	ldrb	r2, [r7, #13]
 800dad4:	4909      	ldr	r1, [pc, #36]	; (800dafc <UARTEx_SetNbDataToProcess+0x94>)
 800dad6:	5c8a      	ldrb	r2, [r1, r2]
 800dad8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dadc:	7b7a      	ldrb	r2, [r7, #13]
 800dade:	4908      	ldr	r1, [pc, #32]	; (800db00 <UARTEx_SetNbDataToProcess+0x98>)
 800dae0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dae2:	fb93 f3f2 	sdiv	r3, r3, r2
 800dae6:	b29a      	uxth	r2, r3
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800daee:	bf00      	nop
 800daf0:	3714      	adds	r7, #20
 800daf2:	46bd      	mov	sp, r7
 800daf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf8:	4770      	bx	lr
 800dafa:	bf00      	nop
 800dafc:	080133ec 	.word	0x080133ec
 800db00:	080133f4 	.word	0x080133f4

0800db04 <atof>:
 800db04:	2100      	movs	r1, #0
 800db06:	f001 bb7d 	b.w	800f204 <strtod>

0800db0a <atoi>:
 800db0a:	220a      	movs	r2, #10
 800db0c:	2100      	movs	r1, #0
 800db0e:	f001 bc09 	b.w	800f324 <strtol>
	...

0800db14 <__errno>:
 800db14:	4b01      	ldr	r3, [pc, #4]	; (800db1c <__errno+0x8>)
 800db16:	6818      	ldr	r0, [r3, #0]
 800db18:	4770      	bx	lr
 800db1a:	bf00      	nop
 800db1c:	2000002c 	.word	0x2000002c

0800db20 <__libc_init_array>:
 800db20:	b570      	push	{r4, r5, r6, lr}
 800db22:	4d0d      	ldr	r5, [pc, #52]	; (800db58 <__libc_init_array+0x38>)
 800db24:	4c0d      	ldr	r4, [pc, #52]	; (800db5c <__libc_init_array+0x3c>)
 800db26:	1b64      	subs	r4, r4, r5
 800db28:	10a4      	asrs	r4, r4, #2
 800db2a:	2600      	movs	r6, #0
 800db2c:	42a6      	cmp	r6, r4
 800db2e:	d109      	bne.n	800db44 <__libc_init_array+0x24>
 800db30:	4d0b      	ldr	r5, [pc, #44]	; (800db60 <__libc_init_array+0x40>)
 800db32:	4c0c      	ldr	r4, [pc, #48]	; (800db64 <__libc_init_array+0x44>)
 800db34:	f004 fc62 	bl	80123fc <_init>
 800db38:	1b64      	subs	r4, r4, r5
 800db3a:	10a4      	asrs	r4, r4, #2
 800db3c:	2600      	movs	r6, #0
 800db3e:	42a6      	cmp	r6, r4
 800db40:	d105      	bne.n	800db4e <__libc_init_array+0x2e>
 800db42:	bd70      	pop	{r4, r5, r6, pc}
 800db44:	f855 3b04 	ldr.w	r3, [r5], #4
 800db48:	4798      	blx	r3
 800db4a:	3601      	adds	r6, #1
 800db4c:	e7ee      	b.n	800db2c <__libc_init_array+0xc>
 800db4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800db52:	4798      	blx	r3
 800db54:	3601      	adds	r6, #1
 800db56:	e7f2      	b.n	800db3e <__libc_init_array+0x1e>
 800db58:	080138f0 	.word	0x080138f0
 800db5c:	080138f0 	.word	0x080138f0
 800db60:	080138f0 	.word	0x080138f0
 800db64:	080138f4 	.word	0x080138f4

0800db68 <memcpy>:
 800db68:	440a      	add	r2, r1
 800db6a:	4291      	cmp	r1, r2
 800db6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800db70:	d100      	bne.n	800db74 <memcpy+0xc>
 800db72:	4770      	bx	lr
 800db74:	b510      	push	{r4, lr}
 800db76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db7e:	4291      	cmp	r1, r2
 800db80:	d1f9      	bne.n	800db76 <memcpy+0xe>
 800db82:	bd10      	pop	{r4, pc}

0800db84 <memmove>:
 800db84:	4288      	cmp	r0, r1
 800db86:	b510      	push	{r4, lr}
 800db88:	eb01 0402 	add.w	r4, r1, r2
 800db8c:	d902      	bls.n	800db94 <memmove+0x10>
 800db8e:	4284      	cmp	r4, r0
 800db90:	4623      	mov	r3, r4
 800db92:	d807      	bhi.n	800dba4 <memmove+0x20>
 800db94:	1e43      	subs	r3, r0, #1
 800db96:	42a1      	cmp	r1, r4
 800db98:	d008      	beq.n	800dbac <memmove+0x28>
 800db9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dba2:	e7f8      	b.n	800db96 <memmove+0x12>
 800dba4:	4402      	add	r2, r0
 800dba6:	4601      	mov	r1, r0
 800dba8:	428a      	cmp	r2, r1
 800dbaa:	d100      	bne.n	800dbae <memmove+0x2a>
 800dbac:	bd10      	pop	{r4, pc}
 800dbae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dbb6:	e7f7      	b.n	800dba8 <memmove+0x24>

0800dbb8 <memset>:
 800dbb8:	4402      	add	r2, r0
 800dbba:	4603      	mov	r3, r0
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d100      	bne.n	800dbc2 <memset+0xa>
 800dbc0:	4770      	bx	lr
 800dbc2:	f803 1b01 	strb.w	r1, [r3], #1
 800dbc6:	e7f9      	b.n	800dbbc <memset+0x4>

0800dbc8 <__cvt>:
 800dbc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dbcc:	ec55 4b10 	vmov	r4, r5, d0
 800dbd0:	2d00      	cmp	r5, #0
 800dbd2:	460e      	mov	r6, r1
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	462b      	mov	r3, r5
 800dbd8:	bfbb      	ittet	lt
 800dbda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800dbde:	461d      	movlt	r5, r3
 800dbe0:	2300      	movge	r3, #0
 800dbe2:	232d      	movlt	r3, #45	; 0x2d
 800dbe4:	700b      	strb	r3, [r1, #0]
 800dbe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbe8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dbec:	4691      	mov	r9, r2
 800dbee:	f023 0820 	bic.w	r8, r3, #32
 800dbf2:	bfbc      	itt	lt
 800dbf4:	4622      	movlt	r2, r4
 800dbf6:	4614      	movlt	r4, r2
 800dbf8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dbfc:	d005      	beq.n	800dc0a <__cvt+0x42>
 800dbfe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dc02:	d100      	bne.n	800dc06 <__cvt+0x3e>
 800dc04:	3601      	adds	r6, #1
 800dc06:	2102      	movs	r1, #2
 800dc08:	e000      	b.n	800dc0c <__cvt+0x44>
 800dc0a:	2103      	movs	r1, #3
 800dc0c:	ab03      	add	r3, sp, #12
 800dc0e:	9301      	str	r3, [sp, #4]
 800dc10:	ab02      	add	r3, sp, #8
 800dc12:	9300      	str	r3, [sp, #0]
 800dc14:	ec45 4b10 	vmov	d0, r4, r5
 800dc18:	4653      	mov	r3, sl
 800dc1a:	4632      	mov	r2, r6
 800dc1c:	f001 fcd8 	bl	800f5d0 <_dtoa_r>
 800dc20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800dc24:	4607      	mov	r7, r0
 800dc26:	d102      	bne.n	800dc2e <__cvt+0x66>
 800dc28:	f019 0f01 	tst.w	r9, #1
 800dc2c:	d022      	beq.n	800dc74 <__cvt+0xac>
 800dc2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dc32:	eb07 0906 	add.w	r9, r7, r6
 800dc36:	d110      	bne.n	800dc5a <__cvt+0x92>
 800dc38:	783b      	ldrb	r3, [r7, #0]
 800dc3a:	2b30      	cmp	r3, #48	; 0x30
 800dc3c:	d10a      	bne.n	800dc54 <__cvt+0x8c>
 800dc3e:	2200      	movs	r2, #0
 800dc40:	2300      	movs	r3, #0
 800dc42:	4620      	mov	r0, r4
 800dc44:	4629      	mov	r1, r5
 800dc46:	f7f2 ff67 	bl	8000b18 <__aeabi_dcmpeq>
 800dc4a:	b918      	cbnz	r0, 800dc54 <__cvt+0x8c>
 800dc4c:	f1c6 0601 	rsb	r6, r6, #1
 800dc50:	f8ca 6000 	str.w	r6, [sl]
 800dc54:	f8da 3000 	ldr.w	r3, [sl]
 800dc58:	4499      	add	r9, r3
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	4620      	mov	r0, r4
 800dc60:	4629      	mov	r1, r5
 800dc62:	f7f2 ff59 	bl	8000b18 <__aeabi_dcmpeq>
 800dc66:	b108      	cbz	r0, 800dc6c <__cvt+0xa4>
 800dc68:	f8cd 900c 	str.w	r9, [sp, #12]
 800dc6c:	2230      	movs	r2, #48	; 0x30
 800dc6e:	9b03      	ldr	r3, [sp, #12]
 800dc70:	454b      	cmp	r3, r9
 800dc72:	d307      	bcc.n	800dc84 <__cvt+0xbc>
 800dc74:	9b03      	ldr	r3, [sp, #12]
 800dc76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc78:	1bdb      	subs	r3, r3, r7
 800dc7a:	4638      	mov	r0, r7
 800dc7c:	6013      	str	r3, [r2, #0]
 800dc7e:	b004      	add	sp, #16
 800dc80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc84:	1c59      	adds	r1, r3, #1
 800dc86:	9103      	str	r1, [sp, #12]
 800dc88:	701a      	strb	r2, [r3, #0]
 800dc8a:	e7f0      	b.n	800dc6e <__cvt+0xa6>

0800dc8c <__exponent>:
 800dc8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc8e:	4603      	mov	r3, r0
 800dc90:	2900      	cmp	r1, #0
 800dc92:	bfb8      	it	lt
 800dc94:	4249      	neglt	r1, r1
 800dc96:	f803 2b02 	strb.w	r2, [r3], #2
 800dc9a:	bfb4      	ite	lt
 800dc9c:	222d      	movlt	r2, #45	; 0x2d
 800dc9e:	222b      	movge	r2, #43	; 0x2b
 800dca0:	2909      	cmp	r1, #9
 800dca2:	7042      	strb	r2, [r0, #1]
 800dca4:	dd2a      	ble.n	800dcfc <__exponent+0x70>
 800dca6:	f10d 0407 	add.w	r4, sp, #7
 800dcaa:	46a4      	mov	ip, r4
 800dcac:	270a      	movs	r7, #10
 800dcae:	46a6      	mov	lr, r4
 800dcb0:	460a      	mov	r2, r1
 800dcb2:	fb91 f6f7 	sdiv	r6, r1, r7
 800dcb6:	fb07 1516 	mls	r5, r7, r6, r1
 800dcba:	3530      	adds	r5, #48	; 0x30
 800dcbc:	2a63      	cmp	r2, #99	; 0x63
 800dcbe:	f104 34ff 	add.w	r4, r4, #4294967295
 800dcc2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800dcc6:	4631      	mov	r1, r6
 800dcc8:	dcf1      	bgt.n	800dcae <__exponent+0x22>
 800dcca:	3130      	adds	r1, #48	; 0x30
 800dccc:	f1ae 0502 	sub.w	r5, lr, #2
 800dcd0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800dcd4:	1c44      	adds	r4, r0, #1
 800dcd6:	4629      	mov	r1, r5
 800dcd8:	4561      	cmp	r1, ip
 800dcda:	d30a      	bcc.n	800dcf2 <__exponent+0x66>
 800dcdc:	f10d 0209 	add.w	r2, sp, #9
 800dce0:	eba2 020e 	sub.w	r2, r2, lr
 800dce4:	4565      	cmp	r5, ip
 800dce6:	bf88      	it	hi
 800dce8:	2200      	movhi	r2, #0
 800dcea:	4413      	add	r3, r2
 800dcec:	1a18      	subs	r0, r3, r0
 800dcee:	b003      	add	sp, #12
 800dcf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dcf6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800dcfa:	e7ed      	b.n	800dcd8 <__exponent+0x4c>
 800dcfc:	2330      	movs	r3, #48	; 0x30
 800dcfe:	3130      	adds	r1, #48	; 0x30
 800dd00:	7083      	strb	r3, [r0, #2]
 800dd02:	70c1      	strb	r1, [r0, #3]
 800dd04:	1d03      	adds	r3, r0, #4
 800dd06:	e7f1      	b.n	800dcec <__exponent+0x60>

0800dd08 <_printf_float>:
 800dd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd0c:	ed2d 8b02 	vpush	{d8}
 800dd10:	b08d      	sub	sp, #52	; 0x34
 800dd12:	460c      	mov	r4, r1
 800dd14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dd18:	4616      	mov	r6, r2
 800dd1a:	461f      	mov	r7, r3
 800dd1c:	4605      	mov	r5, r0
 800dd1e:	f002 ff69 	bl	8010bf4 <_localeconv_r>
 800dd22:	f8d0 a000 	ldr.w	sl, [r0]
 800dd26:	4650      	mov	r0, sl
 800dd28:	f7f2 fa7a 	bl	8000220 <strlen>
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	930a      	str	r3, [sp, #40]	; 0x28
 800dd30:	6823      	ldr	r3, [r4, #0]
 800dd32:	9305      	str	r3, [sp, #20]
 800dd34:	f8d8 3000 	ldr.w	r3, [r8]
 800dd38:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dd3c:	3307      	adds	r3, #7
 800dd3e:	f023 0307 	bic.w	r3, r3, #7
 800dd42:	f103 0208 	add.w	r2, r3, #8
 800dd46:	f8c8 2000 	str.w	r2, [r8]
 800dd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dd52:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800dd56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dd5a:	9307      	str	r3, [sp, #28]
 800dd5c:	f8cd 8018 	str.w	r8, [sp, #24]
 800dd60:	ee08 0a10 	vmov	s16, r0
 800dd64:	4b9f      	ldr	r3, [pc, #636]	; (800dfe4 <_printf_float+0x2dc>)
 800dd66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dd6a:	f04f 32ff 	mov.w	r2, #4294967295
 800dd6e:	f7f2 ff05 	bl	8000b7c <__aeabi_dcmpun>
 800dd72:	bb88      	cbnz	r0, 800ddd8 <_printf_float+0xd0>
 800dd74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dd78:	4b9a      	ldr	r3, [pc, #616]	; (800dfe4 <_printf_float+0x2dc>)
 800dd7a:	f04f 32ff 	mov.w	r2, #4294967295
 800dd7e:	f7f2 fedf 	bl	8000b40 <__aeabi_dcmple>
 800dd82:	bb48      	cbnz	r0, 800ddd8 <_printf_float+0xd0>
 800dd84:	2200      	movs	r2, #0
 800dd86:	2300      	movs	r3, #0
 800dd88:	4640      	mov	r0, r8
 800dd8a:	4649      	mov	r1, r9
 800dd8c:	f7f2 fece 	bl	8000b2c <__aeabi_dcmplt>
 800dd90:	b110      	cbz	r0, 800dd98 <_printf_float+0x90>
 800dd92:	232d      	movs	r3, #45	; 0x2d
 800dd94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd98:	4b93      	ldr	r3, [pc, #588]	; (800dfe8 <_printf_float+0x2e0>)
 800dd9a:	4894      	ldr	r0, [pc, #592]	; (800dfec <_printf_float+0x2e4>)
 800dd9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dda0:	bf94      	ite	ls
 800dda2:	4698      	movls	r8, r3
 800dda4:	4680      	movhi	r8, r0
 800dda6:	2303      	movs	r3, #3
 800dda8:	6123      	str	r3, [r4, #16]
 800ddaa:	9b05      	ldr	r3, [sp, #20]
 800ddac:	f023 0204 	bic.w	r2, r3, #4
 800ddb0:	6022      	str	r2, [r4, #0]
 800ddb2:	f04f 0900 	mov.w	r9, #0
 800ddb6:	9700      	str	r7, [sp, #0]
 800ddb8:	4633      	mov	r3, r6
 800ddba:	aa0b      	add	r2, sp, #44	; 0x2c
 800ddbc:	4621      	mov	r1, r4
 800ddbe:	4628      	mov	r0, r5
 800ddc0:	f000 f9d8 	bl	800e174 <_printf_common>
 800ddc4:	3001      	adds	r0, #1
 800ddc6:	f040 8090 	bne.w	800deea <_printf_float+0x1e2>
 800ddca:	f04f 30ff 	mov.w	r0, #4294967295
 800ddce:	b00d      	add	sp, #52	; 0x34
 800ddd0:	ecbd 8b02 	vpop	{d8}
 800ddd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd8:	4642      	mov	r2, r8
 800ddda:	464b      	mov	r3, r9
 800dddc:	4640      	mov	r0, r8
 800ddde:	4649      	mov	r1, r9
 800dde0:	f7f2 fecc 	bl	8000b7c <__aeabi_dcmpun>
 800dde4:	b140      	cbz	r0, 800ddf8 <_printf_float+0xf0>
 800dde6:	464b      	mov	r3, r9
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	bfbc      	itt	lt
 800ddec:	232d      	movlt	r3, #45	; 0x2d
 800ddee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ddf2:	487f      	ldr	r0, [pc, #508]	; (800dff0 <_printf_float+0x2e8>)
 800ddf4:	4b7f      	ldr	r3, [pc, #508]	; (800dff4 <_printf_float+0x2ec>)
 800ddf6:	e7d1      	b.n	800dd9c <_printf_float+0x94>
 800ddf8:	6863      	ldr	r3, [r4, #4]
 800ddfa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ddfe:	9206      	str	r2, [sp, #24]
 800de00:	1c5a      	adds	r2, r3, #1
 800de02:	d13f      	bne.n	800de84 <_printf_float+0x17c>
 800de04:	2306      	movs	r3, #6
 800de06:	6063      	str	r3, [r4, #4]
 800de08:	9b05      	ldr	r3, [sp, #20]
 800de0a:	6861      	ldr	r1, [r4, #4]
 800de0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800de10:	2300      	movs	r3, #0
 800de12:	9303      	str	r3, [sp, #12]
 800de14:	ab0a      	add	r3, sp, #40	; 0x28
 800de16:	e9cd b301 	strd	fp, r3, [sp, #4]
 800de1a:	ab09      	add	r3, sp, #36	; 0x24
 800de1c:	ec49 8b10 	vmov	d0, r8, r9
 800de20:	9300      	str	r3, [sp, #0]
 800de22:	6022      	str	r2, [r4, #0]
 800de24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800de28:	4628      	mov	r0, r5
 800de2a:	f7ff fecd 	bl	800dbc8 <__cvt>
 800de2e:	9b06      	ldr	r3, [sp, #24]
 800de30:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de32:	2b47      	cmp	r3, #71	; 0x47
 800de34:	4680      	mov	r8, r0
 800de36:	d108      	bne.n	800de4a <_printf_float+0x142>
 800de38:	1cc8      	adds	r0, r1, #3
 800de3a:	db02      	blt.n	800de42 <_printf_float+0x13a>
 800de3c:	6863      	ldr	r3, [r4, #4]
 800de3e:	4299      	cmp	r1, r3
 800de40:	dd41      	ble.n	800dec6 <_printf_float+0x1be>
 800de42:	f1ab 0b02 	sub.w	fp, fp, #2
 800de46:	fa5f fb8b 	uxtb.w	fp, fp
 800de4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800de4e:	d820      	bhi.n	800de92 <_printf_float+0x18a>
 800de50:	3901      	subs	r1, #1
 800de52:	465a      	mov	r2, fp
 800de54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800de58:	9109      	str	r1, [sp, #36]	; 0x24
 800de5a:	f7ff ff17 	bl	800dc8c <__exponent>
 800de5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de60:	1813      	adds	r3, r2, r0
 800de62:	2a01      	cmp	r2, #1
 800de64:	4681      	mov	r9, r0
 800de66:	6123      	str	r3, [r4, #16]
 800de68:	dc02      	bgt.n	800de70 <_printf_float+0x168>
 800de6a:	6822      	ldr	r2, [r4, #0]
 800de6c:	07d2      	lsls	r2, r2, #31
 800de6e:	d501      	bpl.n	800de74 <_printf_float+0x16c>
 800de70:	3301      	adds	r3, #1
 800de72:	6123      	str	r3, [r4, #16]
 800de74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d09c      	beq.n	800ddb6 <_printf_float+0xae>
 800de7c:	232d      	movs	r3, #45	; 0x2d
 800de7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de82:	e798      	b.n	800ddb6 <_printf_float+0xae>
 800de84:	9a06      	ldr	r2, [sp, #24]
 800de86:	2a47      	cmp	r2, #71	; 0x47
 800de88:	d1be      	bne.n	800de08 <_printf_float+0x100>
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d1bc      	bne.n	800de08 <_printf_float+0x100>
 800de8e:	2301      	movs	r3, #1
 800de90:	e7b9      	b.n	800de06 <_printf_float+0xfe>
 800de92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800de96:	d118      	bne.n	800deca <_printf_float+0x1c2>
 800de98:	2900      	cmp	r1, #0
 800de9a:	6863      	ldr	r3, [r4, #4]
 800de9c:	dd0b      	ble.n	800deb6 <_printf_float+0x1ae>
 800de9e:	6121      	str	r1, [r4, #16]
 800dea0:	b913      	cbnz	r3, 800dea8 <_printf_float+0x1a0>
 800dea2:	6822      	ldr	r2, [r4, #0]
 800dea4:	07d0      	lsls	r0, r2, #31
 800dea6:	d502      	bpl.n	800deae <_printf_float+0x1a6>
 800dea8:	3301      	adds	r3, #1
 800deaa:	440b      	add	r3, r1
 800deac:	6123      	str	r3, [r4, #16]
 800deae:	65a1      	str	r1, [r4, #88]	; 0x58
 800deb0:	f04f 0900 	mov.w	r9, #0
 800deb4:	e7de      	b.n	800de74 <_printf_float+0x16c>
 800deb6:	b913      	cbnz	r3, 800debe <_printf_float+0x1b6>
 800deb8:	6822      	ldr	r2, [r4, #0]
 800deba:	07d2      	lsls	r2, r2, #31
 800debc:	d501      	bpl.n	800dec2 <_printf_float+0x1ba>
 800debe:	3302      	adds	r3, #2
 800dec0:	e7f4      	b.n	800deac <_printf_float+0x1a4>
 800dec2:	2301      	movs	r3, #1
 800dec4:	e7f2      	b.n	800deac <_printf_float+0x1a4>
 800dec6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800deca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800decc:	4299      	cmp	r1, r3
 800dece:	db05      	blt.n	800dedc <_printf_float+0x1d4>
 800ded0:	6823      	ldr	r3, [r4, #0]
 800ded2:	6121      	str	r1, [r4, #16]
 800ded4:	07d8      	lsls	r0, r3, #31
 800ded6:	d5ea      	bpl.n	800deae <_printf_float+0x1a6>
 800ded8:	1c4b      	adds	r3, r1, #1
 800deda:	e7e7      	b.n	800deac <_printf_float+0x1a4>
 800dedc:	2900      	cmp	r1, #0
 800dede:	bfd4      	ite	le
 800dee0:	f1c1 0202 	rsble	r2, r1, #2
 800dee4:	2201      	movgt	r2, #1
 800dee6:	4413      	add	r3, r2
 800dee8:	e7e0      	b.n	800deac <_printf_float+0x1a4>
 800deea:	6823      	ldr	r3, [r4, #0]
 800deec:	055a      	lsls	r2, r3, #21
 800deee:	d407      	bmi.n	800df00 <_printf_float+0x1f8>
 800def0:	6923      	ldr	r3, [r4, #16]
 800def2:	4642      	mov	r2, r8
 800def4:	4631      	mov	r1, r6
 800def6:	4628      	mov	r0, r5
 800def8:	47b8      	blx	r7
 800defa:	3001      	adds	r0, #1
 800defc:	d12c      	bne.n	800df58 <_printf_float+0x250>
 800defe:	e764      	b.n	800ddca <_printf_float+0xc2>
 800df00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800df04:	f240 80e0 	bls.w	800e0c8 <_printf_float+0x3c0>
 800df08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800df0c:	2200      	movs	r2, #0
 800df0e:	2300      	movs	r3, #0
 800df10:	f7f2 fe02 	bl	8000b18 <__aeabi_dcmpeq>
 800df14:	2800      	cmp	r0, #0
 800df16:	d034      	beq.n	800df82 <_printf_float+0x27a>
 800df18:	4a37      	ldr	r2, [pc, #220]	; (800dff8 <_printf_float+0x2f0>)
 800df1a:	2301      	movs	r3, #1
 800df1c:	4631      	mov	r1, r6
 800df1e:	4628      	mov	r0, r5
 800df20:	47b8      	blx	r7
 800df22:	3001      	adds	r0, #1
 800df24:	f43f af51 	beq.w	800ddca <_printf_float+0xc2>
 800df28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df2c:	429a      	cmp	r2, r3
 800df2e:	db02      	blt.n	800df36 <_printf_float+0x22e>
 800df30:	6823      	ldr	r3, [r4, #0]
 800df32:	07d8      	lsls	r0, r3, #31
 800df34:	d510      	bpl.n	800df58 <_printf_float+0x250>
 800df36:	ee18 3a10 	vmov	r3, s16
 800df3a:	4652      	mov	r2, sl
 800df3c:	4631      	mov	r1, r6
 800df3e:	4628      	mov	r0, r5
 800df40:	47b8      	blx	r7
 800df42:	3001      	adds	r0, #1
 800df44:	f43f af41 	beq.w	800ddca <_printf_float+0xc2>
 800df48:	f04f 0800 	mov.w	r8, #0
 800df4c:	f104 091a 	add.w	r9, r4, #26
 800df50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df52:	3b01      	subs	r3, #1
 800df54:	4543      	cmp	r3, r8
 800df56:	dc09      	bgt.n	800df6c <_printf_float+0x264>
 800df58:	6823      	ldr	r3, [r4, #0]
 800df5a:	079b      	lsls	r3, r3, #30
 800df5c:	f100 8105 	bmi.w	800e16a <_printf_float+0x462>
 800df60:	68e0      	ldr	r0, [r4, #12]
 800df62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df64:	4298      	cmp	r0, r3
 800df66:	bfb8      	it	lt
 800df68:	4618      	movlt	r0, r3
 800df6a:	e730      	b.n	800ddce <_printf_float+0xc6>
 800df6c:	2301      	movs	r3, #1
 800df6e:	464a      	mov	r2, r9
 800df70:	4631      	mov	r1, r6
 800df72:	4628      	mov	r0, r5
 800df74:	47b8      	blx	r7
 800df76:	3001      	adds	r0, #1
 800df78:	f43f af27 	beq.w	800ddca <_printf_float+0xc2>
 800df7c:	f108 0801 	add.w	r8, r8, #1
 800df80:	e7e6      	b.n	800df50 <_printf_float+0x248>
 800df82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df84:	2b00      	cmp	r3, #0
 800df86:	dc39      	bgt.n	800dffc <_printf_float+0x2f4>
 800df88:	4a1b      	ldr	r2, [pc, #108]	; (800dff8 <_printf_float+0x2f0>)
 800df8a:	2301      	movs	r3, #1
 800df8c:	4631      	mov	r1, r6
 800df8e:	4628      	mov	r0, r5
 800df90:	47b8      	blx	r7
 800df92:	3001      	adds	r0, #1
 800df94:	f43f af19 	beq.w	800ddca <_printf_float+0xc2>
 800df98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df9c:	4313      	orrs	r3, r2
 800df9e:	d102      	bne.n	800dfa6 <_printf_float+0x29e>
 800dfa0:	6823      	ldr	r3, [r4, #0]
 800dfa2:	07d9      	lsls	r1, r3, #31
 800dfa4:	d5d8      	bpl.n	800df58 <_printf_float+0x250>
 800dfa6:	ee18 3a10 	vmov	r3, s16
 800dfaa:	4652      	mov	r2, sl
 800dfac:	4631      	mov	r1, r6
 800dfae:	4628      	mov	r0, r5
 800dfb0:	47b8      	blx	r7
 800dfb2:	3001      	adds	r0, #1
 800dfb4:	f43f af09 	beq.w	800ddca <_printf_float+0xc2>
 800dfb8:	f04f 0900 	mov.w	r9, #0
 800dfbc:	f104 0a1a 	add.w	sl, r4, #26
 800dfc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfc2:	425b      	negs	r3, r3
 800dfc4:	454b      	cmp	r3, r9
 800dfc6:	dc01      	bgt.n	800dfcc <_printf_float+0x2c4>
 800dfc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfca:	e792      	b.n	800def2 <_printf_float+0x1ea>
 800dfcc:	2301      	movs	r3, #1
 800dfce:	4652      	mov	r2, sl
 800dfd0:	4631      	mov	r1, r6
 800dfd2:	4628      	mov	r0, r5
 800dfd4:	47b8      	blx	r7
 800dfd6:	3001      	adds	r0, #1
 800dfd8:	f43f aef7 	beq.w	800ddca <_printf_float+0xc2>
 800dfdc:	f109 0901 	add.w	r9, r9, #1
 800dfe0:	e7ee      	b.n	800dfc0 <_printf_float+0x2b8>
 800dfe2:	bf00      	nop
 800dfe4:	7fefffff 	.word	0x7fefffff
 800dfe8:	08013400 	.word	0x08013400
 800dfec:	08013404 	.word	0x08013404
 800dff0:	0801340c 	.word	0x0801340c
 800dff4:	08013408 	.word	0x08013408
 800dff8:	08013410 	.word	0x08013410
 800dffc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dffe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e000:	429a      	cmp	r2, r3
 800e002:	bfa8      	it	ge
 800e004:	461a      	movge	r2, r3
 800e006:	2a00      	cmp	r2, #0
 800e008:	4691      	mov	r9, r2
 800e00a:	dc37      	bgt.n	800e07c <_printf_float+0x374>
 800e00c:	f04f 0b00 	mov.w	fp, #0
 800e010:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e014:	f104 021a 	add.w	r2, r4, #26
 800e018:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e01a:	9305      	str	r3, [sp, #20]
 800e01c:	eba3 0309 	sub.w	r3, r3, r9
 800e020:	455b      	cmp	r3, fp
 800e022:	dc33      	bgt.n	800e08c <_printf_float+0x384>
 800e024:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e028:	429a      	cmp	r2, r3
 800e02a:	db3b      	blt.n	800e0a4 <_printf_float+0x39c>
 800e02c:	6823      	ldr	r3, [r4, #0]
 800e02e:	07da      	lsls	r2, r3, #31
 800e030:	d438      	bmi.n	800e0a4 <_printf_float+0x39c>
 800e032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e034:	9b05      	ldr	r3, [sp, #20]
 800e036:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e038:	1ad3      	subs	r3, r2, r3
 800e03a:	eba2 0901 	sub.w	r9, r2, r1
 800e03e:	4599      	cmp	r9, r3
 800e040:	bfa8      	it	ge
 800e042:	4699      	movge	r9, r3
 800e044:	f1b9 0f00 	cmp.w	r9, #0
 800e048:	dc35      	bgt.n	800e0b6 <_printf_float+0x3ae>
 800e04a:	f04f 0800 	mov.w	r8, #0
 800e04e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e052:	f104 0a1a 	add.w	sl, r4, #26
 800e056:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e05a:	1a9b      	subs	r3, r3, r2
 800e05c:	eba3 0309 	sub.w	r3, r3, r9
 800e060:	4543      	cmp	r3, r8
 800e062:	f77f af79 	ble.w	800df58 <_printf_float+0x250>
 800e066:	2301      	movs	r3, #1
 800e068:	4652      	mov	r2, sl
 800e06a:	4631      	mov	r1, r6
 800e06c:	4628      	mov	r0, r5
 800e06e:	47b8      	blx	r7
 800e070:	3001      	adds	r0, #1
 800e072:	f43f aeaa 	beq.w	800ddca <_printf_float+0xc2>
 800e076:	f108 0801 	add.w	r8, r8, #1
 800e07a:	e7ec      	b.n	800e056 <_printf_float+0x34e>
 800e07c:	4613      	mov	r3, r2
 800e07e:	4631      	mov	r1, r6
 800e080:	4642      	mov	r2, r8
 800e082:	4628      	mov	r0, r5
 800e084:	47b8      	blx	r7
 800e086:	3001      	adds	r0, #1
 800e088:	d1c0      	bne.n	800e00c <_printf_float+0x304>
 800e08a:	e69e      	b.n	800ddca <_printf_float+0xc2>
 800e08c:	2301      	movs	r3, #1
 800e08e:	4631      	mov	r1, r6
 800e090:	4628      	mov	r0, r5
 800e092:	9205      	str	r2, [sp, #20]
 800e094:	47b8      	blx	r7
 800e096:	3001      	adds	r0, #1
 800e098:	f43f ae97 	beq.w	800ddca <_printf_float+0xc2>
 800e09c:	9a05      	ldr	r2, [sp, #20]
 800e09e:	f10b 0b01 	add.w	fp, fp, #1
 800e0a2:	e7b9      	b.n	800e018 <_printf_float+0x310>
 800e0a4:	ee18 3a10 	vmov	r3, s16
 800e0a8:	4652      	mov	r2, sl
 800e0aa:	4631      	mov	r1, r6
 800e0ac:	4628      	mov	r0, r5
 800e0ae:	47b8      	blx	r7
 800e0b0:	3001      	adds	r0, #1
 800e0b2:	d1be      	bne.n	800e032 <_printf_float+0x32a>
 800e0b4:	e689      	b.n	800ddca <_printf_float+0xc2>
 800e0b6:	9a05      	ldr	r2, [sp, #20]
 800e0b8:	464b      	mov	r3, r9
 800e0ba:	4442      	add	r2, r8
 800e0bc:	4631      	mov	r1, r6
 800e0be:	4628      	mov	r0, r5
 800e0c0:	47b8      	blx	r7
 800e0c2:	3001      	adds	r0, #1
 800e0c4:	d1c1      	bne.n	800e04a <_printf_float+0x342>
 800e0c6:	e680      	b.n	800ddca <_printf_float+0xc2>
 800e0c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0ca:	2a01      	cmp	r2, #1
 800e0cc:	dc01      	bgt.n	800e0d2 <_printf_float+0x3ca>
 800e0ce:	07db      	lsls	r3, r3, #31
 800e0d0:	d538      	bpl.n	800e144 <_printf_float+0x43c>
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	4642      	mov	r2, r8
 800e0d6:	4631      	mov	r1, r6
 800e0d8:	4628      	mov	r0, r5
 800e0da:	47b8      	blx	r7
 800e0dc:	3001      	adds	r0, #1
 800e0de:	f43f ae74 	beq.w	800ddca <_printf_float+0xc2>
 800e0e2:	ee18 3a10 	vmov	r3, s16
 800e0e6:	4652      	mov	r2, sl
 800e0e8:	4631      	mov	r1, r6
 800e0ea:	4628      	mov	r0, r5
 800e0ec:	47b8      	blx	r7
 800e0ee:	3001      	adds	r0, #1
 800e0f0:	f43f ae6b 	beq.w	800ddca <_printf_float+0xc2>
 800e0f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	f7f2 fd0c 	bl	8000b18 <__aeabi_dcmpeq>
 800e100:	b9d8      	cbnz	r0, 800e13a <_printf_float+0x432>
 800e102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e104:	f108 0201 	add.w	r2, r8, #1
 800e108:	3b01      	subs	r3, #1
 800e10a:	4631      	mov	r1, r6
 800e10c:	4628      	mov	r0, r5
 800e10e:	47b8      	blx	r7
 800e110:	3001      	adds	r0, #1
 800e112:	d10e      	bne.n	800e132 <_printf_float+0x42a>
 800e114:	e659      	b.n	800ddca <_printf_float+0xc2>
 800e116:	2301      	movs	r3, #1
 800e118:	4652      	mov	r2, sl
 800e11a:	4631      	mov	r1, r6
 800e11c:	4628      	mov	r0, r5
 800e11e:	47b8      	blx	r7
 800e120:	3001      	adds	r0, #1
 800e122:	f43f ae52 	beq.w	800ddca <_printf_float+0xc2>
 800e126:	f108 0801 	add.w	r8, r8, #1
 800e12a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e12c:	3b01      	subs	r3, #1
 800e12e:	4543      	cmp	r3, r8
 800e130:	dcf1      	bgt.n	800e116 <_printf_float+0x40e>
 800e132:	464b      	mov	r3, r9
 800e134:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e138:	e6dc      	b.n	800def4 <_printf_float+0x1ec>
 800e13a:	f04f 0800 	mov.w	r8, #0
 800e13e:	f104 0a1a 	add.w	sl, r4, #26
 800e142:	e7f2      	b.n	800e12a <_printf_float+0x422>
 800e144:	2301      	movs	r3, #1
 800e146:	4642      	mov	r2, r8
 800e148:	e7df      	b.n	800e10a <_printf_float+0x402>
 800e14a:	2301      	movs	r3, #1
 800e14c:	464a      	mov	r2, r9
 800e14e:	4631      	mov	r1, r6
 800e150:	4628      	mov	r0, r5
 800e152:	47b8      	blx	r7
 800e154:	3001      	adds	r0, #1
 800e156:	f43f ae38 	beq.w	800ddca <_printf_float+0xc2>
 800e15a:	f108 0801 	add.w	r8, r8, #1
 800e15e:	68e3      	ldr	r3, [r4, #12]
 800e160:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e162:	1a5b      	subs	r3, r3, r1
 800e164:	4543      	cmp	r3, r8
 800e166:	dcf0      	bgt.n	800e14a <_printf_float+0x442>
 800e168:	e6fa      	b.n	800df60 <_printf_float+0x258>
 800e16a:	f04f 0800 	mov.w	r8, #0
 800e16e:	f104 0919 	add.w	r9, r4, #25
 800e172:	e7f4      	b.n	800e15e <_printf_float+0x456>

0800e174 <_printf_common>:
 800e174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e178:	4616      	mov	r6, r2
 800e17a:	4699      	mov	r9, r3
 800e17c:	688a      	ldr	r2, [r1, #8]
 800e17e:	690b      	ldr	r3, [r1, #16]
 800e180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e184:	4293      	cmp	r3, r2
 800e186:	bfb8      	it	lt
 800e188:	4613      	movlt	r3, r2
 800e18a:	6033      	str	r3, [r6, #0]
 800e18c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e190:	4607      	mov	r7, r0
 800e192:	460c      	mov	r4, r1
 800e194:	b10a      	cbz	r2, 800e19a <_printf_common+0x26>
 800e196:	3301      	adds	r3, #1
 800e198:	6033      	str	r3, [r6, #0]
 800e19a:	6823      	ldr	r3, [r4, #0]
 800e19c:	0699      	lsls	r1, r3, #26
 800e19e:	bf42      	ittt	mi
 800e1a0:	6833      	ldrmi	r3, [r6, #0]
 800e1a2:	3302      	addmi	r3, #2
 800e1a4:	6033      	strmi	r3, [r6, #0]
 800e1a6:	6825      	ldr	r5, [r4, #0]
 800e1a8:	f015 0506 	ands.w	r5, r5, #6
 800e1ac:	d106      	bne.n	800e1bc <_printf_common+0x48>
 800e1ae:	f104 0a19 	add.w	sl, r4, #25
 800e1b2:	68e3      	ldr	r3, [r4, #12]
 800e1b4:	6832      	ldr	r2, [r6, #0]
 800e1b6:	1a9b      	subs	r3, r3, r2
 800e1b8:	42ab      	cmp	r3, r5
 800e1ba:	dc26      	bgt.n	800e20a <_printf_common+0x96>
 800e1bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e1c0:	1e13      	subs	r3, r2, #0
 800e1c2:	6822      	ldr	r2, [r4, #0]
 800e1c4:	bf18      	it	ne
 800e1c6:	2301      	movne	r3, #1
 800e1c8:	0692      	lsls	r2, r2, #26
 800e1ca:	d42b      	bmi.n	800e224 <_printf_common+0xb0>
 800e1cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e1d0:	4649      	mov	r1, r9
 800e1d2:	4638      	mov	r0, r7
 800e1d4:	47c0      	blx	r8
 800e1d6:	3001      	adds	r0, #1
 800e1d8:	d01e      	beq.n	800e218 <_printf_common+0xa4>
 800e1da:	6823      	ldr	r3, [r4, #0]
 800e1dc:	68e5      	ldr	r5, [r4, #12]
 800e1de:	6832      	ldr	r2, [r6, #0]
 800e1e0:	f003 0306 	and.w	r3, r3, #6
 800e1e4:	2b04      	cmp	r3, #4
 800e1e6:	bf08      	it	eq
 800e1e8:	1aad      	subeq	r5, r5, r2
 800e1ea:	68a3      	ldr	r3, [r4, #8]
 800e1ec:	6922      	ldr	r2, [r4, #16]
 800e1ee:	bf0c      	ite	eq
 800e1f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e1f4:	2500      	movne	r5, #0
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	bfc4      	itt	gt
 800e1fa:	1a9b      	subgt	r3, r3, r2
 800e1fc:	18ed      	addgt	r5, r5, r3
 800e1fe:	2600      	movs	r6, #0
 800e200:	341a      	adds	r4, #26
 800e202:	42b5      	cmp	r5, r6
 800e204:	d11a      	bne.n	800e23c <_printf_common+0xc8>
 800e206:	2000      	movs	r0, #0
 800e208:	e008      	b.n	800e21c <_printf_common+0xa8>
 800e20a:	2301      	movs	r3, #1
 800e20c:	4652      	mov	r2, sl
 800e20e:	4649      	mov	r1, r9
 800e210:	4638      	mov	r0, r7
 800e212:	47c0      	blx	r8
 800e214:	3001      	adds	r0, #1
 800e216:	d103      	bne.n	800e220 <_printf_common+0xac>
 800e218:	f04f 30ff 	mov.w	r0, #4294967295
 800e21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e220:	3501      	adds	r5, #1
 800e222:	e7c6      	b.n	800e1b2 <_printf_common+0x3e>
 800e224:	18e1      	adds	r1, r4, r3
 800e226:	1c5a      	adds	r2, r3, #1
 800e228:	2030      	movs	r0, #48	; 0x30
 800e22a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e22e:	4422      	add	r2, r4
 800e230:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e234:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e238:	3302      	adds	r3, #2
 800e23a:	e7c7      	b.n	800e1cc <_printf_common+0x58>
 800e23c:	2301      	movs	r3, #1
 800e23e:	4622      	mov	r2, r4
 800e240:	4649      	mov	r1, r9
 800e242:	4638      	mov	r0, r7
 800e244:	47c0      	blx	r8
 800e246:	3001      	adds	r0, #1
 800e248:	d0e6      	beq.n	800e218 <_printf_common+0xa4>
 800e24a:	3601      	adds	r6, #1
 800e24c:	e7d9      	b.n	800e202 <_printf_common+0x8e>
	...

0800e250 <_printf_i>:
 800e250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e254:	460c      	mov	r4, r1
 800e256:	4691      	mov	r9, r2
 800e258:	7e27      	ldrb	r7, [r4, #24]
 800e25a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e25c:	2f78      	cmp	r7, #120	; 0x78
 800e25e:	4680      	mov	r8, r0
 800e260:	469a      	mov	sl, r3
 800e262:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e266:	d807      	bhi.n	800e278 <_printf_i+0x28>
 800e268:	2f62      	cmp	r7, #98	; 0x62
 800e26a:	d80a      	bhi.n	800e282 <_printf_i+0x32>
 800e26c:	2f00      	cmp	r7, #0
 800e26e:	f000 80d8 	beq.w	800e422 <_printf_i+0x1d2>
 800e272:	2f58      	cmp	r7, #88	; 0x58
 800e274:	f000 80a3 	beq.w	800e3be <_printf_i+0x16e>
 800e278:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e27c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e280:	e03a      	b.n	800e2f8 <_printf_i+0xa8>
 800e282:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e286:	2b15      	cmp	r3, #21
 800e288:	d8f6      	bhi.n	800e278 <_printf_i+0x28>
 800e28a:	a001      	add	r0, pc, #4	; (adr r0, 800e290 <_printf_i+0x40>)
 800e28c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e290:	0800e2e9 	.word	0x0800e2e9
 800e294:	0800e2fd 	.word	0x0800e2fd
 800e298:	0800e279 	.word	0x0800e279
 800e29c:	0800e279 	.word	0x0800e279
 800e2a0:	0800e279 	.word	0x0800e279
 800e2a4:	0800e279 	.word	0x0800e279
 800e2a8:	0800e2fd 	.word	0x0800e2fd
 800e2ac:	0800e279 	.word	0x0800e279
 800e2b0:	0800e279 	.word	0x0800e279
 800e2b4:	0800e279 	.word	0x0800e279
 800e2b8:	0800e279 	.word	0x0800e279
 800e2bc:	0800e409 	.word	0x0800e409
 800e2c0:	0800e32d 	.word	0x0800e32d
 800e2c4:	0800e3eb 	.word	0x0800e3eb
 800e2c8:	0800e279 	.word	0x0800e279
 800e2cc:	0800e279 	.word	0x0800e279
 800e2d0:	0800e42b 	.word	0x0800e42b
 800e2d4:	0800e279 	.word	0x0800e279
 800e2d8:	0800e32d 	.word	0x0800e32d
 800e2dc:	0800e279 	.word	0x0800e279
 800e2e0:	0800e279 	.word	0x0800e279
 800e2e4:	0800e3f3 	.word	0x0800e3f3
 800e2e8:	680b      	ldr	r3, [r1, #0]
 800e2ea:	1d1a      	adds	r2, r3, #4
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	600a      	str	r2, [r1, #0]
 800e2f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e2f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	e0a3      	b.n	800e444 <_printf_i+0x1f4>
 800e2fc:	6825      	ldr	r5, [r4, #0]
 800e2fe:	6808      	ldr	r0, [r1, #0]
 800e300:	062e      	lsls	r6, r5, #24
 800e302:	f100 0304 	add.w	r3, r0, #4
 800e306:	d50a      	bpl.n	800e31e <_printf_i+0xce>
 800e308:	6805      	ldr	r5, [r0, #0]
 800e30a:	600b      	str	r3, [r1, #0]
 800e30c:	2d00      	cmp	r5, #0
 800e30e:	da03      	bge.n	800e318 <_printf_i+0xc8>
 800e310:	232d      	movs	r3, #45	; 0x2d
 800e312:	426d      	negs	r5, r5
 800e314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e318:	485e      	ldr	r0, [pc, #376]	; (800e494 <_printf_i+0x244>)
 800e31a:	230a      	movs	r3, #10
 800e31c:	e019      	b.n	800e352 <_printf_i+0x102>
 800e31e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e322:	6805      	ldr	r5, [r0, #0]
 800e324:	600b      	str	r3, [r1, #0]
 800e326:	bf18      	it	ne
 800e328:	b22d      	sxthne	r5, r5
 800e32a:	e7ef      	b.n	800e30c <_printf_i+0xbc>
 800e32c:	680b      	ldr	r3, [r1, #0]
 800e32e:	6825      	ldr	r5, [r4, #0]
 800e330:	1d18      	adds	r0, r3, #4
 800e332:	6008      	str	r0, [r1, #0]
 800e334:	0628      	lsls	r0, r5, #24
 800e336:	d501      	bpl.n	800e33c <_printf_i+0xec>
 800e338:	681d      	ldr	r5, [r3, #0]
 800e33a:	e002      	b.n	800e342 <_printf_i+0xf2>
 800e33c:	0669      	lsls	r1, r5, #25
 800e33e:	d5fb      	bpl.n	800e338 <_printf_i+0xe8>
 800e340:	881d      	ldrh	r5, [r3, #0]
 800e342:	4854      	ldr	r0, [pc, #336]	; (800e494 <_printf_i+0x244>)
 800e344:	2f6f      	cmp	r7, #111	; 0x6f
 800e346:	bf0c      	ite	eq
 800e348:	2308      	moveq	r3, #8
 800e34a:	230a      	movne	r3, #10
 800e34c:	2100      	movs	r1, #0
 800e34e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e352:	6866      	ldr	r6, [r4, #4]
 800e354:	60a6      	str	r6, [r4, #8]
 800e356:	2e00      	cmp	r6, #0
 800e358:	bfa2      	ittt	ge
 800e35a:	6821      	ldrge	r1, [r4, #0]
 800e35c:	f021 0104 	bicge.w	r1, r1, #4
 800e360:	6021      	strge	r1, [r4, #0]
 800e362:	b90d      	cbnz	r5, 800e368 <_printf_i+0x118>
 800e364:	2e00      	cmp	r6, #0
 800e366:	d04d      	beq.n	800e404 <_printf_i+0x1b4>
 800e368:	4616      	mov	r6, r2
 800e36a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e36e:	fb03 5711 	mls	r7, r3, r1, r5
 800e372:	5dc7      	ldrb	r7, [r0, r7]
 800e374:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e378:	462f      	mov	r7, r5
 800e37a:	42bb      	cmp	r3, r7
 800e37c:	460d      	mov	r5, r1
 800e37e:	d9f4      	bls.n	800e36a <_printf_i+0x11a>
 800e380:	2b08      	cmp	r3, #8
 800e382:	d10b      	bne.n	800e39c <_printf_i+0x14c>
 800e384:	6823      	ldr	r3, [r4, #0]
 800e386:	07df      	lsls	r7, r3, #31
 800e388:	d508      	bpl.n	800e39c <_printf_i+0x14c>
 800e38a:	6923      	ldr	r3, [r4, #16]
 800e38c:	6861      	ldr	r1, [r4, #4]
 800e38e:	4299      	cmp	r1, r3
 800e390:	bfde      	ittt	le
 800e392:	2330      	movle	r3, #48	; 0x30
 800e394:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e398:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e39c:	1b92      	subs	r2, r2, r6
 800e39e:	6122      	str	r2, [r4, #16]
 800e3a0:	f8cd a000 	str.w	sl, [sp]
 800e3a4:	464b      	mov	r3, r9
 800e3a6:	aa03      	add	r2, sp, #12
 800e3a8:	4621      	mov	r1, r4
 800e3aa:	4640      	mov	r0, r8
 800e3ac:	f7ff fee2 	bl	800e174 <_printf_common>
 800e3b0:	3001      	adds	r0, #1
 800e3b2:	d14c      	bne.n	800e44e <_printf_i+0x1fe>
 800e3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3b8:	b004      	add	sp, #16
 800e3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3be:	4835      	ldr	r0, [pc, #212]	; (800e494 <_printf_i+0x244>)
 800e3c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e3c4:	6823      	ldr	r3, [r4, #0]
 800e3c6:	680e      	ldr	r6, [r1, #0]
 800e3c8:	061f      	lsls	r7, r3, #24
 800e3ca:	f856 5b04 	ldr.w	r5, [r6], #4
 800e3ce:	600e      	str	r6, [r1, #0]
 800e3d0:	d514      	bpl.n	800e3fc <_printf_i+0x1ac>
 800e3d2:	07d9      	lsls	r1, r3, #31
 800e3d4:	bf44      	itt	mi
 800e3d6:	f043 0320 	orrmi.w	r3, r3, #32
 800e3da:	6023      	strmi	r3, [r4, #0]
 800e3dc:	b91d      	cbnz	r5, 800e3e6 <_printf_i+0x196>
 800e3de:	6823      	ldr	r3, [r4, #0]
 800e3e0:	f023 0320 	bic.w	r3, r3, #32
 800e3e4:	6023      	str	r3, [r4, #0]
 800e3e6:	2310      	movs	r3, #16
 800e3e8:	e7b0      	b.n	800e34c <_printf_i+0xfc>
 800e3ea:	6823      	ldr	r3, [r4, #0]
 800e3ec:	f043 0320 	orr.w	r3, r3, #32
 800e3f0:	6023      	str	r3, [r4, #0]
 800e3f2:	2378      	movs	r3, #120	; 0x78
 800e3f4:	4828      	ldr	r0, [pc, #160]	; (800e498 <_printf_i+0x248>)
 800e3f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e3fa:	e7e3      	b.n	800e3c4 <_printf_i+0x174>
 800e3fc:	065e      	lsls	r6, r3, #25
 800e3fe:	bf48      	it	mi
 800e400:	b2ad      	uxthmi	r5, r5
 800e402:	e7e6      	b.n	800e3d2 <_printf_i+0x182>
 800e404:	4616      	mov	r6, r2
 800e406:	e7bb      	b.n	800e380 <_printf_i+0x130>
 800e408:	680b      	ldr	r3, [r1, #0]
 800e40a:	6826      	ldr	r6, [r4, #0]
 800e40c:	6960      	ldr	r0, [r4, #20]
 800e40e:	1d1d      	adds	r5, r3, #4
 800e410:	600d      	str	r5, [r1, #0]
 800e412:	0635      	lsls	r5, r6, #24
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	d501      	bpl.n	800e41c <_printf_i+0x1cc>
 800e418:	6018      	str	r0, [r3, #0]
 800e41a:	e002      	b.n	800e422 <_printf_i+0x1d2>
 800e41c:	0671      	lsls	r1, r6, #25
 800e41e:	d5fb      	bpl.n	800e418 <_printf_i+0x1c8>
 800e420:	8018      	strh	r0, [r3, #0]
 800e422:	2300      	movs	r3, #0
 800e424:	6123      	str	r3, [r4, #16]
 800e426:	4616      	mov	r6, r2
 800e428:	e7ba      	b.n	800e3a0 <_printf_i+0x150>
 800e42a:	680b      	ldr	r3, [r1, #0]
 800e42c:	1d1a      	adds	r2, r3, #4
 800e42e:	600a      	str	r2, [r1, #0]
 800e430:	681e      	ldr	r6, [r3, #0]
 800e432:	6862      	ldr	r2, [r4, #4]
 800e434:	2100      	movs	r1, #0
 800e436:	4630      	mov	r0, r6
 800e438:	f7f1 fefa 	bl	8000230 <memchr>
 800e43c:	b108      	cbz	r0, 800e442 <_printf_i+0x1f2>
 800e43e:	1b80      	subs	r0, r0, r6
 800e440:	6060      	str	r0, [r4, #4]
 800e442:	6863      	ldr	r3, [r4, #4]
 800e444:	6123      	str	r3, [r4, #16]
 800e446:	2300      	movs	r3, #0
 800e448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e44c:	e7a8      	b.n	800e3a0 <_printf_i+0x150>
 800e44e:	6923      	ldr	r3, [r4, #16]
 800e450:	4632      	mov	r2, r6
 800e452:	4649      	mov	r1, r9
 800e454:	4640      	mov	r0, r8
 800e456:	47d0      	blx	sl
 800e458:	3001      	adds	r0, #1
 800e45a:	d0ab      	beq.n	800e3b4 <_printf_i+0x164>
 800e45c:	6823      	ldr	r3, [r4, #0]
 800e45e:	079b      	lsls	r3, r3, #30
 800e460:	d413      	bmi.n	800e48a <_printf_i+0x23a>
 800e462:	68e0      	ldr	r0, [r4, #12]
 800e464:	9b03      	ldr	r3, [sp, #12]
 800e466:	4298      	cmp	r0, r3
 800e468:	bfb8      	it	lt
 800e46a:	4618      	movlt	r0, r3
 800e46c:	e7a4      	b.n	800e3b8 <_printf_i+0x168>
 800e46e:	2301      	movs	r3, #1
 800e470:	4632      	mov	r2, r6
 800e472:	4649      	mov	r1, r9
 800e474:	4640      	mov	r0, r8
 800e476:	47d0      	blx	sl
 800e478:	3001      	adds	r0, #1
 800e47a:	d09b      	beq.n	800e3b4 <_printf_i+0x164>
 800e47c:	3501      	adds	r5, #1
 800e47e:	68e3      	ldr	r3, [r4, #12]
 800e480:	9903      	ldr	r1, [sp, #12]
 800e482:	1a5b      	subs	r3, r3, r1
 800e484:	42ab      	cmp	r3, r5
 800e486:	dcf2      	bgt.n	800e46e <_printf_i+0x21e>
 800e488:	e7eb      	b.n	800e462 <_printf_i+0x212>
 800e48a:	2500      	movs	r5, #0
 800e48c:	f104 0619 	add.w	r6, r4, #25
 800e490:	e7f5      	b.n	800e47e <_printf_i+0x22e>
 800e492:	bf00      	nop
 800e494:	08013412 	.word	0x08013412
 800e498:	08013423 	.word	0x08013423

0800e49c <iprintf>:
 800e49c:	b40f      	push	{r0, r1, r2, r3}
 800e49e:	4b0a      	ldr	r3, [pc, #40]	; (800e4c8 <iprintf+0x2c>)
 800e4a0:	b513      	push	{r0, r1, r4, lr}
 800e4a2:	681c      	ldr	r4, [r3, #0]
 800e4a4:	b124      	cbz	r4, 800e4b0 <iprintf+0x14>
 800e4a6:	69a3      	ldr	r3, [r4, #24]
 800e4a8:	b913      	cbnz	r3, 800e4b0 <iprintf+0x14>
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	f001 ff96 	bl	80103dc <__sinit>
 800e4b0:	ab05      	add	r3, sp, #20
 800e4b2:	9a04      	ldr	r2, [sp, #16]
 800e4b4:	68a1      	ldr	r1, [r4, #8]
 800e4b6:	9301      	str	r3, [sp, #4]
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	f003 f9bf 	bl	801183c <_vfiprintf_r>
 800e4be:	b002      	add	sp, #8
 800e4c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4c4:	b004      	add	sp, #16
 800e4c6:	4770      	bx	lr
 800e4c8:	2000002c 	.word	0x2000002c

0800e4cc <_puts_r>:
 800e4cc:	b570      	push	{r4, r5, r6, lr}
 800e4ce:	460e      	mov	r6, r1
 800e4d0:	4605      	mov	r5, r0
 800e4d2:	b118      	cbz	r0, 800e4dc <_puts_r+0x10>
 800e4d4:	6983      	ldr	r3, [r0, #24]
 800e4d6:	b90b      	cbnz	r3, 800e4dc <_puts_r+0x10>
 800e4d8:	f001 ff80 	bl	80103dc <__sinit>
 800e4dc:	69ab      	ldr	r3, [r5, #24]
 800e4de:	68ac      	ldr	r4, [r5, #8]
 800e4e0:	b913      	cbnz	r3, 800e4e8 <_puts_r+0x1c>
 800e4e2:	4628      	mov	r0, r5
 800e4e4:	f001 ff7a 	bl	80103dc <__sinit>
 800e4e8:	4b2c      	ldr	r3, [pc, #176]	; (800e59c <_puts_r+0xd0>)
 800e4ea:	429c      	cmp	r4, r3
 800e4ec:	d120      	bne.n	800e530 <_puts_r+0x64>
 800e4ee:	686c      	ldr	r4, [r5, #4]
 800e4f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e4f2:	07db      	lsls	r3, r3, #31
 800e4f4:	d405      	bmi.n	800e502 <_puts_r+0x36>
 800e4f6:	89a3      	ldrh	r3, [r4, #12]
 800e4f8:	0598      	lsls	r0, r3, #22
 800e4fa:	d402      	bmi.n	800e502 <_puts_r+0x36>
 800e4fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4fe:	f002 fb7e 	bl	8010bfe <__retarget_lock_acquire_recursive>
 800e502:	89a3      	ldrh	r3, [r4, #12]
 800e504:	0719      	lsls	r1, r3, #28
 800e506:	d51d      	bpl.n	800e544 <_puts_r+0x78>
 800e508:	6923      	ldr	r3, [r4, #16]
 800e50a:	b1db      	cbz	r3, 800e544 <_puts_r+0x78>
 800e50c:	3e01      	subs	r6, #1
 800e50e:	68a3      	ldr	r3, [r4, #8]
 800e510:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e514:	3b01      	subs	r3, #1
 800e516:	60a3      	str	r3, [r4, #8]
 800e518:	bb39      	cbnz	r1, 800e56a <_puts_r+0x9e>
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	da38      	bge.n	800e590 <_puts_r+0xc4>
 800e51e:	4622      	mov	r2, r4
 800e520:	210a      	movs	r1, #10
 800e522:	4628      	mov	r0, r5
 800e524:	f000 ff08 	bl	800f338 <__swbuf_r>
 800e528:	3001      	adds	r0, #1
 800e52a:	d011      	beq.n	800e550 <_puts_r+0x84>
 800e52c:	250a      	movs	r5, #10
 800e52e:	e011      	b.n	800e554 <_puts_r+0x88>
 800e530:	4b1b      	ldr	r3, [pc, #108]	; (800e5a0 <_puts_r+0xd4>)
 800e532:	429c      	cmp	r4, r3
 800e534:	d101      	bne.n	800e53a <_puts_r+0x6e>
 800e536:	68ac      	ldr	r4, [r5, #8]
 800e538:	e7da      	b.n	800e4f0 <_puts_r+0x24>
 800e53a:	4b1a      	ldr	r3, [pc, #104]	; (800e5a4 <_puts_r+0xd8>)
 800e53c:	429c      	cmp	r4, r3
 800e53e:	bf08      	it	eq
 800e540:	68ec      	ldreq	r4, [r5, #12]
 800e542:	e7d5      	b.n	800e4f0 <_puts_r+0x24>
 800e544:	4621      	mov	r1, r4
 800e546:	4628      	mov	r0, r5
 800e548:	f000 ff48 	bl	800f3dc <__swsetup_r>
 800e54c:	2800      	cmp	r0, #0
 800e54e:	d0dd      	beq.n	800e50c <_puts_r+0x40>
 800e550:	f04f 35ff 	mov.w	r5, #4294967295
 800e554:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e556:	07da      	lsls	r2, r3, #31
 800e558:	d405      	bmi.n	800e566 <_puts_r+0x9a>
 800e55a:	89a3      	ldrh	r3, [r4, #12]
 800e55c:	059b      	lsls	r3, r3, #22
 800e55e:	d402      	bmi.n	800e566 <_puts_r+0x9a>
 800e560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e562:	f002 fb4d 	bl	8010c00 <__retarget_lock_release_recursive>
 800e566:	4628      	mov	r0, r5
 800e568:	bd70      	pop	{r4, r5, r6, pc}
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	da04      	bge.n	800e578 <_puts_r+0xac>
 800e56e:	69a2      	ldr	r2, [r4, #24]
 800e570:	429a      	cmp	r2, r3
 800e572:	dc06      	bgt.n	800e582 <_puts_r+0xb6>
 800e574:	290a      	cmp	r1, #10
 800e576:	d004      	beq.n	800e582 <_puts_r+0xb6>
 800e578:	6823      	ldr	r3, [r4, #0]
 800e57a:	1c5a      	adds	r2, r3, #1
 800e57c:	6022      	str	r2, [r4, #0]
 800e57e:	7019      	strb	r1, [r3, #0]
 800e580:	e7c5      	b.n	800e50e <_puts_r+0x42>
 800e582:	4622      	mov	r2, r4
 800e584:	4628      	mov	r0, r5
 800e586:	f000 fed7 	bl	800f338 <__swbuf_r>
 800e58a:	3001      	adds	r0, #1
 800e58c:	d1bf      	bne.n	800e50e <_puts_r+0x42>
 800e58e:	e7df      	b.n	800e550 <_puts_r+0x84>
 800e590:	6823      	ldr	r3, [r4, #0]
 800e592:	250a      	movs	r5, #10
 800e594:	1c5a      	adds	r2, r3, #1
 800e596:	6022      	str	r2, [r4, #0]
 800e598:	701d      	strb	r5, [r3, #0]
 800e59a:	e7db      	b.n	800e554 <_puts_r+0x88>
 800e59c:	08013640 	.word	0x08013640
 800e5a0:	08013660 	.word	0x08013660
 800e5a4:	08013620 	.word	0x08013620

0800e5a8 <puts>:
 800e5a8:	4b02      	ldr	r3, [pc, #8]	; (800e5b4 <puts+0xc>)
 800e5aa:	4601      	mov	r1, r0
 800e5ac:	6818      	ldr	r0, [r3, #0]
 800e5ae:	f7ff bf8d 	b.w	800e4cc <_puts_r>
 800e5b2:	bf00      	nop
 800e5b4:	2000002c 	.word	0x2000002c

0800e5b8 <sulp>:
 800e5b8:	b570      	push	{r4, r5, r6, lr}
 800e5ba:	4604      	mov	r4, r0
 800e5bc:	460d      	mov	r5, r1
 800e5be:	ec45 4b10 	vmov	d0, r4, r5
 800e5c2:	4616      	mov	r6, r2
 800e5c4:	f002 ff08 	bl	80113d8 <__ulp>
 800e5c8:	ec51 0b10 	vmov	r0, r1, d0
 800e5cc:	b17e      	cbz	r6, 800e5ee <sulp+0x36>
 800e5ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e5d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	dd09      	ble.n	800e5ee <sulp+0x36>
 800e5da:	051b      	lsls	r3, r3, #20
 800e5dc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e5e0:	2400      	movs	r4, #0
 800e5e2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e5e6:	4622      	mov	r2, r4
 800e5e8:	462b      	mov	r3, r5
 800e5ea:	f7f2 f82d 	bl	8000648 <__aeabi_dmul>
 800e5ee:	bd70      	pop	{r4, r5, r6, pc}

0800e5f0 <_strtod_l>:
 800e5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f4:	b0a3      	sub	sp, #140	; 0x8c
 800e5f6:	461f      	mov	r7, r3
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	931e      	str	r3, [sp, #120]	; 0x78
 800e5fc:	4ba4      	ldr	r3, [pc, #656]	; (800e890 <_strtod_l+0x2a0>)
 800e5fe:	9219      	str	r2, [sp, #100]	; 0x64
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	9307      	str	r3, [sp, #28]
 800e604:	4604      	mov	r4, r0
 800e606:	4618      	mov	r0, r3
 800e608:	4688      	mov	r8, r1
 800e60a:	f7f1 fe09 	bl	8000220 <strlen>
 800e60e:	f04f 0a00 	mov.w	sl, #0
 800e612:	4605      	mov	r5, r0
 800e614:	f04f 0b00 	mov.w	fp, #0
 800e618:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e61c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e61e:	781a      	ldrb	r2, [r3, #0]
 800e620:	2a2b      	cmp	r2, #43	; 0x2b
 800e622:	d04c      	beq.n	800e6be <_strtod_l+0xce>
 800e624:	d839      	bhi.n	800e69a <_strtod_l+0xaa>
 800e626:	2a0d      	cmp	r2, #13
 800e628:	d832      	bhi.n	800e690 <_strtod_l+0xa0>
 800e62a:	2a08      	cmp	r2, #8
 800e62c:	d832      	bhi.n	800e694 <_strtod_l+0xa4>
 800e62e:	2a00      	cmp	r2, #0
 800e630:	d03c      	beq.n	800e6ac <_strtod_l+0xbc>
 800e632:	2300      	movs	r3, #0
 800e634:	930e      	str	r3, [sp, #56]	; 0x38
 800e636:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e638:	7833      	ldrb	r3, [r6, #0]
 800e63a:	2b30      	cmp	r3, #48	; 0x30
 800e63c:	f040 80b4 	bne.w	800e7a8 <_strtod_l+0x1b8>
 800e640:	7873      	ldrb	r3, [r6, #1]
 800e642:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e646:	2b58      	cmp	r3, #88	; 0x58
 800e648:	d16c      	bne.n	800e724 <_strtod_l+0x134>
 800e64a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e64c:	9301      	str	r3, [sp, #4]
 800e64e:	ab1e      	add	r3, sp, #120	; 0x78
 800e650:	9702      	str	r7, [sp, #8]
 800e652:	9300      	str	r3, [sp, #0]
 800e654:	4a8f      	ldr	r2, [pc, #572]	; (800e894 <_strtod_l+0x2a4>)
 800e656:	ab1f      	add	r3, sp, #124	; 0x7c
 800e658:	a91d      	add	r1, sp, #116	; 0x74
 800e65a:	4620      	mov	r0, r4
 800e65c:	f001 ffc2 	bl	80105e4 <__gethex>
 800e660:	f010 0707 	ands.w	r7, r0, #7
 800e664:	4605      	mov	r5, r0
 800e666:	d005      	beq.n	800e674 <_strtod_l+0x84>
 800e668:	2f06      	cmp	r7, #6
 800e66a:	d12a      	bne.n	800e6c2 <_strtod_l+0xd2>
 800e66c:	3601      	adds	r6, #1
 800e66e:	2300      	movs	r3, #0
 800e670:	961d      	str	r6, [sp, #116]	; 0x74
 800e672:	930e      	str	r3, [sp, #56]	; 0x38
 800e674:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e676:	2b00      	cmp	r3, #0
 800e678:	f040 8596 	bne.w	800f1a8 <_strtod_l+0xbb8>
 800e67c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e67e:	b1db      	cbz	r3, 800e6b8 <_strtod_l+0xc8>
 800e680:	4652      	mov	r2, sl
 800e682:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e686:	ec43 2b10 	vmov	d0, r2, r3
 800e68a:	b023      	add	sp, #140	; 0x8c
 800e68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e690:	2a20      	cmp	r2, #32
 800e692:	d1ce      	bne.n	800e632 <_strtod_l+0x42>
 800e694:	3301      	adds	r3, #1
 800e696:	931d      	str	r3, [sp, #116]	; 0x74
 800e698:	e7c0      	b.n	800e61c <_strtod_l+0x2c>
 800e69a:	2a2d      	cmp	r2, #45	; 0x2d
 800e69c:	d1c9      	bne.n	800e632 <_strtod_l+0x42>
 800e69e:	2201      	movs	r2, #1
 800e6a0:	920e      	str	r2, [sp, #56]	; 0x38
 800e6a2:	1c5a      	adds	r2, r3, #1
 800e6a4:	921d      	str	r2, [sp, #116]	; 0x74
 800e6a6:	785b      	ldrb	r3, [r3, #1]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d1c4      	bne.n	800e636 <_strtod_l+0x46>
 800e6ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e6ae:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	f040 8576 	bne.w	800f1a4 <_strtod_l+0xbb4>
 800e6b8:	4652      	mov	r2, sl
 800e6ba:	465b      	mov	r3, fp
 800e6bc:	e7e3      	b.n	800e686 <_strtod_l+0x96>
 800e6be:	2200      	movs	r2, #0
 800e6c0:	e7ee      	b.n	800e6a0 <_strtod_l+0xb0>
 800e6c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e6c4:	b13a      	cbz	r2, 800e6d6 <_strtod_l+0xe6>
 800e6c6:	2135      	movs	r1, #53	; 0x35
 800e6c8:	a820      	add	r0, sp, #128	; 0x80
 800e6ca:	f002 ff90 	bl	80115ee <__copybits>
 800e6ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e6d0:	4620      	mov	r0, r4
 800e6d2:	f002 fb55 	bl	8010d80 <_Bfree>
 800e6d6:	3f01      	subs	r7, #1
 800e6d8:	2f05      	cmp	r7, #5
 800e6da:	d807      	bhi.n	800e6ec <_strtod_l+0xfc>
 800e6dc:	e8df f007 	tbb	[pc, r7]
 800e6e0:	1d180b0e 	.word	0x1d180b0e
 800e6e4:	030e      	.short	0x030e
 800e6e6:	f04f 0b00 	mov.w	fp, #0
 800e6ea:	46da      	mov	sl, fp
 800e6ec:	0728      	lsls	r0, r5, #28
 800e6ee:	d5c1      	bpl.n	800e674 <_strtod_l+0x84>
 800e6f0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e6f4:	e7be      	b.n	800e674 <_strtod_l+0x84>
 800e6f6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800e6fa:	e7f7      	b.n	800e6ec <_strtod_l+0xfc>
 800e6fc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800e700:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e702:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e706:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e70a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e70e:	e7ed      	b.n	800e6ec <_strtod_l+0xfc>
 800e710:	f8df b184 	ldr.w	fp, [pc, #388]	; 800e898 <_strtod_l+0x2a8>
 800e714:	f04f 0a00 	mov.w	sl, #0
 800e718:	e7e8      	b.n	800e6ec <_strtod_l+0xfc>
 800e71a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e71e:	f04f 3aff 	mov.w	sl, #4294967295
 800e722:	e7e3      	b.n	800e6ec <_strtod_l+0xfc>
 800e724:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e726:	1c5a      	adds	r2, r3, #1
 800e728:	921d      	str	r2, [sp, #116]	; 0x74
 800e72a:	785b      	ldrb	r3, [r3, #1]
 800e72c:	2b30      	cmp	r3, #48	; 0x30
 800e72e:	d0f9      	beq.n	800e724 <_strtod_l+0x134>
 800e730:	2b00      	cmp	r3, #0
 800e732:	d09f      	beq.n	800e674 <_strtod_l+0x84>
 800e734:	2301      	movs	r3, #1
 800e736:	f04f 0900 	mov.w	r9, #0
 800e73a:	9304      	str	r3, [sp, #16]
 800e73c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e73e:	930a      	str	r3, [sp, #40]	; 0x28
 800e740:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e744:	464f      	mov	r7, r9
 800e746:	220a      	movs	r2, #10
 800e748:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e74a:	7806      	ldrb	r6, [r0, #0]
 800e74c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e750:	b2d9      	uxtb	r1, r3
 800e752:	2909      	cmp	r1, #9
 800e754:	d92a      	bls.n	800e7ac <_strtod_l+0x1bc>
 800e756:	9907      	ldr	r1, [sp, #28]
 800e758:	462a      	mov	r2, r5
 800e75a:	f003 f9fc 	bl	8011b56 <strncmp>
 800e75e:	b398      	cbz	r0, 800e7c8 <_strtod_l+0x1d8>
 800e760:	2000      	movs	r0, #0
 800e762:	4633      	mov	r3, r6
 800e764:	463d      	mov	r5, r7
 800e766:	9007      	str	r0, [sp, #28]
 800e768:	4602      	mov	r2, r0
 800e76a:	2b65      	cmp	r3, #101	; 0x65
 800e76c:	d001      	beq.n	800e772 <_strtod_l+0x182>
 800e76e:	2b45      	cmp	r3, #69	; 0x45
 800e770:	d118      	bne.n	800e7a4 <_strtod_l+0x1b4>
 800e772:	b91d      	cbnz	r5, 800e77c <_strtod_l+0x18c>
 800e774:	9b04      	ldr	r3, [sp, #16]
 800e776:	4303      	orrs	r3, r0
 800e778:	d098      	beq.n	800e6ac <_strtod_l+0xbc>
 800e77a:	2500      	movs	r5, #0
 800e77c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e780:	f108 0301 	add.w	r3, r8, #1
 800e784:	931d      	str	r3, [sp, #116]	; 0x74
 800e786:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e78a:	2b2b      	cmp	r3, #43	; 0x2b
 800e78c:	d075      	beq.n	800e87a <_strtod_l+0x28a>
 800e78e:	2b2d      	cmp	r3, #45	; 0x2d
 800e790:	d07b      	beq.n	800e88a <_strtod_l+0x29a>
 800e792:	f04f 0c00 	mov.w	ip, #0
 800e796:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e79a:	2909      	cmp	r1, #9
 800e79c:	f240 8082 	bls.w	800e8a4 <_strtod_l+0x2b4>
 800e7a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e7a4:	2600      	movs	r6, #0
 800e7a6:	e09d      	b.n	800e8e4 <_strtod_l+0x2f4>
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	e7c4      	b.n	800e736 <_strtod_l+0x146>
 800e7ac:	2f08      	cmp	r7, #8
 800e7ae:	bfd8      	it	le
 800e7b0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e7b2:	f100 0001 	add.w	r0, r0, #1
 800e7b6:	bfda      	itte	le
 800e7b8:	fb02 3301 	mlale	r3, r2, r1, r3
 800e7bc:	9309      	strle	r3, [sp, #36]	; 0x24
 800e7be:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e7c2:	3701      	adds	r7, #1
 800e7c4:	901d      	str	r0, [sp, #116]	; 0x74
 800e7c6:	e7bf      	b.n	800e748 <_strtod_l+0x158>
 800e7c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7ca:	195a      	adds	r2, r3, r5
 800e7cc:	921d      	str	r2, [sp, #116]	; 0x74
 800e7ce:	5d5b      	ldrb	r3, [r3, r5]
 800e7d0:	2f00      	cmp	r7, #0
 800e7d2:	d037      	beq.n	800e844 <_strtod_l+0x254>
 800e7d4:	9007      	str	r0, [sp, #28]
 800e7d6:	463d      	mov	r5, r7
 800e7d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800e7dc:	2a09      	cmp	r2, #9
 800e7de:	d912      	bls.n	800e806 <_strtod_l+0x216>
 800e7e0:	2201      	movs	r2, #1
 800e7e2:	e7c2      	b.n	800e76a <_strtod_l+0x17a>
 800e7e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7e6:	1c5a      	adds	r2, r3, #1
 800e7e8:	921d      	str	r2, [sp, #116]	; 0x74
 800e7ea:	785b      	ldrb	r3, [r3, #1]
 800e7ec:	3001      	adds	r0, #1
 800e7ee:	2b30      	cmp	r3, #48	; 0x30
 800e7f0:	d0f8      	beq.n	800e7e4 <_strtod_l+0x1f4>
 800e7f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e7f6:	2a08      	cmp	r2, #8
 800e7f8:	f200 84db 	bhi.w	800f1b2 <_strtod_l+0xbc2>
 800e7fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e7fe:	9007      	str	r0, [sp, #28]
 800e800:	2000      	movs	r0, #0
 800e802:	920a      	str	r2, [sp, #40]	; 0x28
 800e804:	4605      	mov	r5, r0
 800e806:	3b30      	subs	r3, #48	; 0x30
 800e808:	f100 0201 	add.w	r2, r0, #1
 800e80c:	d014      	beq.n	800e838 <_strtod_l+0x248>
 800e80e:	9907      	ldr	r1, [sp, #28]
 800e810:	4411      	add	r1, r2
 800e812:	9107      	str	r1, [sp, #28]
 800e814:	462a      	mov	r2, r5
 800e816:	eb00 0e05 	add.w	lr, r0, r5
 800e81a:	210a      	movs	r1, #10
 800e81c:	4572      	cmp	r2, lr
 800e81e:	d113      	bne.n	800e848 <_strtod_l+0x258>
 800e820:	182a      	adds	r2, r5, r0
 800e822:	2a08      	cmp	r2, #8
 800e824:	f105 0501 	add.w	r5, r5, #1
 800e828:	4405      	add	r5, r0
 800e82a:	dc1c      	bgt.n	800e866 <_strtod_l+0x276>
 800e82c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e82e:	220a      	movs	r2, #10
 800e830:	fb02 3301 	mla	r3, r2, r1, r3
 800e834:	9309      	str	r3, [sp, #36]	; 0x24
 800e836:	2200      	movs	r2, #0
 800e838:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e83a:	1c59      	adds	r1, r3, #1
 800e83c:	911d      	str	r1, [sp, #116]	; 0x74
 800e83e:	785b      	ldrb	r3, [r3, #1]
 800e840:	4610      	mov	r0, r2
 800e842:	e7c9      	b.n	800e7d8 <_strtod_l+0x1e8>
 800e844:	4638      	mov	r0, r7
 800e846:	e7d2      	b.n	800e7ee <_strtod_l+0x1fe>
 800e848:	2a08      	cmp	r2, #8
 800e84a:	dc04      	bgt.n	800e856 <_strtod_l+0x266>
 800e84c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e84e:	434e      	muls	r6, r1
 800e850:	9609      	str	r6, [sp, #36]	; 0x24
 800e852:	3201      	adds	r2, #1
 800e854:	e7e2      	b.n	800e81c <_strtod_l+0x22c>
 800e856:	f102 0c01 	add.w	ip, r2, #1
 800e85a:	f1bc 0f10 	cmp.w	ip, #16
 800e85e:	bfd8      	it	le
 800e860:	fb01 f909 	mulle.w	r9, r1, r9
 800e864:	e7f5      	b.n	800e852 <_strtod_l+0x262>
 800e866:	2d10      	cmp	r5, #16
 800e868:	bfdc      	itt	le
 800e86a:	220a      	movle	r2, #10
 800e86c:	fb02 3909 	mlale	r9, r2, r9, r3
 800e870:	e7e1      	b.n	800e836 <_strtod_l+0x246>
 800e872:	2300      	movs	r3, #0
 800e874:	9307      	str	r3, [sp, #28]
 800e876:	2201      	movs	r2, #1
 800e878:	e77c      	b.n	800e774 <_strtod_l+0x184>
 800e87a:	f04f 0c00 	mov.w	ip, #0
 800e87e:	f108 0302 	add.w	r3, r8, #2
 800e882:	931d      	str	r3, [sp, #116]	; 0x74
 800e884:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e888:	e785      	b.n	800e796 <_strtod_l+0x1a6>
 800e88a:	f04f 0c01 	mov.w	ip, #1
 800e88e:	e7f6      	b.n	800e87e <_strtod_l+0x28e>
 800e890:	080136ec 	.word	0x080136ec
 800e894:	08013434 	.word	0x08013434
 800e898:	7ff00000 	.word	0x7ff00000
 800e89c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e89e:	1c59      	adds	r1, r3, #1
 800e8a0:	911d      	str	r1, [sp, #116]	; 0x74
 800e8a2:	785b      	ldrb	r3, [r3, #1]
 800e8a4:	2b30      	cmp	r3, #48	; 0x30
 800e8a6:	d0f9      	beq.n	800e89c <_strtod_l+0x2ac>
 800e8a8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800e8ac:	2908      	cmp	r1, #8
 800e8ae:	f63f af79 	bhi.w	800e7a4 <_strtod_l+0x1b4>
 800e8b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e8b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e8b8:	9308      	str	r3, [sp, #32]
 800e8ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e8bc:	1c59      	adds	r1, r3, #1
 800e8be:	911d      	str	r1, [sp, #116]	; 0x74
 800e8c0:	785b      	ldrb	r3, [r3, #1]
 800e8c2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800e8c6:	2e09      	cmp	r6, #9
 800e8c8:	d937      	bls.n	800e93a <_strtod_l+0x34a>
 800e8ca:	9e08      	ldr	r6, [sp, #32]
 800e8cc:	1b89      	subs	r1, r1, r6
 800e8ce:	2908      	cmp	r1, #8
 800e8d0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e8d4:	dc02      	bgt.n	800e8dc <_strtod_l+0x2ec>
 800e8d6:	4576      	cmp	r6, lr
 800e8d8:	bfa8      	it	ge
 800e8da:	4676      	movge	r6, lr
 800e8dc:	f1bc 0f00 	cmp.w	ip, #0
 800e8e0:	d000      	beq.n	800e8e4 <_strtod_l+0x2f4>
 800e8e2:	4276      	negs	r6, r6
 800e8e4:	2d00      	cmp	r5, #0
 800e8e6:	d14f      	bne.n	800e988 <_strtod_l+0x398>
 800e8e8:	9904      	ldr	r1, [sp, #16]
 800e8ea:	4301      	orrs	r1, r0
 800e8ec:	f47f aec2 	bne.w	800e674 <_strtod_l+0x84>
 800e8f0:	2a00      	cmp	r2, #0
 800e8f2:	f47f aedb 	bne.w	800e6ac <_strtod_l+0xbc>
 800e8f6:	2b69      	cmp	r3, #105	; 0x69
 800e8f8:	d027      	beq.n	800e94a <_strtod_l+0x35a>
 800e8fa:	dc24      	bgt.n	800e946 <_strtod_l+0x356>
 800e8fc:	2b49      	cmp	r3, #73	; 0x49
 800e8fe:	d024      	beq.n	800e94a <_strtod_l+0x35a>
 800e900:	2b4e      	cmp	r3, #78	; 0x4e
 800e902:	f47f aed3 	bne.w	800e6ac <_strtod_l+0xbc>
 800e906:	499e      	ldr	r1, [pc, #632]	; (800eb80 <_strtod_l+0x590>)
 800e908:	a81d      	add	r0, sp, #116	; 0x74
 800e90a:	f002 f8c3 	bl	8010a94 <__match>
 800e90e:	2800      	cmp	r0, #0
 800e910:	f43f aecc 	beq.w	800e6ac <_strtod_l+0xbc>
 800e914:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	2b28      	cmp	r3, #40	; 0x28
 800e91a:	d12d      	bne.n	800e978 <_strtod_l+0x388>
 800e91c:	4999      	ldr	r1, [pc, #612]	; (800eb84 <_strtod_l+0x594>)
 800e91e:	aa20      	add	r2, sp, #128	; 0x80
 800e920:	a81d      	add	r0, sp, #116	; 0x74
 800e922:	f002 f8cb 	bl	8010abc <__hexnan>
 800e926:	2805      	cmp	r0, #5
 800e928:	d126      	bne.n	800e978 <_strtod_l+0x388>
 800e92a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e92c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800e930:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e934:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e938:	e69c      	b.n	800e674 <_strtod_l+0x84>
 800e93a:	210a      	movs	r1, #10
 800e93c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e940:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e944:	e7b9      	b.n	800e8ba <_strtod_l+0x2ca>
 800e946:	2b6e      	cmp	r3, #110	; 0x6e
 800e948:	e7db      	b.n	800e902 <_strtod_l+0x312>
 800e94a:	498f      	ldr	r1, [pc, #572]	; (800eb88 <_strtod_l+0x598>)
 800e94c:	a81d      	add	r0, sp, #116	; 0x74
 800e94e:	f002 f8a1 	bl	8010a94 <__match>
 800e952:	2800      	cmp	r0, #0
 800e954:	f43f aeaa 	beq.w	800e6ac <_strtod_l+0xbc>
 800e958:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e95a:	498c      	ldr	r1, [pc, #560]	; (800eb8c <_strtod_l+0x59c>)
 800e95c:	3b01      	subs	r3, #1
 800e95e:	a81d      	add	r0, sp, #116	; 0x74
 800e960:	931d      	str	r3, [sp, #116]	; 0x74
 800e962:	f002 f897 	bl	8010a94 <__match>
 800e966:	b910      	cbnz	r0, 800e96e <_strtod_l+0x37e>
 800e968:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e96a:	3301      	adds	r3, #1
 800e96c:	931d      	str	r3, [sp, #116]	; 0x74
 800e96e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800eb9c <_strtod_l+0x5ac>
 800e972:	f04f 0a00 	mov.w	sl, #0
 800e976:	e67d      	b.n	800e674 <_strtod_l+0x84>
 800e978:	4885      	ldr	r0, [pc, #532]	; (800eb90 <_strtod_l+0x5a0>)
 800e97a:	f003 f891 	bl	8011aa0 <nan>
 800e97e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e982:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e986:	e675      	b.n	800e674 <_strtod_l+0x84>
 800e988:	9b07      	ldr	r3, [sp, #28]
 800e98a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e98c:	1af3      	subs	r3, r6, r3
 800e98e:	2f00      	cmp	r7, #0
 800e990:	bf08      	it	eq
 800e992:	462f      	moveq	r7, r5
 800e994:	2d10      	cmp	r5, #16
 800e996:	9308      	str	r3, [sp, #32]
 800e998:	46a8      	mov	r8, r5
 800e99a:	bfa8      	it	ge
 800e99c:	f04f 0810 	movge.w	r8, #16
 800e9a0:	f7f1 fdd8 	bl	8000554 <__aeabi_ui2d>
 800e9a4:	2d09      	cmp	r5, #9
 800e9a6:	4682      	mov	sl, r0
 800e9a8:	468b      	mov	fp, r1
 800e9aa:	dd13      	ble.n	800e9d4 <_strtod_l+0x3e4>
 800e9ac:	4b79      	ldr	r3, [pc, #484]	; (800eb94 <_strtod_l+0x5a4>)
 800e9ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e9b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e9b6:	f7f1 fe47 	bl	8000648 <__aeabi_dmul>
 800e9ba:	4682      	mov	sl, r0
 800e9bc:	4648      	mov	r0, r9
 800e9be:	468b      	mov	fp, r1
 800e9c0:	f7f1 fdc8 	bl	8000554 <__aeabi_ui2d>
 800e9c4:	4602      	mov	r2, r0
 800e9c6:	460b      	mov	r3, r1
 800e9c8:	4650      	mov	r0, sl
 800e9ca:	4659      	mov	r1, fp
 800e9cc:	f7f1 fc86 	bl	80002dc <__adddf3>
 800e9d0:	4682      	mov	sl, r0
 800e9d2:	468b      	mov	fp, r1
 800e9d4:	2d0f      	cmp	r5, #15
 800e9d6:	dc38      	bgt.n	800ea4a <_strtod_l+0x45a>
 800e9d8:	9b08      	ldr	r3, [sp, #32]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	f43f ae4a 	beq.w	800e674 <_strtod_l+0x84>
 800e9e0:	dd24      	ble.n	800ea2c <_strtod_l+0x43c>
 800e9e2:	2b16      	cmp	r3, #22
 800e9e4:	dc0b      	bgt.n	800e9fe <_strtod_l+0x40e>
 800e9e6:	4d6b      	ldr	r5, [pc, #428]	; (800eb94 <_strtod_l+0x5a4>)
 800e9e8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e9ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e9f0:	4652      	mov	r2, sl
 800e9f2:	465b      	mov	r3, fp
 800e9f4:	f7f1 fe28 	bl	8000648 <__aeabi_dmul>
 800e9f8:	4682      	mov	sl, r0
 800e9fa:	468b      	mov	fp, r1
 800e9fc:	e63a      	b.n	800e674 <_strtod_l+0x84>
 800e9fe:	9a08      	ldr	r2, [sp, #32]
 800ea00:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ea04:	4293      	cmp	r3, r2
 800ea06:	db20      	blt.n	800ea4a <_strtod_l+0x45a>
 800ea08:	4c62      	ldr	r4, [pc, #392]	; (800eb94 <_strtod_l+0x5a4>)
 800ea0a:	f1c5 050f 	rsb	r5, r5, #15
 800ea0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ea12:	4652      	mov	r2, sl
 800ea14:	465b      	mov	r3, fp
 800ea16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea1a:	f7f1 fe15 	bl	8000648 <__aeabi_dmul>
 800ea1e:	9b08      	ldr	r3, [sp, #32]
 800ea20:	1b5d      	subs	r5, r3, r5
 800ea22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ea26:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ea2a:	e7e3      	b.n	800e9f4 <_strtod_l+0x404>
 800ea2c:	9b08      	ldr	r3, [sp, #32]
 800ea2e:	3316      	adds	r3, #22
 800ea30:	db0b      	blt.n	800ea4a <_strtod_l+0x45a>
 800ea32:	9b07      	ldr	r3, [sp, #28]
 800ea34:	4a57      	ldr	r2, [pc, #348]	; (800eb94 <_strtod_l+0x5a4>)
 800ea36:	1b9e      	subs	r6, r3, r6
 800ea38:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ea3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ea40:	4650      	mov	r0, sl
 800ea42:	4659      	mov	r1, fp
 800ea44:	f7f1 ff2a 	bl	800089c <__aeabi_ddiv>
 800ea48:	e7d6      	b.n	800e9f8 <_strtod_l+0x408>
 800ea4a:	9b08      	ldr	r3, [sp, #32]
 800ea4c:	eba5 0808 	sub.w	r8, r5, r8
 800ea50:	4498      	add	r8, r3
 800ea52:	f1b8 0f00 	cmp.w	r8, #0
 800ea56:	dd71      	ble.n	800eb3c <_strtod_l+0x54c>
 800ea58:	f018 030f 	ands.w	r3, r8, #15
 800ea5c:	d00a      	beq.n	800ea74 <_strtod_l+0x484>
 800ea5e:	494d      	ldr	r1, [pc, #308]	; (800eb94 <_strtod_l+0x5a4>)
 800ea60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ea64:	4652      	mov	r2, sl
 800ea66:	465b      	mov	r3, fp
 800ea68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea6c:	f7f1 fdec 	bl	8000648 <__aeabi_dmul>
 800ea70:	4682      	mov	sl, r0
 800ea72:	468b      	mov	fp, r1
 800ea74:	f038 080f 	bics.w	r8, r8, #15
 800ea78:	d04d      	beq.n	800eb16 <_strtod_l+0x526>
 800ea7a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ea7e:	dd22      	ble.n	800eac6 <_strtod_l+0x4d6>
 800ea80:	2500      	movs	r5, #0
 800ea82:	462e      	mov	r6, r5
 800ea84:	9509      	str	r5, [sp, #36]	; 0x24
 800ea86:	9507      	str	r5, [sp, #28]
 800ea88:	2322      	movs	r3, #34	; 0x22
 800ea8a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800eb9c <_strtod_l+0x5ac>
 800ea8e:	6023      	str	r3, [r4, #0]
 800ea90:	f04f 0a00 	mov.w	sl, #0
 800ea94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	f43f adec 	beq.w	800e674 <_strtod_l+0x84>
 800ea9c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	f002 f96e 	bl	8010d80 <_Bfree>
 800eaa4:	9907      	ldr	r1, [sp, #28]
 800eaa6:	4620      	mov	r0, r4
 800eaa8:	f002 f96a 	bl	8010d80 <_Bfree>
 800eaac:	4631      	mov	r1, r6
 800eaae:	4620      	mov	r0, r4
 800eab0:	f002 f966 	bl	8010d80 <_Bfree>
 800eab4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eab6:	4620      	mov	r0, r4
 800eab8:	f002 f962 	bl	8010d80 <_Bfree>
 800eabc:	4629      	mov	r1, r5
 800eabe:	4620      	mov	r0, r4
 800eac0:	f002 f95e 	bl	8010d80 <_Bfree>
 800eac4:	e5d6      	b.n	800e674 <_strtod_l+0x84>
 800eac6:	2300      	movs	r3, #0
 800eac8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800eacc:	4650      	mov	r0, sl
 800eace:	4659      	mov	r1, fp
 800ead0:	4699      	mov	r9, r3
 800ead2:	f1b8 0f01 	cmp.w	r8, #1
 800ead6:	dc21      	bgt.n	800eb1c <_strtod_l+0x52c>
 800ead8:	b10b      	cbz	r3, 800eade <_strtod_l+0x4ee>
 800eada:	4682      	mov	sl, r0
 800eadc:	468b      	mov	fp, r1
 800eade:	4b2e      	ldr	r3, [pc, #184]	; (800eb98 <_strtod_l+0x5a8>)
 800eae0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800eae4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800eae8:	4652      	mov	r2, sl
 800eaea:	465b      	mov	r3, fp
 800eaec:	e9d9 0100 	ldrd	r0, r1, [r9]
 800eaf0:	f7f1 fdaa 	bl	8000648 <__aeabi_dmul>
 800eaf4:	4b29      	ldr	r3, [pc, #164]	; (800eb9c <_strtod_l+0x5ac>)
 800eaf6:	460a      	mov	r2, r1
 800eaf8:	400b      	ands	r3, r1
 800eafa:	4929      	ldr	r1, [pc, #164]	; (800eba0 <_strtod_l+0x5b0>)
 800eafc:	428b      	cmp	r3, r1
 800eafe:	4682      	mov	sl, r0
 800eb00:	d8be      	bhi.n	800ea80 <_strtod_l+0x490>
 800eb02:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800eb06:	428b      	cmp	r3, r1
 800eb08:	bf86      	itte	hi
 800eb0a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800eba4 <_strtod_l+0x5b4>
 800eb0e:	f04f 3aff 	movhi.w	sl, #4294967295
 800eb12:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800eb16:	2300      	movs	r3, #0
 800eb18:	9304      	str	r3, [sp, #16]
 800eb1a:	e081      	b.n	800ec20 <_strtod_l+0x630>
 800eb1c:	f018 0f01 	tst.w	r8, #1
 800eb20:	d007      	beq.n	800eb32 <_strtod_l+0x542>
 800eb22:	4b1d      	ldr	r3, [pc, #116]	; (800eb98 <_strtod_l+0x5a8>)
 800eb24:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800eb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb2c:	f7f1 fd8c 	bl	8000648 <__aeabi_dmul>
 800eb30:	2301      	movs	r3, #1
 800eb32:	f109 0901 	add.w	r9, r9, #1
 800eb36:	ea4f 0868 	mov.w	r8, r8, asr #1
 800eb3a:	e7ca      	b.n	800ead2 <_strtod_l+0x4e2>
 800eb3c:	d0eb      	beq.n	800eb16 <_strtod_l+0x526>
 800eb3e:	f1c8 0800 	rsb	r8, r8, #0
 800eb42:	f018 020f 	ands.w	r2, r8, #15
 800eb46:	d00a      	beq.n	800eb5e <_strtod_l+0x56e>
 800eb48:	4b12      	ldr	r3, [pc, #72]	; (800eb94 <_strtod_l+0x5a4>)
 800eb4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb4e:	4650      	mov	r0, sl
 800eb50:	4659      	mov	r1, fp
 800eb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb56:	f7f1 fea1 	bl	800089c <__aeabi_ddiv>
 800eb5a:	4682      	mov	sl, r0
 800eb5c:	468b      	mov	fp, r1
 800eb5e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800eb62:	d0d8      	beq.n	800eb16 <_strtod_l+0x526>
 800eb64:	f1b8 0f1f 	cmp.w	r8, #31
 800eb68:	dd1e      	ble.n	800eba8 <_strtod_l+0x5b8>
 800eb6a:	2500      	movs	r5, #0
 800eb6c:	462e      	mov	r6, r5
 800eb6e:	9509      	str	r5, [sp, #36]	; 0x24
 800eb70:	9507      	str	r5, [sp, #28]
 800eb72:	2322      	movs	r3, #34	; 0x22
 800eb74:	f04f 0a00 	mov.w	sl, #0
 800eb78:	f04f 0b00 	mov.w	fp, #0
 800eb7c:	6023      	str	r3, [r4, #0]
 800eb7e:	e789      	b.n	800ea94 <_strtod_l+0x4a4>
 800eb80:	0801340d 	.word	0x0801340d
 800eb84:	08013448 	.word	0x08013448
 800eb88:	08013405 	.word	0x08013405
 800eb8c:	0801358c 	.word	0x0801358c
 800eb90:	080138a8 	.word	0x080138a8
 800eb94:	08013788 	.word	0x08013788
 800eb98:	08013760 	.word	0x08013760
 800eb9c:	7ff00000 	.word	0x7ff00000
 800eba0:	7ca00000 	.word	0x7ca00000
 800eba4:	7fefffff 	.word	0x7fefffff
 800eba8:	f018 0310 	ands.w	r3, r8, #16
 800ebac:	bf18      	it	ne
 800ebae:	236a      	movne	r3, #106	; 0x6a
 800ebb0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800ef68 <_strtod_l+0x978>
 800ebb4:	9304      	str	r3, [sp, #16]
 800ebb6:	4650      	mov	r0, sl
 800ebb8:	4659      	mov	r1, fp
 800ebba:	2300      	movs	r3, #0
 800ebbc:	f018 0f01 	tst.w	r8, #1
 800ebc0:	d004      	beq.n	800ebcc <_strtod_l+0x5dc>
 800ebc2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ebc6:	f7f1 fd3f 	bl	8000648 <__aeabi_dmul>
 800ebca:	2301      	movs	r3, #1
 800ebcc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ebd0:	f109 0908 	add.w	r9, r9, #8
 800ebd4:	d1f2      	bne.n	800ebbc <_strtod_l+0x5cc>
 800ebd6:	b10b      	cbz	r3, 800ebdc <_strtod_l+0x5ec>
 800ebd8:	4682      	mov	sl, r0
 800ebda:	468b      	mov	fp, r1
 800ebdc:	9b04      	ldr	r3, [sp, #16]
 800ebde:	b1bb      	cbz	r3, 800ec10 <_strtod_l+0x620>
 800ebe0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ebe4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	4659      	mov	r1, fp
 800ebec:	dd10      	ble.n	800ec10 <_strtod_l+0x620>
 800ebee:	2b1f      	cmp	r3, #31
 800ebf0:	f340 8128 	ble.w	800ee44 <_strtod_l+0x854>
 800ebf4:	2b34      	cmp	r3, #52	; 0x34
 800ebf6:	bfde      	ittt	le
 800ebf8:	3b20      	suble	r3, #32
 800ebfa:	f04f 32ff 	movle.w	r2, #4294967295
 800ebfe:	fa02 f303 	lslle.w	r3, r2, r3
 800ec02:	f04f 0a00 	mov.w	sl, #0
 800ec06:	bfcc      	ite	gt
 800ec08:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ec0c:	ea03 0b01 	andle.w	fp, r3, r1
 800ec10:	2200      	movs	r2, #0
 800ec12:	2300      	movs	r3, #0
 800ec14:	4650      	mov	r0, sl
 800ec16:	4659      	mov	r1, fp
 800ec18:	f7f1 ff7e 	bl	8000b18 <__aeabi_dcmpeq>
 800ec1c:	2800      	cmp	r0, #0
 800ec1e:	d1a4      	bne.n	800eb6a <_strtod_l+0x57a>
 800ec20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec22:	9300      	str	r3, [sp, #0]
 800ec24:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ec26:	462b      	mov	r3, r5
 800ec28:	463a      	mov	r2, r7
 800ec2a:	4620      	mov	r0, r4
 800ec2c:	f002 f914 	bl	8010e58 <__s2b>
 800ec30:	9009      	str	r0, [sp, #36]	; 0x24
 800ec32:	2800      	cmp	r0, #0
 800ec34:	f43f af24 	beq.w	800ea80 <_strtod_l+0x490>
 800ec38:	9b07      	ldr	r3, [sp, #28]
 800ec3a:	1b9e      	subs	r6, r3, r6
 800ec3c:	9b08      	ldr	r3, [sp, #32]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	bfb4      	ite	lt
 800ec42:	4633      	movlt	r3, r6
 800ec44:	2300      	movge	r3, #0
 800ec46:	9310      	str	r3, [sp, #64]	; 0x40
 800ec48:	9b08      	ldr	r3, [sp, #32]
 800ec4a:	2500      	movs	r5, #0
 800ec4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ec50:	9318      	str	r3, [sp, #96]	; 0x60
 800ec52:	462e      	mov	r6, r5
 800ec54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec56:	4620      	mov	r0, r4
 800ec58:	6859      	ldr	r1, [r3, #4]
 800ec5a:	f002 f851 	bl	8010d00 <_Balloc>
 800ec5e:	9007      	str	r0, [sp, #28]
 800ec60:	2800      	cmp	r0, #0
 800ec62:	f43f af11 	beq.w	800ea88 <_strtod_l+0x498>
 800ec66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec68:	691a      	ldr	r2, [r3, #16]
 800ec6a:	3202      	adds	r2, #2
 800ec6c:	f103 010c 	add.w	r1, r3, #12
 800ec70:	0092      	lsls	r2, r2, #2
 800ec72:	300c      	adds	r0, #12
 800ec74:	f7fe ff78 	bl	800db68 <memcpy>
 800ec78:	ec4b ab10 	vmov	d0, sl, fp
 800ec7c:	aa20      	add	r2, sp, #128	; 0x80
 800ec7e:	a91f      	add	r1, sp, #124	; 0x7c
 800ec80:	4620      	mov	r0, r4
 800ec82:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800ec86:	f002 fc23 	bl	80114d0 <__d2b>
 800ec8a:	901e      	str	r0, [sp, #120]	; 0x78
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	f43f aefb 	beq.w	800ea88 <_strtod_l+0x498>
 800ec92:	2101      	movs	r1, #1
 800ec94:	4620      	mov	r0, r4
 800ec96:	f002 f979 	bl	8010f8c <__i2b>
 800ec9a:	4606      	mov	r6, r0
 800ec9c:	2800      	cmp	r0, #0
 800ec9e:	f43f aef3 	beq.w	800ea88 <_strtod_l+0x498>
 800eca2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800eca4:	9904      	ldr	r1, [sp, #16]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	bfab      	itete	ge
 800ecaa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800ecac:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800ecae:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800ecb0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800ecb4:	bfac      	ite	ge
 800ecb6:	eb03 0902 	addge.w	r9, r3, r2
 800ecba:	1ad7      	sublt	r7, r2, r3
 800ecbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ecbe:	eba3 0801 	sub.w	r8, r3, r1
 800ecc2:	4490      	add	r8, r2
 800ecc4:	4ba3      	ldr	r3, [pc, #652]	; (800ef54 <_strtod_l+0x964>)
 800ecc6:	f108 38ff 	add.w	r8, r8, #4294967295
 800ecca:	4598      	cmp	r8, r3
 800eccc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ecd0:	f280 80cc 	bge.w	800ee6c <_strtod_l+0x87c>
 800ecd4:	eba3 0308 	sub.w	r3, r3, r8
 800ecd8:	2b1f      	cmp	r3, #31
 800ecda:	eba2 0203 	sub.w	r2, r2, r3
 800ecde:	f04f 0101 	mov.w	r1, #1
 800ece2:	f300 80b6 	bgt.w	800ee52 <_strtod_l+0x862>
 800ece6:	fa01 f303 	lsl.w	r3, r1, r3
 800ecea:	9311      	str	r3, [sp, #68]	; 0x44
 800ecec:	2300      	movs	r3, #0
 800ecee:	930c      	str	r3, [sp, #48]	; 0x30
 800ecf0:	eb09 0802 	add.w	r8, r9, r2
 800ecf4:	9b04      	ldr	r3, [sp, #16]
 800ecf6:	45c1      	cmp	r9, r8
 800ecf8:	4417      	add	r7, r2
 800ecfa:	441f      	add	r7, r3
 800ecfc:	464b      	mov	r3, r9
 800ecfe:	bfa8      	it	ge
 800ed00:	4643      	movge	r3, r8
 800ed02:	42bb      	cmp	r3, r7
 800ed04:	bfa8      	it	ge
 800ed06:	463b      	movge	r3, r7
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	bfc2      	ittt	gt
 800ed0c:	eba8 0803 	subgt.w	r8, r8, r3
 800ed10:	1aff      	subgt	r7, r7, r3
 800ed12:	eba9 0903 	subgt.w	r9, r9, r3
 800ed16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	dd17      	ble.n	800ed4c <_strtod_l+0x75c>
 800ed1c:	4631      	mov	r1, r6
 800ed1e:	461a      	mov	r2, r3
 800ed20:	4620      	mov	r0, r4
 800ed22:	f002 f9ef 	bl	8011104 <__pow5mult>
 800ed26:	4606      	mov	r6, r0
 800ed28:	2800      	cmp	r0, #0
 800ed2a:	f43f aead 	beq.w	800ea88 <_strtod_l+0x498>
 800ed2e:	4601      	mov	r1, r0
 800ed30:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ed32:	4620      	mov	r0, r4
 800ed34:	f002 f940 	bl	8010fb8 <__multiply>
 800ed38:	900f      	str	r0, [sp, #60]	; 0x3c
 800ed3a:	2800      	cmp	r0, #0
 800ed3c:	f43f aea4 	beq.w	800ea88 <_strtod_l+0x498>
 800ed40:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ed42:	4620      	mov	r0, r4
 800ed44:	f002 f81c 	bl	8010d80 <_Bfree>
 800ed48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed4a:	931e      	str	r3, [sp, #120]	; 0x78
 800ed4c:	f1b8 0f00 	cmp.w	r8, #0
 800ed50:	f300 8091 	bgt.w	800ee76 <_strtod_l+0x886>
 800ed54:	9b08      	ldr	r3, [sp, #32]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	dd08      	ble.n	800ed6c <_strtod_l+0x77c>
 800ed5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ed5c:	9907      	ldr	r1, [sp, #28]
 800ed5e:	4620      	mov	r0, r4
 800ed60:	f002 f9d0 	bl	8011104 <__pow5mult>
 800ed64:	9007      	str	r0, [sp, #28]
 800ed66:	2800      	cmp	r0, #0
 800ed68:	f43f ae8e 	beq.w	800ea88 <_strtod_l+0x498>
 800ed6c:	2f00      	cmp	r7, #0
 800ed6e:	dd08      	ble.n	800ed82 <_strtod_l+0x792>
 800ed70:	9907      	ldr	r1, [sp, #28]
 800ed72:	463a      	mov	r2, r7
 800ed74:	4620      	mov	r0, r4
 800ed76:	f002 fa1f 	bl	80111b8 <__lshift>
 800ed7a:	9007      	str	r0, [sp, #28]
 800ed7c:	2800      	cmp	r0, #0
 800ed7e:	f43f ae83 	beq.w	800ea88 <_strtod_l+0x498>
 800ed82:	f1b9 0f00 	cmp.w	r9, #0
 800ed86:	dd08      	ble.n	800ed9a <_strtod_l+0x7aa>
 800ed88:	4631      	mov	r1, r6
 800ed8a:	464a      	mov	r2, r9
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	f002 fa13 	bl	80111b8 <__lshift>
 800ed92:	4606      	mov	r6, r0
 800ed94:	2800      	cmp	r0, #0
 800ed96:	f43f ae77 	beq.w	800ea88 <_strtod_l+0x498>
 800ed9a:	9a07      	ldr	r2, [sp, #28]
 800ed9c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ed9e:	4620      	mov	r0, r4
 800eda0:	f002 fa92 	bl	80112c8 <__mdiff>
 800eda4:	4605      	mov	r5, r0
 800eda6:	2800      	cmp	r0, #0
 800eda8:	f43f ae6e 	beq.w	800ea88 <_strtod_l+0x498>
 800edac:	68c3      	ldr	r3, [r0, #12]
 800edae:	930f      	str	r3, [sp, #60]	; 0x3c
 800edb0:	2300      	movs	r3, #0
 800edb2:	60c3      	str	r3, [r0, #12]
 800edb4:	4631      	mov	r1, r6
 800edb6:	f002 fa6b 	bl	8011290 <__mcmp>
 800edba:	2800      	cmp	r0, #0
 800edbc:	da65      	bge.n	800ee8a <_strtod_l+0x89a>
 800edbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800edc0:	ea53 030a 	orrs.w	r3, r3, sl
 800edc4:	f040 8087 	bne.w	800eed6 <_strtod_l+0x8e6>
 800edc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800edcc:	2b00      	cmp	r3, #0
 800edce:	f040 8082 	bne.w	800eed6 <_strtod_l+0x8e6>
 800edd2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800edd6:	0d1b      	lsrs	r3, r3, #20
 800edd8:	051b      	lsls	r3, r3, #20
 800edda:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800edde:	d97a      	bls.n	800eed6 <_strtod_l+0x8e6>
 800ede0:	696b      	ldr	r3, [r5, #20]
 800ede2:	b913      	cbnz	r3, 800edea <_strtod_l+0x7fa>
 800ede4:	692b      	ldr	r3, [r5, #16]
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	dd75      	ble.n	800eed6 <_strtod_l+0x8e6>
 800edea:	4629      	mov	r1, r5
 800edec:	2201      	movs	r2, #1
 800edee:	4620      	mov	r0, r4
 800edf0:	f002 f9e2 	bl	80111b8 <__lshift>
 800edf4:	4631      	mov	r1, r6
 800edf6:	4605      	mov	r5, r0
 800edf8:	f002 fa4a 	bl	8011290 <__mcmp>
 800edfc:	2800      	cmp	r0, #0
 800edfe:	dd6a      	ble.n	800eed6 <_strtod_l+0x8e6>
 800ee00:	9904      	ldr	r1, [sp, #16]
 800ee02:	4a55      	ldr	r2, [pc, #340]	; (800ef58 <_strtod_l+0x968>)
 800ee04:	465b      	mov	r3, fp
 800ee06:	2900      	cmp	r1, #0
 800ee08:	f000 8085 	beq.w	800ef16 <_strtod_l+0x926>
 800ee0c:	ea02 010b 	and.w	r1, r2, fp
 800ee10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ee14:	dc7f      	bgt.n	800ef16 <_strtod_l+0x926>
 800ee16:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ee1a:	f77f aeaa 	ble.w	800eb72 <_strtod_l+0x582>
 800ee1e:	4a4f      	ldr	r2, [pc, #316]	; (800ef5c <_strtod_l+0x96c>)
 800ee20:	2300      	movs	r3, #0
 800ee22:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ee26:	4650      	mov	r0, sl
 800ee28:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ee2c:	4659      	mov	r1, fp
 800ee2e:	f7f1 fc0b 	bl	8000648 <__aeabi_dmul>
 800ee32:	460b      	mov	r3, r1
 800ee34:	4303      	orrs	r3, r0
 800ee36:	bf08      	it	eq
 800ee38:	2322      	moveq	r3, #34	; 0x22
 800ee3a:	4682      	mov	sl, r0
 800ee3c:	468b      	mov	fp, r1
 800ee3e:	bf08      	it	eq
 800ee40:	6023      	streq	r3, [r4, #0]
 800ee42:	e62b      	b.n	800ea9c <_strtod_l+0x4ac>
 800ee44:	f04f 32ff 	mov.w	r2, #4294967295
 800ee48:	fa02 f303 	lsl.w	r3, r2, r3
 800ee4c:	ea03 0a0a 	and.w	sl, r3, sl
 800ee50:	e6de      	b.n	800ec10 <_strtod_l+0x620>
 800ee52:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ee56:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ee5a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ee5e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ee62:	fa01 f308 	lsl.w	r3, r1, r8
 800ee66:	930c      	str	r3, [sp, #48]	; 0x30
 800ee68:	9111      	str	r1, [sp, #68]	; 0x44
 800ee6a:	e741      	b.n	800ecf0 <_strtod_l+0x700>
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	930c      	str	r3, [sp, #48]	; 0x30
 800ee70:	2301      	movs	r3, #1
 800ee72:	9311      	str	r3, [sp, #68]	; 0x44
 800ee74:	e73c      	b.n	800ecf0 <_strtod_l+0x700>
 800ee76:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ee78:	4642      	mov	r2, r8
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	f002 f99c 	bl	80111b8 <__lshift>
 800ee80:	901e      	str	r0, [sp, #120]	; 0x78
 800ee82:	2800      	cmp	r0, #0
 800ee84:	f47f af66 	bne.w	800ed54 <_strtod_l+0x764>
 800ee88:	e5fe      	b.n	800ea88 <_strtod_l+0x498>
 800ee8a:	465f      	mov	r7, fp
 800ee8c:	d16e      	bne.n	800ef6c <_strtod_l+0x97c>
 800ee8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ee90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee94:	b342      	cbz	r2, 800eee8 <_strtod_l+0x8f8>
 800ee96:	4a32      	ldr	r2, [pc, #200]	; (800ef60 <_strtod_l+0x970>)
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	d128      	bne.n	800eeee <_strtod_l+0x8fe>
 800ee9c:	9b04      	ldr	r3, [sp, #16]
 800ee9e:	4650      	mov	r0, sl
 800eea0:	b1eb      	cbz	r3, 800eede <_strtod_l+0x8ee>
 800eea2:	4a2d      	ldr	r2, [pc, #180]	; (800ef58 <_strtod_l+0x968>)
 800eea4:	403a      	ands	r2, r7
 800eea6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800eeaa:	f04f 31ff 	mov.w	r1, #4294967295
 800eeae:	d819      	bhi.n	800eee4 <_strtod_l+0x8f4>
 800eeb0:	0d12      	lsrs	r2, r2, #20
 800eeb2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800eeb6:	fa01 f303 	lsl.w	r3, r1, r3
 800eeba:	4298      	cmp	r0, r3
 800eebc:	d117      	bne.n	800eeee <_strtod_l+0x8fe>
 800eebe:	4b29      	ldr	r3, [pc, #164]	; (800ef64 <_strtod_l+0x974>)
 800eec0:	429f      	cmp	r7, r3
 800eec2:	d102      	bne.n	800eeca <_strtod_l+0x8da>
 800eec4:	3001      	adds	r0, #1
 800eec6:	f43f addf 	beq.w	800ea88 <_strtod_l+0x498>
 800eeca:	4b23      	ldr	r3, [pc, #140]	; (800ef58 <_strtod_l+0x968>)
 800eecc:	403b      	ands	r3, r7
 800eece:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800eed2:	f04f 0a00 	mov.w	sl, #0
 800eed6:	9b04      	ldr	r3, [sp, #16]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d1a0      	bne.n	800ee1e <_strtod_l+0x82e>
 800eedc:	e5de      	b.n	800ea9c <_strtod_l+0x4ac>
 800eede:	f04f 33ff 	mov.w	r3, #4294967295
 800eee2:	e7ea      	b.n	800eeba <_strtod_l+0x8ca>
 800eee4:	460b      	mov	r3, r1
 800eee6:	e7e8      	b.n	800eeba <_strtod_l+0x8ca>
 800eee8:	ea53 030a 	orrs.w	r3, r3, sl
 800eeec:	d088      	beq.n	800ee00 <_strtod_l+0x810>
 800eeee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eef0:	b1db      	cbz	r3, 800ef2a <_strtod_l+0x93a>
 800eef2:	423b      	tst	r3, r7
 800eef4:	d0ef      	beq.n	800eed6 <_strtod_l+0x8e6>
 800eef6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eef8:	9a04      	ldr	r2, [sp, #16]
 800eefa:	4650      	mov	r0, sl
 800eefc:	4659      	mov	r1, fp
 800eefe:	b1c3      	cbz	r3, 800ef32 <_strtod_l+0x942>
 800ef00:	f7ff fb5a 	bl	800e5b8 <sulp>
 800ef04:	4602      	mov	r2, r0
 800ef06:	460b      	mov	r3, r1
 800ef08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ef0c:	f7f1 f9e6 	bl	80002dc <__adddf3>
 800ef10:	4682      	mov	sl, r0
 800ef12:	468b      	mov	fp, r1
 800ef14:	e7df      	b.n	800eed6 <_strtod_l+0x8e6>
 800ef16:	4013      	ands	r3, r2
 800ef18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ef1c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ef20:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ef24:	f04f 3aff 	mov.w	sl, #4294967295
 800ef28:	e7d5      	b.n	800eed6 <_strtod_l+0x8e6>
 800ef2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ef2c:	ea13 0f0a 	tst.w	r3, sl
 800ef30:	e7e0      	b.n	800eef4 <_strtod_l+0x904>
 800ef32:	f7ff fb41 	bl	800e5b8 <sulp>
 800ef36:	4602      	mov	r2, r0
 800ef38:	460b      	mov	r3, r1
 800ef3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ef3e:	f7f1 f9cb 	bl	80002d8 <__aeabi_dsub>
 800ef42:	2200      	movs	r2, #0
 800ef44:	2300      	movs	r3, #0
 800ef46:	4682      	mov	sl, r0
 800ef48:	468b      	mov	fp, r1
 800ef4a:	f7f1 fde5 	bl	8000b18 <__aeabi_dcmpeq>
 800ef4e:	2800      	cmp	r0, #0
 800ef50:	d0c1      	beq.n	800eed6 <_strtod_l+0x8e6>
 800ef52:	e60e      	b.n	800eb72 <_strtod_l+0x582>
 800ef54:	fffffc02 	.word	0xfffffc02
 800ef58:	7ff00000 	.word	0x7ff00000
 800ef5c:	39500000 	.word	0x39500000
 800ef60:	000fffff 	.word	0x000fffff
 800ef64:	7fefffff 	.word	0x7fefffff
 800ef68:	08013460 	.word	0x08013460
 800ef6c:	4631      	mov	r1, r6
 800ef6e:	4628      	mov	r0, r5
 800ef70:	f002 fb0a 	bl	8011588 <__ratio>
 800ef74:	ec59 8b10 	vmov	r8, r9, d0
 800ef78:	ee10 0a10 	vmov	r0, s0
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ef82:	4649      	mov	r1, r9
 800ef84:	f7f1 fddc 	bl	8000b40 <__aeabi_dcmple>
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	d07c      	beq.n	800f086 <_strtod_l+0xa96>
 800ef8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d04c      	beq.n	800f02c <_strtod_l+0xa3c>
 800ef92:	4b95      	ldr	r3, [pc, #596]	; (800f1e8 <_strtod_l+0xbf8>)
 800ef94:	2200      	movs	r2, #0
 800ef96:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ef9a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f1e8 <_strtod_l+0xbf8>
 800ef9e:	f04f 0800 	mov.w	r8, #0
 800efa2:	4b92      	ldr	r3, [pc, #584]	; (800f1ec <_strtod_l+0xbfc>)
 800efa4:	403b      	ands	r3, r7
 800efa6:	9311      	str	r3, [sp, #68]	; 0x44
 800efa8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800efaa:	4b91      	ldr	r3, [pc, #580]	; (800f1f0 <_strtod_l+0xc00>)
 800efac:	429a      	cmp	r2, r3
 800efae:	f040 80b2 	bne.w	800f116 <_strtod_l+0xb26>
 800efb2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800efb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800efba:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800efbe:	ec4b ab10 	vmov	d0, sl, fp
 800efc2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800efc6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800efca:	f002 fa05 	bl	80113d8 <__ulp>
 800efce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800efd2:	ec53 2b10 	vmov	r2, r3, d0
 800efd6:	f7f1 fb37 	bl	8000648 <__aeabi_dmul>
 800efda:	4652      	mov	r2, sl
 800efdc:	465b      	mov	r3, fp
 800efde:	f7f1 f97d 	bl	80002dc <__adddf3>
 800efe2:	460b      	mov	r3, r1
 800efe4:	4981      	ldr	r1, [pc, #516]	; (800f1ec <_strtod_l+0xbfc>)
 800efe6:	4a83      	ldr	r2, [pc, #524]	; (800f1f4 <_strtod_l+0xc04>)
 800efe8:	4019      	ands	r1, r3
 800efea:	4291      	cmp	r1, r2
 800efec:	4682      	mov	sl, r0
 800efee:	d95e      	bls.n	800f0ae <_strtod_l+0xabe>
 800eff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eff2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800eff6:	4293      	cmp	r3, r2
 800eff8:	d103      	bne.n	800f002 <_strtod_l+0xa12>
 800effa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800effc:	3301      	adds	r3, #1
 800effe:	f43f ad43 	beq.w	800ea88 <_strtod_l+0x498>
 800f002:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800f200 <_strtod_l+0xc10>
 800f006:	f04f 3aff 	mov.w	sl, #4294967295
 800f00a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f00c:	4620      	mov	r0, r4
 800f00e:	f001 feb7 	bl	8010d80 <_Bfree>
 800f012:	9907      	ldr	r1, [sp, #28]
 800f014:	4620      	mov	r0, r4
 800f016:	f001 feb3 	bl	8010d80 <_Bfree>
 800f01a:	4631      	mov	r1, r6
 800f01c:	4620      	mov	r0, r4
 800f01e:	f001 feaf 	bl	8010d80 <_Bfree>
 800f022:	4629      	mov	r1, r5
 800f024:	4620      	mov	r0, r4
 800f026:	f001 feab 	bl	8010d80 <_Bfree>
 800f02a:	e613      	b.n	800ec54 <_strtod_l+0x664>
 800f02c:	f1ba 0f00 	cmp.w	sl, #0
 800f030:	d11b      	bne.n	800f06a <_strtod_l+0xa7a>
 800f032:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f036:	b9f3      	cbnz	r3, 800f076 <_strtod_l+0xa86>
 800f038:	4b6b      	ldr	r3, [pc, #428]	; (800f1e8 <_strtod_l+0xbf8>)
 800f03a:	2200      	movs	r2, #0
 800f03c:	4640      	mov	r0, r8
 800f03e:	4649      	mov	r1, r9
 800f040:	f7f1 fd74 	bl	8000b2c <__aeabi_dcmplt>
 800f044:	b9d0      	cbnz	r0, 800f07c <_strtod_l+0xa8c>
 800f046:	4640      	mov	r0, r8
 800f048:	4649      	mov	r1, r9
 800f04a:	4b6b      	ldr	r3, [pc, #428]	; (800f1f8 <_strtod_l+0xc08>)
 800f04c:	2200      	movs	r2, #0
 800f04e:	f7f1 fafb 	bl	8000648 <__aeabi_dmul>
 800f052:	4680      	mov	r8, r0
 800f054:	4689      	mov	r9, r1
 800f056:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f05a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800f05e:	931b      	str	r3, [sp, #108]	; 0x6c
 800f060:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800f064:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f068:	e79b      	b.n	800efa2 <_strtod_l+0x9b2>
 800f06a:	f1ba 0f01 	cmp.w	sl, #1
 800f06e:	d102      	bne.n	800f076 <_strtod_l+0xa86>
 800f070:	2f00      	cmp	r7, #0
 800f072:	f43f ad7e 	beq.w	800eb72 <_strtod_l+0x582>
 800f076:	4b61      	ldr	r3, [pc, #388]	; (800f1fc <_strtod_l+0xc0c>)
 800f078:	2200      	movs	r2, #0
 800f07a:	e78c      	b.n	800ef96 <_strtod_l+0x9a6>
 800f07c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f1f8 <_strtod_l+0xc08>
 800f080:	f04f 0800 	mov.w	r8, #0
 800f084:	e7e7      	b.n	800f056 <_strtod_l+0xa66>
 800f086:	4b5c      	ldr	r3, [pc, #368]	; (800f1f8 <_strtod_l+0xc08>)
 800f088:	4640      	mov	r0, r8
 800f08a:	4649      	mov	r1, r9
 800f08c:	2200      	movs	r2, #0
 800f08e:	f7f1 fadb 	bl	8000648 <__aeabi_dmul>
 800f092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f094:	4680      	mov	r8, r0
 800f096:	4689      	mov	r9, r1
 800f098:	b933      	cbnz	r3, 800f0a8 <_strtod_l+0xab8>
 800f09a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f09e:	9012      	str	r0, [sp, #72]	; 0x48
 800f0a0:	9313      	str	r3, [sp, #76]	; 0x4c
 800f0a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f0a6:	e7dd      	b.n	800f064 <_strtod_l+0xa74>
 800f0a8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800f0ac:	e7f9      	b.n	800f0a2 <_strtod_l+0xab2>
 800f0ae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f0b2:	9b04      	ldr	r3, [sp, #16]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d1a8      	bne.n	800f00a <_strtod_l+0xa1a>
 800f0b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f0bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f0be:	0d1b      	lsrs	r3, r3, #20
 800f0c0:	051b      	lsls	r3, r3, #20
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d1a1      	bne.n	800f00a <_strtod_l+0xa1a>
 800f0c6:	4640      	mov	r0, r8
 800f0c8:	4649      	mov	r1, r9
 800f0ca:	f7f1 fe1d 	bl	8000d08 <__aeabi_d2lz>
 800f0ce:	f7f1 fa8d 	bl	80005ec <__aeabi_l2d>
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	460b      	mov	r3, r1
 800f0d6:	4640      	mov	r0, r8
 800f0d8:	4649      	mov	r1, r9
 800f0da:	f7f1 f8fd 	bl	80002d8 <__aeabi_dsub>
 800f0de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f0e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f0e4:	ea43 030a 	orr.w	r3, r3, sl
 800f0e8:	4313      	orrs	r3, r2
 800f0ea:	4680      	mov	r8, r0
 800f0ec:	4689      	mov	r9, r1
 800f0ee:	d053      	beq.n	800f198 <_strtod_l+0xba8>
 800f0f0:	a335      	add	r3, pc, #212	; (adr r3, 800f1c8 <_strtod_l+0xbd8>)
 800f0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f6:	f7f1 fd19 	bl	8000b2c <__aeabi_dcmplt>
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	f47f acce 	bne.w	800ea9c <_strtod_l+0x4ac>
 800f100:	a333      	add	r3, pc, #204	; (adr r3, 800f1d0 <_strtod_l+0xbe0>)
 800f102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f106:	4640      	mov	r0, r8
 800f108:	4649      	mov	r1, r9
 800f10a:	f7f1 fd2d 	bl	8000b68 <__aeabi_dcmpgt>
 800f10e:	2800      	cmp	r0, #0
 800f110:	f43f af7b 	beq.w	800f00a <_strtod_l+0xa1a>
 800f114:	e4c2      	b.n	800ea9c <_strtod_l+0x4ac>
 800f116:	9b04      	ldr	r3, [sp, #16]
 800f118:	b333      	cbz	r3, 800f168 <_strtod_l+0xb78>
 800f11a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f11c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f120:	d822      	bhi.n	800f168 <_strtod_l+0xb78>
 800f122:	a32d      	add	r3, pc, #180	; (adr r3, 800f1d8 <_strtod_l+0xbe8>)
 800f124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f128:	4640      	mov	r0, r8
 800f12a:	4649      	mov	r1, r9
 800f12c:	f7f1 fd08 	bl	8000b40 <__aeabi_dcmple>
 800f130:	b1a0      	cbz	r0, 800f15c <_strtod_l+0xb6c>
 800f132:	4649      	mov	r1, r9
 800f134:	4640      	mov	r0, r8
 800f136:	f7f1 fd5f 	bl	8000bf8 <__aeabi_d2uiz>
 800f13a:	2801      	cmp	r0, #1
 800f13c:	bf38      	it	cc
 800f13e:	2001      	movcc	r0, #1
 800f140:	f7f1 fa08 	bl	8000554 <__aeabi_ui2d>
 800f144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f146:	4680      	mov	r8, r0
 800f148:	4689      	mov	r9, r1
 800f14a:	bb13      	cbnz	r3, 800f192 <_strtod_l+0xba2>
 800f14c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f150:	9014      	str	r0, [sp, #80]	; 0x50
 800f152:	9315      	str	r3, [sp, #84]	; 0x54
 800f154:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f158:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f15c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f15e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f160:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f164:	1a9b      	subs	r3, r3, r2
 800f166:	930d      	str	r3, [sp, #52]	; 0x34
 800f168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f16c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f170:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f174:	f002 f930 	bl	80113d8 <__ulp>
 800f178:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f17c:	ec53 2b10 	vmov	r2, r3, d0
 800f180:	f7f1 fa62 	bl	8000648 <__aeabi_dmul>
 800f184:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f188:	f7f1 f8a8 	bl	80002dc <__adddf3>
 800f18c:	4682      	mov	sl, r0
 800f18e:	468b      	mov	fp, r1
 800f190:	e78f      	b.n	800f0b2 <_strtod_l+0xac2>
 800f192:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800f196:	e7dd      	b.n	800f154 <_strtod_l+0xb64>
 800f198:	a311      	add	r3, pc, #68	; (adr r3, 800f1e0 <_strtod_l+0xbf0>)
 800f19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19e:	f7f1 fcc5 	bl	8000b2c <__aeabi_dcmplt>
 800f1a2:	e7b4      	b.n	800f10e <_strtod_l+0xb1e>
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	930e      	str	r3, [sp, #56]	; 0x38
 800f1a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f1aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f1ac:	6013      	str	r3, [r2, #0]
 800f1ae:	f7ff ba65 	b.w	800e67c <_strtod_l+0x8c>
 800f1b2:	2b65      	cmp	r3, #101	; 0x65
 800f1b4:	f43f ab5d 	beq.w	800e872 <_strtod_l+0x282>
 800f1b8:	2b45      	cmp	r3, #69	; 0x45
 800f1ba:	f43f ab5a 	beq.w	800e872 <_strtod_l+0x282>
 800f1be:	2201      	movs	r2, #1
 800f1c0:	f7ff bb92 	b.w	800e8e8 <_strtod_l+0x2f8>
 800f1c4:	f3af 8000 	nop.w
 800f1c8:	94a03595 	.word	0x94a03595
 800f1cc:	3fdfffff 	.word	0x3fdfffff
 800f1d0:	35afe535 	.word	0x35afe535
 800f1d4:	3fe00000 	.word	0x3fe00000
 800f1d8:	ffc00000 	.word	0xffc00000
 800f1dc:	41dfffff 	.word	0x41dfffff
 800f1e0:	94a03595 	.word	0x94a03595
 800f1e4:	3fcfffff 	.word	0x3fcfffff
 800f1e8:	3ff00000 	.word	0x3ff00000
 800f1ec:	7ff00000 	.word	0x7ff00000
 800f1f0:	7fe00000 	.word	0x7fe00000
 800f1f4:	7c9fffff 	.word	0x7c9fffff
 800f1f8:	3fe00000 	.word	0x3fe00000
 800f1fc:	bff00000 	.word	0xbff00000
 800f200:	7fefffff 	.word	0x7fefffff

0800f204 <strtod>:
 800f204:	460a      	mov	r2, r1
 800f206:	4601      	mov	r1, r0
 800f208:	4802      	ldr	r0, [pc, #8]	; (800f214 <strtod+0x10>)
 800f20a:	4b03      	ldr	r3, [pc, #12]	; (800f218 <strtod+0x14>)
 800f20c:	6800      	ldr	r0, [r0, #0]
 800f20e:	f7ff b9ef 	b.w	800e5f0 <_strtod_l>
 800f212:	bf00      	nop
 800f214:	2000002c 	.word	0x2000002c
 800f218:	20000094 	.word	0x20000094

0800f21c <_strtol_l.isra.0>:
 800f21c:	2b01      	cmp	r3, #1
 800f21e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f222:	d001      	beq.n	800f228 <_strtol_l.isra.0+0xc>
 800f224:	2b24      	cmp	r3, #36	; 0x24
 800f226:	d906      	bls.n	800f236 <_strtol_l.isra.0+0x1a>
 800f228:	f7fe fc74 	bl	800db14 <__errno>
 800f22c:	2316      	movs	r3, #22
 800f22e:	6003      	str	r3, [r0, #0]
 800f230:	2000      	movs	r0, #0
 800f232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f236:	4f3a      	ldr	r7, [pc, #232]	; (800f320 <_strtol_l.isra.0+0x104>)
 800f238:	468e      	mov	lr, r1
 800f23a:	4676      	mov	r6, lr
 800f23c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f240:	5de5      	ldrb	r5, [r4, r7]
 800f242:	f015 0508 	ands.w	r5, r5, #8
 800f246:	d1f8      	bne.n	800f23a <_strtol_l.isra.0+0x1e>
 800f248:	2c2d      	cmp	r4, #45	; 0x2d
 800f24a:	d134      	bne.n	800f2b6 <_strtol_l.isra.0+0x9a>
 800f24c:	f89e 4000 	ldrb.w	r4, [lr]
 800f250:	f04f 0801 	mov.w	r8, #1
 800f254:	f106 0e02 	add.w	lr, r6, #2
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d05c      	beq.n	800f316 <_strtol_l.isra.0+0xfa>
 800f25c:	2b10      	cmp	r3, #16
 800f25e:	d10c      	bne.n	800f27a <_strtol_l.isra.0+0x5e>
 800f260:	2c30      	cmp	r4, #48	; 0x30
 800f262:	d10a      	bne.n	800f27a <_strtol_l.isra.0+0x5e>
 800f264:	f89e 4000 	ldrb.w	r4, [lr]
 800f268:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f26c:	2c58      	cmp	r4, #88	; 0x58
 800f26e:	d14d      	bne.n	800f30c <_strtol_l.isra.0+0xf0>
 800f270:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800f274:	2310      	movs	r3, #16
 800f276:	f10e 0e02 	add.w	lr, lr, #2
 800f27a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800f27e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f282:	2600      	movs	r6, #0
 800f284:	fbbc f9f3 	udiv	r9, ip, r3
 800f288:	4635      	mov	r5, r6
 800f28a:	fb03 ca19 	mls	sl, r3, r9, ip
 800f28e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800f292:	2f09      	cmp	r7, #9
 800f294:	d818      	bhi.n	800f2c8 <_strtol_l.isra.0+0xac>
 800f296:	463c      	mov	r4, r7
 800f298:	42a3      	cmp	r3, r4
 800f29a:	dd24      	ble.n	800f2e6 <_strtol_l.isra.0+0xca>
 800f29c:	2e00      	cmp	r6, #0
 800f29e:	db1f      	blt.n	800f2e0 <_strtol_l.isra.0+0xc4>
 800f2a0:	45a9      	cmp	r9, r5
 800f2a2:	d31d      	bcc.n	800f2e0 <_strtol_l.isra.0+0xc4>
 800f2a4:	d101      	bne.n	800f2aa <_strtol_l.isra.0+0x8e>
 800f2a6:	45a2      	cmp	sl, r4
 800f2a8:	db1a      	blt.n	800f2e0 <_strtol_l.isra.0+0xc4>
 800f2aa:	fb05 4503 	mla	r5, r5, r3, r4
 800f2ae:	2601      	movs	r6, #1
 800f2b0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f2b4:	e7eb      	b.n	800f28e <_strtol_l.isra.0+0x72>
 800f2b6:	2c2b      	cmp	r4, #43	; 0x2b
 800f2b8:	bf08      	it	eq
 800f2ba:	f89e 4000 	ldrbeq.w	r4, [lr]
 800f2be:	46a8      	mov	r8, r5
 800f2c0:	bf08      	it	eq
 800f2c2:	f106 0e02 	addeq.w	lr, r6, #2
 800f2c6:	e7c7      	b.n	800f258 <_strtol_l.isra.0+0x3c>
 800f2c8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800f2cc:	2f19      	cmp	r7, #25
 800f2ce:	d801      	bhi.n	800f2d4 <_strtol_l.isra.0+0xb8>
 800f2d0:	3c37      	subs	r4, #55	; 0x37
 800f2d2:	e7e1      	b.n	800f298 <_strtol_l.isra.0+0x7c>
 800f2d4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800f2d8:	2f19      	cmp	r7, #25
 800f2da:	d804      	bhi.n	800f2e6 <_strtol_l.isra.0+0xca>
 800f2dc:	3c57      	subs	r4, #87	; 0x57
 800f2de:	e7db      	b.n	800f298 <_strtol_l.isra.0+0x7c>
 800f2e0:	f04f 36ff 	mov.w	r6, #4294967295
 800f2e4:	e7e4      	b.n	800f2b0 <_strtol_l.isra.0+0x94>
 800f2e6:	2e00      	cmp	r6, #0
 800f2e8:	da05      	bge.n	800f2f6 <_strtol_l.isra.0+0xda>
 800f2ea:	2322      	movs	r3, #34	; 0x22
 800f2ec:	6003      	str	r3, [r0, #0]
 800f2ee:	4665      	mov	r5, ip
 800f2f0:	b942      	cbnz	r2, 800f304 <_strtol_l.isra.0+0xe8>
 800f2f2:	4628      	mov	r0, r5
 800f2f4:	e79d      	b.n	800f232 <_strtol_l.isra.0+0x16>
 800f2f6:	f1b8 0f00 	cmp.w	r8, #0
 800f2fa:	d000      	beq.n	800f2fe <_strtol_l.isra.0+0xe2>
 800f2fc:	426d      	negs	r5, r5
 800f2fe:	2a00      	cmp	r2, #0
 800f300:	d0f7      	beq.n	800f2f2 <_strtol_l.isra.0+0xd6>
 800f302:	b10e      	cbz	r6, 800f308 <_strtol_l.isra.0+0xec>
 800f304:	f10e 31ff 	add.w	r1, lr, #4294967295
 800f308:	6011      	str	r1, [r2, #0]
 800f30a:	e7f2      	b.n	800f2f2 <_strtol_l.isra.0+0xd6>
 800f30c:	2430      	movs	r4, #48	; 0x30
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d1b3      	bne.n	800f27a <_strtol_l.isra.0+0x5e>
 800f312:	2308      	movs	r3, #8
 800f314:	e7b1      	b.n	800f27a <_strtol_l.isra.0+0x5e>
 800f316:	2c30      	cmp	r4, #48	; 0x30
 800f318:	d0a4      	beq.n	800f264 <_strtol_l.isra.0+0x48>
 800f31a:	230a      	movs	r3, #10
 800f31c:	e7ad      	b.n	800f27a <_strtol_l.isra.0+0x5e>
 800f31e:	bf00      	nop
 800f320:	08013489 	.word	0x08013489

0800f324 <strtol>:
 800f324:	4613      	mov	r3, r2
 800f326:	460a      	mov	r2, r1
 800f328:	4601      	mov	r1, r0
 800f32a:	4802      	ldr	r0, [pc, #8]	; (800f334 <strtol+0x10>)
 800f32c:	6800      	ldr	r0, [r0, #0]
 800f32e:	f7ff bf75 	b.w	800f21c <_strtol_l.isra.0>
 800f332:	bf00      	nop
 800f334:	2000002c 	.word	0x2000002c

0800f338 <__swbuf_r>:
 800f338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f33a:	460e      	mov	r6, r1
 800f33c:	4614      	mov	r4, r2
 800f33e:	4605      	mov	r5, r0
 800f340:	b118      	cbz	r0, 800f34a <__swbuf_r+0x12>
 800f342:	6983      	ldr	r3, [r0, #24]
 800f344:	b90b      	cbnz	r3, 800f34a <__swbuf_r+0x12>
 800f346:	f001 f849 	bl	80103dc <__sinit>
 800f34a:	4b21      	ldr	r3, [pc, #132]	; (800f3d0 <__swbuf_r+0x98>)
 800f34c:	429c      	cmp	r4, r3
 800f34e:	d12b      	bne.n	800f3a8 <__swbuf_r+0x70>
 800f350:	686c      	ldr	r4, [r5, #4]
 800f352:	69a3      	ldr	r3, [r4, #24]
 800f354:	60a3      	str	r3, [r4, #8]
 800f356:	89a3      	ldrh	r3, [r4, #12]
 800f358:	071a      	lsls	r2, r3, #28
 800f35a:	d52f      	bpl.n	800f3bc <__swbuf_r+0x84>
 800f35c:	6923      	ldr	r3, [r4, #16]
 800f35e:	b36b      	cbz	r3, 800f3bc <__swbuf_r+0x84>
 800f360:	6923      	ldr	r3, [r4, #16]
 800f362:	6820      	ldr	r0, [r4, #0]
 800f364:	1ac0      	subs	r0, r0, r3
 800f366:	6963      	ldr	r3, [r4, #20]
 800f368:	b2f6      	uxtb	r6, r6
 800f36a:	4283      	cmp	r3, r0
 800f36c:	4637      	mov	r7, r6
 800f36e:	dc04      	bgt.n	800f37a <__swbuf_r+0x42>
 800f370:	4621      	mov	r1, r4
 800f372:	4628      	mov	r0, r5
 800f374:	f000 ff9e 	bl	80102b4 <_fflush_r>
 800f378:	bb30      	cbnz	r0, 800f3c8 <__swbuf_r+0x90>
 800f37a:	68a3      	ldr	r3, [r4, #8]
 800f37c:	3b01      	subs	r3, #1
 800f37e:	60a3      	str	r3, [r4, #8]
 800f380:	6823      	ldr	r3, [r4, #0]
 800f382:	1c5a      	adds	r2, r3, #1
 800f384:	6022      	str	r2, [r4, #0]
 800f386:	701e      	strb	r6, [r3, #0]
 800f388:	6963      	ldr	r3, [r4, #20]
 800f38a:	3001      	adds	r0, #1
 800f38c:	4283      	cmp	r3, r0
 800f38e:	d004      	beq.n	800f39a <__swbuf_r+0x62>
 800f390:	89a3      	ldrh	r3, [r4, #12]
 800f392:	07db      	lsls	r3, r3, #31
 800f394:	d506      	bpl.n	800f3a4 <__swbuf_r+0x6c>
 800f396:	2e0a      	cmp	r6, #10
 800f398:	d104      	bne.n	800f3a4 <__swbuf_r+0x6c>
 800f39a:	4621      	mov	r1, r4
 800f39c:	4628      	mov	r0, r5
 800f39e:	f000 ff89 	bl	80102b4 <_fflush_r>
 800f3a2:	b988      	cbnz	r0, 800f3c8 <__swbuf_r+0x90>
 800f3a4:	4638      	mov	r0, r7
 800f3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3a8:	4b0a      	ldr	r3, [pc, #40]	; (800f3d4 <__swbuf_r+0x9c>)
 800f3aa:	429c      	cmp	r4, r3
 800f3ac:	d101      	bne.n	800f3b2 <__swbuf_r+0x7a>
 800f3ae:	68ac      	ldr	r4, [r5, #8]
 800f3b0:	e7cf      	b.n	800f352 <__swbuf_r+0x1a>
 800f3b2:	4b09      	ldr	r3, [pc, #36]	; (800f3d8 <__swbuf_r+0xa0>)
 800f3b4:	429c      	cmp	r4, r3
 800f3b6:	bf08      	it	eq
 800f3b8:	68ec      	ldreq	r4, [r5, #12]
 800f3ba:	e7ca      	b.n	800f352 <__swbuf_r+0x1a>
 800f3bc:	4621      	mov	r1, r4
 800f3be:	4628      	mov	r0, r5
 800f3c0:	f000 f80c 	bl	800f3dc <__swsetup_r>
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	d0cb      	beq.n	800f360 <__swbuf_r+0x28>
 800f3c8:	f04f 37ff 	mov.w	r7, #4294967295
 800f3cc:	e7ea      	b.n	800f3a4 <__swbuf_r+0x6c>
 800f3ce:	bf00      	nop
 800f3d0:	08013640 	.word	0x08013640
 800f3d4:	08013660 	.word	0x08013660
 800f3d8:	08013620 	.word	0x08013620

0800f3dc <__swsetup_r>:
 800f3dc:	4b32      	ldr	r3, [pc, #200]	; (800f4a8 <__swsetup_r+0xcc>)
 800f3de:	b570      	push	{r4, r5, r6, lr}
 800f3e0:	681d      	ldr	r5, [r3, #0]
 800f3e2:	4606      	mov	r6, r0
 800f3e4:	460c      	mov	r4, r1
 800f3e6:	b125      	cbz	r5, 800f3f2 <__swsetup_r+0x16>
 800f3e8:	69ab      	ldr	r3, [r5, #24]
 800f3ea:	b913      	cbnz	r3, 800f3f2 <__swsetup_r+0x16>
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	f000 fff5 	bl	80103dc <__sinit>
 800f3f2:	4b2e      	ldr	r3, [pc, #184]	; (800f4ac <__swsetup_r+0xd0>)
 800f3f4:	429c      	cmp	r4, r3
 800f3f6:	d10f      	bne.n	800f418 <__swsetup_r+0x3c>
 800f3f8:	686c      	ldr	r4, [r5, #4]
 800f3fa:	89a3      	ldrh	r3, [r4, #12]
 800f3fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f400:	0719      	lsls	r1, r3, #28
 800f402:	d42c      	bmi.n	800f45e <__swsetup_r+0x82>
 800f404:	06dd      	lsls	r5, r3, #27
 800f406:	d411      	bmi.n	800f42c <__swsetup_r+0x50>
 800f408:	2309      	movs	r3, #9
 800f40a:	6033      	str	r3, [r6, #0]
 800f40c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f410:	81a3      	strh	r3, [r4, #12]
 800f412:	f04f 30ff 	mov.w	r0, #4294967295
 800f416:	e03e      	b.n	800f496 <__swsetup_r+0xba>
 800f418:	4b25      	ldr	r3, [pc, #148]	; (800f4b0 <__swsetup_r+0xd4>)
 800f41a:	429c      	cmp	r4, r3
 800f41c:	d101      	bne.n	800f422 <__swsetup_r+0x46>
 800f41e:	68ac      	ldr	r4, [r5, #8]
 800f420:	e7eb      	b.n	800f3fa <__swsetup_r+0x1e>
 800f422:	4b24      	ldr	r3, [pc, #144]	; (800f4b4 <__swsetup_r+0xd8>)
 800f424:	429c      	cmp	r4, r3
 800f426:	bf08      	it	eq
 800f428:	68ec      	ldreq	r4, [r5, #12]
 800f42a:	e7e6      	b.n	800f3fa <__swsetup_r+0x1e>
 800f42c:	0758      	lsls	r0, r3, #29
 800f42e:	d512      	bpl.n	800f456 <__swsetup_r+0x7a>
 800f430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f432:	b141      	cbz	r1, 800f446 <__swsetup_r+0x6a>
 800f434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f438:	4299      	cmp	r1, r3
 800f43a:	d002      	beq.n	800f442 <__swsetup_r+0x66>
 800f43c:	4630      	mov	r0, r6
 800f43e:	f002 f929 	bl	8011694 <_free_r>
 800f442:	2300      	movs	r3, #0
 800f444:	6363      	str	r3, [r4, #52]	; 0x34
 800f446:	89a3      	ldrh	r3, [r4, #12]
 800f448:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f44c:	81a3      	strh	r3, [r4, #12]
 800f44e:	2300      	movs	r3, #0
 800f450:	6063      	str	r3, [r4, #4]
 800f452:	6923      	ldr	r3, [r4, #16]
 800f454:	6023      	str	r3, [r4, #0]
 800f456:	89a3      	ldrh	r3, [r4, #12]
 800f458:	f043 0308 	orr.w	r3, r3, #8
 800f45c:	81a3      	strh	r3, [r4, #12]
 800f45e:	6923      	ldr	r3, [r4, #16]
 800f460:	b94b      	cbnz	r3, 800f476 <__swsetup_r+0x9a>
 800f462:	89a3      	ldrh	r3, [r4, #12]
 800f464:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f46c:	d003      	beq.n	800f476 <__swsetup_r+0x9a>
 800f46e:	4621      	mov	r1, r4
 800f470:	4630      	mov	r0, r6
 800f472:	f001 fbeb 	bl	8010c4c <__smakebuf_r>
 800f476:	89a0      	ldrh	r0, [r4, #12]
 800f478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f47c:	f010 0301 	ands.w	r3, r0, #1
 800f480:	d00a      	beq.n	800f498 <__swsetup_r+0xbc>
 800f482:	2300      	movs	r3, #0
 800f484:	60a3      	str	r3, [r4, #8]
 800f486:	6963      	ldr	r3, [r4, #20]
 800f488:	425b      	negs	r3, r3
 800f48a:	61a3      	str	r3, [r4, #24]
 800f48c:	6923      	ldr	r3, [r4, #16]
 800f48e:	b943      	cbnz	r3, 800f4a2 <__swsetup_r+0xc6>
 800f490:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f494:	d1ba      	bne.n	800f40c <__swsetup_r+0x30>
 800f496:	bd70      	pop	{r4, r5, r6, pc}
 800f498:	0781      	lsls	r1, r0, #30
 800f49a:	bf58      	it	pl
 800f49c:	6963      	ldrpl	r3, [r4, #20]
 800f49e:	60a3      	str	r3, [r4, #8]
 800f4a0:	e7f4      	b.n	800f48c <__swsetup_r+0xb0>
 800f4a2:	2000      	movs	r0, #0
 800f4a4:	e7f7      	b.n	800f496 <__swsetup_r+0xba>
 800f4a6:	bf00      	nop
 800f4a8:	2000002c 	.word	0x2000002c
 800f4ac:	08013640 	.word	0x08013640
 800f4b0:	08013660 	.word	0x08013660
 800f4b4:	08013620 	.word	0x08013620

0800f4b8 <quorem>:
 800f4b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4bc:	6903      	ldr	r3, [r0, #16]
 800f4be:	690c      	ldr	r4, [r1, #16]
 800f4c0:	42a3      	cmp	r3, r4
 800f4c2:	4607      	mov	r7, r0
 800f4c4:	f2c0 8081 	blt.w	800f5ca <quorem+0x112>
 800f4c8:	3c01      	subs	r4, #1
 800f4ca:	f101 0814 	add.w	r8, r1, #20
 800f4ce:	f100 0514 	add.w	r5, r0, #20
 800f4d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f4d6:	9301      	str	r3, [sp, #4]
 800f4d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f4dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f4e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f4ec:	fbb2 f6f3 	udiv	r6, r2, r3
 800f4f0:	d331      	bcc.n	800f556 <quorem+0x9e>
 800f4f2:	f04f 0e00 	mov.w	lr, #0
 800f4f6:	4640      	mov	r0, r8
 800f4f8:	46ac      	mov	ip, r5
 800f4fa:	46f2      	mov	sl, lr
 800f4fc:	f850 2b04 	ldr.w	r2, [r0], #4
 800f500:	b293      	uxth	r3, r2
 800f502:	fb06 e303 	mla	r3, r6, r3, lr
 800f506:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	ebaa 0303 	sub.w	r3, sl, r3
 800f510:	0c12      	lsrs	r2, r2, #16
 800f512:	f8dc a000 	ldr.w	sl, [ip]
 800f516:	fb06 e202 	mla	r2, r6, r2, lr
 800f51a:	fa13 f38a 	uxtah	r3, r3, sl
 800f51e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f522:	fa1f fa82 	uxth.w	sl, r2
 800f526:	f8dc 2000 	ldr.w	r2, [ip]
 800f52a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f52e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f532:	b29b      	uxth	r3, r3
 800f534:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f538:	4581      	cmp	r9, r0
 800f53a:	f84c 3b04 	str.w	r3, [ip], #4
 800f53e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f542:	d2db      	bcs.n	800f4fc <quorem+0x44>
 800f544:	f855 300b 	ldr.w	r3, [r5, fp]
 800f548:	b92b      	cbnz	r3, 800f556 <quorem+0x9e>
 800f54a:	9b01      	ldr	r3, [sp, #4]
 800f54c:	3b04      	subs	r3, #4
 800f54e:	429d      	cmp	r5, r3
 800f550:	461a      	mov	r2, r3
 800f552:	d32e      	bcc.n	800f5b2 <quorem+0xfa>
 800f554:	613c      	str	r4, [r7, #16]
 800f556:	4638      	mov	r0, r7
 800f558:	f001 fe9a 	bl	8011290 <__mcmp>
 800f55c:	2800      	cmp	r0, #0
 800f55e:	db24      	blt.n	800f5aa <quorem+0xf2>
 800f560:	3601      	adds	r6, #1
 800f562:	4628      	mov	r0, r5
 800f564:	f04f 0c00 	mov.w	ip, #0
 800f568:	f858 2b04 	ldr.w	r2, [r8], #4
 800f56c:	f8d0 e000 	ldr.w	lr, [r0]
 800f570:	b293      	uxth	r3, r2
 800f572:	ebac 0303 	sub.w	r3, ip, r3
 800f576:	0c12      	lsrs	r2, r2, #16
 800f578:	fa13 f38e 	uxtah	r3, r3, lr
 800f57c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f580:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f584:	b29b      	uxth	r3, r3
 800f586:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f58a:	45c1      	cmp	r9, r8
 800f58c:	f840 3b04 	str.w	r3, [r0], #4
 800f590:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f594:	d2e8      	bcs.n	800f568 <quorem+0xb0>
 800f596:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f59a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f59e:	b922      	cbnz	r2, 800f5aa <quorem+0xf2>
 800f5a0:	3b04      	subs	r3, #4
 800f5a2:	429d      	cmp	r5, r3
 800f5a4:	461a      	mov	r2, r3
 800f5a6:	d30a      	bcc.n	800f5be <quorem+0x106>
 800f5a8:	613c      	str	r4, [r7, #16]
 800f5aa:	4630      	mov	r0, r6
 800f5ac:	b003      	add	sp, #12
 800f5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b2:	6812      	ldr	r2, [r2, #0]
 800f5b4:	3b04      	subs	r3, #4
 800f5b6:	2a00      	cmp	r2, #0
 800f5b8:	d1cc      	bne.n	800f554 <quorem+0x9c>
 800f5ba:	3c01      	subs	r4, #1
 800f5bc:	e7c7      	b.n	800f54e <quorem+0x96>
 800f5be:	6812      	ldr	r2, [r2, #0]
 800f5c0:	3b04      	subs	r3, #4
 800f5c2:	2a00      	cmp	r2, #0
 800f5c4:	d1f0      	bne.n	800f5a8 <quorem+0xf0>
 800f5c6:	3c01      	subs	r4, #1
 800f5c8:	e7eb      	b.n	800f5a2 <quorem+0xea>
 800f5ca:	2000      	movs	r0, #0
 800f5cc:	e7ee      	b.n	800f5ac <quorem+0xf4>
	...

0800f5d0 <_dtoa_r>:
 800f5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5d4:	ed2d 8b02 	vpush	{d8}
 800f5d8:	ec57 6b10 	vmov	r6, r7, d0
 800f5dc:	b095      	sub	sp, #84	; 0x54
 800f5de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f5e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f5e4:	9105      	str	r1, [sp, #20]
 800f5e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f5ea:	4604      	mov	r4, r0
 800f5ec:	9209      	str	r2, [sp, #36]	; 0x24
 800f5ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800f5f0:	b975      	cbnz	r5, 800f610 <_dtoa_r+0x40>
 800f5f2:	2010      	movs	r0, #16
 800f5f4:	f001 fb6a 	bl	8010ccc <malloc>
 800f5f8:	4602      	mov	r2, r0
 800f5fa:	6260      	str	r0, [r4, #36]	; 0x24
 800f5fc:	b920      	cbnz	r0, 800f608 <_dtoa_r+0x38>
 800f5fe:	4bb2      	ldr	r3, [pc, #712]	; (800f8c8 <_dtoa_r+0x2f8>)
 800f600:	21ea      	movs	r1, #234	; 0xea
 800f602:	48b2      	ldr	r0, [pc, #712]	; (800f8cc <_dtoa_r+0x2fc>)
 800f604:	f002 fad8 	bl	8011bb8 <__assert_func>
 800f608:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f60c:	6005      	str	r5, [r0, #0]
 800f60e:	60c5      	str	r5, [r0, #12]
 800f610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f612:	6819      	ldr	r1, [r3, #0]
 800f614:	b151      	cbz	r1, 800f62c <_dtoa_r+0x5c>
 800f616:	685a      	ldr	r2, [r3, #4]
 800f618:	604a      	str	r2, [r1, #4]
 800f61a:	2301      	movs	r3, #1
 800f61c:	4093      	lsls	r3, r2
 800f61e:	608b      	str	r3, [r1, #8]
 800f620:	4620      	mov	r0, r4
 800f622:	f001 fbad 	bl	8010d80 <_Bfree>
 800f626:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f628:	2200      	movs	r2, #0
 800f62a:	601a      	str	r2, [r3, #0]
 800f62c:	1e3b      	subs	r3, r7, #0
 800f62e:	bfb9      	ittee	lt
 800f630:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f634:	9303      	strlt	r3, [sp, #12]
 800f636:	2300      	movge	r3, #0
 800f638:	f8c8 3000 	strge.w	r3, [r8]
 800f63c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f640:	4ba3      	ldr	r3, [pc, #652]	; (800f8d0 <_dtoa_r+0x300>)
 800f642:	bfbc      	itt	lt
 800f644:	2201      	movlt	r2, #1
 800f646:	f8c8 2000 	strlt.w	r2, [r8]
 800f64a:	ea33 0309 	bics.w	r3, r3, r9
 800f64e:	d11b      	bne.n	800f688 <_dtoa_r+0xb8>
 800f650:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f652:	f242 730f 	movw	r3, #9999	; 0x270f
 800f656:	6013      	str	r3, [r2, #0]
 800f658:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f65c:	4333      	orrs	r3, r6
 800f65e:	f000 857a 	beq.w	8010156 <_dtoa_r+0xb86>
 800f662:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f664:	b963      	cbnz	r3, 800f680 <_dtoa_r+0xb0>
 800f666:	4b9b      	ldr	r3, [pc, #620]	; (800f8d4 <_dtoa_r+0x304>)
 800f668:	e024      	b.n	800f6b4 <_dtoa_r+0xe4>
 800f66a:	4b9b      	ldr	r3, [pc, #620]	; (800f8d8 <_dtoa_r+0x308>)
 800f66c:	9300      	str	r3, [sp, #0]
 800f66e:	3308      	adds	r3, #8
 800f670:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f672:	6013      	str	r3, [r2, #0]
 800f674:	9800      	ldr	r0, [sp, #0]
 800f676:	b015      	add	sp, #84	; 0x54
 800f678:	ecbd 8b02 	vpop	{d8}
 800f67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f680:	4b94      	ldr	r3, [pc, #592]	; (800f8d4 <_dtoa_r+0x304>)
 800f682:	9300      	str	r3, [sp, #0]
 800f684:	3303      	adds	r3, #3
 800f686:	e7f3      	b.n	800f670 <_dtoa_r+0xa0>
 800f688:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f68c:	2200      	movs	r2, #0
 800f68e:	ec51 0b17 	vmov	r0, r1, d7
 800f692:	2300      	movs	r3, #0
 800f694:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f698:	f7f1 fa3e 	bl	8000b18 <__aeabi_dcmpeq>
 800f69c:	4680      	mov	r8, r0
 800f69e:	b158      	cbz	r0, 800f6b8 <_dtoa_r+0xe8>
 800f6a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	6013      	str	r3, [r2, #0]
 800f6a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	f000 8551 	beq.w	8010150 <_dtoa_r+0xb80>
 800f6ae:	488b      	ldr	r0, [pc, #556]	; (800f8dc <_dtoa_r+0x30c>)
 800f6b0:	6018      	str	r0, [r3, #0]
 800f6b2:	1e43      	subs	r3, r0, #1
 800f6b4:	9300      	str	r3, [sp, #0]
 800f6b6:	e7dd      	b.n	800f674 <_dtoa_r+0xa4>
 800f6b8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f6bc:	aa12      	add	r2, sp, #72	; 0x48
 800f6be:	a913      	add	r1, sp, #76	; 0x4c
 800f6c0:	4620      	mov	r0, r4
 800f6c2:	f001 ff05 	bl	80114d0 <__d2b>
 800f6c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f6ca:	4683      	mov	fp, r0
 800f6cc:	2d00      	cmp	r5, #0
 800f6ce:	d07c      	beq.n	800f7ca <_dtoa_r+0x1fa>
 800f6d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f6d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f6da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f6de:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f6e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f6e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f6ea:	4b7d      	ldr	r3, [pc, #500]	; (800f8e0 <_dtoa_r+0x310>)
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	4630      	mov	r0, r6
 800f6f0:	4639      	mov	r1, r7
 800f6f2:	f7f0 fdf1 	bl	80002d8 <__aeabi_dsub>
 800f6f6:	a36e      	add	r3, pc, #440	; (adr r3, 800f8b0 <_dtoa_r+0x2e0>)
 800f6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6fc:	f7f0 ffa4 	bl	8000648 <__aeabi_dmul>
 800f700:	a36d      	add	r3, pc, #436	; (adr r3, 800f8b8 <_dtoa_r+0x2e8>)
 800f702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f706:	f7f0 fde9 	bl	80002dc <__adddf3>
 800f70a:	4606      	mov	r6, r0
 800f70c:	4628      	mov	r0, r5
 800f70e:	460f      	mov	r7, r1
 800f710:	f7f0 ff30 	bl	8000574 <__aeabi_i2d>
 800f714:	a36a      	add	r3, pc, #424	; (adr r3, 800f8c0 <_dtoa_r+0x2f0>)
 800f716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f71a:	f7f0 ff95 	bl	8000648 <__aeabi_dmul>
 800f71e:	4602      	mov	r2, r0
 800f720:	460b      	mov	r3, r1
 800f722:	4630      	mov	r0, r6
 800f724:	4639      	mov	r1, r7
 800f726:	f7f0 fdd9 	bl	80002dc <__adddf3>
 800f72a:	4606      	mov	r6, r0
 800f72c:	460f      	mov	r7, r1
 800f72e:	f7f1 fa3b 	bl	8000ba8 <__aeabi_d2iz>
 800f732:	2200      	movs	r2, #0
 800f734:	4682      	mov	sl, r0
 800f736:	2300      	movs	r3, #0
 800f738:	4630      	mov	r0, r6
 800f73a:	4639      	mov	r1, r7
 800f73c:	f7f1 f9f6 	bl	8000b2c <__aeabi_dcmplt>
 800f740:	b148      	cbz	r0, 800f756 <_dtoa_r+0x186>
 800f742:	4650      	mov	r0, sl
 800f744:	f7f0 ff16 	bl	8000574 <__aeabi_i2d>
 800f748:	4632      	mov	r2, r6
 800f74a:	463b      	mov	r3, r7
 800f74c:	f7f1 f9e4 	bl	8000b18 <__aeabi_dcmpeq>
 800f750:	b908      	cbnz	r0, 800f756 <_dtoa_r+0x186>
 800f752:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f756:	f1ba 0f16 	cmp.w	sl, #22
 800f75a:	d854      	bhi.n	800f806 <_dtoa_r+0x236>
 800f75c:	4b61      	ldr	r3, [pc, #388]	; (800f8e4 <_dtoa_r+0x314>)
 800f75e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f766:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f76a:	f7f1 f9df 	bl	8000b2c <__aeabi_dcmplt>
 800f76e:	2800      	cmp	r0, #0
 800f770:	d04b      	beq.n	800f80a <_dtoa_r+0x23a>
 800f772:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f776:	2300      	movs	r3, #0
 800f778:	930e      	str	r3, [sp, #56]	; 0x38
 800f77a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f77c:	1b5d      	subs	r5, r3, r5
 800f77e:	1e6b      	subs	r3, r5, #1
 800f780:	9304      	str	r3, [sp, #16]
 800f782:	bf43      	ittte	mi
 800f784:	2300      	movmi	r3, #0
 800f786:	f1c5 0801 	rsbmi	r8, r5, #1
 800f78a:	9304      	strmi	r3, [sp, #16]
 800f78c:	f04f 0800 	movpl.w	r8, #0
 800f790:	f1ba 0f00 	cmp.w	sl, #0
 800f794:	db3b      	blt.n	800f80e <_dtoa_r+0x23e>
 800f796:	9b04      	ldr	r3, [sp, #16]
 800f798:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f79c:	4453      	add	r3, sl
 800f79e:	9304      	str	r3, [sp, #16]
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	9306      	str	r3, [sp, #24]
 800f7a4:	9b05      	ldr	r3, [sp, #20]
 800f7a6:	2b09      	cmp	r3, #9
 800f7a8:	d869      	bhi.n	800f87e <_dtoa_r+0x2ae>
 800f7aa:	2b05      	cmp	r3, #5
 800f7ac:	bfc4      	itt	gt
 800f7ae:	3b04      	subgt	r3, #4
 800f7b0:	9305      	strgt	r3, [sp, #20]
 800f7b2:	9b05      	ldr	r3, [sp, #20]
 800f7b4:	f1a3 0302 	sub.w	r3, r3, #2
 800f7b8:	bfcc      	ite	gt
 800f7ba:	2500      	movgt	r5, #0
 800f7bc:	2501      	movle	r5, #1
 800f7be:	2b03      	cmp	r3, #3
 800f7c0:	d869      	bhi.n	800f896 <_dtoa_r+0x2c6>
 800f7c2:	e8df f003 	tbb	[pc, r3]
 800f7c6:	4e2c      	.short	0x4e2c
 800f7c8:	5a4c      	.short	0x5a4c
 800f7ca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f7ce:	441d      	add	r5, r3
 800f7d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f7d4:	2b20      	cmp	r3, #32
 800f7d6:	bfc1      	itttt	gt
 800f7d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f7dc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f7e0:	fa09 f303 	lslgt.w	r3, r9, r3
 800f7e4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f7e8:	bfda      	itte	le
 800f7ea:	f1c3 0320 	rsble	r3, r3, #32
 800f7ee:	fa06 f003 	lslle.w	r0, r6, r3
 800f7f2:	4318      	orrgt	r0, r3
 800f7f4:	f7f0 feae 	bl	8000554 <__aeabi_ui2d>
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	4606      	mov	r6, r0
 800f7fc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f800:	3d01      	subs	r5, #1
 800f802:	9310      	str	r3, [sp, #64]	; 0x40
 800f804:	e771      	b.n	800f6ea <_dtoa_r+0x11a>
 800f806:	2301      	movs	r3, #1
 800f808:	e7b6      	b.n	800f778 <_dtoa_r+0x1a8>
 800f80a:	900e      	str	r0, [sp, #56]	; 0x38
 800f80c:	e7b5      	b.n	800f77a <_dtoa_r+0x1aa>
 800f80e:	f1ca 0300 	rsb	r3, sl, #0
 800f812:	9306      	str	r3, [sp, #24]
 800f814:	2300      	movs	r3, #0
 800f816:	eba8 080a 	sub.w	r8, r8, sl
 800f81a:	930d      	str	r3, [sp, #52]	; 0x34
 800f81c:	e7c2      	b.n	800f7a4 <_dtoa_r+0x1d4>
 800f81e:	2300      	movs	r3, #0
 800f820:	9308      	str	r3, [sp, #32]
 800f822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f824:	2b00      	cmp	r3, #0
 800f826:	dc39      	bgt.n	800f89c <_dtoa_r+0x2cc>
 800f828:	f04f 0901 	mov.w	r9, #1
 800f82c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f830:	464b      	mov	r3, r9
 800f832:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f836:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f838:	2200      	movs	r2, #0
 800f83a:	6042      	str	r2, [r0, #4]
 800f83c:	2204      	movs	r2, #4
 800f83e:	f102 0614 	add.w	r6, r2, #20
 800f842:	429e      	cmp	r6, r3
 800f844:	6841      	ldr	r1, [r0, #4]
 800f846:	d92f      	bls.n	800f8a8 <_dtoa_r+0x2d8>
 800f848:	4620      	mov	r0, r4
 800f84a:	f001 fa59 	bl	8010d00 <_Balloc>
 800f84e:	9000      	str	r0, [sp, #0]
 800f850:	2800      	cmp	r0, #0
 800f852:	d14b      	bne.n	800f8ec <_dtoa_r+0x31c>
 800f854:	4b24      	ldr	r3, [pc, #144]	; (800f8e8 <_dtoa_r+0x318>)
 800f856:	4602      	mov	r2, r0
 800f858:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f85c:	e6d1      	b.n	800f602 <_dtoa_r+0x32>
 800f85e:	2301      	movs	r3, #1
 800f860:	e7de      	b.n	800f820 <_dtoa_r+0x250>
 800f862:	2300      	movs	r3, #0
 800f864:	9308      	str	r3, [sp, #32]
 800f866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f868:	eb0a 0903 	add.w	r9, sl, r3
 800f86c:	f109 0301 	add.w	r3, r9, #1
 800f870:	2b01      	cmp	r3, #1
 800f872:	9301      	str	r3, [sp, #4]
 800f874:	bfb8      	it	lt
 800f876:	2301      	movlt	r3, #1
 800f878:	e7dd      	b.n	800f836 <_dtoa_r+0x266>
 800f87a:	2301      	movs	r3, #1
 800f87c:	e7f2      	b.n	800f864 <_dtoa_r+0x294>
 800f87e:	2501      	movs	r5, #1
 800f880:	2300      	movs	r3, #0
 800f882:	9305      	str	r3, [sp, #20]
 800f884:	9508      	str	r5, [sp, #32]
 800f886:	f04f 39ff 	mov.w	r9, #4294967295
 800f88a:	2200      	movs	r2, #0
 800f88c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f890:	2312      	movs	r3, #18
 800f892:	9209      	str	r2, [sp, #36]	; 0x24
 800f894:	e7cf      	b.n	800f836 <_dtoa_r+0x266>
 800f896:	2301      	movs	r3, #1
 800f898:	9308      	str	r3, [sp, #32]
 800f89a:	e7f4      	b.n	800f886 <_dtoa_r+0x2b6>
 800f89c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f8a0:	f8cd 9004 	str.w	r9, [sp, #4]
 800f8a4:	464b      	mov	r3, r9
 800f8a6:	e7c6      	b.n	800f836 <_dtoa_r+0x266>
 800f8a8:	3101      	adds	r1, #1
 800f8aa:	6041      	str	r1, [r0, #4]
 800f8ac:	0052      	lsls	r2, r2, #1
 800f8ae:	e7c6      	b.n	800f83e <_dtoa_r+0x26e>
 800f8b0:	636f4361 	.word	0x636f4361
 800f8b4:	3fd287a7 	.word	0x3fd287a7
 800f8b8:	8b60c8b3 	.word	0x8b60c8b3
 800f8bc:	3fc68a28 	.word	0x3fc68a28
 800f8c0:	509f79fb 	.word	0x509f79fb
 800f8c4:	3fd34413 	.word	0x3fd34413
 800f8c8:	08013596 	.word	0x08013596
 800f8cc:	080135ad 	.word	0x080135ad
 800f8d0:	7ff00000 	.word	0x7ff00000
 800f8d4:	08013592 	.word	0x08013592
 800f8d8:	08013589 	.word	0x08013589
 800f8dc:	08013411 	.word	0x08013411
 800f8e0:	3ff80000 	.word	0x3ff80000
 800f8e4:	08013788 	.word	0x08013788
 800f8e8:	0801360c 	.word	0x0801360c
 800f8ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8ee:	9a00      	ldr	r2, [sp, #0]
 800f8f0:	601a      	str	r2, [r3, #0]
 800f8f2:	9b01      	ldr	r3, [sp, #4]
 800f8f4:	2b0e      	cmp	r3, #14
 800f8f6:	f200 80ad 	bhi.w	800fa54 <_dtoa_r+0x484>
 800f8fa:	2d00      	cmp	r5, #0
 800f8fc:	f000 80aa 	beq.w	800fa54 <_dtoa_r+0x484>
 800f900:	f1ba 0f00 	cmp.w	sl, #0
 800f904:	dd36      	ble.n	800f974 <_dtoa_r+0x3a4>
 800f906:	4ac3      	ldr	r2, [pc, #780]	; (800fc14 <_dtoa_r+0x644>)
 800f908:	f00a 030f 	and.w	r3, sl, #15
 800f90c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f910:	ed93 7b00 	vldr	d7, [r3]
 800f914:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f918:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f91c:	eeb0 8a47 	vmov.f32	s16, s14
 800f920:	eef0 8a67 	vmov.f32	s17, s15
 800f924:	d016      	beq.n	800f954 <_dtoa_r+0x384>
 800f926:	4bbc      	ldr	r3, [pc, #752]	; (800fc18 <_dtoa_r+0x648>)
 800f928:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f92c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f930:	f7f0 ffb4 	bl	800089c <__aeabi_ddiv>
 800f934:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f938:	f007 070f 	and.w	r7, r7, #15
 800f93c:	2503      	movs	r5, #3
 800f93e:	4eb6      	ldr	r6, [pc, #728]	; (800fc18 <_dtoa_r+0x648>)
 800f940:	b957      	cbnz	r7, 800f958 <_dtoa_r+0x388>
 800f942:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f946:	ec53 2b18 	vmov	r2, r3, d8
 800f94a:	f7f0 ffa7 	bl	800089c <__aeabi_ddiv>
 800f94e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f952:	e029      	b.n	800f9a8 <_dtoa_r+0x3d8>
 800f954:	2502      	movs	r5, #2
 800f956:	e7f2      	b.n	800f93e <_dtoa_r+0x36e>
 800f958:	07f9      	lsls	r1, r7, #31
 800f95a:	d508      	bpl.n	800f96e <_dtoa_r+0x39e>
 800f95c:	ec51 0b18 	vmov	r0, r1, d8
 800f960:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f964:	f7f0 fe70 	bl	8000648 <__aeabi_dmul>
 800f968:	ec41 0b18 	vmov	d8, r0, r1
 800f96c:	3501      	adds	r5, #1
 800f96e:	107f      	asrs	r7, r7, #1
 800f970:	3608      	adds	r6, #8
 800f972:	e7e5      	b.n	800f940 <_dtoa_r+0x370>
 800f974:	f000 80a6 	beq.w	800fac4 <_dtoa_r+0x4f4>
 800f978:	f1ca 0600 	rsb	r6, sl, #0
 800f97c:	4ba5      	ldr	r3, [pc, #660]	; (800fc14 <_dtoa_r+0x644>)
 800f97e:	4fa6      	ldr	r7, [pc, #664]	; (800fc18 <_dtoa_r+0x648>)
 800f980:	f006 020f 	and.w	r2, r6, #15
 800f984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f98c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f990:	f7f0 fe5a 	bl	8000648 <__aeabi_dmul>
 800f994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f998:	1136      	asrs	r6, r6, #4
 800f99a:	2300      	movs	r3, #0
 800f99c:	2502      	movs	r5, #2
 800f99e:	2e00      	cmp	r6, #0
 800f9a0:	f040 8085 	bne.w	800faae <_dtoa_r+0x4de>
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d1d2      	bne.n	800f94e <_dtoa_r+0x37e>
 800f9a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	f000 808c 	beq.w	800fac8 <_dtoa_r+0x4f8>
 800f9b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f9b4:	4b99      	ldr	r3, [pc, #612]	; (800fc1c <_dtoa_r+0x64c>)
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	4630      	mov	r0, r6
 800f9ba:	4639      	mov	r1, r7
 800f9bc:	f7f1 f8b6 	bl	8000b2c <__aeabi_dcmplt>
 800f9c0:	2800      	cmp	r0, #0
 800f9c2:	f000 8081 	beq.w	800fac8 <_dtoa_r+0x4f8>
 800f9c6:	9b01      	ldr	r3, [sp, #4]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d07d      	beq.n	800fac8 <_dtoa_r+0x4f8>
 800f9cc:	f1b9 0f00 	cmp.w	r9, #0
 800f9d0:	dd3c      	ble.n	800fa4c <_dtoa_r+0x47c>
 800f9d2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f9d6:	9307      	str	r3, [sp, #28]
 800f9d8:	2200      	movs	r2, #0
 800f9da:	4b91      	ldr	r3, [pc, #580]	; (800fc20 <_dtoa_r+0x650>)
 800f9dc:	4630      	mov	r0, r6
 800f9de:	4639      	mov	r1, r7
 800f9e0:	f7f0 fe32 	bl	8000648 <__aeabi_dmul>
 800f9e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f9e8:	3501      	adds	r5, #1
 800f9ea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f9ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f9f2:	4628      	mov	r0, r5
 800f9f4:	f7f0 fdbe 	bl	8000574 <__aeabi_i2d>
 800f9f8:	4632      	mov	r2, r6
 800f9fa:	463b      	mov	r3, r7
 800f9fc:	f7f0 fe24 	bl	8000648 <__aeabi_dmul>
 800fa00:	4b88      	ldr	r3, [pc, #544]	; (800fc24 <_dtoa_r+0x654>)
 800fa02:	2200      	movs	r2, #0
 800fa04:	f7f0 fc6a 	bl	80002dc <__adddf3>
 800fa08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800fa0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa10:	9303      	str	r3, [sp, #12]
 800fa12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d15c      	bne.n	800fad2 <_dtoa_r+0x502>
 800fa18:	4b83      	ldr	r3, [pc, #524]	; (800fc28 <_dtoa_r+0x658>)
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	4630      	mov	r0, r6
 800fa1e:	4639      	mov	r1, r7
 800fa20:	f7f0 fc5a 	bl	80002d8 <__aeabi_dsub>
 800fa24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fa28:	4606      	mov	r6, r0
 800fa2a:	460f      	mov	r7, r1
 800fa2c:	f7f1 f89c 	bl	8000b68 <__aeabi_dcmpgt>
 800fa30:	2800      	cmp	r0, #0
 800fa32:	f040 8296 	bne.w	800ff62 <_dtoa_r+0x992>
 800fa36:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fa3a:	4630      	mov	r0, r6
 800fa3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa40:	4639      	mov	r1, r7
 800fa42:	f7f1 f873 	bl	8000b2c <__aeabi_dcmplt>
 800fa46:	2800      	cmp	r0, #0
 800fa48:	f040 8288 	bne.w	800ff5c <_dtoa_r+0x98c>
 800fa4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fa50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fa54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	f2c0 8158 	blt.w	800fd0c <_dtoa_r+0x73c>
 800fa5c:	f1ba 0f0e 	cmp.w	sl, #14
 800fa60:	f300 8154 	bgt.w	800fd0c <_dtoa_r+0x73c>
 800fa64:	4b6b      	ldr	r3, [pc, #428]	; (800fc14 <_dtoa_r+0x644>)
 800fa66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fa6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fa6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	f280 80e3 	bge.w	800fc3c <_dtoa_r+0x66c>
 800fa76:	9b01      	ldr	r3, [sp, #4]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	f300 80df 	bgt.w	800fc3c <_dtoa_r+0x66c>
 800fa7e:	f040 826d 	bne.w	800ff5c <_dtoa_r+0x98c>
 800fa82:	4b69      	ldr	r3, [pc, #420]	; (800fc28 <_dtoa_r+0x658>)
 800fa84:	2200      	movs	r2, #0
 800fa86:	4640      	mov	r0, r8
 800fa88:	4649      	mov	r1, r9
 800fa8a:	f7f0 fddd 	bl	8000648 <__aeabi_dmul>
 800fa8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fa92:	f7f1 f85f 	bl	8000b54 <__aeabi_dcmpge>
 800fa96:	9e01      	ldr	r6, [sp, #4]
 800fa98:	4637      	mov	r7, r6
 800fa9a:	2800      	cmp	r0, #0
 800fa9c:	f040 8243 	bne.w	800ff26 <_dtoa_r+0x956>
 800faa0:	9d00      	ldr	r5, [sp, #0]
 800faa2:	2331      	movs	r3, #49	; 0x31
 800faa4:	f805 3b01 	strb.w	r3, [r5], #1
 800faa8:	f10a 0a01 	add.w	sl, sl, #1
 800faac:	e23f      	b.n	800ff2e <_dtoa_r+0x95e>
 800faae:	07f2      	lsls	r2, r6, #31
 800fab0:	d505      	bpl.n	800fabe <_dtoa_r+0x4ee>
 800fab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fab6:	f7f0 fdc7 	bl	8000648 <__aeabi_dmul>
 800faba:	3501      	adds	r5, #1
 800fabc:	2301      	movs	r3, #1
 800fabe:	1076      	asrs	r6, r6, #1
 800fac0:	3708      	adds	r7, #8
 800fac2:	e76c      	b.n	800f99e <_dtoa_r+0x3ce>
 800fac4:	2502      	movs	r5, #2
 800fac6:	e76f      	b.n	800f9a8 <_dtoa_r+0x3d8>
 800fac8:	9b01      	ldr	r3, [sp, #4]
 800faca:	f8cd a01c 	str.w	sl, [sp, #28]
 800face:	930c      	str	r3, [sp, #48]	; 0x30
 800fad0:	e78d      	b.n	800f9ee <_dtoa_r+0x41e>
 800fad2:	9900      	ldr	r1, [sp, #0]
 800fad4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fad6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fad8:	4b4e      	ldr	r3, [pc, #312]	; (800fc14 <_dtoa_r+0x644>)
 800fada:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fade:	4401      	add	r1, r0
 800fae0:	9102      	str	r1, [sp, #8]
 800fae2:	9908      	ldr	r1, [sp, #32]
 800fae4:	eeb0 8a47 	vmov.f32	s16, s14
 800fae8:	eef0 8a67 	vmov.f32	s17, s15
 800faec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800faf0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800faf4:	2900      	cmp	r1, #0
 800faf6:	d045      	beq.n	800fb84 <_dtoa_r+0x5b4>
 800faf8:	494c      	ldr	r1, [pc, #304]	; (800fc2c <_dtoa_r+0x65c>)
 800fafa:	2000      	movs	r0, #0
 800fafc:	f7f0 fece 	bl	800089c <__aeabi_ddiv>
 800fb00:	ec53 2b18 	vmov	r2, r3, d8
 800fb04:	f7f0 fbe8 	bl	80002d8 <__aeabi_dsub>
 800fb08:	9d00      	ldr	r5, [sp, #0]
 800fb0a:	ec41 0b18 	vmov	d8, r0, r1
 800fb0e:	4639      	mov	r1, r7
 800fb10:	4630      	mov	r0, r6
 800fb12:	f7f1 f849 	bl	8000ba8 <__aeabi_d2iz>
 800fb16:	900c      	str	r0, [sp, #48]	; 0x30
 800fb18:	f7f0 fd2c 	bl	8000574 <__aeabi_i2d>
 800fb1c:	4602      	mov	r2, r0
 800fb1e:	460b      	mov	r3, r1
 800fb20:	4630      	mov	r0, r6
 800fb22:	4639      	mov	r1, r7
 800fb24:	f7f0 fbd8 	bl	80002d8 <__aeabi_dsub>
 800fb28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb2a:	3330      	adds	r3, #48	; 0x30
 800fb2c:	f805 3b01 	strb.w	r3, [r5], #1
 800fb30:	ec53 2b18 	vmov	r2, r3, d8
 800fb34:	4606      	mov	r6, r0
 800fb36:	460f      	mov	r7, r1
 800fb38:	f7f0 fff8 	bl	8000b2c <__aeabi_dcmplt>
 800fb3c:	2800      	cmp	r0, #0
 800fb3e:	d165      	bne.n	800fc0c <_dtoa_r+0x63c>
 800fb40:	4632      	mov	r2, r6
 800fb42:	463b      	mov	r3, r7
 800fb44:	4935      	ldr	r1, [pc, #212]	; (800fc1c <_dtoa_r+0x64c>)
 800fb46:	2000      	movs	r0, #0
 800fb48:	f7f0 fbc6 	bl	80002d8 <__aeabi_dsub>
 800fb4c:	ec53 2b18 	vmov	r2, r3, d8
 800fb50:	f7f0 ffec 	bl	8000b2c <__aeabi_dcmplt>
 800fb54:	2800      	cmp	r0, #0
 800fb56:	f040 80b9 	bne.w	800fccc <_dtoa_r+0x6fc>
 800fb5a:	9b02      	ldr	r3, [sp, #8]
 800fb5c:	429d      	cmp	r5, r3
 800fb5e:	f43f af75 	beq.w	800fa4c <_dtoa_r+0x47c>
 800fb62:	4b2f      	ldr	r3, [pc, #188]	; (800fc20 <_dtoa_r+0x650>)
 800fb64:	ec51 0b18 	vmov	r0, r1, d8
 800fb68:	2200      	movs	r2, #0
 800fb6a:	f7f0 fd6d 	bl	8000648 <__aeabi_dmul>
 800fb6e:	4b2c      	ldr	r3, [pc, #176]	; (800fc20 <_dtoa_r+0x650>)
 800fb70:	ec41 0b18 	vmov	d8, r0, r1
 800fb74:	2200      	movs	r2, #0
 800fb76:	4630      	mov	r0, r6
 800fb78:	4639      	mov	r1, r7
 800fb7a:	f7f0 fd65 	bl	8000648 <__aeabi_dmul>
 800fb7e:	4606      	mov	r6, r0
 800fb80:	460f      	mov	r7, r1
 800fb82:	e7c4      	b.n	800fb0e <_dtoa_r+0x53e>
 800fb84:	ec51 0b17 	vmov	r0, r1, d7
 800fb88:	f7f0 fd5e 	bl	8000648 <__aeabi_dmul>
 800fb8c:	9b02      	ldr	r3, [sp, #8]
 800fb8e:	9d00      	ldr	r5, [sp, #0]
 800fb90:	930c      	str	r3, [sp, #48]	; 0x30
 800fb92:	ec41 0b18 	vmov	d8, r0, r1
 800fb96:	4639      	mov	r1, r7
 800fb98:	4630      	mov	r0, r6
 800fb9a:	f7f1 f805 	bl	8000ba8 <__aeabi_d2iz>
 800fb9e:	9011      	str	r0, [sp, #68]	; 0x44
 800fba0:	f7f0 fce8 	bl	8000574 <__aeabi_i2d>
 800fba4:	4602      	mov	r2, r0
 800fba6:	460b      	mov	r3, r1
 800fba8:	4630      	mov	r0, r6
 800fbaa:	4639      	mov	r1, r7
 800fbac:	f7f0 fb94 	bl	80002d8 <__aeabi_dsub>
 800fbb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fbb2:	3330      	adds	r3, #48	; 0x30
 800fbb4:	f805 3b01 	strb.w	r3, [r5], #1
 800fbb8:	9b02      	ldr	r3, [sp, #8]
 800fbba:	429d      	cmp	r5, r3
 800fbbc:	4606      	mov	r6, r0
 800fbbe:	460f      	mov	r7, r1
 800fbc0:	f04f 0200 	mov.w	r2, #0
 800fbc4:	d134      	bne.n	800fc30 <_dtoa_r+0x660>
 800fbc6:	4b19      	ldr	r3, [pc, #100]	; (800fc2c <_dtoa_r+0x65c>)
 800fbc8:	ec51 0b18 	vmov	r0, r1, d8
 800fbcc:	f7f0 fb86 	bl	80002dc <__adddf3>
 800fbd0:	4602      	mov	r2, r0
 800fbd2:	460b      	mov	r3, r1
 800fbd4:	4630      	mov	r0, r6
 800fbd6:	4639      	mov	r1, r7
 800fbd8:	f7f0 ffc6 	bl	8000b68 <__aeabi_dcmpgt>
 800fbdc:	2800      	cmp	r0, #0
 800fbde:	d175      	bne.n	800fccc <_dtoa_r+0x6fc>
 800fbe0:	ec53 2b18 	vmov	r2, r3, d8
 800fbe4:	4911      	ldr	r1, [pc, #68]	; (800fc2c <_dtoa_r+0x65c>)
 800fbe6:	2000      	movs	r0, #0
 800fbe8:	f7f0 fb76 	bl	80002d8 <__aeabi_dsub>
 800fbec:	4602      	mov	r2, r0
 800fbee:	460b      	mov	r3, r1
 800fbf0:	4630      	mov	r0, r6
 800fbf2:	4639      	mov	r1, r7
 800fbf4:	f7f0 ff9a 	bl	8000b2c <__aeabi_dcmplt>
 800fbf8:	2800      	cmp	r0, #0
 800fbfa:	f43f af27 	beq.w	800fa4c <_dtoa_r+0x47c>
 800fbfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fc00:	1e6b      	subs	r3, r5, #1
 800fc02:	930c      	str	r3, [sp, #48]	; 0x30
 800fc04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fc08:	2b30      	cmp	r3, #48	; 0x30
 800fc0a:	d0f8      	beq.n	800fbfe <_dtoa_r+0x62e>
 800fc0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fc10:	e04a      	b.n	800fca8 <_dtoa_r+0x6d8>
 800fc12:	bf00      	nop
 800fc14:	08013788 	.word	0x08013788
 800fc18:	08013760 	.word	0x08013760
 800fc1c:	3ff00000 	.word	0x3ff00000
 800fc20:	40240000 	.word	0x40240000
 800fc24:	401c0000 	.word	0x401c0000
 800fc28:	40140000 	.word	0x40140000
 800fc2c:	3fe00000 	.word	0x3fe00000
 800fc30:	4baf      	ldr	r3, [pc, #700]	; (800fef0 <_dtoa_r+0x920>)
 800fc32:	f7f0 fd09 	bl	8000648 <__aeabi_dmul>
 800fc36:	4606      	mov	r6, r0
 800fc38:	460f      	mov	r7, r1
 800fc3a:	e7ac      	b.n	800fb96 <_dtoa_r+0x5c6>
 800fc3c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fc40:	9d00      	ldr	r5, [sp, #0]
 800fc42:	4642      	mov	r2, r8
 800fc44:	464b      	mov	r3, r9
 800fc46:	4630      	mov	r0, r6
 800fc48:	4639      	mov	r1, r7
 800fc4a:	f7f0 fe27 	bl	800089c <__aeabi_ddiv>
 800fc4e:	f7f0 ffab 	bl	8000ba8 <__aeabi_d2iz>
 800fc52:	9002      	str	r0, [sp, #8]
 800fc54:	f7f0 fc8e 	bl	8000574 <__aeabi_i2d>
 800fc58:	4642      	mov	r2, r8
 800fc5a:	464b      	mov	r3, r9
 800fc5c:	f7f0 fcf4 	bl	8000648 <__aeabi_dmul>
 800fc60:	4602      	mov	r2, r0
 800fc62:	460b      	mov	r3, r1
 800fc64:	4630      	mov	r0, r6
 800fc66:	4639      	mov	r1, r7
 800fc68:	f7f0 fb36 	bl	80002d8 <__aeabi_dsub>
 800fc6c:	9e02      	ldr	r6, [sp, #8]
 800fc6e:	9f01      	ldr	r7, [sp, #4]
 800fc70:	3630      	adds	r6, #48	; 0x30
 800fc72:	f805 6b01 	strb.w	r6, [r5], #1
 800fc76:	9e00      	ldr	r6, [sp, #0]
 800fc78:	1bae      	subs	r6, r5, r6
 800fc7a:	42b7      	cmp	r7, r6
 800fc7c:	4602      	mov	r2, r0
 800fc7e:	460b      	mov	r3, r1
 800fc80:	d137      	bne.n	800fcf2 <_dtoa_r+0x722>
 800fc82:	f7f0 fb2b 	bl	80002dc <__adddf3>
 800fc86:	4642      	mov	r2, r8
 800fc88:	464b      	mov	r3, r9
 800fc8a:	4606      	mov	r6, r0
 800fc8c:	460f      	mov	r7, r1
 800fc8e:	f7f0 ff6b 	bl	8000b68 <__aeabi_dcmpgt>
 800fc92:	b9c8      	cbnz	r0, 800fcc8 <_dtoa_r+0x6f8>
 800fc94:	4642      	mov	r2, r8
 800fc96:	464b      	mov	r3, r9
 800fc98:	4630      	mov	r0, r6
 800fc9a:	4639      	mov	r1, r7
 800fc9c:	f7f0 ff3c 	bl	8000b18 <__aeabi_dcmpeq>
 800fca0:	b110      	cbz	r0, 800fca8 <_dtoa_r+0x6d8>
 800fca2:	9b02      	ldr	r3, [sp, #8]
 800fca4:	07d9      	lsls	r1, r3, #31
 800fca6:	d40f      	bmi.n	800fcc8 <_dtoa_r+0x6f8>
 800fca8:	4620      	mov	r0, r4
 800fcaa:	4659      	mov	r1, fp
 800fcac:	f001 f868 	bl	8010d80 <_Bfree>
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	702b      	strb	r3, [r5, #0]
 800fcb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fcb6:	f10a 0001 	add.w	r0, sl, #1
 800fcba:	6018      	str	r0, [r3, #0]
 800fcbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	f43f acd8 	beq.w	800f674 <_dtoa_r+0xa4>
 800fcc4:	601d      	str	r5, [r3, #0]
 800fcc6:	e4d5      	b.n	800f674 <_dtoa_r+0xa4>
 800fcc8:	f8cd a01c 	str.w	sl, [sp, #28]
 800fccc:	462b      	mov	r3, r5
 800fcce:	461d      	mov	r5, r3
 800fcd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fcd4:	2a39      	cmp	r2, #57	; 0x39
 800fcd6:	d108      	bne.n	800fcea <_dtoa_r+0x71a>
 800fcd8:	9a00      	ldr	r2, [sp, #0]
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d1f7      	bne.n	800fcce <_dtoa_r+0x6fe>
 800fcde:	9a07      	ldr	r2, [sp, #28]
 800fce0:	9900      	ldr	r1, [sp, #0]
 800fce2:	3201      	adds	r2, #1
 800fce4:	9207      	str	r2, [sp, #28]
 800fce6:	2230      	movs	r2, #48	; 0x30
 800fce8:	700a      	strb	r2, [r1, #0]
 800fcea:	781a      	ldrb	r2, [r3, #0]
 800fcec:	3201      	adds	r2, #1
 800fcee:	701a      	strb	r2, [r3, #0]
 800fcf0:	e78c      	b.n	800fc0c <_dtoa_r+0x63c>
 800fcf2:	4b7f      	ldr	r3, [pc, #508]	; (800fef0 <_dtoa_r+0x920>)
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	f7f0 fca7 	bl	8000648 <__aeabi_dmul>
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	4606      	mov	r6, r0
 800fd00:	460f      	mov	r7, r1
 800fd02:	f7f0 ff09 	bl	8000b18 <__aeabi_dcmpeq>
 800fd06:	2800      	cmp	r0, #0
 800fd08:	d09b      	beq.n	800fc42 <_dtoa_r+0x672>
 800fd0a:	e7cd      	b.n	800fca8 <_dtoa_r+0x6d8>
 800fd0c:	9a08      	ldr	r2, [sp, #32]
 800fd0e:	2a00      	cmp	r2, #0
 800fd10:	f000 80c4 	beq.w	800fe9c <_dtoa_r+0x8cc>
 800fd14:	9a05      	ldr	r2, [sp, #20]
 800fd16:	2a01      	cmp	r2, #1
 800fd18:	f300 80a8 	bgt.w	800fe6c <_dtoa_r+0x89c>
 800fd1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fd1e:	2a00      	cmp	r2, #0
 800fd20:	f000 80a0 	beq.w	800fe64 <_dtoa_r+0x894>
 800fd24:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fd28:	9e06      	ldr	r6, [sp, #24]
 800fd2a:	4645      	mov	r5, r8
 800fd2c:	9a04      	ldr	r2, [sp, #16]
 800fd2e:	2101      	movs	r1, #1
 800fd30:	441a      	add	r2, r3
 800fd32:	4620      	mov	r0, r4
 800fd34:	4498      	add	r8, r3
 800fd36:	9204      	str	r2, [sp, #16]
 800fd38:	f001 f928 	bl	8010f8c <__i2b>
 800fd3c:	4607      	mov	r7, r0
 800fd3e:	2d00      	cmp	r5, #0
 800fd40:	dd0b      	ble.n	800fd5a <_dtoa_r+0x78a>
 800fd42:	9b04      	ldr	r3, [sp, #16]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	dd08      	ble.n	800fd5a <_dtoa_r+0x78a>
 800fd48:	42ab      	cmp	r3, r5
 800fd4a:	9a04      	ldr	r2, [sp, #16]
 800fd4c:	bfa8      	it	ge
 800fd4e:	462b      	movge	r3, r5
 800fd50:	eba8 0803 	sub.w	r8, r8, r3
 800fd54:	1aed      	subs	r5, r5, r3
 800fd56:	1ad3      	subs	r3, r2, r3
 800fd58:	9304      	str	r3, [sp, #16]
 800fd5a:	9b06      	ldr	r3, [sp, #24]
 800fd5c:	b1fb      	cbz	r3, 800fd9e <_dtoa_r+0x7ce>
 800fd5e:	9b08      	ldr	r3, [sp, #32]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	f000 809f 	beq.w	800fea4 <_dtoa_r+0x8d4>
 800fd66:	2e00      	cmp	r6, #0
 800fd68:	dd11      	ble.n	800fd8e <_dtoa_r+0x7be>
 800fd6a:	4639      	mov	r1, r7
 800fd6c:	4632      	mov	r2, r6
 800fd6e:	4620      	mov	r0, r4
 800fd70:	f001 f9c8 	bl	8011104 <__pow5mult>
 800fd74:	465a      	mov	r2, fp
 800fd76:	4601      	mov	r1, r0
 800fd78:	4607      	mov	r7, r0
 800fd7a:	4620      	mov	r0, r4
 800fd7c:	f001 f91c 	bl	8010fb8 <__multiply>
 800fd80:	4659      	mov	r1, fp
 800fd82:	9007      	str	r0, [sp, #28]
 800fd84:	4620      	mov	r0, r4
 800fd86:	f000 fffb 	bl	8010d80 <_Bfree>
 800fd8a:	9b07      	ldr	r3, [sp, #28]
 800fd8c:	469b      	mov	fp, r3
 800fd8e:	9b06      	ldr	r3, [sp, #24]
 800fd90:	1b9a      	subs	r2, r3, r6
 800fd92:	d004      	beq.n	800fd9e <_dtoa_r+0x7ce>
 800fd94:	4659      	mov	r1, fp
 800fd96:	4620      	mov	r0, r4
 800fd98:	f001 f9b4 	bl	8011104 <__pow5mult>
 800fd9c:	4683      	mov	fp, r0
 800fd9e:	2101      	movs	r1, #1
 800fda0:	4620      	mov	r0, r4
 800fda2:	f001 f8f3 	bl	8010f8c <__i2b>
 800fda6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	4606      	mov	r6, r0
 800fdac:	dd7c      	ble.n	800fea8 <_dtoa_r+0x8d8>
 800fdae:	461a      	mov	r2, r3
 800fdb0:	4601      	mov	r1, r0
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	f001 f9a6 	bl	8011104 <__pow5mult>
 800fdb8:	9b05      	ldr	r3, [sp, #20]
 800fdba:	2b01      	cmp	r3, #1
 800fdbc:	4606      	mov	r6, r0
 800fdbe:	dd76      	ble.n	800feae <_dtoa_r+0x8de>
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	9306      	str	r3, [sp, #24]
 800fdc4:	6933      	ldr	r3, [r6, #16]
 800fdc6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fdca:	6918      	ldr	r0, [r3, #16]
 800fdcc:	f001 f88e 	bl	8010eec <__hi0bits>
 800fdd0:	f1c0 0020 	rsb	r0, r0, #32
 800fdd4:	9b04      	ldr	r3, [sp, #16]
 800fdd6:	4418      	add	r0, r3
 800fdd8:	f010 001f 	ands.w	r0, r0, #31
 800fddc:	f000 8086 	beq.w	800feec <_dtoa_r+0x91c>
 800fde0:	f1c0 0320 	rsb	r3, r0, #32
 800fde4:	2b04      	cmp	r3, #4
 800fde6:	dd7f      	ble.n	800fee8 <_dtoa_r+0x918>
 800fde8:	f1c0 001c 	rsb	r0, r0, #28
 800fdec:	9b04      	ldr	r3, [sp, #16]
 800fdee:	4403      	add	r3, r0
 800fdf0:	4480      	add	r8, r0
 800fdf2:	4405      	add	r5, r0
 800fdf4:	9304      	str	r3, [sp, #16]
 800fdf6:	f1b8 0f00 	cmp.w	r8, #0
 800fdfa:	dd05      	ble.n	800fe08 <_dtoa_r+0x838>
 800fdfc:	4659      	mov	r1, fp
 800fdfe:	4642      	mov	r2, r8
 800fe00:	4620      	mov	r0, r4
 800fe02:	f001 f9d9 	bl	80111b8 <__lshift>
 800fe06:	4683      	mov	fp, r0
 800fe08:	9b04      	ldr	r3, [sp, #16]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	dd05      	ble.n	800fe1a <_dtoa_r+0x84a>
 800fe0e:	4631      	mov	r1, r6
 800fe10:	461a      	mov	r2, r3
 800fe12:	4620      	mov	r0, r4
 800fe14:	f001 f9d0 	bl	80111b8 <__lshift>
 800fe18:	4606      	mov	r6, r0
 800fe1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d069      	beq.n	800fef4 <_dtoa_r+0x924>
 800fe20:	4631      	mov	r1, r6
 800fe22:	4658      	mov	r0, fp
 800fe24:	f001 fa34 	bl	8011290 <__mcmp>
 800fe28:	2800      	cmp	r0, #0
 800fe2a:	da63      	bge.n	800fef4 <_dtoa_r+0x924>
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	4659      	mov	r1, fp
 800fe30:	220a      	movs	r2, #10
 800fe32:	4620      	mov	r0, r4
 800fe34:	f000 ffc6 	bl	8010dc4 <__multadd>
 800fe38:	9b08      	ldr	r3, [sp, #32]
 800fe3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fe3e:	4683      	mov	fp, r0
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	f000 818f 	beq.w	8010164 <_dtoa_r+0xb94>
 800fe46:	4639      	mov	r1, r7
 800fe48:	2300      	movs	r3, #0
 800fe4a:	220a      	movs	r2, #10
 800fe4c:	4620      	mov	r0, r4
 800fe4e:	f000 ffb9 	bl	8010dc4 <__multadd>
 800fe52:	f1b9 0f00 	cmp.w	r9, #0
 800fe56:	4607      	mov	r7, r0
 800fe58:	f300 808e 	bgt.w	800ff78 <_dtoa_r+0x9a8>
 800fe5c:	9b05      	ldr	r3, [sp, #20]
 800fe5e:	2b02      	cmp	r3, #2
 800fe60:	dc50      	bgt.n	800ff04 <_dtoa_r+0x934>
 800fe62:	e089      	b.n	800ff78 <_dtoa_r+0x9a8>
 800fe64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fe66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fe6a:	e75d      	b.n	800fd28 <_dtoa_r+0x758>
 800fe6c:	9b01      	ldr	r3, [sp, #4]
 800fe6e:	1e5e      	subs	r6, r3, #1
 800fe70:	9b06      	ldr	r3, [sp, #24]
 800fe72:	42b3      	cmp	r3, r6
 800fe74:	bfbf      	itttt	lt
 800fe76:	9b06      	ldrlt	r3, [sp, #24]
 800fe78:	9606      	strlt	r6, [sp, #24]
 800fe7a:	1af2      	sublt	r2, r6, r3
 800fe7c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800fe7e:	bfb6      	itet	lt
 800fe80:	189b      	addlt	r3, r3, r2
 800fe82:	1b9e      	subge	r6, r3, r6
 800fe84:	930d      	strlt	r3, [sp, #52]	; 0x34
 800fe86:	9b01      	ldr	r3, [sp, #4]
 800fe88:	bfb8      	it	lt
 800fe8a:	2600      	movlt	r6, #0
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	bfb5      	itete	lt
 800fe90:	eba8 0503 	sublt.w	r5, r8, r3
 800fe94:	9b01      	ldrge	r3, [sp, #4]
 800fe96:	2300      	movlt	r3, #0
 800fe98:	4645      	movge	r5, r8
 800fe9a:	e747      	b.n	800fd2c <_dtoa_r+0x75c>
 800fe9c:	9e06      	ldr	r6, [sp, #24]
 800fe9e:	9f08      	ldr	r7, [sp, #32]
 800fea0:	4645      	mov	r5, r8
 800fea2:	e74c      	b.n	800fd3e <_dtoa_r+0x76e>
 800fea4:	9a06      	ldr	r2, [sp, #24]
 800fea6:	e775      	b.n	800fd94 <_dtoa_r+0x7c4>
 800fea8:	9b05      	ldr	r3, [sp, #20]
 800feaa:	2b01      	cmp	r3, #1
 800feac:	dc18      	bgt.n	800fee0 <_dtoa_r+0x910>
 800feae:	9b02      	ldr	r3, [sp, #8]
 800feb0:	b9b3      	cbnz	r3, 800fee0 <_dtoa_r+0x910>
 800feb2:	9b03      	ldr	r3, [sp, #12]
 800feb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800feb8:	b9a3      	cbnz	r3, 800fee4 <_dtoa_r+0x914>
 800feba:	9b03      	ldr	r3, [sp, #12]
 800febc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fec0:	0d1b      	lsrs	r3, r3, #20
 800fec2:	051b      	lsls	r3, r3, #20
 800fec4:	b12b      	cbz	r3, 800fed2 <_dtoa_r+0x902>
 800fec6:	9b04      	ldr	r3, [sp, #16]
 800fec8:	3301      	adds	r3, #1
 800feca:	9304      	str	r3, [sp, #16]
 800fecc:	f108 0801 	add.w	r8, r8, #1
 800fed0:	2301      	movs	r3, #1
 800fed2:	9306      	str	r3, [sp, #24]
 800fed4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	f47f af74 	bne.w	800fdc4 <_dtoa_r+0x7f4>
 800fedc:	2001      	movs	r0, #1
 800fede:	e779      	b.n	800fdd4 <_dtoa_r+0x804>
 800fee0:	2300      	movs	r3, #0
 800fee2:	e7f6      	b.n	800fed2 <_dtoa_r+0x902>
 800fee4:	9b02      	ldr	r3, [sp, #8]
 800fee6:	e7f4      	b.n	800fed2 <_dtoa_r+0x902>
 800fee8:	d085      	beq.n	800fdf6 <_dtoa_r+0x826>
 800feea:	4618      	mov	r0, r3
 800feec:	301c      	adds	r0, #28
 800feee:	e77d      	b.n	800fdec <_dtoa_r+0x81c>
 800fef0:	40240000 	.word	0x40240000
 800fef4:	9b01      	ldr	r3, [sp, #4]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	dc38      	bgt.n	800ff6c <_dtoa_r+0x99c>
 800fefa:	9b05      	ldr	r3, [sp, #20]
 800fefc:	2b02      	cmp	r3, #2
 800fefe:	dd35      	ble.n	800ff6c <_dtoa_r+0x99c>
 800ff00:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ff04:	f1b9 0f00 	cmp.w	r9, #0
 800ff08:	d10d      	bne.n	800ff26 <_dtoa_r+0x956>
 800ff0a:	4631      	mov	r1, r6
 800ff0c:	464b      	mov	r3, r9
 800ff0e:	2205      	movs	r2, #5
 800ff10:	4620      	mov	r0, r4
 800ff12:	f000 ff57 	bl	8010dc4 <__multadd>
 800ff16:	4601      	mov	r1, r0
 800ff18:	4606      	mov	r6, r0
 800ff1a:	4658      	mov	r0, fp
 800ff1c:	f001 f9b8 	bl	8011290 <__mcmp>
 800ff20:	2800      	cmp	r0, #0
 800ff22:	f73f adbd 	bgt.w	800faa0 <_dtoa_r+0x4d0>
 800ff26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff28:	9d00      	ldr	r5, [sp, #0]
 800ff2a:	ea6f 0a03 	mvn.w	sl, r3
 800ff2e:	f04f 0800 	mov.w	r8, #0
 800ff32:	4631      	mov	r1, r6
 800ff34:	4620      	mov	r0, r4
 800ff36:	f000 ff23 	bl	8010d80 <_Bfree>
 800ff3a:	2f00      	cmp	r7, #0
 800ff3c:	f43f aeb4 	beq.w	800fca8 <_dtoa_r+0x6d8>
 800ff40:	f1b8 0f00 	cmp.w	r8, #0
 800ff44:	d005      	beq.n	800ff52 <_dtoa_r+0x982>
 800ff46:	45b8      	cmp	r8, r7
 800ff48:	d003      	beq.n	800ff52 <_dtoa_r+0x982>
 800ff4a:	4641      	mov	r1, r8
 800ff4c:	4620      	mov	r0, r4
 800ff4e:	f000 ff17 	bl	8010d80 <_Bfree>
 800ff52:	4639      	mov	r1, r7
 800ff54:	4620      	mov	r0, r4
 800ff56:	f000 ff13 	bl	8010d80 <_Bfree>
 800ff5a:	e6a5      	b.n	800fca8 <_dtoa_r+0x6d8>
 800ff5c:	2600      	movs	r6, #0
 800ff5e:	4637      	mov	r7, r6
 800ff60:	e7e1      	b.n	800ff26 <_dtoa_r+0x956>
 800ff62:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ff64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ff68:	4637      	mov	r7, r6
 800ff6a:	e599      	b.n	800faa0 <_dtoa_r+0x4d0>
 800ff6c:	9b08      	ldr	r3, [sp, #32]
 800ff6e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	f000 80fd 	beq.w	8010172 <_dtoa_r+0xba2>
 800ff78:	2d00      	cmp	r5, #0
 800ff7a:	dd05      	ble.n	800ff88 <_dtoa_r+0x9b8>
 800ff7c:	4639      	mov	r1, r7
 800ff7e:	462a      	mov	r2, r5
 800ff80:	4620      	mov	r0, r4
 800ff82:	f001 f919 	bl	80111b8 <__lshift>
 800ff86:	4607      	mov	r7, r0
 800ff88:	9b06      	ldr	r3, [sp, #24]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d05c      	beq.n	8010048 <_dtoa_r+0xa78>
 800ff8e:	6879      	ldr	r1, [r7, #4]
 800ff90:	4620      	mov	r0, r4
 800ff92:	f000 feb5 	bl	8010d00 <_Balloc>
 800ff96:	4605      	mov	r5, r0
 800ff98:	b928      	cbnz	r0, 800ffa6 <_dtoa_r+0x9d6>
 800ff9a:	4b80      	ldr	r3, [pc, #512]	; (801019c <_dtoa_r+0xbcc>)
 800ff9c:	4602      	mov	r2, r0
 800ff9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ffa2:	f7ff bb2e 	b.w	800f602 <_dtoa_r+0x32>
 800ffa6:	693a      	ldr	r2, [r7, #16]
 800ffa8:	3202      	adds	r2, #2
 800ffaa:	0092      	lsls	r2, r2, #2
 800ffac:	f107 010c 	add.w	r1, r7, #12
 800ffb0:	300c      	adds	r0, #12
 800ffb2:	f7fd fdd9 	bl	800db68 <memcpy>
 800ffb6:	2201      	movs	r2, #1
 800ffb8:	4629      	mov	r1, r5
 800ffba:	4620      	mov	r0, r4
 800ffbc:	f001 f8fc 	bl	80111b8 <__lshift>
 800ffc0:	9b00      	ldr	r3, [sp, #0]
 800ffc2:	3301      	adds	r3, #1
 800ffc4:	9301      	str	r3, [sp, #4]
 800ffc6:	9b00      	ldr	r3, [sp, #0]
 800ffc8:	444b      	add	r3, r9
 800ffca:	9307      	str	r3, [sp, #28]
 800ffcc:	9b02      	ldr	r3, [sp, #8]
 800ffce:	f003 0301 	and.w	r3, r3, #1
 800ffd2:	46b8      	mov	r8, r7
 800ffd4:	9306      	str	r3, [sp, #24]
 800ffd6:	4607      	mov	r7, r0
 800ffd8:	9b01      	ldr	r3, [sp, #4]
 800ffda:	4631      	mov	r1, r6
 800ffdc:	3b01      	subs	r3, #1
 800ffde:	4658      	mov	r0, fp
 800ffe0:	9302      	str	r3, [sp, #8]
 800ffe2:	f7ff fa69 	bl	800f4b8 <quorem>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	3330      	adds	r3, #48	; 0x30
 800ffea:	9004      	str	r0, [sp, #16]
 800ffec:	4641      	mov	r1, r8
 800ffee:	4658      	mov	r0, fp
 800fff0:	9308      	str	r3, [sp, #32]
 800fff2:	f001 f94d 	bl	8011290 <__mcmp>
 800fff6:	463a      	mov	r2, r7
 800fff8:	4681      	mov	r9, r0
 800fffa:	4631      	mov	r1, r6
 800fffc:	4620      	mov	r0, r4
 800fffe:	f001 f963 	bl	80112c8 <__mdiff>
 8010002:	68c2      	ldr	r2, [r0, #12]
 8010004:	9b08      	ldr	r3, [sp, #32]
 8010006:	4605      	mov	r5, r0
 8010008:	bb02      	cbnz	r2, 801004c <_dtoa_r+0xa7c>
 801000a:	4601      	mov	r1, r0
 801000c:	4658      	mov	r0, fp
 801000e:	f001 f93f 	bl	8011290 <__mcmp>
 8010012:	9b08      	ldr	r3, [sp, #32]
 8010014:	4602      	mov	r2, r0
 8010016:	4629      	mov	r1, r5
 8010018:	4620      	mov	r0, r4
 801001a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801001e:	f000 feaf 	bl	8010d80 <_Bfree>
 8010022:	9b05      	ldr	r3, [sp, #20]
 8010024:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010026:	9d01      	ldr	r5, [sp, #4]
 8010028:	ea43 0102 	orr.w	r1, r3, r2
 801002c:	9b06      	ldr	r3, [sp, #24]
 801002e:	430b      	orrs	r3, r1
 8010030:	9b08      	ldr	r3, [sp, #32]
 8010032:	d10d      	bne.n	8010050 <_dtoa_r+0xa80>
 8010034:	2b39      	cmp	r3, #57	; 0x39
 8010036:	d029      	beq.n	801008c <_dtoa_r+0xabc>
 8010038:	f1b9 0f00 	cmp.w	r9, #0
 801003c:	dd01      	ble.n	8010042 <_dtoa_r+0xa72>
 801003e:	9b04      	ldr	r3, [sp, #16]
 8010040:	3331      	adds	r3, #49	; 0x31
 8010042:	9a02      	ldr	r2, [sp, #8]
 8010044:	7013      	strb	r3, [r2, #0]
 8010046:	e774      	b.n	800ff32 <_dtoa_r+0x962>
 8010048:	4638      	mov	r0, r7
 801004a:	e7b9      	b.n	800ffc0 <_dtoa_r+0x9f0>
 801004c:	2201      	movs	r2, #1
 801004e:	e7e2      	b.n	8010016 <_dtoa_r+0xa46>
 8010050:	f1b9 0f00 	cmp.w	r9, #0
 8010054:	db06      	blt.n	8010064 <_dtoa_r+0xa94>
 8010056:	9905      	ldr	r1, [sp, #20]
 8010058:	ea41 0909 	orr.w	r9, r1, r9
 801005c:	9906      	ldr	r1, [sp, #24]
 801005e:	ea59 0101 	orrs.w	r1, r9, r1
 8010062:	d120      	bne.n	80100a6 <_dtoa_r+0xad6>
 8010064:	2a00      	cmp	r2, #0
 8010066:	ddec      	ble.n	8010042 <_dtoa_r+0xa72>
 8010068:	4659      	mov	r1, fp
 801006a:	2201      	movs	r2, #1
 801006c:	4620      	mov	r0, r4
 801006e:	9301      	str	r3, [sp, #4]
 8010070:	f001 f8a2 	bl	80111b8 <__lshift>
 8010074:	4631      	mov	r1, r6
 8010076:	4683      	mov	fp, r0
 8010078:	f001 f90a 	bl	8011290 <__mcmp>
 801007c:	2800      	cmp	r0, #0
 801007e:	9b01      	ldr	r3, [sp, #4]
 8010080:	dc02      	bgt.n	8010088 <_dtoa_r+0xab8>
 8010082:	d1de      	bne.n	8010042 <_dtoa_r+0xa72>
 8010084:	07da      	lsls	r2, r3, #31
 8010086:	d5dc      	bpl.n	8010042 <_dtoa_r+0xa72>
 8010088:	2b39      	cmp	r3, #57	; 0x39
 801008a:	d1d8      	bne.n	801003e <_dtoa_r+0xa6e>
 801008c:	9a02      	ldr	r2, [sp, #8]
 801008e:	2339      	movs	r3, #57	; 0x39
 8010090:	7013      	strb	r3, [r2, #0]
 8010092:	462b      	mov	r3, r5
 8010094:	461d      	mov	r5, r3
 8010096:	3b01      	subs	r3, #1
 8010098:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801009c:	2a39      	cmp	r2, #57	; 0x39
 801009e:	d050      	beq.n	8010142 <_dtoa_r+0xb72>
 80100a0:	3201      	adds	r2, #1
 80100a2:	701a      	strb	r2, [r3, #0]
 80100a4:	e745      	b.n	800ff32 <_dtoa_r+0x962>
 80100a6:	2a00      	cmp	r2, #0
 80100a8:	dd03      	ble.n	80100b2 <_dtoa_r+0xae2>
 80100aa:	2b39      	cmp	r3, #57	; 0x39
 80100ac:	d0ee      	beq.n	801008c <_dtoa_r+0xabc>
 80100ae:	3301      	adds	r3, #1
 80100b0:	e7c7      	b.n	8010042 <_dtoa_r+0xa72>
 80100b2:	9a01      	ldr	r2, [sp, #4]
 80100b4:	9907      	ldr	r1, [sp, #28]
 80100b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80100ba:	428a      	cmp	r2, r1
 80100bc:	d02a      	beq.n	8010114 <_dtoa_r+0xb44>
 80100be:	4659      	mov	r1, fp
 80100c0:	2300      	movs	r3, #0
 80100c2:	220a      	movs	r2, #10
 80100c4:	4620      	mov	r0, r4
 80100c6:	f000 fe7d 	bl	8010dc4 <__multadd>
 80100ca:	45b8      	cmp	r8, r7
 80100cc:	4683      	mov	fp, r0
 80100ce:	f04f 0300 	mov.w	r3, #0
 80100d2:	f04f 020a 	mov.w	r2, #10
 80100d6:	4641      	mov	r1, r8
 80100d8:	4620      	mov	r0, r4
 80100da:	d107      	bne.n	80100ec <_dtoa_r+0xb1c>
 80100dc:	f000 fe72 	bl	8010dc4 <__multadd>
 80100e0:	4680      	mov	r8, r0
 80100e2:	4607      	mov	r7, r0
 80100e4:	9b01      	ldr	r3, [sp, #4]
 80100e6:	3301      	adds	r3, #1
 80100e8:	9301      	str	r3, [sp, #4]
 80100ea:	e775      	b.n	800ffd8 <_dtoa_r+0xa08>
 80100ec:	f000 fe6a 	bl	8010dc4 <__multadd>
 80100f0:	4639      	mov	r1, r7
 80100f2:	4680      	mov	r8, r0
 80100f4:	2300      	movs	r3, #0
 80100f6:	220a      	movs	r2, #10
 80100f8:	4620      	mov	r0, r4
 80100fa:	f000 fe63 	bl	8010dc4 <__multadd>
 80100fe:	4607      	mov	r7, r0
 8010100:	e7f0      	b.n	80100e4 <_dtoa_r+0xb14>
 8010102:	f1b9 0f00 	cmp.w	r9, #0
 8010106:	9a00      	ldr	r2, [sp, #0]
 8010108:	bfcc      	ite	gt
 801010a:	464d      	movgt	r5, r9
 801010c:	2501      	movle	r5, #1
 801010e:	4415      	add	r5, r2
 8010110:	f04f 0800 	mov.w	r8, #0
 8010114:	4659      	mov	r1, fp
 8010116:	2201      	movs	r2, #1
 8010118:	4620      	mov	r0, r4
 801011a:	9301      	str	r3, [sp, #4]
 801011c:	f001 f84c 	bl	80111b8 <__lshift>
 8010120:	4631      	mov	r1, r6
 8010122:	4683      	mov	fp, r0
 8010124:	f001 f8b4 	bl	8011290 <__mcmp>
 8010128:	2800      	cmp	r0, #0
 801012a:	dcb2      	bgt.n	8010092 <_dtoa_r+0xac2>
 801012c:	d102      	bne.n	8010134 <_dtoa_r+0xb64>
 801012e:	9b01      	ldr	r3, [sp, #4]
 8010130:	07db      	lsls	r3, r3, #31
 8010132:	d4ae      	bmi.n	8010092 <_dtoa_r+0xac2>
 8010134:	462b      	mov	r3, r5
 8010136:	461d      	mov	r5, r3
 8010138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801013c:	2a30      	cmp	r2, #48	; 0x30
 801013e:	d0fa      	beq.n	8010136 <_dtoa_r+0xb66>
 8010140:	e6f7      	b.n	800ff32 <_dtoa_r+0x962>
 8010142:	9a00      	ldr	r2, [sp, #0]
 8010144:	429a      	cmp	r2, r3
 8010146:	d1a5      	bne.n	8010094 <_dtoa_r+0xac4>
 8010148:	f10a 0a01 	add.w	sl, sl, #1
 801014c:	2331      	movs	r3, #49	; 0x31
 801014e:	e779      	b.n	8010044 <_dtoa_r+0xa74>
 8010150:	4b13      	ldr	r3, [pc, #76]	; (80101a0 <_dtoa_r+0xbd0>)
 8010152:	f7ff baaf 	b.w	800f6b4 <_dtoa_r+0xe4>
 8010156:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010158:	2b00      	cmp	r3, #0
 801015a:	f47f aa86 	bne.w	800f66a <_dtoa_r+0x9a>
 801015e:	4b11      	ldr	r3, [pc, #68]	; (80101a4 <_dtoa_r+0xbd4>)
 8010160:	f7ff baa8 	b.w	800f6b4 <_dtoa_r+0xe4>
 8010164:	f1b9 0f00 	cmp.w	r9, #0
 8010168:	dc03      	bgt.n	8010172 <_dtoa_r+0xba2>
 801016a:	9b05      	ldr	r3, [sp, #20]
 801016c:	2b02      	cmp	r3, #2
 801016e:	f73f aec9 	bgt.w	800ff04 <_dtoa_r+0x934>
 8010172:	9d00      	ldr	r5, [sp, #0]
 8010174:	4631      	mov	r1, r6
 8010176:	4658      	mov	r0, fp
 8010178:	f7ff f99e 	bl	800f4b8 <quorem>
 801017c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010180:	f805 3b01 	strb.w	r3, [r5], #1
 8010184:	9a00      	ldr	r2, [sp, #0]
 8010186:	1aaa      	subs	r2, r5, r2
 8010188:	4591      	cmp	r9, r2
 801018a:	ddba      	ble.n	8010102 <_dtoa_r+0xb32>
 801018c:	4659      	mov	r1, fp
 801018e:	2300      	movs	r3, #0
 8010190:	220a      	movs	r2, #10
 8010192:	4620      	mov	r0, r4
 8010194:	f000 fe16 	bl	8010dc4 <__multadd>
 8010198:	4683      	mov	fp, r0
 801019a:	e7eb      	b.n	8010174 <_dtoa_r+0xba4>
 801019c:	0801360c 	.word	0x0801360c
 80101a0:	08013410 	.word	0x08013410
 80101a4:	08013589 	.word	0x08013589

080101a8 <__sflush_r>:
 80101a8:	898a      	ldrh	r2, [r1, #12]
 80101aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101ae:	4605      	mov	r5, r0
 80101b0:	0710      	lsls	r0, r2, #28
 80101b2:	460c      	mov	r4, r1
 80101b4:	d458      	bmi.n	8010268 <__sflush_r+0xc0>
 80101b6:	684b      	ldr	r3, [r1, #4]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	dc05      	bgt.n	80101c8 <__sflush_r+0x20>
 80101bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80101be:	2b00      	cmp	r3, #0
 80101c0:	dc02      	bgt.n	80101c8 <__sflush_r+0x20>
 80101c2:	2000      	movs	r0, #0
 80101c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101ca:	2e00      	cmp	r6, #0
 80101cc:	d0f9      	beq.n	80101c2 <__sflush_r+0x1a>
 80101ce:	2300      	movs	r3, #0
 80101d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80101d4:	682f      	ldr	r7, [r5, #0]
 80101d6:	602b      	str	r3, [r5, #0]
 80101d8:	d032      	beq.n	8010240 <__sflush_r+0x98>
 80101da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80101dc:	89a3      	ldrh	r3, [r4, #12]
 80101de:	075a      	lsls	r2, r3, #29
 80101e0:	d505      	bpl.n	80101ee <__sflush_r+0x46>
 80101e2:	6863      	ldr	r3, [r4, #4]
 80101e4:	1ac0      	subs	r0, r0, r3
 80101e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80101e8:	b10b      	cbz	r3, 80101ee <__sflush_r+0x46>
 80101ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80101ec:	1ac0      	subs	r0, r0, r3
 80101ee:	2300      	movs	r3, #0
 80101f0:	4602      	mov	r2, r0
 80101f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101f4:	6a21      	ldr	r1, [r4, #32]
 80101f6:	4628      	mov	r0, r5
 80101f8:	47b0      	blx	r6
 80101fa:	1c43      	adds	r3, r0, #1
 80101fc:	89a3      	ldrh	r3, [r4, #12]
 80101fe:	d106      	bne.n	801020e <__sflush_r+0x66>
 8010200:	6829      	ldr	r1, [r5, #0]
 8010202:	291d      	cmp	r1, #29
 8010204:	d82c      	bhi.n	8010260 <__sflush_r+0xb8>
 8010206:	4a2a      	ldr	r2, [pc, #168]	; (80102b0 <__sflush_r+0x108>)
 8010208:	40ca      	lsrs	r2, r1
 801020a:	07d6      	lsls	r6, r2, #31
 801020c:	d528      	bpl.n	8010260 <__sflush_r+0xb8>
 801020e:	2200      	movs	r2, #0
 8010210:	6062      	str	r2, [r4, #4]
 8010212:	04d9      	lsls	r1, r3, #19
 8010214:	6922      	ldr	r2, [r4, #16]
 8010216:	6022      	str	r2, [r4, #0]
 8010218:	d504      	bpl.n	8010224 <__sflush_r+0x7c>
 801021a:	1c42      	adds	r2, r0, #1
 801021c:	d101      	bne.n	8010222 <__sflush_r+0x7a>
 801021e:	682b      	ldr	r3, [r5, #0]
 8010220:	b903      	cbnz	r3, 8010224 <__sflush_r+0x7c>
 8010222:	6560      	str	r0, [r4, #84]	; 0x54
 8010224:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010226:	602f      	str	r7, [r5, #0]
 8010228:	2900      	cmp	r1, #0
 801022a:	d0ca      	beq.n	80101c2 <__sflush_r+0x1a>
 801022c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010230:	4299      	cmp	r1, r3
 8010232:	d002      	beq.n	801023a <__sflush_r+0x92>
 8010234:	4628      	mov	r0, r5
 8010236:	f001 fa2d 	bl	8011694 <_free_r>
 801023a:	2000      	movs	r0, #0
 801023c:	6360      	str	r0, [r4, #52]	; 0x34
 801023e:	e7c1      	b.n	80101c4 <__sflush_r+0x1c>
 8010240:	6a21      	ldr	r1, [r4, #32]
 8010242:	2301      	movs	r3, #1
 8010244:	4628      	mov	r0, r5
 8010246:	47b0      	blx	r6
 8010248:	1c41      	adds	r1, r0, #1
 801024a:	d1c7      	bne.n	80101dc <__sflush_r+0x34>
 801024c:	682b      	ldr	r3, [r5, #0]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d0c4      	beq.n	80101dc <__sflush_r+0x34>
 8010252:	2b1d      	cmp	r3, #29
 8010254:	d001      	beq.n	801025a <__sflush_r+0xb2>
 8010256:	2b16      	cmp	r3, #22
 8010258:	d101      	bne.n	801025e <__sflush_r+0xb6>
 801025a:	602f      	str	r7, [r5, #0]
 801025c:	e7b1      	b.n	80101c2 <__sflush_r+0x1a>
 801025e:	89a3      	ldrh	r3, [r4, #12]
 8010260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010264:	81a3      	strh	r3, [r4, #12]
 8010266:	e7ad      	b.n	80101c4 <__sflush_r+0x1c>
 8010268:	690f      	ldr	r7, [r1, #16]
 801026a:	2f00      	cmp	r7, #0
 801026c:	d0a9      	beq.n	80101c2 <__sflush_r+0x1a>
 801026e:	0793      	lsls	r3, r2, #30
 8010270:	680e      	ldr	r6, [r1, #0]
 8010272:	bf08      	it	eq
 8010274:	694b      	ldreq	r3, [r1, #20]
 8010276:	600f      	str	r7, [r1, #0]
 8010278:	bf18      	it	ne
 801027a:	2300      	movne	r3, #0
 801027c:	eba6 0807 	sub.w	r8, r6, r7
 8010280:	608b      	str	r3, [r1, #8]
 8010282:	f1b8 0f00 	cmp.w	r8, #0
 8010286:	dd9c      	ble.n	80101c2 <__sflush_r+0x1a>
 8010288:	6a21      	ldr	r1, [r4, #32]
 801028a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801028c:	4643      	mov	r3, r8
 801028e:	463a      	mov	r2, r7
 8010290:	4628      	mov	r0, r5
 8010292:	47b0      	blx	r6
 8010294:	2800      	cmp	r0, #0
 8010296:	dc06      	bgt.n	80102a6 <__sflush_r+0xfe>
 8010298:	89a3      	ldrh	r3, [r4, #12]
 801029a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801029e:	81a3      	strh	r3, [r4, #12]
 80102a0:	f04f 30ff 	mov.w	r0, #4294967295
 80102a4:	e78e      	b.n	80101c4 <__sflush_r+0x1c>
 80102a6:	4407      	add	r7, r0
 80102a8:	eba8 0800 	sub.w	r8, r8, r0
 80102ac:	e7e9      	b.n	8010282 <__sflush_r+0xda>
 80102ae:	bf00      	nop
 80102b0:	20400001 	.word	0x20400001

080102b4 <_fflush_r>:
 80102b4:	b538      	push	{r3, r4, r5, lr}
 80102b6:	690b      	ldr	r3, [r1, #16]
 80102b8:	4605      	mov	r5, r0
 80102ba:	460c      	mov	r4, r1
 80102bc:	b913      	cbnz	r3, 80102c4 <_fflush_r+0x10>
 80102be:	2500      	movs	r5, #0
 80102c0:	4628      	mov	r0, r5
 80102c2:	bd38      	pop	{r3, r4, r5, pc}
 80102c4:	b118      	cbz	r0, 80102ce <_fflush_r+0x1a>
 80102c6:	6983      	ldr	r3, [r0, #24]
 80102c8:	b90b      	cbnz	r3, 80102ce <_fflush_r+0x1a>
 80102ca:	f000 f887 	bl	80103dc <__sinit>
 80102ce:	4b14      	ldr	r3, [pc, #80]	; (8010320 <_fflush_r+0x6c>)
 80102d0:	429c      	cmp	r4, r3
 80102d2:	d11b      	bne.n	801030c <_fflush_r+0x58>
 80102d4:	686c      	ldr	r4, [r5, #4]
 80102d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d0ef      	beq.n	80102be <_fflush_r+0xa>
 80102de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80102e0:	07d0      	lsls	r0, r2, #31
 80102e2:	d404      	bmi.n	80102ee <_fflush_r+0x3a>
 80102e4:	0599      	lsls	r1, r3, #22
 80102e6:	d402      	bmi.n	80102ee <_fflush_r+0x3a>
 80102e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102ea:	f000 fc88 	bl	8010bfe <__retarget_lock_acquire_recursive>
 80102ee:	4628      	mov	r0, r5
 80102f0:	4621      	mov	r1, r4
 80102f2:	f7ff ff59 	bl	80101a8 <__sflush_r>
 80102f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80102f8:	07da      	lsls	r2, r3, #31
 80102fa:	4605      	mov	r5, r0
 80102fc:	d4e0      	bmi.n	80102c0 <_fflush_r+0xc>
 80102fe:	89a3      	ldrh	r3, [r4, #12]
 8010300:	059b      	lsls	r3, r3, #22
 8010302:	d4dd      	bmi.n	80102c0 <_fflush_r+0xc>
 8010304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010306:	f000 fc7b 	bl	8010c00 <__retarget_lock_release_recursive>
 801030a:	e7d9      	b.n	80102c0 <_fflush_r+0xc>
 801030c:	4b05      	ldr	r3, [pc, #20]	; (8010324 <_fflush_r+0x70>)
 801030e:	429c      	cmp	r4, r3
 8010310:	d101      	bne.n	8010316 <_fflush_r+0x62>
 8010312:	68ac      	ldr	r4, [r5, #8]
 8010314:	e7df      	b.n	80102d6 <_fflush_r+0x22>
 8010316:	4b04      	ldr	r3, [pc, #16]	; (8010328 <_fflush_r+0x74>)
 8010318:	429c      	cmp	r4, r3
 801031a:	bf08      	it	eq
 801031c:	68ec      	ldreq	r4, [r5, #12]
 801031e:	e7da      	b.n	80102d6 <_fflush_r+0x22>
 8010320:	08013640 	.word	0x08013640
 8010324:	08013660 	.word	0x08013660
 8010328:	08013620 	.word	0x08013620

0801032c <std>:
 801032c:	2300      	movs	r3, #0
 801032e:	b510      	push	{r4, lr}
 8010330:	4604      	mov	r4, r0
 8010332:	e9c0 3300 	strd	r3, r3, [r0]
 8010336:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801033a:	6083      	str	r3, [r0, #8]
 801033c:	8181      	strh	r1, [r0, #12]
 801033e:	6643      	str	r3, [r0, #100]	; 0x64
 8010340:	81c2      	strh	r2, [r0, #14]
 8010342:	6183      	str	r3, [r0, #24]
 8010344:	4619      	mov	r1, r3
 8010346:	2208      	movs	r2, #8
 8010348:	305c      	adds	r0, #92	; 0x5c
 801034a:	f7fd fc35 	bl	800dbb8 <memset>
 801034e:	4b05      	ldr	r3, [pc, #20]	; (8010364 <std+0x38>)
 8010350:	6263      	str	r3, [r4, #36]	; 0x24
 8010352:	4b05      	ldr	r3, [pc, #20]	; (8010368 <std+0x3c>)
 8010354:	62a3      	str	r3, [r4, #40]	; 0x28
 8010356:	4b05      	ldr	r3, [pc, #20]	; (801036c <std+0x40>)
 8010358:	62e3      	str	r3, [r4, #44]	; 0x2c
 801035a:	4b05      	ldr	r3, [pc, #20]	; (8010370 <std+0x44>)
 801035c:	6224      	str	r4, [r4, #32]
 801035e:	6323      	str	r3, [r4, #48]	; 0x30
 8010360:	bd10      	pop	{r4, pc}
 8010362:	bf00      	nop
 8010364:	08011ad1 	.word	0x08011ad1
 8010368:	08011af3 	.word	0x08011af3
 801036c:	08011b2b 	.word	0x08011b2b
 8010370:	08011b4f 	.word	0x08011b4f

08010374 <_cleanup_r>:
 8010374:	4901      	ldr	r1, [pc, #4]	; (801037c <_cleanup_r+0x8>)
 8010376:	f000 b8af 	b.w	80104d8 <_fwalk_reent>
 801037a:	bf00      	nop
 801037c:	080102b5 	.word	0x080102b5

08010380 <__sfmoreglue>:
 8010380:	b570      	push	{r4, r5, r6, lr}
 8010382:	1e4a      	subs	r2, r1, #1
 8010384:	2568      	movs	r5, #104	; 0x68
 8010386:	4355      	muls	r5, r2
 8010388:	460e      	mov	r6, r1
 801038a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801038e:	f001 f9d1 	bl	8011734 <_malloc_r>
 8010392:	4604      	mov	r4, r0
 8010394:	b140      	cbz	r0, 80103a8 <__sfmoreglue+0x28>
 8010396:	2100      	movs	r1, #0
 8010398:	e9c0 1600 	strd	r1, r6, [r0]
 801039c:	300c      	adds	r0, #12
 801039e:	60a0      	str	r0, [r4, #8]
 80103a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80103a4:	f7fd fc08 	bl	800dbb8 <memset>
 80103a8:	4620      	mov	r0, r4
 80103aa:	bd70      	pop	{r4, r5, r6, pc}

080103ac <__sfp_lock_acquire>:
 80103ac:	4801      	ldr	r0, [pc, #4]	; (80103b4 <__sfp_lock_acquire+0x8>)
 80103ae:	f000 bc26 	b.w	8010bfe <__retarget_lock_acquire_recursive>
 80103b2:	bf00      	nop
 80103b4:	200054c4 	.word	0x200054c4

080103b8 <__sfp_lock_release>:
 80103b8:	4801      	ldr	r0, [pc, #4]	; (80103c0 <__sfp_lock_release+0x8>)
 80103ba:	f000 bc21 	b.w	8010c00 <__retarget_lock_release_recursive>
 80103be:	bf00      	nop
 80103c0:	200054c4 	.word	0x200054c4

080103c4 <__sinit_lock_acquire>:
 80103c4:	4801      	ldr	r0, [pc, #4]	; (80103cc <__sinit_lock_acquire+0x8>)
 80103c6:	f000 bc1a 	b.w	8010bfe <__retarget_lock_acquire_recursive>
 80103ca:	bf00      	nop
 80103cc:	200054bf 	.word	0x200054bf

080103d0 <__sinit_lock_release>:
 80103d0:	4801      	ldr	r0, [pc, #4]	; (80103d8 <__sinit_lock_release+0x8>)
 80103d2:	f000 bc15 	b.w	8010c00 <__retarget_lock_release_recursive>
 80103d6:	bf00      	nop
 80103d8:	200054bf 	.word	0x200054bf

080103dc <__sinit>:
 80103dc:	b510      	push	{r4, lr}
 80103de:	4604      	mov	r4, r0
 80103e0:	f7ff fff0 	bl	80103c4 <__sinit_lock_acquire>
 80103e4:	69a3      	ldr	r3, [r4, #24]
 80103e6:	b11b      	cbz	r3, 80103f0 <__sinit+0x14>
 80103e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103ec:	f7ff bff0 	b.w	80103d0 <__sinit_lock_release>
 80103f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80103f4:	6523      	str	r3, [r4, #80]	; 0x50
 80103f6:	4b13      	ldr	r3, [pc, #76]	; (8010444 <__sinit+0x68>)
 80103f8:	4a13      	ldr	r2, [pc, #76]	; (8010448 <__sinit+0x6c>)
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80103fe:	42a3      	cmp	r3, r4
 8010400:	bf04      	itt	eq
 8010402:	2301      	moveq	r3, #1
 8010404:	61a3      	streq	r3, [r4, #24]
 8010406:	4620      	mov	r0, r4
 8010408:	f000 f820 	bl	801044c <__sfp>
 801040c:	6060      	str	r0, [r4, #4]
 801040e:	4620      	mov	r0, r4
 8010410:	f000 f81c 	bl	801044c <__sfp>
 8010414:	60a0      	str	r0, [r4, #8]
 8010416:	4620      	mov	r0, r4
 8010418:	f000 f818 	bl	801044c <__sfp>
 801041c:	2200      	movs	r2, #0
 801041e:	60e0      	str	r0, [r4, #12]
 8010420:	2104      	movs	r1, #4
 8010422:	6860      	ldr	r0, [r4, #4]
 8010424:	f7ff ff82 	bl	801032c <std>
 8010428:	68a0      	ldr	r0, [r4, #8]
 801042a:	2201      	movs	r2, #1
 801042c:	2109      	movs	r1, #9
 801042e:	f7ff ff7d 	bl	801032c <std>
 8010432:	68e0      	ldr	r0, [r4, #12]
 8010434:	2202      	movs	r2, #2
 8010436:	2112      	movs	r1, #18
 8010438:	f7ff ff78 	bl	801032c <std>
 801043c:	2301      	movs	r3, #1
 801043e:	61a3      	str	r3, [r4, #24]
 8010440:	e7d2      	b.n	80103e8 <__sinit+0xc>
 8010442:	bf00      	nop
 8010444:	080133fc 	.word	0x080133fc
 8010448:	08010375 	.word	0x08010375

0801044c <__sfp>:
 801044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801044e:	4607      	mov	r7, r0
 8010450:	f7ff ffac 	bl	80103ac <__sfp_lock_acquire>
 8010454:	4b1e      	ldr	r3, [pc, #120]	; (80104d0 <__sfp+0x84>)
 8010456:	681e      	ldr	r6, [r3, #0]
 8010458:	69b3      	ldr	r3, [r6, #24]
 801045a:	b913      	cbnz	r3, 8010462 <__sfp+0x16>
 801045c:	4630      	mov	r0, r6
 801045e:	f7ff ffbd 	bl	80103dc <__sinit>
 8010462:	3648      	adds	r6, #72	; 0x48
 8010464:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010468:	3b01      	subs	r3, #1
 801046a:	d503      	bpl.n	8010474 <__sfp+0x28>
 801046c:	6833      	ldr	r3, [r6, #0]
 801046e:	b30b      	cbz	r3, 80104b4 <__sfp+0x68>
 8010470:	6836      	ldr	r6, [r6, #0]
 8010472:	e7f7      	b.n	8010464 <__sfp+0x18>
 8010474:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010478:	b9d5      	cbnz	r5, 80104b0 <__sfp+0x64>
 801047a:	4b16      	ldr	r3, [pc, #88]	; (80104d4 <__sfp+0x88>)
 801047c:	60e3      	str	r3, [r4, #12]
 801047e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010482:	6665      	str	r5, [r4, #100]	; 0x64
 8010484:	f000 fbba 	bl	8010bfc <__retarget_lock_init_recursive>
 8010488:	f7ff ff96 	bl	80103b8 <__sfp_lock_release>
 801048c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010490:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010494:	6025      	str	r5, [r4, #0]
 8010496:	61a5      	str	r5, [r4, #24]
 8010498:	2208      	movs	r2, #8
 801049a:	4629      	mov	r1, r5
 801049c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80104a0:	f7fd fb8a 	bl	800dbb8 <memset>
 80104a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80104a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80104ac:	4620      	mov	r0, r4
 80104ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104b0:	3468      	adds	r4, #104	; 0x68
 80104b2:	e7d9      	b.n	8010468 <__sfp+0x1c>
 80104b4:	2104      	movs	r1, #4
 80104b6:	4638      	mov	r0, r7
 80104b8:	f7ff ff62 	bl	8010380 <__sfmoreglue>
 80104bc:	4604      	mov	r4, r0
 80104be:	6030      	str	r0, [r6, #0]
 80104c0:	2800      	cmp	r0, #0
 80104c2:	d1d5      	bne.n	8010470 <__sfp+0x24>
 80104c4:	f7ff ff78 	bl	80103b8 <__sfp_lock_release>
 80104c8:	230c      	movs	r3, #12
 80104ca:	603b      	str	r3, [r7, #0]
 80104cc:	e7ee      	b.n	80104ac <__sfp+0x60>
 80104ce:	bf00      	nop
 80104d0:	080133fc 	.word	0x080133fc
 80104d4:	ffff0001 	.word	0xffff0001

080104d8 <_fwalk_reent>:
 80104d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104dc:	4606      	mov	r6, r0
 80104de:	4688      	mov	r8, r1
 80104e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80104e4:	2700      	movs	r7, #0
 80104e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80104ea:	f1b9 0901 	subs.w	r9, r9, #1
 80104ee:	d505      	bpl.n	80104fc <_fwalk_reent+0x24>
 80104f0:	6824      	ldr	r4, [r4, #0]
 80104f2:	2c00      	cmp	r4, #0
 80104f4:	d1f7      	bne.n	80104e6 <_fwalk_reent+0xe>
 80104f6:	4638      	mov	r0, r7
 80104f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104fc:	89ab      	ldrh	r3, [r5, #12]
 80104fe:	2b01      	cmp	r3, #1
 8010500:	d907      	bls.n	8010512 <_fwalk_reent+0x3a>
 8010502:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010506:	3301      	adds	r3, #1
 8010508:	d003      	beq.n	8010512 <_fwalk_reent+0x3a>
 801050a:	4629      	mov	r1, r5
 801050c:	4630      	mov	r0, r6
 801050e:	47c0      	blx	r8
 8010510:	4307      	orrs	r7, r0
 8010512:	3568      	adds	r5, #104	; 0x68
 8010514:	e7e9      	b.n	80104ea <_fwalk_reent+0x12>

08010516 <rshift>:
 8010516:	6903      	ldr	r3, [r0, #16]
 8010518:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801051c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010520:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010524:	f100 0414 	add.w	r4, r0, #20
 8010528:	dd45      	ble.n	80105b6 <rshift+0xa0>
 801052a:	f011 011f 	ands.w	r1, r1, #31
 801052e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010532:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010536:	d10c      	bne.n	8010552 <rshift+0x3c>
 8010538:	f100 0710 	add.w	r7, r0, #16
 801053c:	4629      	mov	r1, r5
 801053e:	42b1      	cmp	r1, r6
 8010540:	d334      	bcc.n	80105ac <rshift+0x96>
 8010542:	1a9b      	subs	r3, r3, r2
 8010544:	009b      	lsls	r3, r3, #2
 8010546:	1eea      	subs	r2, r5, #3
 8010548:	4296      	cmp	r6, r2
 801054a:	bf38      	it	cc
 801054c:	2300      	movcc	r3, #0
 801054e:	4423      	add	r3, r4
 8010550:	e015      	b.n	801057e <rshift+0x68>
 8010552:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010556:	f1c1 0820 	rsb	r8, r1, #32
 801055a:	40cf      	lsrs	r7, r1
 801055c:	f105 0e04 	add.w	lr, r5, #4
 8010560:	46a1      	mov	r9, r4
 8010562:	4576      	cmp	r6, lr
 8010564:	46f4      	mov	ip, lr
 8010566:	d815      	bhi.n	8010594 <rshift+0x7e>
 8010568:	1a9b      	subs	r3, r3, r2
 801056a:	009a      	lsls	r2, r3, #2
 801056c:	3a04      	subs	r2, #4
 801056e:	3501      	adds	r5, #1
 8010570:	42ae      	cmp	r6, r5
 8010572:	bf38      	it	cc
 8010574:	2200      	movcc	r2, #0
 8010576:	18a3      	adds	r3, r4, r2
 8010578:	50a7      	str	r7, [r4, r2]
 801057a:	b107      	cbz	r7, 801057e <rshift+0x68>
 801057c:	3304      	adds	r3, #4
 801057e:	1b1a      	subs	r2, r3, r4
 8010580:	42a3      	cmp	r3, r4
 8010582:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010586:	bf08      	it	eq
 8010588:	2300      	moveq	r3, #0
 801058a:	6102      	str	r2, [r0, #16]
 801058c:	bf08      	it	eq
 801058e:	6143      	streq	r3, [r0, #20]
 8010590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010594:	f8dc c000 	ldr.w	ip, [ip]
 8010598:	fa0c fc08 	lsl.w	ip, ip, r8
 801059c:	ea4c 0707 	orr.w	r7, ip, r7
 80105a0:	f849 7b04 	str.w	r7, [r9], #4
 80105a4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80105a8:	40cf      	lsrs	r7, r1
 80105aa:	e7da      	b.n	8010562 <rshift+0x4c>
 80105ac:	f851 cb04 	ldr.w	ip, [r1], #4
 80105b0:	f847 cf04 	str.w	ip, [r7, #4]!
 80105b4:	e7c3      	b.n	801053e <rshift+0x28>
 80105b6:	4623      	mov	r3, r4
 80105b8:	e7e1      	b.n	801057e <rshift+0x68>

080105ba <__hexdig_fun>:
 80105ba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80105be:	2b09      	cmp	r3, #9
 80105c0:	d802      	bhi.n	80105c8 <__hexdig_fun+0xe>
 80105c2:	3820      	subs	r0, #32
 80105c4:	b2c0      	uxtb	r0, r0
 80105c6:	4770      	bx	lr
 80105c8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80105cc:	2b05      	cmp	r3, #5
 80105ce:	d801      	bhi.n	80105d4 <__hexdig_fun+0x1a>
 80105d0:	3847      	subs	r0, #71	; 0x47
 80105d2:	e7f7      	b.n	80105c4 <__hexdig_fun+0xa>
 80105d4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80105d8:	2b05      	cmp	r3, #5
 80105da:	d801      	bhi.n	80105e0 <__hexdig_fun+0x26>
 80105dc:	3827      	subs	r0, #39	; 0x27
 80105de:	e7f1      	b.n	80105c4 <__hexdig_fun+0xa>
 80105e0:	2000      	movs	r0, #0
 80105e2:	4770      	bx	lr

080105e4 <__gethex>:
 80105e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105e8:	ed2d 8b02 	vpush	{d8}
 80105ec:	b089      	sub	sp, #36	; 0x24
 80105ee:	ee08 0a10 	vmov	s16, r0
 80105f2:	9304      	str	r3, [sp, #16]
 80105f4:	4bbc      	ldr	r3, [pc, #752]	; (80108e8 <__gethex+0x304>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	9301      	str	r3, [sp, #4]
 80105fa:	4618      	mov	r0, r3
 80105fc:	468b      	mov	fp, r1
 80105fe:	4690      	mov	r8, r2
 8010600:	f7ef fe0e 	bl	8000220 <strlen>
 8010604:	9b01      	ldr	r3, [sp, #4]
 8010606:	f8db 2000 	ldr.w	r2, [fp]
 801060a:	4403      	add	r3, r0
 801060c:	4682      	mov	sl, r0
 801060e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010612:	9305      	str	r3, [sp, #20]
 8010614:	1c93      	adds	r3, r2, #2
 8010616:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801061a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801061e:	32fe      	adds	r2, #254	; 0xfe
 8010620:	18d1      	adds	r1, r2, r3
 8010622:	461f      	mov	r7, r3
 8010624:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010628:	9100      	str	r1, [sp, #0]
 801062a:	2830      	cmp	r0, #48	; 0x30
 801062c:	d0f8      	beq.n	8010620 <__gethex+0x3c>
 801062e:	f7ff ffc4 	bl	80105ba <__hexdig_fun>
 8010632:	4604      	mov	r4, r0
 8010634:	2800      	cmp	r0, #0
 8010636:	d13a      	bne.n	80106ae <__gethex+0xca>
 8010638:	9901      	ldr	r1, [sp, #4]
 801063a:	4652      	mov	r2, sl
 801063c:	4638      	mov	r0, r7
 801063e:	f001 fa8a 	bl	8011b56 <strncmp>
 8010642:	4605      	mov	r5, r0
 8010644:	2800      	cmp	r0, #0
 8010646:	d168      	bne.n	801071a <__gethex+0x136>
 8010648:	f817 000a 	ldrb.w	r0, [r7, sl]
 801064c:	eb07 060a 	add.w	r6, r7, sl
 8010650:	f7ff ffb3 	bl	80105ba <__hexdig_fun>
 8010654:	2800      	cmp	r0, #0
 8010656:	d062      	beq.n	801071e <__gethex+0x13a>
 8010658:	4633      	mov	r3, r6
 801065a:	7818      	ldrb	r0, [r3, #0]
 801065c:	2830      	cmp	r0, #48	; 0x30
 801065e:	461f      	mov	r7, r3
 8010660:	f103 0301 	add.w	r3, r3, #1
 8010664:	d0f9      	beq.n	801065a <__gethex+0x76>
 8010666:	f7ff ffa8 	bl	80105ba <__hexdig_fun>
 801066a:	2301      	movs	r3, #1
 801066c:	fab0 f480 	clz	r4, r0
 8010670:	0964      	lsrs	r4, r4, #5
 8010672:	4635      	mov	r5, r6
 8010674:	9300      	str	r3, [sp, #0]
 8010676:	463a      	mov	r2, r7
 8010678:	4616      	mov	r6, r2
 801067a:	3201      	adds	r2, #1
 801067c:	7830      	ldrb	r0, [r6, #0]
 801067e:	f7ff ff9c 	bl	80105ba <__hexdig_fun>
 8010682:	2800      	cmp	r0, #0
 8010684:	d1f8      	bne.n	8010678 <__gethex+0x94>
 8010686:	9901      	ldr	r1, [sp, #4]
 8010688:	4652      	mov	r2, sl
 801068a:	4630      	mov	r0, r6
 801068c:	f001 fa63 	bl	8011b56 <strncmp>
 8010690:	b980      	cbnz	r0, 80106b4 <__gethex+0xd0>
 8010692:	b94d      	cbnz	r5, 80106a8 <__gethex+0xc4>
 8010694:	eb06 050a 	add.w	r5, r6, sl
 8010698:	462a      	mov	r2, r5
 801069a:	4616      	mov	r6, r2
 801069c:	3201      	adds	r2, #1
 801069e:	7830      	ldrb	r0, [r6, #0]
 80106a0:	f7ff ff8b 	bl	80105ba <__hexdig_fun>
 80106a4:	2800      	cmp	r0, #0
 80106a6:	d1f8      	bne.n	801069a <__gethex+0xb6>
 80106a8:	1bad      	subs	r5, r5, r6
 80106aa:	00ad      	lsls	r5, r5, #2
 80106ac:	e004      	b.n	80106b8 <__gethex+0xd4>
 80106ae:	2400      	movs	r4, #0
 80106b0:	4625      	mov	r5, r4
 80106b2:	e7e0      	b.n	8010676 <__gethex+0x92>
 80106b4:	2d00      	cmp	r5, #0
 80106b6:	d1f7      	bne.n	80106a8 <__gethex+0xc4>
 80106b8:	7833      	ldrb	r3, [r6, #0]
 80106ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80106be:	2b50      	cmp	r3, #80	; 0x50
 80106c0:	d13b      	bne.n	801073a <__gethex+0x156>
 80106c2:	7873      	ldrb	r3, [r6, #1]
 80106c4:	2b2b      	cmp	r3, #43	; 0x2b
 80106c6:	d02c      	beq.n	8010722 <__gethex+0x13e>
 80106c8:	2b2d      	cmp	r3, #45	; 0x2d
 80106ca:	d02e      	beq.n	801072a <__gethex+0x146>
 80106cc:	1c71      	adds	r1, r6, #1
 80106ce:	f04f 0900 	mov.w	r9, #0
 80106d2:	7808      	ldrb	r0, [r1, #0]
 80106d4:	f7ff ff71 	bl	80105ba <__hexdig_fun>
 80106d8:	1e43      	subs	r3, r0, #1
 80106da:	b2db      	uxtb	r3, r3
 80106dc:	2b18      	cmp	r3, #24
 80106de:	d82c      	bhi.n	801073a <__gethex+0x156>
 80106e0:	f1a0 0210 	sub.w	r2, r0, #16
 80106e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80106e8:	f7ff ff67 	bl	80105ba <__hexdig_fun>
 80106ec:	1e43      	subs	r3, r0, #1
 80106ee:	b2db      	uxtb	r3, r3
 80106f0:	2b18      	cmp	r3, #24
 80106f2:	d91d      	bls.n	8010730 <__gethex+0x14c>
 80106f4:	f1b9 0f00 	cmp.w	r9, #0
 80106f8:	d000      	beq.n	80106fc <__gethex+0x118>
 80106fa:	4252      	negs	r2, r2
 80106fc:	4415      	add	r5, r2
 80106fe:	f8cb 1000 	str.w	r1, [fp]
 8010702:	b1e4      	cbz	r4, 801073e <__gethex+0x15a>
 8010704:	9b00      	ldr	r3, [sp, #0]
 8010706:	2b00      	cmp	r3, #0
 8010708:	bf14      	ite	ne
 801070a:	2700      	movne	r7, #0
 801070c:	2706      	moveq	r7, #6
 801070e:	4638      	mov	r0, r7
 8010710:	b009      	add	sp, #36	; 0x24
 8010712:	ecbd 8b02 	vpop	{d8}
 8010716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801071a:	463e      	mov	r6, r7
 801071c:	4625      	mov	r5, r4
 801071e:	2401      	movs	r4, #1
 8010720:	e7ca      	b.n	80106b8 <__gethex+0xd4>
 8010722:	f04f 0900 	mov.w	r9, #0
 8010726:	1cb1      	adds	r1, r6, #2
 8010728:	e7d3      	b.n	80106d2 <__gethex+0xee>
 801072a:	f04f 0901 	mov.w	r9, #1
 801072e:	e7fa      	b.n	8010726 <__gethex+0x142>
 8010730:	230a      	movs	r3, #10
 8010732:	fb03 0202 	mla	r2, r3, r2, r0
 8010736:	3a10      	subs	r2, #16
 8010738:	e7d4      	b.n	80106e4 <__gethex+0x100>
 801073a:	4631      	mov	r1, r6
 801073c:	e7df      	b.n	80106fe <__gethex+0x11a>
 801073e:	1bf3      	subs	r3, r6, r7
 8010740:	3b01      	subs	r3, #1
 8010742:	4621      	mov	r1, r4
 8010744:	2b07      	cmp	r3, #7
 8010746:	dc0b      	bgt.n	8010760 <__gethex+0x17c>
 8010748:	ee18 0a10 	vmov	r0, s16
 801074c:	f000 fad8 	bl	8010d00 <_Balloc>
 8010750:	4604      	mov	r4, r0
 8010752:	b940      	cbnz	r0, 8010766 <__gethex+0x182>
 8010754:	4b65      	ldr	r3, [pc, #404]	; (80108ec <__gethex+0x308>)
 8010756:	4602      	mov	r2, r0
 8010758:	21de      	movs	r1, #222	; 0xde
 801075a:	4865      	ldr	r0, [pc, #404]	; (80108f0 <__gethex+0x30c>)
 801075c:	f001 fa2c 	bl	8011bb8 <__assert_func>
 8010760:	3101      	adds	r1, #1
 8010762:	105b      	asrs	r3, r3, #1
 8010764:	e7ee      	b.n	8010744 <__gethex+0x160>
 8010766:	f100 0914 	add.w	r9, r0, #20
 801076a:	f04f 0b00 	mov.w	fp, #0
 801076e:	f1ca 0301 	rsb	r3, sl, #1
 8010772:	f8cd 9008 	str.w	r9, [sp, #8]
 8010776:	f8cd b000 	str.w	fp, [sp]
 801077a:	9306      	str	r3, [sp, #24]
 801077c:	42b7      	cmp	r7, r6
 801077e:	d340      	bcc.n	8010802 <__gethex+0x21e>
 8010780:	9802      	ldr	r0, [sp, #8]
 8010782:	9b00      	ldr	r3, [sp, #0]
 8010784:	f840 3b04 	str.w	r3, [r0], #4
 8010788:	eba0 0009 	sub.w	r0, r0, r9
 801078c:	1080      	asrs	r0, r0, #2
 801078e:	0146      	lsls	r6, r0, #5
 8010790:	6120      	str	r0, [r4, #16]
 8010792:	4618      	mov	r0, r3
 8010794:	f000 fbaa 	bl	8010eec <__hi0bits>
 8010798:	1a30      	subs	r0, r6, r0
 801079a:	f8d8 6000 	ldr.w	r6, [r8]
 801079e:	42b0      	cmp	r0, r6
 80107a0:	dd63      	ble.n	801086a <__gethex+0x286>
 80107a2:	1b87      	subs	r7, r0, r6
 80107a4:	4639      	mov	r1, r7
 80107a6:	4620      	mov	r0, r4
 80107a8:	f000 ff44 	bl	8011634 <__any_on>
 80107ac:	4682      	mov	sl, r0
 80107ae:	b1a8      	cbz	r0, 80107dc <__gethex+0x1f8>
 80107b0:	1e7b      	subs	r3, r7, #1
 80107b2:	1159      	asrs	r1, r3, #5
 80107b4:	f003 021f 	and.w	r2, r3, #31
 80107b8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80107bc:	f04f 0a01 	mov.w	sl, #1
 80107c0:	fa0a f202 	lsl.w	r2, sl, r2
 80107c4:	420a      	tst	r2, r1
 80107c6:	d009      	beq.n	80107dc <__gethex+0x1f8>
 80107c8:	4553      	cmp	r3, sl
 80107ca:	dd05      	ble.n	80107d8 <__gethex+0x1f4>
 80107cc:	1eb9      	subs	r1, r7, #2
 80107ce:	4620      	mov	r0, r4
 80107d0:	f000 ff30 	bl	8011634 <__any_on>
 80107d4:	2800      	cmp	r0, #0
 80107d6:	d145      	bne.n	8010864 <__gethex+0x280>
 80107d8:	f04f 0a02 	mov.w	sl, #2
 80107dc:	4639      	mov	r1, r7
 80107de:	4620      	mov	r0, r4
 80107e0:	f7ff fe99 	bl	8010516 <rshift>
 80107e4:	443d      	add	r5, r7
 80107e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80107ea:	42ab      	cmp	r3, r5
 80107ec:	da4c      	bge.n	8010888 <__gethex+0x2a4>
 80107ee:	ee18 0a10 	vmov	r0, s16
 80107f2:	4621      	mov	r1, r4
 80107f4:	f000 fac4 	bl	8010d80 <_Bfree>
 80107f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80107fa:	2300      	movs	r3, #0
 80107fc:	6013      	str	r3, [r2, #0]
 80107fe:	27a3      	movs	r7, #163	; 0xa3
 8010800:	e785      	b.n	801070e <__gethex+0x12a>
 8010802:	1e73      	subs	r3, r6, #1
 8010804:	9a05      	ldr	r2, [sp, #20]
 8010806:	9303      	str	r3, [sp, #12]
 8010808:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801080c:	4293      	cmp	r3, r2
 801080e:	d019      	beq.n	8010844 <__gethex+0x260>
 8010810:	f1bb 0f20 	cmp.w	fp, #32
 8010814:	d107      	bne.n	8010826 <__gethex+0x242>
 8010816:	9b02      	ldr	r3, [sp, #8]
 8010818:	9a00      	ldr	r2, [sp, #0]
 801081a:	f843 2b04 	str.w	r2, [r3], #4
 801081e:	9302      	str	r3, [sp, #8]
 8010820:	2300      	movs	r3, #0
 8010822:	9300      	str	r3, [sp, #0]
 8010824:	469b      	mov	fp, r3
 8010826:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801082a:	f7ff fec6 	bl	80105ba <__hexdig_fun>
 801082e:	9b00      	ldr	r3, [sp, #0]
 8010830:	f000 000f 	and.w	r0, r0, #15
 8010834:	fa00 f00b 	lsl.w	r0, r0, fp
 8010838:	4303      	orrs	r3, r0
 801083a:	9300      	str	r3, [sp, #0]
 801083c:	f10b 0b04 	add.w	fp, fp, #4
 8010840:	9b03      	ldr	r3, [sp, #12]
 8010842:	e00d      	b.n	8010860 <__gethex+0x27c>
 8010844:	9b03      	ldr	r3, [sp, #12]
 8010846:	9a06      	ldr	r2, [sp, #24]
 8010848:	4413      	add	r3, r2
 801084a:	42bb      	cmp	r3, r7
 801084c:	d3e0      	bcc.n	8010810 <__gethex+0x22c>
 801084e:	4618      	mov	r0, r3
 8010850:	9901      	ldr	r1, [sp, #4]
 8010852:	9307      	str	r3, [sp, #28]
 8010854:	4652      	mov	r2, sl
 8010856:	f001 f97e 	bl	8011b56 <strncmp>
 801085a:	9b07      	ldr	r3, [sp, #28]
 801085c:	2800      	cmp	r0, #0
 801085e:	d1d7      	bne.n	8010810 <__gethex+0x22c>
 8010860:	461e      	mov	r6, r3
 8010862:	e78b      	b.n	801077c <__gethex+0x198>
 8010864:	f04f 0a03 	mov.w	sl, #3
 8010868:	e7b8      	b.n	80107dc <__gethex+0x1f8>
 801086a:	da0a      	bge.n	8010882 <__gethex+0x29e>
 801086c:	1a37      	subs	r7, r6, r0
 801086e:	4621      	mov	r1, r4
 8010870:	ee18 0a10 	vmov	r0, s16
 8010874:	463a      	mov	r2, r7
 8010876:	f000 fc9f 	bl	80111b8 <__lshift>
 801087a:	1bed      	subs	r5, r5, r7
 801087c:	4604      	mov	r4, r0
 801087e:	f100 0914 	add.w	r9, r0, #20
 8010882:	f04f 0a00 	mov.w	sl, #0
 8010886:	e7ae      	b.n	80107e6 <__gethex+0x202>
 8010888:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801088c:	42a8      	cmp	r0, r5
 801088e:	dd72      	ble.n	8010976 <__gethex+0x392>
 8010890:	1b45      	subs	r5, r0, r5
 8010892:	42ae      	cmp	r6, r5
 8010894:	dc36      	bgt.n	8010904 <__gethex+0x320>
 8010896:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801089a:	2b02      	cmp	r3, #2
 801089c:	d02a      	beq.n	80108f4 <__gethex+0x310>
 801089e:	2b03      	cmp	r3, #3
 80108a0:	d02c      	beq.n	80108fc <__gethex+0x318>
 80108a2:	2b01      	cmp	r3, #1
 80108a4:	d115      	bne.n	80108d2 <__gethex+0x2ee>
 80108a6:	42ae      	cmp	r6, r5
 80108a8:	d113      	bne.n	80108d2 <__gethex+0x2ee>
 80108aa:	2e01      	cmp	r6, #1
 80108ac:	d10b      	bne.n	80108c6 <__gethex+0x2e2>
 80108ae:	9a04      	ldr	r2, [sp, #16]
 80108b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80108b4:	6013      	str	r3, [r2, #0]
 80108b6:	2301      	movs	r3, #1
 80108b8:	6123      	str	r3, [r4, #16]
 80108ba:	f8c9 3000 	str.w	r3, [r9]
 80108be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80108c0:	2762      	movs	r7, #98	; 0x62
 80108c2:	601c      	str	r4, [r3, #0]
 80108c4:	e723      	b.n	801070e <__gethex+0x12a>
 80108c6:	1e71      	subs	r1, r6, #1
 80108c8:	4620      	mov	r0, r4
 80108ca:	f000 feb3 	bl	8011634 <__any_on>
 80108ce:	2800      	cmp	r0, #0
 80108d0:	d1ed      	bne.n	80108ae <__gethex+0x2ca>
 80108d2:	ee18 0a10 	vmov	r0, s16
 80108d6:	4621      	mov	r1, r4
 80108d8:	f000 fa52 	bl	8010d80 <_Bfree>
 80108dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80108de:	2300      	movs	r3, #0
 80108e0:	6013      	str	r3, [r2, #0]
 80108e2:	2750      	movs	r7, #80	; 0x50
 80108e4:	e713      	b.n	801070e <__gethex+0x12a>
 80108e6:	bf00      	nop
 80108e8:	080136ec 	.word	0x080136ec
 80108ec:	0801360c 	.word	0x0801360c
 80108f0:	08013680 	.word	0x08013680
 80108f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d1eb      	bne.n	80108d2 <__gethex+0x2ee>
 80108fa:	e7d8      	b.n	80108ae <__gethex+0x2ca>
 80108fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d1d5      	bne.n	80108ae <__gethex+0x2ca>
 8010902:	e7e6      	b.n	80108d2 <__gethex+0x2ee>
 8010904:	1e6f      	subs	r7, r5, #1
 8010906:	f1ba 0f00 	cmp.w	sl, #0
 801090a:	d131      	bne.n	8010970 <__gethex+0x38c>
 801090c:	b127      	cbz	r7, 8010918 <__gethex+0x334>
 801090e:	4639      	mov	r1, r7
 8010910:	4620      	mov	r0, r4
 8010912:	f000 fe8f 	bl	8011634 <__any_on>
 8010916:	4682      	mov	sl, r0
 8010918:	117b      	asrs	r3, r7, #5
 801091a:	2101      	movs	r1, #1
 801091c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010920:	f007 071f 	and.w	r7, r7, #31
 8010924:	fa01 f707 	lsl.w	r7, r1, r7
 8010928:	421f      	tst	r7, r3
 801092a:	4629      	mov	r1, r5
 801092c:	4620      	mov	r0, r4
 801092e:	bf18      	it	ne
 8010930:	f04a 0a02 	orrne.w	sl, sl, #2
 8010934:	1b76      	subs	r6, r6, r5
 8010936:	f7ff fdee 	bl	8010516 <rshift>
 801093a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801093e:	2702      	movs	r7, #2
 8010940:	f1ba 0f00 	cmp.w	sl, #0
 8010944:	d048      	beq.n	80109d8 <__gethex+0x3f4>
 8010946:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801094a:	2b02      	cmp	r3, #2
 801094c:	d015      	beq.n	801097a <__gethex+0x396>
 801094e:	2b03      	cmp	r3, #3
 8010950:	d017      	beq.n	8010982 <__gethex+0x39e>
 8010952:	2b01      	cmp	r3, #1
 8010954:	d109      	bne.n	801096a <__gethex+0x386>
 8010956:	f01a 0f02 	tst.w	sl, #2
 801095a:	d006      	beq.n	801096a <__gethex+0x386>
 801095c:	f8d9 0000 	ldr.w	r0, [r9]
 8010960:	ea4a 0a00 	orr.w	sl, sl, r0
 8010964:	f01a 0f01 	tst.w	sl, #1
 8010968:	d10e      	bne.n	8010988 <__gethex+0x3a4>
 801096a:	f047 0710 	orr.w	r7, r7, #16
 801096e:	e033      	b.n	80109d8 <__gethex+0x3f4>
 8010970:	f04f 0a01 	mov.w	sl, #1
 8010974:	e7d0      	b.n	8010918 <__gethex+0x334>
 8010976:	2701      	movs	r7, #1
 8010978:	e7e2      	b.n	8010940 <__gethex+0x35c>
 801097a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801097c:	f1c3 0301 	rsb	r3, r3, #1
 8010980:	9315      	str	r3, [sp, #84]	; 0x54
 8010982:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010984:	2b00      	cmp	r3, #0
 8010986:	d0f0      	beq.n	801096a <__gethex+0x386>
 8010988:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801098c:	f104 0314 	add.w	r3, r4, #20
 8010990:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010994:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010998:	f04f 0c00 	mov.w	ip, #0
 801099c:	4618      	mov	r0, r3
 801099e:	f853 2b04 	ldr.w	r2, [r3], #4
 80109a2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80109a6:	d01c      	beq.n	80109e2 <__gethex+0x3fe>
 80109a8:	3201      	adds	r2, #1
 80109aa:	6002      	str	r2, [r0, #0]
 80109ac:	2f02      	cmp	r7, #2
 80109ae:	f104 0314 	add.w	r3, r4, #20
 80109b2:	d13f      	bne.n	8010a34 <__gethex+0x450>
 80109b4:	f8d8 2000 	ldr.w	r2, [r8]
 80109b8:	3a01      	subs	r2, #1
 80109ba:	42b2      	cmp	r2, r6
 80109bc:	d10a      	bne.n	80109d4 <__gethex+0x3f0>
 80109be:	1171      	asrs	r1, r6, #5
 80109c0:	2201      	movs	r2, #1
 80109c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80109c6:	f006 061f 	and.w	r6, r6, #31
 80109ca:	fa02 f606 	lsl.w	r6, r2, r6
 80109ce:	421e      	tst	r6, r3
 80109d0:	bf18      	it	ne
 80109d2:	4617      	movne	r7, r2
 80109d4:	f047 0720 	orr.w	r7, r7, #32
 80109d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80109da:	601c      	str	r4, [r3, #0]
 80109dc:	9b04      	ldr	r3, [sp, #16]
 80109de:	601d      	str	r5, [r3, #0]
 80109e0:	e695      	b.n	801070e <__gethex+0x12a>
 80109e2:	4299      	cmp	r1, r3
 80109e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80109e8:	d8d8      	bhi.n	801099c <__gethex+0x3b8>
 80109ea:	68a3      	ldr	r3, [r4, #8]
 80109ec:	459b      	cmp	fp, r3
 80109ee:	db19      	blt.n	8010a24 <__gethex+0x440>
 80109f0:	6861      	ldr	r1, [r4, #4]
 80109f2:	ee18 0a10 	vmov	r0, s16
 80109f6:	3101      	adds	r1, #1
 80109f8:	f000 f982 	bl	8010d00 <_Balloc>
 80109fc:	4681      	mov	r9, r0
 80109fe:	b918      	cbnz	r0, 8010a08 <__gethex+0x424>
 8010a00:	4b1a      	ldr	r3, [pc, #104]	; (8010a6c <__gethex+0x488>)
 8010a02:	4602      	mov	r2, r0
 8010a04:	2184      	movs	r1, #132	; 0x84
 8010a06:	e6a8      	b.n	801075a <__gethex+0x176>
 8010a08:	6922      	ldr	r2, [r4, #16]
 8010a0a:	3202      	adds	r2, #2
 8010a0c:	f104 010c 	add.w	r1, r4, #12
 8010a10:	0092      	lsls	r2, r2, #2
 8010a12:	300c      	adds	r0, #12
 8010a14:	f7fd f8a8 	bl	800db68 <memcpy>
 8010a18:	4621      	mov	r1, r4
 8010a1a:	ee18 0a10 	vmov	r0, s16
 8010a1e:	f000 f9af 	bl	8010d80 <_Bfree>
 8010a22:	464c      	mov	r4, r9
 8010a24:	6923      	ldr	r3, [r4, #16]
 8010a26:	1c5a      	adds	r2, r3, #1
 8010a28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010a2c:	6122      	str	r2, [r4, #16]
 8010a2e:	2201      	movs	r2, #1
 8010a30:	615a      	str	r2, [r3, #20]
 8010a32:	e7bb      	b.n	80109ac <__gethex+0x3c8>
 8010a34:	6922      	ldr	r2, [r4, #16]
 8010a36:	455a      	cmp	r2, fp
 8010a38:	dd0b      	ble.n	8010a52 <__gethex+0x46e>
 8010a3a:	2101      	movs	r1, #1
 8010a3c:	4620      	mov	r0, r4
 8010a3e:	f7ff fd6a 	bl	8010516 <rshift>
 8010a42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010a46:	3501      	adds	r5, #1
 8010a48:	42ab      	cmp	r3, r5
 8010a4a:	f6ff aed0 	blt.w	80107ee <__gethex+0x20a>
 8010a4e:	2701      	movs	r7, #1
 8010a50:	e7c0      	b.n	80109d4 <__gethex+0x3f0>
 8010a52:	f016 061f 	ands.w	r6, r6, #31
 8010a56:	d0fa      	beq.n	8010a4e <__gethex+0x46a>
 8010a58:	449a      	add	sl, r3
 8010a5a:	f1c6 0620 	rsb	r6, r6, #32
 8010a5e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010a62:	f000 fa43 	bl	8010eec <__hi0bits>
 8010a66:	42b0      	cmp	r0, r6
 8010a68:	dbe7      	blt.n	8010a3a <__gethex+0x456>
 8010a6a:	e7f0      	b.n	8010a4e <__gethex+0x46a>
 8010a6c:	0801360c 	.word	0x0801360c

08010a70 <L_shift>:
 8010a70:	f1c2 0208 	rsb	r2, r2, #8
 8010a74:	0092      	lsls	r2, r2, #2
 8010a76:	b570      	push	{r4, r5, r6, lr}
 8010a78:	f1c2 0620 	rsb	r6, r2, #32
 8010a7c:	6843      	ldr	r3, [r0, #4]
 8010a7e:	6804      	ldr	r4, [r0, #0]
 8010a80:	fa03 f506 	lsl.w	r5, r3, r6
 8010a84:	432c      	orrs	r4, r5
 8010a86:	40d3      	lsrs	r3, r2
 8010a88:	6004      	str	r4, [r0, #0]
 8010a8a:	f840 3f04 	str.w	r3, [r0, #4]!
 8010a8e:	4288      	cmp	r0, r1
 8010a90:	d3f4      	bcc.n	8010a7c <L_shift+0xc>
 8010a92:	bd70      	pop	{r4, r5, r6, pc}

08010a94 <__match>:
 8010a94:	b530      	push	{r4, r5, lr}
 8010a96:	6803      	ldr	r3, [r0, #0]
 8010a98:	3301      	adds	r3, #1
 8010a9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a9e:	b914      	cbnz	r4, 8010aa6 <__match+0x12>
 8010aa0:	6003      	str	r3, [r0, #0]
 8010aa2:	2001      	movs	r0, #1
 8010aa4:	bd30      	pop	{r4, r5, pc}
 8010aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010aaa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010aae:	2d19      	cmp	r5, #25
 8010ab0:	bf98      	it	ls
 8010ab2:	3220      	addls	r2, #32
 8010ab4:	42a2      	cmp	r2, r4
 8010ab6:	d0f0      	beq.n	8010a9a <__match+0x6>
 8010ab8:	2000      	movs	r0, #0
 8010aba:	e7f3      	b.n	8010aa4 <__match+0x10>

08010abc <__hexnan>:
 8010abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ac0:	680b      	ldr	r3, [r1, #0]
 8010ac2:	6801      	ldr	r1, [r0, #0]
 8010ac4:	115e      	asrs	r6, r3, #5
 8010ac6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010aca:	f013 031f 	ands.w	r3, r3, #31
 8010ace:	b087      	sub	sp, #28
 8010ad0:	bf18      	it	ne
 8010ad2:	3604      	addne	r6, #4
 8010ad4:	2500      	movs	r5, #0
 8010ad6:	1f37      	subs	r7, r6, #4
 8010ad8:	4682      	mov	sl, r0
 8010ada:	4690      	mov	r8, r2
 8010adc:	9301      	str	r3, [sp, #4]
 8010ade:	f846 5c04 	str.w	r5, [r6, #-4]
 8010ae2:	46b9      	mov	r9, r7
 8010ae4:	463c      	mov	r4, r7
 8010ae6:	9502      	str	r5, [sp, #8]
 8010ae8:	46ab      	mov	fp, r5
 8010aea:	784a      	ldrb	r2, [r1, #1]
 8010aec:	1c4b      	adds	r3, r1, #1
 8010aee:	9303      	str	r3, [sp, #12]
 8010af0:	b342      	cbz	r2, 8010b44 <__hexnan+0x88>
 8010af2:	4610      	mov	r0, r2
 8010af4:	9105      	str	r1, [sp, #20]
 8010af6:	9204      	str	r2, [sp, #16]
 8010af8:	f7ff fd5f 	bl	80105ba <__hexdig_fun>
 8010afc:	2800      	cmp	r0, #0
 8010afe:	d14f      	bne.n	8010ba0 <__hexnan+0xe4>
 8010b00:	9a04      	ldr	r2, [sp, #16]
 8010b02:	9905      	ldr	r1, [sp, #20]
 8010b04:	2a20      	cmp	r2, #32
 8010b06:	d818      	bhi.n	8010b3a <__hexnan+0x7e>
 8010b08:	9b02      	ldr	r3, [sp, #8]
 8010b0a:	459b      	cmp	fp, r3
 8010b0c:	dd13      	ble.n	8010b36 <__hexnan+0x7a>
 8010b0e:	454c      	cmp	r4, r9
 8010b10:	d206      	bcs.n	8010b20 <__hexnan+0x64>
 8010b12:	2d07      	cmp	r5, #7
 8010b14:	dc04      	bgt.n	8010b20 <__hexnan+0x64>
 8010b16:	462a      	mov	r2, r5
 8010b18:	4649      	mov	r1, r9
 8010b1a:	4620      	mov	r0, r4
 8010b1c:	f7ff ffa8 	bl	8010a70 <L_shift>
 8010b20:	4544      	cmp	r4, r8
 8010b22:	d950      	bls.n	8010bc6 <__hexnan+0x10a>
 8010b24:	2300      	movs	r3, #0
 8010b26:	f1a4 0904 	sub.w	r9, r4, #4
 8010b2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8010b2e:	f8cd b008 	str.w	fp, [sp, #8]
 8010b32:	464c      	mov	r4, r9
 8010b34:	461d      	mov	r5, r3
 8010b36:	9903      	ldr	r1, [sp, #12]
 8010b38:	e7d7      	b.n	8010aea <__hexnan+0x2e>
 8010b3a:	2a29      	cmp	r2, #41	; 0x29
 8010b3c:	d156      	bne.n	8010bec <__hexnan+0x130>
 8010b3e:	3102      	adds	r1, #2
 8010b40:	f8ca 1000 	str.w	r1, [sl]
 8010b44:	f1bb 0f00 	cmp.w	fp, #0
 8010b48:	d050      	beq.n	8010bec <__hexnan+0x130>
 8010b4a:	454c      	cmp	r4, r9
 8010b4c:	d206      	bcs.n	8010b5c <__hexnan+0xa0>
 8010b4e:	2d07      	cmp	r5, #7
 8010b50:	dc04      	bgt.n	8010b5c <__hexnan+0xa0>
 8010b52:	462a      	mov	r2, r5
 8010b54:	4649      	mov	r1, r9
 8010b56:	4620      	mov	r0, r4
 8010b58:	f7ff ff8a 	bl	8010a70 <L_shift>
 8010b5c:	4544      	cmp	r4, r8
 8010b5e:	d934      	bls.n	8010bca <__hexnan+0x10e>
 8010b60:	f1a8 0204 	sub.w	r2, r8, #4
 8010b64:	4623      	mov	r3, r4
 8010b66:	f853 1b04 	ldr.w	r1, [r3], #4
 8010b6a:	f842 1f04 	str.w	r1, [r2, #4]!
 8010b6e:	429f      	cmp	r7, r3
 8010b70:	d2f9      	bcs.n	8010b66 <__hexnan+0xaa>
 8010b72:	1b3b      	subs	r3, r7, r4
 8010b74:	f023 0303 	bic.w	r3, r3, #3
 8010b78:	3304      	adds	r3, #4
 8010b7a:	3401      	adds	r4, #1
 8010b7c:	3e03      	subs	r6, #3
 8010b7e:	42b4      	cmp	r4, r6
 8010b80:	bf88      	it	hi
 8010b82:	2304      	movhi	r3, #4
 8010b84:	4443      	add	r3, r8
 8010b86:	2200      	movs	r2, #0
 8010b88:	f843 2b04 	str.w	r2, [r3], #4
 8010b8c:	429f      	cmp	r7, r3
 8010b8e:	d2fb      	bcs.n	8010b88 <__hexnan+0xcc>
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	b91b      	cbnz	r3, 8010b9c <__hexnan+0xe0>
 8010b94:	4547      	cmp	r7, r8
 8010b96:	d127      	bne.n	8010be8 <__hexnan+0x12c>
 8010b98:	2301      	movs	r3, #1
 8010b9a:	603b      	str	r3, [r7, #0]
 8010b9c:	2005      	movs	r0, #5
 8010b9e:	e026      	b.n	8010bee <__hexnan+0x132>
 8010ba0:	3501      	adds	r5, #1
 8010ba2:	2d08      	cmp	r5, #8
 8010ba4:	f10b 0b01 	add.w	fp, fp, #1
 8010ba8:	dd06      	ble.n	8010bb8 <__hexnan+0xfc>
 8010baa:	4544      	cmp	r4, r8
 8010bac:	d9c3      	bls.n	8010b36 <__hexnan+0x7a>
 8010bae:	2300      	movs	r3, #0
 8010bb0:	f844 3c04 	str.w	r3, [r4, #-4]
 8010bb4:	2501      	movs	r5, #1
 8010bb6:	3c04      	subs	r4, #4
 8010bb8:	6822      	ldr	r2, [r4, #0]
 8010bba:	f000 000f 	and.w	r0, r0, #15
 8010bbe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010bc2:	6022      	str	r2, [r4, #0]
 8010bc4:	e7b7      	b.n	8010b36 <__hexnan+0x7a>
 8010bc6:	2508      	movs	r5, #8
 8010bc8:	e7b5      	b.n	8010b36 <__hexnan+0x7a>
 8010bca:	9b01      	ldr	r3, [sp, #4]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d0df      	beq.n	8010b90 <__hexnan+0xd4>
 8010bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8010bd4:	f1c3 0320 	rsb	r3, r3, #32
 8010bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8010bdc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010be0:	401a      	ands	r2, r3
 8010be2:	f846 2c04 	str.w	r2, [r6, #-4]
 8010be6:	e7d3      	b.n	8010b90 <__hexnan+0xd4>
 8010be8:	3f04      	subs	r7, #4
 8010bea:	e7d1      	b.n	8010b90 <__hexnan+0xd4>
 8010bec:	2004      	movs	r0, #4
 8010bee:	b007      	add	sp, #28
 8010bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010bf4 <_localeconv_r>:
 8010bf4:	4800      	ldr	r0, [pc, #0]	; (8010bf8 <_localeconv_r+0x4>)
 8010bf6:	4770      	bx	lr
 8010bf8:	20000184 	.word	0x20000184

08010bfc <__retarget_lock_init_recursive>:
 8010bfc:	4770      	bx	lr

08010bfe <__retarget_lock_acquire_recursive>:
 8010bfe:	4770      	bx	lr

08010c00 <__retarget_lock_release_recursive>:
 8010c00:	4770      	bx	lr

08010c02 <__swhatbuf_r>:
 8010c02:	b570      	push	{r4, r5, r6, lr}
 8010c04:	460e      	mov	r6, r1
 8010c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c0a:	2900      	cmp	r1, #0
 8010c0c:	b096      	sub	sp, #88	; 0x58
 8010c0e:	4614      	mov	r4, r2
 8010c10:	461d      	mov	r5, r3
 8010c12:	da07      	bge.n	8010c24 <__swhatbuf_r+0x22>
 8010c14:	2300      	movs	r3, #0
 8010c16:	602b      	str	r3, [r5, #0]
 8010c18:	89b3      	ldrh	r3, [r6, #12]
 8010c1a:	061a      	lsls	r2, r3, #24
 8010c1c:	d410      	bmi.n	8010c40 <__swhatbuf_r+0x3e>
 8010c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c22:	e00e      	b.n	8010c42 <__swhatbuf_r+0x40>
 8010c24:	466a      	mov	r2, sp
 8010c26:	f001 f807 	bl	8011c38 <_fstat_r>
 8010c2a:	2800      	cmp	r0, #0
 8010c2c:	dbf2      	blt.n	8010c14 <__swhatbuf_r+0x12>
 8010c2e:	9a01      	ldr	r2, [sp, #4]
 8010c30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010c34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010c38:	425a      	negs	r2, r3
 8010c3a:	415a      	adcs	r2, r3
 8010c3c:	602a      	str	r2, [r5, #0]
 8010c3e:	e7ee      	b.n	8010c1e <__swhatbuf_r+0x1c>
 8010c40:	2340      	movs	r3, #64	; 0x40
 8010c42:	2000      	movs	r0, #0
 8010c44:	6023      	str	r3, [r4, #0]
 8010c46:	b016      	add	sp, #88	; 0x58
 8010c48:	bd70      	pop	{r4, r5, r6, pc}
	...

08010c4c <__smakebuf_r>:
 8010c4c:	898b      	ldrh	r3, [r1, #12]
 8010c4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c50:	079d      	lsls	r5, r3, #30
 8010c52:	4606      	mov	r6, r0
 8010c54:	460c      	mov	r4, r1
 8010c56:	d507      	bpl.n	8010c68 <__smakebuf_r+0x1c>
 8010c58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010c5c:	6023      	str	r3, [r4, #0]
 8010c5e:	6123      	str	r3, [r4, #16]
 8010c60:	2301      	movs	r3, #1
 8010c62:	6163      	str	r3, [r4, #20]
 8010c64:	b002      	add	sp, #8
 8010c66:	bd70      	pop	{r4, r5, r6, pc}
 8010c68:	ab01      	add	r3, sp, #4
 8010c6a:	466a      	mov	r2, sp
 8010c6c:	f7ff ffc9 	bl	8010c02 <__swhatbuf_r>
 8010c70:	9900      	ldr	r1, [sp, #0]
 8010c72:	4605      	mov	r5, r0
 8010c74:	4630      	mov	r0, r6
 8010c76:	f000 fd5d 	bl	8011734 <_malloc_r>
 8010c7a:	b948      	cbnz	r0, 8010c90 <__smakebuf_r+0x44>
 8010c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c80:	059a      	lsls	r2, r3, #22
 8010c82:	d4ef      	bmi.n	8010c64 <__smakebuf_r+0x18>
 8010c84:	f023 0303 	bic.w	r3, r3, #3
 8010c88:	f043 0302 	orr.w	r3, r3, #2
 8010c8c:	81a3      	strh	r3, [r4, #12]
 8010c8e:	e7e3      	b.n	8010c58 <__smakebuf_r+0xc>
 8010c90:	4b0d      	ldr	r3, [pc, #52]	; (8010cc8 <__smakebuf_r+0x7c>)
 8010c92:	62b3      	str	r3, [r6, #40]	; 0x28
 8010c94:	89a3      	ldrh	r3, [r4, #12]
 8010c96:	6020      	str	r0, [r4, #0]
 8010c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c9c:	81a3      	strh	r3, [r4, #12]
 8010c9e:	9b00      	ldr	r3, [sp, #0]
 8010ca0:	6163      	str	r3, [r4, #20]
 8010ca2:	9b01      	ldr	r3, [sp, #4]
 8010ca4:	6120      	str	r0, [r4, #16]
 8010ca6:	b15b      	cbz	r3, 8010cc0 <__smakebuf_r+0x74>
 8010ca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010cac:	4630      	mov	r0, r6
 8010cae:	f000 ffd5 	bl	8011c5c <_isatty_r>
 8010cb2:	b128      	cbz	r0, 8010cc0 <__smakebuf_r+0x74>
 8010cb4:	89a3      	ldrh	r3, [r4, #12]
 8010cb6:	f023 0303 	bic.w	r3, r3, #3
 8010cba:	f043 0301 	orr.w	r3, r3, #1
 8010cbe:	81a3      	strh	r3, [r4, #12]
 8010cc0:	89a0      	ldrh	r0, [r4, #12]
 8010cc2:	4305      	orrs	r5, r0
 8010cc4:	81a5      	strh	r5, [r4, #12]
 8010cc6:	e7cd      	b.n	8010c64 <__smakebuf_r+0x18>
 8010cc8:	08010375 	.word	0x08010375

08010ccc <malloc>:
 8010ccc:	4b02      	ldr	r3, [pc, #8]	; (8010cd8 <malloc+0xc>)
 8010cce:	4601      	mov	r1, r0
 8010cd0:	6818      	ldr	r0, [r3, #0]
 8010cd2:	f000 bd2f 	b.w	8011734 <_malloc_r>
 8010cd6:	bf00      	nop
 8010cd8:	2000002c 	.word	0x2000002c

08010cdc <__ascii_mbtowc>:
 8010cdc:	b082      	sub	sp, #8
 8010cde:	b901      	cbnz	r1, 8010ce2 <__ascii_mbtowc+0x6>
 8010ce0:	a901      	add	r1, sp, #4
 8010ce2:	b142      	cbz	r2, 8010cf6 <__ascii_mbtowc+0x1a>
 8010ce4:	b14b      	cbz	r3, 8010cfa <__ascii_mbtowc+0x1e>
 8010ce6:	7813      	ldrb	r3, [r2, #0]
 8010ce8:	600b      	str	r3, [r1, #0]
 8010cea:	7812      	ldrb	r2, [r2, #0]
 8010cec:	1e10      	subs	r0, r2, #0
 8010cee:	bf18      	it	ne
 8010cf0:	2001      	movne	r0, #1
 8010cf2:	b002      	add	sp, #8
 8010cf4:	4770      	bx	lr
 8010cf6:	4610      	mov	r0, r2
 8010cf8:	e7fb      	b.n	8010cf2 <__ascii_mbtowc+0x16>
 8010cfa:	f06f 0001 	mvn.w	r0, #1
 8010cfe:	e7f8      	b.n	8010cf2 <__ascii_mbtowc+0x16>

08010d00 <_Balloc>:
 8010d00:	b570      	push	{r4, r5, r6, lr}
 8010d02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010d04:	4604      	mov	r4, r0
 8010d06:	460d      	mov	r5, r1
 8010d08:	b976      	cbnz	r6, 8010d28 <_Balloc+0x28>
 8010d0a:	2010      	movs	r0, #16
 8010d0c:	f7ff ffde 	bl	8010ccc <malloc>
 8010d10:	4602      	mov	r2, r0
 8010d12:	6260      	str	r0, [r4, #36]	; 0x24
 8010d14:	b920      	cbnz	r0, 8010d20 <_Balloc+0x20>
 8010d16:	4b18      	ldr	r3, [pc, #96]	; (8010d78 <_Balloc+0x78>)
 8010d18:	4818      	ldr	r0, [pc, #96]	; (8010d7c <_Balloc+0x7c>)
 8010d1a:	2166      	movs	r1, #102	; 0x66
 8010d1c:	f000 ff4c 	bl	8011bb8 <__assert_func>
 8010d20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d24:	6006      	str	r6, [r0, #0]
 8010d26:	60c6      	str	r6, [r0, #12]
 8010d28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010d2a:	68f3      	ldr	r3, [r6, #12]
 8010d2c:	b183      	cbz	r3, 8010d50 <_Balloc+0x50>
 8010d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d30:	68db      	ldr	r3, [r3, #12]
 8010d32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010d36:	b9b8      	cbnz	r0, 8010d68 <_Balloc+0x68>
 8010d38:	2101      	movs	r1, #1
 8010d3a:	fa01 f605 	lsl.w	r6, r1, r5
 8010d3e:	1d72      	adds	r2, r6, #5
 8010d40:	0092      	lsls	r2, r2, #2
 8010d42:	4620      	mov	r0, r4
 8010d44:	f000 fc97 	bl	8011676 <_calloc_r>
 8010d48:	b160      	cbz	r0, 8010d64 <_Balloc+0x64>
 8010d4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010d4e:	e00e      	b.n	8010d6e <_Balloc+0x6e>
 8010d50:	2221      	movs	r2, #33	; 0x21
 8010d52:	2104      	movs	r1, #4
 8010d54:	4620      	mov	r0, r4
 8010d56:	f000 fc8e 	bl	8011676 <_calloc_r>
 8010d5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d5c:	60f0      	str	r0, [r6, #12]
 8010d5e:	68db      	ldr	r3, [r3, #12]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d1e4      	bne.n	8010d2e <_Balloc+0x2e>
 8010d64:	2000      	movs	r0, #0
 8010d66:	bd70      	pop	{r4, r5, r6, pc}
 8010d68:	6802      	ldr	r2, [r0, #0]
 8010d6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d6e:	2300      	movs	r3, #0
 8010d70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010d74:	e7f7      	b.n	8010d66 <_Balloc+0x66>
 8010d76:	bf00      	nop
 8010d78:	08013596 	.word	0x08013596
 8010d7c:	08013700 	.word	0x08013700

08010d80 <_Bfree>:
 8010d80:	b570      	push	{r4, r5, r6, lr}
 8010d82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010d84:	4605      	mov	r5, r0
 8010d86:	460c      	mov	r4, r1
 8010d88:	b976      	cbnz	r6, 8010da8 <_Bfree+0x28>
 8010d8a:	2010      	movs	r0, #16
 8010d8c:	f7ff ff9e 	bl	8010ccc <malloc>
 8010d90:	4602      	mov	r2, r0
 8010d92:	6268      	str	r0, [r5, #36]	; 0x24
 8010d94:	b920      	cbnz	r0, 8010da0 <_Bfree+0x20>
 8010d96:	4b09      	ldr	r3, [pc, #36]	; (8010dbc <_Bfree+0x3c>)
 8010d98:	4809      	ldr	r0, [pc, #36]	; (8010dc0 <_Bfree+0x40>)
 8010d9a:	218a      	movs	r1, #138	; 0x8a
 8010d9c:	f000 ff0c 	bl	8011bb8 <__assert_func>
 8010da0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010da4:	6006      	str	r6, [r0, #0]
 8010da6:	60c6      	str	r6, [r0, #12]
 8010da8:	b13c      	cbz	r4, 8010dba <_Bfree+0x3a>
 8010daa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010dac:	6862      	ldr	r2, [r4, #4]
 8010dae:	68db      	ldr	r3, [r3, #12]
 8010db0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010db4:	6021      	str	r1, [r4, #0]
 8010db6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010dba:	bd70      	pop	{r4, r5, r6, pc}
 8010dbc:	08013596 	.word	0x08013596
 8010dc0:	08013700 	.word	0x08013700

08010dc4 <__multadd>:
 8010dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dc8:	690e      	ldr	r6, [r1, #16]
 8010dca:	4607      	mov	r7, r0
 8010dcc:	4698      	mov	r8, r3
 8010dce:	460c      	mov	r4, r1
 8010dd0:	f101 0014 	add.w	r0, r1, #20
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	6805      	ldr	r5, [r0, #0]
 8010dd8:	b2a9      	uxth	r1, r5
 8010dda:	fb02 8101 	mla	r1, r2, r1, r8
 8010dde:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010de2:	0c2d      	lsrs	r5, r5, #16
 8010de4:	fb02 c505 	mla	r5, r2, r5, ip
 8010de8:	b289      	uxth	r1, r1
 8010dea:	3301      	adds	r3, #1
 8010dec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010df0:	429e      	cmp	r6, r3
 8010df2:	f840 1b04 	str.w	r1, [r0], #4
 8010df6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010dfa:	dcec      	bgt.n	8010dd6 <__multadd+0x12>
 8010dfc:	f1b8 0f00 	cmp.w	r8, #0
 8010e00:	d022      	beq.n	8010e48 <__multadd+0x84>
 8010e02:	68a3      	ldr	r3, [r4, #8]
 8010e04:	42b3      	cmp	r3, r6
 8010e06:	dc19      	bgt.n	8010e3c <__multadd+0x78>
 8010e08:	6861      	ldr	r1, [r4, #4]
 8010e0a:	4638      	mov	r0, r7
 8010e0c:	3101      	adds	r1, #1
 8010e0e:	f7ff ff77 	bl	8010d00 <_Balloc>
 8010e12:	4605      	mov	r5, r0
 8010e14:	b928      	cbnz	r0, 8010e22 <__multadd+0x5e>
 8010e16:	4602      	mov	r2, r0
 8010e18:	4b0d      	ldr	r3, [pc, #52]	; (8010e50 <__multadd+0x8c>)
 8010e1a:	480e      	ldr	r0, [pc, #56]	; (8010e54 <__multadd+0x90>)
 8010e1c:	21b5      	movs	r1, #181	; 0xb5
 8010e1e:	f000 fecb 	bl	8011bb8 <__assert_func>
 8010e22:	6922      	ldr	r2, [r4, #16]
 8010e24:	3202      	adds	r2, #2
 8010e26:	f104 010c 	add.w	r1, r4, #12
 8010e2a:	0092      	lsls	r2, r2, #2
 8010e2c:	300c      	adds	r0, #12
 8010e2e:	f7fc fe9b 	bl	800db68 <memcpy>
 8010e32:	4621      	mov	r1, r4
 8010e34:	4638      	mov	r0, r7
 8010e36:	f7ff ffa3 	bl	8010d80 <_Bfree>
 8010e3a:	462c      	mov	r4, r5
 8010e3c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010e40:	3601      	adds	r6, #1
 8010e42:	f8c3 8014 	str.w	r8, [r3, #20]
 8010e46:	6126      	str	r6, [r4, #16]
 8010e48:	4620      	mov	r0, r4
 8010e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e4e:	bf00      	nop
 8010e50:	0801360c 	.word	0x0801360c
 8010e54:	08013700 	.word	0x08013700

08010e58 <__s2b>:
 8010e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e5c:	460c      	mov	r4, r1
 8010e5e:	4615      	mov	r5, r2
 8010e60:	461f      	mov	r7, r3
 8010e62:	2209      	movs	r2, #9
 8010e64:	3308      	adds	r3, #8
 8010e66:	4606      	mov	r6, r0
 8010e68:	fb93 f3f2 	sdiv	r3, r3, r2
 8010e6c:	2100      	movs	r1, #0
 8010e6e:	2201      	movs	r2, #1
 8010e70:	429a      	cmp	r2, r3
 8010e72:	db09      	blt.n	8010e88 <__s2b+0x30>
 8010e74:	4630      	mov	r0, r6
 8010e76:	f7ff ff43 	bl	8010d00 <_Balloc>
 8010e7a:	b940      	cbnz	r0, 8010e8e <__s2b+0x36>
 8010e7c:	4602      	mov	r2, r0
 8010e7e:	4b19      	ldr	r3, [pc, #100]	; (8010ee4 <__s2b+0x8c>)
 8010e80:	4819      	ldr	r0, [pc, #100]	; (8010ee8 <__s2b+0x90>)
 8010e82:	21ce      	movs	r1, #206	; 0xce
 8010e84:	f000 fe98 	bl	8011bb8 <__assert_func>
 8010e88:	0052      	lsls	r2, r2, #1
 8010e8a:	3101      	adds	r1, #1
 8010e8c:	e7f0      	b.n	8010e70 <__s2b+0x18>
 8010e8e:	9b08      	ldr	r3, [sp, #32]
 8010e90:	6143      	str	r3, [r0, #20]
 8010e92:	2d09      	cmp	r5, #9
 8010e94:	f04f 0301 	mov.w	r3, #1
 8010e98:	6103      	str	r3, [r0, #16]
 8010e9a:	dd16      	ble.n	8010eca <__s2b+0x72>
 8010e9c:	f104 0909 	add.w	r9, r4, #9
 8010ea0:	46c8      	mov	r8, r9
 8010ea2:	442c      	add	r4, r5
 8010ea4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010ea8:	4601      	mov	r1, r0
 8010eaa:	3b30      	subs	r3, #48	; 0x30
 8010eac:	220a      	movs	r2, #10
 8010eae:	4630      	mov	r0, r6
 8010eb0:	f7ff ff88 	bl	8010dc4 <__multadd>
 8010eb4:	45a0      	cmp	r8, r4
 8010eb6:	d1f5      	bne.n	8010ea4 <__s2b+0x4c>
 8010eb8:	f1a5 0408 	sub.w	r4, r5, #8
 8010ebc:	444c      	add	r4, r9
 8010ebe:	1b2d      	subs	r5, r5, r4
 8010ec0:	1963      	adds	r3, r4, r5
 8010ec2:	42bb      	cmp	r3, r7
 8010ec4:	db04      	blt.n	8010ed0 <__s2b+0x78>
 8010ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010eca:	340a      	adds	r4, #10
 8010ecc:	2509      	movs	r5, #9
 8010ece:	e7f6      	b.n	8010ebe <__s2b+0x66>
 8010ed0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010ed4:	4601      	mov	r1, r0
 8010ed6:	3b30      	subs	r3, #48	; 0x30
 8010ed8:	220a      	movs	r2, #10
 8010eda:	4630      	mov	r0, r6
 8010edc:	f7ff ff72 	bl	8010dc4 <__multadd>
 8010ee0:	e7ee      	b.n	8010ec0 <__s2b+0x68>
 8010ee2:	bf00      	nop
 8010ee4:	0801360c 	.word	0x0801360c
 8010ee8:	08013700 	.word	0x08013700

08010eec <__hi0bits>:
 8010eec:	0c03      	lsrs	r3, r0, #16
 8010eee:	041b      	lsls	r3, r3, #16
 8010ef0:	b9d3      	cbnz	r3, 8010f28 <__hi0bits+0x3c>
 8010ef2:	0400      	lsls	r0, r0, #16
 8010ef4:	2310      	movs	r3, #16
 8010ef6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010efa:	bf04      	itt	eq
 8010efc:	0200      	lsleq	r0, r0, #8
 8010efe:	3308      	addeq	r3, #8
 8010f00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010f04:	bf04      	itt	eq
 8010f06:	0100      	lsleq	r0, r0, #4
 8010f08:	3304      	addeq	r3, #4
 8010f0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010f0e:	bf04      	itt	eq
 8010f10:	0080      	lsleq	r0, r0, #2
 8010f12:	3302      	addeq	r3, #2
 8010f14:	2800      	cmp	r0, #0
 8010f16:	db05      	blt.n	8010f24 <__hi0bits+0x38>
 8010f18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010f1c:	f103 0301 	add.w	r3, r3, #1
 8010f20:	bf08      	it	eq
 8010f22:	2320      	moveq	r3, #32
 8010f24:	4618      	mov	r0, r3
 8010f26:	4770      	bx	lr
 8010f28:	2300      	movs	r3, #0
 8010f2a:	e7e4      	b.n	8010ef6 <__hi0bits+0xa>

08010f2c <__lo0bits>:
 8010f2c:	6803      	ldr	r3, [r0, #0]
 8010f2e:	f013 0207 	ands.w	r2, r3, #7
 8010f32:	4601      	mov	r1, r0
 8010f34:	d00b      	beq.n	8010f4e <__lo0bits+0x22>
 8010f36:	07da      	lsls	r2, r3, #31
 8010f38:	d424      	bmi.n	8010f84 <__lo0bits+0x58>
 8010f3a:	0798      	lsls	r0, r3, #30
 8010f3c:	bf49      	itett	mi
 8010f3e:	085b      	lsrmi	r3, r3, #1
 8010f40:	089b      	lsrpl	r3, r3, #2
 8010f42:	2001      	movmi	r0, #1
 8010f44:	600b      	strmi	r3, [r1, #0]
 8010f46:	bf5c      	itt	pl
 8010f48:	600b      	strpl	r3, [r1, #0]
 8010f4a:	2002      	movpl	r0, #2
 8010f4c:	4770      	bx	lr
 8010f4e:	b298      	uxth	r0, r3
 8010f50:	b9b0      	cbnz	r0, 8010f80 <__lo0bits+0x54>
 8010f52:	0c1b      	lsrs	r3, r3, #16
 8010f54:	2010      	movs	r0, #16
 8010f56:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010f5a:	bf04      	itt	eq
 8010f5c:	0a1b      	lsreq	r3, r3, #8
 8010f5e:	3008      	addeq	r0, #8
 8010f60:	071a      	lsls	r2, r3, #28
 8010f62:	bf04      	itt	eq
 8010f64:	091b      	lsreq	r3, r3, #4
 8010f66:	3004      	addeq	r0, #4
 8010f68:	079a      	lsls	r2, r3, #30
 8010f6a:	bf04      	itt	eq
 8010f6c:	089b      	lsreq	r3, r3, #2
 8010f6e:	3002      	addeq	r0, #2
 8010f70:	07da      	lsls	r2, r3, #31
 8010f72:	d403      	bmi.n	8010f7c <__lo0bits+0x50>
 8010f74:	085b      	lsrs	r3, r3, #1
 8010f76:	f100 0001 	add.w	r0, r0, #1
 8010f7a:	d005      	beq.n	8010f88 <__lo0bits+0x5c>
 8010f7c:	600b      	str	r3, [r1, #0]
 8010f7e:	4770      	bx	lr
 8010f80:	4610      	mov	r0, r2
 8010f82:	e7e8      	b.n	8010f56 <__lo0bits+0x2a>
 8010f84:	2000      	movs	r0, #0
 8010f86:	4770      	bx	lr
 8010f88:	2020      	movs	r0, #32
 8010f8a:	4770      	bx	lr

08010f8c <__i2b>:
 8010f8c:	b510      	push	{r4, lr}
 8010f8e:	460c      	mov	r4, r1
 8010f90:	2101      	movs	r1, #1
 8010f92:	f7ff feb5 	bl	8010d00 <_Balloc>
 8010f96:	4602      	mov	r2, r0
 8010f98:	b928      	cbnz	r0, 8010fa6 <__i2b+0x1a>
 8010f9a:	4b05      	ldr	r3, [pc, #20]	; (8010fb0 <__i2b+0x24>)
 8010f9c:	4805      	ldr	r0, [pc, #20]	; (8010fb4 <__i2b+0x28>)
 8010f9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010fa2:	f000 fe09 	bl	8011bb8 <__assert_func>
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	6144      	str	r4, [r0, #20]
 8010faa:	6103      	str	r3, [r0, #16]
 8010fac:	bd10      	pop	{r4, pc}
 8010fae:	bf00      	nop
 8010fb0:	0801360c 	.word	0x0801360c
 8010fb4:	08013700 	.word	0x08013700

08010fb8 <__multiply>:
 8010fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fbc:	4614      	mov	r4, r2
 8010fbe:	690a      	ldr	r2, [r1, #16]
 8010fc0:	6923      	ldr	r3, [r4, #16]
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	bfb8      	it	lt
 8010fc6:	460b      	movlt	r3, r1
 8010fc8:	460d      	mov	r5, r1
 8010fca:	bfbc      	itt	lt
 8010fcc:	4625      	movlt	r5, r4
 8010fce:	461c      	movlt	r4, r3
 8010fd0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010fd4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010fd8:	68ab      	ldr	r3, [r5, #8]
 8010fda:	6869      	ldr	r1, [r5, #4]
 8010fdc:	eb0a 0709 	add.w	r7, sl, r9
 8010fe0:	42bb      	cmp	r3, r7
 8010fe2:	b085      	sub	sp, #20
 8010fe4:	bfb8      	it	lt
 8010fe6:	3101      	addlt	r1, #1
 8010fe8:	f7ff fe8a 	bl	8010d00 <_Balloc>
 8010fec:	b930      	cbnz	r0, 8010ffc <__multiply+0x44>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	4b42      	ldr	r3, [pc, #264]	; (80110fc <__multiply+0x144>)
 8010ff2:	4843      	ldr	r0, [pc, #268]	; (8011100 <__multiply+0x148>)
 8010ff4:	f240 115d 	movw	r1, #349	; 0x15d
 8010ff8:	f000 fdde 	bl	8011bb8 <__assert_func>
 8010ffc:	f100 0614 	add.w	r6, r0, #20
 8011000:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011004:	4633      	mov	r3, r6
 8011006:	2200      	movs	r2, #0
 8011008:	4543      	cmp	r3, r8
 801100a:	d31e      	bcc.n	801104a <__multiply+0x92>
 801100c:	f105 0c14 	add.w	ip, r5, #20
 8011010:	f104 0314 	add.w	r3, r4, #20
 8011014:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011018:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801101c:	9202      	str	r2, [sp, #8]
 801101e:	ebac 0205 	sub.w	r2, ip, r5
 8011022:	3a15      	subs	r2, #21
 8011024:	f022 0203 	bic.w	r2, r2, #3
 8011028:	3204      	adds	r2, #4
 801102a:	f105 0115 	add.w	r1, r5, #21
 801102e:	458c      	cmp	ip, r1
 8011030:	bf38      	it	cc
 8011032:	2204      	movcc	r2, #4
 8011034:	9201      	str	r2, [sp, #4]
 8011036:	9a02      	ldr	r2, [sp, #8]
 8011038:	9303      	str	r3, [sp, #12]
 801103a:	429a      	cmp	r2, r3
 801103c:	d808      	bhi.n	8011050 <__multiply+0x98>
 801103e:	2f00      	cmp	r7, #0
 8011040:	dc55      	bgt.n	80110ee <__multiply+0x136>
 8011042:	6107      	str	r7, [r0, #16]
 8011044:	b005      	add	sp, #20
 8011046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801104a:	f843 2b04 	str.w	r2, [r3], #4
 801104e:	e7db      	b.n	8011008 <__multiply+0x50>
 8011050:	f8b3 a000 	ldrh.w	sl, [r3]
 8011054:	f1ba 0f00 	cmp.w	sl, #0
 8011058:	d020      	beq.n	801109c <__multiply+0xe4>
 801105a:	f105 0e14 	add.w	lr, r5, #20
 801105e:	46b1      	mov	r9, r6
 8011060:	2200      	movs	r2, #0
 8011062:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011066:	f8d9 b000 	ldr.w	fp, [r9]
 801106a:	b2a1      	uxth	r1, r4
 801106c:	fa1f fb8b 	uxth.w	fp, fp
 8011070:	fb0a b101 	mla	r1, sl, r1, fp
 8011074:	4411      	add	r1, r2
 8011076:	f8d9 2000 	ldr.w	r2, [r9]
 801107a:	0c24      	lsrs	r4, r4, #16
 801107c:	0c12      	lsrs	r2, r2, #16
 801107e:	fb0a 2404 	mla	r4, sl, r4, r2
 8011082:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011086:	b289      	uxth	r1, r1
 8011088:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801108c:	45f4      	cmp	ip, lr
 801108e:	f849 1b04 	str.w	r1, [r9], #4
 8011092:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8011096:	d8e4      	bhi.n	8011062 <__multiply+0xaa>
 8011098:	9901      	ldr	r1, [sp, #4]
 801109a:	5072      	str	r2, [r6, r1]
 801109c:	9a03      	ldr	r2, [sp, #12]
 801109e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80110a2:	3304      	adds	r3, #4
 80110a4:	f1b9 0f00 	cmp.w	r9, #0
 80110a8:	d01f      	beq.n	80110ea <__multiply+0x132>
 80110aa:	6834      	ldr	r4, [r6, #0]
 80110ac:	f105 0114 	add.w	r1, r5, #20
 80110b0:	46b6      	mov	lr, r6
 80110b2:	f04f 0a00 	mov.w	sl, #0
 80110b6:	880a      	ldrh	r2, [r1, #0]
 80110b8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80110bc:	fb09 b202 	mla	r2, r9, r2, fp
 80110c0:	4492      	add	sl, r2
 80110c2:	b2a4      	uxth	r4, r4
 80110c4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80110c8:	f84e 4b04 	str.w	r4, [lr], #4
 80110cc:	f851 4b04 	ldr.w	r4, [r1], #4
 80110d0:	f8be 2000 	ldrh.w	r2, [lr]
 80110d4:	0c24      	lsrs	r4, r4, #16
 80110d6:	fb09 2404 	mla	r4, r9, r4, r2
 80110da:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80110de:	458c      	cmp	ip, r1
 80110e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80110e4:	d8e7      	bhi.n	80110b6 <__multiply+0xfe>
 80110e6:	9a01      	ldr	r2, [sp, #4]
 80110e8:	50b4      	str	r4, [r6, r2]
 80110ea:	3604      	adds	r6, #4
 80110ec:	e7a3      	b.n	8011036 <__multiply+0x7e>
 80110ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d1a5      	bne.n	8011042 <__multiply+0x8a>
 80110f6:	3f01      	subs	r7, #1
 80110f8:	e7a1      	b.n	801103e <__multiply+0x86>
 80110fa:	bf00      	nop
 80110fc:	0801360c 	.word	0x0801360c
 8011100:	08013700 	.word	0x08013700

08011104 <__pow5mult>:
 8011104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011108:	4615      	mov	r5, r2
 801110a:	f012 0203 	ands.w	r2, r2, #3
 801110e:	4606      	mov	r6, r0
 8011110:	460f      	mov	r7, r1
 8011112:	d007      	beq.n	8011124 <__pow5mult+0x20>
 8011114:	4c25      	ldr	r4, [pc, #148]	; (80111ac <__pow5mult+0xa8>)
 8011116:	3a01      	subs	r2, #1
 8011118:	2300      	movs	r3, #0
 801111a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801111e:	f7ff fe51 	bl	8010dc4 <__multadd>
 8011122:	4607      	mov	r7, r0
 8011124:	10ad      	asrs	r5, r5, #2
 8011126:	d03d      	beq.n	80111a4 <__pow5mult+0xa0>
 8011128:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801112a:	b97c      	cbnz	r4, 801114c <__pow5mult+0x48>
 801112c:	2010      	movs	r0, #16
 801112e:	f7ff fdcd 	bl	8010ccc <malloc>
 8011132:	4602      	mov	r2, r0
 8011134:	6270      	str	r0, [r6, #36]	; 0x24
 8011136:	b928      	cbnz	r0, 8011144 <__pow5mult+0x40>
 8011138:	4b1d      	ldr	r3, [pc, #116]	; (80111b0 <__pow5mult+0xac>)
 801113a:	481e      	ldr	r0, [pc, #120]	; (80111b4 <__pow5mult+0xb0>)
 801113c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011140:	f000 fd3a 	bl	8011bb8 <__assert_func>
 8011144:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011148:	6004      	str	r4, [r0, #0]
 801114a:	60c4      	str	r4, [r0, #12]
 801114c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011150:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011154:	b94c      	cbnz	r4, 801116a <__pow5mult+0x66>
 8011156:	f240 2171 	movw	r1, #625	; 0x271
 801115a:	4630      	mov	r0, r6
 801115c:	f7ff ff16 	bl	8010f8c <__i2b>
 8011160:	2300      	movs	r3, #0
 8011162:	f8c8 0008 	str.w	r0, [r8, #8]
 8011166:	4604      	mov	r4, r0
 8011168:	6003      	str	r3, [r0, #0]
 801116a:	f04f 0900 	mov.w	r9, #0
 801116e:	07eb      	lsls	r3, r5, #31
 8011170:	d50a      	bpl.n	8011188 <__pow5mult+0x84>
 8011172:	4639      	mov	r1, r7
 8011174:	4622      	mov	r2, r4
 8011176:	4630      	mov	r0, r6
 8011178:	f7ff ff1e 	bl	8010fb8 <__multiply>
 801117c:	4639      	mov	r1, r7
 801117e:	4680      	mov	r8, r0
 8011180:	4630      	mov	r0, r6
 8011182:	f7ff fdfd 	bl	8010d80 <_Bfree>
 8011186:	4647      	mov	r7, r8
 8011188:	106d      	asrs	r5, r5, #1
 801118a:	d00b      	beq.n	80111a4 <__pow5mult+0xa0>
 801118c:	6820      	ldr	r0, [r4, #0]
 801118e:	b938      	cbnz	r0, 80111a0 <__pow5mult+0x9c>
 8011190:	4622      	mov	r2, r4
 8011192:	4621      	mov	r1, r4
 8011194:	4630      	mov	r0, r6
 8011196:	f7ff ff0f 	bl	8010fb8 <__multiply>
 801119a:	6020      	str	r0, [r4, #0]
 801119c:	f8c0 9000 	str.w	r9, [r0]
 80111a0:	4604      	mov	r4, r0
 80111a2:	e7e4      	b.n	801116e <__pow5mult+0x6a>
 80111a4:	4638      	mov	r0, r7
 80111a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111aa:	bf00      	nop
 80111ac:	08013850 	.word	0x08013850
 80111b0:	08013596 	.word	0x08013596
 80111b4:	08013700 	.word	0x08013700

080111b8 <__lshift>:
 80111b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111bc:	460c      	mov	r4, r1
 80111be:	6849      	ldr	r1, [r1, #4]
 80111c0:	6923      	ldr	r3, [r4, #16]
 80111c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80111c6:	68a3      	ldr	r3, [r4, #8]
 80111c8:	4607      	mov	r7, r0
 80111ca:	4691      	mov	r9, r2
 80111cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80111d0:	f108 0601 	add.w	r6, r8, #1
 80111d4:	42b3      	cmp	r3, r6
 80111d6:	db0b      	blt.n	80111f0 <__lshift+0x38>
 80111d8:	4638      	mov	r0, r7
 80111da:	f7ff fd91 	bl	8010d00 <_Balloc>
 80111de:	4605      	mov	r5, r0
 80111e0:	b948      	cbnz	r0, 80111f6 <__lshift+0x3e>
 80111e2:	4602      	mov	r2, r0
 80111e4:	4b28      	ldr	r3, [pc, #160]	; (8011288 <__lshift+0xd0>)
 80111e6:	4829      	ldr	r0, [pc, #164]	; (801128c <__lshift+0xd4>)
 80111e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80111ec:	f000 fce4 	bl	8011bb8 <__assert_func>
 80111f0:	3101      	adds	r1, #1
 80111f2:	005b      	lsls	r3, r3, #1
 80111f4:	e7ee      	b.n	80111d4 <__lshift+0x1c>
 80111f6:	2300      	movs	r3, #0
 80111f8:	f100 0114 	add.w	r1, r0, #20
 80111fc:	f100 0210 	add.w	r2, r0, #16
 8011200:	4618      	mov	r0, r3
 8011202:	4553      	cmp	r3, sl
 8011204:	db33      	blt.n	801126e <__lshift+0xb6>
 8011206:	6920      	ldr	r0, [r4, #16]
 8011208:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801120c:	f104 0314 	add.w	r3, r4, #20
 8011210:	f019 091f 	ands.w	r9, r9, #31
 8011214:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011218:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801121c:	d02b      	beq.n	8011276 <__lshift+0xbe>
 801121e:	f1c9 0e20 	rsb	lr, r9, #32
 8011222:	468a      	mov	sl, r1
 8011224:	2200      	movs	r2, #0
 8011226:	6818      	ldr	r0, [r3, #0]
 8011228:	fa00 f009 	lsl.w	r0, r0, r9
 801122c:	4302      	orrs	r2, r0
 801122e:	f84a 2b04 	str.w	r2, [sl], #4
 8011232:	f853 2b04 	ldr.w	r2, [r3], #4
 8011236:	459c      	cmp	ip, r3
 8011238:	fa22 f20e 	lsr.w	r2, r2, lr
 801123c:	d8f3      	bhi.n	8011226 <__lshift+0x6e>
 801123e:	ebac 0304 	sub.w	r3, ip, r4
 8011242:	3b15      	subs	r3, #21
 8011244:	f023 0303 	bic.w	r3, r3, #3
 8011248:	3304      	adds	r3, #4
 801124a:	f104 0015 	add.w	r0, r4, #21
 801124e:	4584      	cmp	ip, r0
 8011250:	bf38      	it	cc
 8011252:	2304      	movcc	r3, #4
 8011254:	50ca      	str	r2, [r1, r3]
 8011256:	b10a      	cbz	r2, 801125c <__lshift+0xa4>
 8011258:	f108 0602 	add.w	r6, r8, #2
 801125c:	3e01      	subs	r6, #1
 801125e:	4638      	mov	r0, r7
 8011260:	612e      	str	r6, [r5, #16]
 8011262:	4621      	mov	r1, r4
 8011264:	f7ff fd8c 	bl	8010d80 <_Bfree>
 8011268:	4628      	mov	r0, r5
 801126a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801126e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011272:	3301      	adds	r3, #1
 8011274:	e7c5      	b.n	8011202 <__lshift+0x4a>
 8011276:	3904      	subs	r1, #4
 8011278:	f853 2b04 	ldr.w	r2, [r3], #4
 801127c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011280:	459c      	cmp	ip, r3
 8011282:	d8f9      	bhi.n	8011278 <__lshift+0xc0>
 8011284:	e7ea      	b.n	801125c <__lshift+0xa4>
 8011286:	bf00      	nop
 8011288:	0801360c 	.word	0x0801360c
 801128c:	08013700 	.word	0x08013700

08011290 <__mcmp>:
 8011290:	b530      	push	{r4, r5, lr}
 8011292:	6902      	ldr	r2, [r0, #16]
 8011294:	690c      	ldr	r4, [r1, #16]
 8011296:	1b12      	subs	r2, r2, r4
 8011298:	d10e      	bne.n	80112b8 <__mcmp+0x28>
 801129a:	f100 0314 	add.w	r3, r0, #20
 801129e:	3114      	adds	r1, #20
 80112a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80112a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80112a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80112ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80112b0:	42a5      	cmp	r5, r4
 80112b2:	d003      	beq.n	80112bc <__mcmp+0x2c>
 80112b4:	d305      	bcc.n	80112c2 <__mcmp+0x32>
 80112b6:	2201      	movs	r2, #1
 80112b8:	4610      	mov	r0, r2
 80112ba:	bd30      	pop	{r4, r5, pc}
 80112bc:	4283      	cmp	r3, r0
 80112be:	d3f3      	bcc.n	80112a8 <__mcmp+0x18>
 80112c0:	e7fa      	b.n	80112b8 <__mcmp+0x28>
 80112c2:	f04f 32ff 	mov.w	r2, #4294967295
 80112c6:	e7f7      	b.n	80112b8 <__mcmp+0x28>

080112c8 <__mdiff>:
 80112c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112cc:	460c      	mov	r4, r1
 80112ce:	4606      	mov	r6, r0
 80112d0:	4611      	mov	r1, r2
 80112d2:	4620      	mov	r0, r4
 80112d4:	4617      	mov	r7, r2
 80112d6:	f7ff ffdb 	bl	8011290 <__mcmp>
 80112da:	1e05      	subs	r5, r0, #0
 80112dc:	d110      	bne.n	8011300 <__mdiff+0x38>
 80112de:	4629      	mov	r1, r5
 80112e0:	4630      	mov	r0, r6
 80112e2:	f7ff fd0d 	bl	8010d00 <_Balloc>
 80112e6:	b930      	cbnz	r0, 80112f6 <__mdiff+0x2e>
 80112e8:	4b39      	ldr	r3, [pc, #228]	; (80113d0 <__mdiff+0x108>)
 80112ea:	4602      	mov	r2, r0
 80112ec:	f240 2132 	movw	r1, #562	; 0x232
 80112f0:	4838      	ldr	r0, [pc, #224]	; (80113d4 <__mdiff+0x10c>)
 80112f2:	f000 fc61 	bl	8011bb8 <__assert_func>
 80112f6:	2301      	movs	r3, #1
 80112f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80112fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011300:	bfa4      	itt	ge
 8011302:	463b      	movge	r3, r7
 8011304:	4627      	movge	r7, r4
 8011306:	4630      	mov	r0, r6
 8011308:	6879      	ldr	r1, [r7, #4]
 801130a:	bfa6      	itte	ge
 801130c:	461c      	movge	r4, r3
 801130e:	2500      	movge	r5, #0
 8011310:	2501      	movlt	r5, #1
 8011312:	f7ff fcf5 	bl	8010d00 <_Balloc>
 8011316:	b920      	cbnz	r0, 8011322 <__mdiff+0x5a>
 8011318:	4b2d      	ldr	r3, [pc, #180]	; (80113d0 <__mdiff+0x108>)
 801131a:	4602      	mov	r2, r0
 801131c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011320:	e7e6      	b.n	80112f0 <__mdiff+0x28>
 8011322:	693e      	ldr	r6, [r7, #16]
 8011324:	60c5      	str	r5, [r0, #12]
 8011326:	6925      	ldr	r5, [r4, #16]
 8011328:	f107 0114 	add.w	r1, r7, #20
 801132c:	f104 0914 	add.w	r9, r4, #20
 8011330:	f100 0e14 	add.w	lr, r0, #20
 8011334:	f107 0210 	add.w	r2, r7, #16
 8011338:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801133c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011340:	46f2      	mov	sl, lr
 8011342:	2700      	movs	r7, #0
 8011344:	f859 3b04 	ldr.w	r3, [r9], #4
 8011348:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801134c:	fa1f f883 	uxth.w	r8, r3
 8011350:	fa17 f78b 	uxtah	r7, r7, fp
 8011354:	0c1b      	lsrs	r3, r3, #16
 8011356:	eba7 0808 	sub.w	r8, r7, r8
 801135a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801135e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011362:	fa1f f888 	uxth.w	r8, r8
 8011366:	141f      	asrs	r7, r3, #16
 8011368:	454d      	cmp	r5, r9
 801136a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801136e:	f84a 3b04 	str.w	r3, [sl], #4
 8011372:	d8e7      	bhi.n	8011344 <__mdiff+0x7c>
 8011374:	1b2b      	subs	r3, r5, r4
 8011376:	3b15      	subs	r3, #21
 8011378:	f023 0303 	bic.w	r3, r3, #3
 801137c:	3304      	adds	r3, #4
 801137e:	3415      	adds	r4, #21
 8011380:	42a5      	cmp	r5, r4
 8011382:	bf38      	it	cc
 8011384:	2304      	movcc	r3, #4
 8011386:	4419      	add	r1, r3
 8011388:	4473      	add	r3, lr
 801138a:	469e      	mov	lr, r3
 801138c:	460d      	mov	r5, r1
 801138e:	4565      	cmp	r5, ip
 8011390:	d30e      	bcc.n	80113b0 <__mdiff+0xe8>
 8011392:	f10c 0203 	add.w	r2, ip, #3
 8011396:	1a52      	subs	r2, r2, r1
 8011398:	f022 0203 	bic.w	r2, r2, #3
 801139c:	3903      	subs	r1, #3
 801139e:	458c      	cmp	ip, r1
 80113a0:	bf38      	it	cc
 80113a2:	2200      	movcc	r2, #0
 80113a4:	441a      	add	r2, r3
 80113a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80113aa:	b17b      	cbz	r3, 80113cc <__mdiff+0x104>
 80113ac:	6106      	str	r6, [r0, #16]
 80113ae:	e7a5      	b.n	80112fc <__mdiff+0x34>
 80113b0:	f855 8b04 	ldr.w	r8, [r5], #4
 80113b4:	fa17 f488 	uxtah	r4, r7, r8
 80113b8:	1422      	asrs	r2, r4, #16
 80113ba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80113be:	b2a4      	uxth	r4, r4
 80113c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80113c4:	f84e 4b04 	str.w	r4, [lr], #4
 80113c8:	1417      	asrs	r7, r2, #16
 80113ca:	e7e0      	b.n	801138e <__mdiff+0xc6>
 80113cc:	3e01      	subs	r6, #1
 80113ce:	e7ea      	b.n	80113a6 <__mdiff+0xde>
 80113d0:	0801360c 	.word	0x0801360c
 80113d4:	08013700 	.word	0x08013700

080113d8 <__ulp>:
 80113d8:	b082      	sub	sp, #8
 80113da:	ed8d 0b00 	vstr	d0, [sp]
 80113de:	9b01      	ldr	r3, [sp, #4]
 80113e0:	4912      	ldr	r1, [pc, #72]	; (801142c <__ulp+0x54>)
 80113e2:	4019      	ands	r1, r3
 80113e4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80113e8:	2900      	cmp	r1, #0
 80113ea:	dd05      	ble.n	80113f8 <__ulp+0x20>
 80113ec:	2200      	movs	r2, #0
 80113ee:	460b      	mov	r3, r1
 80113f0:	ec43 2b10 	vmov	d0, r2, r3
 80113f4:	b002      	add	sp, #8
 80113f6:	4770      	bx	lr
 80113f8:	4249      	negs	r1, r1
 80113fa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80113fe:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011402:	f04f 0200 	mov.w	r2, #0
 8011406:	f04f 0300 	mov.w	r3, #0
 801140a:	da04      	bge.n	8011416 <__ulp+0x3e>
 801140c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011410:	fa41 f300 	asr.w	r3, r1, r0
 8011414:	e7ec      	b.n	80113f0 <__ulp+0x18>
 8011416:	f1a0 0114 	sub.w	r1, r0, #20
 801141a:	291e      	cmp	r1, #30
 801141c:	bfda      	itte	le
 801141e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011422:	fa20 f101 	lsrle.w	r1, r0, r1
 8011426:	2101      	movgt	r1, #1
 8011428:	460a      	mov	r2, r1
 801142a:	e7e1      	b.n	80113f0 <__ulp+0x18>
 801142c:	7ff00000 	.word	0x7ff00000

08011430 <__b2d>:
 8011430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011432:	6905      	ldr	r5, [r0, #16]
 8011434:	f100 0714 	add.w	r7, r0, #20
 8011438:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801143c:	1f2e      	subs	r6, r5, #4
 801143e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011442:	4620      	mov	r0, r4
 8011444:	f7ff fd52 	bl	8010eec <__hi0bits>
 8011448:	f1c0 0320 	rsb	r3, r0, #32
 801144c:	280a      	cmp	r0, #10
 801144e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80114cc <__b2d+0x9c>
 8011452:	600b      	str	r3, [r1, #0]
 8011454:	dc14      	bgt.n	8011480 <__b2d+0x50>
 8011456:	f1c0 0e0b 	rsb	lr, r0, #11
 801145a:	fa24 f10e 	lsr.w	r1, r4, lr
 801145e:	42b7      	cmp	r7, r6
 8011460:	ea41 030c 	orr.w	r3, r1, ip
 8011464:	bf34      	ite	cc
 8011466:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801146a:	2100      	movcs	r1, #0
 801146c:	3015      	adds	r0, #21
 801146e:	fa04 f000 	lsl.w	r0, r4, r0
 8011472:	fa21 f10e 	lsr.w	r1, r1, lr
 8011476:	ea40 0201 	orr.w	r2, r0, r1
 801147a:	ec43 2b10 	vmov	d0, r2, r3
 801147e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011480:	42b7      	cmp	r7, r6
 8011482:	bf3a      	itte	cc
 8011484:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011488:	f1a5 0608 	subcc.w	r6, r5, #8
 801148c:	2100      	movcs	r1, #0
 801148e:	380b      	subs	r0, #11
 8011490:	d017      	beq.n	80114c2 <__b2d+0x92>
 8011492:	f1c0 0c20 	rsb	ip, r0, #32
 8011496:	fa04 f500 	lsl.w	r5, r4, r0
 801149a:	42be      	cmp	r6, r7
 801149c:	fa21 f40c 	lsr.w	r4, r1, ip
 80114a0:	ea45 0504 	orr.w	r5, r5, r4
 80114a4:	bf8c      	ite	hi
 80114a6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80114aa:	2400      	movls	r4, #0
 80114ac:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80114b0:	fa01 f000 	lsl.w	r0, r1, r0
 80114b4:	fa24 f40c 	lsr.w	r4, r4, ip
 80114b8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80114bc:	ea40 0204 	orr.w	r2, r0, r4
 80114c0:	e7db      	b.n	801147a <__b2d+0x4a>
 80114c2:	ea44 030c 	orr.w	r3, r4, ip
 80114c6:	460a      	mov	r2, r1
 80114c8:	e7d7      	b.n	801147a <__b2d+0x4a>
 80114ca:	bf00      	nop
 80114cc:	3ff00000 	.word	0x3ff00000

080114d0 <__d2b>:
 80114d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80114d4:	4689      	mov	r9, r1
 80114d6:	2101      	movs	r1, #1
 80114d8:	ec57 6b10 	vmov	r6, r7, d0
 80114dc:	4690      	mov	r8, r2
 80114de:	f7ff fc0f 	bl	8010d00 <_Balloc>
 80114e2:	4604      	mov	r4, r0
 80114e4:	b930      	cbnz	r0, 80114f4 <__d2b+0x24>
 80114e6:	4602      	mov	r2, r0
 80114e8:	4b25      	ldr	r3, [pc, #148]	; (8011580 <__d2b+0xb0>)
 80114ea:	4826      	ldr	r0, [pc, #152]	; (8011584 <__d2b+0xb4>)
 80114ec:	f240 310a 	movw	r1, #778	; 0x30a
 80114f0:	f000 fb62 	bl	8011bb8 <__assert_func>
 80114f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80114f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80114fc:	bb35      	cbnz	r5, 801154c <__d2b+0x7c>
 80114fe:	2e00      	cmp	r6, #0
 8011500:	9301      	str	r3, [sp, #4]
 8011502:	d028      	beq.n	8011556 <__d2b+0x86>
 8011504:	4668      	mov	r0, sp
 8011506:	9600      	str	r6, [sp, #0]
 8011508:	f7ff fd10 	bl	8010f2c <__lo0bits>
 801150c:	9900      	ldr	r1, [sp, #0]
 801150e:	b300      	cbz	r0, 8011552 <__d2b+0x82>
 8011510:	9a01      	ldr	r2, [sp, #4]
 8011512:	f1c0 0320 	rsb	r3, r0, #32
 8011516:	fa02 f303 	lsl.w	r3, r2, r3
 801151a:	430b      	orrs	r3, r1
 801151c:	40c2      	lsrs	r2, r0
 801151e:	6163      	str	r3, [r4, #20]
 8011520:	9201      	str	r2, [sp, #4]
 8011522:	9b01      	ldr	r3, [sp, #4]
 8011524:	61a3      	str	r3, [r4, #24]
 8011526:	2b00      	cmp	r3, #0
 8011528:	bf14      	ite	ne
 801152a:	2202      	movne	r2, #2
 801152c:	2201      	moveq	r2, #1
 801152e:	6122      	str	r2, [r4, #16]
 8011530:	b1d5      	cbz	r5, 8011568 <__d2b+0x98>
 8011532:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011536:	4405      	add	r5, r0
 8011538:	f8c9 5000 	str.w	r5, [r9]
 801153c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011540:	f8c8 0000 	str.w	r0, [r8]
 8011544:	4620      	mov	r0, r4
 8011546:	b003      	add	sp, #12
 8011548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801154c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011550:	e7d5      	b.n	80114fe <__d2b+0x2e>
 8011552:	6161      	str	r1, [r4, #20]
 8011554:	e7e5      	b.n	8011522 <__d2b+0x52>
 8011556:	a801      	add	r0, sp, #4
 8011558:	f7ff fce8 	bl	8010f2c <__lo0bits>
 801155c:	9b01      	ldr	r3, [sp, #4]
 801155e:	6163      	str	r3, [r4, #20]
 8011560:	2201      	movs	r2, #1
 8011562:	6122      	str	r2, [r4, #16]
 8011564:	3020      	adds	r0, #32
 8011566:	e7e3      	b.n	8011530 <__d2b+0x60>
 8011568:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801156c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011570:	f8c9 0000 	str.w	r0, [r9]
 8011574:	6918      	ldr	r0, [r3, #16]
 8011576:	f7ff fcb9 	bl	8010eec <__hi0bits>
 801157a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801157e:	e7df      	b.n	8011540 <__d2b+0x70>
 8011580:	0801360c 	.word	0x0801360c
 8011584:	08013700 	.word	0x08013700

08011588 <__ratio>:
 8011588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801158c:	4688      	mov	r8, r1
 801158e:	4669      	mov	r1, sp
 8011590:	4681      	mov	r9, r0
 8011592:	f7ff ff4d 	bl	8011430 <__b2d>
 8011596:	a901      	add	r1, sp, #4
 8011598:	4640      	mov	r0, r8
 801159a:	ec55 4b10 	vmov	r4, r5, d0
 801159e:	f7ff ff47 	bl	8011430 <__b2d>
 80115a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80115a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80115aa:	eba3 0c02 	sub.w	ip, r3, r2
 80115ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 80115b2:	1a9b      	subs	r3, r3, r2
 80115b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80115b8:	ec51 0b10 	vmov	r0, r1, d0
 80115bc:	2b00      	cmp	r3, #0
 80115be:	bfd6      	itet	le
 80115c0:	460a      	movle	r2, r1
 80115c2:	462a      	movgt	r2, r5
 80115c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80115c8:	468b      	mov	fp, r1
 80115ca:	462f      	mov	r7, r5
 80115cc:	bfd4      	ite	le
 80115ce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80115d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80115d6:	4620      	mov	r0, r4
 80115d8:	ee10 2a10 	vmov	r2, s0
 80115dc:	465b      	mov	r3, fp
 80115de:	4639      	mov	r1, r7
 80115e0:	f7ef f95c 	bl	800089c <__aeabi_ddiv>
 80115e4:	ec41 0b10 	vmov	d0, r0, r1
 80115e8:	b003      	add	sp, #12
 80115ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080115ee <__copybits>:
 80115ee:	3901      	subs	r1, #1
 80115f0:	b570      	push	{r4, r5, r6, lr}
 80115f2:	1149      	asrs	r1, r1, #5
 80115f4:	6914      	ldr	r4, [r2, #16]
 80115f6:	3101      	adds	r1, #1
 80115f8:	f102 0314 	add.w	r3, r2, #20
 80115fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011600:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011604:	1f05      	subs	r5, r0, #4
 8011606:	42a3      	cmp	r3, r4
 8011608:	d30c      	bcc.n	8011624 <__copybits+0x36>
 801160a:	1aa3      	subs	r3, r4, r2
 801160c:	3b11      	subs	r3, #17
 801160e:	f023 0303 	bic.w	r3, r3, #3
 8011612:	3211      	adds	r2, #17
 8011614:	42a2      	cmp	r2, r4
 8011616:	bf88      	it	hi
 8011618:	2300      	movhi	r3, #0
 801161a:	4418      	add	r0, r3
 801161c:	2300      	movs	r3, #0
 801161e:	4288      	cmp	r0, r1
 8011620:	d305      	bcc.n	801162e <__copybits+0x40>
 8011622:	bd70      	pop	{r4, r5, r6, pc}
 8011624:	f853 6b04 	ldr.w	r6, [r3], #4
 8011628:	f845 6f04 	str.w	r6, [r5, #4]!
 801162c:	e7eb      	b.n	8011606 <__copybits+0x18>
 801162e:	f840 3b04 	str.w	r3, [r0], #4
 8011632:	e7f4      	b.n	801161e <__copybits+0x30>

08011634 <__any_on>:
 8011634:	f100 0214 	add.w	r2, r0, #20
 8011638:	6900      	ldr	r0, [r0, #16]
 801163a:	114b      	asrs	r3, r1, #5
 801163c:	4298      	cmp	r0, r3
 801163e:	b510      	push	{r4, lr}
 8011640:	db11      	blt.n	8011666 <__any_on+0x32>
 8011642:	dd0a      	ble.n	801165a <__any_on+0x26>
 8011644:	f011 011f 	ands.w	r1, r1, #31
 8011648:	d007      	beq.n	801165a <__any_on+0x26>
 801164a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801164e:	fa24 f001 	lsr.w	r0, r4, r1
 8011652:	fa00 f101 	lsl.w	r1, r0, r1
 8011656:	428c      	cmp	r4, r1
 8011658:	d10b      	bne.n	8011672 <__any_on+0x3e>
 801165a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801165e:	4293      	cmp	r3, r2
 8011660:	d803      	bhi.n	801166a <__any_on+0x36>
 8011662:	2000      	movs	r0, #0
 8011664:	bd10      	pop	{r4, pc}
 8011666:	4603      	mov	r3, r0
 8011668:	e7f7      	b.n	801165a <__any_on+0x26>
 801166a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801166e:	2900      	cmp	r1, #0
 8011670:	d0f5      	beq.n	801165e <__any_on+0x2a>
 8011672:	2001      	movs	r0, #1
 8011674:	e7f6      	b.n	8011664 <__any_on+0x30>

08011676 <_calloc_r>:
 8011676:	b513      	push	{r0, r1, r4, lr}
 8011678:	434a      	muls	r2, r1
 801167a:	4611      	mov	r1, r2
 801167c:	9201      	str	r2, [sp, #4]
 801167e:	f000 f859 	bl	8011734 <_malloc_r>
 8011682:	4604      	mov	r4, r0
 8011684:	b118      	cbz	r0, 801168e <_calloc_r+0x18>
 8011686:	9a01      	ldr	r2, [sp, #4]
 8011688:	2100      	movs	r1, #0
 801168a:	f7fc fa95 	bl	800dbb8 <memset>
 801168e:	4620      	mov	r0, r4
 8011690:	b002      	add	sp, #8
 8011692:	bd10      	pop	{r4, pc}

08011694 <_free_r>:
 8011694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011696:	2900      	cmp	r1, #0
 8011698:	d048      	beq.n	801172c <_free_r+0x98>
 801169a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801169e:	9001      	str	r0, [sp, #4]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	f1a1 0404 	sub.w	r4, r1, #4
 80116a6:	bfb8      	it	lt
 80116a8:	18e4      	addlt	r4, r4, r3
 80116aa:	f000 faf9 	bl	8011ca0 <__malloc_lock>
 80116ae:	4a20      	ldr	r2, [pc, #128]	; (8011730 <_free_r+0x9c>)
 80116b0:	9801      	ldr	r0, [sp, #4]
 80116b2:	6813      	ldr	r3, [r2, #0]
 80116b4:	4615      	mov	r5, r2
 80116b6:	b933      	cbnz	r3, 80116c6 <_free_r+0x32>
 80116b8:	6063      	str	r3, [r4, #4]
 80116ba:	6014      	str	r4, [r2, #0]
 80116bc:	b003      	add	sp, #12
 80116be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80116c2:	f000 baf3 	b.w	8011cac <__malloc_unlock>
 80116c6:	42a3      	cmp	r3, r4
 80116c8:	d90b      	bls.n	80116e2 <_free_r+0x4e>
 80116ca:	6821      	ldr	r1, [r4, #0]
 80116cc:	1862      	adds	r2, r4, r1
 80116ce:	4293      	cmp	r3, r2
 80116d0:	bf04      	itt	eq
 80116d2:	681a      	ldreq	r2, [r3, #0]
 80116d4:	685b      	ldreq	r3, [r3, #4]
 80116d6:	6063      	str	r3, [r4, #4]
 80116d8:	bf04      	itt	eq
 80116da:	1852      	addeq	r2, r2, r1
 80116dc:	6022      	streq	r2, [r4, #0]
 80116de:	602c      	str	r4, [r5, #0]
 80116e0:	e7ec      	b.n	80116bc <_free_r+0x28>
 80116e2:	461a      	mov	r2, r3
 80116e4:	685b      	ldr	r3, [r3, #4]
 80116e6:	b10b      	cbz	r3, 80116ec <_free_r+0x58>
 80116e8:	42a3      	cmp	r3, r4
 80116ea:	d9fa      	bls.n	80116e2 <_free_r+0x4e>
 80116ec:	6811      	ldr	r1, [r2, #0]
 80116ee:	1855      	adds	r5, r2, r1
 80116f0:	42a5      	cmp	r5, r4
 80116f2:	d10b      	bne.n	801170c <_free_r+0x78>
 80116f4:	6824      	ldr	r4, [r4, #0]
 80116f6:	4421      	add	r1, r4
 80116f8:	1854      	adds	r4, r2, r1
 80116fa:	42a3      	cmp	r3, r4
 80116fc:	6011      	str	r1, [r2, #0]
 80116fe:	d1dd      	bne.n	80116bc <_free_r+0x28>
 8011700:	681c      	ldr	r4, [r3, #0]
 8011702:	685b      	ldr	r3, [r3, #4]
 8011704:	6053      	str	r3, [r2, #4]
 8011706:	4421      	add	r1, r4
 8011708:	6011      	str	r1, [r2, #0]
 801170a:	e7d7      	b.n	80116bc <_free_r+0x28>
 801170c:	d902      	bls.n	8011714 <_free_r+0x80>
 801170e:	230c      	movs	r3, #12
 8011710:	6003      	str	r3, [r0, #0]
 8011712:	e7d3      	b.n	80116bc <_free_r+0x28>
 8011714:	6825      	ldr	r5, [r4, #0]
 8011716:	1961      	adds	r1, r4, r5
 8011718:	428b      	cmp	r3, r1
 801171a:	bf04      	itt	eq
 801171c:	6819      	ldreq	r1, [r3, #0]
 801171e:	685b      	ldreq	r3, [r3, #4]
 8011720:	6063      	str	r3, [r4, #4]
 8011722:	bf04      	itt	eq
 8011724:	1949      	addeq	r1, r1, r5
 8011726:	6021      	streq	r1, [r4, #0]
 8011728:	6054      	str	r4, [r2, #4]
 801172a:	e7c7      	b.n	80116bc <_free_r+0x28>
 801172c:	b003      	add	sp, #12
 801172e:	bd30      	pop	{r4, r5, pc}
 8011730:	2000022c 	.word	0x2000022c

08011734 <_malloc_r>:
 8011734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011736:	1ccd      	adds	r5, r1, #3
 8011738:	f025 0503 	bic.w	r5, r5, #3
 801173c:	3508      	adds	r5, #8
 801173e:	2d0c      	cmp	r5, #12
 8011740:	bf38      	it	cc
 8011742:	250c      	movcc	r5, #12
 8011744:	2d00      	cmp	r5, #0
 8011746:	4606      	mov	r6, r0
 8011748:	db01      	blt.n	801174e <_malloc_r+0x1a>
 801174a:	42a9      	cmp	r1, r5
 801174c:	d903      	bls.n	8011756 <_malloc_r+0x22>
 801174e:	230c      	movs	r3, #12
 8011750:	6033      	str	r3, [r6, #0]
 8011752:	2000      	movs	r0, #0
 8011754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011756:	f000 faa3 	bl	8011ca0 <__malloc_lock>
 801175a:	4921      	ldr	r1, [pc, #132]	; (80117e0 <_malloc_r+0xac>)
 801175c:	680a      	ldr	r2, [r1, #0]
 801175e:	4614      	mov	r4, r2
 8011760:	b99c      	cbnz	r4, 801178a <_malloc_r+0x56>
 8011762:	4f20      	ldr	r7, [pc, #128]	; (80117e4 <_malloc_r+0xb0>)
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	b923      	cbnz	r3, 8011772 <_malloc_r+0x3e>
 8011768:	4621      	mov	r1, r4
 801176a:	4630      	mov	r0, r6
 801176c:	f000 f9a0 	bl	8011ab0 <_sbrk_r>
 8011770:	6038      	str	r0, [r7, #0]
 8011772:	4629      	mov	r1, r5
 8011774:	4630      	mov	r0, r6
 8011776:	f000 f99b 	bl	8011ab0 <_sbrk_r>
 801177a:	1c43      	adds	r3, r0, #1
 801177c:	d123      	bne.n	80117c6 <_malloc_r+0x92>
 801177e:	230c      	movs	r3, #12
 8011780:	6033      	str	r3, [r6, #0]
 8011782:	4630      	mov	r0, r6
 8011784:	f000 fa92 	bl	8011cac <__malloc_unlock>
 8011788:	e7e3      	b.n	8011752 <_malloc_r+0x1e>
 801178a:	6823      	ldr	r3, [r4, #0]
 801178c:	1b5b      	subs	r3, r3, r5
 801178e:	d417      	bmi.n	80117c0 <_malloc_r+0x8c>
 8011790:	2b0b      	cmp	r3, #11
 8011792:	d903      	bls.n	801179c <_malloc_r+0x68>
 8011794:	6023      	str	r3, [r4, #0]
 8011796:	441c      	add	r4, r3
 8011798:	6025      	str	r5, [r4, #0]
 801179a:	e004      	b.n	80117a6 <_malloc_r+0x72>
 801179c:	6863      	ldr	r3, [r4, #4]
 801179e:	42a2      	cmp	r2, r4
 80117a0:	bf0c      	ite	eq
 80117a2:	600b      	streq	r3, [r1, #0]
 80117a4:	6053      	strne	r3, [r2, #4]
 80117a6:	4630      	mov	r0, r6
 80117a8:	f000 fa80 	bl	8011cac <__malloc_unlock>
 80117ac:	f104 000b 	add.w	r0, r4, #11
 80117b0:	1d23      	adds	r3, r4, #4
 80117b2:	f020 0007 	bic.w	r0, r0, #7
 80117b6:	1ac2      	subs	r2, r0, r3
 80117b8:	d0cc      	beq.n	8011754 <_malloc_r+0x20>
 80117ba:	1a1b      	subs	r3, r3, r0
 80117bc:	50a3      	str	r3, [r4, r2]
 80117be:	e7c9      	b.n	8011754 <_malloc_r+0x20>
 80117c0:	4622      	mov	r2, r4
 80117c2:	6864      	ldr	r4, [r4, #4]
 80117c4:	e7cc      	b.n	8011760 <_malloc_r+0x2c>
 80117c6:	1cc4      	adds	r4, r0, #3
 80117c8:	f024 0403 	bic.w	r4, r4, #3
 80117cc:	42a0      	cmp	r0, r4
 80117ce:	d0e3      	beq.n	8011798 <_malloc_r+0x64>
 80117d0:	1a21      	subs	r1, r4, r0
 80117d2:	4630      	mov	r0, r6
 80117d4:	f000 f96c 	bl	8011ab0 <_sbrk_r>
 80117d8:	3001      	adds	r0, #1
 80117da:	d1dd      	bne.n	8011798 <_malloc_r+0x64>
 80117dc:	e7cf      	b.n	801177e <_malloc_r+0x4a>
 80117de:	bf00      	nop
 80117e0:	2000022c 	.word	0x2000022c
 80117e4:	20000230 	.word	0x20000230

080117e8 <__sfputc_r>:
 80117e8:	6893      	ldr	r3, [r2, #8]
 80117ea:	3b01      	subs	r3, #1
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	b410      	push	{r4}
 80117f0:	6093      	str	r3, [r2, #8]
 80117f2:	da08      	bge.n	8011806 <__sfputc_r+0x1e>
 80117f4:	6994      	ldr	r4, [r2, #24]
 80117f6:	42a3      	cmp	r3, r4
 80117f8:	db01      	blt.n	80117fe <__sfputc_r+0x16>
 80117fa:	290a      	cmp	r1, #10
 80117fc:	d103      	bne.n	8011806 <__sfputc_r+0x1e>
 80117fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011802:	f7fd bd99 	b.w	800f338 <__swbuf_r>
 8011806:	6813      	ldr	r3, [r2, #0]
 8011808:	1c58      	adds	r0, r3, #1
 801180a:	6010      	str	r0, [r2, #0]
 801180c:	7019      	strb	r1, [r3, #0]
 801180e:	4608      	mov	r0, r1
 8011810:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011814:	4770      	bx	lr

08011816 <__sfputs_r>:
 8011816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011818:	4606      	mov	r6, r0
 801181a:	460f      	mov	r7, r1
 801181c:	4614      	mov	r4, r2
 801181e:	18d5      	adds	r5, r2, r3
 8011820:	42ac      	cmp	r4, r5
 8011822:	d101      	bne.n	8011828 <__sfputs_r+0x12>
 8011824:	2000      	movs	r0, #0
 8011826:	e007      	b.n	8011838 <__sfputs_r+0x22>
 8011828:	f814 1b01 	ldrb.w	r1, [r4], #1
 801182c:	463a      	mov	r2, r7
 801182e:	4630      	mov	r0, r6
 8011830:	f7ff ffda 	bl	80117e8 <__sfputc_r>
 8011834:	1c43      	adds	r3, r0, #1
 8011836:	d1f3      	bne.n	8011820 <__sfputs_r+0xa>
 8011838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801183c <_vfiprintf_r>:
 801183c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011840:	460d      	mov	r5, r1
 8011842:	b09d      	sub	sp, #116	; 0x74
 8011844:	4614      	mov	r4, r2
 8011846:	4698      	mov	r8, r3
 8011848:	4606      	mov	r6, r0
 801184a:	b118      	cbz	r0, 8011854 <_vfiprintf_r+0x18>
 801184c:	6983      	ldr	r3, [r0, #24]
 801184e:	b90b      	cbnz	r3, 8011854 <_vfiprintf_r+0x18>
 8011850:	f7fe fdc4 	bl	80103dc <__sinit>
 8011854:	4b89      	ldr	r3, [pc, #548]	; (8011a7c <_vfiprintf_r+0x240>)
 8011856:	429d      	cmp	r5, r3
 8011858:	d11b      	bne.n	8011892 <_vfiprintf_r+0x56>
 801185a:	6875      	ldr	r5, [r6, #4]
 801185c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801185e:	07d9      	lsls	r1, r3, #31
 8011860:	d405      	bmi.n	801186e <_vfiprintf_r+0x32>
 8011862:	89ab      	ldrh	r3, [r5, #12]
 8011864:	059a      	lsls	r2, r3, #22
 8011866:	d402      	bmi.n	801186e <_vfiprintf_r+0x32>
 8011868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801186a:	f7ff f9c8 	bl	8010bfe <__retarget_lock_acquire_recursive>
 801186e:	89ab      	ldrh	r3, [r5, #12]
 8011870:	071b      	lsls	r3, r3, #28
 8011872:	d501      	bpl.n	8011878 <_vfiprintf_r+0x3c>
 8011874:	692b      	ldr	r3, [r5, #16]
 8011876:	b9eb      	cbnz	r3, 80118b4 <_vfiprintf_r+0x78>
 8011878:	4629      	mov	r1, r5
 801187a:	4630      	mov	r0, r6
 801187c:	f7fd fdae 	bl	800f3dc <__swsetup_r>
 8011880:	b1c0      	cbz	r0, 80118b4 <_vfiprintf_r+0x78>
 8011882:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011884:	07dc      	lsls	r4, r3, #31
 8011886:	d50e      	bpl.n	80118a6 <_vfiprintf_r+0x6a>
 8011888:	f04f 30ff 	mov.w	r0, #4294967295
 801188c:	b01d      	add	sp, #116	; 0x74
 801188e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011892:	4b7b      	ldr	r3, [pc, #492]	; (8011a80 <_vfiprintf_r+0x244>)
 8011894:	429d      	cmp	r5, r3
 8011896:	d101      	bne.n	801189c <_vfiprintf_r+0x60>
 8011898:	68b5      	ldr	r5, [r6, #8]
 801189a:	e7df      	b.n	801185c <_vfiprintf_r+0x20>
 801189c:	4b79      	ldr	r3, [pc, #484]	; (8011a84 <_vfiprintf_r+0x248>)
 801189e:	429d      	cmp	r5, r3
 80118a0:	bf08      	it	eq
 80118a2:	68f5      	ldreq	r5, [r6, #12]
 80118a4:	e7da      	b.n	801185c <_vfiprintf_r+0x20>
 80118a6:	89ab      	ldrh	r3, [r5, #12]
 80118a8:	0598      	lsls	r0, r3, #22
 80118aa:	d4ed      	bmi.n	8011888 <_vfiprintf_r+0x4c>
 80118ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80118ae:	f7ff f9a7 	bl	8010c00 <__retarget_lock_release_recursive>
 80118b2:	e7e9      	b.n	8011888 <_vfiprintf_r+0x4c>
 80118b4:	2300      	movs	r3, #0
 80118b6:	9309      	str	r3, [sp, #36]	; 0x24
 80118b8:	2320      	movs	r3, #32
 80118ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80118be:	f8cd 800c 	str.w	r8, [sp, #12]
 80118c2:	2330      	movs	r3, #48	; 0x30
 80118c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011a88 <_vfiprintf_r+0x24c>
 80118c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80118cc:	f04f 0901 	mov.w	r9, #1
 80118d0:	4623      	mov	r3, r4
 80118d2:	469a      	mov	sl, r3
 80118d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118d8:	b10a      	cbz	r2, 80118de <_vfiprintf_r+0xa2>
 80118da:	2a25      	cmp	r2, #37	; 0x25
 80118dc:	d1f9      	bne.n	80118d2 <_vfiprintf_r+0x96>
 80118de:	ebba 0b04 	subs.w	fp, sl, r4
 80118e2:	d00b      	beq.n	80118fc <_vfiprintf_r+0xc0>
 80118e4:	465b      	mov	r3, fp
 80118e6:	4622      	mov	r2, r4
 80118e8:	4629      	mov	r1, r5
 80118ea:	4630      	mov	r0, r6
 80118ec:	f7ff ff93 	bl	8011816 <__sfputs_r>
 80118f0:	3001      	adds	r0, #1
 80118f2:	f000 80aa 	beq.w	8011a4a <_vfiprintf_r+0x20e>
 80118f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80118f8:	445a      	add	r2, fp
 80118fa:	9209      	str	r2, [sp, #36]	; 0x24
 80118fc:	f89a 3000 	ldrb.w	r3, [sl]
 8011900:	2b00      	cmp	r3, #0
 8011902:	f000 80a2 	beq.w	8011a4a <_vfiprintf_r+0x20e>
 8011906:	2300      	movs	r3, #0
 8011908:	f04f 32ff 	mov.w	r2, #4294967295
 801190c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011910:	f10a 0a01 	add.w	sl, sl, #1
 8011914:	9304      	str	r3, [sp, #16]
 8011916:	9307      	str	r3, [sp, #28]
 8011918:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801191c:	931a      	str	r3, [sp, #104]	; 0x68
 801191e:	4654      	mov	r4, sl
 8011920:	2205      	movs	r2, #5
 8011922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011926:	4858      	ldr	r0, [pc, #352]	; (8011a88 <_vfiprintf_r+0x24c>)
 8011928:	f7ee fc82 	bl	8000230 <memchr>
 801192c:	9a04      	ldr	r2, [sp, #16]
 801192e:	b9d8      	cbnz	r0, 8011968 <_vfiprintf_r+0x12c>
 8011930:	06d1      	lsls	r1, r2, #27
 8011932:	bf44      	itt	mi
 8011934:	2320      	movmi	r3, #32
 8011936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801193a:	0713      	lsls	r3, r2, #28
 801193c:	bf44      	itt	mi
 801193e:	232b      	movmi	r3, #43	; 0x2b
 8011940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011944:	f89a 3000 	ldrb.w	r3, [sl]
 8011948:	2b2a      	cmp	r3, #42	; 0x2a
 801194a:	d015      	beq.n	8011978 <_vfiprintf_r+0x13c>
 801194c:	9a07      	ldr	r2, [sp, #28]
 801194e:	4654      	mov	r4, sl
 8011950:	2000      	movs	r0, #0
 8011952:	f04f 0c0a 	mov.w	ip, #10
 8011956:	4621      	mov	r1, r4
 8011958:	f811 3b01 	ldrb.w	r3, [r1], #1
 801195c:	3b30      	subs	r3, #48	; 0x30
 801195e:	2b09      	cmp	r3, #9
 8011960:	d94e      	bls.n	8011a00 <_vfiprintf_r+0x1c4>
 8011962:	b1b0      	cbz	r0, 8011992 <_vfiprintf_r+0x156>
 8011964:	9207      	str	r2, [sp, #28]
 8011966:	e014      	b.n	8011992 <_vfiprintf_r+0x156>
 8011968:	eba0 0308 	sub.w	r3, r0, r8
 801196c:	fa09 f303 	lsl.w	r3, r9, r3
 8011970:	4313      	orrs	r3, r2
 8011972:	9304      	str	r3, [sp, #16]
 8011974:	46a2      	mov	sl, r4
 8011976:	e7d2      	b.n	801191e <_vfiprintf_r+0xe2>
 8011978:	9b03      	ldr	r3, [sp, #12]
 801197a:	1d19      	adds	r1, r3, #4
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	9103      	str	r1, [sp, #12]
 8011980:	2b00      	cmp	r3, #0
 8011982:	bfbb      	ittet	lt
 8011984:	425b      	neglt	r3, r3
 8011986:	f042 0202 	orrlt.w	r2, r2, #2
 801198a:	9307      	strge	r3, [sp, #28]
 801198c:	9307      	strlt	r3, [sp, #28]
 801198e:	bfb8      	it	lt
 8011990:	9204      	strlt	r2, [sp, #16]
 8011992:	7823      	ldrb	r3, [r4, #0]
 8011994:	2b2e      	cmp	r3, #46	; 0x2e
 8011996:	d10c      	bne.n	80119b2 <_vfiprintf_r+0x176>
 8011998:	7863      	ldrb	r3, [r4, #1]
 801199a:	2b2a      	cmp	r3, #42	; 0x2a
 801199c:	d135      	bne.n	8011a0a <_vfiprintf_r+0x1ce>
 801199e:	9b03      	ldr	r3, [sp, #12]
 80119a0:	1d1a      	adds	r2, r3, #4
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	9203      	str	r2, [sp, #12]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	bfb8      	it	lt
 80119aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80119ae:	3402      	adds	r4, #2
 80119b0:	9305      	str	r3, [sp, #20]
 80119b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011a98 <_vfiprintf_r+0x25c>
 80119b6:	7821      	ldrb	r1, [r4, #0]
 80119b8:	2203      	movs	r2, #3
 80119ba:	4650      	mov	r0, sl
 80119bc:	f7ee fc38 	bl	8000230 <memchr>
 80119c0:	b140      	cbz	r0, 80119d4 <_vfiprintf_r+0x198>
 80119c2:	2340      	movs	r3, #64	; 0x40
 80119c4:	eba0 000a 	sub.w	r0, r0, sl
 80119c8:	fa03 f000 	lsl.w	r0, r3, r0
 80119cc:	9b04      	ldr	r3, [sp, #16]
 80119ce:	4303      	orrs	r3, r0
 80119d0:	3401      	adds	r4, #1
 80119d2:	9304      	str	r3, [sp, #16]
 80119d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119d8:	482c      	ldr	r0, [pc, #176]	; (8011a8c <_vfiprintf_r+0x250>)
 80119da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80119de:	2206      	movs	r2, #6
 80119e0:	f7ee fc26 	bl	8000230 <memchr>
 80119e4:	2800      	cmp	r0, #0
 80119e6:	d03f      	beq.n	8011a68 <_vfiprintf_r+0x22c>
 80119e8:	4b29      	ldr	r3, [pc, #164]	; (8011a90 <_vfiprintf_r+0x254>)
 80119ea:	bb1b      	cbnz	r3, 8011a34 <_vfiprintf_r+0x1f8>
 80119ec:	9b03      	ldr	r3, [sp, #12]
 80119ee:	3307      	adds	r3, #7
 80119f0:	f023 0307 	bic.w	r3, r3, #7
 80119f4:	3308      	adds	r3, #8
 80119f6:	9303      	str	r3, [sp, #12]
 80119f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119fa:	443b      	add	r3, r7
 80119fc:	9309      	str	r3, [sp, #36]	; 0x24
 80119fe:	e767      	b.n	80118d0 <_vfiprintf_r+0x94>
 8011a00:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a04:	460c      	mov	r4, r1
 8011a06:	2001      	movs	r0, #1
 8011a08:	e7a5      	b.n	8011956 <_vfiprintf_r+0x11a>
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	3401      	adds	r4, #1
 8011a0e:	9305      	str	r3, [sp, #20]
 8011a10:	4619      	mov	r1, r3
 8011a12:	f04f 0c0a 	mov.w	ip, #10
 8011a16:	4620      	mov	r0, r4
 8011a18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a1c:	3a30      	subs	r2, #48	; 0x30
 8011a1e:	2a09      	cmp	r2, #9
 8011a20:	d903      	bls.n	8011a2a <_vfiprintf_r+0x1ee>
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d0c5      	beq.n	80119b2 <_vfiprintf_r+0x176>
 8011a26:	9105      	str	r1, [sp, #20]
 8011a28:	e7c3      	b.n	80119b2 <_vfiprintf_r+0x176>
 8011a2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a2e:	4604      	mov	r4, r0
 8011a30:	2301      	movs	r3, #1
 8011a32:	e7f0      	b.n	8011a16 <_vfiprintf_r+0x1da>
 8011a34:	ab03      	add	r3, sp, #12
 8011a36:	9300      	str	r3, [sp, #0]
 8011a38:	462a      	mov	r2, r5
 8011a3a:	4b16      	ldr	r3, [pc, #88]	; (8011a94 <_vfiprintf_r+0x258>)
 8011a3c:	a904      	add	r1, sp, #16
 8011a3e:	4630      	mov	r0, r6
 8011a40:	f7fc f962 	bl	800dd08 <_printf_float>
 8011a44:	4607      	mov	r7, r0
 8011a46:	1c78      	adds	r0, r7, #1
 8011a48:	d1d6      	bne.n	80119f8 <_vfiprintf_r+0x1bc>
 8011a4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a4c:	07d9      	lsls	r1, r3, #31
 8011a4e:	d405      	bmi.n	8011a5c <_vfiprintf_r+0x220>
 8011a50:	89ab      	ldrh	r3, [r5, #12]
 8011a52:	059a      	lsls	r2, r3, #22
 8011a54:	d402      	bmi.n	8011a5c <_vfiprintf_r+0x220>
 8011a56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a58:	f7ff f8d2 	bl	8010c00 <__retarget_lock_release_recursive>
 8011a5c:	89ab      	ldrh	r3, [r5, #12]
 8011a5e:	065b      	lsls	r3, r3, #25
 8011a60:	f53f af12 	bmi.w	8011888 <_vfiprintf_r+0x4c>
 8011a64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a66:	e711      	b.n	801188c <_vfiprintf_r+0x50>
 8011a68:	ab03      	add	r3, sp, #12
 8011a6a:	9300      	str	r3, [sp, #0]
 8011a6c:	462a      	mov	r2, r5
 8011a6e:	4b09      	ldr	r3, [pc, #36]	; (8011a94 <_vfiprintf_r+0x258>)
 8011a70:	a904      	add	r1, sp, #16
 8011a72:	4630      	mov	r0, r6
 8011a74:	f7fc fbec 	bl	800e250 <_printf_i>
 8011a78:	e7e4      	b.n	8011a44 <_vfiprintf_r+0x208>
 8011a7a:	bf00      	nop
 8011a7c:	08013640 	.word	0x08013640
 8011a80:	08013660 	.word	0x08013660
 8011a84:	08013620 	.word	0x08013620
 8011a88:	0801385c 	.word	0x0801385c
 8011a8c:	08013866 	.word	0x08013866
 8011a90:	0800dd09 	.word	0x0800dd09
 8011a94:	08011817 	.word	0x08011817
 8011a98:	08013862 	.word	0x08013862
 8011a9c:	00000000 	.word	0x00000000

08011aa0 <nan>:
 8011aa0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011aa8 <nan+0x8>
 8011aa4:	4770      	bx	lr
 8011aa6:	bf00      	nop
 8011aa8:	00000000 	.word	0x00000000
 8011aac:	7ff80000 	.word	0x7ff80000

08011ab0 <_sbrk_r>:
 8011ab0:	b538      	push	{r3, r4, r5, lr}
 8011ab2:	4d06      	ldr	r5, [pc, #24]	; (8011acc <_sbrk_r+0x1c>)
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	4604      	mov	r4, r0
 8011ab8:	4608      	mov	r0, r1
 8011aba:	602b      	str	r3, [r5, #0]
 8011abc:	f7f3 fd96 	bl	80055ec <_sbrk>
 8011ac0:	1c43      	adds	r3, r0, #1
 8011ac2:	d102      	bne.n	8011aca <_sbrk_r+0x1a>
 8011ac4:	682b      	ldr	r3, [r5, #0]
 8011ac6:	b103      	cbz	r3, 8011aca <_sbrk_r+0x1a>
 8011ac8:	6023      	str	r3, [r4, #0]
 8011aca:	bd38      	pop	{r3, r4, r5, pc}
 8011acc:	200054c8 	.word	0x200054c8

08011ad0 <__sread>:
 8011ad0:	b510      	push	{r4, lr}
 8011ad2:	460c      	mov	r4, r1
 8011ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ad8:	f000 f8ee 	bl	8011cb8 <_read_r>
 8011adc:	2800      	cmp	r0, #0
 8011ade:	bfab      	itete	ge
 8011ae0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011ae2:	89a3      	ldrhlt	r3, [r4, #12]
 8011ae4:	181b      	addge	r3, r3, r0
 8011ae6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011aea:	bfac      	ite	ge
 8011aec:	6563      	strge	r3, [r4, #84]	; 0x54
 8011aee:	81a3      	strhlt	r3, [r4, #12]
 8011af0:	bd10      	pop	{r4, pc}

08011af2 <__swrite>:
 8011af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011af6:	461f      	mov	r7, r3
 8011af8:	898b      	ldrh	r3, [r1, #12]
 8011afa:	05db      	lsls	r3, r3, #23
 8011afc:	4605      	mov	r5, r0
 8011afe:	460c      	mov	r4, r1
 8011b00:	4616      	mov	r6, r2
 8011b02:	d505      	bpl.n	8011b10 <__swrite+0x1e>
 8011b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b08:	2302      	movs	r3, #2
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	f000 f8b6 	bl	8011c7c <_lseek_r>
 8011b10:	89a3      	ldrh	r3, [r4, #12]
 8011b12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011b1a:	81a3      	strh	r3, [r4, #12]
 8011b1c:	4632      	mov	r2, r6
 8011b1e:	463b      	mov	r3, r7
 8011b20:	4628      	mov	r0, r5
 8011b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b26:	f000 b835 	b.w	8011b94 <_write_r>

08011b2a <__sseek>:
 8011b2a:	b510      	push	{r4, lr}
 8011b2c:	460c      	mov	r4, r1
 8011b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b32:	f000 f8a3 	bl	8011c7c <_lseek_r>
 8011b36:	1c43      	adds	r3, r0, #1
 8011b38:	89a3      	ldrh	r3, [r4, #12]
 8011b3a:	bf15      	itete	ne
 8011b3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8011b3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011b42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011b46:	81a3      	strheq	r3, [r4, #12]
 8011b48:	bf18      	it	ne
 8011b4a:	81a3      	strhne	r3, [r4, #12]
 8011b4c:	bd10      	pop	{r4, pc}

08011b4e <__sclose>:
 8011b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b52:	f000 b84f 	b.w	8011bf4 <_close_r>

08011b56 <strncmp>:
 8011b56:	b510      	push	{r4, lr}
 8011b58:	b16a      	cbz	r2, 8011b76 <strncmp+0x20>
 8011b5a:	3901      	subs	r1, #1
 8011b5c:	1884      	adds	r4, r0, r2
 8011b5e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011b62:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011b66:	4293      	cmp	r3, r2
 8011b68:	d103      	bne.n	8011b72 <strncmp+0x1c>
 8011b6a:	42a0      	cmp	r0, r4
 8011b6c:	d001      	beq.n	8011b72 <strncmp+0x1c>
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d1f5      	bne.n	8011b5e <strncmp+0x8>
 8011b72:	1a98      	subs	r0, r3, r2
 8011b74:	bd10      	pop	{r4, pc}
 8011b76:	4610      	mov	r0, r2
 8011b78:	e7fc      	b.n	8011b74 <strncmp+0x1e>

08011b7a <__ascii_wctomb>:
 8011b7a:	b149      	cbz	r1, 8011b90 <__ascii_wctomb+0x16>
 8011b7c:	2aff      	cmp	r2, #255	; 0xff
 8011b7e:	bf85      	ittet	hi
 8011b80:	238a      	movhi	r3, #138	; 0x8a
 8011b82:	6003      	strhi	r3, [r0, #0]
 8011b84:	700a      	strbls	r2, [r1, #0]
 8011b86:	f04f 30ff 	movhi.w	r0, #4294967295
 8011b8a:	bf98      	it	ls
 8011b8c:	2001      	movls	r0, #1
 8011b8e:	4770      	bx	lr
 8011b90:	4608      	mov	r0, r1
 8011b92:	4770      	bx	lr

08011b94 <_write_r>:
 8011b94:	b538      	push	{r3, r4, r5, lr}
 8011b96:	4d07      	ldr	r5, [pc, #28]	; (8011bb4 <_write_r+0x20>)
 8011b98:	4604      	mov	r4, r0
 8011b9a:	4608      	mov	r0, r1
 8011b9c:	4611      	mov	r1, r2
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	602a      	str	r2, [r5, #0]
 8011ba2:	461a      	mov	r2, r3
 8011ba4:	f7f3 fcd1 	bl	800554a <_write>
 8011ba8:	1c43      	adds	r3, r0, #1
 8011baa:	d102      	bne.n	8011bb2 <_write_r+0x1e>
 8011bac:	682b      	ldr	r3, [r5, #0]
 8011bae:	b103      	cbz	r3, 8011bb2 <_write_r+0x1e>
 8011bb0:	6023      	str	r3, [r4, #0]
 8011bb2:	bd38      	pop	{r3, r4, r5, pc}
 8011bb4:	200054c8 	.word	0x200054c8

08011bb8 <__assert_func>:
 8011bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011bba:	4614      	mov	r4, r2
 8011bbc:	461a      	mov	r2, r3
 8011bbe:	4b09      	ldr	r3, [pc, #36]	; (8011be4 <__assert_func+0x2c>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	4605      	mov	r5, r0
 8011bc4:	68d8      	ldr	r0, [r3, #12]
 8011bc6:	b14c      	cbz	r4, 8011bdc <__assert_func+0x24>
 8011bc8:	4b07      	ldr	r3, [pc, #28]	; (8011be8 <__assert_func+0x30>)
 8011bca:	9100      	str	r1, [sp, #0]
 8011bcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011bd0:	4906      	ldr	r1, [pc, #24]	; (8011bec <__assert_func+0x34>)
 8011bd2:	462b      	mov	r3, r5
 8011bd4:	f000 f81e 	bl	8011c14 <fiprintf>
 8011bd8:	f000 f880 	bl	8011cdc <abort>
 8011bdc:	4b04      	ldr	r3, [pc, #16]	; (8011bf0 <__assert_func+0x38>)
 8011bde:	461c      	mov	r4, r3
 8011be0:	e7f3      	b.n	8011bca <__assert_func+0x12>
 8011be2:	bf00      	nop
 8011be4:	2000002c 	.word	0x2000002c
 8011be8:	0801386d 	.word	0x0801386d
 8011bec:	0801387a 	.word	0x0801387a
 8011bf0:	080138a8 	.word	0x080138a8

08011bf4 <_close_r>:
 8011bf4:	b538      	push	{r3, r4, r5, lr}
 8011bf6:	4d06      	ldr	r5, [pc, #24]	; (8011c10 <_close_r+0x1c>)
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	4604      	mov	r4, r0
 8011bfc:	4608      	mov	r0, r1
 8011bfe:	602b      	str	r3, [r5, #0]
 8011c00:	f7f3 fcbf 	bl	8005582 <_close>
 8011c04:	1c43      	adds	r3, r0, #1
 8011c06:	d102      	bne.n	8011c0e <_close_r+0x1a>
 8011c08:	682b      	ldr	r3, [r5, #0]
 8011c0a:	b103      	cbz	r3, 8011c0e <_close_r+0x1a>
 8011c0c:	6023      	str	r3, [r4, #0]
 8011c0e:	bd38      	pop	{r3, r4, r5, pc}
 8011c10:	200054c8 	.word	0x200054c8

08011c14 <fiprintf>:
 8011c14:	b40e      	push	{r1, r2, r3}
 8011c16:	b503      	push	{r0, r1, lr}
 8011c18:	4601      	mov	r1, r0
 8011c1a:	ab03      	add	r3, sp, #12
 8011c1c:	4805      	ldr	r0, [pc, #20]	; (8011c34 <fiprintf+0x20>)
 8011c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c22:	6800      	ldr	r0, [r0, #0]
 8011c24:	9301      	str	r3, [sp, #4]
 8011c26:	f7ff fe09 	bl	801183c <_vfiprintf_r>
 8011c2a:	b002      	add	sp, #8
 8011c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c30:	b003      	add	sp, #12
 8011c32:	4770      	bx	lr
 8011c34:	2000002c 	.word	0x2000002c

08011c38 <_fstat_r>:
 8011c38:	b538      	push	{r3, r4, r5, lr}
 8011c3a:	4d07      	ldr	r5, [pc, #28]	; (8011c58 <_fstat_r+0x20>)
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	4604      	mov	r4, r0
 8011c40:	4608      	mov	r0, r1
 8011c42:	4611      	mov	r1, r2
 8011c44:	602b      	str	r3, [r5, #0]
 8011c46:	f7f3 fca8 	bl	800559a <_fstat>
 8011c4a:	1c43      	adds	r3, r0, #1
 8011c4c:	d102      	bne.n	8011c54 <_fstat_r+0x1c>
 8011c4e:	682b      	ldr	r3, [r5, #0]
 8011c50:	b103      	cbz	r3, 8011c54 <_fstat_r+0x1c>
 8011c52:	6023      	str	r3, [r4, #0]
 8011c54:	bd38      	pop	{r3, r4, r5, pc}
 8011c56:	bf00      	nop
 8011c58:	200054c8 	.word	0x200054c8

08011c5c <_isatty_r>:
 8011c5c:	b538      	push	{r3, r4, r5, lr}
 8011c5e:	4d06      	ldr	r5, [pc, #24]	; (8011c78 <_isatty_r+0x1c>)
 8011c60:	2300      	movs	r3, #0
 8011c62:	4604      	mov	r4, r0
 8011c64:	4608      	mov	r0, r1
 8011c66:	602b      	str	r3, [r5, #0]
 8011c68:	f7f3 fca7 	bl	80055ba <_isatty>
 8011c6c:	1c43      	adds	r3, r0, #1
 8011c6e:	d102      	bne.n	8011c76 <_isatty_r+0x1a>
 8011c70:	682b      	ldr	r3, [r5, #0]
 8011c72:	b103      	cbz	r3, 8011c76 <_isatty_r+0x1a>
 8011c74:	6023      	str	r3, [r4, #0]
 8011c76:	bd38      	pop	{r3, r4, r5, pc}
 8011c78:	200054c8 	.word	0x200054c8

08011c7c <_lseek_r>:
 8011c7c:	b538      	push	{r3, r4, r5, lr}
 8011c7e:	4d07      	ldr	r5, [pc, #28]	; (8011c9c <_lseek_r+0x20>)
 8011c80:	4604      	mov	r4, r0
 8011c82:	4608      	mov	r0, r1
 8011c84:	4611      	mov	r1, r2
 8011c86:	2200      	movs	r2, #0
 8011c88:	602a      	str	r2, [r5, #0]
 8011c8a:	461a      	mov	r2, r3
 8011c8c:	f7f3 fca0 	bl	80055d0 <_lseek>
 8011c90:	1c43      	adds	r3, r0, #1
 8011c92:	d102      	bne.n	8011c9a <_lseek_r+0x1e>
 8011c94:	682b      	ldr	r3, [r5, #0]
 8011c96:	b103      	cbz	r3, 8011c9a <_lseek_r+0x1e>
 8011c98:	6023      	str	r3, [r4, #0]
 8011c9a:	bd38      	pop	{r3, r4, r5, pc}
 8011c9c:	200054c8 	.word	0x200054c8

08011ca0 <__malloc_lock>:
 8011ca0:	4801      	ldr	r0, [pc, #4]	; (8011ca8 <__malloc_lock+0x8>)
 8011ca2:	f7fe bfac 	b.w	8010bfe <__retarget_lock_acquire_recursive>
 8011ca6:	bf00      	nop
 8011ca8:	200054c0 	.word	0x200054c0

08011cac <__malloc_unlock>:
 8011cac:	4801      	ldr	r0, [pc, #4]	; (8011cb4 <__malloc_unlock+0x8>)
 8011cae:	f7fe bfa7 	b.w	8010c00 <__retarget_lock_release_recursive>
 8011cb2:	bf00      	nop
 8011cb4:	200054c0 	.word	0x200054c0

08011cb8 <_read_r>:
 8011cb8:	b538      	push	{r3, r4, r5, lr}
 8011cba:	4d07      	ldr	r5, [pc, #28]	; (8011cd8 <_read_r+0x20>)
 8011cbc:	4604      	mov	r4, r0
 8011cbe:	4608      	mov	r0, r1
 8011cc0:	4611      	mov	r1, r2
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	602a      	str	r2, [r5, #0]
 8011cc6:	461a      	mov	r2, r3
 8011cc8:	f7f3 fc22 	bl	8005510 <_read>
 8011ccc:	1c43      	adds	r3, r0, #1
 8011cce:	d102      	bne.n	8011cd6 <_read_r+0x1e>
 8011cd0:	682b      	ldr	r3, [r5, #0]
 8011cd2:	b103      	cbz	r3, 8011cd6 <_read_r+0x1e>
 8011cd4:	6023      	str	r3, [r4, #0]
 8011cd6:	bd38      	pop	{r3, r4, r5, pc}
 8011cd8:	200054c8 	.word	0x200054c8

08011cdc <abort>:
 8011cdc:	b508      	push	{r3, lr}
 8011cde:	2006      	movs	r0, #6
 8011ce0:	f000 f82c 	bl	8011d3c <raise>
 8011ce4:	2001      	movs	r0, #1
 8011ce6:	f7f3 fc09 	bl	80054fc <_exit>

08011cea <_raise_r>:
 8011cea:	291f      	cmp	r1, #31
 8011cec:	b538      	push	{r3, r4, r5, lr}
 8011cee:	4604      	mov	r4, r0
 8011cf0:	460d      	mov	r5, r1
 8011cf2:	d904      	bls.n	8011cfe <_raise_r+0x14>
 8011cf4:	2316      	movs	r3, #22
 8011cf6:	6003      	str	r3, [r0, #0]
 8011cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8011cfc:	bd38      	pop	{r3, r4, r5, pc}
 8011cfe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011d00:	b112      	cbz	r2, 8011d08 <_raise_r+0x1e>
 8011d02:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011d06:	b94b      	cbnz	r3, 8011d1c <_raise_r+0x32>
 8011d08:	4620      	mov	r0, r4
 8011d0a:	f000 f831 	bl	8011d70 <_getpid_r>
 8011d0e:	462a      	mov	r2, r5
 8011d10:	4601      	mov	r1, r0
 8011d12:	4620      	mov	r0, r4
 8011d14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d18:	f000 b818 	b.w	8011d4c <_kill_r>
 8011d1c:	2b01      	cmp	r3, #1
 8011d1e:	d00a      	beq.n	8011d36 <_raise_r+0x4c>
 8011d20:	1c59      	adds	r1, r3, #1
 8011d22:	d103      	bne.n	8011d2c <_raise_r+0x42>
 8011d24:	2316      	movs	r3, #22
 8011d26:	6003      	str	r3, [r0, #0]
 8011d28:	2001      	movs	r0, #1
 8011d2a:	e7e7      	b.n	8011cfc <_raise_r+0x12>
 8011d2c:	2400      	movs	r4, #0
 8011d2e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011d32:	4628      	mov	r0, r5
 8011d34:	4798      	blx	r3
 8011d36:	2000      	movs	r0, #0
 8011d38:	e7e0      	b.n	8011cfc <_raise_r+0x12>
	...

08011d3c <raise>:
 8011d3c:	4b02      	ldr	r3, [pc, #8]	; (8011d48 <raise+0xc>)
 8011d3e:	4601      	mov	r1, r0
 8011d40:	6818      	ldr	r0, [r3, #0]
 8011d42:	f7ff bfd2 	b.w	8011cea <_raise_r>
 8011d46:	bf00      	nop
 8011d48:	2000002c 	.word	0x2000002c

08011d4c <_kill_r>:
 8011d4c:	b538      	push	{r3, r4, r5, lr}
 8011d4e:	4d07      	ldr	r5, [pc, #28]	; (8011d6c <_kill_r+0x20>)
 8011d50:	2300      	movs	r3, #0
 8011d52:	4604      	mov	r4, r0
 8011d54:	4608      	mov	r0, r1
 8011d56:	4611      	mov	r1, r2
 8011d58:	602b      	str	r3, [r5, #0]
 8011d5a:	f7f3 fbbf 	bl	80054dc <_kill>
 8011d5e:	1c43      	adds	r3, r0, #1
 8011d60:	d102      	bne.n	8011d68 <_kill_r+0x1c>
 8011d62:	682b      	ldr	r3, [r5, #0]
 8011d64:	b103      	cbz	r3, 8011d68 <_kill_r+0x1c>
 8011d66:	6023      	str	r3, [r4, #0]
 8011d68:	bd38      	pop	{r3, r4, r5, pc}
 8011d6a:	bf00      	nop
 8011d6c:	200054c8 	.word	0x200054c8

08011d70 <_getpid_r>:
 8011d70:	f7f3 bbac 	b.w	80054cc <_getpid>

08011d74 <round>:
 8011d74:	ec51 0b10 	vmov	r0, r1, d0
 8011d78:	b570      	push	{r4, r5, r6, lr}
 8011d7a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8011d7e:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8011d82:	2c13      	cmp	r4, #19
 8011d84:	ee10 2a10 	vmov	r2, s0
 8011d88:	460b      	mov	r3, r1
 8011d8a:	dc19      	bgt.n	8011dc0 <round+0x4c>
 8011d8c:	2c00      	cmp	r4, #0
 8011d8e:	da09      	bge.n	8011da4 <round+0x30>
 8011d90:	3401      	adds	r4, #1
 8011d92:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8011d96:	d103      	bne.n	8011da0 <round+0x2c>
 8011d98:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011d9c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011da0:	2100      	movs	r1, #0
 8011da2:	e028      	b.n	8011df6 <round+0x82>
 8011da4:	4d15      	ldr	r5, [pc, #84]	; (8011dfc <round+0x88>)
 8011da6:	4125      	asrs	r5, r4
 8011da8:	ea01 0605 	and.w	r6, r1, r5
 8011dac:	4332      	orrs	r2, r6
 8011dae:	d00e      	beq.n	8011dce <round+0x5a>
 8011db0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8011db4:	fa42 f404 	asr.w	r4, r2, r4
 8011db8:	4423      	add	r3, r4
 8011dba:	ea23 0305 	bic.w	r3, r3, r5
 8011dbe:	e7ef      	b.n	8011da0 <round+0x2c>
 8011dc0:	2c33      	cmp	r4, #51	; 0x33
 8011dc2:	dd07      	ble.n	8011dd4 <round+0x60>
 8011dc4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8011dc8:	d101      	bne.n	8011dce <round+0x5a>
 8011dca:	f7ee fa87 	bl	80002dc <__adddf3>
 8011dce:	ec41 0b10 	vmov	d0, r0, r1
 8011dd2:	bd70      	pop	{r4, r5, r6, pc}
 8011dd4:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8011dd8:	f04f 35ff 	mov.w	r5, #4294967295
 8011ddc:	40f5      	lsrs	r5, r6
 8011dde:	4228      	tst	r0, r5
 8011de0:	d0f5      	beq.n	8011dce <round+0x5a>
 8011de2:	2101      	movs	r1, #1
 8011de4:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8011de8:	fa01 f404 	lsl.w	r4, r1, r4
 8011dec:	1912      	adds	r2, r2, r4
 8011dee:	bf28      	it	cs
 8011df0:	185b      	addcs	r3, r3, r1
 8011df2:	ea22 0105 	bic.w	r1, r2, r5
 8011df6:	4608      	mov	r0, r1
 8011df8:	4619      	mov	r1, r3
 8011dfa:	e7e8      	b.n	8011dce <round+0x5a>
 8011dfc:	000fffff 	.word	0x000fffff

08011e00 <fmaxf>:
 8011e00:	b508      	push	{r3, lr}
 8011e02:	ed2d 8b02 	vpush	{d8}
 8011e06:	eeb0 8a40 	vmov.f32	s16, s0
 8011e0a:	eef0 8a60 	vmov.f32	s17, s1
 8011e0e:	f000 f82d 	bl	8011e6c <__fpclassifyf>
 8011e12:	b148      	cbz	r0, 8011e28 <fmaxf+0x28>
 8011e14:	eeb0 0a68 	vmov.f32	s0, s17
 8011e18:	f000 f828 	bl	8011e6c <__fpclassifyf>
 8011e1c:	b130      	cbz	r0, 8011e2c <fmaxf+0x2c>
 8011e1e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e26:	dc01      	bgt.n	8011e2c <fmaxf+0x2c>
 8011e28:	eeb0 8a68 	vmov.f32	s16, s17
 8011e2c:	eeb0 0a48 	vmov.f32	s0, s16
 8011e30:	ecbd 8b02 	vpop	{d8}
 8011e34:	bd08      	pop	{r3, pc}

08011e36 <fminf>:
 8011e36:	b508      	push	{r3, lr}
 8011e38:	ed2d 8b02 	vpush	{d8}
 8011e3c:	eeb0 8a40 	vmov.f32	s16, s0
 8011e40:	eef0 8a60 	vmov.f32	s17, s1
 8011e44:	f000 f812 	bl	8011e6c <__fpclassifyf>
 8011e48:	b148      	cbz	r0, 8011e5e <fminf+0x28>
 8011e4a:	eeb0 0a68 	vmov.f32	s0, s17
 8011e4e:	f000 f80d 	bl	8011e6c <__fpclassifyf>
 8011e52:	b130      	cbz	r0, 8011e62 <fminf+0x2c>
 8011e54:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e5c:	d401      	bmi.n	8011e62 <fminf+0x2c>
 8011e5e:	eeb0 8a68 	vmov.f32	s16, s17
 8011e62:	eeb0 0a48 	vmov.f32	s0, s16
 8011e66:	ecbd 8b02 	vpop	{d8}
 8011e6a:	bd08      	pop	{r3, pc}

08011e6c <__fpclassifyf>:
 8011e6c:	ee10 3a10 	vmov	r3, s0
 8011e70:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8011e74:	d00d      	beq.n	8011e92 <__fpclassifyf+0x26>
 8011e76:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8011e7a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8011e7e:	d30a      	bcc.n	8011e96 <__fpclassifyf+0x2a>
 8011e80:	4b07      	ldr	r3, [pc, #28]	; (8011ea0 <__fpclassifyf+0x34>)
 8011e82:	1e42      	subs	r2, r0, #1
 8011e84:	429a      	cmp	r2, r3
 8011e86:	d908      	bls.n	8011e9a <__fpclassifyf+0x2e>
 8011e88:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8011e8c:	4258      	negs	r0, r3
 8011e8e:	4158      	adcs	r0, r3
 8011e90:	4770      	bx	lr
 8011e92:	2002      	movs	r0, #2
 8011e94:	4770      	bx	lr
 8011e96:	2004      	movs	r0, #4
 8011e98:	4770      	bx	lr
 8011e9a:	2003      	movs	r0, #3
 8011e9c:	4770      	bx	lr
 8011e9e:	bf00      	nop
 8011ea0:	007ffffe 	.word	0x007ffffe
 8011ea4:	00000000 	.word	0x00000000

08011ea8 <exp>:
 8011ea8:	b538      	push	{r3, r4, r5, lr}
 8011eaa:	ed2d 8b02 	vpush	{d8}
 8011eae:	ec55 4b10 	vmov	r4, r5, d0
 8011eb2:	f000 f899 	bl	8011fe8 <__ieee754_exp>
 8011eb6:	4b22      	ldr	r3, [pc, #136]	; (8011f40 <exp+0x98>)
 8011eb8:	eeb0 8a40 	vmov.f32	s16, s0
 8011ebc:	eef0 8a60 	vmov.f32	s17, s1
 8011ec0:	f993 3000 	ldrsb.w	r3, [r3]
 8011ec4:	3301      	adds	r3, #1
 8011ec6:	d012      	beq.n	8011eee <exp+0x46>
 8011ec8:	ec45 4b10 	vmov	d0, r4, r5
 8011ecc:	f000 fa8b 	bl	80123e6 <finite>
 8011ed0:	b168      	cbz	r0, 8011eee <exp+0x46>
 8011ed2:	a313      	add	r3, pc, #76	; (adr r3, 8011f20 <exp+0x78>)
 8011ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed8:	4620      	mov	r0, r4
 8011eda:	4629      	mov	r1, r5
 8011edc:	f7ee fe44 	bl	8000b68 <__aeabi_dcmpgt>
 8011ee0:	b160      	cbz	r0, 8011efc <exp+0x54>
 8011ee2:	f7fb fe17 	bl	800db14 <__errno>
 8011ee6:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8011f28 <exp+0x80>
 8011eea:	2322      	movs	r3, #34	; 0x22
 8011eec:	6003      	str	r3, [r0, #0]
 8011eee:	eeb0 0a48 	vmov.f32	s0, s16
 8011ef2:	eef0 0a68 	vmov.f32	s1, s17
 8011ef6:	ecbd 8b02 	vpop	{d8}
 8011efa:	bd38      	pop	{r3, r4, r5, pc}
 8011efc:	a30c      	add	r3, pc, #48	; (adr r3, 8011f30 <exp+0x88>)
 8011efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f02:	4620      	mov	r0, r4
 8011f04:	4629      	mov	r1, r5
 8011f06:	f7ee fe11 	bl	8000b2c <__aeabi_dcmplt>
 8011f0a:	2800      	cmp	r0, #0
 8011f0c:	d0ef      	beq.n	8011eee <exp+0x46>
 8011f0e:	f7fb fe01 	bl	800db14 <__errno>
 8011f12:	2322      	movs	r3, #34	; 0x22
 8011f14:	ed9f 8b08 	vldr	d8, [pc, #32]	; 8011f38 <exp+0x90>
 8011f18:	6003      	str	r3, [r0, #0]
 8011f1a:	e7e8      	b.n	8011eee <exp+0x46>
 8011f1c:	f3af 8000 	nop.w
 8011f20:	fefa39ef 	.word	0xfefa39ef
 8011f24:	40862e42 	.word	0x40862e42
 8011f28:	00000000 	.word	0x00000000
 8011f2c:	7ff00000 	.word	0x7ff00000
 8011f30:	d52d3051 	.word	0xd52d3051
 8011f34:	c0874910 	.word	0xc0874910
	...
 8011f40:	20000200 	.word	0x20000200

08011f44 <fmodf>:
 8011f44:	b508      	push	{r3, lr}
 8011f46:	ed2d 8b02 	vpush	{d8}
 8011f4a:	eef0 8a40 	vmov.f32	s17, s0
 8011f4e:	eeb0 8a60 	vmov.f32	s16, s1
 8011f52:	f000 f9c3 	bl	80122dc <__ieee754_fmodf>
 8011f56:	4b0f      	ldr	r3, [pc, #60]	; (8011f94 <fmodf+0x50>)
 8011f58:	f993 3000 	ldrsb.w	r3, [r3]
 8011f5c:	3301      	adds	r3, #1
 8011f5e:	d016      	beq.n	8011f8e <fmodf+0x4a>
 8011f60:	eeb4 8a48 	vcmp.f32	s16, s16
 8011f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f68:	d611      	bvs.n	8011f8e <fmodf+0x4a>
 8011f6a:	eef4 8a68 	vcmp.f32	s17, s17
 8011f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f72:	d60c      	bvs.n	8011f8e <fmodf+0x4a>
 8011f74:	eddf 8a08 	vldr	s17, [pc, #32]	; 8011f98 <fmodf+0x54>
 8011f78:	eeb4 8a68 	vcmp.f32	s16, s17
 8011f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f80:	d105      	bne.n	8011f8e <fmodf+0x4a>
 8011f82:	f7fb fdc7 	bl	800db14 <__errno>
 8011f86:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011f8a:	2321      	movs	r3, #33	; 0x21
 8011f8c:	6003      	str	r3, [r0, #0]
 8011f8e:	ecbd 8b02 	vpop	{d8}
 8011f92:	bd08      	pop	{r3, pc}
 8011f94:	20000200 	.word	0x20000200
 8011f98:	00000000 	.word	0x00000000

08011f9c <sqrtf>:
 8011f9c:	b508      	push	{r3, lr}
 8011f9e:	ed2d 8b02 	vpush	{d8}
 8011fa2:	eeb0 8a40 	vmov.f32	s16, s0
 8011fa6:	f000 fa1b 	bl	80123e0 <__ieee754_sqrtf>
 8011faa:	4b0d      	ldr	r3, [pc, #52]	; (8011fe0 <sqrtf+0x44>)
 8011fac:	f993 3000 	ldrsb.w	r3, [r3]
 8011fb0:	3301      	adds	r3, #1
 8011fb2:	d011      	beq.n	8011fd8 <sqrtf+0x3c>
 8011fb4:	eeb4 8a48 	vcmp.f32	s16, s16
 8011fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fbc:	d60c      	bvs.n	8011fd8 <sqrtf+0x3c>
 8011fbe:	eddf 8a09 	vldr	s17, [pc, #36]	; 8011fe4 <sqrtf+0x48>
 8011fc2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fca:	d505      	bpl.n	8011fd8 <sqrtf+0x3c>
 8011fcc:	f7fb fda2 	bl	800db14 <__errno>
 8011fd0:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011fd4:	2321      	movs	r3, #33	; 0x21
 8011fd6:	6003      	str	r3, [r0, #0]
 8011fd8:	ecbd 8b02 	vpop	{d8}
 8011fdc:	bd08      	pop	{r3, pc}
 8011fde:	bf00      	nop
 8011fe0:	20000200 	.word	0x20000200
 8011fe4:	00000000 	.word	0x00000000

08011fe8 <__ieee754_exp>:
 8011fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fec:	ec55 4b10 	vmov	r4, r5, d0
 8011ff0:	49b1      	ldr	r1, [pc, #708]	; (80122b8 <__ieee754_exp+0x2d0>)
 8011ff2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011ff6:	428b      	cmp	r3, r1
 8011ff8:	ed2d 8b04 	vpush	{d8-d9}
 8011ffc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8012000:	d937      	bls.n	8012072 <__ieee754_exp+0x8a>
 8012002:	49ae      	ldr	r1, [pc, #696]	; (80122bc <__ieee754_exp+0x2d4>)
 8012004:	428b      	cmp	r3, r1
 8012006:	d916      	bls.n	8012036 <__ieee754_exp+0x4e>
 8012008:	ee10 3a10 	vmov	r3, s0
 801200c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8012010:	4313      	orrs	r3, r2
 8012012:	d009      	beq.n	8012028 <__ieee754_exp+0x40>
 8012014:	ee10 2a10 	vmov	r2, s0
 8012018:	462b      	mov	r3, r5
 801201a:	4620      	mov	r0, r4
 801201c:	4629      	mov	r1, r5
 801201e:	f7ee f95d 	bl	80002dc <__adddf3>
 8012022:	4604      	mov	r4, r0
 8012024:	460d      	mov	r5, r1
 8012026:	e000      	b.n	801202a <__ieee754_exp+0x42>
 8012028:	bb06      	cbnz	r6, 801206c <__ieee754_exp+0x84>
 801202a:	ecbd 8b04 	vpop	{d8-d9}
 801202e:	ec45 4b10 	vmov	d0, r4, r5
 8012032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012036:	a38a      	add	r3, pc, #552	; (adr r3, 8012260 <__ieee754_exp+0x278>)
 8012038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801203c:	ee10 0a10 	vmov	r0, s0
 8012040:	4629      	mov	r1, r5
 8012042:	f7ee fd91 	bl	8000b68 <__aeabi_dcmpgt>
 8012046:	b138      	cbz	r0, 8012058 <__ieee754_exp+0x70>
 8012048:	a387      	add	r3, pc, #540	; (adr r3, 8012268 <__ieee754_exp+0x280>)
 801204a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801204e:	4610      	mov	r0, r2
 8012050:	4619      	mov	r1, r3
 8012052:	f7ee faf9 	bl	8000648 <__aeabi_dmul>
 8012056:	e7e4      	b.n	8012022 <__ieee754_exp+0x3a>
 8012058:	a385      	add	r3, pc, #532	; (adr r3, 8012270 <__ieee754_exp+0x288>)
 801205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801205e:	4620      	mov	r0, r4
 8012060:	4629      	mov	r1, r5
 8012062:	f7ee fd63 	bl	8000b2c <__aeabi_dcmplt>
 8012066:	2800      	cmp	r0, #0
 8012068:	f000 8087 	beq.w	801217a <__ieee754_exp+0x192>
 801206c:	2400      	movs	r4, #0
 801206e:	2500      	movs	r5, #0
 8012070:	e7db      	b.n	801202a <__ieee754_exp+0x42>
 8012072:	4a93      	ldr	r2, [pc, #588]	; (80122c0 <__ieee754_exp+0x2d8>)
 8012074:	4293      	cmp	r3, r2
 8012076:	f240 80ac 	bls.w	80121d2 <__ieee754_exp+0x1ea>
 801207a:	4a92      	ldr	r2, [pc, #584]	; (80122c4 <__ieee754_exp+0x2dc>)
 801207c:	4293      	cmp	r3, r2
 801207e:	d87c      	bhi.n	801217a <__ieee754_exp+0x192>
 8012080:	4b91      	ldr	r3, [pc, #580]	; (80122c8 <__ieee754_exp+0x2e0>)
 8012082:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801208a:	ee10 0a10 	vmov	r0, s0
 801208e:	4629      	mov	r1, r5
 8012090:	f7ee f922 	bl	80002d8 <__aeabi_dsub>
 8012094:	4b8d      	ldr	r3, [pc, #564]	; (80122cc <__ieee754_exp+0x2e4>)
 8012096:	00f7      	lsls	r7, r6, #3
 8012098:	443b      	add	r3, r7
 801209a:	ed93 7b00 	vldr	d7, [r3]
 801209e:	f1c6 0a01 	rsb	sl, r6, #1
 80120a2:	4680      	mov	r8, r0
 80120a4:	4689      	mov	r9, r1
 80120a6:	ebaa 0a06 	sub.w	sl, sl, r6
 80120aa:	eeb0 8a47 	vmov.f32	s16, s14
 80120ae:	eef0 8a67 	vmov.f32	s17, s15
 80120b2:	ec53 2b18 	vmov	r2, r3, d8
 80120b6:	4640      	mov	r0, r8
 80120b8:	4649      	mov	r1, r9
 80120ba:	f7ee f90d 	bl	80002d8 <__aeabi_dsub>
 80120be:	4604      	mov	r4, r0
 80120c0:	460d      	mov	r5, r1
 80120c2:	4622      	mov	r2, r4
 80120c4:	462b      	mov	r3, r5
 80120c6:	4620      	mov	r0, r4
 80120c8:	4629      	mov	r1, r5
 80120ca:	f7ee fabd 	bl	8000648 <__aeabi_dmul>
 80120ce:	a36a      	add	r3, pc, #424	; (adr r3, 8012278 <__ieee754_exp+0x290>)
 80120d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d4:	4606      	mov	r6, r0
 80120d6:	460f      	mov	r7, r1
 80120d8:	f7ee fab6 	bl	8000648 <__aeabi_dmul>
 80120dc:	a368      	add	r3, pc, #416	; (adr r3, 8012280 <__ieee754_exp+0x298>)
 80120de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e2:	f7ee f8f9 	bl	80002d8 <__aeabi_dsub>
 80120e6:	4632      	mov	r2, r6
 80120e8:	463b      	mov	r3, r7
 80120ea:	f7ee faad 	bl	8000648 <__aeabi_dmul>
 80120ee:	a366      	add	r3, pc, #408	; (adr r3, 8012288 <__ieee754_exp+0x2a0>)
 80120f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120f4:	f7ee f8f2 	bl	80002dc <__adddf3>
 80120f8:	4632      	mov	r2, r6
 80120fa:	463b      	mov	r3, r7
 80120fc:	f7ee faa4 	bl	8000648 <__aeabi_dmul>
 8012100:	a363      	add	r3, pc, #396	; (adr r3, 8012290 <__ieee754_exp+0x2a8>)
 8012102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012106:	f7ee f8e7 	bl	80002d8 <__aeabi_dsub>
 801210a:	4632      	mov	r2, r6
 801210c:	463b      	mov	r3, r7
 801210e:	f7ee fa9b 	bl	8000648 <__aeabi_dmul>
 8012112:	a361      	add	r3, pc, #388	; (adr r3, 8012298 <__ieee754_exp+0x2b0>)
 8012114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012118:	f7ee f8e0 	bl	80002dc <__adddf3>
 801211c:	4632      	mov	r2, r6
 801211e:	463b      	mov	r3, r7
 8012120:	f7ee fa92 	bl	8000648 <__aeabi_dmul>
 8012124:	4602      	mov	r2, r0
 8012126:	460b      	mov	r3, r1
 8012128:	4620      	mov	r0, r4
 801212a:	4629      	mov	r1, r5
 801212c:	f7ee f8d4 	bl	80002d8 <__aeabi_dsub>
 8012130:	4602      	mov	r2, r0
 8012132:	460b      	mov	r3, r1
 8012134:	4606      	mov	r6, r0
 8012136:	460f      	mov	r7, r1
 8012138:	4620      	mov	r0, r4
 801213a:	4629      	mov	r1, r5
 801213c:	f7ee fa84 	bl	8000648 <__aeabi_dmul>
 8012140:	ec41 0b19 	vmov	d9, r0, r1
 8012144:	f1ba 0f00 	cmp.w	sl, #0
 8012148:	d15d      	bne.n	8012206 <__ieee754_exp+0x21e>
 801214a:	2200      	movs	r2, #0
 801214c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012150:	4630      	mov	r0, r6
 8012152:	4639      	mov	r1, r7
 8012154:	f7ee f8c0 	bl	80002d8 <__aeabi_dsub>
 8012158:	4602      	mov	r2, r0
 801215a:	460b      	mov	r3, r1
 801215c:	ec51 0b19 	vmov	r0, r1, d9
 8012160:	f7ee fb9c 	bl	800089c <__aeabi_ddiv>
 8012164:	4622      	mov	r2, r4
 8012166:	462b      	mov	r3, r5
 8012168:	f7ee f8b6 	bl	80002d8 <__aeabi_dsub>
 801216c:	4602      	mov	r2, r0
 801216e:	460b      	mov	r3, r1
 8012170:	2000      	movs	r0, #0
 8012172:	4957      	ldr	r1, [pc, #348]	; (80122d0 <__ieee754_exp+0x2e8>)
 8012174:	f7ee f8b0 	bl	80002d8 <__aeabi_dsub>
 8012178:	e753      	b.n	8012022 <__ieee754_exp+0x3a>
 801217a:	4856      	ldr	r0, [pc, #344]	; (80122d4 <__ieee754_exp+0x2ec>)
 801217c:	a348      	add	r3, pc, #288	; (adr r3, 80122a0 <__ieee754_exp+0x2b8>)
 801217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012182:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8012186:	4629      	mov	r1, r5
 8012188:	4620      	mov	r0, r4
 801218a:	f7ee fa5d 	bl	8000648 <__aeabi_dmul>
 801218e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012192:	f7ee f8a3 	bl	80002dc <__adddf3>
 8012196:	f7ee fd07 	bl	8000ba8 <__aeabi_d2iz>
 801219a:	4682      	mov	sl, r0
 801219c:	f7ee f9ea 	bl	8000574 <__aeabi_i2d>
 80121a0:	a341      	add	r3, pc, #260	; (adr r3, 80122a8 <__ieee754_exp+0x2c0>)
 80121a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121a6:	4606      	mov	r6, r0
 80121a8:	460f      	mov	r7, r1
 80121aa:	f7ee fa4d 	bl	8000648 <__aeabi_dmul>
 80121ae:	4602      	mov	r2, r0
 80121b0:	460b      	mov	r3, r1
 80121b2:	4620      	mov	r0, r4
 80121b4:	4629      	mov	r1, r5
 80121b6:	f7ee f88f 	bl	80002d8 <__aeabi_dsub>
 80121ba:	a33d      	add	r3, pc, #244	; (adr r3, 80122b0 <__ieee754_exp+0x2c8>)
 80121bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c0:	4680      	mov	r8, r0
 80121c2:	4689      	mov	r9, r1
 80121c4:	4630      	mov	r0, r6
 80121c6:	4639      	mov	r1, r7
 80121c8:	f7ee fa3e 	bl	8000648 <__aeabi_dmul>
 80121cc:	ec41 0b18 	vmov	d8, r0, r1
 80121d0:	e76f      	b.n	80120b2 <__ieee754_exp+0xca>
 80121d2:	4a41      	ldr	r2, [pc, #260]	; (80122d8 <__ieee754_exp+0x2f0>)
 80121d4:	4293      	cmp	r3, r2
 80121d6:	d811      	bhi.n	80121fc <__ieee754_exp+0x214>
 80121d8:	a323      	add	r3, pc, #140	; (adr r3, 8012268 <__ieee754_exp+0x280>)
 80121da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121de:	ee10 0a10 	vmov	r0, s0
 80121e2:	4629      	mov	r1, r5
 80121e4:	f7ee f87a 	bl	80002dc <__adddf3>
 80121e8:	4b39      	ldr	r3, [pc, #228]	; (80122d0 <__ieee754_exp+0x2e8>)
 80121ea:	2200      	movs	r2, #0
 80121ec:	f7ee fcbc 	bl	8000b68 <__aeabi_dcmpgt>
 80121f0:	b138      	cbz	r0, 8012202 <__ieee754_exp+0x21a>
 80121f2:	4b37      	ldr	r3, [pc, #220]	; (80122d0 <__ieee754_exp+0x2e8>)
 80121f4:	2200      	movs	r2, #0
 80121f6:	4620      	mov	r0, r4
 80121f8:	4629      	mov	r1, r5
 80121fa:	e710      	b.n	801201e <__ieee754_exp+0x36>
 80121fc:	f04f 0a00 	mov.w	sl, #0
 8012200:	e75f      	b.n	80120c2 <__ieee754_exp+0xda>
 8012202:	4682      	mov	sl, r0
 8012204:	e75d      	b.n	80120c2 <__ieee754_exp+0xda>
 8012206:	4632      	mov	r2, r6
 8012208:	463b      	mov	r3, r7
 801220a:	2000      	movs	r0, #0
 801220c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8012210:	f7ee f862 	bl	80002d8 <__aeabi_dsub>
 8012214:	4602      	mov	r2, r0
 8012216:	460b      	mov	r3, r1
 8012218:	ec51 0b19 	vmov	r0, r1, d9
 801221c:	f7ee fb3e 	bl	800089c <__aeabi_ddiv>
 8012220:	4602      	mov	r2, r0
 8012222:	460b      	mov	r3, r1
 8012224:	ec51 0b18 	vmov	r0, r1, d8
 8012228:	f7ee f856 	bl	80002d8 <__aeabi_dsub>
 801222c:	4642      	mov	r2, r8
 801222e:	464b      	mov	r3, r9
 8012230:	f7ee f852 	bl	80002d8 <__aeabi_dsub>
 8012234:	4602      	mov	r2, r0
 8012236:	460b      	mov	r3, r1
 8012238:	2000      	movs	r0, #0
 801223a:	4925      	ldr	r1, [pc, #148]	; (80122d0 <__ieee754_exp+0x2e8>)
 801223c:	f7ee f84c 	bl	80002d8 <__aeabi_dsub>
 8012240:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8012244:	4592      	cmp	sl, r2
 8012246:	db02      	blt.n	801224e <__ieee754_exp+0x266>
 8012248:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801224c:	e6e9      	b.n	8012022 <__ieee754_exp+0x3a>
 801224e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8012252:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8012256:	2200      	movs	r2, #0
 8012258:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 801225c:	e6f9      	b.n	8012052 <__ieee754_exp+0x6a>
 801225e:	bf00      	nop
 8012260:	fefa39ef 	.word	0xfefa39ef
 8012264:	40862e42 	.word	0x40862e42
 8012268:	8800759c 	.word	0x8800759c
 801226c:	7e37e43c 	.word	0x7e37e43c
 8012270:	d52d3051 	.word	0xd52d3051
 8012274:	c0874910 	.word	0xc0874910
 8012278:	72bea4d0 	.word	0x72bea4d0
 801227c:	3e663769 	.word	0x3e663769
 8012280:	c5d26bf1 	.word	0xc5d26bf1
 8012284:	3ebbbd41 	.word	0x3ebbbd41
 8012288:	af25de2c 	.word	0xaf25de2c
 801228c:	3f11566a 	.word	0x3f11566a
 8012290:	16bebd93 	.word	0x16bebd93
 8012294:	3f66c16c 	.word	0x3f66c16c
 8012298:	5555553e 	.word	0x5555553e
 801229c:	3fc55555 	.word	0x3fc55555
 80122a0:	652b82fe 	.word	0x652b82fe
 80122a4:	3ff71547 	.word	0x3ff71547
 80122a8:	fee00000 	.word	0xfee00000
 80122ac:	3fe62e42 	.word	0x3fe62e42
 80122b0:	35793c76 	.word	0x35793c76
 80122b4:	3dea39ef 	.word	0x3dea39ef
 80122b8:	40862e41 	.word	0x40862e41
 80122bc:	7fefffff 	.word	0x7fefffff
 80122c0:	3fd62e42 	.word	0x3fd62e42
 80122c4:	3ff0a2b1 	.word	0x3ff0a2b1
 80122c8:	080138c0 	.word	0x080138c0
 80122cc:	080138d0 	.word	0x080138d0
 80122d0:	3ff00000 	.word	0x3ff00000
 80122d4:	080138b0 	.word	0x080138b0
 80122d8:	3e2fffff 	.word	0x3e2fffff

080122dc <__ieee754_fmodf>:
 80122dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122de:	ee10 6a90 	vmov	r6, s1
 80122e2:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 80122e6:	d009      	beq.n	80122fc <__ieee754_fmodf+0x20>
 80122e8:	ee10 2a10 	vmov	r2, s0
 80122ec:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80122f0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80122f4:	da02      	bge.n	80122fc <__ieee754_fmodf+0x20>
 80122f6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80122fa:	dd04      	ble.n	8012306 <__ieee754_fmodf+0x2a>
 80122fc:	ee60 0a20 	vmul.f32	s1, s0, s1
 8012300:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8012304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012306:	42ab      	cmp	r3, r5
 8012308:	dbfc      	blt.n	8012304 <__ieee754_fmodf+0x28>
 801230a:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 801230e:	d106      	bne.n	801231e <__ieee754_fmodf+0x42>
 8012310:	4a32      	ldr	r2, [pc, #200]	; (80123dc <__ieee754_fmodf+0x100>)
 8012312:	0fe3      	lsrs	r3, r4, #31
 8012314:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012318:	ed93 0a00 	vldr	s0, [r3]
 801231c:	e7f2      	b.n	8012304 <__ieee754_fmodf+0x28>
 801231e:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8012322:	d13f      	bne.n	80123a4 <__ieee754_fmodf+0xc8>
 8012324:	0219      	lsls	r1, r3, #8
 8012326:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 801232a:	2900      	cmp	r1, #0
 801232c:	dc37      	bgt.n	801239e <__ieee754_fmodf+0xc2>
 801232e:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8012332:	d13d      	bne.n	80123b0 <__ieee754_fmodf+0xd4>
 8012334:	022f      	lsls	r7, r5, #8
 8012336:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 801233a:	2f00      	cmp	r7, #0
 801233c:	da35      	bge.n	80123aa <__ieee754_fmodf+0xce>
 801233e:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8012342:	bfbb      	ittet	lt
 8012344:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8012348:	1a12      	sublt	r2, r2, r0
 801234a:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 801234e:	4093      	lsllt	r3, r2
 8012350:	bfa8      	it	ge
 8012352:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8012356:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 801235a:	bfb5      	itete	lt
 801235c:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8012360:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8012364:	1a52      	sublt	r2, r2, r1
 8012366:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 801236a:	bfb8      	it	lt
 801236c:	4095      	lsllt	r5, r2
 801236e:	1a40      	subs	r0, r0, r1
 8012370:	1b5a      	subs	r2, r3, r5
 8012372:	bb00      	cbnz	r0, 80123b6 <__ieee754_fmodf+0xda>
 8012374:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8012378:	bf38      	it	cc
 801237a:	4613      	movcc	r3, r2
 801237c:	2b00      	cmp	r3, #0
 801237e:	d0c7      	beq.n	8012310 <__ieee754_fmodf+0x34>
 8012380:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012384:	db1f      	blt.n	80123c6 <__ieee754_fmodf+0xea>
 8012386:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 801238a:	db1f      	blt.n	80123cc <__ieee754_fmodf+0xf0>
 801238c:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8012390:	317f      	adds	r1, #127	; 0x7f
 8012392:	4323      	orrs	r3, r4
 8012394:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8012398:	ee00 3a10 	vmov	s0, r3
 801239c:	e7b2      	b.n	8012304 <__ieee754_fmodf+0x28>
 801239e:	3801      	subs	r0, #1
 80123a0:	0049      	lsls	r1, r1, #1
 80123a2:	e7c2      	b.n	801232a <__ieee754_fmodf+0x4e>
 80123a4:	15d8      	asrs	r0, r3, #23
 80123a6:	387f      	subs	r0, #127	; 0x7f
 80123a8:	e7c1      	b.n	801232e <__ieee754_fmodf+0x52>
 80123aa:	3901      	subs	r1, #1
 80123ac:	007f      	lsls	r7, r7, #1
 80123ae:	e7c4      	b.n	801233a <__ieee754_fmodf+0x5e>
 80123b0:	15e9      	asrs	r1, r5, #23
 80123b2:	397f      	subs	r1, #127	; 0x7f
 80123b4:	e7c3      	b.n	801233e <__ieee754_fmodf+0x62>
 80123b6:	2a00      	cmp	r2, #0
 80123b8:	da02      	bge.n	80123c0 <__ieee754_fmodf+0xe4>
 80123ba:	005b      	lsls	r3, r3, #1
 80123bc:	3801      	subs	r0, #1
 80123be:	e7d7      	b.n	8012370 <__ieee754_fmodf+0x94>
 80123c0:	d0a6      	beq.n	8012310 <__ieee754_fmodf+0x34>
 80123c2:	0053      	lsls	r3, r2, #1
 80123c4:	e7fa      	b.n	80123bc <__ieee754_fmodf+0xe0>
 80123c6:	005b      	lsls	r3, r3, #1
 80123c8:	3901      	subs	r1, #1
 80123ca:	e7d9      	b.n	8012380 <__ieee754_fmodf+0xa4>
 80123cc:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 80123d0:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 80123d4:	3182      	adds	r1, #130	; 0x82
 80123d6:	410b      	asrs	r3, r1
 80123d8:	4323      	orrs	r3, r4
 80123da:	e7dd      	b.n	8012398 <__ieee754_fmodf+0xbc>
 80123dc:	080138e0 	.word	0x080138e0

080123e0 <__ieee754_sqrtf>:
 80123e0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80123e4:	4770      	bx	lr

080123e6 <finite>:
 80123e6:	b082      	sub	sp, #8
 80123e8:	ed8d 0b00 	vstr	d0, [sp]
 80123ec:	9801      	ldr	r0, [sp, #4]
 80123ee:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80123f2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80123f6:	0fc0      	lsrs	r0, r0, #31
 80123f8:	b002      	add	sp, #8
 80123fa:	4770      	bx	lr

080123fc <_init>:
 80123fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123fe:	bf00      	nop
 8012400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012402:	bc08      	pop	{r3}
 8012404:	469e      	mov	lr, r3
 8012406:	4770      	bx	lr

08012408 <_fini>:
 8012408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801240a:	bf00      	nop
 801240c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801240e:	bc08      	pop	{r3}
 8012410:	469e      	mov	lr, r3
 8012412:	4770      	bx	lr
