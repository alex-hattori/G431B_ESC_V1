
G431B_ESC_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000118bc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014e0  08011aa0  08011aa0  00021aa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f80  08012f80  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08012f80  08012f80  00022f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012f88  08012f88  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012f88  08012f88  00022f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012f8c  08012f8c  00022f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08012f90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f48  20000200  08013190  00030200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005148  08013190  00035148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023456  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000505b  00000000  00000000  00053686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c30  00000000  00000000  000586e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a10  00000000  00000000  0005a318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025843  00000000  00000000  0005bd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022f07  00000000  00000000  0008156b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4a3b  00000000  00000000  000a4472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00188ead  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ee0  00000000  00000000  00188f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000200 	.word	0x20000200
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011a84 	.word	0x08011a84

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000204 	.word	0x20000204
 800021c:	08011a84 	.word	0x08011a84

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2220      	movs	r2, #32
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f00b ff69 	bl	800cf38 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001066:	4b40      	ldr	r3, [pc, #256]	; (8001168 <MX_ADC1_Init+0x120>)
 8001068:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800106c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106e:	4b3e      	ldr	r3, [pc, #248]	; (8001168 <MX_ADC1_Init+0x120>)
 8001070:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001074:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001076:	4b3c      	ldr	r3, [pc, #240]	; (8001168 <MX_ADC1_Init+0x120>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107c:	4b3a      	ldr	r3, [pc, #232]	; (8001168 <MX_ADC1_Init+0x120>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001082:	4b39      	ldr	r3, [pc, #228]	; (8001168 <MX_ADC1_Init+0x120>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001088:	4b37      	ldr	r3, [pc, #220]	; (8001168 <MX_ADC1_Init+0x120>)
 800108a:	2201      	movs	r2, #1
 800108c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800108e:	4b36      	ldr	r3, [pc, #216]	; (8001168 <MX_ADC1_Init+0x120>)
 8001090:	2208      	movs	r2, #8
 8001092:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001094:	4b34      	ldr	r3, [pc, #208]	; (8001168 <MX_ADC1_Init+0x120>)
 8001096:	2200      	movs	r2, #0
 8001098:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800109a:	4b33      	ldr	r3, [pc, #204]	; (8001168 <MX_ADC1_Init+0x120>)
 800109c:	2200      	movs	r2, #0
 800109e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80010a0:	4b31      	ldr	r3, [pc, #196]	; (8001168 <MX_ADC1_Init+0x120>)
 80010a2:	2203      	movs	r2, #3
 80010a4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a6:	4b30      	ldr	r3, [pc, #192]	; (8001168 <MX_ADC1_Init+0x120>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ae:	4b2e      	ldr	r3, [pc, #184]	; (8001168 <MX_ADC1_Init+0x120>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b4:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <MX_ADC1_Init+0x120>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ba:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <MX_ADC1_Init+0x120>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010c2:	4b29      	ldr	r3, [pc, #164]	; (8001168 <MX_ADC1_Init+0x120>)
 80010c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010ca:	4b27      	ldr	r3, [pc, #156]	; (8001168 <MX_ADC1_Init+0x120>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d2:	4825      	ldr	r0, [pc, #148]	; (8001168 <MX_ADC1_Init+0x120>)
 80010d4:	f005 f83c 	bl	8006150 <HAL_ADC_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80010de:	f003 fba0 	bl	8004822 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ea:	4619      	mov	r1, r3
 80010ec:	481e      	ldr	r0, [pc, #120]	; (8001168 <MX_ADC1_Init+0x120>)
 80010ee:	f005 ff97 	bl	8007020 <HAL_ADCEx_MultiModeConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80010f8:	f003 fb93 	bl	8004822 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <MX_ADC1_Init+0x124>)
 80010fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001100:	2306      	movs	r3, #6
 8001102:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001108:	237f      	movs	r3, #127	; 0x7f
 800110a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800110c:	2304      	movs	r3, #4
 800110e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	4619      	mov	r1, r3
 8001118:	4813      	ldr	r0, [pc, #76]	; (8001168 <MX_ADC1_Init+0x120>)
 800111a:	f005 fa75 	bl	8006608 <HAL_ADC_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001124:	f003 fb7d 	bl	8004822 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_ADC1_Init+0x128>)
 800112a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800112c:	230c      	movs	r3, #12
 800112e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4619      	mov	r1, r3
 8001134:	480c      	ldr	r0, [pc, #48]	; (8001168 <MX_ADC1_Init+0x120>)
 8001136:	f005 fa67 	bl	8006608 <HAL_ADC_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001140:	f003 fb6f 	bl	8004822 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <MX_ADC1_Init+0x12c>)
 8001146:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001148:	2312      	movs	r3, #18
 800114a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_ADC1_Init+0x120>)
 8001152:	f005 fa59 	bl	8006608 <HAL_ADC_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 800115c:	f003 fb61 	bl	8004822 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	3730      	adds	r7, #48	; 0x30
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000021c 	.word	0x2000021c
 800116c:	b6902000 	.word	0xb6902000
 8001170:	04300002 	.word	0x04300002
 8001174:	14f00020 	.word	0x14f00020

08001178 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800117e:	463b      	mov	r3, r7
 8001180:	2220      	movs	r2, #32
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f00b fed7 	bl	800cf38 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800118a:	4b32      	ldr	r3, [pc, #200]	; (8001254 <MX_ADC2_Init+0xdc>)
 800118c:	4a32      	ldr	r2, [pc, #200]	; (8001258 <MX_ADC2_Init+0xe0>)
 800118e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001190:	4b30      	ldr	r3, [pc, #192]	; (8001254 <MX_ADC2_Init+0xdc>)
 8001192:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001196:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001198:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <MX_ADC2_Init+0xdc>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800119e:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011aa:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80011b0:	4b28      	ldr	r3, [pc, #160]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011b2:	2208      	movs	r2, #8
 80011b4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011b6:	4b27      	ldr	r3, [pc, #156]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011bc:	4b25      	ldr	r3, [pc, #148]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80011c2:	4b24      	ldr	r3, [pc, #144]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011c4:	2202      	movs	r2, #2
 80011c6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011c8:	4b22      	ldr	r3, [pc, #136]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011d0:	4b20      	ldr	r3, [pc, #128]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011d8:	2200      	movs	r2, #0
 80011da:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011f4:	4817      	ldr	r0, [pc, #92]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011f6:	f004 ffab 	bl	8006150 <HAL_ADC_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8001200:	f003 fb0f 	bl	8004822 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_ADC2_Init+0xe4>)
 8001206:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001208:	2306      	movs	r3, #6
 800120a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001210:	237f      	movs	r3, #127	; 0x7f
 8001212:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001214:	2304      	movs	r3, #4
 8001216:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	4619      	mov	r1, r3
 8001220:	480c      	ldr	r0, [pc, #48]	; (8001254 <MX_ADC2_Init+0xdc>)
 8001222:	f005 f9f1 	bl	8006608 <HAL_ADC_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 800122c:	f003 faf9 	bl	8004822 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_ADC2_Init+0xe8>)
 8001232:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001234:	230c      	movs	r3, #12
 8001236:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_ADC2_Init+0xdc>)
 800123e:	f005 f9e3 	bl	8006608 <HAL_ADC_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8001248:	f003 faeb 	bl	8004822 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000288 	.word	0x20000288
 8001258:	50000100 	.word	0x50000100
 800125c:	c3290000 	.word	0xc3290000
 8001260:	cb8c0000 	.word	0xcb8c0000

08001264 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08c      	sub	sp, #48	; 0x30
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001284:	d172      	bne.n	800136c <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001286:	4b5e      	ldr	r3, [pc, #376]	; (8001400 <HAL_ADC_MspInit+0x19c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	4a5c      	ldr	r2, [pc, #368]	; (8001400 <HAL_ADC_MspInit+0x19c>)
 800128e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001290:	4b5b      	ldr	r3, [pc, #364]	; (8001400 <HAL_ADC_MspInit+0x19c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d10b      	bne.n	80012b0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001298:	4b5a      	ldr	r3, [pc, #360]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 800129a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129c:	4a59      	ldr	r2, [pc, #356]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 800129e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a4:	4b57      	ldr	r3, [pc, #348]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ac:	61bb      	str	r3, [r7, #24]
 80012ae:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b54      	ldr	r3, [pc, #336]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b4:	4a53      	ldr	r2, [pc, #332]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012bc:	4b51      	ldr	r3, [pc, #324]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 80012be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b4e      	ldr	r3, [pc, #312]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012cc:	4a4d      	ldr	r2, [pc, #308]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 80012ce:	f043 0302 	orr.w	r3, r3, #2
 80012d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d4:	4b4b      	ldr	r3, [pc, #300]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012e0:	2301      	movs	r3, #1
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e4:	2303      	movs	r3, #3
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f6:	f007 f9e9 	bl	80086cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001300:	2303      	movs	r3, #3
 8001302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4619      	mov	r1, r3
 800130e:	483e      	ldr	r0, [pc, #248]	; (8001408 <HAL_ADC_MspInit+0x1a4>)
 8001310:	f007 f9dc 	bl	80086cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001314:	4b3d      	ldr	r3, [pc, #244]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 8001316:	4a3e      	ldr	r2, [pc, #248]	; (8001410 <HAL_ADC_MspInit+0x1ac>)
 8001318:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800131a:	4b3c      	ldr	r3, [pc, #240]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 800131c:	2205      	movs	r2, #5
 800131e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001320:	4b3a      	ldr	r3, [pc, #232]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001326:	4b39      	ldr	r3, [pc, #228]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800132c:	4b37      	ldr	r3, [pc, #220]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 800132e:	2280      	movs	r2, #128	; 0x80
 8001330:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001332:	4b36      	ldr	r3, [pc, #216]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 8001334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001338:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800133a:	4b34      	ldr	r3, [pc, #208]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 800133c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001340:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001342:	4b32      	ldr	r3, [pc, #200]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 8001344:	2200      	movs	r2, #0
 8001346:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001348:	4b30      	ldr	r3, [pc, #192]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 800134a:	2200      	movs	r2, #0
 800134c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800134e:	482f      	ldr	r0, [pc, #188]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 8001350:	f006 f81a 	bl	8007388 <HAL_DMA_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800135a:	f003 fa62 	bl	8004822 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a2a      	ldr	r2, [pc, #168]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 8001362:	655a      	str	r2, [r3, #84]	; 0x54
 8001364:	4a29      	ldr	r2, [pc, #164]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800136a:	e044      	b.n	80013f6 <HAL_ADC_MspInit+0x192>
  else if(adcHandle->Instance==ADC2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a28      	ldr	r2, [pc, #160]	; (8001414 <HAL_ADC_MspInit+0x1b0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d13f      	bne.n	80013f6 <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <HAL_ADC_MspInit+0x19c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	4a20      	ldr	r2, [pc, #128]	; (8001400 <HAL_ADC_MspInit+0x19c>)
 800137e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001380:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <HAL_ADC_MspInit+0x19c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d10b      	bne.n	80013a0 <HAL_ADC_MspInit+0x13c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001388:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138c:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 800138e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001392:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001394:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
    hdma_adc2.Instance = DMA1_Channel2;
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013a2:	4a1e      	ldr	r2, [pc, #120]	; (800141c <HAL_ADC_MspInit+0x1b8>)
 80013a4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013a8:	2224      	movs	r2, #36	; 0x24
 80013aa:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ac:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013ba:	2280      	movs	r2, #128	; 0x80
 80013bc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013cc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80013d4:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80013da:	480f      	ldr	r0, [pc, #60]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013dc:	f005 ffd4 	bl	8007388 <HAL_DMA_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_ADC_MspInit+0x186>
      Error_Handler();
 80013e6:	f003 fa1c 	bl	8004822 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013ee:	655a      	str	r2, [r3, #84]	; 0x54
 80013f0:	4a09      	ldr	r2, [pc, #36]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80013f6:	bf00      	nop
 80013f8:	3730      	adds	r7, #48	; 0x30
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200003b4 	.word	0x200003b4
 8001404:	40021000 	.word	0x40021000
 8001408:	48000400 	.word	0x48000400
 800140c:	200002f4 	.word	0x200002f4
 8001410:	40020008 	.word	0x40020008
 8001414:	50000100 	.word	0x50000100
 8001418:	20000354 	.word	0x20000354
 800141c:	4002001c 	.word	0x4002001c

08001420 <order_phases>:
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"
#include "tim.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001420:	b5b0      	push	{r4, r5, r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af02      	add	r7, sp, #8
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 800142e:	4b7d      	ldr	r3, [pc, #500]	; (8001624 <order_phases+0x204>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
	if(!cal->started){
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	7c1b      	ldrb	r3, [r3, #16]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d108      	bne.n	800144e <order_phases+0x2e>
		printf("Checking phase sign, pole pairs\r\n");
 800143c:	487a      	ldr	r0, [pc, #488]	; (8001628 <order_phases+0x208>)
 800143e:	f00c fa73 	bl	800d928 <puts>
		cal->started = 1;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	ee07 3a90 	vmov	s15, r3
 800145a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800145e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800162c <order_phases+0x20c>
 8001462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800147a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147e:	d529      	bpl.n	80014d4 <order_phases+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001492:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
        cal->cal_position.elec_velocity = 0;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800149c:	461a      	mov	r2, r3
 800149e:	f04f 0300 	mov.w	r3, #0
 80014a2:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
        controller->i_d_des = I_CAL;
 80014a6:	4b62      	ldr	r3, [pc, #392]	; (8001630 <order_phases+0x210>)
 80014a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80014c0:	332c      	adds	r3, #44	; 0x2c
 80014c2:	4619      	mov	r1, r3
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f001 fb99 	bl	8002bfc <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	619a      	str	r2, [r3, #24]
    	return;
 80014d2:	e0a4      	b.n	800161e <order_phases+0x1fe>
    }
    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	edd3 7a05 	vldr	s15, [r3, #20]
 80014da:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001634 <order_phases+0x214>
 80014de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e6:	d51d      	bpl.n	8001524 <order_phases+0x104>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	edd3 7a05 	vldr	s15, [r3, #20]
 80014ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014f6:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001638 <order_phases+0x218>
 80014fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800150e:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
		commutate(controller, &cal->cal_position);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8001518:	332c      	adds	r3, #44	; 0x2c
 800151a:	4619      	mov	r1, r3
 800151c:	68b8      	ldr	r0, [r7, #8]
 800151e:	f001 fb6d 	bl	8002bfc <commutate>
    	return;
 8001522:	e07c      	b.n	800161e <order_phases+0x1fe>
    }
	reset_foc(controller);
 8001524:	68b8      	ldr	r0, [r7, #8]
 8001526:	f001 faf5 	bl	8002b14 <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	edd3 7a06 	vldr	s15, [r3, #24]
 8001536:	ed97 7a05 	vldr	s14, [r7, #20]
 800153a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800153e:	eef0 7ae7 	vabs.f32	s15, s15
 8001542:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800163c <order_phases+0x21c>
 8001546:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800154a:	ee16 0a90 	vmov	r0, s13
 800154e:	f7ff f823 	bl	8000598 <__aeabi_f2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	ec43 2b10 	vmov	d0, r2, r3
 800155a:	f00f fe13 	bl	8011184 <round>
 800155e:	ec53 2b10 	vmov	r2, r3, d0
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff fb47 	bl	8000bf8 <__aeabi_d2uiz>
 800156a:	4603      	mov	r3, r0
 800156c:	b2da      	uxtb	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	edd3 7a06 	vldr	s15, [r3, #24]
 8001578:	ed97 7a05 	vldr	s14, [r7, #20]
 800157c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001584:	dd07      	ble.n	8001596 <order_phases+0x176>
		cal->phase_order = 0;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 800158e:	482c      	ldr	r0, [pc, #176]	; (8001640 <order_phases+0x220>)
 8001590:	f00c f9ca 	bl	800d928 <puts>
 8001594:	e014      	b.n	80015c0 <order_phases+0x1a0>
	}
	else{
		cal->phase_order = 1;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2020 	strb.w	r2, [r3, #32]
		int offsetATemp = controller->adc_a_offset;
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a4:	613b      	str	r3, [r7, #16]
		controller->adc_a_offset = controller->adc_b_offset;
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		controller->adc_b_offset = offsetATemp;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		printf("Swapping phase sign\r\n");
 80015ba:	4822      	ldr	r0, [pc, #136]	; (8001644 <order_phases+0x224>)
 80015bc:	f00c f9b4 	bl	800d928 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	4820      	ldr	r0, [pc, #128]	; (8001648 <order_phases+0x228>)
 80015c8:	f00c f928 	bl	800d81c <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ffe1 	bl	8000598 <__aeabi_f2d>
 80015d6:	4604      	mov	r4, r0
 80015d8:	460d      	mov	r5, r1
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7fe ffdc 	bl	8000598 <__aeabi_f2d>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	e9cd 2300 	strd	r2, r3, [sp]
 80015e8:	4622      	mov	r2, r4
 80015ea:	462b      	mov	r3, r5
 80015ec:	4817      	ldr	r0, [pc, #92]	; (800164c <order_phases+0x22c>)
 80015ee:	f00c f915 	bl	800d81c <iprintf>
    PHASE_ORDER = cal->phase_order;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <order_phases+0x204>)
 80015fc:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <order_phases+0x210>)
 800160c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    cal->started = 0;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bdb0      	pop	{r4, r5, r7, pc}
 8001624:	20004da0 	.word	0x20004da0
 8001628:	08011aa0 	.word	0x08011aa0
 800162c:	38d1b717 	.word	0x38d1b717
 8001630:	20004ca0 	.word	0x20004ca0
 8001634:	3f8d6775 	.word	0x3f8d6775
 8001638:	42700000 	.word	0x42700000
 800163c:	40c90fdb 	.word	0x40c90fdb
 8001640:	08011ac4 	.word	0x08011ac4
 8001644:	08011adc 	.word	0x08011adc
 8001648:	08011af4 	.word	0x08011af4
 800164c:	08011b08 	.word	0x08011b08

08001650 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001650:	b5b0      	push	{r4, r5, r7, lr}
 8001652:	b094      	sub	sp, #80	; 0x50
 8001654:	af02      	add	r7, sp, #8
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7c1b      	ldrb	r3, [r3, #16]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10f      	bne.n	8001686 <calibrate_encoder+0x36>
		printf("Starting offset cal and linearization\r\n");
 8001666:	489e      	ldr	r0, [pc, #632]	; (80018e0 <calibrate_encoder+0x290>)
 8001668:	f00c f95e 	bl	800d928 <puts>
		cal->started = 1;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	60da      	str	r2, [r3, #12]
		cal->next_sample_time = T1;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
		cal->sample_count = 0;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	849a      	strh	r2, [r3, #36]	; 0x24
	}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	ee07 3a90 	vmov	s15, r3
 8001692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001696:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80018e4 <calibrate_encoder+0x294>
 800169a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80016aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b6:	d525      	bpl.n	8001704 <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80016ca:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
        controller->i_d_des = I_CAL;
 80016ce:	4b86      	ldr	r3, [pc, #536]	; (80018e8 <calibrate_encoder+0x298>)
 80016d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80016e8:	332c      	adds	r3, #44	; 0x2c
 80016ea:	4619      	mov	r1, r3
 80016ec:	68b8      	ldr	r0, [r7, #8]
 80016ee:	f001 fa85 	bl	8002bfc <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 8001702:	e258      	b.n	8001bb6 <calibrate_encoder+0x566>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	ed93 7a05 	vldr	s14, [r3, #20]
 800170a:	4b77      	ldr	r3, [pc, #476]	; (80018e8 <calibrate_encoder+0x298>)
 800170c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001710:	eddf 6a76 	vldr	s13, [pc, #472]	; 80018ec <calibrate_encoder+0x29c>
 8001714:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001718:	ed9f 6a75 	vldr	s12, [pc, #468]	; 80018f0 <calibrate_encoder+0x2a0>
 800171c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001720:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001728:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800172c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001730:	f140 808f 	bpl.w	8001852 <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	edd3 7a02 	vldr	s15, [r3, #8]
 800173a:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80018f4 <calibrate_encoder+0x2a4>
 800173e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001752:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
		commutate(controller, &cal->cal_position);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 800175c:	332c      	adds	r3, #44	; 0x2c
 800175e:	4619      	mov	r1, r3
 8001760:	68b8      	ldr	r0, [r7, #8]
 8001762:	f001 fa4b 	bl	8002bfc <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	ed93 7a05 	vldr	s14, [r3, #20]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001772:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177a:	dc00      	bgt.n	800177e <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 800177c:	e21b      	b.n	8001bb6 <calibrate_encoder+0x566>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	edd3 7a02 	vldr	s15, [r3, #8]
 8001784:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001908 <calibrate_encoder+0x2b8>
 8001788:	ee67 6a87 	vmul.f32	s13, s15, s14
 800178c:	4b56      	ldr	r3, [pc, #344]	; (80018e8 <calibrate_encoder+0x298>)
 800178e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001792:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80018ec <calibrate_encoder+0x29c>
 8001796:	ee27 7a87 	vmul.f32	s14, s15, s14
 800179a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800179e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017a2:	ee17 3a90 	vmov	r3, s15
 80017a6:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	145b      	asrs	r3, r3, #17
 80017b6:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017be:	4618      	mov	r0, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	441a      	add	r2, r3
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	f100 030a 	add.w	r3, r0, #10
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017d4:	461d      	mov	r5, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	330a      	adds	r3, #10
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	685c      	ldr	r4, [r3, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fed5 	bl	8000598 <__aeabi_f2d>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	e9cd 2300 	strd	r2, r3, [sp]
 80017f6:	4623      	mov	r3, r4
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4629      	mov	r1, r5
 80017fc:	483e      	ldr	r0, [pc, #248]	; (80018f8 <calibrate_encoder+0x2a8>)
 80017fe:	f00c f80d 	bl	800d81c <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001808:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80018fc <calibrate_encoder+0x2ac>
 800180c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001822:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <calibrate_encoder+0x298>)
 8001824:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001828:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001900 <calibrate_encoder+0x2b0>
 800182c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001834:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001838:	eeb4 7a67 	vcmp.f32	s14, s15
 800183c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001840:	f000 81b6 	beq.w	8001bb0 <calibrate_encoder+0x560>
			cal->sample_count++;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001848:	3301      	adds	r3, #1
 800184a:	b29a      	uxth	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 8001850:	e1b1      	b.n	8001bb6 <calibrate_encoder+0x566>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	ed93 7a05 	vldr	s14, [r3, #20]
 8001858:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <calibrate_encoder+0x298>)
 800185a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800185e:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001904 <calibrate_encoder+0x2b4>
 8001862:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001866:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80018f0 <calibrate_encoder+0x2a0>
 800186a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800186e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001876:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800187a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187e:	f140 80ab 	bpl.w	80019d8 <calibrate_encoder+0x388>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	edd3 7a02 	vldr	s15, [r3, #8]
 8001888:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80018f4 <calibrate_encoder+0x2a4>
 800188c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <calibrate_encoder+0x298>)
 8001898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		controller->i_q_des = 0.0f;
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		cal->cal_position.elec_angle = cal->theta_ref;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80018b4:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
		commutate(controller, &cal->cal_position);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80018be:	332c      	adds	r3, #44	; 0x2c
 80018c0:	4619      	mov	r1, r3
 80018c2:	68b8      	ldr	r0, [r7, #8]
 80018c4:	f001 f99a 	bl	8002bfc <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	ed93 7a05 	vldr	s14, [r3, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018dc:	dc16      	bgt.n	800190c <calibrate_encoder+0x2bc>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 80018de:	e169      	b.n	8001bb4 <calibrate_encoder+0x564>
 80018e0:	08011b24 	.word	0x08011b24
 80018e4:	38d1b717 	.word	0x38d1b717
 80018e8:	20004ca0 	.word	0x20004ca0
 80018ec:	40c90fdb 	.word	0x40c90fdb
 80018f0:	42700000 	.word	0x42700000
 80018f4:	3bc49ba6 	.word	0x3bc49ba6
 80018f8:	08011b4c 	.word	0x08011b4c
 80018fc:	3ad67750 	.word	0x3ad67750
 8001900:	42800000 	.word	0x42800000
 8001904:	41490fdb 	.word	0x41490fdb
 8001908:	46800000 	.word	0x46800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 814f 	beq.w	8001bb4 <calibrate_encoder+0x564>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	edd3 7a02 	vldr	s15, [r3, #8]
 800191c:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8001908 <calibrate_encoder+0x2b8>
 8001920:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001924:	4ba5      	ldr	r3, [pc, #660]	; (8001bbc <calibrate_encoder+0x56c>)
 8001926:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800192a:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8001bc0 <calibrate_encoder+0x570>
 800192e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001936:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800193a:	ee17 3a90 	vmov	r3, s15
 800193e:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	145b      	asrs	r3, r3, #17
 800194e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	4413      	add	r3, r2
 8001956:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	330a      	adds	r3, #10
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	4413      	add	r3, r2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800196e:	4610      	mov	r0, r2
 8001970:	0fda      	lsrs	r2, r3, #31
 8001972:	4413      	add	r3, r2
 8001974:	105b      	asrs	r3, r3, #1
 8001976:	4619      	mov	r1, r3
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	f100 030a 	add.w	r3, r0, #10
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001988:	461d      	mov	r5, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	330a      	adds	r3, #10
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	685c      	ldr	r4, [r3, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fdfb 	bl	8000598 <__aeabi_f2d>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	e9cd 2300 	strd	r2, r3, [sp]
 80019aa:	4623      	mov	r3, r4
 80019ac:	6a3a      	ldr	r2, [r7, #32]
 80019ae:	4629      	mov	r1, r5
 80019b0:	4884      	ldr	r0, [pc, #528]	; (8001bc4 <calibrate_encoder+0x574>)
 80019b2:	f00b ff33 	bl	800d81c <iprintf>
			cal->sample_count--;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b29a      	uxth	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	849a      	strh	r2, [r3, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019c8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001bc8 <calibrate_encoder+0x578>
 80019cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 80019d6:	e0ed      	b.n	8001bb4 <calibrate_encoder+0x564>
    }

    reset_foc(controller);
 80019d8:	68b8      	ldr	r0, [r7, #8]
 80019da:	f001 f89b 	bl	8002b14 <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80019e2:	2300      	movs	r3, #0
 80019e4:	643b      	str	r3, [r7, #64]	; 0x40
 80019e6:	e00b      	b.n	8001a00 <calibrate_encoder+0x3b0>
		ezero_mean += cal->error_arr[i];
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019ec:	330a      	adds	r3, #10
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019f6:	4413      	add	r3, r2
 80019f8:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80019fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019fc:	3301      	adds	r3, #1
 80019fe:	643b      	str	r3, [r7, #64]	; 0x40
 8001a00:	4b6e      	ldr	r3, [pc, #440]	; (8001bbc <calibrate_encoder+0x56c>)
 8001a02:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0a:	ee17 3a90 	vmov	r3, s15
 8001a0e:	019b      	lsls	r3, r3, #6
 8001a10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a12:	429a      	cmp	r2, r3
 8001a14:	dbe8      	blt.n	80019e8 <calibrate_encoder+0x398>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 8001a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a18:	ee07 3a90 	vmov	s15, r3
 8001a1c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a20:	4b66      	ldr	r3, [pc, #408]	; (8001bbc <calibrate_encoder+0x56c>)
 8001a22:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a26:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001bcc <calibrate_encoder+0x57c>
 8001a2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a36:	ee17 2a90 	vmov	r2, s15
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 8001a3e:	2340      	movs	r3, #64	; 0x40
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
	int lut_offset = (cal->error_arr[0])*N_LUT/ENC_CPR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	da00      	bge.n	8001a4c <calibrate_encoder+0x3fc>
 8001a4a:	33ff      	adds	r3, #255	; 0xff
 8001a4c:	121b      	asrs	r3, r3, #8
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<N_LUT; i++){
 8001a50:	2300      	movs	r3, #0
 8001a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a54:	e0a0      	b.n	8001b98 <calibrate_encoder+0x548>
			int moving_avg = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5c:	0fda      	lsrs	r2, r3, #31
 8001a5e:	4413      	add	r3, r2
 8001a60:	105b      	asrs	r3, r3, #1
 8001a62:	425b      	negs	r3, r3
 8001a64:	637b      	str	r3, [r7, #52]	; 0x34
 8001a66:	e068      	b.n	8001b3a <calibrate_encoder+0x4ea>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a6a:	ee07 3a90 	vmov	s15, r3
 8001a6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a72:	4b52      	ldr	r3, [pc, #328]	; (8001bbc <calibrate_encoder+0x56c>)
 8001a74:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a7c:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001bcc <calibrate_encoder+0x57c>
 8001a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a84:	eddf 6a51 	vldr	s13, [pc, #324]	; 8001bcc <calibrate_encoder+0x57c>
 8001a88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8e:	ee07 3a90 	vmov	s15, r3
 8001a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a9e:	ee17 3a90 	vmov	r3, s15
 8001aa2:	633b      	str	r3, [r7, #48]	; 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8001aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	da13      	bge.n	8001ad2 <calibrate_encoder+0x482>
 8001aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aac:	ee07 3a90 	vmov	s15, r3
 8001ab0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ab4:	4b41      	ldr	r3, [pc, #260]	; (8001bbc <calibrate_encoder+0x56c>)
 8001ab6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001aba:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001bcc <calibrate_encoder+0x57c>
 8001abe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aca:	ee17 3a90 	vmov	r3, s15
 8001ace:	633b      	str	r3, [r7, #48]	; 0x30
 8001ad0:	e027      	b.n	8001b22 <calibrate_encoder+0x4d2>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad4:	ee07 3a90 	vmov	s15, r3
 8001ad8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001adc:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <calibrate_encoder+0x56c>)
 8001ade:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ae2:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001bcc <calibrate_encoder+0x57c>
 8001ae6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001aee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001af2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afa:	dd12      	ble.n	8001b22 <calibrate_encoder+0x4d2>
 8001afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b06:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <calibrate_encoder+0x56c>)
 8001b08:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001b0c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001bcc <calibrate_encoder+0x57c>
 8001b10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b1c:	ee17 3a90 	vmov	r3, s15
 8001b20:	633b      	str	r3, [r7, #48]	; 0x30
				moving_avg += cal->error_arr[index];
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b26:	330a      	adds	r3, #10
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b30:	4413      	add	r3, r2
 8001b32:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b36:	3301      	adds	r3, #1
 8001b38:	637b      	str	r3, [r7, #52]	; 0x34
 8001b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3c:	0fda      	lsrs	r2, r3, #31
 8001b3e:	4413      	add	r3, r2
 8001b40:	105b      	asrs	r3, r3, #1
 8001b42:	461a      	mov	r2, r3
 8001b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b46:	4293      	cmp	r3, r2
 8001b48:	db8e      	blt.n	8001a68 <calibrate_encoder+0x418>
			}
			moving_avg = moving_avg/window;
 8001b4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b52:	63bb      	str	r3, [r7, #56]	; 0x38
			int lut_index = lut_offset + i;
 8001b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b58:	4413      	add	r3, r2
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5e:	2b3f      	cmp	r3, #63	; 0x3f
 8001b60:	dd02      	ble.n	8001b68 <calibrate_encoder+0x518>
 8001b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b64:	3b40      	subs	r3, #64	; 0x40
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b6e:	1ad2      	subs	r2, r2, r3
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b78:	330a      	adds	r3, #10
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	461a      	mov	r2, r3
 8001b8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b8c:	4810      	ldr	r0, [pc, #64]	; (8001bd0 <calibrate_encoder+0x580>)
 8001b8e:	f00b fe45 	bl	800d81c <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8001b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b94:	3301      	adds	r3, #1
 8001b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b9a:	2b3f      	cmp	r3, #63	; 0x3f
 8001b9c:	f77f af5b 	ble.w	8001a56 <calibrate_encoder+0x406>

		}

	cal->started = 0;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001bae:	e002      	b.n	8001bb6 <calibrate_encoder+0x566>
				return;
 8001bb0:	bf00      	nop
 8001bb2:	e000      	b.n	8001bb6 <calibrate_encoder+0x566>
		return;
 8001bb4:	bf00      	nop
}
 8001bb6:	3748      	adds	r7, #72	; 0x48
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbc:	20004ca0 	.word	0x20004ca0
 8001bc0:	40c90fdb 	.word	0x40c90fdb
 8001bc4:	08011b4c 	.word	0x08011b4c
 8001bc8:	3ad67750 	.word	0x3ad67750
 8001bcc:	42800000 	.word	0x42800000
 8001bd0:	08011b5c 	.word	0x08011b5c

08001bd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <MX_DMA_Init+0x60>)
 8001bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bde:	4a15      	ldr	r2, [pc, #84]	; (8001c34 <MX_DMA_Init+0x60>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	6493      	str	r3, [r2, #72]	; 0x48
 8001be6:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <MX_DMA_Init+0x60>)
 8001be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <MX_DMA_Init+0x60>)
 8001bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf6:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <MX_DMA_Init+0x60>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6493      	str	r3, [r2, #72]	; 0x48
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <MX_DMA_Init+0x60>)
 8001c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	200b      	movs	r0, #11
 8001c10:	f005 fb85 	bl	800731e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c14:	200b      	movs	r0, #11
 8001c16:	f005 fb9c 	bl	8007352 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	200c      	movs	r0, #12
 8001c20:	f005 fb7d 	bl	800731e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001c24:	200c      	movs	r0, #12
 8001c26:	f005 fb94 	bl	8007352 <HAL_NVIC_EnableIRQ>

}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000

08001c38 <eeprom_restore>:

static uint32_t const page_nb = 58U; //(uint32_t)FLASH_PAGE_NB-1;
static uint32_t const start_address = 0x08000000UL+58*0x800U; //(FLASH_BASE)+page_nb*(FLASH_PAGE_SIZE);

HAL_StatusTypeDef eeprom_restore(float * float_regs, uint32_t float_size, int * int_regs, uint32_t int_size)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b090      	sub	sp, #64	; 0x40
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	603b      	str	r3, [r7, #0]
	uint64_t data = 0xDEADBEEF;
 8001c46:	a33b      	add	r3, pc, #236	; (adr r3, 8001d34 <eeprom_restore+0xfc>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8001c50:	2300      	movs	r3, #0
 8001c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c54:	e02c      	b.n	8001cb0 <eeprom_restore+0x78>
	{
		memcpy(&data, (uint32_t *)(start_address+32*index), sizeof(uint64_t));
 8001c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c58:	015b      	lsls	r3, r3, #5
 8001c5a:	4a35      	ldr	r2, [pc, #212]	; (8001d30 <eeprom_restore+0xf8>)
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c64:	2208      	movs	r2, #8
 8001c66:	4618      	mov	r0, r3
 8001c68:	f00b f93e 	bl	800cee8 <memcpy>
		uint32_t temp = data&0xFFFFFFFF;
 8001c6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c70:	4613      	mov	r3, r2
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t temp2 = data>>32;
 8001c74:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	000a      	movs	r2, r1
 8001c82:	2300      	movs	r3, #0
 8001c84:	4613      	mov	r3, r2
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		float value;
		float value2;
		memcpy(&value,&temp,sizeof(uint32_t));
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
		memcpy(&value2,&temp2,sizeof(uint32_t));
 8001c8e:	623b      	str	r3, [r7, #32]
		float_regs[index] = value;
 8001c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c9a:	601a      	str	r2, [r3, #0]
		float_regs[index+1] = value2;
 8001c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	6a3a      	ldr	r2, [r7, #32]
 8001ca8:	601a      	str	r2, [r3, #0]
	for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8001caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cac:	3302      	adds	r3, #2
 8001cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d3ce      	bcc.n	8001c56 <eeprom_restore+0x1e>
	}
	for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8001cb8:	2300      	movs	r3, #0
 8001cba:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cbc:	e02e      	b.n	8001d1c <eeprom_restore+0xe4>
	{

		memcpy(&data, (uint32_t *)(start_address+32*(index+float_size)), sizeof(uint64_t));
 8001cbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	015b      	lsls	r3, r3, #5
 8001cc6:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <eeprom_restore+0xf8>)
 8001cc8:	4413      	add	r3, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cd0:	2208      	movs	r2, #8
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f00b f908 	bl	800cee8 <memcpy>
		uint32_t temp = data&0xFFFFFFFF;
 8001cd8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cdc:	4613      	mov	r3, r2
 8001cde:	61fb      	str	r3, [r7, #28]
		uint32_t temp2 = data>>32;
 8001ce0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	000a      	movs	r2, r1
 8001cee:	2300      	movs	r3, #0
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
		int value;
		int value2;
		memcpy(&value,&temp,sizeof(uint32_t));
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	69bb      	ldr	r3, [r7, #24]
		memcpy(&value2,&temp2,sizeof(uint32_t));
 8001cfa:	613b      	str	r3, [r7, #16]
		int_regs[index] = value;
 8001cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	4413      	add	r3, r2
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	601a      	str	r2, [r3, #0]
		int_regs[index+1] = value2;
 8001d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	601a      	str	r2, [r3, #0]
	for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8001d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d18:	3302      	adds	r3, #2
 8001d1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d3cc      	bcc.n	8001cbe <eeprom_restore+0x86>
	}

	return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3740      	adds	r7, #64	; 0x40
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	0801d000 	.word	0x0801d000
 8001d34:	deadbeef 	.word	0xdeadbeef
	...

08001d40 <eeprom_store>:

HAL_StatusTypeDef eeprom_store(float const * float_regs, uint32_t float_size, int const * int_regs, uint32_t int_size)
{
 8001d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d44:	b0a2      	sub	sp, #136	; 0x88
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6278      	str	r0, [r7, #36]	; 0x24
 8001d4a:	6239      	str	r1, [r7, #32]
 8001d4c:	61fa      	str	r2, [r7, #28]
 8001d4e:	61bb      	str	r3, [r7, #24]
	HAL_FLASH_Unlock();
 8001d50:	f006 faa0 	bl	8008294 <HAL_FLASH_Unlock>
	// erase the last page of bank1 (STM32G43x : 1 bank, 64 pages, 2kB per page, 64-bit data)
	{
		FLASH_EraseInitTypeDef erase ={FLASH_TYPEERASE_PAGES,FLASH_BANK_1,page_nb,5};
 8001d54:	2300      	movs	r3, #0
 8001d56:	643b      	str	r3, [r7, #64]	; 0x40
 8001d58:	2301      	movs	r3, #1
 8001d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d5c:	233a      	movs	r3, #58	; 0x3a
 8001d5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d60:	2305      	movs	r3, #5
 8001d62:	64fb      	str	r3, [r7, #76]	; 0x4c
		uint32_t page_error = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&erase, &page_error);
 8001d68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d6c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001d70:	4619      	mov	r1, r3
 8001d72:	4610      	mov	r0, r2
 8001d74:	f006 fb86 	bl	8008484 <HAL_FLASHEx_Erase>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if(result!=HAL_OK)
 8001d7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d004      	beq.n	8001d90 <eeprom_store+0x50>
		{
			HAL_FLASH_Lock();
 8001d86:	f006 faa7 	bl	80082d8 <HAL_FLASH_Lock>
			return result;
 8001d8a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d8e:	e0bd      	b.n	8001f0c <eeprom_store+0x1cc>
		}
	}
	// write the last page
	{
		uint64_t data = 0xDEADBEEF;
 8001d90:	a362      	add	r3, pc, #392	; (adr r3, 8001f1c <eeprom_store+0x1dc>)
 8001d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d96:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		for(uint32_t index=0; index<float_size;index+=2)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001da0:	e052      	b.n	8001e48 <eeprom_store+0x108>
		{
			union UN {float a; uint32_t b;};
			union UN un1;
			union UN un2;
			un1.a = float_regs[index];
 8001da2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001daa:	4413      	add	r3, r2
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	63bb      	str	r3, [r7, #56]	; 0x38
			un2.a = float_regs[index+1];
 8001db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001db4:	3301      	adds	r3, #1
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dba:	4413      	add	r3, r2
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	637b      	str	r3, [r7, #52]	; 0x34
			uint64_t temp = un2.b;
 8001dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	617a      	str	r2, [r7, #20]
 8001dc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001dcc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			data = (temp<<32)|un1.b;
 8001dd0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001dd4:	f04f 0000 	mov.w	r0, #0
 8001dd8:	f04f 0100 	mov.w	r1, #0
 8001ddc:	0011      	movs	r1, r2
 8001dde:	2000      	movs	r0, #0
 8001de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de2:	2200      	movs	r2, #0
 8001de4:	4698      	mov	r8, r3
 8001de6:	4691      	mov	r9, r2
 8001de8:	ea40 0308 	orr.w	r3, r0, r8
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	ea41 0309 	orr.w	r3, r1, r9
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001df8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			HAL_StatusTypeDef result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,start_address+index*32,data);
 8001dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e00:	015b      	lsls	r3, r3, #5
 8001e02:	4a45      	ldr	r2, [pc, #276]	; (8001f18 <eeprom_store+0x1d8>)
 8001e04:	1899      	adds	r1, r3, r2
 8001e06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f006 f9ec 	bl	80081e8 <HAL_FLASH_Program>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(result!=HAL_OK)
 8001e16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00f      	beq.n	8001e3e <eeprom_store+0xfe>
			{
				uint32_t error = HAL_FLASH_GetError();
 8001e1e:	f006 fa75 	bl	800830c <HAL_FLASH_GetError>
 8001e22:	6538      	str	r0, [r7, #80]	; 0x50
				if(error)
 8001e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <eeprom_store+0xf4>
				{
					HAL_FLASH_Lock();
 8001e2a:	f006 fa55 	bl	80082d8 <HAL_FLASH_Lock>
					return error;
 8001e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	e06b      	b.n	8001f0c <eeprom_store+0x1cc>
				}
				HAL_FLASH_Lock();
 8001e34:	f006 fa50 	bl	80082d8 <HAL_FLASH_Lock>
				return result;
 8001e38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e3c:	e066      	b.n	8001f0c <eeprom_store+0x1cc>
		for(uint32_t index=0; index<float_size;index+=2)
 8001e3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e42:	3302      	adds	r3, #2
 8001e44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e48:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d3a7      	bcc.n	8001da2 <eeprom_store+0x62>
			}
		}
		for(uint32_t index=0; index<int_size;index+=2)
 8001e52:	2300      	movs	r3, #0
 8001e54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e58:	e050      	b.n	8001efc <eeprom_store+0x1bc>
		{
			union UN {int a; uint32_t b;};
			union UN un1;
			union UN un2;
			un1.a = int_regs[index];
 8001e5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	69fa      	ldr	r2, [r7, #28]
 8001e62:	4413      	add	r3, r2
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
			un2.a = int_regs[index+1];
 8001e68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	4413      	add	r3, r2
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
			uint64_t temp = un2.b;
 8001e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	603b      	str	r3, [r7, #0]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e84:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			data = (temp<<32)|un1.b;
 8001e88:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	0003      	movs	r3, r0
 8001e96:	2200      	movs	r2, #0
 8001e98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	460c      	mov	r4, r1
 8001e9e:	4605      	mov	r5, r0
 8001ea0:	ea42 0a04 	orr.w	sl, r2, r4
 8001ea4:	ea43 0b05 	orr.w	fp, r3, r5
 8001ea8:	e9c7 ab1c 	strd	sl, fp, [r7, #112]	; 0x70
			HAL_StatusTypeDef result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,start_address+(float_size+index)*32,data);
 8001eac:	6a3a      	ldr	r2, [r7, #32]
 8001eae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001eb2:	4413      	add	r3, r2
 8001eb4:	015b      	lsls	r3, r3, #5
 8001eb6:	4a18      	ldr	r2, [pc, #96]	; (8001f18 <eeprom_store+0x1d8>)
 8001eb8:	1899      	adds	r1, r3, r2
 8001eba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f006 f992 	bl	80081e8 <HAL_FLASH_Program>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			if(result!=HAL_OK)
 8001eca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00f      	beq.n	8001ef2 <eeprom_store+0x1b2>
			{
				uint32_t error = HAL_FLASH_GetError();
 8001ed2:	f006 fa1b 	bl	800830c <HAL_FLASH_GetError>
 8001ed6:	6638      	str	r0, [r7, #96]	; 0x60
				if(error)
 8001ed8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d004      	beq.n	8001ee8 <eeprom_store+0x1a8>
				{
					HAL_FLASH_Lock();
 8001ede:	f006 f9fb 	bl	80082d8 <HAL_FLASH_Lock>
					return error;
 8001ee2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	e011      	b.n	8001f0c <eeprom_store+0x1cc>
				}
				HAL_FLASH_Lock();
 8001ee8:	f006 f9f6 	bl	80082d8 <HAL_FLASH_Lock>
				return result;
 8001eec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001ef0:	e00c      	b.n	8001f0c <eeprom_store+0x1cc>
		for(uint32_t index=0; index<int_size;index+=2)
 8001ef2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001efc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d3a9      	bcc.n	8001e5a <eeprom_store+0x11a>
			}
		}
	}
	HAL_FLASH_Lock();
 8001f06:	f006 f9e7 	bl	80082d8 <HAL_FLASH_Lock>
	return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3788      	adds	r7, #136	; 0x88
 8001f10:	46bd      	mov	sp, r7
 8001f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f16:	bf00      	nop
 8001f18:	0801d000 	.word	0x0801d000
 8001f1c:	deadbeef 	.word	0xdeadbeef
 8001f20:	00000000 	.word	0x00000000

08001f24 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001f28:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f2a:	4a20      	ldr	r2, [pc, #128]	; (8001fac <MX_FDCAN1_Init+0x88>)
 8001f2c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV4;
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f30:	2202      	movs	r2, #2
 8001f32:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001f34:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001f3a:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8001f46:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001f4c:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f54:	2203      	movs	r2, #3
 8001f56:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f60:	220b      	movs	r2, #11
 8001f62:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001f64:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f66:	2202      	movs	r2, #2
 8001f68:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001f70:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001f88:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001f94:	4804      	ldr	r0, [pc, #16]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f96:	f005 fd29 	bl	80079ec <HAL_FDCAN_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001fa0:	f002 fc3f 	bl	8004822 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	200003b8 	.word	0x200003b8
 8001fac:	40006400 	.word	0x40006400

08001fb0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	; 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a26      	ldr	r2, [pc, #152]	; (8002068 <HAL_FDCAN_MspInit+0xb8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d146      	bne.n	8002060 <HAL_FDCAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001fd2:	4b26      	ldr	r3, [pc, #152]	; (800206c <HAL_FDCAN_MspInit+0xbc>)
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	4a25      	ldr	r2, [pc, #148]	; (800206c <HAL_FDCAN_MspInit+0xbc>)
 8001fd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8001fde:	4b23      	ldr	r3, [pc, #140]	; (800206c <HAL_FDCAN_MspInit+0xbc>)
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_FDCAN_MspInit+0xbc>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	4a1f      	ldr	r2, [pc, #124]	; (800206c <HAL_FDCAN_MspInit+0xbc>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ff6:	4b1d      	ldr	r3, [pc, #116]	; (800206c <HAL_FDCAN_MspInit+0xbc>)
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002002:	4b1a      	ldr	r3, [pc, #104]	; (800206c <HAL_FDCAN_MspInit+0xbc>)
 8002004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002006:	4a19      	ldr	r2, [pc, #100]	; (800206c <HAL_FDCAN_MspInit+0xbc>)
 8002008:	f043 0302 	orr.w	r3, r3, #2
 800200c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800200e:	4b17      	ldr	r3, [pc, #92]	; (800206c <HAL_FDCAN_MspInit+0xbc>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800201a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800201e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2300      	movs	r3, #0
 800202a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800202c:	2309      	movs	r3, #9
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	4619      	mov	r1, r3
 8002036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800203a:	f006 fb47 	bl	80086cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800203e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002050:	2309      	movs	r3, #9
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	4619      	mov	r1, r3
 800205a:	4805      	ldr	r0, [pc, #20]	; (8002070 <HAL_FDCAN_MspInit+0xc0>)
 800205c:	f006 fb36 	bl	80086cc <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002060:	bf00      	nop
 8002062:	3728      	adds	r7, #40	; 0x28
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40006400 	.word	0x40006400
 800206c:	40021000 	.word	0x40021000
 8002070:	48000400 	.word	0x48000400

08002074 <can_rx_init>:
  /* USER CODE END FDCAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void can_rx_init(CANRxMessage *msg){
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af02      	add	r7, sp, #8
 800207a:	6078      	str	r0, [r7, #4]
	msg->filter.IdType = FDCAN_STANDARD_ID;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	635a      	str	r2, [r3, #52]	; 0x34
	msg->filter.FilterIndex = 0;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	639a      	str	r2, [r3, #56]	; 0x38
	msg->filter.FilterType = FDCAN_FILTER_RANGE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	63da      	str	r2, [r3, #60]	; 0x3c
	msg->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	641a      	str	r2, [r3, #64]	; 0x40
	msg->filter.FilterID1 = CAN_ID;
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <can_rx_init+0x58>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	461a      	mov	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
	msg->filter.FilterID2 = CAN_ID;
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <can_rx_init+0x58>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	461a      	mov	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	649a      	str	r2, [r3, #72]	; 0x48
	HAL_FDCAN_ConfigFilter(&CAN_H, &msg->filter);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3334      	adds	r3, #52	; 0x34
 80020ac:	4619      	mov	r1, r3
 80020ae:	4808      	ldr	r0, [pc, #32]	; (80020d0 <can_rx_init+0x5c>)
 80020b0:	f005 fdf6 	bl	8007ca0 <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&CAN_H,3,3,0,1);
 80020b4:	2301      	movs	r3, #1
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2300      	movs	r3, #0
 80020ba:	2203      	movs	r2, #3
 80020bc:	2103      	movs	r1, #3
 80020be:	4804      	ldr	r0, [pc, #16]	; (80020d0 <can_rx_init+0x5c>)
 80020c0:	f005 fe48 	bl	8007d54 <HAL_FDCAN_ConfigGlobalFilter>
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20004da0 	.word	0x20004da0
 80020d0:	200003b8 	.word	0x200003b8

080020d4 <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	msg->tx_header.Identifier = CAN_MASTER;
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <can_tx_init+0x50>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	461a      	mov	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	609a      	str	r2, [r3, #8]
	msg->tx_header.DataLength = FDCAN_DLC_BYTES_6;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80020ec:	615a      	str	r2, [r3, #20]
	msg->tx_header.IdType = FDCAN_STANDARD_ID;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	60da      	str	r2, [r3, #12]
	msg->tx_header.TxFrameType = FDCAN_DATA_FRAME;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	611a      	str	r2, [r3, #16]
	msg->tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]
	msg->tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	61da      	str	r2, [r3, #28]
	msg->tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	621a      	str	r2, [r3, #32]
	msg->tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	625a      	str	r2, [r3, #36]	; 0x24
	msg->tx_header.MessageMarker = 0;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	20004da0 	.word	0x20004da0

08002128 <pack_reply>:
/// 0: [position[15-8]]
/// 1: [position[7-0]]
/// 2: [velocity[11-4]]
/// 3: [velocity[3-0], current[11-8]]
/// 4: [current[7-0]]
void pack_reply(CANTxMessage *msg, uint8_t id, float p, float v, float t){
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6178      	str	r0, [r7, #20]
 8002130:	460b      	mov	r3, r1
 8002132:	ed87 0a03 	vstr	s0, [r7, #12]
 8002136:	edc7 0a02 	vstr	s1, [r7, #8]
 800213a:	ed87 1a01 	vstr	s2, [r7, #4]
 800213e:	74fb      	strb	r3, [r7, #19]
    int p_int = float_to_uint(p, P_MIN, P_MAX, 16);
 8002140:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <pack_reply+0xc4>)
 8002142:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002146:	4b29      	ldr	r3, [pc, #164]	; (80021ec <pack_reply+0xc4>)
 8002148:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800214c:	2010      	movs	r0, #16
 800214e:	eeb0 1a47 	vmov.f32	s2, s14
 8002152:	eef0 0a67 	vmov.f32	s1, s15
 8002156:	ed97 0a03 	vldr	s0, [r7, #12]
 800215a:	f002 fc50 	bl	80049fe <float_to_uint>
 800215e:	6278      	str	r0, [r7, #36]	; 0x24
    int v_int = float_to_uint(v, V_MIN, V_MAX, 12);
 8002160:	4b22      	ldr	r3, [pc, #136]	; (80021ec <pack_reply+0xc4>)
 8002162:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002166:	4b21      	ldr	r3, [pc, #132]	; (80021ec <pack_reply+0xc4>)
 8002168:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800216c:	200c      	movs	r0, #12
 800216e:	eeb0 1a47 	vmov.f32	s2, s14
 8002172:	eef0 0a67 	vmov.f32	s1, s15
 8002176:	ed97 0a02 	vldr	s0, [r7, #8]
 800217a:	f002 fc40 	bl	80049fe <float_to_uint>
 800217e:	6238      	str	r0, [r7, #32]
    int t_int = float_to_uint(t, -T_MAX, T_MAX, 12);
 8002180:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <pack_reply+0xc4>)
 8002182:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002186:	eef1 7a67 	vneg.f32	s15, s15
 800218a:	4b18      	ldr	r3, [pc, #96]	; (80021ec <pack_reply+0xc4>)
 800218c:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8002190:	200c      	movs	r0, #12
 8002192:	eeb0 1a47 	vmov.f32	s2, s14
 8002196:	eef0 0a67 	vmov.f32	s1, s15
 800219a:	ed97 0a01 	vldr	s0, [r7, #4]
 800219e:	f002 fc2e 	bl	80049fe <float_to_uint>
 80021a2:	61f8      	str	r0, [r7, #28]
    msg->data[0] = id;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	7cfa      	ldrb	r2, [r7, #19]
 80021a8:	705a      	strb	r2, [r3, #1]
    msg->data[1] = p_int>>8;
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	121b      	asrs	r3, r3, #8
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	709a      	strb	r2, [r3, #2]
    msg->data[2] = p_int&0xFF;
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	70da      	strb	r2, [r3, #3]
    msg->data[3] = v_int>>4;
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	111b      	asrs	r3, r3, #4
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	711a      	strb	r2, [r3, #4]
    msg->data[4] = ((v_int&0xF)<<4) + (t_int>>8);
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	121b      	asrs	r3, r3, #8
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	715a      	strb	r2, [r3, #5]
    msg->data[5] = t_int&0xFF;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	719a      	strb	r2, [r3, #6]
    }
 80021e2:	bf00      	nop
 80021e4:	3728      	adds	r7, #40	; 0x28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20004ca0 	.word	0x20004ca0

080021f0 <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 80021f0:	b084      	sub	sp, #16
 80021f2:	b590      	push	{r4, r7, lr}
 80021f4:	b087      	sub	sp, #28
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80021fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int p_int = (msg.data[0]<<8)|msg.data[1];
 8002200:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800220a:	4313      	orrs	r3, r2
 800220c:	617b      	str	r3, [r7, #20]
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 800220e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002218:	0912      	lsrs	r2, r2, #4
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8002220:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800222a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800222e:	4313      	orrs	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8002232:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800223c:	0912      	lsrs	r2, r2, #4
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	4313      	orrs	r3, r2
 8002242:	60bb      	str	r3, [r7, #8]
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8002244:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800224e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002252:	4313      	orrs	r3, r2
 8002254:	607b      	str	r3, [r7, #4]

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8002256:	4b34      	ldr	r3, [pc, #208]	; (8002328 <unpack_cmd+0x138>)
 8002258:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800225c:	4b32      	ldr	r3, [pc, #200]	; (8002328 <unpack_cmd+0x138>)
 800225e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8002262:	2110      	movs	r1, #16
 8002264:	eef0 0a47 	vmov.f32	s1, s14
 8002268:	eeb0 0a67 	vmov.f32	s0, s15
 800226c:	6978      	ldr	r0, [r7, #20]
 800226e:	f002 fbf9 	bl	8004a64 <uint_to_float>
 8002272:	eef0 7a40 	vmov.f32	s15, s0
 8002276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002278:	edc3 7a00 	vstr	s15, [r3]
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
 800227c:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <unpack_cmd+0x138>)
 800227e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002282:	4b29      	ldr	r3, [pc, #164]	; (8002328 <unpack_cmd+0x138>)
 8002284:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002288:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800228a:	1d1c      	adds	r4, r3, #4
 800228c:	210c      	movs	r1, #12
 800228e:	eef0 0a47 	vmov.f32	s1, s14
 8002292:	eeb0 0a67 	vmov.f32	s0, s15
 8002296:	6938      	ldr	r0, [r7, #16]
 8002298:	f002 fbe4 	bl	8004a64 <uint_to_float>
 800229c:	eef0 7a40 	vmov.f32	s15, s0
 80022a0:	edc4 7a00 	vstr	s15, [r4]
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 80022a4:	4b20      	ldr	r3, [pc, #128]	; (8002328 <unpack_cmd+0x138>)
 80022a6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80022aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ac:	f103 0408 	add.w	r4, r3, #8
 80022b0:	210c      	movs	r1, #12
 80022b2:	eef0 0a67 	vmov.f32	s1, s15
 80022b6:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800232c <unpack_cmd+0x13c>
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f002 fbd2 	bl	8004a64 <uint_to_float>
 80022c0:	eef0 7a40 	vmov.f32	s15, s0
 80022c4:	edc4 7a00 	vstr	s15, [r4]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 80022c8:	4b17      	ldr	r3, [pc, #92]	; (8002328 <unpack_cmd+0x138>)
 80022ca:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80022ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d0:	f103 040c 	add.w	r4, r3, #12
 80022d4:	210c      	movs	r1, #12
 80022d6:	eef0 0a67 	vmov.f32	s1, s15
 80022da:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800232c <unpack_cmd+0x13c>
 80022de:	68b8      	ldr	r0, [r7, #8]
 80022e0:	f002 fbc0 	bl	8004a64 <uint_to_float>
 80022e4:	eef0 7a40 	vmov.f32	s15, s0
 80022e8:	edc4 7a00 	vstr	s15, [r4]
        commands[4] = uint_to_float(t_int, -T_MAX, T_MAX, 12);
 80022ec:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <unpack_cmd+0x138>)
 80022ee:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80022f2:	eef1 7a67 	vneg.f32	s15, s15
 80022f6:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <unpack_cmd+0x138>)
 80022f8:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80022fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022fe:	f103 0410 	add.w	r4, r3, #16
 8002302:	210c      	movs	r1, #12
 8002304:	eef0 0a47 	vmov.f32	s1, s14
 8002308:	eeb0 0a67 	vmov.f32	s0, s15
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f002 fba9 	bl	8004a64 <uint_to_float>
 8002312:	eef0 7a40 	vmov.f32	s15, s0
 8002316:	edc4 7a00 	vstr	s15, [r4]

//    printf("Received   ");
//    printf("%.3f  %.3f  %.3f  %.3f  %.3f",commands[0], commands[1], commands[2], commands[3], commands[4]);
//    printf("\n\r");
    }
 800231a:	bf00      	nop
 800231c:	371c      	adds	r7, #28
 800231e:	46bd      	mov	sp, r7
 8002320:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002324:	b004      	add	sp, #16
 8002326:	4770      	bx	lr
 8002328:	20004ca0 	.word	0x20004ca0
 800232c:	00000000 	.word	0x00000000

08002330 <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002342:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002348:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002350:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002358:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002362:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800236a:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002374:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800237c:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002380:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <set_dtc+0x140>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d136      	bne.n	80023f6 <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002388:	4b3a      	ldr	r3, [pc, #232]	; (8002474 <set_dtc+0x144>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	ee07 3a90 	vmov	s15, r3
 8002392:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002396:	edd7 7a05 	vldr	s15, [r7, #20]
 800239a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239e:	4b35      	ldr	r3, [pc, #212]	; (8002474 <set_dtc+0x144>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023a6:	ee17 2a90 	vmov	r2, s15
 80023aa:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 80023ac:	4b31      	ldr	r3, [pc, #196]	; (8002474 <set_dtc+0x144>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b2:	ee07 3a90 	vmov	s15, r3
 80023b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80023be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c2:	4b2c      	ldr	r3, [pc, #176]	; (8002474 <set_dtc+0x144>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ca:	ee17 2a90 	vmov	r2, s15
 80023ce:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 80023d0:	4b28      	ldr	r3, [pc, #160]	; (8002474 <set_dtc+0x144>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	ee07 3a90 	vmov	s15, r3
 80023da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023de:	edd7 7a03 	vldr	s15, [r7, #12]
 80023e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e6:	4b23      	ldr	r3, [pc, #140]	; (8002474 <set_dtc+0x144>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ee:	ee17 2a90 	vmov	r2, s15
 80023f2:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 80023f4:	e035      	b.n	8002462 <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 80023f6:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <set_dtc+0x144>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	ee07 3a90 	vmov	s15, r3
 8002400:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002404:	edd7 7a05 	vldr	s15, [r7, #20]
 8002408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240c:	4b19      	ldr	r3, [pc, #100]	; (8002474 <set_dtc+0x144>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002414:	ee17 2a90 	vmov	r2, s15
 8002418:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 800241a:	4b16      	ldr	r3, [pc, #88]	; (8002474 <set_dtc+0x144>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002428:	edd7 7a04 	vldr	s15, [r7, #16]
 800242c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002430:	4b10      	ldr	r3, [pc, #64]	; (8002474 <set_dtc+0x144>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002438:	ee17 2a90 	vmov	r2, s15
 800243c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 800243e:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <set_dtc+0x144>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	ee07 3a90 	vmov	s15, r3
 8002448:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800244c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002454:	4b07      	ldr	r3, [pc, #28]	; (8002474 <set_dtc+0x144>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800245c:	ee17 2a90 	vmov	r2, s15
 8002460:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002462:	bf00      	nop
 8002464:	371c      	adds	r7, #28
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	20004da0 	.word	0x20004da0
 8002474:	20005058 	.word	0x20005058

08002478 <analog_sample>:

void analog_sample (ControllerStruct *controller){
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	/* Sample ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002480:	4b41      	ldr	r3, [pc, #260]	; (8002588 <analog_sample+0x110>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d112      	bne.n	80024ae <analog_sample+0x36>
		controller->adc_a_raw = controller->ADC1_Val[0];
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 800248e:	461a      	mov	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = controller->ADC2_Val[0];
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800249a:	461a      	mov	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	609a      	str	r2, [r3, #8]
		controller->adc_c_raw = controller->ADC2_Val[1];
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f8b3 3300 	ldrh.w	r3, [r3, #768]	; 0x300
 80024a6:	461a      	mov	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	60da      	str	r2, [r3, #12]
 80024ac:	e011      	b.n	80024d2 <analog_sample+0x5a>
	}
	else{
		controller->adc_a_raw = controller->ADC2_Val[0];
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 80024b4:	461a      	mov	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = controller->ADC1_Val[0];
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 80024c0:	461a      	mov	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	609a      	str	r2, [r3, #8]
		controller->adc_c_raw = controller->ADC2_Val[1];
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8b3 3300 	ldrh.w	r3, [r3, #768]	; 0x300
 80024cc:	461a      	mov	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	60da      	str	r2, [r3, #12]
	}
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)controller->ADC1_Val, 3);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 80024d8:	2203      	movs	r2, #3
 80024da:	4619      	mov	r1, r3
 80024dc:	482b      	ldr	r0, [pc, #172]	; (800258c <analog_sample+0x114>)
 80024de:	f003 ffc1 	bl	8006464 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc2, (uint32_t *)controller->ADC2_Val, 2);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 80024e8:	2202      	movs	r2, #2
 80024ea:	4619      	mov	r1, r3
 80024ec:	4828      	ldr	r0, [pc, #160]	; (8002590 <analog_sample+0x118>)
 80024ee:	f003 ffb9 	bl	8006464 <HAL_ADC_Start_DMA>

	controller->adc_vbus_raw = controller->ADC1_Val[1];
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	; 0x2fa
 80024f8:	461a      	mov	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	ee07 3a90 	vmov	s15, r3
 8002506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800250a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002594 <analog_sample+0x11c>
 800250e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	edc3 7a08 	vstr	s15, [r3, #32]

	controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	ee07 3a90 	vmov	s15, r3
 8002528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800252c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002598 <analog_sample+0x120>
 8002530:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	edc3 7a05 	vstr	s15, [r3, #20]
	controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	ee07 3a90 	vmov	s15, r3
 800254a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800254e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002598 <analog_sample+0x120>
 8002552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	edc3 7a06 	vstr	s15, [r3, #24]
	controller->i_c = I_SCALE*(float)(controller->adc_c_raw - controller->adc_c_offset);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	ee07 3a90 	vmov	s15, r3
 800256c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002570:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002598 <analog_sample+0x120>
 8002574:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	edc3 7a07 	vstr	s15, [r3, #28]

}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20004da0 	.word	0x20004da0
 800258c:	2000021c 	.word	0x2000021c
 8002590:	20000288 	.word	0x20000288
 8002594:	3c092822 	.word	0x3c092822
 8002598:	bcf0aa87 	.word	0xbcf0aa87

0800259c <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	ed87 0a05 	vstr	s0, [r7, #20]
 80025a6:	edc7 0a04 	vstr	s1, [r7, #16]
 80025aa:	ed87 1a03 	vstr	s2, [r7, #12]
 80025ae:	60b8      	str	r0, [r7, #8]
 80025b0:	6079      	str	r1, [r7, #4]
 80025b2:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 80025b4:	ed97 0a05 	vldr	s0, [r7, #20]
 80025b8:	f002 fac0 	bl	8004b3c <cos_lut>
 80025bc:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 80025c0:	ed97 0a05 	vldr	s0, [r7, #20]
 80025c4:	f002 fa80 	bl	8004ac8 <sin_lut>
 80025c8:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 80025cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80025d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80025d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d8:	edd7 6a06 	vldr	s13, [r7, #24]
 80025dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80025e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 80025ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80025f2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800269c <abc+0x100>
 80025f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80025fe:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002602:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002606:	ee37 7a67 	vsub.f32	s14, s14, s15
 800260a:	edd7 7a04 	vldr	s15, [r7, #16]
 800260e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002612:	edd7 7a07 	vldr	s15, [r7, #28]
 8002616:	eddf 6a22 	vldr	s13, [pc, #136]	; 80026a0 <abc+0x104>
 800261a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800261e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002622:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002626:	ee67 7a86 	vmul.f32	s15, s15, s12
 800262a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800262e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 8002640:	edd7 7a06 	vldr	s15, [r7, #24]
 8002644:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80026a0 <abc+0x104>
 8002648:	ee27 7a87 	vmul.f32	s14, s15, s14
 800264c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002650:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002654:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002658:	ee37 7a67 	vsub.f32	s14, s14, s15
 800265c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002660:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002664:	edd7 7a07 	vldr	s15, [r7, #28]
 8002668:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800269c <abc+0x100>
 800266c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002670:	edd7 7a06 	vldr	s15, [r7, #24]
 8002674:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002678:	ee67 7a86 	vmul.f32	s15, s15, s12
 800267c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002680:	edd7 7a03 	vldr	s15, [r7, #12]
 8002684:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	edc3 7a00 	vstr	s15, [r3]
    }
 8002692:	bf00      	nop
 8002694:	3720      	adds	r7, #32
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	3f5db3d7 	.word	0x3f5db3d7
 80026a0:	bf5db3d7 	.word	0xbf5db3d7

080026a4 <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	ed87 0a05 	vstr	s0, [r7, #20]
 80026ae:	edc7 0a04 	vstr	s1, [r7, #16]
 80026b2:	ed87 1a03 	vstr	s2, [r7, #12]
 80026b6:	edc7 1a02 	vstr	s3, [r7, #8]
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 80026be:	ed97 0a05 	vldr	s0, [r7, #20]
 80026c2:	f002 fa3b 	bl	8004b3c <cos_lut>
 80026c6:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 80026ca:	ed97 0a05 	vldr	s0, [r7, #20]
 80026ce:	f002 f9fb 	bl	8004ac8 <sin_lut>
 80026d2:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80026d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80026da:	edd7 7a04 	vldr	s15, [r7, #16]
 80026de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80026e6:	eddf 6a34 	vldr	s13, [pc, #208]	; 80027b8 <dq0+0x114>
 80026ea:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80026ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80026f2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80026f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80026fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80026fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002702:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002706:	ee37 7a27 	vadd.f32	s14, s14, s15
 800270a:	edd7 7a06 	vldr	s15, [r7, #24]
 800270e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80027bc <dq0+0x118>
 8002712:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002716:	edd7 7a07 	vldr	s15, [r7, #28]
 800271a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800271e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002722:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002726:	edd7 7a02 	vldr	s15, [r7, #8]
 800272a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800272e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002732:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80027c0 <dq0+0x11c>
 8002736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002740:	edd7 7a06 	vldr	s15, [r7, #24]
 8002744:	eeb1 7a67 	vneg.f32	s14, s15
 8002748:	edd7 7a04 	vldr	s15, [r7, #16]
 800274c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002750:	edd7 7a07 	vldr	s15, [r7, #28]
 8002754:	eddf 6a19 	vldr	s13, [pc, #100]	; 80027bc <dq0+0x118>
 8002758:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800275c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002760:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002764:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002768:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800276c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002770:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002774:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002778:	edd7 7a07 	vldr	s15, [r7, #28]
 800277c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80027b8 <dq0+0x114>
 8002780:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002784:	edd7 7a06 	vldr	s15, [r7, #24]
 8002788:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800278c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002790:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002794:	edd7 7a02 	vldr	s15, [r7, #8]
 8002798:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800279c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80027c0 <dq0+0x11c>
 80027a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	edc3 7a00 	vstr	s15, [r3]

    }
 80027ae:	bf00      	nop
 80027b0:	3720      	adds	r7, #32
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	3f5db3d7 	.word	0x3f5db3d7
 80027bc:	bf5db3d7 	.word	0xbf5db3d7
 80027c0:	3f2aaaab 	.word	0x3f2aaaab

080027c4 <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 80027c4:	b580      	push	{r7, lr}
 80027c6:	ed2d 8b02 	vpush	{d8}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	ed87 0a07 	vstr	s0, [r7, #28]
 80027d2:	edc7 0a06 	vstr	s1, [r7, #24]
 80027d6:	ed87 1a05 	vstr	s2, [r7, #20]
 80027da:	edc7 1a04 	vstr	s3, [r7, #16]
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 80027e4:	ed97 1a04 	vldr	s2, [r7, #16]
 80027e8:	edd7 0a05 	vldr	s1, [r7, #20]
 80027ec:	ed97 0a06 	vldr	s0, [r7, #24]
 80027f0:	f002 f888 	bl	8004904 <fminf3>
 80027f4:	eeb0 8a40 	vmov.f32	s16, s0
 80027f8:	ed97 1a04 	vldr	s2, [r7, #16]
 80027fc:	edd7 0a05 	vldr	s1, [r7, #20]
 8002800:	ed97 0a06 	vldr	s0, [r7, #24]
 8002804:	f002 f84a 	bl	800489c <fmaxf3>
 8002808:	eef0 7a40 	vmov.f32	s15, s0
 800280c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002810:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002818:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 800281c:	4b41      	ldr	r3, [pc, #260]	; (8002924 <svm+0x160>)
 800281e:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002820:	ed97 7a06 	vldr	s14, [r7, #24]
 8002824:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002828:	ee77 7a67 	vsub.f32	s15, s14, s15
 800282c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002830:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002834:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002928 <svm+0x164>
 8002838:	ee67 6a87 	vmul.f32	s13, s15, s14
 800283c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002840:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002844:	edd7 7a08 	vldr	s15, [r7, #32]
 8002848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800284c:	eddf 0a37 	vldr	s1, [pc, #220]	; 800292c <svm+0x168>
 8002850:	eeb0 0a67 	vmov.f32	s0, s15
 8002854:	f001 ffea 	bl	800482c <fast_fmaxf>
 8002858:	eef0 7a40 	vmov.f32	s15, s0
 800285c:	eddf 0a34 	vldr	s1, [pc, #208]	; 8002930 <svm+0x16c>
 8002860:	eeb0 0a67 	vmov.f32	s0, s15
 8002864:	f001 fffe 	bl	8004864 <fast_fminf>
 8002868:	eef0 7a40 	vmov.f32	s15, s0
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002872:	ed97 7a05 	vldr	s14, [r7, #20]
 8002876:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800287a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800287e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002882:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002886:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002928 <svm+0x164>
 800288a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800288e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002896:	edd7 7a08 	vldr	s15, [r7, #32]
 800289a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800289e:	eddf 0a23 	vldr	s1, [pc, #140]	; 800292c <svm+0x168>
 80028a2:	eeb0 0a67 	vmov.f32	s0, s15
 80028a6:	f001 ffc1 	bl	800482c <fast_fmaxf>
 80028aa:	eef0 7a40 	vmov.f32	s15, s0
 80028ae:	eddf 0a20 	vldr	s1, [pc, #128]	; 8002930 <svm+0x16c>
 80028b2:	eeb0 0a67 	vmov.f32	s0, s15
 80028b6:	f001 ffd5 	bl	8004864 <fast_fminf>
 80028ba:	eef0 7a40 	vmov.f32	s15, s0
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80028c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80028c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002928 <svm+0x164>
 80028dc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80028e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80028e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028e8:	edd7 7a08 	vldr	s15, [r7, #32]
 80028ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f0:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800292c <svm+0x168>
 80028f4:	eeb0 0a67 	vmov.f32	s0, s15
 80028f8:	f001 ff98 	bl	800482c <fast_fmaxf>
 80028fc:	eef0 7a40 	vmov.f32	s15, s0
 8002900:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002930 <svm+0x16c>
 8002904:	eeb0 0a67 	vmov.f32	s0, s15
 8002908:	f001 ffac 	bl	8004864 <fast_fminf>
 800290c:	eef0 7a40 	vmov.f32	s15, s0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	edc3 7a00 	vstr	s15, [r3]

    }
 8002916:	bf00      	nop
 8002918:	3728      	adds	r7, #40	; 0x28
 800291a:	46bd      	mov	sp, r7
 800291c:	ecbd 8b02 	vpop	{d8}
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	3ef0a3d7 	.word	0x3ef0a3d7
 8002928:	3f933333 	.word	0x3f933333
 800292c:	00000000 	.word	0x00000000
 8002930:	3f70a3d7 	.word	0x3f70a3d7

08002934 <zero_current>:

void zero_current(ControllerStruct *controller){
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	61fb      	str	r3, [r7, #28]
    int adc_b_offset = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	61bb      	str	r3, [r7, #24]
    int adc_c_offset = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
    int n = 1000;
 8002948:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800294c:	60fb      	str	r3, [r7, #12]
    controller->dtc_u = 0.f;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	659a      	str	r2, [r3, #88]	; 0x58
    controller->dtc_v = 0.f;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_w = 0.f;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	661a      	str	r2, [r3, #96]	; 0x60
    set_dtc(controller);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff fce2 	bl	8002330 <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 800296c:	2300      	movs	r3, #0
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	e014      	b.n	800299c <zero_current+0x68>
    	analog_sample(controller);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff fd80 	bl	8002478 <analog_sample>
    	adc_a_offset += controller->adc_a_raw;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	4413      	add	r3, r2
 8002980:	61fb      	str	r3, [r7, #28]
    	adc_b_offset += controller->adc_b_raw;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4413      	add	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
    	adc_c_offset += controller->adc_c_raw;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	4413      	add	r3, r2
 8002994:	617b      	str	r3, [r7, #20]
    for (int i = 0; i<n; i++){               // Average n samples
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	3301      	adds	r3, #1
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	dbe6      	blt.n	8002972 <zero_current+0x3e>
     }
    controller->adc_a_offset = adc_a_offset/n;
 80029a4:	69fa      	ldr	r2, [r7, #28]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	fb92 f2f3 	sdiv	r2, r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    controller->adc_b_offset = adc_b_offset/n;
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	fb92 f2f3 	sdiv	r2, r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    controller->adc_c_offset = adc_c_offset/n;
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	fb92 f2f3 	sdiv	r2, r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    }
 80029ce:	bf00      	nop
 80029d0:	3720      	adds	r7, #32
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a42      	ldr	r2, [pc, #264]	; (8002aec <init_controller_params+0x114>)
 80029e4:	679a      	str	r2, [r3, #120]	; 0x78
    controller->ki_q = KI_Q;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a40      	ldr	r2, [pc, #256]	; (8002aec <init_controller_params+0x114>)
 80029ea:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->k_d = K_SCALE*I_BW;
 80029ec:	4b40      	ldr	r3, [pc, #256]	; (8002af0 <init_controller_params+0x118>)
 80029ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80029f2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002af4 <init_controller_params+0x11c>
 80029f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    controller->k_q = K_SCALE*I_BW;
 8002a00:	4b3b      	ldr	r3, [pc, #236]	; (8002af0 <init_controller_params+0x118>)
 8002a02:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a06:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002af4 <init_controller_params+0x11c>
 8002a0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002a14:	4b36      	ldr	r3, [pc, #216]	; (8002af0 <init_controller_params+0x118>)
 8002a16:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a1a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002af4 <init_controller_params+0x11c>
 8002a1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a22:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002af8 <init_controller_params+0x120>
 8002a26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->ki_fw = .1f*controller->ki_d;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002a4e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002afc <init_controller_params+0x124>
 8002a52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
    controller->phase_order = PHASE_ORDER;
 8002a5c:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <init_controller_params+0x128>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	e036      	b.n	8002ada <init_controller_params+0x102>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	ee07 3a90 	vmov	s15, r3
 8002a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a76:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002b04 <init_controller_params+0x12c>
 8002a7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a7e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002b08 <init_controller_params+0x130>
 8002a82:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a86:	ee16 0a90 	vmov	r0, s13
 8002a8a:	f7fd fd85 	bl	8000598 <__aeabi_f2d>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	ec43 2b10 	vmov	d0, r2, r3
 8002a96:	f00e fc0f 	bl	80112b8 <exp>
 8002a9a:	ec51 0b10 	vmov	r0, r1, d0
 8002a9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002aa2:	4b1a      	ldr	r3, [pc, #104]	; (8002b0c <init_controller_params+0x134>)
 8002aa4:	f7fd fdd0 	bl	8000648 <__aeabi_dmul>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4610      	mov	r0, r2
 8002aae:	4619      	mov	r1, r3
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <init_controller_params+0x138>)
 8002ab6:	f7fd fc11 	bl	80002dc <__adddf3>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f7fe f8b9 	bl	8000c38 <__aeabi_d2f>
 8002ac6:	4601      	mov	r1, r0
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	333c      	adds	r3, #60	; 0x3c
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b7f      	cmp	r3, #127	; 0x7f
 8002ade:	ddc5      	ble.n	8002a6c <init_controller_params+0x94>
    }
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	3d3851ec 	.word	0x3d3851ec
 8002af0:	20004ca0 	.word	0x20004ca0
 8002af4:	38d1b717 	.word	0x38d1b717
 8002af8:	40c90fdb 	.word	0x40c90fdb
 8002afc:	3dcccccd 	.word	0x3dcccccd
 8002b00:	20004da0 	.word	0x20004da0
 8002b04:	bc000000 	.word	0xbc000000
 8002b08:	3d03126f 	.word	0x3d03126f
 8002b0c:	3ff33333 	.word	0x3ff33333
 8002b10:	3ff00000 	.word	0x3ff00000

08002b14 <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002b1c:	4b36      	ldr	r3, [pc, #216]	; (8002bf8 <reset_foc+0xe4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	ee07 3a90 	vmov	s15, r3
 8002b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b2a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b32:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <reset_foc+0xe4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b3a:	ee17 2a90 	vmov	r2, s15
 8002b3e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002b40:	4b2d      	ldr	r3, [pc, #180]	; (8002bf8 <reset_foc+0xe4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b46:	ee07 3a90 	vmov	s15, r3
 8002b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b56:	4b28      	ldr	r3, [pc, #160]	; (8002bf8 <reset_foc+0xe4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b5e:	ee17 2a90 	vmov	r2, s15
 8002b62:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002b64:	4b24      	ldr	r3, [pc, #144]	; (8002bf8 <reset_foc+0xe4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6a:	ee07 3a90 	vmov	s15, r3
 8002b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b72:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b7a:	4b1f      	ldr	r3, [pc, #124]	; (8002bf8 <reset_foc+0xe4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b82:	ee17 2a90 	vmov	r2, s15
 8002b86:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    controller->i_q_des = 0;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller->i_d = 0;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    controller->d_int = 0;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    controller->v_q = 0;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54
    controller->v_d = 0;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	651a      	str	r2, [r3, #80]	; 0x50
    controller->fw_int = 0;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    controller->otw_flag = 0;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

    }
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20005058 	.word	0x20005058

08002bfc <commutate>:


}

void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity/GR;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8002c1c:	4bd7      	ldr	r3, [pc, #860]	; (8002f7c <commutate+0x380>)
 8002c1e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	edd3 6a03 	vldr	s13, [r3, #12]
 8002c32:	4bd2      	ldr	r3, [pc, #840]	; (8002f7c <commutate+0x380>)
 8002c34:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	ed93 7a05 	vldr	s14, [r3, #20]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	edd3 6a06 	vldr	s13, [r3, #24]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	ed93 6a07 	vldr	s12, [r3, #28]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3340      	adds	r3, #64	; 0x40
 8002c64:	4619      	mov	r1, r3
 8002c66:	4610      	mov	r0, r2
 8002c68:	eef0 1a46 	vmov.f32	s3, s12
 8002c6c:	eeb0 1a66 	vmov.f32	s2, s13
 8002c70:	eef0 0a47 	vmov.f32	s1, s14
 8002c74:	eeb0 0a67 	vmov.f32	s0, s15
 8002c78:	f7ff fd14 	bl	80026a4 <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002c82:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8002f80 <commutate+0x384>
 8002c86:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002c90:	eddf 6abc 	vldr	s13, [pc, #752]	; 8002f84 <commutate+0x388>
 8002c94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002ca8:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002f80 <commutate+0x384>
 8002cac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002cb6:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8002f84 <commutate+0x388>
 8002cba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002cce:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8002f88 <commutate+0x38c>
 8002cd2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	edd3 7a08 	vldr	s15, [r3, #32]
 8002cdc:	eddf 6aab 	vldr	s13, [pc, #684]	; 8002f8c <commutate+0x390>
 8002ce0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002cf4:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002f90 <commutate+0x394>
 8002cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cfc:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002f94 <commutate+0x398>
 8002d00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d04:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8002f98 <commutate+0x39c>
 8002d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 8002d12:	4b9a      	ldr	r3, [pc, #616]	; (8002f7c <commutate+0x380>)
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f103 01a4 	add.w	r1, r3, #164	; 0xa4
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8002d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d32:	4610      	mov	r0, r2
 8002d34:	f001 fe1a 	bl	800496c <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002d44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d48:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002d58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d5c:	edc7 7a06 	vstr	s15, [r7, #24]


       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8002d72:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002d80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d84:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002d9e:	eef0 0a47 	vmov.f32	s1, s14
 8002da2:	eeb0 0a67 	vmov.f32	s0, s15
 8002da6:	f001 fd5d 	bl	8004864 <fast_fminf>
 8002daa:	eeb0 7a40 	vmov.f32	s14, s0
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002db4:	eef1 7a67 	vneg.f32	s15, s15
 8002db8:	eef0 0a67 	vmov.f32	s1, s15
 8002dbc:	eeb0 0a47 	vmov.f32	s0, s14
 8002dc0:	f001 fd34 	bl	800482c <fast_fmaxf>
 8002dc4:	eef0 7a40 	vmov.f32	s15, s0
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002de0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002de4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002de8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002e02:	eef0 0a47 	vmov.f32	s1, s14
 8002e06:	eeb0 0a67 	vmov.f32	s0, s15
 8002e0a:	f001 fd2b 	bl	8004864 <fast_fminf>
 8002e0e:	eeb0 7a40 	vmov.f32	s14, s0
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002e18:	eef1 7a67 	vneg.f32	s15, s15
 8002e1c:	eef0 0a67 	vmov.f32	s1, s15
 8002e20:	eeb0 0a47 	vmov.f32	s0, s14
 8002e24:	f001 fd02 	bl	800482c <fast_fmaxf>
 8002e28:	eef0 7a40 	vmov.f32	s15, s0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002e3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002e4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e56:	eeb0 0a67 	vmov.f32	s0, s15
 8002e5a:	f00e fac3 	bl	80113e4 <sqrtf>
 8002e5e:	ed87 0a03 	vstr	s0, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002e68:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002e76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8002e9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ea2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002ebc:	eef0 0a47 	vmov.f32	s1, s14
 8002ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec4:	f001 fcce 	bl	8004864 <fast_fminf>
 8002ec8:	eeb0 7a40 	vmov.f32	s14, s0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002ed2:	eef1 7a67 	vneg.f32	s15, s15
 8002ed6:	eef0 0a67 	vmov.f32	s1, s15
 8002eda:	eeb0 0a47 	vmov.f32	s0, s14
 8002ede:	f001 fca5 	bl	800482c <fast_fmaxf>
 8002ee2:	eef0 7a40 	vmov.f32	s15, s0
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002ef8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f10:	eeb0 0a67 	vmov.f32	s0, s15
 8002f14:	f00e fa66 	bl	80113e4 <sqrtf>
 8002f18:	eef0 7a40 	vmov.f32	s15, s0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002f28:	edd7 0a03 	vldr	s1, [r7, #12]
 8002f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f30:	f001 fc98 	bl	8004864 <fast_fminf>
 8002f34:	eeb0 7a40 	vmov.f32	s14, s0
 8002f38:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f3c:	eef1 7a67 	vneg.f32	s15, s15
 8002f40:	eef0 0a67 	vmov.f32	s1, s15
 8002f44:	eeb0 0a47 	vmov.f32	s0, s14
 8002f48:	f001 fc70 	bl	800482c <fast_fmaxf>
 8002f4c:	eef0 7a40 	vmov.f32	s15, s0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002f68:	eeb0 0a67 	vmov.f32	s0, s15
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	f001 fcfd 	bl	800496c <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	e011      	b.n	8002fa0 <commutate+0x3a4>
 8002f7c:	20004ca0 	.word	0x20004ca0
 8002f80:	3f7d70a4 	.word	0x3f7d70a4
 8002f84:	3c23d70a 	.word	0x3c23d70a
 8002f88:	3f666666 	.word	0x3f666666
 8002f8c:	3dcccccd 	.word	0x3dcccccd
 8002f90:	3f933333 	.word	0x3f933333
 8002f94:	3f70a3d7 	.word	0x3f70a3d7
 8002f98:	3f13cd3a 	.word	0x3f13cd3a
 8002f9c:	391d4951 	.word	0x391d4951
 8002fa0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002fa4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8002f9c <commutate+0x3a0>
 8002fa8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	336c      	adds	r3, #108	; 0x6c
 8002fcc:	461a      	mov	r2, r3
 8002fce:	eeb0 1a66 	vmov.f32	s2, s13
 8002fd2:	eef0 0a47 	vmov.f32	s1, s14
 8002fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8002fda:	f7ff fadf 	bl	800259c <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	ed93 6a1b 	vldr	s12, [r3, #108]	; 0x6c
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3360      	adds	r3, #96	; 0x60
 8003006:	461a      	mov	r2, r3
 8003008:	eef0 1a46 	vmov.f32	s3, s12
 800300c:	eeb0 1a66 	vmov.f32	s2, s13
 8003010:	eef0 0a47 	vmov.f32	s1, s14
 8003014:	eeb0 0a67 	vmov.f32	s0, s15
 8003018:	f7ff fbd4 	bl	80027c4 <svm>
       set_dtc(controller);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff f987 	bl	8002330 <set_dtc>

    }
 8003022:	bf00      	nop
 8003024:	3720      	adds	r7, #32
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop

0800302c <torque_control>:
void torque_control(ControllerStruct *controller){
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	edd3 6a32 	vldr	s13, [r3, #200]	; 0xc8
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003046:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800304a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003054:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	ed93 6a33 	vldr	s12, [r3, #204]	; 0xcc
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800306a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800306e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003076:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = torque_des/(KT*GR);
 800307a:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <torque_control+0x84>)
 800307c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <torque_control+0x84>)
 8003082:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003086:	ee27 7a27 	vmul.f32	s14, s14, s15
 800308a:	edd7 6a03 	vldr	s13, [r7, #12]
 800308e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    controller->i_d_des = 0.0f;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

}
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	20004ca0 	.word	0x20004ca0

080030b4 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->kp = 0;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	controller->kd = 0;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	controller->p_des = 0;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	controller->v_des = 0;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	controller->i_q_des = 0;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "gatedrive.h"

 void run_fsm(FSMStruct * fsmstate){
 8003104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003106:	b085      	sub	sp, #20
 8003108:	af02      	add	r7, sp, #8
 800310a:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */
	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	785a      	ldrb	r2, [r3, #1]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d00d      	beq.n	8003134 <run_fsm+0x30>
//		 printf("trans %i %i \r\n",fsmstate->state, fsmstate->next_state);
		 fsm_exit_state(fsmstate);		// safely exit the old state
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f927 	bl	800336c <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	78db      	ldrb	r3, [r3, #3]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d006      	beq.n	8003134 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	785a      	ldrb	r2, [r3, #1]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f8c2 	bl	80032b8 <fsm_enter_state>
		 }

	 }

	 switch(fsmstate->state){
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b06      	cmp	r3, #6
 800313a:	f200 80a9 	bhi.w	8003290 <run_fsm+0x18c>
 800313e:	a201      	add	r2, pc, #4	; (adr r2, 8003144 <run_fsm+0x40>)
 8003140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003144:	0800328f 	.word	0x0800328f
 8003148:	08003161 	.word	0x08003161
 800314c:	08003249 	.word	0x08003249
 8003150:	08003291 	.word	0x08003291
 8003154:	0800328f 	.word	0x0800328f
 8003158:	08003285 	.word	0x08003285
 800315c:	0800328f 	.word	0x0800328f
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 8003160:	4b4d      	ldr	r3, [pc, #308]	; (8003298 <run_fsm+0x194>)
 8003162:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003166:	2b00      	cmp	r3, #0
 8003168:	d108      	bne.n	800317c <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 800316a:	4b4c      	ldr	r3, [pc, #304]	; (800329c <run_fsm+0x198>)
 800316c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003170:	4a49      	ldr	r2, [pc, #292]	; (8003298 <run_fsm+0x194>)
 8003172:	494a      	ldr	r1, [pc, #296]	; (800329c <run_fsm+0x198>)
 8003174:	484a      	ldr	r0, [pc, #296]	; (80032a0 <run_fsm+0x19c>)
 8003176:	f7fe f953 	bl	8001420 <order_phases>
//				HAL_Delay(10);
//				zero_current(&controller);
//				HAL_Delay(100);
			 }

			 break;
 800317a:	e089      	b.n	8003290 <run_fsm+0x18c>
			 else if(!comm_encoder_cal.done_cal){
 800317c:	4b46      	ldr	r3, [pc, #280]	; (8003298 <run_fsm+0x194>)
 800317e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003182:	2b00      	cmp	r3, #0
 8003184:	d108      	bne.n	8003198 <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8003186:	4b45      	ldr	r3, [pc, #276]	; (800329c <run_fsm+0x198>)
 8003188:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800318c:	4a42      	ldr	r2, [pc, #264]	; (8003298 <run_fsm+0x194>)
 800318e:	4943      	ldr	r1, [pc, #268]	; (800329c <run_fsm+0x198>)
 8003190:	4843      	ldr	r0, [pc, #268]	; (80032a0 <run_fsm+0x19c>)
 8003192:	f7fe fa5d 	bl	8001650 <calibrate_encoder>
			 break;
 8003196:	e07b      	b.n	8003290 <run_fsm+0x18c>
				 E_ZERO = comm_encoder_cal.ezero;
 8003198:	4b3f      	ldr	r3, [pc, #252]	; (8003298 <run_fsm+0x194>)
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	4a41      	ldr	r2, [pc, #260]	; (80032a4 <run_fsm+0x1a0>)
 800319e:	6113      	str	r3, [r2, #16]
				 printf("E_ZERO: %d  PP: %.3f %f\r\n", E_ZERO, PPAIRS, TWO_PI_F*fmodf((PPAIRS*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 80031a0:	4b40      	ldr	r3, [pc, #256]	; (80032a4 <run_fsm+0x1a0>)
 80031a2:	691e      	ldr	r6, [r3, #16]
 80031a4:	4b40      	ldr	r3, [pc, #256]	; (80032a8 <run_fsm+0x1a4>)
 80031a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fd f9f5 	bl	8000598 <__aeabi_f2d>
 80031ae:	4604      	mov	r4, r0
 80031b0:	460d      	mov	r5, r1
 80031b2:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <run_fsm+0x1a4>)
 80031b4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80031b8:	4b3a      	ldr	r3, [pc, #232]	; (80032a4 <run_fsm+0x1a0>)
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	425b      	negs	r3, r3
 80031be:	ee07 3a90 	vmov	s15, r3
 80031c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80032ac <run_fsm+0x1a8>
 80031ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80031d2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80031d6:	eeb0 0a47 	vmov.f32	s0, s14
 80031da:	f00e f8b5 	bl	8011348 <fmodf>
 80031de:	eef0 7a40 	vmov.f32	s15, s0
 80031e2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80032b0 <run_fsm+0x1ac>
 80031e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031ea:	ee17 0a90 	vmov	r0, s15
 80031ee:	f7fd f9d3 	bl	8000598 <__aeabi_f2d>
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	e9cd 2300 	strd	r2, r3, [sp]
 80031fa:	4622      	mov	r2, r4
 80031fc:	462b      	mov	r3, r5
 80031fe:	4631      	mov	r1, r6
 8003200:	482c      	ldr	r0, [pc, #176]	; (80032b4 <run_fsm+0x1b0>)
 8003202:	f00a fb0b 	bl	800d81c <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 8003206:	4b26      	ldr	r3, [pc, #152]	; (80032a0 <run_fsm+0x19c>)
 8003208:	4a23      	ldr	r2, [pc, #140]	; (8003298 <run_fsm+0x194>)
 800320a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800320e:	33d8      	adds	r3, #216	; 0xd8
 8003210:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 8003214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003218:	4618      	mov	r0, r3
 800321a:	f009 fe65 	bl	800cee8 <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 800321e:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <run_fsm+0x1a0>)
 8003220:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <run_fsm+0x194>)
 8003222:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8003226:	3318      	adds	r3, #24
 8003228:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 800322c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003230:	4618      	mov	r0, r3
 8003232:	f009 fe59 	bl	800cee8 <memcpy>
				 store_eeprom_regs();
 8003236:	f002 fc95 	bl	8005b64 <store_eeprom_regs>
				 load_eeprom_regs();
 800323a:	f002 fca1 	bl	8005b80 <load_eeprom_regs>
				 update_fsm(fsmstate, 27);
 800323e:	211b      	movs	r1, #27
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f8d9 	bl	80033f8 <update_fsm>
			 break;
 8003246:	e023      	b.n	8003290 <run_fsm+0x18c>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 8003248:	4b16      	ldr	r3, [pc, #88]	; (80032a4 <run_fsm+0x1a0>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	dd0a      	ble.n	8003266 <run_fsm+0x162>
 8003250:	4b12      	ldr	r3, [pc, #72]	; (800329c <run_fsm+0x198>)
 8003252:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8003256:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <run_fsm+0x1a0>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	429a      	cmp	r2, r3
 800325c:	dd03      	ble.n	8003266 <run_fsm+0x162>
				 zero_commands(&controller);
 800325e:	480f      	ldr	r0, [pc, #60]	; (800329c <run_fsm+0x198>)
 8003260:	f7ff ff28 	bl	80030b4 <zero_commands>
 8003264:	e002      	b.n	800326c <run_fsm+0x168>
			 }
			 /* Otherwise, commutate */
			 else{
				 torque_control(&controller);
 8003266:	480d      	ldr	r0, [pc, #52]	; (800329c <run_fsm+0x198>)
 8003268:	f7ff fee0 	bl	800302c <torque_control>
//				 field_weaken(&controller);
			 }
			 commutate(&controller, &comm_encoder);
 800326c:	490c      	ldr	r1, [pc, #48]	; (80032a0 <run_fsm+0x19c>)
 800326e:	480b      	ldr	r0, [pc, #44]	; (800329c <run_fsm+0x198>)
 8003270:	f7ff fcc4 	bl	8002bfc <commutate>
			 controller.timeout ++;
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <run_fsm+0x198>)
 8003276:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800327a:	3301      	adds	r3, #1
 800327c:	4a07      	ldr	r2, [pc, #28]	; (800329c <run_fsm+0x198>)
 800327e:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
			 break;
 8003282:	e005      	b.n	8003290 <run_fsm+0x18c>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 8003284:	2164      	movs	r1, #100	; 0x64
 8003286:	4806      	ldr	r0, [pc, #24]	; (80032a0 <run_fsm+0x19c>)
 8003288:	f001 ff44 	bl	8005114 <ps_print>
			 break;
 800328c:	e000      	b.n	8003290 <run_fsm+0x18c>
			 break;
 800328e:	bf00      	nop

		 case INIT_TEMP_MODE:
			 break;
	 }

 }
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003298:	20000914 	.word	0x20000914
 800329c:	2000041c 	.word	0x2000041c
 80032a0:	20000734 	.word	0x20000734
 80032a4:	20004da0 	.word	0x20004da0
 80032a8:	20004ca0 	.word	0x20004ca0
 80032ac:	46800000 	.word	0x46800000
 80032b0:	40c90fdb 	.word	0x40c90fdb
 80032b4:	08011b68 	.word	0x08011b68

080032b8 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b05      	cmp	r3, #5
 80032c6:	d841      	bhi.n	800334c <fsm_enter_state+0x94>
 80032c8:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <fsm_enter_state+0x18>)
 80032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ce:	bf00      	nop
 80032d0:	080032e9 	.word	0x080032e9
 80032d4:	0800330d 	.word	0x0800330d
 80032d8:	080032f5 	.word	0x080032f5
 80032dc:	0800334d 	.word	0x0800334d
 80032e0:	080032ef 	.word	0x080032ef
 80032e4:	0800334b 	.word	0x0800334b
				case MENU_MODE:
//				printf("Entering Main Menu\r\n");
				enter_menu_state();
 80032e8:	f000 f94c 	bl	8003584 <enter_menu_state>
				break;
 80032ec:	e02e      	b.n	800334c <fsm_enter_state+0x94>
			case SETUP_MODE:
//				printf("Entering Setup\r\n");
				enter_setup_state();
 80032ee:	f000 f975 	bl	80035dc <enter_setup_state>
				break;
 80032f2:	e02b      	b.n	800334c <fsm_enter_state+0x94>
			case ENCODER_MODE:
//				printf("Entering Encoder Mode\r\n");
				break;
			case MOTOR_MODE:
//				printf("Entering Motor Mode\r\n");
				HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 80032f4:	2201      	movs	r2, #1
 80032f6:	2140      	movs	r1, #64	; 0x40
 80032f8:	4816      	ldr	r0, [pc, #88]	; (8003354 <fsm_enter_state+0x9c>)
 80032fa:	f005 fb81 	bl	8008a00 <HAL_GPIO_WritePin>
				reset_foc(&controller);
 80032fe:	4816      	ldr	r0, [pc, #88]	; (8003358 <fsm_enter_state+0xa0>)
 8003300:	f7ff fc08 	bl	8002b14 <reset_foc>
//				drv_enable_gd(drv);
				enable_gd(&controller);
 8003304:	4814      	ldr	r0, [pc, #80]	; (8003358 <fsm_enter_state+0xa0>)
 8003306:	f000 fd9d 	bl	8003e44 <enable_gd>

				break;
 800330a:	e01f      	b.n	800334c <fsm_enter_state+0x94>
			case CALIBRATION_MODE:
//				printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 800330c:	4b13      	ldr	r3, [pc, #76]	; (800335c <fsm_enter_state+0xa4>)
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 8003314:	4b11      	ldr	r3, [pc, #68]	; (800335c <fsm_enter_state+0xa4>)
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 800331c:	4b0f      	ldr	r3, [pc, #60]	; (800335c <fsm_enter_state+0xa4>)
 800331e:	2200      	movs	r2, #0
 8003320:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 8003322:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <fsm_enter_state+0xa8>)
 8003324:	2200      	movs	r2, #0
 8003326:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 800332a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800332e:	2100      	movs	r1, #0
 8003330:	480c      	ldr	r0, [pc, #48]	; (8003364 <fsm_enter_state+0xac>)
 8003332:	f009 fe01 	bl	800cf38 <memset>
				PHASE_ORDER = 0;
 8003336:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <fsm_enter_state+0xb0>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
//			   disable_gd(&controller);
//			   HAL_Delay(10);
			   zero_current(&controller);
 800333c:	4806      	ldr	r0, [pc, #24]	; (8003358 <fsm_enter_state+0xa0>)
 800333e:	f7ff faf9 	bl	8002934 <zero_current>
//			   HAL_Delay(100);

//				drv_enable_gd(drv);
				enable_gd(&controller);
 8003342:	4805      	ldr	r0, [pc, #20]	; (8003358 <fsm_enter_state+0xa0>)
 8003344:	f000 fd7e 	bl	8003e44 <enable_gd>
				break;
 8003348:	e000      	b.n	800334c <fsm_enter_state+0x94>
				break;
 800334a:	bf00      	nop

		}
 }
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	48000800 	.word	0x48000800
 8003358:	2000041c 	.word	0x2000041c
 800335c:	20000914 	.word	0x20000914
 8003360:	20000734 	.word	0x20000734
 8003364:	2000080c 	.word	0x2000080c
 8003368:	20004da0 	.word	0x20004da0

0800336c <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b05      	cmp	r3, #5
 800337a:	d834      	bhi.n	80033e6 <fsm_exit_state+0x7a>
 800337c:	a201      	add	r2, pc, #4	; (adr r2, 8003384 <fsm_exit_state+0x18>)
 800337e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003382:	bf00      	nop
 8003384:	0800339d 	.word	0x0800339d
 8003388:	080033d9 	.word	0x080033d9
 800338c:	080033b5 	.word	0x080033b5
 8003390:	080033e7 	.word	0x080033e7
 8003394:	080033a5 	.word	0x080033a5
 8003398:	080033ad 	.word	0x080033ad
			case MENU_MODE:
//				printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	70da      	strb	r2, [r3, #3]
				break;
 80033a2:	e020      	b.n	80033e6 <fsm_exit_state+0x7a>
			case SETUP_MODE:
//				printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	70da      	strb	r2, [r3, #3]
				break;
 80033aa:	e01c      	b.n	80033e6 <fsm_exit_state+0x7a>
			case ENCODER_MODE:
//				printf("Leaving Encoder Mode\r\n");
				fsmstate->ready = 1;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	70da      	strb	r2, [r3, #3]
				break;
 80033b2:	e018      	b.n	80033e6 <fsm_exit_state+0x7a>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
//				if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
					fsmstate->ready = 1;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	70da      	strb	r2, [r3, #3]
//					drv_disable_gd(drv);
					reset_foc(&controller);
 80033ba:	480d      	ldr	r0, [pc, #52]	; (80033f0 <fsm_exit_state+0x84>)
 80033bc:	f7ff fbaa 	bl	8002b14 <reset_foc>
					disable_gd(&controller);
 80033c0:	480b      	ldr	r0, [pc, #44]	; (80033f0 <fsm_exit_state+0x84>)
 80033c2:	f000 fd65 	bl	8003e90 <disable_gd>
					HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 80033c6:	2200      	movs	r2, #0
 80033c8:	2140      	movs	r1, #64	; 0x40
 80033ca:	480a      	ldr	r0, [pc, #40]	; (80033f4 <fsm_exit_state+0x88>)
 80033cc:	f005 fb18 	bl	8008a00 <HAL_GPIO_WritePin>
//				}
				zero_commands(&controller);		// Set commands to zero
 80033d0:	4807      	ldr	r0, [pc, #28]	; (80033f0 <fsm_exit_state+0x84>)
 80033d2:	f7ff fe6f 	bl	80030b4 <zero_commands>
//				printf("Exiting Motor Mode\r\n");

				break;
 80033d6:	e006      	b.n	80033e6 <fsm_exit_state+0x7a>
			case CALIBRATION_MODE:
//				printf("Exiting Calibration Mode\r\n");
//				drv_disable_gd(drv);
				disable_gd(&controller);
 80033d8:	4805      	ldr	r0, [pc, #20]	; (80033f0 <fsm_exit_state+0x84>)
 80033da:	f000 fd59 	bl	8003e90 <disable_gd>
				//free(error_array);
				//free(lut_array);
				fsmstate->ready = 1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	70da      	strb	r2, [r3, #3]
				break;
 80033e4:	bf00      	nop
		}

 }
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	2000041c 	.word	0x2000041c
 80033f4:	48000800 	.word	0x48000800

080033f8 <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
//	 printf("%i %i %i\r\n",fsmstate->state, fsm_input, fsmstate->next_state);
	if(fsm_input == MENU_CMD){	// escape to exit do rest mode
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	2b1b      	cmp	r3, #27
 8003408:	d106      	bne.n	8003418 <update_fsm+0x20>
		fsmstate->next_state = MENU_MODE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	70da      	strb	r2, [r3, #3]
		return;
 8003416:	e0a9      	b.n	800356c <update_fsm+0x174>
	}
	switch(fsmstate->state){
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b05      	cmp	r3, #5
 800341e:	f200 80a5 	bhi.w	800356c <update_fsm+0x174>
 8003422:	a201      	add	r2, pc, #4	; (adr r2, 8003428 <update_fsm+0x30>)
 8003424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003428:	08003441 	.word	0x08003441
 800342c:	0800356d 	.word	0x0800356d
 8003430:	0800356d 	.word	0x0800356d
 8003434:	0800356d 	.word	0x0800356d
 8003438:	08003531 	.word	0x08003531
 800343c:	0800356d 	.word	0x0800356d
		case MENU_MODE:
			switch (fsm_input){
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	3b63      	subs	r3, #99	; 0x63
 8003444:	2b17      	cmp	r3, #23
 8003446:	f200 8090 	bhi.w	800356a <update_fsm+0x172>
 800344a:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <update_fsm+0x58>)
 800344c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003450:	080034b1 	.word	0x080034b1
 8003454:	0800356b 	.word	0x0800356b
 8003458:	080034cd 	.word	0x080034cd
 800345c:	0800356b 	.word	0x0800356b
 8003460:	0800356b 	.word	0x0800356b
 8003464:	0800356b 	.word	0x0800356b
 8003468:	0800356b 	.word	0x0800356b
 800346c:	0800356b 	.word	0x0800356b
 8003470:	0800356b 	.word	0x0800356b
 8003474:	0800356b 	.word	0x0800356b
 8003478:	080034bf 	.word	0x080034bf
 800347c:	0800356b 	.word	0x0800356b
 8003480:	0800356b 	.word	0x0800356b
 8003484:	0800356b 	.word	0x0800356b
 8003488:	0800356b 	.word	0x0800356b
 800348c:	0800356b 	.word	0x0800356b
 8003490:	080034db 	.word	0x080034db
 8003494:	0800356b 	.word	0x0800356b
 8003498:	0800356b 	.word	0x0800356b
 800349c:	0800356b 	.word	0x0800356b
 80034a0:	0800356b 	.word	0x0800356b
 80034a4:	0800356b 	.word	0x0800356b
 80034a8:	0800356b 	.word	0x0800356b
 80034ac:	080034e9 	.word	0x080034e9
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	70da      	strb	r2, [r3, #3]
					break;
 80034bc:	e037      	b.n	800352e <update_fsm+0x136>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	70da      	strb	r2, [r3, #3]
					break;
 80034ca:	e030      	b.n	800352e <update_fsm+0x136>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2205      	movs	r2, #5
 80034d0:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	70da      	strb	r2, [r3, #3]
					break;
 80034d8:	e029      	b.n	800352e <update_fsm+0x136>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2204      	movs	r2, #4
 80034de:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	70da      	strb	r2, [r3, #3]
					break;
 80034e6:	e022      	b.n	800352e <update_fsm+0x136>
				case ZERO_CMD:
					comm_encoder.mech_zero = 0.0f;
 80034e8:	4b22      	ldr	r3, [pc, #136]	; (8003574 <update_fsm+0x17c>)
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
					ps_sample(&comm_encoder, DT);
 80034f2:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8003578 <update_fsm+0x180>
 80034f6:	481f      	ldr	r0, [pc, #124]	; (8003574 <update_fsm+0x17c>)
 80034f8:	f001 fc8c 	bl	8004e14 <ps_sample>
					MECH_ZERO = comm_encoder.angle_multiturn[0];
 80034fc:	4b1d      	ldr	r3, [pc, #116]	; (8003574 <update_fsm+0x17c>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4a1e      	ldr	r2, [pc, #120]	; (800357c <update_fsm+0x184>)
 8003502:	65d3      	str	r3, [r2, #92]	; 0x5c
					comm_encoder.mech_zero = MECH_ZERO;
 8003504:	4b1d      	ldr	r3, [pc, #116]	; (800357c <update_fsm+0x184>)
 8003506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003508:	4a1a      	ldr	r2, [pc, #104]	; (8003574 <update_fsm+0x17c>)
 800350a:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc
					store_eeprom_regs();
 800350e:	f002 fb29 	bl	8005b64 <store_eeprom_regs>
					load_eeprom_regs();
 8003512:	f002 fb35 	bl	8005b80 <load_eeprom_regs>
					printf("\n\r  Saved new zero position:  %.3f\n\r\n\r", comm_encoder.mech_zero);
 8003516:	4b17      	ldr	r3, [pc, #92]	; (8003574 <update_fsm+0x17c>)
 8003518:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800351c:	4618      	mov	r0, r3
 800351e:	f7fd f83b 	bl	8000598 <__aeabi_f2d>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4816      	ldr	r0, [pc, #88]	; (8003580 <update_fsm+0x188>)
 8003528:	f00a f978 	bl	800d81c <iprintf>
					break;
 800352c:	bf00      	nop
				}
			break;
 800352e:	e01c      	b.n	800356a <update_fsm+0x172>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	2b0d      	cmp	r3, #13
 8003534:	d103      	bne.n	800353e <update_fsm+0x146>
				process_user_input(fsmstate);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f9c4 	bl	80038c4 <process_user_input>
				break;
 800353c:	e016      	b.n	800356c <update_fsm+0x174>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	7b1b      	ldrb	r3, [r3, #12]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <update_fsm+0x156>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	735a      	strb	r2, [r3, #13]
 800354c:	e006      	b.n	800355c <update_fsm+0x164>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	7b1b      	ldrb	r3, [r3, #12]
 8003552:	3b01      	subs	r3, #1
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	4413      	add	r3, r2
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	711a      	strb	r2, [r3, #4]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	7b1b      	ldrb	r3, [r3, #12]
 8003560:	3301      	adds	r3, #1
 8003562:	b2da      	uxtb	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	731a      	strb	r2, [r3, #12]
			/* If enter is typed, process user input */

			break;
 8003568:	e000      	b.n	800356c <update_fsm+0x174>
			break;
 800356a:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000734 	.word	0x20000734
 8003578:	38d1b717 	.word	0x38d1b717
 800357c:	20004ca0 	.word	0x20004ca0
 8003580:	08011b84 	.word	0x08011b84

08003584 <enter_menu_state>:


 void enter_menu_state(void){
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 8003588:	480c      	ldr	r0, [pc, #48]	; (80035bc <enter_menu_state+0x38>)
 800358a:	f00a f947 	bl	800d81c <iprintf>
	    printf(" Commands:\n\r");
 800358e:	480c      	ldr	r0, [pc, #48]	; (80035c0 <enter_menu_state+0x3c>)
 8003590:	f00a f944 	bl	800d81c <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003594:	480b      	ldr	r0, [pc, #44]	; (80035c4 <enter_menu_state+0x40>)
 8003596:	f00a f941 	bl	800d81c <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 800359a:	480b      	ldr	r0, [pc, #44]	; (80035c8 <enter_menu_state+0x44>)
 800359c:	f00a f93e 	bl	800d81c <iprintf>
	    printf(" s - Setup\n\r");
 80035a0:	480a      	ldr	r0, [pc, #40]	; (80035cc <enter_menu_state+0x48>)
 80035a2:	f00a f93b 	bl	800d81c <iprintf>
	    printf(" e - Display Encoder\n\r");
 80035a6:	480a      	ldr	r0, [pc, #40]	; (80035d0 <enter_menu_state+0x4c>)
 80035a8:	f00a f938 	bl	800d81c <iprintf>
	    printf(" z - Set Zero Position\n\r");
 80035ac:	4809      	ldr	r0, [pc, #36]	; (80035d4 <enter_menu_state+0x50>)
 80035ae:	f00a f935 	bl	800d81c <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 80035b2:	4809      	ldr	r0, [pc, #36]	; (80035d8 <enter_menu_state+0x54>)
 80035b4:	f00a f932 	bl	800d81c <iprintf>

	    //gpio.led->write(0);
 }
 80035b8:	bf00      	nop
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	08011bac 	.word	0x08011bac
 80035c0:	08011bb4 	.word	0x08011bb4
 80035c4:	08011bc4 	.word	0x08011bc4
 80035c8:	08011bd8 	.word	0x08011bd8
 80035cc:	08011bf4 	.word	0x08011bf4
 80035d0:	08011c04 	.word	0x08011c04
 80035d4:	08011c1c 	.word	0x08011c1c
 80035d8:	08011c38 	.word	0x08011c38

080035dc <enter_setup_state>:

 void enter_setup_state(void){
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 80035e2:	487d      	ldr	r0, [pc, #500]	; (80037d8 <enter_setup_state+0x1fc>)
 80035e4:	f00a f91a 	bl	800d81c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 80035e8:	4b7c      	ldr	r3, [pc, #496]	; (80037dc <enter_setup_state+0x200>)
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	4b7c      	ldr	r3, [pc, #496]	; (80037e0 <enter_setup_state+0x204>)
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	4b7c      	ldr	r3, [pc, #496]	; (80037e4 <enter_setup_state+0x208>)
 80035f2:	4a7d      	ldr	r2, [pc, #500]	; (80037e8 <enter_setup_state+0x20c>)
 80035f4:	497d      	ldr	r1, [pc, #500]	; (80037ec <enter_setup_state+0x210>)
 80035f6:	487e      	ldr	r0, [pc, #504]	; (80037f0 <enter_setup_state+0x214>)
 80035f8:	f00a f910 	bl	800d81c <iprintf>
	    printf("\r\n Motor:\r\n");
 80035fc:	487d      	ldr	r0, [pc, #500]	; (80037f4 <enter_setup_state+0x218>)
 80035fe:	f00a f993 	bl	800d928 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 8003602:	4b7d      	ldr	r3, [pc, #500]	; (80037f8 <enter_setup_state+0x21c>)
 8003604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003606:	4618      	mov	r0, r3
 8003608:	f7fc ffc6 	bl	8000598 <__aeabi_f2d>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003614:	4b79      	ldr	r3, [pc, #484]	; (80037fc <enter_setup_state+0x220>)
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	4b79      	ldr	r3, [pc, #484]	; (8003800 <enter_setup_state+0x224>)
 800361a:	4a7a      	ldr	r2, [pc, #488]	; (8003804 <enter_setup_state+0x228>)
 800361c:	497a      	ldr	r1, [pc, #488]	; (8003808 <enter_setup_state+0x22c>)
 800361e:	487b      	ldr	r0, [pc, #492]	; (800380c <enter_setup_state+0x230>)
 8003620:	f00a f8fc 	bl	800d81c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 8003624:	4b74      	ldr	r3, [pc, #464]	; (80037f8 <enter_setup_state+0x21c>)
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	4618      	mov	r0, r3
 800362a:	f7fc ffb5 	bl	8000598 <__aeabi_f2d>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003636:	4b71      	ldr	r3, [pc, #452]	; (80037fc <enter_setup_state+0x220>)
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	4b71      	ldr	r3, [pc, #452]	; (8003800 <enter_setup_state+0x224>)
 800363c:	4a74      	ldr	r2, [pc, #464]	; (8003810 <enter_setup_state+0x234>)
 800363e:	4975      	ldr	r1, [pc, #468]	; (8003814 <enter_setup_state+0x238>)
 8003640:	4875      	ldr	r0, [pc, #468]	; (8003818 <enter_setup_state+0x23c>)
 8003642:	f00a f8eb 	bl	800d81c <iprintf>
	    printf("\r\n Control:\r\n");
 8003646:	4875      	ldr	r0, [pc, #468]	; (800381c <enter_setup_state+0x240>)
 8003648:	f00a f96e 	bl	800d928 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 800364c:	4b6a      	ldr	r3, [pc, #424]	; (80037f8 <enter_setup_state+0x21c>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	4618      	mov	r0, r3
 8003652:	f7fc ffa1 	bl	8000598 <__aeabi_f2d>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800365e:	4b70      	ldr	r3, [pc, #448]	; (8003820 <enter_setup_state+0x244>)
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	4b70      	ldr	r3, [pc, #448]	; (8003824 <enter_setup_state+0x248>)
 8003664:	4a70      	ldr	r2, [pc, #448]	; (8003828 <enter_setup_state+0x24c>)
 8003666:	4971      	ldr	r1, [pc, #452]	; (800382c <enter_setup_state+0x250>)
 8003668:	4871      	ldr	r0, [pc, #452]	; (8003830 <enter_setup_state+0x254>)
 800366a:	f00a f8d7 	bl	800d81c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "60.0", I_MAX);
 800366e:	4b62      	ldr	r3, [pc, #392]	; (80037f8 <enter_setup_state+0x21c>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fc ff90 	bl	8000598 <__aeabi_f2d>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003680:	4b6c      	ldr	r3, [pc, #432]	; (8003834 <enter_setup_state+0x258>)
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	4b6c      	ldr	r3, [pc, #432]	; (8003838 <enter_setup_state+0x25c>)
 8003686:	4a6d      	ldr	r2, [pc, #436]	; (800383c <enter_setup_state+0x260>)
 8003688:	496d      	ldr	r1, [pc, #436]	; (8003840 <enter_setup_state+0x264>)
 800368a:	4869      	ldr	r0, [pc, #420]	; (8003830 <enter_setup_state+0x254>)
 800368c:	f00a f8c6 	bl	800d81c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 8003690:	4b59      	ldr	r3, [pc, #356]	; (80037f8 <enter_setup_state+0x21c>)
 8003692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003694:	4618      	mov	r0, r3
 8003696:	f7fc ff7f 	bl	8000598 <__aeabi_f2d>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036a2:	4b56      	ldr	r3, [pc, #344]	; (80037fc <enter_setup_state+0x220>)
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	4b55      	ldr	r3, [pc, #340]	; (80037fc <enter_setup_state+0x220>)
 80036a8:	4a66      	ldr	r2, [pc, #408]	; (8003844 <enter_setup_state+0x268>)
 80036aa:	4967      	ldr	r1, [pc, #412]	; (8003848 <enter_setup_state+0x26c>)
 80036ac:	4860      	ldr	r0, [pc, #384]	; (8003830 <enter_setup_state+0x254>)
 80036ae:	f00a f8b5 	bl	800d81c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 80036b2:	4b51      	ldr	r3, [pc, #324]	; (80037f8 <enter_setup_state+0x21c>)
 80036b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fc ff6e 	bl	8000598 <__aeabi_f2d>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036c4:	4b4d      	ldr	r3, [pc, #308]	; (80037fc <enter_setup_state+0x220>)
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	4b4c      	ldr	r3, [pc, #304]	; (80037fc <enter_setup_state+0x220>)
 80036ca:	4a60      	ldr	r2, [pc, #384]	; (800384c <enter_setup_state+0x270>)
 80036cc:	4960      	ldr	r1, [pc, #384]	; (8003850 <enter_setup_state+0x274>)
 80036ce:	4858      	ldr	r0, [pc, #352]	; (8003830 <enter_setup_state+0x254>)
 80036d0:	f00a f8a4 	bl	800d81c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 80036d4:	4b48      	ldr	r3, [pc, #288]	; (80037f8 <enter_setup_state+0x21c>)
 80036d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fc ff5d 	bl	8000598 <__aeabi_f2d>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036e6:	4b5b      	ldr	r3, [pc, #364]	; (8003854 <enter_setup_state+0x278>)
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	4b53      	ldr	r3, [pc, #332]	; (8003838 <enter_setup_state+0x25c>)
 80036ec:	4a5a      	ldr	r2, [pc, #360]	; (8003858 <enter_setup_state+0x27c>)
 80036ee:	495b      	ldr	r1, [pc, #364]	; (800385c <enter_setup_state+0x280>)
 80036f0:	484f      	ldr	r0, [pc, #316]	; (8003830 <enter_setup_state+0x254>)
 80036f2:	f00a f893 	bl	800d81c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 80036f6:	4b40      	ldr	r3, [pc, #256]	; (80037f8 <enter_setup_state+0x21c>)
 80036f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fc ff4c 	bl	8000598 <__aeabi_f2d>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003708:	4b55      	ldr	r3, [pc, #340]	; (8003860 <enter_setup_state+0x284>)
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	4b4a      	ldr	r3, [pc, #296]	; (8003838 <enter_setup_state+0x25c>)
 800370e:	4a55      	ldr	r2, [pc, #340]	; (8003864 <enter_setup_state+0x288>)
 8003710:	4955      	ldr	r1, [pc, #340]	; (8003868 <enter_setup_state+0x28c>)
 8003712:	4847      	ldr	r0, [pc, #284]	; (8003830 <enter_setup_state+0x254>)
 8003714:	f00a f882 	bl	800d81c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 8003718:	4b37      	ldr	r3, [pc, #220]	; (80037f8 <enter_setup_state+0x21c>)
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	4618      	mov	r0, r3
 800371e:	f7fc ff3b 	bl	8000598 <__aeabi_f2d>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800372a:	4b50      	ldr	r3, [pc, #320]	; (800386c <enter_setup_state+0x290>)
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	4b42      	ldr	r3, [pc, #264]	; (8003838 <enter_setup_state+0x25c>)
 8003730:	4a4f      	ldr	r2, [pc, #316]	; (8003870 <enter_setup_state+0x294>)
 8003732:	4950      	ldr	r1, [pc, #320]	; (8003874 <enter_setup_state+0x298>)
 8003734:	483e      	ldr	r0, [pc, #248]	; (8003830 <enter_setup_state+0x254>)
 8003736:	f00a f871 	bl	800d81c <iprintf>
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
//	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 800373a:	4b2f      	ldr	r3, [pc, #188]	; (80037f8 <enter_setup_state+0x21c>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	4618      	mov	r0, r3
 8003740:	f7fc ff2a 	bl	8000598 <__aeabi_f2d>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800374c:	4b4a      	ldr	r3, [pc, #296]	; (8003878 <enter_setup_state+0x29c>)
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	4b39      	ldr	r3, [pc, #228]	; (8003838 <enter_setup_state+0x25c>)
 8003752:	4a4a      	ldr	r2, [pc, #296]	; (800387c <enter_setup_state+0x2a0>)
 8003754:	494a      	ldr	r1, [pc, #296]	; (8003880 <enter_setup_state+0x2a4>)
 8003756:	4836      	ldr	r0, [pc, #216]	; (8003830 <enter_setup_state+0x254>)
 8003758:	f00a f860 	bl	800d81c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "o", "Max Torque Setpoint (N-m)", "0.0", "-", T_MAX);
 800375c:	4b26      	ldr	r3, [pc, #152]	; (80037f8 <enter_setup_state+0x21c>)
 800375e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003760:	4618      	mov	r0, r3
 8003762:	f7fc ff19 	bl	8000598 <__aeabi_f2d>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800376e:	4b23      	ldr	r3, [pc, #140]	; (80037fc <enter_setup_state+0x220>)
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	4b31      	ldr	r3, [pc, #196]	; (8003838 <enter_setup_state+0x25c>)
 8003774:	4a43      	ldr	r2, [pc, #268]	; (8003884 <enter_setup_state+0x2a8>)
 8003776:	4944      	ldr	r1, [pc, #272]	; (8003888 <enter_setup_state+0x2ac>)
 8003778:	482d      	ldr	r0, [pc, #180]	; (8003830 <enter_setup_state+0x254>)
 800377a:	f00a f84f 	bl	800d81c <iprintf>
	    printf("\r\n CAN:\r\n");
 800377e:	4843      	ldr	r0, [pc, #268]	; (800388c <enter_setup_state+0x2b0>)
 8003780:	f00a f8d2 	bl	800d928 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8003784:	4b42      	ldr	r3, [pc, #264]	; (8003890 <enter_setup_state+0x2b4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	9301      	str	r3, [sp, #4]
 800378a:	4b42      	ldr	r3, [pc, #264]	; (8003894 <enter_setup_state+0x2b8>)
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	4b1c      	ldr	r3, [pc, #112]	; (8003800 <enter_setup_state+0x224>)
 8003790:	4a41      	ldr	r2, [pc, #260]	; (8003898 <enter_setup_state+0x2bc>)
 8003792:	4942      	ldr	r1, [pc, #264]	; (800389c <enter_setup_state+0x2c0>)
 8003794:	4842      	ldr	r0, [pc, #264]	; (80038a0 <enter_setup_state+0x2c4>)
 8003796:	f00a f841 	bl	800d81c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN Master ID", "0", "127", CAN_MASTER);
 800379a:	4b3d      	ldr	r3, [pc, #244]	; (8003890 <enter_setup_state+0x2b4>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	4b3c      	ldr	r3, [pc, #240]	; (8003894 <enter_setup_state+0x2b8>)
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	4b16      	ldr	r3, [pc, #88]	; (8003800 <enter_setup_state+0x224>)
 80037a6:	4a3f      	ldr	r2, [pc, #252]	; (80038a4 <enter_setup_state+0x2c8>)
 80037a8:	493f      	ldr	r1, [pc, #252]	; (80038a8 <enter_setup_state+0x2cc>)
 80037aa:	483d      	ldr	r0, [pc, #244]	; (80038a0 <enter_setup_state+0x2c4>)
 80037ac:	f00a f836 	bl	800d81c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 80037b0:	4b37      	ldr	r3, [pc, #220]	; (8003890 <enter_setup_state+0x2b4>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	4b3d      	ldr	r3, [pc, #244]	; (80038ac <enter_setup_state+0x2d0>)
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	4b11      	ldr	r3, [pc, #68]	; (8003800 <enter_setup_state+0x224>)
 80037bc:	4a3c      	ldr	r2, [pc, #240]	; (80038b0 <enter_setup_state+0x2d4>)
 80037be:	493d      	ldr	r1, [pc, #244]	; (80038b4 <enter_setup_state+0x2d8>)
 80037c0:	483d      	ldr	r0, [pc, #244]	; (80038b8 <enter_setup_state+0x2dc>)
 80037c2:	f00a f82b 	bl	800d81c <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 80037c6:	483d      	ldr	r0, [pc, #244]	; (80038bc <enter_setup_state+0x2e0>)
 80037c8:	f00a f828 	bl	800d81c <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 80037cc:	483c      	ldr	r0, [pc, #240]	; (80038c0 <enter_setup_state+0x2e4>)
 80037ce:	f00a f825 	bl	800d81c <iprintf>
 }
 80037d2:	bf00      	nop
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	08011c50 	.word	0x08011c50
 80037dc:	08011ca4 	.word	0x08011ca4
 80037e0:	08011cb4 	.word	0x08011cb4
 80037e4:	08011c6c 	.word	0x08011c6c
 80037e8:	08011c70 	.word	0x08011c70
 80037ec:	08011c7c 	.word	0x08011c7c
 80037f0:	08011c84 	.word	0x08011c84
 80037f4:	08011cb8 	.word	0x08011cb8
 80037f8:	20004ca0 	.word	0x20004ca0
 80037fc:	08011cf8 	.word	0x08011cf8
 8003800:	08011cc4 	.word	0x08011cc4
 8003804:	08011cc8 	.word	0x08011cc8
 8003808:	08011cd4 	.word	0x08011cd4
 800380c:	08011cd8 	.word	0x08011cd8
 8003810:	08011cfc 	.word	0x08011cfc
 8003814:	08011d14 	.word	0x08011d14
 8003818:	08011d18 	.word	0x08011d18
 800381c:	08011d38 	.word	0x08011d38
 8003820:	08011d88 	.word	0x08011d88
 8003824:	08011d48 	.word	0x08011d48
 8003828:	08011d4c 	.word	0x08011d4c
 800382c:	08011d64 	.word	0x08011d64
 8003830:	08011d68 	.word	0x08011d68
 8003834:	08011dac 	.word	0x08011dac
 8003838:	08011d90 	.word	0x08011d90
 800383c:	08011d94 	.word	0x08011d94
 8003840:	08011da8 	.word	0x08011da8
 8003844:	08011db4 	.word	0x08011db4
 8003848:	08011dd0 	.word	0x08011dd0
 800384c:	08011dd4 	.word	0x08011dd4
 8003850:	08011df4 	.word	0x08011df4
 8003854:	08011e18 	.word	0x08011e18
 8003858:	08011df8 	.word	0x08011df8
 800385c:	08011e14 	.word	0x08011e14
 8003860:	08011e44 	.word	0x08011e44
 8003864:	08011e20 	.word	0x08011e20
 8003868:	08011e40 	.word	0x08011e40
 800386c:	08011e64 	.word	0x08011e64
 8003870:	08011e48 	.word	0x08011e48
 8003874:	08011e60 	.word	0x08011e60
 8003878:	08011e88 	.word	0x08011e88
 800387c:	08011e6c 	.word	0x08011e6c
 8003880:	08011e84 	.word	0x08011e84
 8003884:	08011e90 	.word	0x08011e90
 8003888:	08011eac 	.word	0x08011eac
 800388c:	08011eb0 	.word	0x08011eb0
 8003890:	20004da0 	.word	0x20004da0
 8003894:	08011ee8 	.word	0x08011ee8
 8003898:	08011ebc 	.word	0x08011ebc
 800389c:	08011ec4 	.word	0x08011ec4
 80038a0:	08011ec8 	.word	0x08011ec8
 80038a4:	08011eec 	.word	0x08011eec
 80038a8:	08011efc 	.word	0x08011efc
 80038ac:	08011f40 	.word	0x08011f40
 80038b0:	08011f00 	.word	0x08011f00
 80038b4:	08011f20 	.word	0x08011f20
 80038b8:	08011f24 	.word	0x08011f24
 80038bc:	08011f48 	.word	0x08011f48
 80038c0:	08011f94 	.word	0x08011f94

080038c4 <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	7b5b      	ldrb	r3, [r3, #13]
 80038d0:	3b61      	subs	r3, #97	; 0x61
 80038d2:	2b17      	cmp	r3, #23
 80038d4:	f200 828a 	bhi.w	8003dec <process_user_input+0x528>
 80038d8:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <process_user_input+0x1c>)
 80038da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038de:	bf00      	nop
 80038e0:	08003b3f 	.word	0x08003b3f
 80038e4:	08003941 	.word	0x08003941
 80038e8:	08003aeb 	.word	0x08003aeb
 80038ec:	08003cbd 	.word	0x08003cbd
 80038f0:	08003ded 	.word	0x08003ded
 80038f4:	08003a25 	.word	0x08003a25
 80038f8:	08003b93 	.word	0x08003b93
 80038fc:	08003a97 	.word	0x08003a97
 8003900:	08003995 	.word	0x08003995
 8003904:	08003ded 	.word	0x08003ded
 8003908:	08003bd7 	.word	0x08003bd7
 800390c:	080039d1 	.word	0x080039d1
 8003910:	080039b3 	.word	0x080039b3
 8003914:	08003ded 	.word	0x08003ded
 8003918:	08003da9 	.word	0x08003da9
 800391c:	08003d01 	.word	0x08003d01
 8003920:	08003ded 	.word	0x08003ded
 8003924:	08003ded 	.word	0x08003ded
 8003928:	08003ded 	.word	0x08003ded
 800392c:	08003a79 	.word	0x08003a79
 8003930:	08003ded 	.word	0x08003ded
 8003934:	08003d55 	.word	0x08003d55
 8003938:	08003ded 	.word	0x08003ded
 800393c:	08003c1b 	.word	0x08003c1b
		 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3304      	adds	r3, #4
 8003944:	4618      	mov	r0, r3
 8003946:	f009 fa9d 	bl	800ce84 <atof>
 800394a:	ec53 2b10 	vmov	r2, r3, d0
 800394e:	4610      	mov	r0, r2
 8003950:	4619      	mov	r1, r3
 8003952:	f7fd f971 	bl	8000c38 <__aeabi_d2f>
 8003956:	4603      	mov	r3, r0
 8003958:	eddf 0ac1 	vldr	s1, [pc, #772]	; 8003c60 <process_user_input+0x39c>
 800395c:	ee00 3a10 	vmov	s0, r3
 8003960:	f00d fc71 	bl	8011246 <fminf>
 8003964:	eef0 7a40 	vmov.f32	s15, s0
 8003968:	eddf 0abe 	vldr	s1, [pc, #760]	; 8003c64 <process_user_input+0x3a0>
 800396c:	eeb0 0a67 	vmov.f32	s0, s15
 8003970:	f00d fc4e 	bl	8011210 <fmaxf>
 8003974:	eef0 7a40 	vmov.f32	s15, s0
 8003978:	4bbb      	ldr	r3, [pc, #748]	; (8003c68 <process_user_input+0x3a4>)
 800397a:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 800397e:	4bba      	ldr	r3, [pc, #744]	; (8003c68 <process_user_input+0x3a4>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fc fe08 	bl	8000598 <__aeabi_f2d>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	48b7      	ldr	r0, [pc, #732]	; (8003c6c <process_user_input+0x3a8>)
 800398e:	f009 ff45 	bl	800d81c <iprintf>
			 break;
 8003992:	e232      	b.n	8003dfa <process_user_input+0x536>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f009 fa76 	bl	800ce8a <atoi>
 800399e:	4603      	mov	r3, r0
 80039a0:	4ab3      	ldr	r2, [pc, #716]	; (8003c70 <process_user_input+0x3ac>)
 80039a2:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 80039a4:	4bb2      	ldr	r3, [pc, #712]	; (8003c70 <process_user_input+0x3ac>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	4619      	mov	r1, r3
 80039aa:	48b2      	ldr	r0, [pc, #712]	; (8003c74 <process_user_input+0x3b0>)
 80039ac:	f009 ff36 	bl	800d81c <iprintf>
			 break;
 80039b0:	e223      	b.n	8003dfa <process_user_input+0x536>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3304      	adds	r3, #4
 80039b6:	4618      	mov	r0, r3
 80039b8:	f009 fa67 	bl	800ce8a <atoi>
 80039bc:	4603      	mov	r3, r0
 80039be:	4aac      	ldr	r2, [pc, #688]	; (8003c70 <process_user_input+0x3ac>)
 80039c0:	6093      	str	r3, [r2, #8]
			 printf("CAN_MASTER set to %d\r\n", CAN_MASTER);
 80039c2:	4bab      	ldr	r3, [pc, #684]	; (8003c70 <process_user_input+0x3ac>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	4619      	mov	r1, r3
 80039c8:	48ab      	ldr	r0, [pc, #684]	; (8003c78 <process_user_input+0x3b4>)
 80039ca:	f009 ff27 	bl	800d81c <iprintf>
			 break;
 80039ce:	e214      	b.n	8003dfa <process_user_input+0x536>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 60.0f), 0.0f);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	4618      	mov	r0, r3
 80039d6:	f009 fa55 	bl	800ce84 <atof>
 80039da:	ec53 2b10 	vmov	r2, r3, d0
 80039de:	4610      	mov	r0, r2
 80039e0:	4619      	mov	r1, r3
 80039e2:	f7fd f929 	bl	8000c38 <__aeabi_d2f>
 80039e6:	4603      	mov	r3, r0
 80039e8:	eddf 0aa4 	vldr	s1, [pc, #656]	; 8003c7c <process_user_input+0x3b8>
 80039ec:	ee00 3a10 	vmov	s0, r3
 80039f0:	f00d fc29 	bl	8011246 <fminf>
 80039f4:	eef0 7a40 	vmov.f32	s15, s0
 80039f8:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8003cb8 <process_user_input+0x3f4>
 80039fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003a00:	f00d fc06 	bl	8011210 <fmaxf>
 8003a04:	eef0 7a40 	vmov.f32	s15, s0
 8003a08:	4b97      	ldr	r3, [pc, #604]	; (8003c68 <process_user_input+0x3a4>)
 8003a0a:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 8003a0e:	4b96      	ldr	r3, [pc, #600]	; (8003c68 <process_user_input+0x3a4>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fc fdc0 	bl	8000598 <__aeabi_f2d>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4898      	ldr	r0, [pc, #608]	; (8003c80 <process_user_input+0x3bc>)
 8003a1e:	f009 fefd 	bl	800d81c <iprintf>
			 break;
 8003a22:	e1ea      	b.n	8003dfa <process_user_input+0x536>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3304      	adds	r3, #4
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f009 fa2b 	bl	800ce84 <atof>
 8003a2e:	ec53 2b10 	vmov	r2, r3, d0
 8003a32:	4610      	mov	r0, r2
 8003a34:	4619      	mov	r1, r3
 8003a36:	f7fd f8ff 	bl	8000c38 <__aeabi_d2f>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	eddf 0a91 	vldr	s1, [pc, #580]	; 8003c84 <process_user_input+0x3c0>
 8003a40:	ee00 3a10 	vmov	s0, r3
 8003a44:	f00d fbff 	bl	8011246 <fminf>
 8003a48:	eef0 7a40 	vmov.f32	s15, s0
 8003a4c:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8003cb8 <process_user_input+0x3f4>
 8003a50:	eeb0 0a67 	vmov.f32	s0, s15
 8003a54:	f00d fbdc 	bl	8011210 <fmaxf>
 8003a58:	eef0 7a40 	vmov.f32	s15, s0
 8003a5c:	4b82      	ldr	r3, [pc, #520]	; (8003c68 <process_user_input+0x3a4>)
 8003a5e:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 8003a62:	4b81      	ldr	r3, [pc, #516]	; (8003c68 <process_user_input+0x3a4>)
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fc fd96 	bl	8000598 <__aeabi_f2d>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4885      	ldr	r0, [pc, #532]	; (8003c88 <process_user_input+0x3c4>)
 8003a72:	f009 fed3 	bl	800d81c <iprintf>
			 break;
 8003a76:	e1c0      	b.n	8003dfa <process_user_input+0x536>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f009 fa04 	bl	800ce8a <atoi>
 8003a82:	4603      	mov	r3, r0
 8003a84:	4a7a      	ldr	r2, [pc, #488]	; (8003c70 <process_user_input+0x3ac>)
 8003a86:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 8003a88:	4b79      	ldr	r3, [pc, #484]	; (8003c70 <process_user_input+0x3ac>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	487f      	ldr	r0, [pc, #508]	; (8003c8c <process_user_input+0x3c8>)
 8003a90:	f009 fec4 	bl	800d81c <iprintf>
			 break;
 8003a94:	e1b1      	b.n	8003dfa <process_user_input+0x536>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f009 f9f2 	bl	800ce84 <atof>
 8003aa0:	ec53 2b10 	vmov	r2, r3, d0
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	f7fd f8c6 	bl	8000c38 <__aeabi_d2f>
 8003aac:	4603      	mov	r3, r0
 8003aae:	eddf 0a78 	vldr	s1, [pc, #480]	; 8003c90 <process_user_input+0x3cc>
 8003ab2:	ee00 3a10 	vmov	s0, r3
 8003ab6:	f00d fbc6 	bl	8011246 <fminf>
 8003aba:	eef0 7a40 	vmov.f32	s15, s0
 8003abe:	eddf 0a7e 	vldr	s1, [pc, #504]	; 8003cb8 <process_user_input+0x3f4>
 8003ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac6:	f00d fba3 	bl	8011210 <fmaxf>
 8003aca:	eef0 7a40 	vmov.f32	s15, s0
 8003ace:	4b66      	ldr	r3, [pc, #408]	; (8003c68 <process_user_input+0x3a4>)
 8003ad0:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 8003ad4:	4b64      	ldr	r3, [pc, #400]	; (8003c68 <process_user_input+0x3a4>)
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fc fd5d 	bl	8000598 <__aeabi_f2d>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	486c      	ldr	r0, [pc, #432]	; (8003c94 <process_user_input+0x3d0>)
 8003ae4:	f009 fe9a 	bl	800d81c <iprintf>
			 break;
 8003ae8:	e187      	b.n	8003dfa <process_user_input+0x536>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3304      	adds	r3, #4
 8003aee:	4618      	mov	r0, r3
 8003af0:	f009 f9c8 	bl	800ce84 <atof>
 8003af4:	ec53 2b10 	vmov	r2, r3, d0
 8003af8:	4610      	mov	r0, r2
 8003afa:	4619      	mov	r1, r3
 8003afc:	f7fd f89c 	bl	8000c38 <__aeabi_d2f>
 8003b00:	4603      	mov	r3, r0
 8003b02:	eddf 0a65 	vldr	s1, [pc, #404]	; 8003c98 <process_user_input+0x3d4>
 8003b06:	ee00 3a10 	vmov	s0, r3
 8003b0a:	f00d fb9c 	bl	8011246 <fminf>
 8003b0e:	eef0 7a40 	vmov.f32	s15, s0
 8003b12:	eddf 0a69 	vldr	s1, [pc, #420]	; 8003cb8 <process_user_input+0x3f4>
 8003b16:	eeb0 0a67 	vmov.f32	s0, s15
 8003b1a:	f00d fb79 	bl	8011210 <fmaxf>
 8003b1e:	eef0 7a40 	vmov.f32	s15, s0
 8003b22:	4b51      	ldr	r3, [pc, #324]	; (8003c68 <process_user_input+0x3a4>)
 8003b24:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 8003b28:	4b4f      	ldr	r3, [pc, #316]	; (8003c68 <process_user_input+0x3a4>)
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fc fd33 	bl	8000598 <__aeabi_f2d>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	4859      	ldr	r0, [pc, #356]	; (8003c9c <process_user_input+0x3d8>)
 8003b38:	f009 fe70 	bl	800d81c <iprintf>
			 break;
 8003b3c:	e15d      	b.n	8003dfa <process_user_input+0x536>
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3304      	adds	r3, #4
 8003b42:	4618      	mov	r0, r3
 8003b44:	f009 f99e 	bl	800ce84 <atof>
 8003b48:	ec53 2b10 	vmov	r2, r3, d0
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	4619      	mov	r1, r3
 8003b50:	f7fd f872 	bl	8000c38 <__aeabi_d2f>
 8003b54:	4603      	mov	r3, r0
 8003b56:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8003b5a:	ee00 3a10 	vmov	s0, r3
 8003b5e:	f00d fb72 	bl	8011246 <fminf>
 8003b62:	eef0 7a40 	vmov.f32	s15, s0
 8003b66:	eddf 0a54 	vldr	s1, [pc, #336]	; 8003cb8 <process_user_input+0x3f4>
 8003b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b6e:	f00d fb4f 	bl	8011210 <fmaxf>
 8003b72:	eef0 7a40 	vmov.f32	s15, s0
 8003b76:	4b3c      	ldr	r3, [pc, #240]	; (8003c68 <process_user_input+0x3a4>)
 8003b78:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			 printf("I_CAL set to %f\r\n", I_CAL);
 8003b7c:	4b3a      	ldr	r3, [pc, #232]	; (8003c68 <process_user_input+0x3a4>)
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fc fd09 	bl	8000598 <__aeabi_f2d>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4845      	ldr	r0, [pc, #276]	; (8003ca0 <process_user_input+0x3dc>)
 8003b8c:	f009 fe46 	bl	800d81c <iprintf>
			 break;
 8003b90:	e133      	b.n	8003dfa <process_user_input+0x536>
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3304      	adds	r3, #4
 8003b96:	4618      	mov	r0, r3
 8003b98:	f009 f974 	bl	800ce84 <atof>
 8003b9c:	ec53 2b10 	vmov	r2, r3, d0
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	f7fd f848 	bl	8000c38 <__aeabi_d2f>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8003ca4 <process_user_input+0x3e0>
 8003bae:	ee00 3a10 	vmov	s0, r3
 8003bb2:	f00d fb2d 	bl	8011210 <fmaxf>
 8003bb6:	eef0 7a40 	vmov.f32	s15, s0
 8003bba:	4b2b      	ldr	r3, [pc, #172]	; (8003c68 <process_user_input+0x3a4>)
 8003bbc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			 printf("GR set to %f\r\n", GR);
 8003bc0:	4b29      	ldr	r3, [pc, #164]	; (8003c68 <process_user_input+0x3a4>)
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fc fce7 	bl	8000598 <__aeabi_f2d>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4836      	ldr	r0, [pc, #216]	; (8003ca8 <process_user_input+0x3e4>)
 8003bd0:	f009 fe24 	bl	800d81c <iprintf>
			 break;
 8003bd4:	e111      	b.n	8003dfa <process_user_input+0x536>
		 case 'k':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f009 f952 	bl	800ce84 <atof>
 8003be0:	ec53 2b10 	vmov	r2, r3, d0
 8003be4:	4610      	mov	r0, r2
 8003be6:	4619      	mov	r1, r3
 8003be8:	f7fd f826 	bl	8000c38 <__aeabi_d2f>
 8003bec:	4603      	mov	r3, r0
 8003bee:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8003cac <process_user_input+0x3e8>
 8003bf2:	ee00 3a10 	vmov	s0, r3
 8003bf6:	f00d fb0b 	bl	8011210 <fmaxf>
 8003bfa:	eef0 7a40 	vmov.f32	s15, s0
 8003bfe:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <process_user_input+0x3a4>)
 8003c00:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			 printf("KT set to %f\r\n", KT);
 8003c04:	4b18      	ldr	r3, [pc, #96]	; (8003c68 <process_user_input+0x3a4>)
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fc fcc5 	bl	8000598 <__aeabi_f2d>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4827      	ldr	r0, [pc, #156]	; (8003cb0 <process_user_input+0x3ec>)
 8003c14:	f009 fe02 	bl	800d81c <iprintf>
			 break;
 8003c18:	e0ef      	b.n	8003dfa <process_user_input+0x536>
		 case 'x':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f009 f930 	bl	800ce84 <atof>
 8003c24:	ec53 2b10 	vmov	r2, r3, d0
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	f7fd f804 	bl	8000c38 <__aeabi_d2f>
 8003c30:	4603      	mov	r3, r0
 8003c32:	eddf 0a21 	vldr	s1, [pc, #132]	; 8003cb8 <process_user_input+0x3f4>
 8003c36:	ee00 3a10 	vmov	s0, r3
 8003c3a:	f00d fae9 	bl	8011210 <fmaxf>
 8003c3e:	eef0 7a40 	vmov.f32	s15, s0
 8003c42:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <process_user_input+0x3a4>)
 8003c44:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 8003c48:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <process_user_input+0x3a4>)
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fc fca3 	bl	8000598 <__aeabi_f2d>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4817      	ldr	r0, [pc, #92]	; (8003cb4 <process_user_input+0x3f0>)
 8003c58:	f009 fde0 	bl	800d81c <iprintf>
			 break;
 8003c5c:	e0cd      	b.n	8003dfa <process_user_input+0x536>
 8003c5e:	bf00      	nop
 8003c60:	44fa0000 	.word	0x44fa0000
 8003c64:	42c80000 	.word	0x42c80000
 8003c68:	20004ca0 	.word	0x20004ca0
 8003c6c:	08011fc0 	.word	0x08011fc0
 8003c70:	20004da0 	.word	0x20004da0
 8003c74:	08011fd4 	.word	0x08011fd4
 8003c78:	08011fe8 	.word	0x08011fe8
 8003c7c:	42700000 	.word	0x42700000
 8003c80:	08012000 	.word	0x08012000
 8003c84:	42040000 	.word	0x42040000
 8003c88:	08012014 	.word	0x08012014
 8003c8c:	0801202c 	.word	0x0801202c
 8003c90:	43160000 	.word	0x43160000
 8003c94:	08012044 	.word	0x08012044
 8003c98:	42200000 	.word	0x42200000
 8003c9c:	0801205c 	.word	0x0801205c
 8003ca0:	08012074 	.word	0x08012074
 8003ca4:	3a83126f 	.word	0x3a83126f
 8003ca8:	08012088 	.word	0x08012088
 8003cac:	38d1b717 	.word	0x38d1b717
 8003cb0:	08012098 	.word	0x08012098
 8003cb4:	080120a8 	.word	0x080120a8
 8003cb8:	00000000 	.word	0x00000000
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f009 f8df 	bl	800ce84 <atof>
 8003cc6:	ec53 2b10 	vmov	r2, r3, d0
 8003cca:	4610      	mov	r0, r2
 8003ccc:	4619      	mov	r1, r3
 8003cce:	f7fc ffb3 	bl	8000c38 <__aeabi_d2f>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 8003cb8 <process_user_input+0x3f4>
 8003cd8:	ee00 3a10 	vmov	s0, r3
 8003cdc:	f00d fa98 	bl	8011210 <fmaxf>
 8003ce0:	eef0 7a40 	vmov.f32	s15, s0
 8003ce4:	4b50      	ldr	r3, [pc, #320]	; (8003e28 <process_user_input+0x564>)
 8003ce6:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 8003cea:	4b4f      	ldr	r3, [pc, #316]	; (8003e28 <process_user_input+0x564>)
 8003cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fc fc52 	bl	8000598 <__aeabi_f2d>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	484c      	ldr	r0, [pc, #304]	; (8003e2c <process_user_input+0x568>)
 8003cfa:	f009 fd8f 	bl	800d81c <iprintf>
			 break;
 8003cfe:	e07c      	b.n	8003dfa <process_user_input+0x536>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3304      	adds	r3, #4
 8003d04:	4618      	mov	r0, r3
 8003d06:	f009 f8bd 	bl	800ce84 <atof>
 8003d0a:	ec53 2b10 	vmov	r2, r3, d0
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4619      	mov	r1, r3
 8003d12:	f7fc ff91 	bl	8000c38 <__aeabi_d2f>
 8003d16:	4603      	mov	r3, r0
 8003d18:	eddf 0a45 	vldr	s1, [pc, #276]	; 8003e30 <process_user_input+0x56c>
 8003d1c:	ee00 3a10 	vmov	s0, r3
 8003d20:	f00d fa76 	bl	8011210 <fmaxf>
 8003d24:	eef0 7a40 	vmov.f32	s15, s0
 8003d28:	4b3f      	ldr	r3, [pc, #252]	; (8003e28 <process_user_input+0x564>)
 8003d2a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 P_MIN = -P_MAX;
 8003d2e:	4b3e      	ldr	r3, [pc, #248]	; (8003e28 <process_user_input+0x564>)
 8003d30:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003d34:	eef1 7a67 	vneg.f32	s15, s15
 8003d38:	4b3b      	ldr	r3, [pc, #236]	; (8003e28 <process_user_input+0x564>)
 8003d3a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("P_MAX set to %f\r\n", P_MAX);
 8003d3e:	4b3a      	ldr	r3, [pc, #232]	; (8003e28 <process_user_input+0x564>)
 8003d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fc fc28 	bl	8000598 <__aeabi_f2d>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4839      	ldr	r0, [pc, #228]	; (8003e34 <process_user_input+0x570>)
 8003d4e:	f009 fd65 	bl	800d81c <iprintf>
			 break;
 8003d52:	e052      	b.n	8003dfa <process_user_input+0x536>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3304      	adds	r3, #4
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f009 f893 	bl	800ce84 <atof>
 8003d5e:	ec53 2b10 	vmov	r2, r3, d0
 8003d62:	4610      	mov	r0, r2
 8003d64:	4619      	mov	r1, r3
 8003d66:	f7fc ff67 	bl	8000c38 <__aeabi_d2f>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	eddf 0a30 	vldr	s1, [pc, #192]	; 8003e30 <process_user_input+0x56c>
 8003d70:	ee00 3a10 	vmov	s0, r3
 8003d74:	f00d fa4c 	bl	8011210 <fmaxf>
 8003d78:	eef0 7a40 	vmov.f32	s15, s0
 8003d7c:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <process_user_input+0x564>)
 8003d7e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 V_MIN = -V_MAX;
 8003d82:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <process_user_input+0x564>)
 8003d84:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003d88:	eef1 7a67 	vneg.f32	s15, s15
 8003d8c:	4b26      	ldr	r3, [pc, #152]	; (8003e28 <process_user_input+0x564>)
 8003d8e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			 printf("V_MAX set to %f\r\n", V_MAX);
 8003d92:	4b25      	ldr	r3, [pc, #148]	; (8003e28 <process_user_input+0x564>)
 8003d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fc fbfe 	bl	8000598 <__aeabi_f2d>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4825      	ldr	r0, [pc, #148]	; (8003e38 <process_user_input+0x574>)
 8003da2:	f009 fd3b 	bl	800d81c <iprintf>
			 break;
 8003da6:	e028      	b.n	8003dfa <process_user_input+0x536>
		 case 'o':
			 T_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3304      	adds	r3, #4
 8003dac:	4618      	mov	r0, r3
 8003dae:	f009 f869 	bl	800ce84 <atof>
 8003db2:	ec53 2b10 	vmov	r2, r3, d0
 8003db6:	4610      	mov	r0, r2
 8003db8:	4619      	mov	r1, r3
 8003dba:	f7fc ff3d 	bl	8000c38 <__aeabi_d2f>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8003e30 <process_user_input+0x56c>
 8003dc4:	ee00 3a10 	vmov	s0, r3
 8003dc8:	f00d fa22 	bl	8011210 <fmaxf>
 8003dcc:	eef0 7a40 	vmov.f32	s15, s0
 8003dd0:	4b15      	ldr	r3, [pc, #84]	; (8003e28 <process_user_input+0x564>)
 8003dd2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("T_MAX set to %f\r\n", T_MAX);
 8003dd6:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <process_user_input+0x564>)
 8003dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fc fbdc 	bl	8000598 <__aeabi_f2d>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4815      	ldr	r0, [pc, #84]	; (8003e3c <process_user_input+0x578>)
 8003de6:	f009 fd19 	bl	800d81c <iprintf>
			 break;
 8003dea:	e006      	b.n	8003dfa <process_user_input+0x536>
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3304      	adds	r3, #4
 8003df0:	4619      	mov	r1, r3
 8003df2:	4813      	ldr	r0, [pc, #76]	; (8003e40 <process_user_input+0x57c>)
 8003df4:	f009 fd12 	bl	800d81c <iprintf>
			 break;
 8003df8:	bf00      	nop

		 }

	 /* Write new settings to flash */
	 store_eeprom_regs();
 8003dfa:	f001 feb3 	bl	8005b64 <store_eeprom_regs>
	 load_eeprom_regs();
 8003dfe:	f001 febf 	bl	8005b80 <load_eeprom_regs>

	 enter_setup_state();
 8003e02:	f7ff fbeb 	bl	80035dc <enter_setup_state>

	 fsmstate->bytecount = 0;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	731a      	strb	r2, [r3, #12]
	 fsmstate->cmd_id = 0;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	735a      	strb	r2, [r3, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3304      	adds	r3, #4
 8003e16:	2208      	movs	r2, #8
 8003e18:	2100      	movs	r1, #0
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f009 f88c 	bl	800cf38 <memset>
 }
 8003e20:	bf00      	nop
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	20004ca0 	.word	0x20004ca0
 8003e2c:	080120bc 	.word	0x080120bc
 8003e30:	00000000 	.word	0x00000000
 8003e34:	080120d0 	.word	0x080120d0
 8003e38:	080120e4 	.word	0x080120e4
 8003e3c:	080120f8 	.word	0x080120f8
 8003e40:	0801210c 	.word	0x0801210c

08003e44 <enable_gd>:
 */
#include "gatedrive.h"
#include <stdio.h>


void enable_gd(ControllerStruct *controller){
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	//Restart PWM
	controller->isEnabled = 1;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
    HAL_TIM_PWM_Start(&TIM_PWM, TIM_CHANNEL_1);
 8003e54:	2100      	movs	r1, #0
 8003e56:	480d      	ldr	r0, [pc, #52]	; (8003e8c <enable_gd+0x48>)
 8003e58:	f005 ffe8 	bl	8009e2c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&TIM_PWM, TIM_CHANNEL_2);
 8003e5c:	2104      	movs	r1, #4
 8003e5e:	480b      	ldr	r0, [pc, #44]	; (8003e8c <enable_gd+0x48>)
 8003e60:	f005 ffe4 	bl	8009e2c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&TIM_PWM, TIM_CHANNEL_3);
 8003e64:	2108      	movs	r1, #8
 8003e66:	4809      	ldr	r0, [pc, #36]	; (8003e8c <enable_gd+0x48>)
 8003e68:	f005 ffe0 	bl	8009e2c <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&TIM_PWM, TIM_CHANNEL_1);
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4807      	ldr	r0, [pc, #28]	; (8003e8c <enable_gd+0x48>)
 8003e70:	f007 f8dc 	bl	800b02c <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&TIM_PWM, TIM_CHANNEL_2);
 8003e74:	2104      	movs	r1, #4
 8003e76:	4805      	ldr	r0, [pc, #20]	; (8003e8c <enable_gd+0x48>)
 8003e78:	f007 f8d8 	bl	800b02c <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&TIM_PWM, TIM_CHANNEL_3);
 8003e7c:	2108      	movs	r1, #8
 8003e7e:	4803      	ldr	r0, [pc, #12]	; (8003e8c <enable_gd+0x48>)
 8003e80:	f007 f8d4 	bl	800b02c <HAL_TIMEx_PWMN_Start>
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20005058 	.word	0x20005058

08003e90 <disable_gd>:
void disable_gd(ControllerStruct *controller){
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
	//Drive all gates low
	controller->isEnabled = 0;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.0f);
 8003ea0:	4b30      	ldr	r3, [pc, #192]	; (8003f64 <disable_gd+0xd4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea6:	ee07 3a90 	vmov	s15, r3
 8003eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eae:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003f68 <disable_gd+0xd8>
 8003eb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003eb6:	4b2b      	ldr	r3, [pc, #172]	; (8003f64 <disable_gd+0xd4>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ebe:	ee17 2a90 	vmov	r2, s15
 8003ec2:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.0f);
 8003ec4:	4b27      	ldr	r3, [pc, #156]	; (8003f64 <disable_gd+0xd4>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	ee07 3a90 	vmov	s15, r3
 8003ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ed2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003f68 <disable_gd+0xd8>
 8003ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003eda:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <disable_gd+0xd4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ee2:	ee17 2a90 	vmov	r2, s15
 8003ee6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.0f);
 8003ee8:	4b1e      	ldr	r3, [pc, #120]	; (8003f64 <disable_gd+0xd4>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	ee07 3a90 	vmov	s15, r3
 8003ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003f68 <disable_gd+0xd8>
 8003efa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003efe:	4b19      	ldr	r3, [pc, #100]	; (8003f64 <disable_gd+0xd4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f06:	ee17 2a90 	vmov	r2, s15
 8003f0a:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(DRV_HA, GPIO_PIN_RESET );
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f16:	f004 fd73 	bl	8008a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_HB, GPIO_PIN_RESET );
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f24:	f004 fd6c 	bl	8008a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_HC, GPIO_PIN_RESET );
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f32:	f004 fd65 	bl	8008a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_LA, GPIO_PIN_RESET );
 8003f36:	2200      	movs	r2, #0
 8003f38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f3c:	480b      	ldr	r0, [pc, #44]	; (8003f6c <disable_gd+0xdc>)
 8003f3e:	f004 fd5f 	bl	8008a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_LB, GPIO_PIN_RESET );
 8003f42:	2200      	movs	r2, #0
 8003f44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f4c:	f004 fd58 	bl	8008a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_LC, GPIO_PIN_RESET );
 8003f50:	2200      	movs	r2, #0
 8003f52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f56:	4806      	ldr	r0, [pc, #24]	; (8003f70 <disable_gd+0xe0>)
 8003f58:	f004 fd52 	bl	8008a00 <HAL_GPIO_WritePin>

}
 8003f5c:	bf00      	nop
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	20005058 	.word	0x20005058
 8003f68:	00000000 	.word	0x00000000
 8003f6c:	48000800 	.word	0x48000800
 8003f70:	48000400 	.word	0x48000400

08003f74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08a      	sub	sp, #40	; 0x28
 8003f78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f7a:	f107 0314 	add.w	r3, r7, #20
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	605a      	str	r2, [r3, #4]
 8003f84:	609a      	str	r2, [r3, #8]
 8003f86:	60da      	str	r2, [r3, #12]
 8003f88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f8a:	4b40      	ldr	r3, [pc, #256]	; (800408c <MX_GPIO_Init+0x118>)
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8e:	4a3f      	ldr	r2, [pc, #252]	; (800408c <MX_GPIO_Init+0x118>)
 8003f90:	f043 0304 	orr.w	r3, r3, #4
 8003f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f96:	4b3d      	ldr	r3, [pc, #244]	; (800408c <MX_GPIO_Init+0x118>)
 8003f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003fa2:	4b3a      	ldr	r3, [pc, #232]	; (800408c <MX_GPIO_Init+0x118>)
 8003fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa6:	4a39      	ldr	r2, [pc, #228]	; (800408c <MX_GPIO_Init+0x118>)
 8003fa8:	f043 0320 	orr.w	r3, r3, #32
 8003fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fae:	4b37      	ldr	r3, [pc, #220]	; (800408c <MX_GPIO_Init+0x118>)
 8003fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fba:	4b34      	ldr	r3, [pc, #208]	; (800408c <MX_GPIO_Init+0x118>)
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fbe:	4a33      	ldr	r2, [pc, #204]	; (800408c <MX_GPIO_Init+0x118>)
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fc6:	4b31      	ldr	r3, [pc, #196]	; (800408c <MX_GPIO_Init+0x118>)
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	60bb      	str	r3, [r7, #8]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fd2:	4b2e      	ldr	r3, [pc, #184]	; (800408c <MX_GPIO_Init+0x118>)
 8003fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd6:	4a2d      	ldr	r2, [pc, #180]	; (800408c <MX_GPIO_Init+0x118>)
 8003fd8:	f043 0302 	orr.w	r3, r3, #2
 8003fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fde:	4b2b      	ldr	r3, [pc, #172]	; (800408c <MX_GPIO_Init+0x118>)
 8003fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	607b      	str	r3, [r7, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_11, GPIO_PIN_RESET);
 8003fea:	2200      	movs	r2, #0
 8003fec:	f644 0140 	movw	r1, #18496	; 0x4840
 8003ff0:	4827      	ldr	r0, [pc, #156]	; (8004090 <MX_GPIO_Init+0x11c>)
 8003ff2:	f004 fd05 	bl	8008a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004000:	f004 fcfe 	bl	8008a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8004004:	2200      	movs	r2, #0
 8004006:	21c0      	movs	r1, #192	; 0xc0
 8004008:	4822      	ldr	r0, [pc, #136]	; (8004094 <MX_GPIO_Init+0x120>)
 800400a:	f004 fcf9 	bl	8008a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC6 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_11;
 800400e:	f644 0340 	movw	r3, #18496	; 0x4840
 8004012:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004014:	2301      	movs	r3, #1
 8004016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004018:	2300      	movs	r3, #0
 800401a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800401c:	2300      	movs	r3, #0
 800401e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004020:	f107 0314 	add.w	r3, r7, #20
 8004024:	4619      	mov	r1, r3
 8004026:	481a      	ldr	r0, [pc, #104]	; (8004090 <MX_GPIO_Init+0x11c>)
 8004028:	f004 fb50 	bl	80086cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800402c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004032:	2301      	movs	r3, #1
 8004034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004036:	2300      	movs	r3, #0
 8004038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800403a:	2300      	movs	r3, #0
 800403c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800403e:	f107 0314 	add.w	r3, r7, #20
 8004042:	4619      	mov	r1, r3
 8004044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004048:	f004 fb40 	bl	80086cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800404c:	23c0      	movs	r3, #192	; 0xc0
 800404e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004050:	2301      	movs	r3, #1
 8004052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004054:	2300      	movs	r3, #0
 8004056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004058:	2300      	movs	r3, #0
 800405a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800405c:	f107 0314 	add.w	r3, r7, #20
 8004060:	4619      	mov	r1, r3
 8004062:	480c      	ldr	r0, [pc, #48]	; (8004094 <MX_GPIO_Init+0x120>)
 8004064:	f004 fb32 	bl	80086cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004068:	f44f 7380 	mov.w	r3, #256	; 0x100
 800406c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800406e:	2300      	movs	r3, #0
 8004070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004072:	2300      	movs	r3, #0
 8004074:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004076:	f107 0314 	add.w	r3, r7, #20
 800407a:	4619      	mov	r1, r3
 800407c:	4805      	ldr	r0, [pc, #20]	; (8004094 <MX_GPIO_Init+0x120>)
 800407e:	f004 fb25 	bl	80086cc <HAL_GPIO_Init>

}
 8004082:	bf00      	nop
 8004084:	3728      	adds	r7, #40	; 0x28
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40021000 	.word	0x40021000
 8004090:	48000800 	.word	0x48000800
 8004094:	48000400 	.word	0x48000400

08004098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	6039      	str	r1, [r7, #0]
 80040a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	db0a      	blt.n	80040c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	490c      	ldr	r1, [pc, #48]	; (80040e4 <__NVIC_SetPriority+0x4c>)
 80040b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b6:	0112      	lsls	r2, r2, #4
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	440b      	add	r3, r1
 80040bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040c0:	e00a      	b.n	80040d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	4908      	ldr	r1, [pc, #32]	; (80040e8 <__NVIC_SetPriority+0x50>)
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	3b04      	subs	r3, #4
 80040d0:	0112      	lsls	r2, r2, #4
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	440b      	add	r3, r1
 80040d6:	761a      	strb	r2, [r3, #24]
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	e000e100 	.word	0xe000e100
 80040e8:	e000ed00 	.word	0xe000ed00

080040ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	ed2d 8b02 	vpush	{d8}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80040f6:	f001 fd7a 	bl	8005bee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80040fa:	f000 fb29 	bl	8004750 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_Delay(100);
 80040fe:	2064      	movs	r0, #100	; 0x64
 8004100:	f001 fde6 	bl	8005cd0 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004104:	f7ff ff36 	bl	8003f74 <MX_GPIO_Init>
  MX_DMA_Init();
 8004108:	f7fd fd64 	bl	8001bd4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800410c:	f001 fc6e 	bl	80059ec <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8004110:	f001 fb02 	bl	8005718 <MX_TIM1_Init>
  MX_OPAMP1_Init();
 8004114:	f000 fd2a 	bl	8004b6c <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8004118:	f000 fd56 	bl	8004bc8 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 800411c:	f000 fd82 	bl	8004c24 <MX_OPAMP3_Init>
  MX_ADC1_Init();
 8004120:	f7fc ff92 	bl	8001048 <MX_ADC1_Init>
  MX_ADC2_Init();
 8004124:	f7fd f828 	bl	8001178 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8004128:	f7fd fefc 	bl	8001f24 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
	load_eeprom_regs();
 800412c:	f001 fd28 	bl	8005b80 <load_eeprom_regs>
	/* Sanitize configs in case flash is empty*/
	if(E_ZERO==-1){E_ZERO = 0;}
 8004130:	4bae      	ldr	r3, [pc, #696]	; (80043ec <main+0x300>)
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004138:	d102      	bne.n	8004140 <main+0x54>
 800413a:	4bac      	ldr	r3, [pc, #688]	; (80043ec <main+0x300>)
 800413c:	2200      	movs	r2, #0
 800413e:	611a      	str	r2, [r3, #16]
	if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8004140:	4bab      	ldr	r3, [pc, #684]	; (80043f0 <main+0x304>)
 8004142:	edd3 7a02 	vldr	s15, [r3, #8]
 8004146:	eef4 7a67 	vcmp.f32	s15, s15
 800414a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800414e:	d609      	bvs.n	8004164 <main+0x78>
 8004150:	4ba7      	ldr	r3, [pc, #668]	; (80043f0 <main+0x304>)
 8004152:	edd3 7a02 	vldr	s15, [r3, #8]
 8004156:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800415a:	eef4 7a47 	vcmp.f32	s15, s14
 800415e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004162:	d102      	bne.n	800416a <main+0x7e>
 8004164:	4ba2      	ldr	r3, [pc, #648]	; (80043f0 <main+0x304>)
 8004166:	4aa3      	ldr	r2, [pc, #652]	; (80043f4 <main+0x308>)
 8004168:	609a      	str	r2, [r3, #8]
	if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 800416a:	4ba1      	ldr	r3, [pc, #644]	; (80043f0 <main+0x304>)
 800416c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004170:	eef4 7a67 	vcmp.f32	s15, s15
 8004174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004178:	d609      	bvs.n	800418e <main+0xa2>
 800417a:	4b9d      	ldr	r3, [pc, #628]	; (80043f0 <main+0x304>)
 800417c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004180:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004184:	eef4 7a47 	vcmp.f32	s15, s14
 8004188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800418c:	d102      	bne.n	8004194 <main+0xa8>
 800418e:	4b98      	ldr	r3, [pc, #608]	; (80043f0 <main+0x304>)
 8004190:	4a99      	ldr	r2, [pc, #612]	; (80043f8 <main+0x30c>)
 8004192:	60da      	str	r2, [r3, #12]
	if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8004194:	4b96      	ldr	r3, [pc, #600]	; (80043f0 <main+0x304>)
 8004196:	edd3 7a06 	vldr	s15, [r3, #24]
 800419a:	eef4 7a67 	vcmp.f32	s15, s15
 800419e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a2:	d609      	bvs.n	80041b8 <main+0xcc>
 80041a4:	4b92      	ldr	r3, [pc, #584]	; (80043f0 <main+0x304>)
 80041a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80041aa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80041ae:	eef4 7a47 	vcmp.f32	s15, s14
 80041b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b6:	d103      	bne.n	80041c0 <main+0xd4>
 80041b8:	4b8d      	ldr	r3, [pc, #564]	; (80043f0 <main+0x304>)
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	619a      	str	r2, [r3, #24]
	if(CAN_ID==-1){CAN_ID = 1;}
 80041c0:	4b8a      	ldr	r3, [pc, #552]	; (80043ec <main+0x300>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d102      	bne.n	80041d0 <main+0xe4>
 80041ca:	4b88      	ldr	r3, [pc, #544]	; (80043ec <main+0x300>)
 80041cc:	2201      	movs	r2, #1
 80041ce:	605a      	str	r2, [r3, #4]
	if(CAN_MASTER==-1){CAN_MASTER = 0;}
 80041d0:	4b86      	ldr	r3, [pc, #536]	; (80043ec <main+0x300>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d8:	d102      	bne.n	80041e0 <main+0xf4>
 80041da:	4b84      	ldr	r3, [pc, #528]	; (80043ec <main+0x300>)
 80041dc:	2200      	movs	r2, #0
 80041de:	609a      	str	r2, [r3, #8]
	if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 0;}
 80041e0:	4b82      	ldr	r3, [pc, #520]	; (80043ec <main+0x300>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e8:	d102      	bne.n	80041f0 <main+0x104>
 80041ea:	4b80      	ldr	r3, [pc, #512]	; (80043ec <main+0x300>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	60da      	str	r2, [r3, #12]
	if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 80041f0:	4b7f      	ldr	r3, [pc, #508]	; (80043f0 <main+0x304>)
 80041f2:	edd3 7a07 	vldr	s15, [r3, #28]
 80041f6:	eef4 7a67 	vcmp.f32	s15, s15
 80041fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fe:	d609      	bvs.n	8004214 <main+0x128>
 8004200:	4b7b      	ldr	r3, [pc, #492]	; (80043f0 <main+0x304>)
 8004202:	edd3 7a07 	vldr	s15, [r3, #28]
 8004206:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800420a:	eef4 7a47 	vcmp.f32	s15, s14
 800420e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004212:	d103      	bne.n	800421c <main+0x130>
 8004214:	4b76      	ldr	r3, [pc, #472]	; (80043f0 <main+0x304>)
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	61da      	str	r2, [r3, #28]
	if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 800421c:	4b74      	ldr	r3, [pc, #464]	; (80043f0 <main+0x304>)
 800421e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004222:	eef4 7a67 	vcmp.f32	s15, s15
 8004226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800422a:	d609      	bvs.n	8004240 <main+0x154>
 800422c:	4b70      	ldr	r3, [pc, #448]	; (80043f0 <main+0x304>)
 800422e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004232:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004236:	eef4 7a47 	vcmp.f32	s15, s14
 800423a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423e:	d102      	bne.n	8004246 <main+0x15a>
 8004240:	4b6b      	ldr	r3, [pc, #428]	; (80043f0 <main+0x304>)
 8004242:	4a6e      	ldr	r2, [pc, #440]	; (80043fc <main+0x310>)
 8004244:	621a      	str	r2, [r3, #32]
	if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8004246:	4b6a      	ldr	r3, [pc, #424]	; (80043f0 <main+0x304>)
 8004248:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800424c:	eef4 7a67 	vcmp.f32	s15, s15
 8004250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004254:	d609      	bvs.n	800426a <main+0x17e>
 8004256:	4b66      	ldr	r3, [pc, #408]	; (80043f0 <main+0x304>)
 8004258:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800425c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004260:	eef4 7a47 	vcmp.f32	s15, s14
 8004264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004268:	d102      	bne.n	8004270 <main+0x184>
 800426a:	4b61      	ldr	r3, [pc, #388]	; (80043f0 <main+0x304>)
 800426c:	4a64      	ldr	r2, [pc, #400]	; (8004400 <main+0x314>)
 800426e:	625a      	str	r2, [r3, #36]	; 0x24
	if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8004270:	4b5f      	ldr	r3, [pc, #380]	; (80043f0 <main+0x304>)
 8004272:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004276:	eef4 7a67 	vcmp.f32	s15, s15
 800427a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800427e:	d609      	bvs.n	8004294 <main+0x1a8>
 8004280:	4b5b      	ldr	r3, [pc, #364]	; (80043f0 <main+0x304>)
 8004282:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004286:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800428a:	eef4 7a47 	vcmp.f32	s15, s14
 800428e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004292:	d102      	bne.n	800429a <main+0x1ae>
 8004294:	4b56      	ldr	r3, [pc, #344]	; (80043f0 <main+0x304>)
 8004296:	4a5b      	ldr	r2, [pc, #364]	; (8004404 <main+0x318>)
 8004298:	641a      	str	r2, [r3, #64]	; 0x40
	if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 800429a:	4b55      	ldr	r3, [pc, #340]	; (80043f0 <main+0x304>)
 800429c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80042a0:	eef4 7a67 	vcmp.f32	s15, s15
 80042a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a8:	d609      	bvs.n	80042be <main+0x1d2>
 80042aa:	4b51      	ldr	r3, [pc, #324]	; (80043f0 <main+0x304>)
 80042ac:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80042b0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80042b4:	eef4 7a47 	vcmp.f32	s15, s14
 80042b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042bc:	d102      	bne.n	80042c4 <main+0x1d8>
 80042be:	4b4c      	ldr	r3, [pc, #304]	; (80043f0 <main+0x304>)
 80042c0:	4a51      	ldr	r2, [pc, #324]	; (8004408 <main+0x31c>)
 80042c2:	629a      	str	r2, [r3, #40]	; 0x28
	if(isnan(GR) || GR==-1){GR = 1.0f;}
 80042c4:	4b4a      	ldr	r3, [pc, #296]	; (80043f0 <main+0x304>)
 80042c6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80042ca:	eef4 7a67 	vcmp.f32	s15, s15
 80042ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d2:	d609      	bvs.n	80042e8 <main+0x1fc>
 80042d4:	4b46      	ldr	r3, [pc, #280]	; (80043f0 <main+0x304>)
 80042d6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80042da:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80042de:	eef4 7a47 	vcmp.f32	s15, s14
 80042e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e6:	d103      	bne.n	80042f0 <main+0x204>
 80042e8:	4b41      	ldr	r3, [pc, #260]	; (80043f0 <main+0x304>)
 80042ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80042ee:	63da      	str	r2, [r3, #60]	; 0x3c
	if(isnan(KT) || KT==-1){KT = 1.0f;}
 80042f0:	4b3f      	ldr	r3, [pc, #252]	; (80043f0 <main+0x304>)
 80042f2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80042f6:	eef4 7a67 	vcmp.f32	s15, s15
 80042fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fe:	d609      	bvs.n	8004314 <main+0x228>
 8004300:	4b3b      	ldr	r3, [pc, #236]	; (80043f0 <main+0x304>)
 8004302:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004306:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800430a:	eef4 7a47 	vcmp.f32	s15, s14
 800430e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004312:	d103      	bne.n	800431c <main+0x230>
 8004314:	4b36      	ldr	r3, [pc, #216]	; (80043f0 <main+0x304>)
 8004316:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800431a:	631a      	str	r2, [r3, #48]	; 0x30
	if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 800431c:	4b34      	ldr	r3, [pc, #208]	; (80043f0 <main+0x304>)
 800431e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004322:	eef4 7a67 	vcmp.f32	s15, s15
 8004326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800432a:	d609      	bvs.n	8004340 <main+0x254>
 800432c:	4b30      	ldr	r3, [pc, #192]	; (80043f0 <main+0x304>)
 800432e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004332:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004336:	eef4 7a47 	vcmp.f32	s15, s14
 800433a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433e:	d102      	bne.n	8004346 <main+0x25a>
 8004340:	4b2b      	ldr	r3, [pc, #172]	; (80043f0 <main+0x304>)
 8004342:	4a32      	ldr	r2, [pc, #200]	; (800440c <main+0x320>)
 8004344:	655a      	str	r2, [r3, #84]	; 0x54
	if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 8004346:	4b2a      	ldr	r3, [pc, #168]	; (80043f0 <main+0x304>)
 8004348:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800434c:	eef4 7a67 	vcmp.f32	s15, s15
 8004350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004354:	d609      	bvs.n	800436a <main+0x27e>
 8004356:	4b26      	ldr	r3, [pc, #152]	; (80043f0 <main+0x304>)
 8004358:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800435c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004360:	eef4 7a47 	vcmp.f32	s15, s14
 8004364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004368:	d102      	bne.n	8004370 <main+0x284>
 800436a:	4b21      	ldr	r3, [pc, #132]	; (80043f0 <main+0x304>)
 800436c:	4a25      	ldr	r2, [pc, #148]	; (8004404 <main+0x318>)
 800436e:	659a      	str	r2, [r3, #88]	; 0x58
	if(isnan(P_MAX)){P_MAX = 12.5f;}
 8004370:	4b1f      	ldr	r3, [pc, #124]	; (80043f0 <main+0x304>)
 8004372:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004376:	eef4 7a67 	vcmp.f32	s15, s15
 800437a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437e:	d702      	bvc.n	8004386 <main+0x29a>
 8004380:	4b1b      	ldr	r3, [pc, #108]	; (80043f0 <main+0x304>)
 8004382:	4a23      	ldr	r2, [pc, #140]	; (8004410 <main+0x324>)
 8004384:	649a      	str	r2, [r3, #72]	; 0x48
	if(isnan(P_MIN)){P_MIN = -12.5f;}
 8004386:	4b1a      	ldr	r3, [pc, #104]	; (80043f0 <main+0x304>)
 8004388:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800438c:	eef4 7a67 	vcmp.f32	s15, s15
 8004390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004394:	d702      	bvc.n	800439c <main+0x2b0>
 8004396:	4b16      	ldr	r3, [pc, #88]	; (80043f0 <main+0x304>)
 8004398:	4a1e      	ldr	r2, [pc, #120]	; (8004414 <main+0x328>)
 800439a:	645a      	str	r2, [r3, #68]	; 0x44
	if(isnan(V_MAX)){V_MAX = 200.0f;}
 800439c:	4b14      	ldr	r3, [pc, #80]	; (80043f0 <main+0x304>)
 800439e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80043a2:	eef4 7a67 	vcmp.f32	s15, s15
 80043a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043aa:	d702      	bvc.n	80043b2 <main+0x2c6>
 80043ac:	4b10      	ldr	r3, [pc, #64]	; (80043f0 <main+0x304>)
 80043ae:	4a1a      	ldr	r2, [pc, #104]	; (8004418 <main+0x32c>)
 80043b0:	651a      	str	r2, [r3, #80]	; 0x50
	if(isnan(V_MIN)){V_MIN = -200.0f;}
 80043b2:	4b0f      	ldr	r3, [pc, #60]	; (80043f0 <main+0x304>)
 80043b4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80043b8:	eef4 7a67 	vcmp.f32	s15, s15
 80043bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c0:	d702      	bvc.n	80043c8 <main+0x2dc>
 80043c2:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <main+0x304>)
 80043c4:	4a15      	ldr	r2, [pc, #84]	; (800441c <main+0x330>)
 80043c6:	64da      	str	r2, [r3, #76]	; 0x4c
	if(isnan(MECH_ZERO)){MECH_ZERO = 0.0f;}
 80043c8:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <main+0x304>)
 80043ca:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80043ce:	eef4 7a67 	vcmp.f32	s15, s15
 80043d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d6:	d703      	bvc.n	80043e0 <main+0x2f4>
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <main+0x304>)
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	65da      	str	r2, [r3, #92]	; 0x5c
	if(isnan(T_MAX)){T_MAX = 10.0f;}
 80043e0:	4b03      	ldr	r3, [pc, #12]	; (80043f0 <main+0x304>)
 80043e2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80043e6:	eef4 7a67 	vcmp.f32	s15, s15
 80043ea:	e019      	b.n	8004420 <main+0x334>
 80043ec:	20004da0 	.word	0x20004da0
 80043f0:	20004ca0 	.word	0x20004ca0
 80043f4:	447a0000 	.word	0x447a0000
 80043f8:	42200000 	.word	0x42200000
 80043fc:	42fa0000 	.word	0x42fa0000
 8004400:	41600000 	.word	0x41600000
 8004404:	40a00000 	.word	0x40a00000
 8004408:	41a80000 	.word	0x41a80000
 800440c:	43fa0000 	.word	0x43fa0000
 8004410:	41480000 	.word	0x41480000
 8004414:	c1480000 	.word	0xc1480000
 8004418:	43480000 	.word	0x43480000
 800441c:	c3480000 	.word	0xc3480000
 8004420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004424:	d702      	bvc.n	800442c <main+0x340>
 8004426:	4ba3      	ldr	r3, [pc, #652]	; (80046b4 <main+0x5c8>)
 8004428:	4aa3      	ldr	r2, [pc, #652]	; (80046b8 <main+0x5cc>)
 800442a:	661a      	str	r2, [r3, #96]	; 0x60

	printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	4ba2      	ldr	r3, [pc, #648]	; (80046bc <main+0x5d0>)
 8004432:	48a3      	ldr	r0, [pc, #652]	; (80046c0 <main+0x5d4>)
 8004434:	f009 f9f2 	bl	800d81c <iprintf>
	/* Controller Setup */
	init_controller_params(&controller);
 8004438:	48a2      	ldr	r0, [pc, #648]	; (80046c4 <main+0x5d8>)
 800443a:	f7fe facd 	bl	80029d8 <init_controller_params>

	/* calibration "encoder" zeroing */
	memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 800443e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004442:	2100      	movs	r1, #0
 8004444:	48a0      	ldr	r0, [pc, #640]	; (80046c8 <main+0x5dc>)
 8004446:	f008 fd77 	bl	800cf38 <memset>

	/* commutation encoder setup */
	comm_encoder.e_zero = E_ZERO;
 800444a:	4ba0      	ldr	r3, [pc, #640]	; (80046cc <main+0x5e0>)
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	4aa0      	ldr	r2, [pc, #640]	; (80046d0 <main+0x5e4>)
 8004450:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
	comm_encoder.ppairs = PPAIRS;
 8004454:	4b97      	ldr	r3, [pc, #604]	; (80046b4 <main+0x5c8>)
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	4a9d      	ldr	r2, [pc, #628]	; (80046d0 <main+0x5e4>)
 800445a:	6693      	str	r3, [r2, #104]	; 0x68
	comm_encoder.mech_zero = MECH_ZERO;
 800445c:	4b95      	ldr	r3, [pc, #596]	; (80046b4 <main+0x5c8>)
 800445e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004460:	4a9b      	ldr	r2, [pc, #620]	; (80046d0 <main+0x5e4>)
 8004462:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc
	ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 8004466:	2164      	movs	r1, #100	; 0x64
 8004468:	4899      	ldr	r0, [pc, #612]	; (80046d0 <main+0x5e4>)
 800446a:	f000 fc7f 	bl	8004d6c <ps_warmup>
	ps_sample(&comm_encoder, DT);
 800446e:	ed9f 0a99 	vldr	s0, [pc, #612]	; 80046d4 <main+0x5e8>
 8004472:	4897      	ldr	r0, [pc, #604]	; (80046d0 <main+0x5e4>)
 8004474:	f000 fcce 	bl	8004e14 <ps_sample>
	ps_sample(&comm_encoder, DT);
 8004478:	ed9f 0a96 	vldr	s0, [pc, #600]	; 80046d4 <main+0x5e8>
 800447c:	4894      	ldr	r0, [pc, #592]	; (80046d0 <main+0x5e4>)
 800447e:	f000 fcc9 	bl	8004e14 <ps_sample>
	ps_sample(&comm_encoder, DT);
 8004482:	ed9f 0a94 	vldr	s0, [pc, #592]	; 80046d4 <main+0x5e8>
 8004486:	4892      	ldr	r0, [pc, #584]	; (80046d0 <main+0x5e4>)
 8004488:	f000 fcc4 	bl	8004e14 <ps_sample>
	if(comm_encoder.angle_multiturn[0]>PI_F){
 800448c:	4b90      	ldr	r3, [pc, #576]	; (80046d0 <main+0x5e4>)
 800448e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004492:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80046d8 <main+0x5ec>
 8004496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800449a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800449e:	dd14      	ble.n	80044ca <main+0x3de>
	comm_encoder.angle_multiturn[0]-=TWO_PI_F;
 80044a0:	4b8b      	ldr	r3, [pc, #556]	; (80046d0 <main+0x5e4>)
 80044a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80044a6:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80046dc <main+0x5f0>
 80044aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044ae:	4b88      	ldr	r3, [pc, #544]	; (80046d0 <main+0x5e4>)
 80044b0:	edc3 7a03 	vstr	s15, [r3, #12]
	comm_encoder.turns--;
 80044b4:	4b86      	ldr	r3, [pc, #536]	; (80046d0 <main+0x5e4>)
 80044b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044ba:	3b01      	subs	r3, #1
 80044bc:	4a84      	ldr	r2, [pc, #528]	; (80046d0 <main+0x5e4>)
 80044be:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	printf("Added\r\n");
 80044c2:	4887      	ldr	r0, [pc, #540]	; (80046e0 <main+0x5f4>)
 80044c4:	f009 fa30 	bl	800d928 <puts>
 80044c8:	e01d      	b.n	8004506 <main+0x41a>
	}
	else if(comm_encoder.angle_multiturn[0]<-PI_F){
 80044ca:	4b81      	ldr	r3, [pc, #516]	; (80046d0 <main+0x5e4>)
 80044cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80044d0:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80046e4 <main+0x5f8>
 80044d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044dc:	d513      	bpl.n	8004506 <main+0x41a>
	comm_encoder.angle_multiturn[0] += TWO_PI_F;
 80044de:	4b7c      	ldr	r3, [pc, #496]	; (80046d0 <main+0x5e4>)
 80044e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80044e4:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80046dc <main+0x5f0>
 80044e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044ec:	4b78      	ldr	r3, [pc, #480]	; (80046d0 <main+0x5e4>)
 80044ee:	edc3 7a03 	vstr	s15, [r3, #12]
	comm_encoder.turns++;
 80044f2:	4b77      	ldr	r3, [pc, #476]	; (80046d0 <main+0x5e4>)
 80044f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044f8:	3301      	adds	r3, #1
 80044fa:	4a75      	ldr	r2, [pc, #468]	; (80046d0 <main+0x5e4>)
 80044fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	printf("Subtracted\r\n");
 8004500:	4879      	ldr	r0, [pc, #484]	; (80046e8 <main+0x5fc>)
 8004502:	f009 fa11 	bl	800d928 <puts>
	}


	if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 8004506:	4b72      	ldr	r3, [pc, #456]	; (80046d0 <main+0x5e4>)
 8004508:	4a70      	ldr	r2, [pc, #448]	; (80046cc <main+0x5e0>)
 800450a:	33d8      	adds	r3, #216	; 0xd8
 800450c:	f102 0118 	add.w	r1, r2, #24
 8004510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004514:	4618      	mov	r0, r3
 8004516:	f008 fce7 	bl	800cee8 <memcpy>
	else{memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));}

	/* Turn on ADCs */
	HAL_OPAMP_Start(&hopamp1);
 800451a:	4874      	ldr	r0, [pc, #464]	; (80046ec <main+0x600>)
 800451c:	f004 fb58 	bl	8008bd0 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp2);
 8004520:	4873      	ldr	r0, [pc, #460]	; (80046f0 <main+0x604>)
 8004522:	f004 fb55 	bl	8008bd0 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 8004526:	4873      	ldr	r0, [pc, #460]	; (80046f4 <main+0x608>)
 8004528:	f004 fb52 	bl	8008bd0 <HAL_OPAMP_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)controller.ADC1_Val, 2);
 800452c:	2202      	movs	r2, #2
 800452e:	4972      	ldr	r1, [pc, #456]	; (80046f8 <main+0x60c>)
 8004530:	4872      	ldr	r0, [pc, #456]	; (80046fc <main+0x610>)
 8004532:	f001 ff97 	bl	8006464 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)controller.ADC2_Val, 2);
 8004536:	2202      	movs	r2, #2
 8004538:	4971      	ldr	r1, [pc, #452]	; (8004700 <main+0x614>)
 800453a:	4872      	ldr	r0, [pc, #456]	; (8004704 <main+0x618>)
 800453c:	f001 ff92 	bl	8006464 <HAL_ADC_Start_DMA>

	disable_gd(&controller);
 8004540:	4860      	ldr	r0, [pc, #384]	; (80046c4 <main+0x5d8>)
 8004542:	f7ff fca5 	bl	8003e90 <disable_gd>
	HAL_Delay(10);
 8004546:	200a      	movs	r0, #10
 8004548:	f001 fbc2 	bl	8005cd0 <HAL_Delay>

	zero_current(&controller);
 800454c:	485d      	ldr	r0, [pc, #372]	; (80046c4 <main+0x5d8>)
 800454e:	f7fe f9f1 	bl	8002934 <zero_current>
	HAL_Delay(100);
 8004552:	2064      	movs	r0, #100	; 0x64
 8004554:	f001 fbbc 	bl	8005cd0 <HAL_Delay>
	printf("ADC A OFFSET: %d     ADC B OFFSET: %d     ADC C OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset, controller.adc_c_offset);
 8004558:	4b5a      	ldr	r3, [pc, #360]	; (80046c4 <main+0x5d8>)
 800455a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800455e:	4b59      	ldr	r3, [pc, #356]	; (80046c4 <main+0x5d8>)
 8004560:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004564:	4b57      	ldr	r3, [pc, #348]	; (80046c4 <main+0x5d8>)
 8004566:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800456a:	4867      	ldr	r0, [pc, #412]	; (8004708 <main+0x61c>)
 800456c:	f009 f956 	bl	800d81c <iprintf>
	printf("Vbus: %f\r\n",controller.v_bus);
 8004570:	4b54      	ldr	r3, [pc, #336]	; (80046c4 <main+0x5d8>)
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	4618      	mov	r0, r3
 8004576:	f7fc f80f 	bl	8000598 <__aeabi_f2d>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4863      	ldr	r0, [pc, #396]	; (800470c <main+0x620>)
 8004580:	f009 f94c 	bl	800d81c <iprintf>
	/* Turn on PWM */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004584:	2100      	movs	r1, #0
 8004586:	4862      	ldr	r0, [pc, #392]	; (8004710 <main+0x624>)
 8004588:	f005 fc50 	bl	8009e2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800458c:	2104      	movs	r1, #4
 800458e:	4860      	ldr	r0, [pc, #384]	; (8004710 <main+0x624>)
 8004590:	f005 fc4c 	bl	8009e2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8004594:	2108      	movs	r1, #8
 8004596:	485e      	ldr	r0, [pc, #376]	; (8004710 <main+0x624>)
 8004598:	f005 fc48 	bl	8009e2c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800459c:	2100      	movs	r1, #0
 800459e:	485c      	ldr	r0, [pc, #368]	; (8004710 <main+0x624>)
 80045a0:	f006 fd44 	bl	800b02c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80045a4:	2104      	movs	r1, #4
 80045a6:	485a      	ldr	r0, [pc, #360]	; (8004710 <main+0x624>)
 80045a8:	f006 fd40 	bl	800b02c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80045ac:	2108      	movs	r1, #8
 80045ae:	4858      	ldr	r0, [pc, #352]	; (8004710 <main+0x624>)
 80045b0:	f006 fd3c 	bl	800b02c <HAL_TIMEx_PWMN_Start>

//	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
//	htim4.Instance->CCR1 = ((htim4.Instance->ARR))*(0.5f);
	HAL_GPIO_WritePin(ENC_SPI_CLK, GPIO_PIN_SET); //CS High
 80045b4:	2201      	movs	r2, #1
 80045b6:	2140      	movs	r1, #64	; 0x40
 80045b8:	4856      	ldr	r0, [pc, #344]	; (8004714 <main+0x628>)
 80045ba:	f004 fa21 	bl	8008a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENC_SPI_CS, GPIO_PIN_SET); //CS High
 80045be:	2201      	movs	r2, #1
 80045c0:	2180      	movs	r1, #128	; 0x80
 80045c2:	4854      	ldr	r0, [pc, #336]	; (8004714 <main+0x628>)
 80045c4:	f004 fa1c 	bl	8008a00 <HAL_GPIO_WritePin>

	disable_gd(&controller);
 80045c8:	483e      	ldr	r0, [pc, #248]	; (80046c4 <main+0x5d8>)
 80045ca:	f7ff fc61 	bl	8003e90 <disable_gd>

	/* CAN setup */
	HAL_GPIO_WritePin(CAN_SHDWN, GPIO_PIN_RESET); //Enable CAN
 80045ce:	2200      	movs	r2, #0
 80045d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80045d4:	4850      	ldr	r0, [pc, #320]	; (8004718 <main+0x62c>)
 80045d6:	f004 fa13 	bl	8008a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CAN_TERM, GPIO_PIN_RESET ); //Disable CAN termination resistor
 80045da:	2200      	movs	r2, #0
 80045dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045e0:	484d      	ldr	r0, [pc, #308]	; (8004718 <main+0x62c>)
 80045e2:	f004 fa0d 	bl	8008a00 <HAL_GPIO_WritePin>


	can_rx_init(&can_rx);
 80045e6:	484d      	ldr	r0, [pc, #308]	; (800471c <main+0x630>)
 80045e8:	f7fd fd44 	bl	8002074 <can_rx_init>
	can_tx_init(&can_tx);
 80045ec:	484c      	ldr	r0, [pc, #304]	; (8004720 <main+0x634>)
 80045ee:	f7fd fd71 	bl	80020d4 <can_tx_init>

	HAL_FDCAN_Start(&CAN_H); //start CAN
 80045f2:	484c      	ldr	r0, [pc, #304]	; (8004724 <main+0x638>)
 80045f4:	f003 fbdf 	bl	8007db6 <HAL_FDCAN_Start>

	/* Set Interrupt Priorities */
	NVIC_SetPriority(PWM_ISR, 1);
 80045f8:	2101      	movs	r1, #1
 80045fa:	2019      	movs	r0, #25
 80045fc:	f7ff fd4c 	bl	8004098 <__NVIC_SetPriority>

	/* Start the FSM */
	state.state = MENU_MODE;
 8004600:	4b49      	ldr	r3, [pc, #292]	; (8004728 <main+0x63c>)
 8004602:	2200      	movs	r2, #0
 8004604:	701a      	strb	r2, [r3, #0]
	state.next_state = MENU_MODE;
 8004606:	4b48      	ldr	r3, [pc, #288]	; (8004728 <main+0x63c>)
 8004608:	2200      	movs	r2, #0
 800460a:	705a      	strb	r2, [r3, #1]
	state.ready = 1;
 800460c:	4b46      	ldr	r3, [pc, #280]	; (8004728 <main+0x63c>)
 800460e:	2201      	movs	r2, #1
 8004610:	70da      	strb	r2, [r3, #3]

	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8004612:	2201      	movs	r2, #1
 8004614:	4945      	ldr	r1, [pc, #276]	; (800472c <main+0x640>)
 8004616:	4846      	ldr	r0, [pc, #280]	; (8004730 <main+0x644>)
 8004618:	f007 f842 	bl	800b6a0 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 800461c:	483c      	ldr	r0, [pc, #240]	; (8004710 <main+0x624>)
 800461e:	f005 fb39 	bl	8009c94 <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN 3 */
//	printf("A:%f B:%f C:%f V:%f \r\n",controller.i_a, controller.i_b, controller.i_c, controller.v_bus);
//	  printf("%f %f\r\n",controller.i_q, controller.i_q_des);
		static float const R60 = 4700.0f; // ohm
		static float const eps = 0.1f; // epsilon (avoid divide by zero)
		float const R_NTC = R60*(4096.0f/(controller.ADC1_Val[2]+eps)-1.0f); // 10kohm NTC at 25°C
 8004622:	4b28      	ldr	r3, [pc, #160]	; (80046c4 <main+0x5d8>)
 8004624:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 8004628:	ee07 3a90 	vmov	s15, r3
 800462c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004630:	4b40      	ldr	r3, [pc, #256]	; (8004734 <main+0x648>)
 8004632:	edd3 7a00 	vldr	s15, [r3]
 8004636:	ee37 7a27 	vadd.f32	s14, s14, s15
 800463a:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8004738 <main+0x64c>
 800463e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004642:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004646:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800464a:	4b3c      	ldr	r3, [pc, #240]	; (800473c <main+0x650>)
 800464c:	edd3 7a00 	vldr	s15, [r3]
 8004650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004654:	edc7 7a01 	vstr	s15, [r7, #4]
		static float const Beta = 3455.0f; // for a 10k NTC
		static float const Kelvin = 273.15f; //°C
		static float const T0 = 273.15f + 25.0f;
		static float const R0 = 10000.0f; // 10kohm at 25° for 10k NTC
		float const present_temperature_K = Beta * T0 / ( Beta - T0*logf(R0/R_NTC) );
 8004658:	4b39      	ldr	r3, [pc, #228]	; (8004740 <main+0x654>)
 800465a:	ed93 7a00 	vldr	s14, [r3]
 800465e:	4b39      	ldr	r3, [pc, #228]	; (8004744 <main+0x658>)
 8004660:	edd3 7a00 	vldr	s15, [r3]
 8004664:	ee27 8a27 	vmul.f32	s16, s14, s15
 8004668:	4b35      	ldr	r3, [pc, #212]	; (8004740 <main+0x654>)
 800466a:	edd3 8a00 	vldr	s17, [r3]
 800466e:	4b36      	ldr	r3, [pc, #216]	; (8004748 <main+0x65c>)
 8004670:	ed93 7a00 	vldr	s14, [r3]
 8004674:	edd7 7a01 	vldr	s15, [r7, #4]
 8004678:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800467c:	eeb0 0a66 	vmov.f32	s0, s13
 8004680:	f00c fe82 	bl	8011388 <logf>
 8004684:	eeb0 7a40 	vmov.f32	s14, s0
 8004688:	4b2e      	ldr	r3, [pc, #184]	; (8004744 <main+0x658>)
 800468a:	edd3 7a00 	vldr	s15, [r3]
 800468e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004692:	ee38 7ae7 	vsub.f32	s14, s17, s15
 8004696:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800469a:	edc7 7a00 	vstr	s15, [r7]
		controller.fet_temp_C = present_temperature_K-Kelvin;
 800469e:	4b2b      	ldr	r3, [pc, #172]	; (800474c <main+0x660>)
 80046a0:	edd3 7a00 	vldr	s15, [r3]
 80046a4:	ed97 7a00 	vldr	s14, [r7]
 80046a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <main+0x5d8>)
 80046ae:	edc3 7ac1 	vstr	s15, [r3, #772]	; 0x304
  {
 80046b2:	e7b6      	b.n	8004622 <main+0x536>
 80046b4:	20004ca0 	.word	0x20004ca0
 80046b8:	41200000 	.word	0x41200000
 80046bc:	3ff00000 	.word	0x3ff00000
 80046c0:	08012134 	.word	0x08012134
 80046c4:	2000041c 	.word	0x2000041c
 80046c8:	20004a40 	.word	0x20004a40
 80046cc:	20004da0 	.word	0x20004da0
 80046d0:	20000734 	.word	0x20000734
 80046d4:	38d1b717 	.word	0x38d1b717
 80046d8:	40490fdb 	.word	0x40490fdb
 80046dc:	40c90fdb 	.word	0x40c90fdb
 80046e0:	08012158 	.word	0x08012158
 80046e4:	c0490fdb 	.word	0xc0490fdb
 80046e8:	08012160 	.word	0x08012160
 80046ec:	20004fa0 	.word	0x20004fa0
 80046f0:	20004fdc 	.word	0x20004fdc
 80046f4:	20005018 	.word	0x20005018
 80046f8:	20000714 	.word	0x20000714
 80046fc:	2000021c 	.word	0x2000021c
 8004700:	2000071a 	.word	0x2000071a
 8004704:	20000288 	.word	0x20000288
 8004708:	0801216c 	.word	0x0801216c
 800470c:	080121ac 	.word	0x080121ac
 8004710:	20005058 	.word	0x20005058
 8004714:	48000400 	.word	0x48000400
 8004718:	48000800 	.word	0x48000800
 800471c:	20004c50 	.word	0x20004c50
 8004720:	20004c24 	.word	0x20004c24
 8004724:	200003b8 	.word	0x200003b8
 8004728:	20000724 	.word	0x20000724
 800472c:	20004c9c 	.word	0x20004c9c
 8004730:	200050a4 	.word	0x200050a4
 8004734:	08012234 	.word	0x08012234
 8004738:	45800000 	.word	0x45800000
 800473c:	08012238 	.word	0x08012238
 8004740:	0801223c 	.word	0x0801223c
 8004744:	08012240 	.word	0x08012240
 8004748:	08012244 	.word	0x08012244
 800474c:	08012248 	.word	0x08012248

08004750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b0a4      	sub	sp, #144	; 0x90
 8004754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004756:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800475a:	2238      	movs	r2, #56	; 0x38
 800475c:	2100      	movs	r1, #0
 800475e:	4618      	mov	r0, r3
 8004760:	f008 fbea 	bl	800cf38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004764:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	605a      	str	r2, [r3, #4]
 800476e:	609a      	str	r2, [r3, #8]
 8004770:	60da      	str	r2, [r3, #12]
 8004772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004774:	463b      	mov	r3, r7
 8004776:	2244      	movs	r2, #68	; 0x44
 8004778:	2100      	movs	r1, #0
 800477a:	4618      	mov	r0, r3
 800477c:	f008 fbdc 	bl	800cf38 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004780:	2000      	movs	r0, #0
 8004782:	f004 fa57 	bl	8008c34 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004786:	2301      	movs	r3, #1
 8004788:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800478a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800478e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004790:	2302      	movs	r3, #2
 8004792:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004794:	2303      	movs	r3, #3
 8004796:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8004798:	2302      	movs	r3, #2
 800479a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 84;
 800479c:	2354      	movs	r3, #84	; 0x54
 800479e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80047a2:	2302      	movs	r3, #2
 80047a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80047a8:	2302      	movs	r3, #2
 80047aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80047ae:	2302      	movs	r3, #2
 80047b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80047b8:	4618      	mov	r0, r3
 80047ba:	f004 faef 	bl	8008d9c <HAL_RCC_OscConfig>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80047c4:	f000 f82d 	bl	8004822 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047c8:	230f      	movs	r3, #15
 80047ca:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047cc:	2303      	movs	r3, #3
 80047ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047d0:	2300      	movs	r3, #0
 80047d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80047d4:	2300      	movs	r3, #0
 80047d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80047d8:	2300      	movs	r3, #0
 80047da:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80047dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80047e0:	2104      	movs	r1, #4
 80047e2:	4618      	mov	r0, r3
 80047e4:	f004 fdf2 	bl	80093cc <HAL_RCC_ClockConfig>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80047ee:	f000 f818 	bl	8004822 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 80047f2:	f249 0302 	movw	r3, #36866	; 0x9002
 80047f6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80047fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004800:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004802:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004806:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004808:	463b      	mov	r3, r7
 800480a:	4618      	mov	r0, r3
 800480c:	f004 fffa 	bl	8009804 <HAL_RCCEx_PeriphCLKConfig>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8004816:	f000 f804 	bl	8004822 <Error_Handler>
  }
}
 800481a:	bf00      	nop
 800481c:	3790      	adds	r7, #144	; 0x90
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004822:	b480      	push	{r7}
 8004824:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004826:	b672      	cpsid	i
}
 8004828:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800482a:	e7fe      	b.n	800482a <Error_Handler+0x8>

0800482c <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	ed87 0a01 	vstr	s0, [r7, #4]
 8004836:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 800483a:	ed97 7a01 	vldr	s14, [r7, #4]
 800483e:	edd7 7a00 	vldr	s15, [r7]
 8004842:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484a:	dd01      	ble.n	8004850 <fast_fmaxf+0x24>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	e000      	b.n	8004852 <fast_fmaxf+0x26>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	ee07 3a90 	vmov	s15, r3
    }
 8004856:	eeb0 0a67 	vmov.f32	s0, s15
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <fast_fminf>:

float fast_fminf(float x, float y){
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	ed87 0a01 	vstr	s0, [r7, #4]
 800486e:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8004872:	ed97 7a01 	vldr	s14, [r7, #4]
 8004876:	edd7 7a00 	vldr	s15, [r7]
 800487a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800487e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004882:	d501      	bpl.n	8004888 <fast_fminf+0x24>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	e000      	b.n	800488a <fast_fminf+0x26>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	ee07 3a90 	vmov	s15, r3
    }
 800488e:	eeb0 0a67 	vmov.f32	s0, s15
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <fmaxf3>:

float fmaxf3(float x, float y, float z){
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80048a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80048aa:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 80048ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80048b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80048b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048be:	dd0c      	ble.n	80048da <fmaxf3+0x3e>
 80048c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80048c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80048c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d0:	dd01      	ble.n	80048d6 <fmaxf3+0x3a>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	e00d      	b.n	80048f2 <fmaxf3+0x56>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	e00b      	b.n	80048f2 <fmaxf3+0x56>
 80048da:	ed97 7a02 	vldr	s14, [r7, #8]
 80048de:	edd7 7a01 	vldr	s15, [r7, #4]
 80048e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ea:	dd01      	ble.n	80048f0 <fmaxf3+0x54>
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	e000      	b.n	80048f2 <fmaxf3+0x56>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	ee07 3a90 	vmov	s15, r3
    }
 80048f6:	eeb0 0a67 	vmov.f32	s0, s15
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <fminf3>:

float fminf3(float x, float y, float z){
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	ed87 0a03 	vstr	s0, [r7, #12]
 800490e:	edc7 0a02 	vstr	s1, [r7, #8]
 8004912:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8004916:	ed97 7a03 	vldr	s14, [r7, #12]
 800491a:	edd7 7a02 	vldr	s15, [r7, #8]
 800491e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004926:	d50c      	bpl.n	8004942 <fminf3+0x3e>
 8004928:	ed97 7a03 	vldr	s14, [r7, #12]
 800492c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004930:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004938:	d501      	bpl.n	800493e <fminf3+0x3a>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	e00d      	b.n	800495a <fminf3+0x56>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	e00b      	b.n	800495a <fminf3+0x56>
 8004942:	ed97 7a02 	vldr	s14, [r7, #8]
 8004946:	edd7 7a01 	vldr	s15, [r7, #4]
 800494a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800494e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004952:	d501      	bpl.n	8004958 <fminf3+0x54>
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	e000      	b.n	800495a <fminf3+0x56>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	ee07 3a90 	vmov	s15, r3
    }
 800495e:	eeb0 0a67 	vmov.f32	s0, s15
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	ed93 7a00 	vldr	s14, [r3]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	edd3 7a00 	vldr	s15, [r3]
 8004986:	ee27 7a27 	vmul.f32	s14, s14, s15
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	edd3 6a00 	vldr	s13, [r3]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	edd3 7a00 	vldr	s15, [r3]
 8004996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800499a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800499e:	eeb0 0a67 	vmov.f32	s0, s15
 80049a2:	f00c fd1f 	bl	80113e4 <sqrtf>
 80049a6:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 80049aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80049ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80049b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ba:	dc00      	bgt.n	80049be <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 80049bc:	e01b      	b.n	80049f6 <limit_norm+0x8a>
        *x = *x * limit/norm;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	ed93 7a00 	vldr	s14, [r3]
 80049c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80049c8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80049cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80049d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	ed93 7a00 	vldr	s14, [r3]
 80049e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80049e4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80049e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80049ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	edc3 7a00 	vstr	s15, [r3]
    }
 80049f6:	bf00      	nop
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <float_to_uint>:
    
void limit(float *x, float min, float max){
    *x = fast_fmaxf(fast_fminf(*x, max), min);
    }

int float_to_uint(float x, float x_min, float x_max, int bits){
 80049fe:	b480      	push	{r7}
 8004a00:	b087      	sub	sp, #28
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	ed87 0a03 	vstr	s0, [r7, #12]
 8004a08:	edc7 0a02 	vstr	s1, [r7, #8]
 8004a0c:	ed87 1a01 	vstr	s2, [r7, #4]
 8004a10:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 8004a12:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a16:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a1e:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 8004a26:	ed97 7a03 	vldr	s14, [r7, #12]
 8004a2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a32:	2201      	movs	r2, #1
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	ee07 3a90 	vmov	s15, r3
 8004a40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a44:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004a48:	ed97 7a05 	vldr	s14, [r7, #20]
 8004a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a54:	ee17 3a90 	vmov	r3, s15
    }
 8004a58:	4618      	mov	r0, r3
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <uint_to_float>:
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a70:	edc7 0a01 	vstr	s1, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8004a76:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a82:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	ee07 3a90 	vmov	s15, r3
 8004a90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a94:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a98:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab2:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8004aba:	eeb0 0a67 	vmov.f32	s0, s15
 8004abe:	371c      	adds	r7, #28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <sin_lut>:

float sin_lut(float theta){
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 8004ad2:	eddf 0a17 	vldr	s1, [pc, #92]	; 8004b30 <sin_lut+0x68>
 8004ad6:	ed97 0a01 	vldr	s0, [r7, #4]
 8004ada:	f00c fc35 	bl	8011348 <fmodf>
 8004ade:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8004ae2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ae6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aee:	d506      	bpl.n	8004afe <sin_lut+0x36>
 8004af0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004af4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004b30 <sin_lut+0x68>
 8004af8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004afc:	e001      	b.n	8004b02 <sin_lut+0x3a>
 8004afe:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b02:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 8004b06:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b0a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004b34 <sin_lut+0x6c>
 8004b0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b16:	ee17 3a90 	vmov	r3, s15
 8004b1a:	4a07      	ldr	r2, [pc, #28]	; (8004b38 <sin_lut+0x70>)
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	ee07 3a90 	vmov	s15, r3
}
 8004b26:	eeb0 0a67 	vmov.f32	s0, s15
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40c90fdb 	.word	0x40c90fdb
 8004b34:	42a2f983 	.word	0x42a2f983
 8004b38:	0801224c 	.word	0x0801224c

08004b3c <cos_lut>:

float cos_lut(float theta){
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 8004b46:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004b68 <cos_lut+0x2c>
 8004b4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b52:	eeb0 0a67 	vmov.f32	s0, s15
 8004b56:	f7ff ffb7 	bl	8004ac8 <sin_lut>
 8004b5a:	eef0 7a40 	vmov.f32	s15, s0
}
 8004b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	3fc90fdb 	.word	0x3fc90fdb

08004b6c <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8004b70:	4b13      	ldr	r3, [pc, #76]	; (8004bc0 <MX_OPAMP1_Init+0x54>)
 8004b72:	4a14      	ldr	r2, [pc, #80]	; (8004bc4 <MX_OPAMP1_Init+0x58>)
 8004b74:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8004b76:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <MX_OPAMP1_Init+0x54>)
 8004b78:	2280      	movs	r2, #128	; 0x80
 8004b7a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8004b7c:	4b10      	ldr	r3, [pc, #64]	; (8004bc0 <MX_OPAMP1_Init+0x54>)
 8004b7e:	2240      	movs	r2, #64	; 0x40
 8004b80:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004b82:	4b0f      	ldr	r3, [pc, #60]	; (8004bc0 <MX_OPAMP1_Init+0x54>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8004b88:	4b0d      	ldr	r3, [pc, #52]	; (8004bc0 <MX_OPAMP1_Init+0x54>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004b8e:	4b0c      	ldr	r3, [pc, #48]	; (8004bc0 <MX_OPAMP1_Init+0x54>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004b94:	4b0a      	ldr	r3, [pc, #40]	; (8004bc0 <MX_OPAMP1_Init+0x54>)
 8004b96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b9a:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8004b9c:	4b08      	ldr	r3, [pc, #32]	; (8004bc0 <MX_OPAMP1_Init+0x54>)
 8004b9e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004ba2:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004ba4:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <MX_OPAMP1_Init+0x54>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8004baa:	4805      	ldr	r0, [pc, #20]	; (8004bc0 <MX_OPAMP1_Init+0x54>)
 8004bac:	f003 ff40 	bl	8008a30 <HAL_OPAMP_Init>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8004bb6:	f7ff fe34 	bl	8004822 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8004bba:	bf00      	nop
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20004fa0 	.word	0x20004fa0
 8004bc4:	40010300 	.word	0x40010300

08004bc8 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8004bcc:	4b13      	ldr	r3, [pc, #76]	; (8004c1c <MX_OPAMP2_Init+0x54>)
 8004bce:	4a14      	ldr	r2, [pc, #80]	; (8004c20 <MX_OPAMP2_Init+0x58>)
 8004bd0:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8004bd2:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <MX_OPAMP2_Init+0x54>)
 8004bd4:	2280      	movs	r2, #128	; 0x80
 8004bd6:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8004bd8:	4b10      	ldr	r3, [pc, #64]	; (8004c1c <MX_OPAMP2_Init+0x54>)
 8004bda:	2240      	movs	r2, #64	; 0x40
 8004bdc:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004bde:	4b0f      	ldr	r3, [pc, #60]	; (8004c1c <MX_OPAMP2_Init+0x54>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 8004be4:	4b0d      	ldr	r3, [pc, #52]	; (8004c1c <MX_OPAMP2_Init+0x54>)
 8004be6:	2201      	movs	r2, #1
 8004be8:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004bea:	4b0c      	ldr	r3, [pc, #48]	; (8004c1c <MX_OPAMP2_Init+0x54>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004bf0:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <MX_OPAMP2_Init+0x54>)
 8004bf2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004bf6:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8004bf8:	4b08      	ldr	r3, [pc, #32]	; (8004c1c <MX_OPAMP2_Init+0x54>)
 8004bfa:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004bfe:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004c00:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <MX_OPAMP2_Init+0x54>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8004c06:	4805      	ldr	r0, [pc, #20]	; (8004c1c <MX_OPAMP2_Init+0x54>)
 8004c08:	f003 ff12 	bl	8008a30 <HAL_OPAMP_Init>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8004c12:	f7ff fe06 	bl	8004822 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8004c16:	bf00      	nop
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20004fdc 	.word	0x20004fdc
 8004c20:	40010304 	.word	0x40010304

08004c24 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8004c28:	4b13      	ldr	r3, [pc, #76]	; (8004c78 <MX_OPAMP3_Init+0x54>)
 8004c2a:	4a14      	ldr	r2, [pc, #80]	; (8004c7c <MX_OPAMP3_Init+0x58>)
 8004c2c:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8004c2e:	4b12      	ldr	r3, [pc, #72]	; (8004c78 <MX_OPAMP3_Init+0x54>)
 8004c30:	2280      	movs	r2, #128	; 0x80
 8004c32:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8004c34:	4b10      	ldr	r3, [pc, #64]	; (8004c78 <MX_OPAMP3_Init+0x54>)
 8004c36:	2240      	movs	r2, #64	; 0x40
 8004c38:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004c3a:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <MX_OPAMP3_Init+0x54>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8004c40:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <MX_OPAMP3_Init+0x54>)
 8004c42:	2201      	movs	r2, #1
 8004c44:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004c46:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <MX_OPAMP3_Init+0x54>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004c4c:	4b0a      	ldr	r3, [pc, #40]	; (8004c78 <MX_OPAMP3_Init+0x54>)
 8004c4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c52:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8004c54:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <MX_OPAMP3_Init+0x54>)
 8004c56:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004c5a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004c5c:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <MX_OPAMP3_Init+0x54>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8004c62:	4805      	ldr	r0, [pc, #20]	; (8004c78 <MX_OPAMP3_Init+0x54>)
 8004c64:	f003 fee4 	bl	8008a30 <HAL_OPAMP_Init>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8004c6e:	f7ff fdd8 	bl	8004822 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8004c72:	bf00      	nop
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20005018 	.word	0x20005018
 8004c7c:	40010308 	.word	0x40010308

08004c80 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08a      	sub	sp, #40	; 0x28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c88:	f107 0314 	add.w	r3, r7, #20
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	605a      	str	r2, [r3, #4]
 8004c92:	609a      	str	r2, [r3, #8]
 8004c94:	60da      	str	r2, [r3, #12]
 8004c96:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a2e      	ldr	r2, [pc, #184]	; (8004d58 <HAL_OPAMP_MspInit+0xd8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d119      	bne.n	8004cd6 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ca2:	4b2e      	ldr	r3, [pc, #184]	; (8004d5c <HAL_OPAMP_MspInit+0xdc>)
 8004ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca6:	4a2d      	ldr	r2, [pc, #180]	; (8004d5c <HAL_OPAMP_MspInit+0xdc>)
 8004ca8:	f043 0301 	orr.w	r3, r3, #1
 8004cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cae:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <HAL_OPAMP_MspInit+0xdc>)
 8004cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	613b      	str	r3, [r7, #16]
 8004cb8:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8004cba:	230a      	movs	r3, #10
 8004cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cc6:	f107 0314 	add.w	r3, r7, #20
 8004cca:	4619      	mov	r1, r3
 8004ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cd0:	f003 fcfc 	bl	80086cc <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8004cd4:	e03b      	b.n	8004d4e <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a21      	ldr	r2, [pc, #132]	; (8004d60 <HAL_OPAMP_MspInit+0xe0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d119      	bne.n	8004d14 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ce0:	4b1e      	ldr	r3, [pc, #120]	; (8004d5c <HAL_OPAMP_MspInit+0xdc>)
 8004ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce4:	4a1d      	ldr	r2, [pc, #116]	; (8004d5c <HAL_OPAMP_MspInit+0xdc>)
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cec:	4b1b      	ldr	r3, [pc, #108]	; (8004d5c <HAL_OPAMP_MspInit+0xdc>)
 8004cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004cf8:	23a0      	movs	r3, #160	; 0xa0
 8004cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d04:	f107 0314 	add.w	r3, r7, #20
 8004d08:	4619      	mov	r1, r3
 8004d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d0e:	f003 fcdd 	bl	80086cc <HAL_GPIO_Init>
}
 8004d12:	e01c      	b.n	8004d4e <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a12      	ldr	r2, [pc, #72]	; (8004d64 <HAL_OPAMP_MspInit+0xe4>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d117      	bne.n	8004d4e <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d1e:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <HAL_OPAMP_MspInit+0xdc>)
 8004d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d22:	4a0e      	ldr	r2, [pc, #56]	; (8004d5c <HAL_OPAMP_MspInit+0xdc>)
 8004d24:	f043 0302 	orr.w	r3, r3, #2
 8004d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d2a:	4b0c      	ldr	r3, [pc, #48]	; (8004d5c <HAL_OPAMP_MspInit+0xdc>)
 8004d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	60bb      	str	r3, [r7, #8]
 8004d34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8004d36:	2305      	movs	r3, #5
 8004d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d42:	f107 0314 	add.w	r3, r7, #20
 8004d46:	4619      	mov	r1, r3
 8004d48:	4807      	ldr	r0, [pc, #28]	; (8004d68 <HAL_OPAMP_MspInit+0xe8>)
 8004d4a:	f003 fcbf 	bl	80086cc <HAL_GPIO_Init>
}
 8004d4e:	bf00      	nop
 8004d50:	3728      	adds	r7, #40	; 0x28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	40010300 	.word	0x40010300
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	40010304 	.word	0x40010304
 8004d64:	40010308 	.word	0x40010308
 8004d68:	48000400 	.word	0x48000400

08004d6c <ps_warmup>:
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"
#include "gpio.h"

void ps_warmup(EncoderStruct * encoder, int n){
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	e03f      	b.n	8004dfc <ps_warmup+0x90>
		/* SPI read */
		HAL_GPIO_WritePin(ENC_SPI_CLK, GPIO_PIN_RESET);
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2140      	movs	r1, #64	; 0x40
 8004d80:	4823      	ldr	r0, [pc, #140]	; (8004e10 <ps_warmup+0xa4>)
 8004d82:	f003 fe3d 	bl	8008a00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENC_SPI_CS, GPIO_PIN_RESET); //CS Low
 8004d86:	2200      	movs	r2, #0
 8004d88:	2180      	movs	r1, #128	; 0x80
 8004d8a:	4821      	ldr	r0, [pc, #132]	; (8004e10 <ps_warmup+0xa4>)
 8004d8c:	f003 fe38 	bl	8008a00 <HAL_GPIO_WritePin>
		for(int i = 0; i<5; i++){
 8004d90:	2300      	movs	r3, #0
 8004d92:	613b      	str	r3, [r7, #16]
 8004d94:	e002      	b.n	8004d9c <ps_warmup+0x30>
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	613b      	str	r3, [r7, #16]
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	ddf9      	ble.n	8004d96 <ps_warmup+0x2a>
			//delay for CS falling edge -> clk rising edge requirement
		}
		uint16_t spi_val;
		int index = 15;
 8004da2:	230f      	movs	r3, #15
 8004da4:	60bb      	str	r3, [r7, #8]
		//MSB first
		//Read on rising edge
		//Takes 50ns
		while(index>=0){
 8004da6:	e01e      	b.n	8004de6 <ps_warmup+0x7a>
			HAL_GPIO_WritePin(ENC_SPI_CLK, GPIO_PIN_SET);
 8004da8:	2201      	movs	r2, #1
 8004daa:	2140      	movs	r1, #64	; 0x40
 8004dac:	4818      	ldr	r0, [pc, #96]	; (8004e10 <ps_warmup+0xa4>)
 8004dae:	f003 fe27 	bl	8008a00 <HAL_GPIO_WritePin>
			if(HAL_GPIO_ReadPin(ENC_SPI_MISO)){
 8004db2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004db6:	4816      	ldr	r0, [pc, #88]	; (8004e10 <ps_warmup+0xa4>)
 8004db8:	f003 fe0a 	bl	80089d0 <HAL_GPIO_ReadPin>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d009      	beq.n	8004dd6 <ps_warmup+0x6a>
				spi_val |= 1<<index;
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	b21a      	sxth	r2, r3
 8004dcc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	b21b      	sxth	r3, r3
 8004dd4:	81fb      	strh	r3, [r7, #14]
			}
			index--;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	60bb      	str	r3, [r7, #8]
			HAL_GPIO_WritePin(ENC_SPI_CLK, GPIO_PIN_RESET);
 8004ddc:	2200      	movs	r2, #0
 8004dde:	2140      	movs	r1, #64	; 0x40
 8004de0:	480b      	ldr	r0, [pc, #44]	; (8004e10 <ps_warmup+0xa4>)
 8004de2:	f003 fe0d 	bl	8008a00 <HAL_GPIO_WritePin>
		while(index>=0){
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	dadd      	bge.n	8004da8 <ps_warmup+0x3c>
		}
		HAL_GPIO_WritePin(ENC_SPI_CS, GPIO_PIN_SET); //CS High
 8004dec:	2201      	movs	r2, #1
 8004dee:	2180      	movs	r1, #128	; 0x80
 8004df0:	4807      	ldr	r0, [pc, #28]	; (8004e10 <ps_warmup+0xa4>)
 8004df2:	f003 fe05 	bl	8008a00 <HAL_GPIO_WritePin>
	for(int i = 0; i<n; i++){
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	dbbb      	blt.n	8004d7c <ps_warmup+0x10>
	}
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	48000400 	.word	0x48000400

08004e14 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08c      	sub	sp, #48	; 0x30
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	609a      	str	r2, [r3, #8]
//	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
	memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f103 0010 	add.w	r0, r3, #16
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	330c      	adds	r3, #12
 8004e32:	224c      	movs	r2, #76	; 0x4c
 8004e34:	4619      	mov	r1, r3
 8004e36:	f008 f865 	bl	800cf04 <memmove>

	/* SPI read */
	HAL_GPIO_WritePin(ENC_SPI_CLK, GPIO_PIN_RESET);
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2140      	movs	r1, #64	; 0x40
 8004e3e:	48af      	ldr	r0, [pc, #700]	; (80050fc <ps_sample+0x2e8>)
 8004e40:	f003 fdde 	bl	8008a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENC_SPI_CS, GPIO_PIN_RESET); //CS Low
 8004e44:	2200      	movs	r2, #0
 8004e46:	2180      	movs	r1, #128	; 0x80
 8004e48:	48ac      	ldr	r0, [pc, #688]	; (80050fc <ps_sample+0x2e8>)
 8004e4a:	f003 fdd9 	bl	8008a00 <HAL_GPIO_WritePin>
	for(int i = 0; i<5; i++){
 8004e4e:	2300      	movs	r3, #0
 8004e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e52:	e002      	b.n	8004e5a <ps_sample+0x46>
 8004e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e56:	3301      	adds	r3, #1
 8004e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	ddf9      	ble.n	8004e54 <ps_sample+0x40>
		//delay for CS falling edge -> clk rising edge requirement
	}
	uint16_t spi_val;
	int index = 15;
 8004e60:	230f      	movs	r3, #15
 8004e62:	627b      	str	r3, [r7, #36]	; 0x24
	//MSB first
	//Read on rising edge
	//Takes 50ns
	while(index>=0){
 8004e64:	e01e      	b.n	8004ea4 <ps_sample+0x90>
		HAL_GPIO_WritePin(ENC_SPI_CLK, GPIO_PIN_SET);
 8004e66:	2201      	movs	r2, #1
 8004e68:	2140      	movs	r1, #64	; 0x40
 8004e6a:	48a4      	ldr	r0, [pc, #656]	; (80050fc <ps_sample+0x2e8>)
 8004e6c:	f003 fdc8 	bl	8008a00 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ENC_SPI_MISO)){
 8004e70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e74:	48a1      	ldr	r0, [pc, #644]	; (80050fc <ps_sample+0x2e8>)
 8004e76:	f003 fdab 	bl	80089d0 <HAL_GPIO_ReadPin>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d009      	beq.n	8004e94 <ps_sample+0x80>
			spi_val |= 1<<index;
 8004e80:	2201      	movs	r2, #1
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	b21a      	sxth	r2, r3
 8004e8a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	b21b      	sxth	r3, r3
 8004e92:	857b      	strh	r3, [r7, #42]	; 0x2a
		}
		index--;
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	3b01      	subs	r3, #1
 8004e98:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_WritePin(ENC_SPI_CLK, GPIO_PIN_RESET);
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2140      	movs	r1, #64	; 0x40
 8004e9e:	4897      	ldr	r0, [pc, #604]	; (80050fc <ps_sample+0x2e8>)
 8004ea0:	f003 fdae 	bl	8008a00 <HAL_GPIO_WritePin>
	while(index>=0){
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	dadd      	bge.n	8004e66 <ps_sample+0x52>
	}
	HAL_GPIO_WritePin(ENC_SPI_CS, GPIO_PIN_SET); //CS High
 8004eaa:	2201      	movs	r2, #1
 8004eac:	2180      	movs	r1, #128	; 0x80
 8004eae:	4893      	ldr	r0, [pc, #588]	; (80050fc <ps_sample+0x2e8>)
 8004eb0:	f003 fda6 	bl	8008a00 <HAL_GPIO_WritePin>

	encoder->raw = spi_val&0x3FFF; //angle;
 8004eb4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004eb6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	675a      	str	r2, [r3, #116]	; 0x74

	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>7];				// lookup table lower entry
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ec2:	11da      	asrs	r2, r3, #7
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3236      	adds	r2, #54	; 0x36
 8004ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ecc:	61fb      	str	r3, [r7, #28]
	int off_2 = encoder->offset_lut[((encoder->raw>>7)+1)%128];		// lookup table higher entry
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed2:	11db      	asrs	r3, r3, #7
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	425a      	negs	r2, r3
 8004ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004edc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ee0:	bf58      	it	pl
 8004ee2:	4253      	negpl	r3, r2
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	3336      	adds	r3, #54	; 0x36
 8004ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eec:	61bb      	str	r3, [r7, #24]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>7)<<7))>>7);     // Interpolate between lookup table entries
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ef8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004efc:	fb02 f303 	mul.w	r3, r2, r3
 8004f00:	11db      	asrs	r3, r3, #7
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	4413      	add	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]
	encoder->count = encoder->raw - off_interp;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	1ad2      	subs	r2, r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	679a      	str	r2, [r3, #120]	; 0x78


	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count))/((float)ENC_CPR);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f18:	ee07 3a90 	vmov	s15, r3
 8004f1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f20:	eddf 6a77 	vldr	s13, [pc, #476]	; 8005100 <ps_sample+0x2ec>
 8004f24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	edc3 7a01 	vstr	s15, [r3, #4]
	int int_angle = encoder->angle_singleturn;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f38:	ee17 3a90 	vmov	r3, s15
 8004f3c:	613b      	str	r3, [r7, #16]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	ee07 3a90 	vmov	s15, r3
 8004f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f52:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8005104 <ps_sample+0x2f0>
 8004f56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	edc3 7a01 	vstr	s15, [r3, #4]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6e:	d507      	bpl.n	8004f80 <ps_sample+0x16c>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f76:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8005104 <ps_sample+0x2f0>
 8004f7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f7e:	e002      	b.n	8004f86 <ps_sample+0x172>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004f96:	4b5c      	ldr	r3, [pc, #368]	; (8005108 <ps_sample+0x2f4>)
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	ee07 3a90 	vmov	s15, r3
 8004fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fa8:	eddf 6a55 	vldr	s13, [pc, #340]	; 8005100 <ps_sample+0x2ec>
 8004fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	int_angle = (int)encoder->elec_angle;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004fbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fc0:	ee17 3a90 	vmov	r3, s15
 8004fc4:	613b      	str	r3, [r7, #16]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	ee07 3a90 	vmov	s15, r3
 8004fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fda:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8005104 <ps_sample+0x2f0>
 8004fde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004fee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ff6:	d507      	bpl.n	8005008 <ps_sample+0x1f4>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004ffe:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8005104 <ps_sample+0x2f0>
 8005002:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005006:	e002      	b.n	800500e <ps_sample+0x1fa>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	/* Rollover */
	int rollover = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	623b      	str	r3, [r7, #32]
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	ed93 7a01 	vldr	s14, [r3, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	edd3 7a02 	vldr	s15, [r3, #8]
 8005024:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005028:	edc7 7a03 	vstr	s15, [r7, #12]
	if(angle_diff > PI_F){rollover = -1;}
 800502c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005030:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800510c <ps_sample+0x2f8>
 8005034:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800503c:	dd03      	ble.n	8005046 <ps_sample+0x232>
 800503e:	f04f 33ff 	mov.w	r3, #4294967295
 8005042:	623b      	str	r3, [r7, #32]
 8005044:	e00a      	b.n	800505c <ps_sample+0x248>
	else if(angle_diff < -PI_F){rollover = 1;}
 8005046:	edd7 7a03 	vldr	s15, [r7, #12]
 800504a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005110 <ps_sample+0x2fc>
 800504e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005056:	d501      	bpl.n	800505c <ps_sample+0x248>
 8005058:	2301      	movs	r3, #1
 800505a:	623b      	str	r3, [r7, #32]
	encoder->turns += rollover;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	441a      	add	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if(!encoder->first_sample){
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d107      	bne.n	8005086 <ps_sample+0x272>
		encoder->turns = 0;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		encoder->first_sample = 1;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
	}

	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns-encoder->mech_zero;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	ed93 7a01 	vldr	s14, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005092:	ee07 3a90 	vmov	s15, r3
 8005096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800509a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8005104 <ps_sample+0x2f0>
 800509e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80050a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 80050ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	edc3 7a03 	vstr	s15, [r3, #12]

	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	ed93 7a03 	vldr	s14, [r3, #12]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80050c2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80050c6:	edd7 7a00 	vldr	s15, [r7]
 80050ca:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80050ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80050d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80050e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

}
 80050f2:	bf00      	nop
 80050f4:	3730      	adds	r7, #48	; 0x30
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	48000400 	.word	0x48000400
 8005100:	46800000 	.word	0x46800000
 8005104:	40c90fdb 	.word	0x40c90fdb
 8005108:	20004da0 	.word	0x20004da0
 800510c:	40490fdb 	.word	0x40490fdb
 8005110:	c0490fdb 	.word	0xc0490fdb

08005114 <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
//	printf("Raw: %d\r\n", encoder->raw);
	printf("Raw: %d", encoder->raw);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005122:	4619      	mov	r1, r3
 8005124:	481d      	ldr	r0, [pc, #116]	; (800519c <ps_print+0x88>)
 8005126:	f008 fb79 	bl	800d81c <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800512e:	4619      	mov	r1, r3
 8005130:	481b      	ldr	r0, [pc, #108]	; (80051a0 <ps_print+0x8c>)
 8005132:	f008 fb73 	bl	800d81c <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4618      	mov	r0, r3
 800513c:	f7fb fa2c 	bl	8000598 <__aeabi_f2d>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4817      	ldr	r0, [pc, #92]	; (80051a4 <ps_print+0x90>)
 8005146:	f008 fb69 	bl	800d81c <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	4618      	mov	r0, r3
 8005150:	f7fb fa22 	bl	8000598 <__aeabi_f2d>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4813      	ldr	r0, [pc, #76]	; (80051a8 <ps_print+0x94>)
 800515a:	f008 fb5f 	bl	800d81c <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005162:	4618      	mov	r0, r3
 8005164:	f7fb fa18 	bl	8000598 <__aeabi_f2d>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	480f      	ldr	r0, [pc, #60]	; (80051ac <ps_print+0x98>)
 800516e:	f008 fb55 	bl	800d81c <iprintf>
	printf("   Turns:  %d", encoder->turns);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005178:	4619      	mov	r1, r3
 800517a:	480d      	ldr	r0, [pc, #52]	; (80051b0 <ps_print+0x9c>)
 800517c:	f008 fb4e 	bl	800d81c <iprintf>
	printf("   CAN:   %f\r\n", encoder->angle_multiturn[0]);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	4618      	mov	r0, r3
 8005186:	f7fb fa07 	bl	8000598 <__aeabi_f2d>
 800518a:	4602      	mov	r2, r0
 800518c:	460b      	mov	r3, r1
 800518e:	4809      	ldr	r0, [pc, #36]	; (80051b4 <ps_print+0xa0>)
 8005190:	f008 fb44 	bl	800d81c <iprintf>
	//HAL_Delay(dt_ms);
}
 8005194:	bf00      	nop
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	080121b8 	.word	0x080121b8
 80051a0:	080121c0 	.word	0x080121c0
 80051a4:	080121d8 	.word	0x080121d8
 80051a8:	080121ec 	.word	0x080121ec
 80051ac:	08012200 	.word	0x08012200
 80051b0:	08012214 	.word	0x08012214
 80051b4:	08012224 	.word	0x08012224

080051b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051be:	4b0f      	ldr	r3, [pc, #60]	; (80051fc <HAL_MspInit+0x44>)
 80051c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c2:	4a0e      	ldr	r2, [pc, #56]	; (80051fc <HAL_MspInit+0x44>)
 80051c4:	f043 0301 	orr.w	r3, r3, #1
 80051c8:	6613      	str	r3, [r2, #96]	; 0x60
 80051ca:	4b0c      	ldr	r3, [pc, #48]	; (80051fc <HAL_MspInit+0x44>)
 80051cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	607b      	str	r3, [r7, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80051d6:	4b09      	ldr	r3, [pc, #36]	; (80051fc <HAL_MspInit+0x44>)
 80051d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051da:	4a08      	ldr	r2, [pc, #32]	; (80051fc <HAL_MspInit+0x44>)
 80051dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051e0:	6593      	str	r3, [r2, #88]	; 0x58
 80051e2:	4b06      	ldr	r3, [pc, #24]	; (80051fc <HAL_MspInit+0x44>)
 80051e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ea:	603b      	str	r3, [r7, #0]
 80051ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80051ee:	f003 fdc5 	bl	8008d7c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051f2:	bf00      	nop
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	40021000 	.word	0x40021000

08005200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005204:	e7fe      	b.n	8005204 <NMI_Handler+0x4>

08005206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005206:	b480      	push	{r7}
 8005208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800520a:	e7fe      	b.n	800520a <HardFault_Handler+0x4>

0800520c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005210:	e7fe      	b.n	8005210 <MemManage_Handler+0x4>

08005212 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005212:	b480      	push	{r7}
 8005214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005216:	e7fe      	b.n	8005216 <BusFault_Handler+0x4>

08005218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800521c:	e7fe      	b.n	800521c <UsageFault_Handler+0x4>

0800521e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800521e:	b480      	push	{r7}
 8005220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005222:	bf00      	nop
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005230:	bf00      	nop
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800523a:	b480      	push	{r7}
 800523c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800523e:	bf00      	nop
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800524c:	f000 fd22 	bl	8005c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005250:	bf00      	nop
 8005252:	bd80      	pop	{r7, pc}

08005254 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005258:	4802      	ldr	r0, [pc, #8]	; (8005264 <DMA1_Channel1_IRQHandler+0x10>)
 800525a:	f002 fa78 	bl	800774e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800525e:	bf00      	nop
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	200002f4 	.word	0x200002f4

08005268 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800526c:	4802      	ldr	r0, [pc, #8]	; (8005278 <DMA1_Channel2_IRQHandler+0x10>)
 800526e:	f002 fa6e 	bl	800774e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005272:	bf00      	nop
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20000354 	.word	0x20000354

0800527c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	HAL_GPIO_WritePin(PWM_PIN, GPIO_PIN_SET );	// Useful for timing
 8005280:	2201      	movs	r2, #1
 8005282:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800528a:	f003 fbb9 	bl	8008a00 <HAL_GPIO_WritePin>
	analog_sample(&controller); //19us
 800528e:	4810      	ldr	r0, [pc, #64]	; (80052d0 <TIM1_UP_TIM16_IRQHandler+0x54>)
 8005290:	f7fd f8f2 	bl	8002478 <analog_sample>
	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 8005294:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80052d4 <TIM1_UP_TIM16_IRQHandler+0x58>
 8005298:	480f      	ldr	r0, [pc, #60]	; (80052d8 <TIM1_UP_TIM16_IRQHandler+0x5c>)
 800529a:	f7ff fdbb 	bl	8004e14 <ps_sample>
	/* Run Finite State Machine */
	run_fsm(&state);
 800529e:	480f      	ldr	r0, [pc, #60]	; (80052dc <TIM1_UP_TIM16_IRQHandler+0x60>)
 80052a0:	f7fd ff30 	bl	8003104 <run_fsm>
	can_tx_rx();
 80052a4:	f000 f83a 	bl	800531c <can_tx_rx>
	/* increment loop count */
	controller.loop_count++;
 80052a8:	4b09      	ldr	r3, [pc, #36]	; (80052d0 <TIM1_UP_TIM16_IRQHandler+0x54>)
 80052aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052ae:	3301      	adds	r3, #1
 80052b0:	4a07      	ldr	r2, [pc, #28]	; (80052d0 <TIM1_UP_TIM16_IRQHandler+0x54>)
 80052b2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80052b6:	480a      	ldr	r0, [pc, #40]	; (80052e0 <TIM1_UP_TIM16_IRQHandler+0x64>)
 80052b8:	f004 feb8 	bl	800a02c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
	HAL_GPIO_WritePin(PWM_PIN, GPIO_PIN_RESET );	// Useful for timing
 80052bc:	2200      	movs	r2, #0
 80052be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052c6:	f003 fb9b 	bl	8008a00 <HAL_GPIO_WritePin>
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80052ca:	bf00      	nop
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	2000041c 	.word	0x2000041c
 80052d4:	38d1b717 	.word	0x38d1b717
 80052d8:	20000734 	.word	0x20000734
 80052dc:	20000724 	.word	0x20000724
 80052e0:	20005058 	.word	0x20005058

080052e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80052ea:	4809      	ldr	r0, [pc, #36]	; (8005310 <USART2_IRQHandler+0x2c>)
 80052ec:	f006 fa1e 	bl	800b72c <HAL_UART_IRQHandler>

  char c = Serial2RxBuffer[0];
 80052f0:	4b08      	ldr	r3, [pc, #32]	; (8005314 <USART2_IRQHandler+0x30>)
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	71fb      	strb	r3, [r7, #7]
  update_fsm(&state, c);
 80052f6:	79fb      	ldrb	r3, [r7, #7]
 80052f8:	4619      	mov	r1, r3
 80052fa:	4807      	ldr	r0, [pc, #28]	; (8005318 <USART2_IRQHandler+0x34>)
 80052fc:	f7fe f87c 	bl	80033f8 <update_fsm>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005300:	4803      	ldr	r0, [pc, #12]	; (8005310 <USART2_IRQHandler+0x2c>)
 8005302:	f006 fa13 	bl	800b72c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005306:	bf00      	nop
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	200050a4 	.word	0x200050a4
 8005314:	20004c9c 	.word	0x20004c9c
 8005318:	20000724 	.word	0x20000724

0800531c <can_tx_rx>:

/* USER CODE BEGIN 1 */
void can_tx_rx(void){
 800531c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800531e:	b093      	sub	sp, #76	; 0x4c
 8005320:	af10      	add	r7, sp, #64	; 0x40
	int no_message = HAL_FDCAN_GetRxMessage(&CAN_H, FDCAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);
 8005322:	4b84      	ldr	r3, [pc, #528]	; (8005534 <can_tx_rx+0x218>)
 8005324:	4a84      	ldr	r2, [pc, #528]	; (8005538 <can_tx_rx+0x21c>)
 8005326:	2140      	movs	r1, #64	; 0x40
 8005328:	4884      	ldr	r0, [pc, #528]	; (800553c <can_tx_rx+0x220>)
 800532a:	f002 fdb1 	bl	8007e90 <HAL_FDCAN_GetRxMessage>
 800532e:	4603      	mov	r3, r0
 8005330:	607b      	str	r3, [r7, #4]
	if(!no_message){
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	f040 80f8 	bne.w	800552a <can_tx_rx+0x20e>
//		printf("%d\r\n",can_rx.rx_header.Identifier);
		pack_reply(&can_tx, CAN_ID,  comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR);	// Pack response
 800533a:	4b81      	ldr	r3, [pc, #516]	; (8005540 <can_tx_rx+0x224>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	4a80      	ldr	r2, [pc, #512]	; (8005544 <can_tx_rx+0x228>)
 8005342:	ed92 7a03 	vldr	s14, [r2, #12]
 8005346:	4a80      	ldr	r2, [pc, #512]	; (8005548 <can_tx_rx+0x22c>)
 8005348:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 800534c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005350:	4a7c      	ldr	r2, [pc, #496]	; (8005544 <can_tx_rx+0x228>)
 8005352:	ed92 7a18 	vldr	s14, [r2, #96]	; 0x60
 8005356:	4a7c      	ldr	r2, [pc, #496]	; (8005548 <can_tx_rx+0x22c>)
 8005358:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 800535c:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8005360:	4a7a      	ldr	r2, [pc, #488]	; (800554c <can_tx_rx+0x230>)
 8005362:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 8005366:	4a78      	ldr	r2, [pc, #480]	; (8005548 <can_tx_rx+0x22c>)
 8005368:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800536c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005370:	4a75      	ldr	r2, [pc, #468]	; (8005548 <can_tx_rx+0x22c>)
 8005372:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 8005376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537a:	eeb0 1a67 	vmov.f32	s2, s15
 800537e:	eef0 0a46 	vmov.f32	s1, s12
 8005382:	eeb0 0a66 	vmov.f32	s0, s13
 8005386:	4619      	mov	r1, r3
 8005388:	4871      	ldr	r0, [pc, #452]	; (8005550 <can_tx_rx+0x234>)
 800538a:	f7fc fecd 	bl	8002128 <pack_reply>
		HAL_FDCAN_AddMessageToTxFifoQ(&CAN_H, &can_tx.tx_header, can_tx.data);	// Send response
 800538e:	4a71      	ldr	r2, [pc, #452]	; (8005554 <can_tx_rx+0x238>)
 8005390:	4971      	ldr	r1, [pc, #452]	; (8005558 <can_tx_rx+0x23c>)
 8005392:	486a      	ldr	r0, [pc, #424]	; (800553c <can_tx_rx+0x220>)
 8005394:	f002 fd37 	bl	8007e06 <HAL_FDCAN_AddMessageToTxFifoQ>
	  if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 8005398:	4b70      	ldr	r3, [pc, #448]	; (800555c <can_tx_rx+0x240>)
 800539a:	785a      	ldrb	r2, [r3, #1]
 800539c:	4b6f      	ldr	r3, [pc, #444]	; (800555c <can_tx_rx+0x240>)
 800539e:	789b      	ldrb	r3, [r3, #2]
 80053a0:	4013      	ands	r3, r2
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	4b6d      	ldr	r3, [pc, #436]	; (800555c <can_tx_rx+0x240>)
 80053a6:	78db      	ldrb	r3, [r3, #3]
 80053a8:	4013      	ands	r3, r2
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	4b6b      	ldr	r3, [pc, #428]	; (800555c <can_tx_rx+0x240>)
 80053ae:	791b      	ldrb	r3, [r3, #4]
 80053b0:	4013      	ands	r3, r2
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	4b69      	ldr	r3, [pc, #420]	; (800555c <can_tx_rx+0x240>)
 80053b6:	795b      	ldrb	r3, [r3, #5]
 80053b8:	4013      	ands	r3, r2
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	4b67      	ldr	r3, [pc, #412]	; (800555c <can_tx_rx+0x240>)
 80053be:	799b      	ldrb	r3, [r3, #6]
 80053c0:	4013      	ands	r3, r2
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	4b65      	ldr	r3, [pc, #404]	; (800555c <can_tx_rx+0x240>)
 80053c6:	79db      	ldrb	r3, [r3, #7]
 80053c8:	4013      	ands	r3, r2
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2bff      	cmp	r3, #255	; 0xff
 80053ce:	bf0c      	ite	eq
 80053d0:	2301      	moveq	r3, #1
 80053d2:	2300      	movne	r3, #0
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	4b61      	ldr	r3, [pc, #388]	; (800555c <can_tx_rx+0x240>)
 80053d8:	7a1b      	ldrb	r3, [r3, #8]
 80053da:	2bfc      	cmp	r3, #252	; 0xfc
 80053dc:	bf0c      	ite	eq
 80053de:	2301      	moveq	r3, #1
 80053e0:	2300      	movne	r3, #0
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	4013      	ands	r3, r2
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d004      	beq.n	80053f6 <can_tx_rx+0xda>
		  update_fsm(&state, MOTOR_CMD);
 80053ec:	216d      	movs	r1, #109	; 0x6d
 80053ee:	485c      	ldr	r0, [pc, #368]	; (8005560 <can_tx_rx+0x244>)
 80053f0:	f7fe f802 	bl	80033f8 <update_fsm>
	  else{
		  unpack_cmd(can_rx, controller.commands);	// Unpack commands
		  controller.timeout = 0;					// Reset timeout counter
	  }
	}
}
 80053f4:	e099      	b.n	800552a <can_tx_rx+0x20e>
	  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 80053f6:	4b59      	ldr	r3, [pc, #356]	; (800555c <can_tx_rx+0x240>)
 80053f8:	785a      	ldrb	r2, [r3, #1]
 80053fa:	4b58      	ldr	r3, [pc, #352]	; (800555c <can_tx_rx+0x240>)
 80053fc:	789b      	ldrb	r3, [r3, #2]
 80053fe:	4013      	ands	r3, r2
 8005400:	b2da      	uxtb	r2, r3
 8005402:	4b56      	ldr	r3, [pc, #344]	; (800555c <can_tx_rx+0x240>)
 8005404:	78db      	ldrb	r3, [r3, #3]
 8005406:	4013      	ands	r3, r2
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2bff      	cmp	r3, #255	; 0xff
 800540c:	bf0c      	ite	eq
 800540e:	2301      	moveq	r3, #1
 8005410:	2300      	movne	r3, #0
 8005412:	b2db      	uxtb	r3, r3
 8005414:	461a      	mov	r2, r3
 8005416:	4b51      	ldr	r3, [pc, #324]	; (800555c <can_tx_rx+0x240>)
 8005418:	791b      	ldrb	r3, [r3, #4]
 800541a:	2bff      	cmp	r3, #255	; 0xff
 800541c:	bf0c      	ite	eq
 800541e:	2301      	moveq	r3, #1
 8005420:	2300      	movne	r3, #0
 8005422:	b2db      	uxtb	r3, r3
 8005424:	4619      	mov	r1, r3
 8005426:	4b4d      	ldr	r3, [pc, #308]	; (800555c <can_tx_rx+0x240>)
 8005428:	795b      	ldrb	r3, [r3, #5]
 800542a:	2bff      	cmp	r3, #255	; 0xff
 800542c:	bf0c      	ite	eq
 800542e:	2301      	moveq	r3, #1
 8005430:	2300      	movne	r3, #0
 8005432:	b2db      	uxtb	r3, r3
 8005434:	fb01 f303 	mul.w	r3, r1, r3
 8005438:	4013      	ands	r3, r2
 800543a:	4a48      	ldr	r2, [pc, #288]	; (800555c <can_tx_rx+0x240>)
 800543c:	7992      	ldrb	r2, [r2, #6]
 800543e:	2aff      	cmp	r2, #255	; 0xff
 8005440:	bf0c      	ite	eq
 8005442:	2201      	moveq	r2, #1
 8005444:	2200      	movne	r2, #0
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	4013      	ands	r3, r2
 800544a:	4a44      	ldr	r2, [pc, #272]	; (800555c <can_tx_rx+0x240>)
 800544c:	79d2      	ldrb	r2, [r2, #7]
 800544e:	2aff      	cmp	r2, #255	; 0xff
 8005450:	bf0c      	ite	eq
 8005452:	2201      	moveq	r2, #1
 8005454:	2200      	movne	r2, #0
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	4013      	ands	r3, r2
 800545a:	4a40      	ldr	r2, [pc, #256]	; (800555c <can_tx_rx+0x240>)
 800545c:	7a12      	ldrb	r2, [r2, #8]
 800545e:	2afd      	cmp	r2, #253	; 0xfd
 8005460:	bf0c      	ite	eq
 8005462:	2201      	moveq	r2, #1
 8005464:	2200      	movne	r2, #0
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	4013      	ands	r3, r2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d004      	beq.n	8005478 <can_tx_rx+0x15c>
		  update_fsm(&state, MENU_CMD);
 800546e:	211b      	movs	r1, #27
 8005470:	483b      	ldr	r0, [pc, #236]	; (8005560 <can_tx_rx+0x244>)
 8005472:	f7fd ffc1 	bl	80033f8 <update_fsm>
}
 8005476:	e058      	b.n	800552a <can_tx_rx+0x20e>
	  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 8005478:	4b38      	ldr	r3, [pc, #224]	; (800555c <can_tx_rx+0x240>)
 800547a:	785a      	ldrb	r2, [r3, #1]
 800547c:	4b37      	ldr	r3, [pc, #220]	; (800555c <can_tx_rx+0x240>)
 800547e:	789b      	ldrb	r3, [r3, #2]
 8005480:	4013      	ands	r3, r2
 8005482:	b2da      	uxtb	r2, r3
 8005484:	4b35      	ldr	r3, [pc, #212]	; (800555c <can_tx_rx+0x240>)
 8005486:	78db      	ldrb	r3, [r3, #3]
 8005488:	4013      	ands	r3, r2
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2bff      	cmp	r3, #255	; 0xff
 800548e:	bf0c      	ite	eq
 8005490:	2301      	moveq	r3, #1
 8005492:	2300      	movne	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	461a      	mov	r2, r3
 8005498:	4b30      	ldr	r3, [pc, #192]	; (800555c <can_tx_rx+0x240>)
 800549a:	791b      	ldrb	r3, [r3, #4]
 800549c:	2bff      	cmp	r3, #255	; 0xff
 800549e:	bf0c      	ite	eq
 80054a0:	2301      	moveq	r3, #1
 80054a2:	2300      	movne	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	4619      	mov	r1, r3
 80054a8:	4b2c      	ldr	r3, [pc, #176]	; (800555c <can_tx_rx+0x240>)
 80054aa:	795b      	ldrb	r3, [r3, #5]
 80054ac:	2bff      	cmp	r3, #255	; 0xff
 80054ae:	bf0c      	ite	eq
 80054b0:	2301      	moveq	r3, #1
 80054b2:	2300      	movne	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	fb01 f303 	mul.w	r3, r1, r3
 80054ba:	4013      	ands	r3, r2
 80054bc:	4a27      	ldr	r2, [pc, #156]	; (800555c <can_tx_rx+0x240>)
 80054be:	7992      	ldrb	r2, [r2, #6]
 80054c0:	2aff      	cmp	r2, #255	; 0xff
 80054c2:	bf0c      	ite	eq
 80054c4:	2201      	moveq	r2, #1
 80054c6:	2200      	movne	r2, #0
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	4013      	ands	r3, r2
 80054cc:	4a23      	ldr	r2, [pc, #140]	; (800555c <can_tx_rx+0x240>)
 80054ce:	79d2      	ldrb	r2, [r2, #7]
 80054d0:	2aff      	cmp	r2, #255	; 0xff
 80054d2:	bf0c      	ite	eq
 80054d4:	2201      	moveq	r2, #1
 80054d6:	2200      	movne	r2, #0
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	4013      	ands	r3, r2
 80054dc:	4a1f      	ldr	r2, [pc, #124]	; (800555c <can_tx_rx+0x240>)
 80054de:	7a12      	ldrb	r2, [r2, #8]
 80054e0:	2afe      	cmp	r2, #254	; 0xfe
 80054e2:	bf0c      	ite	eq
 80054e4:	2201      	moveq	r2, #1
 80054e6:	2200      	movne	r2, #0
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	4013      	ands	r3, r2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d004      	beq.n	80054fa <can_tx_rx+0x1de>
		  update_fsm(&state, ZERO_CMD);
 80054f0:	217a      	movs	r1, #122	; 0x7a
 80054f2:	481b      	ldr	r0, [pc, #108]	; (8005560 <can_tx_rx+0x244>)
 80054f4:	f7fd ff80 	bl	80033f8 <update_fsm>
}
 80054f8:	e017      	b.n	800552a <can_tx_rx+0x20e>
		  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 80054fa:	4e18      	ldr	r6, [pc, #96]	; (800555c <can_tx_rx+0x240>)
 80054fc:	4b19      	ldr	r3, [pc, #100]	; (8005564 <can_tx_rx+0x248>)
 80054fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005500:	466d      	mov	r5, sp
 8005502:	f106 0410 	add.w	r4, r6, #16
 8005506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800550a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800550c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800550e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005512:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005516:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800551a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800551e:	f7fc fe67 	bl	80021f0 <unpack_cmd>
		  controller.timeout = 0;					// Reset timeout counter
 8005522:	4b0a      	ldr	r3, [pc, #40]	; (800554c <can_tx_rx+0x230>)
 8005524:	2200      	movs	r2, #0
 8005526:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005532:	bf00      	nop
 8005534:	20004c51 	.word	0x20004c51
 8005538:	20004c5c 	.word	0x20004c5c
 800553c:	200003b8 	.word	0x200003b8
 8005540:	20004da0 	.word	0x20004da0
 8005544:	20000734 	.word	0x20000734
 8005548:	20004ca0 	.word	0x20004ca0
 800554c:	2000041c 	.word	0x2000041c
 8005550:	20004c24 	.word	0x20004c24
 8005554:	20004c25 	.word	0x20004c25
 8005558:	20004c2c 	.word	0x20004c2c
 800555c:	20004c50 	.word	0x20004c50
 8005560:	20000724 	.word	0x20000724
 8005564:	200004e4 	.word	0x200004e4

08005568 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
	return 1;
 800556c:	2301      	movs	r3, #1
}
 800556e:	4618      	mov	r0, r3
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <_kill>:

int _kill(int pid, int sig)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005582:	f007 fc87 	bl	800ce94 <__errno>
 8005586:	4603      	mov	r3, r0
 8005588:	2216      	movs	r2, #22
 800558a:	601a      	str	r2, [r3, #0]
	return -1;
 800558c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <_exit>:

void _exit (int status)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80055a0:	f04f 31ff 	mov.w	r1, #4294967295
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff ffe7 	bl	8005578 <_kill>
	while (1) {}		/* Make sure we hang here */
 80055aa:	e7fe      	b.n	80055aa <_exit+0x12>

080055ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055b8:	2300      	movs	r3, #0
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	e00a      	b.n	80055d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80055be:	f3af 8000 	nop.w
 80055c2:	4601      	mov	r1, r0
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	60ba      	str	r2, [r7, #8]
 80055ca:	b2ca      	uxtb	r2, r1
 80055cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	3301      	adds	r3, #1
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	429a      	cmp	r2, r3
 80055da:	dbf0      	blt.n	80055be <_read+0x12>
	}

return len;
 80055dc:	687b      	ldr	r3, [r7, #4]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3718      	adds	r7, #24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b086      	sub	sp, #24
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055f2:	2300      	movs	r3, #0
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	e009      	b.n	800560c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	60ba      	str	r2, [r7, #8]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	4618      	mov	r0, r3
 8005602:	f000 fa8b 	bl	8005b1c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	3301      	adds	r3, #1
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	429a      	cmp	r2, r3
 8005612:	dbf1      	blt.n	80055f8 <_write+0x12>
	}
	return len;
 8005614:	687b      	ldr	r3, [r7, #4]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <_close>:

int _close(int file)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
	return -1;
 8005626:	f04f 33ff 	mov.w	r3, #4294967295
}
 800562a:	4618      	mov	r0, r3
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005646:	605a      	str	r2, [r3, #4]
	return 0;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <_isatty>:

int _isatty(int file)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
	return 1;
 800565e:	2301      	movs	r3, #1
}
 8005660:	4618      	mov	r0, r3
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
	return 0;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
	...

08005688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005690:	4a14      	ldr	r2, [pc, #80]	; (80056e4 <_sbrk+0x5c>)
 8005692:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <_sbrk+0x60>)
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800569c:	4b13      	ldr	r3, [pc, #76]	; (80056ec <_sbrk+0x64>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d102      	bne.n	80056aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056a4:	4b11      	ldr	r3, [pc, #68]	; (80056ec <_sbrk+0x64>)
 80056a6:	4a12      	ldr	r2, [pc, #72]	; (80056f0 <_sbrk+0x68>)
 80056a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056aa:	4b10      	ldr	r3, [pc, #64]	; (80056ec <_sbrk+0x64>)
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4413      	add	r3, r2
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d207      	bcs.n	80056c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056b8:	f007 fbec 	bl	800ce94 <__errno>
 80056bc:	4603      	mov	r3, r0
 80056be:	220c      	movs	r2, #12
 80056c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056c2:	f04f 33ff 	mov.w	r3, #4294967295
 80056c6:	e009      	b.n	80056dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056c8:	4b08      	ldr	r3, [pc, #32]	; (80056ec <_sbrk+0x64>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056ce:	4b07      	ldr	r3, [pc, #28]	; (80056ec <_sbrk+0x64>)
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4413      	add	r3, r2
 80056d6:	4a05      	ldr	r2, [pc, #20]	; (80056ec <_sbrk+0x64>)
 80056d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80056da:	68fb      	ldr	r3, [r7, #12]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	20008000 	.word	0x20008000
 80056e8:	00000400 	.word	0x00000400
 80056ec:	20005054 	.word	0x20005054
 80056f0:	20005148 	.word	0x20005148

080056f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80056f8:	4b06      	ldr	r3, [pc, #24]	; (8005714 <SystemInit+0x20>)
 80056fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fe:	4a05      	ldr	r2, [pc, #20]	; (8005714 <SystemInit+0x20>)
 8005700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005708:	bf00      	nop
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	e000ed00 	.word	0xe000ed00

08005718 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b09c      	sub	sp, #112	; 0x70
 800571c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800571e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	605a      	str	r2, [r3, #4]
 8005728:	609a      	str	r2, [r3, #8]
 800572a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800572c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	605a      	str	r2, [r3, #4]
 8005736:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005738:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	605a      	str	r2, [r3, #4]
 8005742:	609a      	str	r2, [r3, #8]
 8005744:	60da      	str	r2, [r3, #12]
 8005746:	611a      	str	r2, [r3, #16]
 8005748:	615a      	str	r2, [r3, #20]
 800574a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800574c:	1d3b      	adds	r3, r7, #4
 800574e:	2234      	movs	r2, #52	; 0x34
 8005750:	2100      	movs	r1, #0
 8005752:	4618      	mov	r0, r3
 8005754:	f007 fbf0 	bl	800cf38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005758:	4b54      	ldr	r3, [pc, #336]	; (80058ac <MX_TIM1_Init+0x194>)
 800575a:	4a55      	ldr	r2, [pc, #340]	; (80058b0 <MX_TIM1_Init+0x198>)
 800575c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800575e:	4b53      	ldr	r3, [pc, #332]	; (80058ac <MX_TIM1_Init+0x194>)
 8005760:	2200      	movs	r2, #0
 8005762:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8005764:	4b51      	ldr	r3, [pc, #324]	; (80058ac <MX_TIM1_Init+0x194>)
 8005766:	2220      	movs	r2, #32
 8005768:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400;
 800576a:	4b50      	ldr	r3, [pc, #320]	; (80058ac <MX_TIM1_Init+0x194>)
 800576c:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8005770:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005772:	4b4e      	ldr	r3, [pc, #312]	; (80058ac <MX_TIM1_Init+0x194>)
 8005774:	2200      	movs	r2, #0
 8005776:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8005778:	4b4c      	ldr	r3, [pc, #304]	; (80058ac <MX_TIM1_Init+0x194>)
 800577a:	2201      	movs	r2, #1
 800577c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800577e:	4b4b      	ldr	r3, [pc, #300]	; (80058ac <MX_TIM1_Init+0x194>)
 8005780:	2280      	movs	r2, #128	; 0x80
 8005782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005784:	4849      	ldr	r0, [pc, #292]	; (80058ac <MX_TIM1_Init+0x194>)
 8005786:	f004 fa2d 	bl	8009be4 <HAL_TIM_Base_Init>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005790:	f7ff f847 	bl	8004822 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005798:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800579a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800579e:	4619      	mov	r1, r3
 80057a0:	4842      	ldr	r0, [pc, #264]	; (80058ac <MX_TIM1_Init+0x194>)
 80057a2:	f004 fed3 	bl	800a54c <HAL_TIM_ConfigClockSource>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80057ac:	f7ff f839 	bl	8004822 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80057b0:	483e      	ldr	r0, [pc, #248]	; (80058ac <MX_TIM1_Init+0x194>)
 80057b2:	f004 fad9 	bl	8009d68 <HAL_TIM_PWM_Init>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80057bc:	f7ff f831 	bl	8004822 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057c0:	2300      	movs	r3, #0
 80057c2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80057c4:	2300      	movs	r3, #0
 80057c6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057c8:	2300      	movs	r3, #0
 80057ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80057cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80057d0:	4619      	mov	r1, r3
 80057d2:	4836      	ldr	r0, [pc, #216]	; (80058ac <MX_TIM1_Init+0x194>)
 80057d4:	f005 fcde 	bl	800b194 <HAL_TIMEx_MasterConfigSynchronization>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80057de:	f7ff f820 	bl	8004822 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80057e2:	2360      	movs	r3, #96	; 0x60
 80057e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80057e6:	2300      	movs	r3, #0
 80057e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80057ea:	2302      	movs	r3, #2
 80057ec:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80057ee:	2308      	movs	r3, #8
 80057f0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80057f2:	2304      	movs	r3, #4
 80057f4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80057f6:	2300      	movs	r3, #0
 80057f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80057fa:	2300      	movs	r3, #0
 80057fc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80057fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005802:	2200      	movs	r2, #0
 8005804:	4619      	mov	r1, r3
 8005806:	4829      	ldr	r0, [pc, #164]	; (80058ac <MX_TIM1_Init+0x194>)
 8005808:	f004 fd90 	bl	800a32c <HAL_TIM_PWM_ConfigChannel>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8005812:	f7ff f806 	bl	8004822 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005816:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800581a:	2204      	movs	r2, #4
 800581c:	4619      	mov	r1, r3
 800581e:	4823      	ldr	r0, [pc, #140]	; (80058ac <MX_TIM1_Init+0x194>)
 8005820:	f004 fd84 	bl	800a32c <HAL_TIM_PWM_ConfigChannel>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800582a:	f7fe fffa 	bl	8004822 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800582e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005832:	2208      	movs	r2, #8
 8005834:	4619      	mov	r1, r3
 8005836:	481d      	ldr	r0, [pc, #116]	; (80058ac <MX_TIM1_Init+0x194>)
 8005838:	f004 fd78 	bl	800a32c <HAL_TIM_PWM_ConfigChannel>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8005842:	f7fe ffee 	bl	8004822 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8005846:	4819      	ldr	r0, [pc, #100]	; (80058ac <MX_TIM1_Init+0x194>)
 8005848:	f005 fdc6 	bl	800b3d8 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800584c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005850:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8005852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005856:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005858:	2300      	movs	r3, #0
 800585a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 800585c:	2364      	movs	r3, #100	; 0x64
 800585e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005860:	2300      	movs	r3, #0
 8005862:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005868:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800586a:	2300      	movs	r3, #0
 800586c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800586e:	2300      	movs	r3, #0
 8005870:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005872:	2300      	movs	r3, #0
 8005874:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800587a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800587c:	2300      	movs	r3, #0
 800587e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005880:	2300      	movs	r3, #0
 8005882:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005884:	2300      	movs	r3, #0
 8005886:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005888:	1d3b      	adds	r3, r7, #4
 800588a:	4619      	mov	r1, r3
 800588c:	4807      	ldr	r0, [pc, #28]	; (80058ac <MX_TIM1_Init+0x194>)
 800588e:	f005 fd03 	bl	800b298 <HAL_TIMEx_ConfigBreakDeadTime>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8005898:	f7fe ffc3 	bl	8004822 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800589c:	4803      	ldr	r0, [pc, #12]	; (80058ac <MX_TIM1_Init+0x194>)
 800589e:	f000 f82f 	bl	8005900 <HAL_TIM_MspPostInit>

}
 80058a2:	bf00      	nop
 80058a4:	3770      	adds	r7, #112	; 0x70
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	20005058 	.word	0x20005058
 80058b0:	40012c00 	.word	0x40012c00

080058b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a0d      	ldr	r2, [pc, #52]	; (80058f8 <HAL_TIM_Base_MspInit+0x44>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d113      	bne.n	80058ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80058c6:	4b0d      	ldr	r3, [pc, #52]	; (80058fc <HAL_TIM_Base_MspInit+0x48>)
 80058c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ca:	4a0c      	ldr	r2, [pc, #48]	; (80058fc <HAL_TIM_Base_MspInit+0x48>)
 80058cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80058d0:	6613      	str	r3, [r2, #96]	; 0x60
 80058d2:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <HAL_TIM_Base_MspInit+0x48>)
 80058d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80058de:	2200      	movs	r2, #0
 80058e0:	2100      	movs	r1, #0
 80058e2:	2019      	movs	r0, #25
 80058e4:	f001 fd1b 	bl	800731e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80058e8:	2019      	movs	r0, #25
 80058ea:	f001 fd32 	bl	8007352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80058ee:	bf00      	nop
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	40012c00 	.word	0x40012c00
 80058fc:	40021000 	.word	0x40021000

08005900 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08a      	sub	sp, #40	; 0x28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005908:	f107 0314 	add.w	r3, r7, #20
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	605a      	str	r2, [r3, #4]
 8005912:	609a      	str	r2, [r3, #8]
 8005914:	60da      	str	r2, [r3, #12]
 8005916:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a2f      	ldr	r2, [pc, #188]	; (80059dc <HAL_TIM_MspPostInit+0xdc>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d157      	bne.n	80059d2 <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005922:	4b2f      	ldr	r3, [pc, #188]	; (80059e0 <HAL_TIM_MspPostInit+0xe0>)
 8005924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005926:	4a2e      	ldr	r2, [pc, #184]	; (80059e0 <HAL_TIM_MspPostInit+0xe0>)
 8005928:	f043 0304 	orr.w	r3, r3, #4
 800592c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800592e:	4b2c      	ldr	r3, [pc, #176]	; (80059e0 <HAL_TIM_MspPostInit+0xe0>)
 8005930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005932:	f003 0304 	and.w	r3, r3, #4
 8005936:	613b      	str	r3, [r7, #16]
 8005938:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800593a:	4b29      	ldr	r3, [pc, #164]	; (80059e0 <HAL_TIM_MspPostInit+0xe0>)
 800593c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800593e:	4a28      	ldr	r2, [pc, #160]	; (80059e0 <HAL_TIM_MspPostInit+0xe0>)
 8005940:	f043 0302 	orr.w	r3, r3, #2
 8005944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005946:	4b26      	ldr	r3, [pc, #152]	; (80059e0 <HAL_TIM_MspPostInit+0xe0>)
 8005948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005952:	4b23      	ldr	r3, [pc, #140]	; (80059e0 <HAL_TIM_MspPostInit+0xe0>)
 8005954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005956:	4a22      	ldr	r2, [pc, #136]	; (80059e0 <HAL_TIM_MspPostInit+0xe0>)
 8005958:	f043 0301 	orr.w	r3, r3, #1
 800595c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800595e:	4b20      	ldr	r3, [pc, #128]	; (80059e0 <HAL_TIM_MspPostInit+0xe0>)
 8005960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	60bb      	str	r3, [r7, #8]
 8005968:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800596a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800596e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005970:	2302      	movs	r3, #2
 8005972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005974:	2300      	movs	r3, #0
 8005976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005978:	2300      	movs	r3, #0
 800597a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800597c:	2304      	movs	r3, #4
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005980:	f107 0314 	add.w	r3, r7, #20
 8005984:	4619      	mov	r1, r3
 8005986:	4817      	ldr	r0, [pc, #92]	; (80059e4 <HAL_TIM_MspPostInit+0xe4>)
 8005988:	f002 fea0 	bl	80086cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800598c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005992:	2302      	movs	r3, #2
 8005994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005996:	2300      	movs	r3, #0
 8005998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800599a:	2300      	movs	r3, #0
 800599c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800599e:	2304      	movs	r3, #4
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059a2:	f107 0314 	add.w	r3, r7, #20
 80059a6:	4619      	mov	r1, r3
 80059a8:	480f      	ldr	r0, [pc, #60]	; (80059e8 <HAL_TIM_MspPostInit+0xe8>)
 80059aa:	f002 fe8f 	bl	80086cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 80059ae:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 80059b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059b4:	2302      	movs	r3, #2
 80059b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059b8:	2300      	movs	r3, #0
 80059ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059bc:	2300      	movs	r3, #0
 80059be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80059c0:	2306      	movs	r3, #6
 80059c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059c4:	f107 0314 	add.w	r3, r7, #20
 80059c8:	4619      	mov	r1, r3
 80059ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059ce:	f002 fe7d 	bl	80086cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80059d2:	bf00      	nop
 80059d4:	3728      	adds	r7, #40	; 0x28
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	40012c00 	.word	0x40012c00
 80059e0:	40021000 	.word	0x40021000
 80059e4:	48000800 	.word	0x48000800
 80059e8:	48000400 	.word	0x48000400

080059ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80059f0:	4b22      	ldr	r3, [pc, #136]	; (8005a7c <MX_USART2_UART_Init+0x90>)
 80059f2:	4a23      	ldr	r2, [pc, #140]	; (8005a80 <MX_USART2_UART_Init+0x94>)
 80059f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80059f6:	4b21      	ldr	r3, [pc, #132]	; (8005a7c <MX_USART2_UART_Init+0x90>)
 80059f8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80059fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80059fe:	4b1f      	ldr	r3, [pc, #124]	; (8005a7c <MX_USART2_UART_Init+0x90>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005a04:	4b1d      	ldr	r3, [pc, #116]	; (8005a7c <MX_USART2_UART_Init+0x90>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005a0a:	4b1c      	ldr	r3, [pc, #112]	; (8005a7c <MX_USART2_UART_Init+0x90>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005a10:	4b1a      	ldr	r3, [pc, #104]	; (8005a7c <MX_USART2_UART_Init+0x90>)
 8005a12:	220c      	movs	r2, #12
 8005a14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a16:	4b19      	ldr	r3, [pc, #100]	; (8005a7c <MX_USART2_UART_Init+0x90>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a1c:	4b17      	ldr	r3, [pc, #92]	; (8005a7c <MX_USART2_UART_Init+0x90>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a22:	4b16      	ldr	r3, [pc, #88]	; (8005a7c <MX_USART2_UART_Init+0x90>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005a28:	4b14      	ldr	r3, [pc, #80]	; (8005a7c <MX_USART2_UART_Init+0x90>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005a2e:	4b13      	ldr	r3, [pc, #76]	; (8005a7c <MX_USART2_UART_Init+0x90>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005a34:	4811      	ldr	r0, [pc, #68]	; (8005a7c <MX_USART2_UART_Init+0x90>)
 8005a36:	f005 fd4d 	bl	800b4d4 <HAL_UART_Init>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005a40:	f7fe feef 	bl	8004822 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005a44:	2100      	movs	r1, #0
 8005a46:	480d      	ldr	r0, [pc, #52]	; (8005a7c <MX_USART2_UART_Init+0x90>)
 8005a48:	f007 f951 	bl	800ccee <HAL_UARTEx_SetTxFifoThreshold>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005a52:	f7fe fee6 	bl	8004822 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005a56:	2100      	movs	r1, #0
 8005a58:	4808      	ldr	r0, [pc, #32]	; (8005a7c <MX_USART2_UART_Init+0x90>)
 8005a5a:	f007 f986 	bl	800cd6a <HAL_UARTEx_SetRxFifoThreshold>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005a64:	f7fe fedd 	bl	8004822 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005a68:	4804      	ldr	r0, [pc, #16]	; (8005a7c <MX_USART2_UART_Init+0x90>)
 8005a6a:	f007 f907 	bl	800cc7c <HAL_UARTEx_DisableFifoMode>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005a74:	f7fe fed5 	bl	8004822 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005a78:	bf00      	nop
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	200050a4 	.word	0x200050a4
 8005a80:	40004400 	.word	0x40004400

08005a84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08a      	sub	sp, #40	; 0x28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a8c:	f107 0314 	add.w	r3, r7, #20
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	605a      	str	r2, [r3, #4]
 8005a96:	609a      	str	r2, [r3, #8]
 8005a98:	60da      	str	r2, [r3, #12]
 8005a9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a1b      	ldr	r2, [pc, #108]	; (8005b10 <HAL_UART_MspInit+0x8c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d12f      	bne.n	8005b06 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005aa6:	4b1b      	ldr	r3, [pc, #108]	; (8005b14 <HAL_UART_MspInit+0x90>)
 8005aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aaa:	4a1a      	ldr	r2, [pc, #104]	; (8005b14 <HAL_UART_MspInit+0x90>)
 8005aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8005ab2:	4b18      	ldr	r3, [pc, #96]	; (8005b14 <HAL_UART_MspInit+0x90>)
 8005ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aba:	613b      	str	r3, [r7, #16]
 8005abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005abe:	4b15      	ldr	r3, [pc, #84]	; (8005b14 <HAL_UART_MspInit+0x90>)
 8005ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac2:	4a14      	ldr	r2, [pc, #80]	; (8005b14 <HAL_UART_MspInit+0x90>)
 8005ac4:	f043 0302 	orr.w	r3, r3, #2
 8005ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005aca:	4b12      	ldr	r3, [pc, #72]	; (8005b14 <HAL_UART_MspInit+0x90>)
 8005acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8005ad6:	2318      	movs	r3, #24
 8005ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ada:	2302      	movs	r3, #2
 8005adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005ae6:	2307      	movs	r3, #7
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005aea:	f107 0314 	add.w	r3, r7, #20
 8005aee:	4619      	mov	r1, r3
 8005af0:	4809      	ldr	r0, [pc, #36]	; (8005b18 <HAL_UART_MspInit+0x94>)
 8005af2:	f002 fdeb 	bl	80086cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005af6:	2200      	movs	r2, #0
 8005af8:	2100      	movs	r1, #0
 8005afa:	2026      	movs	r0, #38	; 0x26
 8005afc:	f001 fc0f 	bl	800731e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005b00:	2026      	movs	r0, #38	; 0x26
 8005b02:	f001 fc26 	bl	8007352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005b06:	bf00      	nop
 8005b08:	3728      	adds	r7, #40	; 0x28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	40004400 	.word	0x40004400
 8005b14:	40021000 	.word	0x40021000
 8005b18:	48000400 	.word	0x48000400

08005b1c <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8005b24:	1d39      	adds	r1, r7, #4
 8005b26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	4803      	ldr	r0, [pc, #12]	; (8005b3c <__io_putchar+0x20>)
 8005b2e:	f005 fd21 	bl	800b574 <HAL_UART_Transmit>
return 0;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	200050a4 	.word	0x200050a4

08005b40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8005b48:	2201      	movs	r2, #1
 8005b4a:	4904      	ldr	r1, [pc, #16]	; (8005b5c <HAL_UART_RxCpltCallback+0x1c>)
 8005b4c:	4804      	ldr	r0, [pc, #16]	; (8005b60 <HAL_UART_RxCpltCallback+0x20>)
 8005b4e:	f005 fda7 	bl	800b6a0 <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b52:	bf00      	nop
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20004c9c 	.word	0x20004c9c
 8005b60:	200050a4 	.word	0x200050a4

08005b64 <store_eeprom_regs>:

#include "user_config.h"
#include "eeprom.h"

void store_eeprom_regs()
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
	eeprom_store(__float_reg, FLOAT_REG_LEN, __int_reg, INT_REG_LEN);
 8005b68:	2380      	movs	r3, #128	; 0x80
 8005b6a:	4a03      	ldr	r2, [pc, #12]	; (8005b78 <store_eeprom_regs+0x14>)
 8005b6c:	2140      	movs	r1, #64	; 0x40
 8005b6e:	4803      	ldr	r0, [pc, #12]	; (8005b7c <store_eeprom_regs+0x18>)
 8005b70:	f7fc f8e6 	bl	8001d40 <eeprom_store>
}
 8005b74:	bf00      	nop
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	20004da0 	.word	0x20004da0
 8005b7c:	20004ca0 	.word	0x20004ca0

08005b80 <load_eeprom_regs>:

void load_eeprom_regs()
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
	eeprom_restore(__float_reg, FLOAT_REG_LEN, __int_reg, INT_REG_LEN);
 8005b84:	2380      	movs	r3, #128	; 0x80
 8005b86:	4a03      	ldr	r2, [pc, #12]	; (8005b94 <load_eeprom_regs+0x14>)
 8005b88:	2140      	movs	r1, #64	; 0x40
 8005b8a:	4803      	ldr	r0, [pc, #12]	; (8005b98 <load_eeprom_regs+0x18>)
 8005b8c:	f7fc f854 	bl	8001c38 <eeprom_restore>
}
 8005b90:	bf00      	nop
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	20004da0 	.word	0x20004da0
 8005b98:	20004ca0 	.word	0x20004ca0

08005b9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005b9c:	480d      	ldr	r0, [pc, #52]	; (8005bd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005b9e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ba0:	480d      	ldr	r0, [pc, #52]	; (8005bd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005ba2:	490e      	ldr	r1, [pc, #56]	; (8005bdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005ba4:	4a0e      	ldr	r2, [pc, #56]	; (8005be0 <LoopForever+0xe>)
  movs r3, #0
 8005ba6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005ba8:	e002      	b.n	8005bb0 <LoopCopyDataInit>

08005baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005bae:	3304      	adds	r3, #4

08005bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005bb4:	d3f9      	bcc.n	8005baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005bb6:	4a0b      	ldr	r2, [pc, #44]	; (8005be4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005bb8:	4c0b      	ldr	r4, [pc, #44]	; (8005be8 <LoopForever+0x16>)
  movs r3, #0
 8005bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005bbc:	e001      	b.n	8005bc2 <LoopFillZerobss>

08005bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005bc0:	3204      	adds	r2, #4

08005bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005bc4:	d3fb      	bcc.n	8005bbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005bc6:	f7ff fd95 	bl	80056f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005bca:	f007 f969 	bl	800cea0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005bce:	f7fe fa8d 	bl	80040ec <main>

08005bd2 <LoopForever>:

LoopForever:
    b LoopForever
 8005bd2:	e7fe      	b.n	8005bd2 <LoopForever>
  ldr   r0, =_estack
 8005bd4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005bdc:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8005be0:	08012f90 	.word	0x08012f90
  ldr r2, =_sbss
 8005be4:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8005be8:	20005148 	.word	0x20005148

08005bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005bec:	e7fe      	b.n	8005bec <ADC1_2_IRQHandler>

08005bee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b082      	sub	sp, #8
 8005bf2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005bf8:	2003      	movs	r0, #3
 8005bfa:	f001 fb85 	bl	8007308 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005bfe:	2000      	movs	r0, #0
 8005c00:	f000 f80e 	bl	8005c20 <HAL_InitTick>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	71fb      	strb	r3, [r7, #7]
 8005c0e:	e001      	b.n	8005c14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005c10:	f7ff fad2 	bl	80051b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005c14:	79fb      	ldrb	r3, [r7, #7]

}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005c2c:	4b16      	ldr	r3, [pc, #88]	; (8005c88 <HAL_InitTick+0x68>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d022      	beq.n	8005c7a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005c34:	4b15      	ldr	r3, [pc, #84]	; (8005c8c <HAL_InitTick+0x6c>)
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	4b13      	ldr	r3, [pc, #76]	; (8005c88 <HAL_InitTick+0x68>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c40:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f001 fb90 	bl	800736e <HAL_SYSTICK_Config>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10f      	bne.n	8005c74 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b0f      	cmp	r3, #15
 8005c58:	d809      	bhi.n	8005c6e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	6879      	ldr	r1, [r7, #4]
 8005c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c62:	f001 fb5c 	bl	800731e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005c66:	4a0a      	ldr	r2, [pc, #40]	; (8005c90 <HAL_InitTick+0x70>)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	e007      	b.n	8005c7e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	73fb      	strb	r3, [r7, #15]
 8005c72:	e004      	b.n	8005c7e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	73fb      	strb	r3, [r7, #15]
 8005c78:	e001      	b.n	8005c7e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	20000008 	.word	0x20000008
 8005c8c:	20000000 	.word	0x20000000
 8005c90:	20000004 	.word	0x20000004

08005c94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c98:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <HAL_IncTick+0x1c>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <HAL_IncTick+0x20>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	4a03      	ldr	r2, [pc, #12]	; (8005cb0 <HAL_IncTick+0x1c>)
 8005ca4:	6013      	str	r3, [r2, #0]
}
 8005ca6:	bf00      	nop
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	20005134 	.word	0x20005134
 8005cb4:	20000008 	.word	0x20000008

08005cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	af00      	add	r7, sp, #0
  return uwTick;
 8005cbc:	4b03      	ldr	r3, [pc, #12]	; (8005ccc <HAL_GetTick+0x14>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	20005134 	.word	0x20005134

08005cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005cd8:	f7ff ffee 	bl	8005cb8 <HAL_GetTick>
 8005cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce8:	d004      	beq.n	8005cf4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005cea:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <HAL_Delay+0x40>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005cf4:	bf00      	nop
 8005cf6:	f7ff ffdf 	bl	8005cb8 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d8f7      	bhi.n	8005cf6 <HAL_Delay+0x26>
  {
  }
}
 8005d06:	bf00      	nop
 8005d08:	bf00      	nop
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	20000008 	.word	0x20000008

08005d14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	609a      	str	r2, [r3, #8]
}
 8005d2e:	bf00      	nop
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	609a      	str	r2, [r3, #8]
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	3360      	adds	r3, #96	; 0x60
 8005d8e:	461a      	mov	r2, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	4b08      	ldr	r3, [pc, #32]	; (8005dc0 <LL_ADC_SetOffset+0x44>)
 8005d9e:	4013      	ands	r3, r2
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005db4:	bf00      	nop
 8005db6:	371c      	adds	r7, #28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	03fff000 	.word	0x03fff000

08005dc4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	3360      	adds	r3, #96	; 0x60
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3360      	adds	r3, #96	; 0x60
 8005e00:	461a      	mov	r2, r3
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	431a      	orrs	r2, r3
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005e1a:	bf00      	nop
 8005e1c:	371c      	adds	r7, #28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b087      	sub	sp, #28
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	60f8      	str	r0, [r7, #12]
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3360      	adds	r3, #96	; 0x60
 8005e36:	461a      	mov	r2, r3
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005e50:	bf00      	nop
 8005e52:	371c      	adds	r7, #28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	3360      	adds	r3, #96	; 0x60
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	431a      	orrs	r2, r3
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005e86:	bf00      	nop
 8005e88:	371c      	adds	r7, #28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	615a      	str	r2, [r3, #20]
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e000      	b.n	8005ed2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b087      	sub	sp, #28
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	60f8      	str	r0, [r7, #12]
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	3330      	adds	r3, #48	; 0x30
 8005eee:	461a      	mov	r2, r3
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	0a1b      	lsrs	r3, r3, #8
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	f003 030c 	and.w	r3, r3, #12
 8005efa:	4413      	add	r3, r2
 8005efc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f003 031f 	and.w	r3, r3, #31
 8005f08:	211f      	movs	r1, #31
 8005f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0e:	43db      	mvns	r3, r3
 8005f10:	401a      	ands	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	0e9b      	lsrs	r3, r3, #26
 8005f16:	f003 011f 	and.w	r1, r3, #31
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f003 031f 	and.w	r3, r3, #31
 8005f20:	fa01 f303 	lsl.w	r3, r1, r3
 8005f24:	431a      	orrs	r2, r3
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005f2a:	bf00      	nop
 8005f2c:	371c      	adds	r7, #28
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b087      	sub	sp, #28
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	60f8      	str	r0, [r7, #12]
 8005f3e:	60b9      	str	r1, [r7, #8]
 8005f40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	3314      	adds	r3, #20
 8005f46:	461a      	mov	r2, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	0e5b      	lsrs	r3, r3, #25
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	f003 0304 	and.w	r3, r3, #4
 8005f52:	4413      	add	r3, r2
 8005f54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	0d1b      	lsrs	r3, r3, #20
 8005f5e:	f003 031f 	and.w	r3, r3, #31
 8005f62:	2107      	movs	r1, #7
 8005f64:	fa01 f303 	lsl.w	r3, r1, r3
 8005f68:	43db      	mvns	r3, r3
 8005f6a:	401a      	ands	r2, r3
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	0d1b      	lsrs	r3, r3, #20
 8005f70:	f003 031f 	and.w	r3, r3, #31
 8005f74:	6879      	ldr	r1, [r7, #4]
 8005f76:	fa01 f303 	lsl.w	r3, r1, r3
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005f80:	bf00      	nop
 8005f82:	371c      	adds	r7, #28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fa4:	43db      	mvns	r3, r3
 8005fa6:	401a      	ands	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f003 0318 	and.w	r3, r3, #24
 8005fae:	4908      	ldr	r1, [pc, #32]	; (8005fd0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005fb0:	40d9      	lsrs	r1, r3
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	400b      	ands	r3, r1
 8005fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005fc2:	bf00      	nop
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	0007ffff 	.word	0x0007ffff

08005fd4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 031f 	and.w	r3, r3, #31
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006000:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6093      	str	r3, [r2, #8]
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006028:	d101      	bne.n	800602e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800602a:	2301      	movs	r3, #1
 800602c:	e000      	b.n	8006030 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800604c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006050:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006074:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006078:	d101      	bne.n	800607e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800607a:	2301      	movs	r3, #1
 800607c:	e000      	b.n	8006080 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800609c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060a0:	f043 0201 	orr.w	r2, r3, #1
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d101      	bne.n	80060cc <LL_ADC_IsEnabled+0x18>
 80060c8:	2301      	movs	r3, #1
 80060ca:	e000      	b.n	80060ce <LL_ADC_IsEnabled+0x1a>
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060ee:	f043 0204 	orr.w	r2, r3, #4
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 0304 	and.w	r3, r3, #4
 8006112:	2b04      	cmp	r3, #4
 8006114:	d101      	bne.n	800611a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	2b08      	cmp	r3, #8
 800613a:	d101      	bne.n	8006140 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800613c:	2301      	movs	r3, #1
 800613e:	e000      	b.n	8006142 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
	...

08006150 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006150:	b590      	push	{r4, r7, lr}
 8006152:	b089      	sub	sp, #36	; 0x24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006158:	2300      	movs	r3, #0
 800615a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800615c:	2300      	movs	r3, #0
 800615e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e177      	b.n	800645a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d109      	bne.n	800618c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f7fb f873 	bl	8001264 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4618      	mov	r0, r3
 8006192:	f7ff ff3f 	bl	8006014 <LL_ADC_IsDeepPowerDownEnabled>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d004      	beq.n	80061a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7ff ff25 	bl	8005ff0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7ff ff5a 	bl	8006064 <LL_ADC_IsInternalRegulatorEnabled>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d115      	bne.n	80061e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff ff3e 	bl	800603c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80061c0:	4b9c      	ldr	r3, [pc, #624]	; (8006434 <HAL_ADC_Init+0x2e4>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	099b      	lsrs	r3, r3, #6
 80061c6:	4a9c      	ldr	r2, [pc, #624]	; (8006438 <HAL_ADC_Init+0x2e8>)
 80061c8:	fba2 2303 	umull	r2, r3, r2, r3
 80061cc:	099b      	lsrs	r3, r3, #6
 80061ce:	3301      	adds	r3, #1
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80061d4:	e002      	b.n	80061dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	3b01      	subs	r3, #1
 80061da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1f9      	bne.n	80061d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff ff3c 	bl	8006064 <LL_ADC_IsInternalRegulatorEnabled>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10d      	bne.n	800620e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f6:	f043 0210 	orr.w	r2, r3, #16
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006202:	f043 0201 	orr.w	r2, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff ff75 	bl	8006102 <LL_ADC_REG_IsConversionOngoing>
 8006218:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800621e:	f003 0310 	and.w	r3, r3, #16
 8006222:	2b00      	cmp	r3, #0
 8006224:	f040 8110 	bne.w	8006448 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	2b00      	cmp	r3, #0
 800622c:	f040 810c 	bne.w	8006448 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006234:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006238:	f043 0202 	orr.w	r2, r3, #2
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff ff35 	bl	80060b4 <LL_ADC_IsEnabled>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d111      	bne.n	8006274 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006250:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006254:	f7ff ff2e 	bl	80060b4 <LL_ADC_IsEnabled>
 8006258:	4604      	mov	r4, r0
 800625a:	4878      	ldr	r0, [pc, #480]	; (800643c <HAL_ADC_Init+0x2ec>)
 800625c:	f7ff ff2a 	bl	80060b4 <LL_ADC_IsEnabled>
 8006260:	4603      	mov	r3, r0
 8006262:	4323      	orrs	r3, r4
 8006264:	2b00      	cmp	r3, #0
 8006266:	d105      	bne.n	8006274 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	4619      	mov	r1, r3
 800626e:	4874      	ldr	r0, [pc, #464]	; (8006440 <HAL_ADC_Init+0x2f0>)
 8006270:	f7ff fd50 	bl	8005d14 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	7f5b      	ldrb	r3, [r3, #29]
 8006278:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800627e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006284:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800628a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006292:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006294:	4313      	orrs	r3, r2
 8006296:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d106      	bne.n	80062b0 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a6:	3b01      	subs	r3, #1
 80062a8:	045b      	lsls	r3, r3, #17
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d009      	beq.n	80062cc <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062bc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68da      	ldr	r2, [r3, #12]
 80062d2:	4b5c      	ldr	r3, [pc, #368]	; (8006444 <HAL_ADC_Init+0x2f4>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	6812      	ldr	r2, [r2, #0]
 80062da:	69b9      	ldr	r1, [r7, #24]
 80062dc:	430b      	orrs	r3, r1
 80062de:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7ff ff01 	bl	8006102 <LL_ADC_REG_IsConversionOngoing>
 8006300:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff ff0e 	bl	8006128 <LL_ADC_INJ_IsConversionOngoing>
 800630c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d16d      	bne.n	80063f0 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d16a      	bne.n	80063f0 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800631e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006326:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006328:	4313      	orrs	r3, r2
 800632a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006336:	f023 0302 	bic.w	r3, r3, #2
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	6812      	ldr	r2, [r2, #0]
 800633e:	69b9      	ldr	r1, [r7, #24]
 8006340:	430b      	orrs	r3, r1
 8006342:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d017      	beq.n	800637c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691a      	ldr	r2, [r3, #16]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800635a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006364:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006368:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	6911      	ldr	r1, [r2, #16]
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6812      	ldr	r2, [r2, #0]
 8006374:	430b      	orrs	r3, r1
 8006376:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800637a:	e013      	b.n	80063a4 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	691a      	ldr	r2, [r3, #16]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800638a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	6812      	ldr	r2, [r2, #0]
 8006398:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800639c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063a0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d118      	bne.n	80063e0 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80063b8:	f023 0304 	bic.w	r3, r3, #4
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80063c4:	4311      	orrs	r1, r2
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80063ca:	4311      	orrs	r1, r2
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80063d0:	430a      	orrs	r2, r1
 80063d2:	431a      	orrs	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f042 0201 	orr.w	r2, r2, #1
 80063dc:	611a      	str	r2, [r3, #16]
 80063de:	e007      	b.n	80063f0 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	691a      	ldr	r2, [r3, #16]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0201 	bic.w	r2, r2, #1
 80063ee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d10c      	bne.n	8006412 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fe:	f023 010f 	bic.w	r1, r3, #15
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	1e5a      	subs	r2, r3, #1
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	631a      	str	r2, [r3, #48]	; 0x30
 8006410:	e007      	b.n	8006422 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 020f 	bic.w	r2, r2, #15
 8006420:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006426:	f023 0303 	bic.w	r3, r3, #3
 800642a:	f043 0201 	orr.w	r2, r3, #1
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	65da      	str	r2, [r3, #92]	; 0x5c
 8006432:	e011      	b.n	8006458 <HAL_ADC_Init+0x308>
 8006434:	20000000 	.word	0x20000000
 8006438:	053e2d63 	.word	0x053e2d63
 800643c:	50000100 	.word	0x50000100
 8006440:	50000300 	.word	0x50000300
 8006444:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800644c:	f043 0210 	orr.w	r2, r3, #16
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006458:	7ffb      	ldrb	r3, [r7, #31]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3724      	adds	r7, #36	; 0x24
 800645e:	46bd      	mov	sp, r7
 8006460:	bd90      	pop	{r4, r7, pc}
 8006462:	bf00      	nop

08006464 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006470:	4851      	ldr	r0, [pc, #324]	; (80065b8 <HAL_ADC_Start_DMA+0x154>)
 8006472:	f7ff fdaf 	bl	8005fd4 <LL_ADC_GetMultimode>
 8006476:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff fe40 	bl	8006102 <LL_ADC_REG_IsConversionOngoing>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	f040 808f 	bne.w	80065a8 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006490:	2b01      	cmp	r3, #1
 8006492:	d101      	bne.n	8006498 <HAL_ADC_Start_DMA+0x34>
 8006494:	2302      	movs	r3, #2
 8006496:	e08a      	b.n	80065ae <HAL_ADC_Start_DMA+0x14a>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d005      	beq.n	80064b2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	2b05      	cmp	r3, #5
 80064aa:	d002      	beq.n	80064b2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	2b09      	cmp	r3, #9
 80064b0:	d173      	bne.n	800659a <HAL_ADC_Start_DMA+0x136>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 fc98 	bl	8006de8 <ADC_Enable>
 80064b8:	4603      	mov	r3, r0
 80064ba:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d166      	bne.n	8006590 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80064ca:	f023 0301 	bic.w	r3, r3, #1
 80064ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a38      	ldr	r2, [pc, #224]	; (80065bc <HAL_ADC_Start_DMA+0x158>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d002      	beq.n	80064e6 <HAL_ADC_Start_DMA+0x82>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	e001      	b.n	80064ea <HAL_ADC_Start_DMA+0x86>
 80064e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	6812      	ldr	r2, [r2, #0]
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d002      	beq.n	80064f8 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d105      	bne.n	8006504 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d006      	beq.n	800651e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006514:	f023 0206 	bic.w	r2, r3, #6
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	661a      	str	r2, [r3, #96]	; 0x60
 800651c:	e002      	b.n	8006524 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006528:	4a25      	ldr	r2, [pc, #148]	; (80065c0 <HAL_ADC_Start_DMA+0x15c>)
 800652a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006530:	4a24      	ldr	r2, [pc, #144]	; (80065c4 <HAL_ADC_Start_DMA+0x160>)
 8006532:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006538:	4a23      	ldr	r2, [pc, #140]	; (80065c8 <HAL_ADC_Start_DMA+0x164>)
 800653a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	221c      	movs	r2, #28
 8006542:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0210 	orr.w	r2, r2, #16
 800655a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0201 	orr.w	r2, r2, #1
 800656a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3340      	adds	r3, #64	; 0x40
 8006576:	4619      	mov	r1, r3
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f000 ffac 	bl	80074d8 <HAL_DMA_Start_IT>
 8006580:	4603      	mov	r3, r0
 8006582:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4618      	mov	r0, r3
 800658a:	f7ff fda6 	bl	80060da <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800658e:	e00d      	b.n	80065ac <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8006598:	e008      	b.n	80065ac <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80065a6:	e001      	b.n	80065ac <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80065a8:	2302      	movs	r3, #2
 80065aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80065ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	50000300 	.word	0x50000300
 80065bc:	50000100 	.word	0x50000100
 80065c0:	08006ead 	.word	0x08006ead
 80065c4:	08006f85 	.word	0x08006f85
 80065c8:	08006fa1 	.word	0x08006fa1

080065cc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b0b6      	sub	sp, #216	; 0xd8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006618:	2300      	movs	r3, #0
 800661a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006622:	2b01      	cmp	r3, #1
 8006624:	d101      	bne.n	800662a <HAL_ADC_ConfigChannel+0x22>
 8006626:	2302      	movs	r3, #2
 8006628:	e3c8      	b.n	8006dbc <HAL_ADC_ConfigChannel+0x7b4>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff fd63 	bl	8006102 <LL_ADC_REG_IsConversionOngoing>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	f040 83ad 	bne.w	8006d9e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6818      	ldr	r0, [r3, #0]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	6859      	ldr	r1, [r3, #4]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	461a      	mov	r2, r3
 8006652:	f7ff fc44 	bl	8005ede <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4618      	mov	r0, r3
 800665c:	f7ff fd51 	bl	8006102 <LL_ADC_REG_IsConversionOngoing>
 8006660:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4618      	mov	r0, r3
 800666a:	f7ff fd5d 	bl	8006128 <LL_ADC_INJ_IsConversionOngoing>
 800666e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006672:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006676:	2b00      	cmp	r3, #0
 8006678:	f040 81d9 	bne.w	8006a2e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800667c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006680:	2b00      	cmp	r3, #0
 8006682:	f040 81d4 	bne.w	8006a2e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800668e:	d10f      	bne.n	80066b0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6818      	ldr	r0, [r3, #0]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2200      	movs	r2, #0
 800669a:	4619      	mov	r1, r3
 800669c:	f7ff fc4b 	bl	8005f36 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff fbf2 	bl	8005e92 <LL_ADC_SetSamplingTimeCommonConfig>
 80066ae:	e00e      	b.n	80066ce <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6818      	ldr	r0, [r3, #0]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	6819      	ldr	r1, [r3, #0]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	461a      	mov	r2, r3
 80066be:	f7ff fc3a 	bl	8005f36 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2100      	movs	r1, #0
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7ff fbe2 	bl	8005e92 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	695a      	ldr	r2, [r3, #20]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	08db      	lsrs	r3, r3, #3
 80066da:	f003 0303 	and.w	r3, r3, #3
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	fa02 f303 	lsl.w	r3, r2, r3
 80066e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d022      	beq.n	8006736 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6818      	ldr	r0, [r3, #0]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	6919      	ldr	r1, [r3, #16]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006700:	f7ff fb3c 	bl	8005d7c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6818      	ldr	r0, [r3, #0]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	6919      	ldr	r1, [r3, #16]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	461a      	mov	r2, r3
 8006712:	f7ff fb88 	bl	8005e26 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6818      	ldr	r0, [r3, #0]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	6919      	ldr	r1, [r3, #16]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	7f1b      	ldrb	r3, [r3, #28]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d102      	bne.n	800672c <HAL_ADC_ConfigChannel+0x124>
 8006726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800672a:	e000      	b.n	800672e <HAL_ADC_ConfigChannel+0x126>
 800672c:	2300      	movs	r3, #0
 800672e:	461a      	mov	r2, r3
 8006730:	f7ff fb94 	bl	8005e5c <LL_ADC_SetOffsetSaturation>
 8006734:	e17b      	b.n	8006a2e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2100      	movs	r1, #0
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff fb41 	bl	8005dc4 <LL_ADC_GetOffsetChannel>
 8006742:	4603      	mov	r3, r0
 8006744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10a      	bne.n	8006762 <HAL_ADC_ConfigChannel+0x15a>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2100      	movs	r1, #0
 8006752:	4618      	mov	r0, r3
 8006754:	f7ff fb36 	bl	8005dc4 <LL_ADC_GetOffsetChannel>
 8006758:	4603      	mov	r3, r0
 800675a:	0e9b      	lsrs	r3, r3, #26
 800675c:	f003 021f 	and.w	r2, r3, #31
 8006760:	e01e      	b.n	80067a0 <HAL_ADC_ConfigChannel+0x198>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2100      	movs	r1, #0
 8006768:	4618      	mov	r0, r3
 800676a:	f7ff fb2b 	bl	8005dc4 <LL_ADC_GetOffsetChannel>
 800676e:	4603      	mov	r3, r0
 8006770:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006774:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006778:	fa93 f3a3 	rbit	r3, r3
 800677c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006780:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006784:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006788:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d101      	bne.n	8006794 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8006790:	2320      	movs	r3, #32
 8006792:	e004      	b.n	800679e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8006794:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006798:	fab3 f383 	clz	r3, r3
 800679c:	b2db      	uxtb	r3, r3
 800679e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d105      	bne.n	80067b8 <HAL_ADC_ConfigChannel+0x1b0>
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	0e9b      	lsrs	r3, r3, #26
 80067b2:	f003 031f 	and.w	r3, r3, #31
 80067b6:	e018      	b.n	80067ea <HAL_ADC_ConfigChannel+0x1e2>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80067c4:	fa93 f3a3 	rbit	r3, r3
 80067c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80067cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80067d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80067dc:	2320      	movs	r3, #32
 80067de:	e004      	b.n	80067ea <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80067e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80067e4:	fab3 f383 	clz	r3, r3
 80067e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d106      	bne.n	80067fc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2200      	movs	r2, #0
 80067f4:	2100      	movs	r1, #0
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff fafa 	bl	8005df0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2101      	movs	r1, #1
 8006802:	4618      	mov	r0, r3
 8006804:	f7ff fade 	bl	8005dc4 <LL_ADC_GetOffsetChannel>
 8006808:	4603      	mov	r3, r0
 800680a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10a      	bne.n	8006828 <HAL_ADC_ConfigChannel+0x220>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2101      	movs	r1, #1
 8006818:	4618      	mov	r0, r3
 800681a:	f7ff fad3 	bl	8005dc4 <LL_ADC_GetOffsetChannel>
 800681e:	4603      	mov	r3, r0
 8006820:	0e9b      	lsrs	r3, r3, #26
 8006822:	f003 021f 	and.w	r2, r3, #31
 8006826:	e01e      	b.n	8006866 <HAL_ADC_ConfigChannel+0x25e>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2101      	movs	r1, #1
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff fac8 	bl	8005dc4 <LL_ADC_GetOffsetChannel>
 8006834:	4603      	mov	r3, r0
 8006836:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800683a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800683e:	fa93 f3a3 	rbit	r3, r3
 8006842:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006846:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800684a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800684e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8006856:	2320      	movs	r3, #32
 8006858:	e004      	b.n	8006864 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800685a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800685e:	fab3 f383 	clz	r3, r3
 8006862:	b2db      	uxtb	r3, r3
 8006864:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800686e:	2b00      	cmp	r3, #0
 8006870:	d105      	bne.n	800687e <HAL_ADC_ConfigChannel+0x276>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	0e9b      	lsrs	r3, r3, #26
 8006878:	f003 031f 	and.w	r3, r3, #31
 800687c:	e018      	b.n	80068b0 <HAL_ADC_ConfigChannel+0x2a8>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006886:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800688a:	fa93 f3a3 	rbit	r3, r3
 800688e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006892:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006896:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800689a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80068a2:	2320      	movs	r3, #32
 80068a4:	e004      	b.n	80068b0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80068a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068aa:	fab3 f383 	clz	r3, r3
 80068ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d106      	bne.n	80068c2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2200      	movs	r2, #0
 80068ba:	2101      	movs	r1, #1
 80068bc:	4618      	mov	r0, r3
 80068be:	f7ff fa97 	bl	8005df0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2102      	movs	r1, #2
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff fa7b 	bl	8005dc4 <LL_ADC_GetOffsetChannel>
 80068ce:	4603      	mov	r3, r0
 80068d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10a      	bne.n	80068ee <HAL_ADC_ConfigChannel+0x2e6>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2102      	movs	r1, #2
 80068de:	4618      	mov	r0, r3
 80068e0:	f7ff fa70 	bl	8005dc4 <LL_ADC_GetOffsetChannel>
 80068e4:	4603      	mov	r3, r0
 80068e6:	0e9b      	lsrs	r3, r3, #26
 80068e8:	f003 021f 	and.w	r2, r3, #31
 80068ec:	e01e      	b.n	800692c <HAL_ADC_ConfigChannel+0x324>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2102      	movs	r1, #2
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff fa65 	bl	8005dc4 <LL_ADC_GetOffsetChannel>
 80068fa:	4603      	mov	r3, r0
 80068fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006900:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006904:	fa93 f3a3 	rbit	r3, r3
 8006908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800690c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006910:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006914:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800691c:	2320      	movs	r3, #32
 800691e:	e004      	b.n	800692a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8006920:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006924:	fab3 f383 	clz	r3, r3
 8006928:	b2db      	uxtb	r3, r3
 800692a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006934:	2b00      	cmp	r3, #0
 8006936:	d105      	bne.n	8006944 <HAL_ADC_ConfigChannel+0x33c>
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	0e9b      	lsrs	r3, r3, #26
 800693e:	f003 031f 	and.w	r3, r3, #31
 8006942:	e016      	b.n	8006972 <HAL_ADC_ConfigChannel+0x36a>
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800694c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006950:	fa93 f3a3 	rbit	r3, r3
 8006954:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006956:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800695c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8006964:	2320      	movs	r3, #32
 8006966:	e004      	b.n	8006972 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8006968:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800696c:	fab3 f383 	clz	r3, r3
 8006970:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006972:	429a      	cmp	r2, r3
 8006974:	d106      	bne.n	8006984 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2200      	movs	r2, #0
 800697c:	2102      	movs	r1, #2
 800697e:	4618      	mov	r0, r3
 8006980:	f7ff fa36 	bl	8005df0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2103      	movs	r1, #3
 800698a:	4618      	mov	r0, r3
 800698c:	f7ff fa1a 	bl	8005dc4 <LL_ADC_GetOffsetChannel>
 8006990:	4603      	mov	r3, r0
 8006992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10a      	bne.n	80069b0 <HAL_ADC_ConfigChannel+0x3a8>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2103      	movs	r1, #3
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff fa0f 	bl	8005dc4 <LL_ADC_GetOffsetChannel>
 80069a6:	4603      	mov	r3, r0
 80069a8:	0e9b      	lsrs	r3, r3, #26
 80069aa:	f003 021f 	and.w	r2, r3, #31
 80069ae:	e017      	b.n	80069e0 <HAL_ADC_ConfigChannel+0x3d8>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2103      	movs	r1, #3
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7ff fa04 	bl	8005dc4 <LL_ADC_GetOffsetChannel>
 80069bc:	4603      	mov	r3, r0
 80069be:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069c2:	fa93 f3a3 	rbit	r3, r3
 80069c6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80069c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069ca:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80069cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80069d2:	2320      	movs	r3, #32
 80069d4:	e003      	b.n	80069de <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80069d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069d8:	fab3 f383 	clz	r3, r3
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d105      	bne.n	80069f8 <HAL_ADC_ConfigChannel+0x3f0>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	0e9b      	lsrs	r3, r3, #26
 80069f2:	f003 031f 	and.w	r3, r3, #31
 80069f6:	e011      	b.n	8006a1c <HAL_ADC_ConfigChannel+0x414>
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a00:	fa93 f3a3 	rbit	r3, r3
 8006a04:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006a06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a08:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8006a10:	2320      	movs	r3, #32
 8006a12:	e003      	b.n	8006a1c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8006a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a16:	fab3 f383 	clz	r3, r3
 8006a1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d106      	bne.n	8006a2e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2200      	movs	r2, #0
 8006a26:	2103      	movs	r1, #3
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7ff f9e1 	bl	8005df0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7ff fb3e 	bl	80060b4 <LL_ADC_IsEnabled>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f040 8140 	bne.w	8006cc0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6818      	ldr	r0, [r3, #0]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	6819      	ldr	r1, [r3, #0]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f7ff fa9d 	bl	8005f8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	4a8f      	ldr	r2, [pc, #572]	; (8006c94 <HAL_ADC_ConfigChannel+0x68c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	f040 8131 	bne.w	8006cc0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10b      	bne.n	8006a86 <HAL_ADC_ConfigChannel+0x47e>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	0e9b      	lsrs	r3, r3, #26
 8006a74:	3301      	adds	r3, #1
 8006a76:	f003 031f 	and.w	r3, r3, #31
 8006a7a:	2b09      	cmp	r3, #9
 8006a7c:	bf94      	ite	ls
 8006a7e:	2301      	movls	r3, #1
 8006a80:	2300      	movhi	r3, #0
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	e019      	b.n	8006aba <HAL_ADC_ConfigChannel+0x4b2>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a8e:	fa93 f3a3 	rbit	r3, r3
 8006a92:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006a94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a96:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006a98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d101      	bne.n	8006aa2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8006a9e:	2320      	movs	r3, #32
 8006aa0:	e003      	b.n	8006aaa <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8006aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006aa4:	fab3 f383 	clz	r3, r3
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	3301      	adds	r3, #1
 8006aac:	f003 031f 	and.w	r3, r3, #31
 8006ab0:	2b09      	cmp	r3, #9
 8006ab2:	bf94      	ite	ls
 8006ab4:	2301      	movls	r3, #1
 8006ab6:	2300      	movhi	r3, #0
 8006ab8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d079      	beq.n	8006bb2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d107      	bne.n	8006ada <HAL_ADC_ConfigChannel+0x4d2>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	0e9b      	lsrs	r3, r3, #26
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	069b      	lsls	r3, r3, #26
 8006ad4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ad8:	e015      	b.n	8006b06 <HAL_ADC_ConfigChannel+0x4fe>
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ae2:	fa93 f3a3 	rbit	r3, r3
 8006ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aea:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8006af2:	2320      	movs	r3, #32
 8006af4:	e003      	b.n	8006afe <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8006af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006af8:	fab3 f383 	clz	r3, r3
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	3301      	adds	r3, #1
 8006b00:	069b      	lsls	r3, r3, #26
 8006b02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d109      	bne.n	8006b26 <HAL_ADC_ConfigChannel+0x51e>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	0e9b      	lsrs	r3, r3, #26
 8006b18:	3301      	adds	r3, #1
 8006b1a:	f003 031f 	and.w	r3, r3, #31
 8006b1e:	2101      	movs	r1, #1
 8006b20:	fa01 f303 	lsl.w	r3, r1, r3
 8006b24:	e017      	b.n	8006b56 <HAL_ADC_ConfigChannel+0x54e>
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b2e:	fa93 f3a3 	rbit	r3, r3
 8006b32:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b36:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8006b3e:	2320      	movs	r3, #32
 8006b40:	e003      	b.n	8006b4a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8006b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b44:	fab3 f383 	clz	r3, r3
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	f003 031f 	and.w	r3, r3, #31
 8006b50:	2101      	movs	r1, #1
 8006b52:	fa01 f303 	lsl.w	r3, r1, r3
 8006b56:	ea42 0103 	orr.w	r1, r2, r3
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10a      	bne.n	8006b7c <HAL_ADC_ConfigChannel+0x574>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	0e9b      	lsrs	r3, r3, #26
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	f003 021f 	and.w	r2, r3, #31
 8006b72:	4613      	mov	r3, r2
 8006b74:	005b      	lsls	r3, r3, #1
 8006b76:	4413      	add	r3, r2
 8006b78:	051b      	lsls	r3, r3, #20
 8006b7a:	e018      	b.n	8006bae <HAL_ADC_ConfigChannel+0x5a6>
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b84:	fa93 f3a3 	rbit	r3, r3
 8006b88:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8006b94:	2320      	movs	r3, #32
 8006b96:	e003      	b.n	8006ba0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8006b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b9a:	fab3 f383 	clz	r3, r3
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	f003 021f 	and.w	r2, r3, #31
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	4413      	add	r3, r2
 8006bac:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	e081      	b.n	8006cb6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d107      	bne.n	8006bce <HAL_ADC_ConfigChannel+0x5c6>
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	0e9b      	lsrs	r3, r3, #26
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	069b      	lsls	r3, r3, #26
 8006bc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006bcc:	e015      	b.n	8006bfa <HAL_ADC_ConfigChannel+0x5f2>
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd6:	fa93 f3a3 	rbit	r3, r3
 8006bda:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bde:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8006be6:	2320      	movs	r3, #32
 8006be8:	e003      	b.n	8006bf2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	fab3 f383 	clz	r3, r3
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	069b      	lsls	r3, r3, #26
 8006bf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d109      	bne.n	8006c1a <HAL_ADC_ConfigChannel+0x612>
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	0e9b      	lsrs	r3, r3, #26
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	f003 031f 	and.w	r3, r3, #31
 8006c12:	2101      	movs	r1, #1
 8006c14:	fa01 f303 	lsl.w	r3, r1, r3
 8006c18:	e017      	b.n	8006c4a <HAL_ADC_ConfigChannel+0x642>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	fa93 f3a3 	rbit	r3, r3
 8006c26:	61fb      	str	r3, [r7, #28]
  return result;
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8006c32:	2320      	movs	r3, #32
 8006c34:	e003      	b.n	8006c3e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	fab3 f383 	clz	r3, r3
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	3301      	adds	r3, #1
 8006c40:	f003 031f 	and.w	r3, r3, #31
 8006c44:	2101      	movs	r1, #1
 8006c46:	fa01 f303 	lsl.w	r3, r1, r3
 8006c4a:	ea42 0103 	orr.w	r1, r2, r3
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10d      	bne.n	8006c76 <HAL_ADC_ConfigChannel+0x66e>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	0e9b      	lsrs	r3, r3, #26
 8006c60:	3301      	adds	r3, #1
 8006c62:	f003 021f 	and.w	r2, r3, #31
 8006c66:	4613      	mov	r3, r2
 8006c68:	005b      	lsls	r3, r3, #1
 8006c6a:	4413      	add	r3, r2
 8006c6c:	3b1e      	subs	r3, #30
 8006c6e:	051b      	lsls	r3, r3, #20
 8006c70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c74:	e01e      	b.n	8006cb4 <HAL_ADC_ConfigChannel+0x6ac>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	fa93 f3a3 	rbit	r3, r3
 8006c82:	613b      	str	r3, [r7, #16]
  return result;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d104      	bne.n	8006c98 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8006c8e:	2320      	movs	r3, #32
 8006c90:	e006      	b.n	8006ca0 <HAL_ADC_ConfigChannel+0x698>
 8006c92:	bf00      	nop
 8006c94:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	fab3 f383 	clz	r3, r3
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	f003 021f 	and.w	r2, r3, #31
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	4413      	add	r3, r2
 8006cac:	3b1e      	subs	r3, #30
 8006cae:	051b      	lsls	r3, r3, #20
 8006cb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006cb4:	430b      	orrs	r3, r1
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	6892      	ldr	r2, [r2, #8]
 8006cba:	4619      	mov	r1, r3
 8006cbc:	f7ff f93b 	bl	8005f36 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	4b3f      	ldr	r3, [pc, #252]	; (8006dc4 <HAL_ADC_ConfigChannel+0x7bc>)
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d071      	beq.n	8006db0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006ccc:	483e      	ldr	r0, [pc, #248]	; (8006dc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8006cce:	f7ff f847 	bl	8005d60 <LL_ADC_GetCommonPathInternalCh>
 8006cd2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a3c      	ldr	r2, [pc, #240]	; (8006dcc <HAL_ADC_ConfigChannel+0x7c4>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d004      	beq.n	8006cea <HAL_ADC_ConfigChannel+0x6e2>
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a3a      	ldr	r2, [pc, #232]	; (8006dd0 <HAL_ADC_ConfigChannel+0x7c8>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d127      	bne.n	8006d3a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006cea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006cee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d121      	bne.n	8006d3a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cfe:	d157      	bne.n	8006db0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d08:	4619      	mov	r1, r3
 8006d0a:	482f      	ldr	r0, [pc, #188]	; (8006dc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8006d0c:	f7ff f815 	bl	8005d3a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006d10:	4b30      	ldr	r3, [pc, #192]	; (8006dd4 <HAL_ADC_ConfigChannel+0x7cc>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	099b      	lsrs	r3, r3, #6
 8006d16:	4a30      	ldr	r2, [pc, #192]	; (8006dd8 <HAL_ADC_ConfigChannel+0x7d0>)
 8006d18:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1c:	099b      	lsrs	r3, r3, #6
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	4613      	mov	r3, r2
 8006d22:	005b      	lsls	r3, r3, #1
 8006d24:	4413      	add	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006d2a:	e002      	b.n	8006d32 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1f9      	bne.n	8006d2c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d38:	e03a      	b.n	8006db0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a27      	ldr	r2, [pc, #156]	; (8006ddc <HAL_ADC_ConfigChannel+0x7d4>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d113      	bne.n	8006d6c <HAL_ADC_ConfigChannel+0x764>
 8006d44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10d      	bne.n	8006d6c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a22      	ldr	r2, [pc, #136]	; (8006de0 <HAL_ADC_ConfigChannel+0x7d8>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d02a      	beq.n	8006db0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d62:	4619      	mov	r1, r3
 8006d64:	4818      	ldr	r0, [pc, #96]	; (8006dc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8006d66:	f7fe ffe8 	bl	8005d3a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006d6a:	e021      	b.n	8006db0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a1c      	ldr	r2, [pc, #112]	; (8006de4 <HAL_ADC_ConfigChannel+0x7dc>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d11c      	bne.n	8006db0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006d76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d116      	bne.n	8006db0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a16      	ldr	r2, [pc, #88]	; (8006de0 <HAL_ADC_ConfigChannel+0x7d8>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d011      	beq.n	8006db0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d94:	4619      	mov	r1, r3
 8006d96:	480c      	ldr	r0, [pc, #48]	; (8006dc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8006d98:	f7fe ffcf 	bl	8005d3a <LL_ADC_SetCommonPathInternalCh>
 8006d9c:	e008      	b.n	8006db0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da2:	f043 0220 	orr.w	r2, r3, #32
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006db8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	37d8      	adds	r7, #216	; 0xd8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	80080000 	.word	0x80080000
 8006dc8:	50000300 	.word	0x50000300
 8006dcc:	c3210000 	.word	0xc3210000
 8006dd0:	90c00010 	.word	0x90c00010
 8006dd4:	20000000 	.word	0x20000000
 8006dd8:	053e2d63 	.word	0x053e2d63
 8006ddc:	c7520000 	.word	0xc7520000
 8006de0:	50000100 	.word	0x50000100
 8006de4:	cb840000 	.word	0xcb840000

08006de8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7ff f95d 	bl	80060b4 <LL_ADC_IsEnabled>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d14d      	bne.n	8006e9c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689a      	ldr	r2, [r3, #8]
 8006e06:	4b28      	ldr	r3, [pc, #160]	; (8006ea8 <ADC_Enable+0xc0>)
 8006e08:	4013      	ands	r3, r2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00d      	beq.n	8006e2a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e12:	f043 0210 	orr.w	r2, r3, #16
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e1e:	f043 0201 	orr.w	r2, r3, #1
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e039      	b.n	8006e9e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7ff f92c 	bl	800608c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006e34:	f7fe ff40 	bl	8005cb8 <HAL_GetTick>
 8006e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006e3a:	e028      	b.n	8006e8e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff f937 	bl	80060b4 <LL_ADC_IsEnabled>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d104      	bne.n	8006e56 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7ff f91b 	bl	800608c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006e56:	f7fe ff2f 	bl	8005cb8 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d914      	bls.n	8006e8e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d00d      	beq.n	8006e8e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e76:	f043 0210 	orr.w	r2, r3, #16
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e82:	f043 0201 	orr.w	r2, r3, #1
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e007      	b.n	8006e9e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d1cf      	bne.n	8006e3c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	8000003f 	.word	0x8000003f

08006eac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ebe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d14b      	bne.n	8006f5e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0308 	and.w	r3, r3, #8
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d021      	beq.n	8006f24 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7fe ffe7 	bl	8005eb8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d032      	beq.n	8006f56 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d12b      	bne.n	8006f56 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d11f      	bne.n	8006f56 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f1a:	f043 0201 	orr.w	r2, r3, #1
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f22:	e018      	b.n	8006f56 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	f003 0302 	and.w	r3, r3, #2
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d111      	bne.n	8006f56 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d105      	bne.n	8006f56 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f4e:	f043 0201 	orr.w	r2, r3, #1
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f7ff fb38 	bl	80065cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006f5c:	e00e      	b.n	8006f7c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f62:	f003 0310 	and.w	r3, r3, #16
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f7ff fb42 	bl	80065f4 <HAL_ADC_ErrorCallback>
}
 8006f70:	e004      	b.n	8006f7c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	4798      	blx	r3
}
 8006f7c:	bf00      	nop
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f90:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f7ff fb24 	bl	80065e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f98:	bf00      	nop
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fac:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fbe:	f043 0204 	orr.w	r2, r3, #4
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f7ff fb14 	bl	80065f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006fcc:	bf00      	nop
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <LL_ADC_IsEnabled>:
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d101      	bne.n	8006fec <LL_ADC_IsEnabled+0x18>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e000      	b.n	8006fee <LL_ADC_IsEnabled+0x1a>
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <LL_ADC_REG_IsConversionOngoing>:
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b083      	sub	sp, #12
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f003 0304 	and.w	r3, r3, #4
 800700a:	2b04      	cmp	r3, #4
 800700c:	d101      	bne.n	8007012 <LL_ADC_REG_IsConversionOngoing+0x18>
 800700e:	2301      	movs	r3, #1
 8007010:	e000      	b.n	8007014 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007020:	b590      	push	{r4, r7, lr}
 8007022:	b0a1      	sub	sp, #132	; 0x84
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007036:	2b01      	cmp	r3, #1
 8007038:	d101      	bne.n	800703e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800703a:	2302      	movs	r3, #2
 800703c:	e08b      	b.n	8007156 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8007046:	2300      	movs	r3, #0
 8007048:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800704a:	2300      	movs	r3, #0
 800704c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007056:	d102      	bne.n	800705e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007058:	4b41      	ldr	r3, [pc, #260]	; (8007160 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800705a:	60bb      	str	r3, [r7, #8]
 800705c:	e001      	b.n	8007062 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800705e:	2300      	movs	r3, #0
 8007060:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10b      	bne.n	8007080 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800706c:	f043 0220 	orr.w	r2, r3, #32
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e06a      	b.n	8007156 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	4618      	mov	r0, r3
 8007084:	f7ff ffb9 	bl	8006ffa <LL_ADC_REG_IsConversionOngoing>
 8007088:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff ffb3 	bl	8006ffa <LL_ADC_REG_IsConversionOngoing>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d14c      	bne.n	8007134 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800709a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800709c:	2b00      	cmp	r3, #0
 800709e:	d149      	bne.n	8007134 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80070a0:	4b30      	ldr	r3, [pc, #192]	; (8007164 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80070a2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d028      	beq.n	80070fe <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80070ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	6859      	ldr	r1, [r3, #4]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80070be:	035b      	lsls	r3, r3, #13
 80070c0:	430b      	orrs	r3, r1
 80070c2:	431a      	orrs	r2, r3
 80070c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80070c8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80070cc:	f7ff ff82 	bl	8006fd4 <LL_ADC_IsEnabled>
 80070d0:	4604      	mov	r4, r0
 80070d2:	4823      	ldr	r0, [pc, #140]	; (8007160 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80070d4:	f7ff ff7e 	bl	8006fd4 <LL_ADC_IsEnabled>
 80070d8:	4603      	mov	r3, r0
 80070da:	4323      	orrs	r3, r4
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d133      	bne.n	8007148 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80070e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80070e8:	f023 030f 	bic.w	r3, r3, #15
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	6811      	ldr	r1, [r2, #0]
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	6892      	ldr	r2, [r2, #8]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	431a      	orrs	r2, r3
 80070f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070fa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80070fc:	e024      	b.n	8007148 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80070fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007108:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800710a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800710e:	f7ff ff61 	bl	8006fd4 <LL_ADC_IsEnabled>
 8007112:	4604      	mov	r4, r0
 8007114:	4812      	ldr	r0, [pc, #72]	; (8007160 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007116:	f7ff ff5d 	bl	8006fd4 <LL_ADC_IsEnabled>
 800711a:	4603      	mov	r3, r0
 800711c:	4323      	orrs	r3, r4
 800711e:	2b00      	cmp	r3, #0
 8007120:	d112      	bne.n	8007148 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800712a:	f023 030f 	bic.w	r3, r3, #15
 800712e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007130:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007132:	e009      	b.n	8007148 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007138:	f043 0220 	orr.w	r2, r3, #32
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007146:	e000      	b.n	800714a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007148:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007152:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007156:	4618      	mov	r0, r3
 8007158:	3784      	adds	r7, #132	; 0x84
 800715a:	46bd      	mov	sp, r7
 800715c:	bd90      	pop	{r4, r7, pc}
 800715e:	bf00      	nop
 8007160:	50000100 	.word	0x50000100
 8007164:	50000300 	.word	0x50000300

08007168 <__NVIC_SetPriorityGrouping>:
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f003 0307 	and.w	r3, r3, #7
 8007176:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007178:	4b0c      	ldr	r3, [pc, #48]	; (80071ac <__NVIC_SetPriorityGrouping+0x44>)
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007184:	4013      	ands	r3, r2
 8007186:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800719a:	4a04      	ldr	r2, [pc, #16]	; (80071ac <__NVIC_SetPriorityGrouping+0x44>)
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	60d3      	str	r3, [r2, #12]
}
 80071a0:	bf00      	nop
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	e000ed00 	.word	0xe000ed00

080071b0 <__NVIC_GetPriorityGrouping>:
{
 80071b0:	b480      	push	{r7}
 80071b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80071b4:	4b04      	ldr	r3, [pc, #16]	; (80071c8 <__NVIC_GetPriorityGrouping+0x18>)
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	0a1b      	lsrs	r3, r3, #8
 80071ba:	f003 0307 	and.w	r3, r3, #7
}
 80071be:	4618      	mov	r0, r3
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	e000ed00 	.word	0xe000ed00

080071cc <__NVIC_EnableIRQ>:
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	4603      	mov	r3, r0
 80071d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	db0b      	blt.n	80071f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071de:	79fb      	ldrb	r3, [r7, #7]
 80071e0:	f003 021f 	and.w	r2, r3, #31
 80071e4:	4907      	ldr	r1, [pc, #28]	; (8007204 <__NVIC_EnableIRQ+0x38>)
 80071e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ea:	095b      	lsrs	r3, r3, #5
 80071ec:	2001      	movs	r0, #1
 80071ee:	fa00 f202 	lsl.w	r2, r0, r2
 80071f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	e000e100 	.word	0xe000e100

08007208 <__NVIC_SetPriority>:
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	4603      	mov	r3, r0
 8007210:	6039      	str	r1, [r7, #0]
 8007212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007218:	2b00      	cmp	r3, #0
 800721a:	db0a      	blt.n	8007232 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	b2da      	uxtb	r2, r3
 8007220:	490c      	ldr	r1, [pc, #48]	; (8007254 <__NVIC_SetPriority+0x4c>)
 8007222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007226:	0112      	lsls	r2, r2, #4
 8007228:	b2d2      	uxtb	r2, r2
 800722a:	440b      	add	r3, r1
 800722c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007230:	e00a      	b.n	8007248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	b2da      	uxtb	r2, r3
 8007236:	4908      	ldr	r1, [pc, #32]	; (8007258 <__NVIC_SetPriority+0x50>)
 8007238:	79fb      	ldrb	r3, [r7, #7]
 800723a:	f003 030f 	and.w	r3, r3, #15
 800723e:	3b04      	subs	r3, #4
 8007240:	0112      	lsls	r2, r2, #4
 8007242:	b2d2      	uxtb	r2, r2
 8007244:	440b      	add	r3, r1
 8007246:	761a      	strb	r2, [r3, #24]
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	e000e100 	.word	0xe000e100
 8007258:	e000ed00 	.word	0xe000ed00

0800725c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800725c:	b480      	push	{r7}
 800725e:	b089      	sub	sp, #36	; 0x24
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f003 0307 	and.w	r3, r3, #7
 800726e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	f1c3 0307 	rsb	r3, r3, #7
 8007276:	2b04      	cmp	r3, #4
 8007278:	bf28      	it	cs
 800727a:	2304      	movcs	r3, #4
 800727c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	3304      	adds	r3, #4
 8007282:	2b06      	cmp	r3, #6
 8007284:	d902      	bls.n	800728c <NVIC_EncodePriority+0x30>
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	3b03      	subs	r3, #3
 800728a:	e000      	b.n	800728e <NVIC_EncodePriority+0x32>
 800728c:	2300      	movs	r3, #0
 800728e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007290:	f04f 32ff 	mov.w	r2, #4294967295
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	fa02 f303 	lsl.w	r3, r2, r3
 800729a:	43da      	mvns	r2, r3
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	401a      	ands	r2, r3
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80072a4:	f04f 31ff 	mov.w	r1, #4294967295
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	fa01 f303 	lsl.w	r3, r1, r3
 80072ae:	43d9      	mvns	r1, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072b4:	4313      	orrs	r3, r2
         );
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3724      	adds	r7, #36	; 0x24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
	...

080072c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072d4:	d301      	bcc.n	80072da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80072d6:	2301      	movs	r3, #1
 80072d8:	e00f      	b.n	80072fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072da:	4a0a      	ldr	r2, [pc, #40]	; (8007304 <SysTick_Config+0x40>)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3b01      	subs	r3, #1
 80072e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80072e2:	210f      	movs	r1, #15
 80072e4:	f04f 30ff 	mov.w	r0, #4294967295
 80072e8:	f7ff ff8e 	bl	8007208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072ec:	4b05      	ldr	r3, [pc, #20]	; (8007304 <SysTick_Config+0x40>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072f2:	4b04      	ldr	r3, [pc, #16]	; (8007304 <SysTick_Config+0x40>)
 80072f4:	2207      	movs	r2, #7
 80072f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	e000e010 	.word	0xe000e010

08007308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f7ff ff29 	bl	8007168 <__NVIC_SetPriorityGrouping>
}
 8007316:	bf00      	nop
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b086      	sub	sp, #24
 8007322:	af00      	add	r7, sp, #0
 8007324:	4603      	mov	r3, r0
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	607a      	str	r2, [r7, #4]
 800732a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800732c:	f7ff ff40 	bl	80071b0 <__NVIC_GetPriorityGrouping>
 8007330:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	68b9      	ldr	r1, [r7, #8]
 8007336:	6978      	ldr	r0, [r7, #20]
 8007338:	f7ff ff90 	bl	800725c <NVIC_EncodePriority>
 800733c:	4602      	mov	r2, r0
 800733e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007342:	4611      	mov	r1, r2
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff ff5f 	bl	8007208 <__NVIC_SetPriority>
}
 800734a:	bf00      	nop
 800734c:	3718      	adds	r7, #24
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b082      	sub	sp, #8
 8007356:	af00      	add	r7, sp, #0
 8007358:	4603      	mov	r3, r0
 800735a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800735c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007360:	4618      	mov	r0, r3
 8007362:	f7ff ff33 	bl	80071cc <__NVIC_EnableIRQ>
}
 8007366:	bf00      	nop
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b082      	sub	sp, #8
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7ff ffa4 	bl	80072c4 <SysTick_Config>
 800737c:	4603      	mov	r3, r0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e08d      	b.n	80074b6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	461a      	mov	r2, r3
 80073a0:	4b47      	ldr	r3, [pc, #284]	; (80074c0 <HAL_DMA_Init+0x138>)
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d80f      	bhi.n	80073c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	4b45      	ldr	r3, [pc, #276]	; (80074c4 <HAL_DMA_Init+0x13c>)
 80073ae:	4413      	add	r3, r2
 80073b0:	4a45      	ldr	r2, [pc, #276]	; (80074c8 <HAL_DMA_Init+0x140>)
 80073b2:	fba2 2303 	umull	r2, r3, r2, r3
 80073b6:	091b      	lsrs	r3, r3, #4
 80073b8:	009a      	lsls	r2, r3, #2
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a42      	ldr	r2, [pc, #264]	; (80074cc <HAL_DMA_Init+0x144>)
 80073c2:	641a      	str	r2, [r3, #64]	; 0x40
 80073c4:	e00e      	b.n	80073e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	461a      	mov	r2, r3
 80073cc:	4b40      	ldr	r3, [pc, #256]	; (80074d0 <HAL_DMA_Init+0x148>)
 80073ce:	4413      	add	r3, r2
 80073d0:	4a3d      	ldr	r2, [pc, #244]	; (80074c8 <HAL_DMA_Init+0x140>)
 80073d2:	fba2 2303 	umull	r2, r3, r2, r3
 80073d6:	091b      	lsrs	r3, r3, #4
 80073d8:	009a      	lsls	r2, r3, #2
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a3c      	ldr	r2, [pc, #240]	; (80074d4 <HAL_DMA_Init+0x14c>)
 80073e2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80073fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007408:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007414:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007420:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fa76 	bl	8007928 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007444:	d102      	bne.n	800744c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007454:	b2d2      	uxtb	r2, r2
 8007456:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007460:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d010      	beq.n	800748c <HAL_DMA_Init+0x104>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	2b04      	cmp	r3, #4
 8007470:	d80c      	bhi.n	800748c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fa96 	bl	80079a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800747c:	2200      	movs	r2, #0
 800747e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007488:	605a      	str	r2, [r3, #4]
 800748a:	e008      	b.n	800749e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	40020407 	.word	0x40020407
 80074c4:	bffdfff8 	.word	0xbffdfff8
 80074c8:	cccccccd 	.word	0xcccccccd
 80074cc:	40020000 	.word	0x40020000
 80074d0:	bffdfbf8 	.word	0xbffdfbf8
 80074d4:	40020400 	.word	0x40020400

080074d8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
 80074e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d101      	bne.n	80074f8 <HAL_DMA_Start_IT+0x20>
 80074f4:	2302      	movs	r3, #2
 80074f6:	e066      	b.n	80075c6 <HAL_DMA_Start_IT+0xee>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b01      	cmp	r3, #1
 800750a:	d155      	bne.n	80075b8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 0201 	bic.w	r2, r2, #1
 8007528:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	68b9      	ldr	r1, [r7, #8]
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 f9bb 	bl	80078ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753a:	2b00      	cmp	r3, #0
 800753c:	d008      	beq.n	8007550 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f042 020e 	orr.w	r2, r2, #14
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	e00f      	b.n	8007570 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 0204 	bic.w	r2, r2, #4
 800755e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f042 020a 	orr.w	r2, r2, #10
 800756e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d007      	beq.n	800758e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800758c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007592:	2b00      	cmp	r3, #0
 8007594:	d007      	beq.n	80075a6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f042 0201 	orr.w	r2, r2, #1
 80075b4:	601a      	str	r2, [r3, #0]
 80075b6:	e005      	b.n	80075c4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80075c0:	2302      	movs	r3, #2
 80075c2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80075c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b085      	sub	sp, #20
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d005      	beq.n	80075f2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2204      	movs	r2, #4
 80075ea:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	73fb      	strb	r3, [r7, #15]
 80075f0:	e037      	b.n	8007662 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 020e 	bic.w	r2, r2, #14
 8007600:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800760c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007610:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f022 0201 	bic.w	r2, r2, #1
 8007620:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007626:	f003 021f 	and.w	r2, r3, #31
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	2101      	movs	r1, #1
 8007630:	fa01 f202 	lsl.w	r2, r1, r2
 8007634:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800763e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00c      	beq.n	8007662 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007652:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007656:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007660:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8007672:	7bfb      	ldrb	r3, [r7, #15]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007688:	2300      	movs	r3, #0
 800768a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b02      	cmp	r3, #2
 8007696:	d00d      	beq.n	80076b4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2204      	movs	r2, #4
 800769c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	73fb      	strb	r3, [r7, #15]
 80076b2:	e047      	b.n	8007744 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f022 020e 	bic.w	r2, r2, #14
 80076c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f022 0201 	bic.w	r2, r2, #1
 80076d2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e8:	f003 021f 	and.w	r2, r3, #31
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f0:	2101      	movs	r1, #1
 80076f2:	fa01 f202 	lsl.w	r2, r1, r2
 80076f6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007700:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00c      	beq.n	8007724 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007714:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007718:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007722:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007738:	2b00      	cmp	r3, #0
 800773a:	d003      	beq.n	8007744 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	4798      	blx	r3
    }
  }
  return status;
 8007744:	7bfb      	ldrb	r3, [r7, #15]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b084      	sub	sp, #16
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800776a:	f003 031f 	and.w	r3, r3, #31
 800776e:	2204      	movs	r2, #4
 8007770:	409a      	lsls	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	4013      	ands	r3, r2
 8007776:	2b00      	cmp	r3, #0
 8007778:	d026      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x7a>
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f003 0304 	and.w	r3, r3, #4
 8007780:	2b00      	cmp	r3, #0
 8007782:	d021      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0320 	and.w	r3, r3, #32
 800778e:	2b00      	cmp	r3, #0
 8007790:	d107      	bne.n	80077a2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0204 	bic.w	r2, r2, #4
 80077a0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a6:	f003 021f 	and.w	r2, r3, #31
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ae:	2104      	movs	r1, #4
 80077b0:	fa01 f202 	lsl.w	r2, r1, r2
 80077b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d071      	beq.n	80078a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80077c6:	e06c      	b.n	80078a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077cc:	f003 031f 	and.w	r3, r3, #31
 80077d0:	2202      	movs	r2, #2
 80077d2:	409a      	lsls	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	4013      	ands	r3, r2
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d02e      	beq.n	800783a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	f003 0302 	and.w	r3, r3, #2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d029      	beq.n	800783a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0320 	and.w	r3, r3, #32
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10b      	bne.n	800780c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 020a 	bic.w	r2, r2, #10
 8007802:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007810:	f003 021f 	and.w	r2, r3, #31
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007818:	2102      	movs	r1, #2
 800781a:	fa01 f202 	lsl.w	r2, r1, r2
 800781e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	2b00      	cmp	r3, #0
 800782e:	d038      	beq.n	80078a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007838:	e033      	b.n	80078a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783e:	f003 031f 	and.w	r3, r3, #31
 8007842:	2208      	movs	r2, #8
 8007844:	409a      	lsls	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4013      	ands	r3, r2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d02a      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	f003 0308 	and.w	r3, r3, #8
 8007854:	2b00      	cmp	r3, #0
 8007856:	d025      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f022 020e 	bic.w	r2, r2, #14
 8007866:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800786c:	f003 021f 	and.w	r2, r3, #31
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007874:	2101      	movs	r1, #1
 8007876:	fa01 f202 	lsl.w	r2, r1, r2
 800787a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007896:	2b00      	cmp	r3, #0
 8007898:	d004      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80078a2:	bf00      	nop
 80078a4:	bf00      	nop
}
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
 80078b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80078c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d004      	beq.n	80078d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80078d4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078da:	f003 021f 	and.w	r2, r3, #31
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	2101      	movs	r1, #1
 80078e4:	fa01 f202 	lsl.w	r2, r1, r2
 80078e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	2b10      	cmp	r3, #16
 80078f8:	d108      	bne.n	800790c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800790a:	e007      	b.n	800791c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	60da      	str	r2, [r3, #12]
}
 800791c:	bf00      	nop
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007928:	b480      	push	{r7}
 800792a:	b087      	sub	sp, #28
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	461a      	mov	r2, r3
 8007936:	4b16      	ldr	r3, [pc, #88]	; (8007990 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007938:	429a      	cmp	r2, r3
 800793a:	d802      	bhi.n	8007942 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800793c:	4b15      	ldr	r3, [pc, #84]	; (8007994 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800793e:	617b      	str	r3, [r7, #20]
 8007940:	e001      	b.n	8007946 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8007942:	4b15      	ldr	r3, [pc, #84]	; (8007998 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007944:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	b2db      	uxtb	r3, r3
 8007950:	3b08      	subs	r3, #8
 8007952:	4a12      	ldr	r2, [pc, #72]	; (800799c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007954:	fba2 2303 	umull	r2, r3, r2, r3
 8007958:	091b      	lsrs	r3, r3, #4
 800795a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007960:	089b      	lsrs	r3, r3, #2
 8007962:	009a      	lsls	r2, r3, #2
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	4413      	add	r3, r2
 8007968:	461a      	mov	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a0b      	ldr	r2, [pc, #44]	; (80079a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007972:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f003 031f 	and.w	r3, r3, #31
 800797a:	2201      	movs	r2, #1
 800797c:	409a      	lsls	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007982:	bf00      	nop
 8007984:	371c      	adds	r7, #28
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	40020407 	.word	0x40020407
 8007994:	40020800 	.word	0x40020800
 8007998:	40020820 	.word	0x40020820
 800799c:	cccccccd 	.word	0xcccccccd
 80079a0:	40020880 	.word	0x40020880

080079a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	4b0b      	ldr	r3, [pc, #44]	; (80079e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80079b8:	4413      	add	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	461a      	mov	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a08      	ldr	r2, [pc, #32]	; (80079e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80079c6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3b01      	subs	r3, #1
 80079cc:	f003 031f 	and.w	r3, r3, #31
 80079d0:	2201      	movs	r2, #1
 80079d2:	409a      	lsls	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80079d8:	bf00      	nop
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	1000823f 	.word	0x1000823f
 80079e8:	40020940 	.word	0x40020940

080079ec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e147      	b.n	8007c8e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d106      	bne.n	8007a18 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7fa facc 	bl	8001fb0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	699a      	ldr	r2, [r3, #24]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f022 0210 	bic.w	r2, r2, #16
 8007a26:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a28:	f7fe f946 	bl	8005cb8 <HAL_GetTick>
 8007a2c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007a2e:	e012      	b.n	8007a56 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007a30:	f7fe f942 	bl	8005cb8 <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	2b0a      	cmp	r3, #10
 8007a3c:	d90b      	bls.n	8007a56 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a42:	f043 0201 	orr.w	r2, r3, #1
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2203      	movs	r2, #3
 8007a4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e11b      	b.n	8007c8e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	f003 0308 	and.w	r3, r3, #8
 8007a60:	2b08      	cmp	r3, #8
 8007a62:	d0e5      	beq.n	8007a30 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	699a      	ldr	r2, [r3, #24]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f042 0201 	orr.w	r2, r2, #1
 8007a72:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a74:	f7fe f920 	bl	8005cb8 <HAL_GetTick>
 8007a78:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007a7a:	e012      	b.n	8007aa2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007a7c:	f7fe f91c 	bl	8005cb8 <HAL_GetTick>
 8007a80:	4602      	mov	r2, r0
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	2b0a      	cmp	r3, #10
 8007a88:	d90b      	bls.n	8007aa2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a8e:	f043 0201 	orr.w	r2, r3, #1
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2203      	movs	r2, #3
 8007a9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e0f5      	b.n	8007c8e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d0e5      	beq.n	8007a7c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	699a      	ldr	r2, [r3, #24]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f042 0202 	orr.w	r2, r2, #2
 8007abe:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a74      	ldr	r2, [pc, #464]	; (8007c98 <HAL_FDCAN_Init+0x2ac>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d103      	bne.n	8007ad2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007aca:	4a74      	ldr	r2, [pc, #464]	; (8007c9c <HAL_FDCAN_Init+0x2b0>)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	7c1b      	ldrb	r3, [r3, #16]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d108      	bne.n	8007aec <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	699a      	ldr	r2, [r3, #24]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ae8:	619a      	str	r2, [r3, #24]
 8007aea:	e007      	b.n	8007afc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	699a      	ldr	r2, [r3, #24]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007afa:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	7c5b      	ldrb	r3, [r3, #17]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d108      	bne.n	8007b16 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	699a      	ldr	r2, [r3, #24]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b12:	619a      	str	r2, [r3, #24]
 8007b14:	e007      	b.n	8007b26 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	699a      	ldr	r2, [r3, #24]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b24:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	7c9b      	ldrb	r3, [r3, #18]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d108      	bne.n	8007b40 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	699a      	ldr	r2, [r3, #24]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b3c:	619a      	str	r2, [r3, #24]
 8007b3e:	e007      	b.n	8007b50 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	699a      	ldr	r2, [r3, #24]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b4e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	689a      	ldr	r2, [r3, #8]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	699a      	ldr	r2, [r3, #24]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007b74:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	691a      	ldr	r2, [r3, #16]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f022 0210 	bic.w	r2, r2, #16
 8007b84:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d108      	bne.n	8007ba0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	699a      	ldr	r2, [r3, #24]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f042 0204 	orr.w	r2, r2, #4
 8007b9c:	619a      	str	r2, [r3, #24]
 8007b9e:	e02c      	b.n	8007bfa <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d028      	beq.n	8007bfa <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d01c      	beq.n	8007bea <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	699a      	ldr	r2, [r3, #24]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007bbe:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	691a      	ldr	r2, [r3, #16]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f042 0210 	orr.w	r2, r2, #16
 8007bce:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	2b03      	cmp	r3, #3
 8007bd6:	d110      	bne.n	8007bfa <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	699a      	ldr	r2, [r3, #24]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f042 0220 	orr.w	r2, r2, #32
 8007be6:	619a      	str	r2, [r3, #24]
 8007be8:	e007      	b.n	8007bfa <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	699a      	ldr	r2, [r3, #24]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f042 0220 	orr.w	r2, r2, #32
 8007bf8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	69db      	ldr	r3, [r3, #28]
 8007c06:	3b01      	subs	r3, #1
 8007c08:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c0a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007c12:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007c22:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c24:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c2e:	d115      	bne.n	8007c5c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c34:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007c3e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c44:	3b01      	subs	r3, #1
 8007c46:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007c48:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c50:	3b01      	subs	r3, #1
 8007c52:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007c58:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007c5a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f9e6 	bl	8008044 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	40006400 	.word	0x40006400
 8007c9c:	40006500 	.word	0x40006500

08007ca0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007cb0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d002      	beq.n	8007cbe <HAL_FDCAN_ConfigFilter+0x1e>
 8007cb8:	7dfb      	ldrb	r3, [r7, #23]
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d13d      	bne.n	8007d3a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d119      	bne.n	8007cfa <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007cd2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8007cda:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	601a      	str	r2, [r3, #0]
 8007cf8:	e01d      	b.n	8007d36 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	075a      	lsls	r2, r3, #29
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	079a      	lsls	r2, r3, #30
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	00db      	lsls	r3, r3, #3
 8007d20:	4413      	add	r3, r2
 8007d22:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	3304      	adds	r3, #4
 8007d2e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	e006      	b.n	8007d48 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d3e:	f043 0202 	orr.w	r2, r3, #2
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
  }
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	371c      	adds	r7, #28
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
 8007d60:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d116      	bne.n	8007d9c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d76:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	011a      	lsls	r2, r3, #4
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	431a      	orrs	r2, r3
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	431a      	orrs	r2, r3
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	431a      	orrs	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	430a      	orrs	r2, r1
 8007d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	e006      	b.n	8007daa <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007da0:	f043 0204 	orr.w	r2, r3, #4
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
  }
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d110      	bne.n	8007dec <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2202      	movs	r2, #2
 8007dce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	699a      	ldr	r2, [r3, #24]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 0201 	bic.w	r2, r2, #1
 8007de0:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	e006      	b.n	8007dfa <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df0:	f043 0204 	orr.w	r2, r3, #4
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
  }
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b086      	sub	sp, #24
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	60f8      	str	r0, [r7, #12]
 8007e0e:	60b9      	str	r1, [r7, #8]
 8007e10:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d12c      	bne.n	8007e78 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d007      	beq.n	8007e3e <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e023      	b.n	8007e86 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007e46:	0c1b      	lsrs	r3, r3, #16
 8007e48:	f003 0303 	and.w	r3, r3, #3
 8007e4c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	68b9      	ldr	r1, [r7, #8]
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 f94b 	bl	80080f0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2101      	movs	r1, #1
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	fa01 f202 	lsl.w	r2, r1, r2
 8007e66:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	409a      	lsls	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	e006      	b.n	8007e86 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e7c:	f043 0208 	orr.w	r2, r3, #8
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
  }
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3718      	adds	r7, #24
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
	...

08007e90 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b08b      	sub	sp, #44	; 0x2c
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007ea4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8007ea6:	7efb      	ldrb	r3, [r7, #27]
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	f040 80bc 	bne.w	8008026 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	2b40      	cmp	r3, #64	; 0x40
 8007eb2:	d121      	bne.n	8007ef8 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ebc:	f003 030f 	and.w	r3, r3, #15
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d107      	bne.n	8007ed4 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ec8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e0af      	b.n	8008034 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007edc:	0a1b      	lsrs	r3, r3, #8
 8007ede:	f003 0303 	and.w	r3, r3, #3
 8007ee2:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007ee8:	69fa      	ldr	r2, [r7, #28]
 8007eea:	4613      	mov	r3, r2
 8007eec:	00db      	lsls	r3, r3, #3
 8007eee:	4413      	add	r3, r2
 8007ef0:	00db      	lsls	r3, r3, #3
 8007ef2:	440b      	add	r3, r1
 8007ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ef6:	e020      	b.n	8007f3a <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f00:	f003 030f 	and.w	r3, r3, #15
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d107      	bne.n	8007f18 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e08d      	b.n	8008034 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f20:	0a1b      	lsrs	r3, r3, #8
 8007f22:	f003 0303 	and.w	r3, r3, #3
 8007f26:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007f2c:	69fa      	ldr	r2, [r7, #28]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	00db      	lsls	r3, r3, #3
 8007f32:	4413      	add	r3, r2
 8007f34:	00db      	lsls	r3, r3, #3
 8007f36:	440b      	add	r3, r1
 8007f38:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d107      	bne.n	8007f5e <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	0c9b      	lsrs	r3, r3, #18
 8007f54:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	601a      	str	r2, [r3, #0]
 8007f5c:	e005      	b.n	8007f6a <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f84:	3304      	adds	r3, #4
 8007f86:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8007f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	0e1b      	lsrs	r3, r3, #24
 8007fbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	0fda      	lsrs	r2, r3, #31
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007fd8:	2300      	movs	r3, #0
 8007fda:	623b      	str	r3, [r7, #32]
 8007fdc:	e00a      	b.n	8007ff4 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	441a      	add	r2, r3
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	440b      	add	r3, r1
 8007fea:	7812      	ldrb	r2, [r2, #0]
 8007fec:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007fee:	6a3b      	ldr	r3, [r7, #32]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	623b      	str	r3, [r7, #32]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	0c1b      	lsrs	r3, r3, #16
 8007ffa:	4a11      	ldr	r2, [pc, #68]	; (8008040 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8007ffc:	5cd3      	ldrb	r3, [r2, r3]
 8007ffe:	461a      	mov	r2, r3
 8008000:	6a3b      	ldr	r3, [r7, #32]
 8008002:	4293      	cmp	r3, r2
 8008004:	d3eb      	bcc.n	8007fde <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	2b40      	cmp	r3, #64	; 0x40
 800800a:	d105      	bne.n	8008018 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	69fa      	ldr	r2, [r7, #28]
 8008012:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8008016:	e004      	b.n	8008022 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	69fa      	ldr	r2, [r7, #28]
 800801e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	e006      	b.n	8008034 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800802a:	f043 0208 	orr.w	r2, r3, #8
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
  }
}
 8008034:	4618      	mov	r0, r3
 8008036:	372c      	adds	r7, #44	; 0x2c
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	08012a64 	.word	0x08012a64

08008044 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800804c:	4b27      	ldr	r3, [pc, #156]	; (80080ec <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800804e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800805e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008066:	041a      	lsls	r2, r3, #16
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	430a      	orrs	r2, r1
 800806e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008084:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808c:	061a      	lsls	r2, r3, #24
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	430a      	orrs	r2, r1
 8008094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	e005      	b.n	80080d2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	3304      	adds	r3, #4
 80080d0:	60fb      	str	r3, [r7, #12]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d3f3      	bcc.n	80080c6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80080de:	bf00      	nop
 80080e0:	bf00      	nop
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	4000a400 	.word	0x4000a400

080080f0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b089      	sub	sp, #36	; 0x24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
 80080fc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10a      	bne.n	800811c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800810e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008116:	4313      	orrs	r3, r2
 8008118:	61fb      	str	r3, [r7, #28]
 800811a:	e00a      	b.n	8008132 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008124:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800812a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800812c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008130:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800813c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8008142:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8008148:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800814e:	4313      	orrs	r3, r2
 8008150:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	4613      	mov	r3, r2
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	4413      	add	r3, r2
 800815e:	00db      	lsls	r3, r3, #3
 8008160:	440b      	add	r3, r1
 8008162:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	69fa      	ldr	r2, [r7, #28]
 8008168:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	3304      	adds	r3, #4
 800816e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	693a      	ldr	r2, [r7, #16]
 8008174:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	3304      	adds	r3, #4
 800817a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800817c:	2300      	movs	r3, #0
 800817e:	617b      	str	r3, [r7, #20]
 8008180:	e020      	b.n	80081c4 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	3303      	adds	r3, #3
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	4413      	add	r3, r2
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	3302      	adds	r3, #2
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	440b      	add	r3, r1
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800819a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	3301      	adds	r3, #1
 80081a0:	6879      	ldr	r1, [r7, #4]
 80081a2:	440b      	add	r3, r1
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80081a8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80081aa:	6879      	ldr	r1, [r7, #4]
 80081ac:	697a      	ldr	r2, [r7, #20]
 80081ae:	440a      	add	r2, r1
 80081b0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80081b2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	3304      	adds	r3, #4
 80081bc:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	3304      	adds	r3, #4
 80081c2:	617b      	str	r3, [r7, #20]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	0c1b      	lsrs	r3, r3, #16
 80081ca:	4a06      	ldr	r2, [pc, #24]	; (80081e4 <FDCAN_CopyMessageToRAM+0xf4>)
 80081cc:	5cd3      	ldrb	r3, [r2, r3]
 80081ce:	461a      	mov	r2, r3
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d3d5      	bcc.n	8008182 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80081d6:	bf00      	nop
 80081d8:	bf00      	nop
 80081da:	3724      	adds	r7, #36	; 0x24
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr
 80081e4:	08012a64 	.word	0x08012a64

080081e8 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80081f6:	2300      	movs	r3, #0
 80081f8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80081fa:	4b24      	ldr	r3, [pc, #144]	; (800828c <HAL_FLASH_Program+0xa4>)
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d101      	bne.n	8008206 <HAL_FLASH_Program+0x1e>
 8008202:	2302      	movs	r3, #2
 8008204:	e03e      	b.n	8008284 <HAL_FLASH_Program+0x9c>
 8008206:	4b21      	ldr	r3, [pc, #132]	; (800828c <HAL_FLASH_Program+0xa4>)
 8008208:	2201      	movs	r2, #1
 800820a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800820c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008210:	f000 f888 	bl	8008324 <FLASH_WaitForLastOperation>
 8008214:	4603      	mov	r3, r0
 8008216:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8008218:	7dfb      	ldrb	r3, [r7, #23]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d12e      	bne.n	800827c <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800821e:	4b1b      	ldr	r3, [pc, #108]	; (800828c <HAL_FLASH_Program+0xa4>)
 8008220:	2200      	movs	r2, #0
 8008222:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d107      	bne.n	800823a <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800822a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800822e:	68b8      	ldr	r0, [r7, #8]
 8008230:	f000 f8cc 	bl	80083cc <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8008234:	2301      	movs	r3, #1
 8008236:	613b      	str	r3, [r7, #16]
 8008238:	e010      	b.n	800825c <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d002      	beq.n	8008246 <HAL_FLASH_Program+0x5e>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2b02      	cmp	r3, #2
 8008244:	d10a      	bne.n	800825c <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	4619      	mov	r1, r3
 800824a:	68b8      	ldr	r0, [r7, #8]
 800824c:	f000 f8e4 	bl	8008418 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2b02      	cmp	r3, #2
 8008254:	d102      	bne.n	800825c <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8008256:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800825a:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800825c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008260:	f000 f860 	bl	8008324 <FLASH_WaitForLastOperation>
 8008264:	4603      	mov	r3, r0
 8008266:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d006      	beq.n	800827c <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800826e:	4b08      	ldr	r3, [pc, #32]	; (8008290 <HAL_FLASH_Program+0xa8>)
 8008270:	695a      	ldr	r2, [r3, #20]
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	43db      	mvns	r3, r3
 8008276:	4906      	ldr	r1, [pc, #24]	; (8008290 <HAL_FLASH_Program+0xa8>)
 8008278:	4013      	ands	r3, r2
 800827a:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800827c:	4b03      	ldr	r3, [pc, #12]	; (800828c <HAL_FLASH_Program+0xa4>)
 800827e:	2200      	movs	r2, #0
 8008280:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8008282:	7dfb      	ldrb	r3, [r7, #23]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3718      	adds	r7, #24
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	2000000c 	.word	0x2000000c
 8008290:	40022000 	.word	0x40022000

08008294 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800829e:	4b0b      	ldr	r3, [pc, #44]	; (80082cc <HAL_FLASH_Unlock+0x38>)
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	da0b      	bge.n	80082be <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80082a6:	4b09      	ldr	r3, [pc, #36]	; (80082cc <HAL_FLASH_Unlock+0x38>)
 80082a8:	4a09      	ldr	r2, [pc, #36]	; (80082d0 <HAL_FLASH_Unlock+0x3c>)
 80082aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80082ac:	4b07      	ldr	r3, [pc, #28]	; (80082cc <HAL_FLASH_Unlock+0x38>)
 80082ae:	4a09      	ldr	r2, [pc, #36]	; (80082d4 <HAL_FLASH_Unlock+0x40>)
 80082b0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80082b2:	4b06      	ldr	r3, [pc, #24]	; (80082cc <HAL_FLASH_Unlock+0x38>)
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	da01      	bge.n	80082be <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80082be:	79fb      	ldrb	r3, [r7, #7]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr
 80082cc:	40022000 	.word	0x40022000
 80082d0:	45670123 	.word	0x45670123
 80082d4:	cdef89ab 	.word	0xcdef89ab

080082d8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80082e2:	4b09      	ldr	r3, [pc, #36]	; (8008308 <HAL_FLASH_Lock+0x30>)
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	4a08      	ldr	r2, [pc, #32]	; (8008308 <HAL_FLASH_Lock+0x30>)
 80082e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082ec:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80082ee:	4b06      	ldr	r3, [pc, #24]	; (8008308 <HAL_FLASH_Lock+0x30>)
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	da01      	bge.n	80082fa <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80082fa:	79fb      	ldrb	r3, [r7, #7]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr
 8008308:	40022000 	.word	0x40022000

0800830c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 800830c:	b480      	push	{r7}
 800830e:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8008310:	4b03      	ldr	r3, [pc, #12]	; (8008320 <HAL_FLASH_GetError+0x14>)
 8008312:	685b      	ldr	r3, [r3, #4]
}
 8008314:	4618      	mov	r0, r3
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	2000000c 	.word	0x2000000c

08008324 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800832c:	f7fd fcc4 	bl	8005cb8 <HAL_GetTick>
 8008330:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8008332:	e009      	b.n	8008348 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8008334:	f7fd fcc0 	bl	8005cb8 <HAL_GetTick>
 8008338:	4602      	mov	r2, r0
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	429a      	cmp	r2, r3
 8008342:	d201      	bcs.n	8008348 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e038      	b.n	80083ba <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8008348:	4b1e      	ldr	r3, [pc, #120]	; (80083c4 <FLASH_WaitForLastOperation+0xa0>)
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008354:	d0ee      	beq.n	8008334 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8008356:	4b1b      	ldr	r3, [pc, #108]	; (80083c4 <FLASH_WaitForLastOperation+0xa0>)
 8008358:	691a      	ldr	r2, [r3, #16]
 800835a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800835e:	4013      	ands	r3, r2
 8008360:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d01e      	beq.n	80083a6 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8008368:	4b17      	ldr	r3, [pc, #92]	; (80083c8 <FLASH_WaitForLastOperation+0xa4>)
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	4313      	orrs	r3, r2
 8008370:	4a15      	ldr	r2, [pc, #84]	; (80083c8 <FLASH_WaitForLastOperation+0xa4>)
 8008372:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d007      	beq.n	800838e <FLASH_WaitForLastOperation+0x6a>
 800837e:	4b11      	ldr	r3, [pc, #68]	; (80083c4 <FLASH_WaitForLastOperation+0xa0>)
 8008380:	699a      	ldr	r2, [r3, #24]
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008388:	490e      	ldr	r1, [pc, #56]	; (80083c4 <FLASH_WaitForLastOperation+0xa0>)
 800838a:	4313      	orrs	r3, r2
 800838c:	618b      	str	r3, [r1, #24]
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d004      	beq.n	80083a2 <FLASH_WaitForLastOperation+0x7e>
 8008398:	4a0a      	ldr	r2, [pc, #40]	; (80083c4 <FLASH_WaitForLastOperation+0xa0>)
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80083a0:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e009      	b.n	80083ba <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80083a6:	4b07      	ldr	r3, [pc, #28]	; (80083c4 <FLASH_WaitForLastOperation+0xa0>)
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d102      	bne.n	80083b8 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80083b2:	4b04      	ldr	r3, [pc, #16]	; (80083c4 <FLASH_WaitForLastOperation+0xa0>)
 80083b4:	2201      	movs	r2, #1
 80083b6:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	40022000 	.word	0x40022000
 80083c8:	2000000c 	.word	0x2000000c

080083cc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80083d8:	4b0e      	ldr	r3, [pc, #56]	; (8008414 <FLASH_Program_DoubleWord+0x48>)
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	4a0d      	ldr	r2, [pc, #52]	; (8008414 <FLASH_Program_DoubleWord+0x48>)
 80083de:	f043 0301 	orr.w	r3, r3, #1
 80083e2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80083ea:	f3bf 8f6f 	isb	sy
}
 80083ee:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80083f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083f4:	f04f 0200 	mov.w	r2, #0
 80083f8:	f04f 0300 	mov.w	r3, #0
 80083fc:	000a      	movs	r2, r1
 80083fe:	2300      	movs	r3, #0
 8008400:	68f9      	ldr	r1, [r7, #12]
 8008402:	3104      	adds	r1, #4
 8008404:	4613      	mov	r3, r2
 8008406:	600b      	str	r3, [r1, #0]
}
 8008408:	bf00      	nop
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	40022000 	.word	0x40022000

08008418 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8008418:	b480      	push	{r7}
 800841a:	b089      	sub	sp, #36	; 0x24
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8008422:	2340      	movs	r3, #64	; 0x40
 8008424:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800842e:	4b14      	ldr	r3, [pc, #80]	; (8008480 <FLASH_Program_Fast+0x68>)
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	4a13      	ldr	r2, [pc, #76]	; (8008480 <FLASH_Program_Fast+0x68>)
 8008434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008438:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800843a:	f3ef 8310 	mrs	r3, PRIMASK
 800843e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008440:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8008442:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008444:	b672      	cpsid	i
}
 8008446:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	3304      	adds	r3, #4
 8008454:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	3304      	adds	r3, #4
 800845a:	617b      	str	r3, [r7, #20]
    row_index--;
 800845c:	7ffb      	ldrb	r3, [r7, #31]
 800845e:	3b01      	subs	r3, #1
 8008460:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8008462:	7ffb      	ldrb	r3, [r7, #31]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1ef      	bne.n	8008448 <FLASH_Program_Fast+0x30>
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	f383 8810 	msr	PRIMASK, r3
}
 8008472:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8008474:	bf00      	nop
 8008476:	3724      	adds	r7, #36	; 0x24
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	40022000 	.word	0x40022000

08008484 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800848e:	4b4a      	ldr	r3, [pc, #296]	; (80085b8 <HAL_FLASHEx_Erase+0x134>)
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d101      	bne.n	800849a <HAL_FLASHEx_Erase+0x16>
 8008496:	2302      	movs	r3, #2
 8008498:	e089      	b.n	80085ae <HAL_FLASHEx_Erase+0x12a>
 800849a:	4b47      	ldr	r3, [pc, #284]	; (80085b8 <HAL_FLASHEx_Erase+0x134>)
 800849c:	2201      	movs	r2, #1
 800849e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80084a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80084a4:	f7ff ff3e 	bl	8008324 <FLASH_WaitForLastOperation>
 80084a8:	4603      	mov	r3, r0
 80084aa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d179      	bne.n	80085a6 <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80084b2:	4b41      	ldr	r3, [pc, #260]	; (80085b8 <HAL_FLASHEx_Erase+0x134>)
 80084b4:	2200      	movs	r2, #0
 80084b6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80084b8:	4b40      	ldr	r3, [pc, #256]	; (80085bc <HAL_FLASHEx_Erase+0x138>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d019      	beq.n	80084f8 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80084c4:	4b3d      	ldr	r3, [pc, #244]	; (80085bc <HAL_FLASHEx_Erase+0x138>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a3c      	ldr	r2, [pc, #240]	; (80085bc <HAL_FLASHEx_Erase+0x138>)
 80084ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084ce:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80084d0:	4b3a      	ldr	r3, [pc, #232]	; (80085bc <HAL_FLASHEx_Erase+0x138>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d009      	beq.n	80084f0 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80084dc:	4b37      	ldr	r3, [pc, #220]	; (80085bc <HAL_FLASHEx_Erase+0x138>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a36      	ldr	r2, [pc, #216]	; (80085bc <HAL_FLASHEx_Erase+0x138>)
 80084e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084e6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80084e8:	4b33      	ldr	r3, [pc, #204]	; (80085b8 <HAL_FLASHEx_Erase+0x134>)
 80084ea:	2203      	movs	r2, #3
 80084ec:	771a      	strb	r2, [r3, #28]
 80084ee:	e016      	b.n	800851e <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80084f0:	4b31      	ldr	r3, [pc, #196]	; (80085b8 <HAL_FLASHEx_Erase+0x134>)
 80084f2:	2201      	movs	r2, #1
 80084f4:	771a      	strb	r2, [r3, #28]
 80084f6:	e012      	b.n	800851e <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80084f8:	4b30      	ldr	r3, [pc, #192]	; (80085bc <HAL_FLASHEx_Erase+0x138>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008500:	2b00      	cmp	r3, #0
 8008502:	d009      	beq.n	8008518 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8008504:	4b2d      	ldr	r3, [pc, #180]	; (80085bc <HAL_FLASHEx_Erase+0x138>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a2c      	ldr	r2, [pc, #176]	; (80085bc <HAL_FLASHEx_Erase+0x138>)
 800850a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800850e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8008510:	4b29      	ldr	r3, [pc, #164]	; (80085b8 <HAL_FLASHEx_Erase+0x134>)
 8008512:	2202      	movs	r2, #2
 8008514:	771a      	strb	r2, [r3, #28]
 8008516:	e002      	b.n	800851e <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008518:	4b27      	ldr	r3, [pc, #156]	; (80085b8 <HAL_FLASHEx_Erase+0x134>)
 800851a:	2200      	movs	r2, #0
 800851c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d111      	bne.n	800854a <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	4618      	mov	r0, r3
 800852c:	f000 f848 	bl	80085c0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008530:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008534:	f7ff fef6 	bl	8008324 <FLASH_WaitForLastOperation>
 8008538:	4603      	mov	r3, r0
 800853a:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800853c:	4b1f      	ldr	r3, [pc, #124]	; (80085bc <HAL_FLASHEx_Erase+0x138>)
 800853e:	695b      	ldr	r3, [r3, #20]
 8008540:	4a1e      	ldr	r2, [pc, #120]	; (80085bc <HAL_FLASHEx_Erase+0x138>)
 8008542:	f023 0304 	bic.w	r3, r3, #4
 8008546:	6153      	str	r3, [r2, #20]
 8008548:	e02b      	b.n	80085a2 <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	f04f 32ff 	mov.w	r2, #4294967295
 8008550:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	60bb      	str	r3, [r7, #8]
 8008558:	e01b      	b.n	8008592 <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	4619      	mov	r1, r3
 8008560:	68b8      	ldr	r0, [r7, #8]
 8008562:	f000 f84b 	bl	80085fc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800856a:	f7ff fedb 	bl	8008324 <FLASH_WaitForLastOperation>
 800856e:	4603      	mov	r3, r0
 8008570:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8008572:	4b12      	ldr	r3, [pc, #72]	; (80085bc <HAL_FLASHEx_Erase+0x138>)
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	4a11      	ldr	r2, [pc, #68]	; (80085bc <HAL_FLASHEx_Erase+0x138>)
 8008578:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 800857c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800857e:	7bfb      	ldrb	r3, [r7, #15]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d003      	beq.n	800858c <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	68ba      	ldr	r2, [r7, #8]
 8008588:	601a      	str	r2, [r3, #0]
          break;
 800858a:	e00a      	b.n	80085a2 <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	3301      	adds	r3, #1
 8008590:	60bb      	str	r3, [r7, #8]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	689a      	ldr	r2, [r3, #8]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	4413      	add	r3, r2
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d3db      	bcc.n	800855a <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80085a2:	f000 f84f 	bl	8008644 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80085a6:	4b04      	ldr	r3, [pc, #16]	; (80085b8 <HAL_FLASHEx_Erase+0x134>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	701a      	strb	r2, [r3, #0]

  return status;
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	2000000c 	.word	0x2000000c
 80085bc:	40022000 	.word	0x40022000

080085c0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d005      	beq.n	80085de <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80085d2:	4b09      	ldr	r3, [pc, #36]	; (80085f8 <FLASH_MassErase+0x38>)
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	4a08      	ldr	r2, [pc, #32]	; (80085f8 <FLASH_MassErase+0x38>)
 80085d8:	f043 0304 	orr.w	r3, r3, #4
 80085dc:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80085de:	4b06      	ldr	r3, [pc, #24]	; (80085f8 <FLASH_MassErase+0x38>)
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	4a05      	ldr	r2, [pc, #20]	; (80085f8 <FLASH_MassErase+0x38>)
 80085e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085e8:	6153      	str	r3, [r2, #20]
}
 80085ea:	bf00      	nop
 80085ec:	370c      	adds	r7, #12
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	40022000 	.word	0x40022000

080085fc <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8008606:	4b0e      	ldr	r3, [pc, #56]	; (8008640 <FLASH_PageErase+0x44>)
 8008608:	695b      	ldr	r3, [r3, #20]
 800860a:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	00db      	lsls	r3, r3, #3
 8008612:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8008616:	490a      	ldr	r1, [pc, #40]	; (8008640 <FLASH_PageErase+0x44>)
 8008618:	4313      	orrs	r3, r2
 800861a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800861c:	4b08      	ldr	r3, [pc, #32]	; (8008640 <FLASH_PageErase+0x44>)
 800861e:	695b      	ldr	r3, [r3, #20]
 8008620:	4a07      	ldr	r2, [pc, #28]	; (8008640 <FLASH_PageErase+0x44>)
 8008622:	f043 0302 	orr.w	r3, r3, #2
 8008626:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008628:	4b05      	ldr	r3, [pc, #20]	; (8008640 <FLASH_PageErase+0x44>)
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	4a04      	ldr	r2, [pc, #16]	; (8008640 <FLASH_PageErase+0x44>)
 800862e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008632:	6153      	str	r3, [r2, #20]
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	40022000 	.word	0x40022000

08008644 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800864a:	4b1e      	ldr	r3, [pc, #120]	; (80086c4 <FLASH_FlushCaches+0x80>)
 800864c:	7f1b      	ldrb	r3, [r3, #28]
 800864e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8008650:	79fb      	ldrb	r3, [r7, #7]
 8008652:	2b01      	cmp	r3, #1
 8008654:	d002      	beq.n	800865c <FLASH_FlushCaches+0x18>
 8008656:	79fb      	ldrb	r3, [r7, #7]
 8008658:	2b03      	cmp	r3, #3
 800865a:	d111      	bne.n	8008680 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800865c:	4b1a      	ldr	r3, [pc, #104]	; (80086c8 <FLASH_FlushCaches+0x84>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a19      	ldr	r2, [pc, #100]	; (80086c8 <FLASH_FlushCaches+0x84>)
 8008662:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008666:	6013      	str	r3, [r2, #0]
 8008668:	4b17      	ldr	r3, [pc, #92]	; (80086c8 <FLASH_FlushCaches+0x84>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a16      	ldr	r2, [pc, #88]	; (80086c8 <FLASH_FlushCaches+0x84>)
 800866e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008672:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008674:	4b14      	ldr	r3, [pc, #80]	; (80086c8 <FLASH_FlushCaches+0x84>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a13      	ldr	r2, [pc, #76]	; (80086c8 <FLASH_FlushCaches+0x84>)
 800867a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800867e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8008680:	79fb      	ldrb	r3, [r7, #7]
 8008682:	2b02      	cmp	r3, #2
 8008684:	d002      	beq.n	800868c <FLASH_FlushCaches+0x48>
 8008686:	79fb      	ldrb	r3, [r7, #7]
 8008688:	2b03      	cmp	r3, #3
 800868a:	d111      	bne.n	80086b0 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800868c:	4b0e      	ldr	r3, [pc, #56]	; (80086c8 <FLASH_FlushCaches+0x84>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a0d      	ldr	r2, [pc, #52]	; (80086c8 <FLASH_FlushCaches+0x84>)
 8008692:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008696:	6013      	str	r3, [r2, #0]
 8008698:	4b0b      	ldr	r3, [pc, #44]	; (80086c8 <FLASH_FlushCaches+0x84>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a0a      	ldr	r2, [pc, #40]	; (80086c8 <FLASH_FlushCaches+0x84>)
 800869e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086a2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80086a4:	4b08      	ldr	r3, [pc, #32]	; (80086c8 <FLASH_FlushCaches+0x84>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a07      	ldr	r2, [pc, #28]	; (80086c8 <FLASH_FlushCaches+0x84>)
 80086aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80086ae:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80086b0:	4b04      	ldr	r3, [pc, #16]	; (80086c4 <FLASH_FlushCaches+0x80>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	771a      	strb	r2, [r3, #28]
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	2000000c 	.word	0x2000000c
 80086c8:	40022000 	.word	0x40022000

080086cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b087      	sub	sp, #28
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80086d6:	2300      	movs	r3, #0
 80086d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80086da:	e15a      	b.n	8008992 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	2101      	movs	r1, #1
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	fa01 f303 	lsl.w	r3, r1, r3
 80086e8:	4013      	ands	r3, r2
 80086ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f000 814c 	beq.w	800898c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d00b      	beq.n	8008714 <HAL_GPIO_Init+0x48>
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	2b02      	cmp	r3, #2
 8008702:	d007      	beq.n	8008714 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008708:	2b11      	cmp	r3, #17
 800870a:	d003      	beq.n	8008714 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	2b12      	cmp	r3, #18
 8008712:	d130      	bne.n	8008776 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	005b      	lsls	r3, r3, #1
 800871e:	2203      	movs	r2, #3
 8008720:	fa02 f303 	lsl.w	r3, r2, r3
 8008724:	43db      	mvns	r3, r3
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	4013      	ands	r3, r2
 800872a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	68da      	ldr	r2, [r3, #12]
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	005b      	lsls	r3, r3, #1
 8008734:	fa02 f303 	lsl.w	r3, r2, r3
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	4313      	orrs	r3, r2
 800873c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800874a:	2201      	movs	r2, #1
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	fa02 f303 	lsl.w	r3, r2, r3
 8008752:	43db      	mvns	r3, r3
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	4013      	ands	r3, r2
 8008758:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	091b      	lsrs	r3, r3, #4
 8008760:	f003 0201 	and.w	r2, r3, #1
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	fa02 f303 	lsl.w	r3, r2, r3
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	4313      	orrs	r3, r2
 800876e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	005b      	lsls	r3, r3, #1
 8008780:	2203      	movs	r2, #3
 8008782:	fa02 f303 	lsl.w	r3, r2, r3
 8008786:	43db      	mvns	r3, r3
 8008788:	693a      	ldr	r2, [r7, #16]
 800878a:	4013      	ands	r3, r2
 800878c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	689a      	ldr	r2, [r3, #8]
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	005b      	lsls	r3, r3, #1
 8008796:	fa02 f303 	lsl.w	r3, r2, r3
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	4313      	orrs	r3, r2
 800879e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	693a      	ldr	r2, [r7, #16]
 80087a4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d003      	beq.n	80087b6 <HAL_GPIO_Init+0xea>
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	2b12      	cmp	r3, #18
 80087b4:	d123      	bne.n	80087fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	08da      	lsrs	r2, r3, #3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	3208      	adds	r2, #8
 80087be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	f003 0307 	and.w	r3, r3, #7
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	220f      	movs	r2, #15
 80087ce:	fa02 f303 	lsl.w	r3, r2, r3
 80087d2:	43db      	mvns	r3, r3
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	4013      	ands	r3, r2
 80087d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	691a      	ldr	r2, [r3, #16]
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	f003 0307 	and.w	r3, r3, #7
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	fa02 f303 	lsl.w	r3, r2, r3
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	08da      	lsrs	r2, r3, #3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	3208      	adds	r2, #8
 80087f8:	6939      	ldr	r1, [r7, #16]
 80087fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	005b      	lsls	r3, r3, #1
 8008808:	2203      	movs	r2, #3
 800880a:	fa02 f303 	lsl.w	r3, r2, r3
 800880e:	43db      	mvns	r3, r3
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	4013      	ands	r3, r2
 8008814:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	f003 0203 	and.w	r2, r3, #3
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	005b      	lsls	r3, r3, #1
 8008822:	fa02 f303 	lsl.w	r3, r2, r3
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	4313      	orrs	r3, r2
 800882a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 80a6 	beq.w	800898c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008840:	4b5b      	ldr	r3, [pc, #364]	; (80089b0 <HAL_GPIO_Init+0x2e4>)
 8008842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008844:	4a5a      	ldr	r2, [pc, #360]	; (80089b0 <HAL_GPIO_Init+0x2e4>)
 8008846:	f043 0301 	orr.w	r3, r3, #1
 800884a:	6613      	str	r3, [r2, #96]	; 0x60
 800884c:	4b58      	ldr	r3, [pc, #352]	; (80089b0 <HAL_GPIO_Init+0x2e4>)
 800884e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008850:	f003 0301 	and.w	r3, r3, #1
 8008854:	60bb      	str	r3, [r7, #8]
 8008856:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008858:	4a56      	ldr	r2, [pc, #344]	; (80089b4 <HAL_GPIO_Init+0x2e8>)
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	089b      	lsrs	r3, r3, #2
 800885e:	3302      	adds	r3, #2
 8008860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008864:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f003 0303 	and.w	r3, r3, #3
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	220f      	movs	r2, #15
 8008870:	fa02 f303 	lsl.w	r3, r2, r3
 8008874:	43db      	mvns	r3, r3
 8008876:	693a      	ldr	r2, [r7, #16]
 8008878:	4013      	ands	r3, r2
 800887a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008882:	d01f      	beq.n	80088c4 <HAL_GPIO_Init+0x1f8>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a4c      	ldr	r2, [pc, #304]	; (80089b8 <HAL_GPIO_Init+0x2ec>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d019      	beq.n	80088c0 <HAL_GPIO_Init+0x1f4>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a4b      	ldr	r2, [pc, #300]	; (80089bc <HAL_GPIO_Init+0x2f0>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d013      	beq.n	80088bc <HAL_GPIO_Init+0x1f0>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a4a      	ldr	r2, [pc, #296]	; (80089c0 <HAL_GPIO_Init+0x2f4>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d00d      	beq.n	80088b8 <HAL_GPIO_Init+0x1ec>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a49      	ldr	r2, [pc, #292]	; (80089c4 <HAL_GPIO_Init+0x2f8>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d007      	beq.n	80088b4 <HAL_GPIO_Init+0x1e8>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a48      	ldr	r2, [pc, #288]	; (80089c8 <HAL_GPIO_Init+0x2fc>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d101      	bne.n	80088b0 <HAL_GPIO_Init+0x1e4>
 80088ac:	2305      	movs	r3, #5
 80088ae:	e00a      	b.n	80088c6 <HAL_GPIO_Init+0x1fa>
 80088b0:	2306      	movs	r3, #6
 80088b2:	e008      	b.n	80088c6 <HAL_GPIO_Init+0x1fa>
 80088b4:	2304      	movs	r3, #4
 80088b6:	e006      	b.n	80088c6 <HAL_GPIO_Init+0x1fa>
 80088b8:	2303      	movs	r3, #3
 80088ba:	e004      	b.n	80088c6 <HAL_GPIO_Init+0x1fa>
 80088bc:	2302      	movs	r3, #2
 80088be:	e002      	b.n	80088c6 <HAL_GPIO_Init+0x1fa>
 80088c0:	2301      	movs	r3, #1
 80088c2:	e000      	b.n	80088c6 <HAL_GPIO_Init+0x1fa>
 80088c4:	2300      	movs	r3, #0
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	f002 0203 	and.w	r2, r2, #3
 80088cc:	0092      	lsls	r2, r2, #2
 80088ce:	4093      	lsls	r3, r2
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80088d6:	4937      	ldr	r1, [pc, #220]	; (80089b4 <HAL_GPIO_Init+0x2e8>)
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	089b      	lsrs	r3, r3, #2
 80088dc:	3302      	adds	r3, #2
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80088e4:	4b39      	ldr	r3, [pc, #228]	; (80089cc <HAL_GPIO_Init+0x300>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	43db      	mvns	r3, r3
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	4013      	ands	r3, r2
 80088f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d003      	beq.n	8008908 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	4313      	orrs	r3, r2
 8008906:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008908:	4a30      	ldr	r2, [pc, #192]	; (80089cc <HAL_GPIO_Init+0x300>)
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800890e:	4b2f      	ldr	r3, [pc, #188]	; (80089cc <HAL_GPIO_Init+0x300>)
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	43db      	mvns	r3, r3
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	4013      	ands	r3, r2
 800891c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008926:	2b00      	cmp	r3, #0
 8008928:	d003      	beq.n	8008932 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	4313      	orrs	r3, r2
 8008930:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008932:	4a26      	ldr	r2, [pc, #152]	; (80089cc <HAL_GPIO_Init+0x300>)
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008938:	4b24      	ldr	r3, [pc, #144]	; (80089cc <HAL_GPIO_Init+0x300>)
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	43db      	mvns	r3, r3
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	4013      	ands	r3, r2
 8008946:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008950:	2b00      	cmp	r3, #0
 8008952:	d003      	beq.n	800895c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	4313      	orrs	r3, r2
 800895a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800895c:	4a1b      	ldr	r2, [pc, #108]	; (80089cc <HAL_GPIO_Init+0x300>)
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008962:	4b1a      	ldr	r3, [pc, #104]	; (80089cc <HAL_GPIO_Init+0x300>)
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	43db      	mvns	r3, r3
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	4013      	ands	r3, r2
 8008970:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d003      	beq.n	8008986 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4313      	orrs	r3, r2
 8008984:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008986:	4a11      	ldr	r2, [pc, #68]	; (80089cc <HAL_GPIO_Init+0x300>)
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	3301      	adds	r3, #1
 8008990:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	fa22 f303 	lsr.w	r3, r2, r3
 800899c:	2b00      	cmp	r3, #0
 800899e:	f47f ae9d 	bne.w	80086dc <HAL_GPIO_Init+0x10>
  }
}
 80089a2:	bf00      	nop
 80089a4:	bf00      	nop
 80089a6:	371c      	adds	r7, #28
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	40021000 	.word	0x40021000
 80089b4:	40010000 	.word	0x40010000
 80089b8:	48000400 	.word	0x48000400
 80089bc:	48000800 	.word	0x48000800
 80089c0:	48000c00 	.word	0x48000c00
 80089c4:	48001000 	.word	0x48001000
 80089c8:	48001400 	.word	0x48001400
 80089cc:	40010400 	.word	0x40010400

080089d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	460b      	mov	r3, r1
 80089da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	691a      	ldr	r2, [r3, #16]
 80089e0:	887b      	ldrh	r3, [r7, #2]
 80089e2:	4013      	ands	r3, r2
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d002      	beq.n	80089ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80089e8:	2301      	movs	r3, #1
 80089ea:	73fb      	strb	r3, [r7, #15]
 80089ec:	e001      	b.n	80089f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80089ee:	2300      	movs	r3, #0
 80089f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80089f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	807b      	strh	r3, [r7, #2]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008a10:	787b      	ldrb	r3, [r7, #1]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d003      	beq.n	8008a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008a16:	887a      	ldrh	r2, [r7, #2]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008a1c:	e002      	b.n	8008a24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008a1e:	887a      	ldrh	r2, [r7, #2]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e0bb      	b.n	8008bbe <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b05      	cmp	r3, #5
 8008a50:	d101      	bne.n	8008a56 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	e0b3      	b.n	8008bbe <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d101      	bne.n	8008a66 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e0ab      	b.n	8008bbe <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a66:	4b58      	ldr	r3, [pc, #352]	; (8008bc8 <HAL_OPAMP_Init+0x198>)
 8008a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a6a:	4a57      	ldr	r2, [pc, #348]	; (8008bc8 <HAL_OPAMP_Init+0x198>)
 8008a6c:	f043 0301 	orr.w	r3, r3, #1
 8008a70:	6613      	str	r3, [r2, #96]	; 0x60
 8008a72:	4b55      	ldr	r3, [pc, #340]	; (8008bc8 <HAL_OPAMP_Init+0x198>)
 8008a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a76:	f003 0301 	and.w	r3, r3, #1
 8008a7a:	60bb      	str	r3, [r7, #8]
 8008a7c:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d103      	bne.n	8008a92 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7fc f8f4 	bl	8004c80 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	2b40      	cmp	r3, #64	; 0x40
 8008a9e:	d003      	beq.n	8008aa8 <HAL_OPAMP_Init+0x78>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	2b60      	cmp	r3, #96	; 0x60
 8008aa6:	d133      	bne.n	8008b10 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f023 0110 	bic.w	r1, r3, #16
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	430a      	orrs	r2, r1
 8008abc:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	4b41      	ldr	r3, [pc, #260]	; (8008bcc <HAL_OPAMP_Init+0x19c>)
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	6851      	ldr	r1, [r2, #4]
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	6892      	ldr	r2, [r2, #8]
 8008ad0:	4311      	orrs	r1, r2
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	6912      	ldr	r2, [r2, #16]
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	6879      	ldr	r1, [r7, #4]
 8008ada:	7d09      	ldrb	r1, [r1, #20]
 8008adc:	2901      	cmp	r1, #1
 8008ade:	d102      	bne.n	8008ae6 <HAL_OPAMP_Init+0xb6>
 8008ae0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008ae4:	e000      	b.n	8008ae8 <HAL_OPAMP_Init+0xb8>
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	4311      	orrs	r1, r2
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008aee:	4311      	orrs	r1, r2
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008af4:	4311      	orrs	r1, r2
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008afa:	04d2      	lsls	r2, r2, #19
 8008afc:	4311      	orrs	r1, r2
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008b02:	0612      	lsls	r2, r2, #24
 8008b04:	4311      	orrs	r1, r2
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	6812      	ldr	r2, [r2, #0]
 8008b0a:	430b      	orrs	r3, r1
 8008b0c:	6013      	str	r3, [r2, #0]
 8008b0e:	e035      	b.n	8008b7c <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f023 0110 	bic.w	r1, r3, #16
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	430a      	orrs	r2, r1
 8008b24:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	4b27      	ldr	r3, [pc, #156]	; (8008bcc <HAL_OPAMP_Init+0x19c>)
 8008b2e:	4013      	ands	r3, r2
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	6851      	ldr	r1, [r2, #4]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	6892      	ldr	r2, [r2, #8]
 8008b38:	4311      	orrs	r1, r2
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	68d2      	ldr	r2, [r2, #12]
 8008b3e:	4311      	orrs	r1, r2
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	6912      	ldr	r2, [r2, #16]
 8008b44:	430a      	orrs	r2, r1
 8008b46:	6879      	ldr	r1, [r7, #4]
 8008b48:	7d09      	ldrb	r1, [r1, #20]
 8008b4a:	2901      	cmp	r1, #1
 8008b4c:	d102      	bne.n	8008b54 <HAL_OPAMP_Init+0x124>
 8008b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008b52:	e000      	b.n	8008b56 <HAL_OPAMP_Init+0x126>
 8008b54:	2100      	movs	r1, #0
 8008b56:	4311      	orrs	r1, r2
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008b5c:	4311      	orrs	r1, r2
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008b62:	4311      	orrs	r1, r2
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008b68:	04d2      	lsls	r2, r2, #19
 8008b6a:	4311      	orrs	r1, r2
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008b70:	0612      	lsls	r2, r2, #24
 8008b72:	4311      	orrs	r1, r2
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	6812      	ldr	r2, [r2, #0]
 8008b78:	430b      	orrs	r3, r1
 8008b7a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	db10      	blt.n	8008ba8 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	699a      	ldr	r2, [r3, #24]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	69db      	ldr	r3, [r3, #28]
 8008b98:	431a      	orrs	r2, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a1b      	ldr	r3, [r3, #32]
 8008b9e:	431a      	orrs	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	430a      	orrs	r2, r1
 8008ba6:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d103      	bne.n	8008bbc <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	40021000 	.word	0x40021000
 8008bcc:	e0003e11 	.word	0xe0003e11

08008bd0 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d102      	bne.n	8008be8 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	73fb      	strb	r3, [r7, #15]
 8008be6:	e01d      	b.n	8008c24 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b05      	cmp	r3, #5
 8008bf2:	d102      	bne.n	8008bfa <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	73fb      	strb	r3, [r7, #15]
 8008bf8:	e014      	b.n	8008c24 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d10c      	bne.n	8008c20 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f042 0201 	orr.w	r2, r2, #1
 8008c14:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2204      	movs	r2, #4
 8008c1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8008c1e:	e001      	b.n	8008c24 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3714      	adds	r7, #20
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
	...

08008c34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d141      	bne.n	8008cc6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008c42:	4b4b      	ldr	r3, [pc, #300]	; (8008d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c4e:	d131      	bne.n	8008cb4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008c50:	4b47      	ldr	r3, [pc, #284]	; (8008d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c56:	4a46      	ldr	r2, [pc, #280]	; (8008d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008c60:	4b43      	ldr	r3, [pc, #268]	; (8008d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008c68:	4a41      	ldr	r2, [pc, #260]	; (8008d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008c70:	4b40      	ldr	r3, [pc, #256]	; (8008d74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2232      	movs	r2, #50	; 0x32
 8008c76:	fb02 f303 	mul.w	r3, r2, r3
 8008c7a:	4a3f      	ldr	r2, [pc, #252]	; (8008d78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c80:	0c9b      	lsrs	r3, r3, #18
 8008c82:	3301      	adds	r3, #1
 8008c84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008c86:	e002      	b.n	8008c8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008c8e:	4b38      	ldr	r3, [pc, #224]	; (8008d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c9a:	d102      	bne.n	8008ca2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1f2      	bne.n	8008c88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008ca2:	4b33      	ldr	r3, [pc, #204]	; (8008d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cae:	d158      	bne.n	8008d62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	e057      	b.n	8008d64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008cb4:	4b2e      	ldr	r3, [pc, #184]	; (8008d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cba:	4a2d      	ldr	r2, [pc, #180]	; (8008d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008cc4:	e04d      	b.n	8008d62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ccc:	d141      	bne.n	8008d52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008cce:	4b28      	ldr	r3, [pc, #160]	; (8008d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cda:	d131      	bne.n	8008d40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008cdc:	4b24      	ldr	r3, [pc, #144]	; (8008d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ce2:	4a23      	ldr	r2, [pc, #140]	; (8008d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ce8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008cec:	4b20      	ldr	r3, [pc, #128]	; (8008d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008cf4:	4a1e      	ldr	r2, [pc, #120]	; (8008d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008cfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008cfc:	4b1d      	ldr	r3, [pc, #116]	; (8008d74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2232      	movs	r2, #50	; 0x32
 8008d02:	fb02 f303 	mul.w	r3, r2, r3
 8008d06:	4a1c      	ldr	r2, [pc, #112]	; (8008d78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008d08:	fba2 2303 	umull	r2, r3, r2, r3
 8008d0c:	0c9b      	lsrs	r3, r3, #18
 8008d0e:	3301      	adds	r3, #1
 8008d10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008d12:	e002      	b.n	8008d1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3b01      	subs	r3, #1
 8008d18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008d1a:	4b15      	ldr	r3, [pc, #84]	; (8008d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d1c:	695b      	ldr	r3, [r3, #20]
 8008d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d26:	d102      	bne.n	8008d2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1f2      	bne.n	8008d14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008d2e:	4b10      	ldr	r3, [pc, #64]	; (8008d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d3a:	d112      	bne.n	8008d62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	e011      	b.n	8008d64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008d40:	4b0b      	ldr	r3, [pc, #44]	; (8008d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d46:	4a0a      	ldr	r2, [pc, #40]	; (8008d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008d50:	e007      	b.n	8008d62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008d52:	4b07      	ldr	r3, [pc, #28]	; (8008d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008d5a:	4a05      	ldr	r2, [pc, #20]	; (8008d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d60:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	40007000 	.word	0x40007000
 8008d74:	20000000 	.word	0x20000000
 8008d78:	431bde83 	.word	0x431bde83

08008d7c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008d80:	4b05      	ldr	r3, [pc, #20]	; (8008d98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	4a04      	ldr	r2, [pc, #16]	; (8008d98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008d86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d8a:	6093      	str	r3, [r2, #8]
}
 8008d8c:	bf00      	nop
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	40007000 	.word	0x40007000

08008d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b088      	sub	sp, #32
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e306      	b.n	80093bc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 0301 	and.w	r3, r3, #1
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d075      	beq.n	8008ea6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dba:	4b97      	ldr	r3, [pc, #604]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	f003 030c 	and.w	r3, r3, #12
 8008dc2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008dc4:	4b94      	ldr	r3, [pc, #592]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	f003 0303 	and.w	r3, r3, #3
 8008dcc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	2b0c      	cmp	r3, #12
 8008dd2:	d102      	bne.n	8008dda <HAL_RCC_OscConfig+0x3e>
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	d002      	beq.n	8008de0 <HAL_RCC_OscConfig+0x44>
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	2b08      	cmp	r3, #8
 8008dde:	d10b      	bne.n	8008df8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008de0:	4b8d      	ldr	r3, [pc, #564]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d05b      	beq.n	8008ea4 <HAL_RCC_OscConfig+0x108>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d157      	bne.n	8008ea4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e2e1      	b.n	80093bc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e00:	d106      	bne.n	8008e10 <HAL_RCC_OscConfig+0x74>
 8008e02:	4b85      	ldr	r3, [pc, #532]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a84      	ldr	r2, [pc, #528]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e0c:	6013      	str	r3, [r2, #0]
 8008e0e:	e01d      	b.n	8008e4c <HAL_RCC_OscConfig+0xb0>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e18:	d10c      	bne.n	8008e34 <HAL_RCC_OscConfig+0x98>
 8008e1a:	4b7f      	ldr	r3, [pc, #508]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a7e      	ldr	r2, [pc, #504]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e24:	6013      	str	r3, [r2, #0]
 8008e26:	4b7c      	ldr	r3, [pc, #496]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a7b      	ldr	r2, [pc, #492]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e30:	6013      	str	r3, [r2, #0]
 8008e32:	e00b      	b.n	8008e4c <HAL_RCC_OscConfig+0xb0>
 8008e34:	4b78      	ldr	r3, [pc, #480]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a77      	ldr	r2, [pc, #476]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	4b75      	ldr	r3, [pc, #468]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a74      	ldr	r2, [pc, #464]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d013      	beq.n	8008e7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e54:	f7fc ff30 	bl	8005cb8 <HAL_GetTick>
 8008e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e5a:	e008      	b.n	8008e6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e5c:	f7fc ff2c 	bl	8005cb8 <HAL_GetTick>
 8008e60:	4602      	mov	r2, r0
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	2b64      	cmp	r3, #100	; 0x64
 8008e68:	d901      	bls.n	8008e6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e2a6      	b.n	80093bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e6e:	4b6a      	ldr	r3, [pc, #424]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d0f0      	beq.n	8008e5c <HAL_RCC_OscConfig+0xc0>
 8008e7a:	e014      	b.n	8008ea6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e7c:	f7fc ff1c 	bl	8005cb8 <HAL_GetTick>
 8008e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008e82:	e008      	b.n	8008e96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e84:	f7fc ff18 	bl	8005cb8 <HAL_GetTick>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	2b64      	cmp	r3, #100	; 0x64
 8008e90:	d901      	bls.n	8008e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008e92:	2303      	movs	r3, #3
 8008e94:	e292      	b.n	80093bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008e96:	4b60      	ldr	r3, [pc, #384]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1f0      	bne.n	8008e84 <HAL_RCC_OscConfig+0xe8>
 8008ea2:	e000      	b.n	8008ea6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 0302 	and.w	r3, r3, #2
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d075      	beq.n	8008f9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008eb2:	4b59      	ldr	r3, [pc, #356]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f003 030c 	and.w	r3, r3, #12
 8008eba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ebc:	4b56      	ldr	r3, [pc, #344]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	f003 0303 	and.w	r3, r3, #3
 8008ec4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	2b0c      	cmp	r3, #12
 8008eca:	d102      	bne.n	8008ed2 <HAL_RCC_OscConfig+0x136>
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d002      	beq.n	8008ed8 <HAL_RCC_OscConfig+0x13c>
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	2b04      	cmp	r3, #4
 8008ed6:	d11f      	bne.n	8008f18 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ed8:	4b4f      	ldr	r3, [pc, #316]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d005      	beq.n	8008ef0 <HAL_RCC_OscConfig+0x154>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d101      	bne.n	8008ef0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e265      	b.n	80093bc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ef0:	4b49      	ldr	r3, [pc, #292]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	061b      	lsls	r3, r3, #24
 8008efe:	4946      	ldr	r1, [pc, #280]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008f00:	4313      	orrs	r3, r2
 8008f02:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008f04:	4b45      	ldr	r3, [pc, #276]	; (800901c <HAL_RCC_OscConfig+0x280>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7fc fe89 	bl	8005c20 <HAL_InitTick>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d043      	beq.n	8008f9c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	e251      	b.n	80093bc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d023      	beq.n	8008f68 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f20:	4b3d      	ldr	r3, [pc, #244]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a3c      	ldr	r2, [pc, #240]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f2c:	f7fc fec4 	bl	8005cb8 <HAL_GetTick>
 8008f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f32:	e008      	b.n	8008f46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f34:	f7fc fec0 	bl	8005cb8 <HAL_GetTick>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d901      	bls.n	8008f46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e23a      	b.n	80093bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f46:	4b34      	ldr	r3, [pc, #208]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d0f0      	beq.n	8008f34 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f52:	4b31      	ldr	r3, [pc, #196]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	061b      	lsls	r3, r3, #24
 8008f60:	492d      	ldr	r1, [pc, #180]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008f62:	4313      	orrs	r3, r2
 8008f64:	604b      	str	r3, [r1, #4]
 8008f66:	e01a      	b.n	8008f9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f68:	4b2b      	ldr	r3, [pc, #172]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a2a      	ldr	r2, [pc, #168]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008f6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f74:	f7fc fea0 	bl	8005cb8 <HAL_GetTick>
 8008f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008f7a:	e008      	b.n	8008f8e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f7c:	f7fc fe9c 	bl	8005cb8 <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d901      	bls.n	8008f8e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	e216      	b.n	80093bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008f8e:	4b22      	ldr	r3, [pc, #136]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1f0      	bne.n	8008f7c <HAL_RCC_OscConfig+0x1e0>
 8008f9a:	e000      	b.n	8008f9e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 0308 	and.w	r3, r3, #8
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d041      	beq.n	800902e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d01c      	beq.n	8008fec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008fb2:	4b19      	ldr	r3, [pc, #100]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fb8:	4a17      	ldr	r2, [pc, #92]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008fba:	f043 0301 	orr.w	r3, r3, #1
 8008fbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fc2:	f7fc fe79 	bl	8005cb8 <HAL_GetTick>
 8008fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008fc8:	e008      	b.n	8008fdc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008fca:	f7fc fe75 	bl	8005cb8 <HAL_GetTick>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	1ad3      	subs	r3, r2, r3
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d901      	bls.n	8008fdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e1ef      	b.n	80093bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008fdc:	4b0e      	ldr	r3, [pc, #56]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d0ef      	beq.n	8008fca <HAL_RCC_OscConfig+0x22e>
 8008fea:	e020      	b.n	800902e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008fec:	4b0a      	ldr	r3, [pc, #40]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ff2:	4a09      	ldr	r2, [pc, #36]	; (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008ff4:	f023 0301 	bic.w	r3, r3, #1
 8008ff8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ffc:	f7fc fe5c 	bl	8005cb8 <HAL_GetTick>
 8009000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009002:	e00d      	b.n	8009020 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009004:	f7fc fe58 	bl	8005cb8 <HAL_GetTick>
 8009008:	4602      	mov	r2, r0
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	1ad3      	subs	r3, r2, r3
 800900e:	2b02      	cmp	r3, #2
 8009010:	d906      	bls.n	8009020 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009012:	2303      	movs	r3, #3
 8009014:	e1d2      	b.n	80093bc <HAL_RCC_OscConfig+0x620>
 8009016:	bf00      	nop
 8009018:	40021000 	.word	0x40021000
 800901c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009020:	4b8c      	ldr	r3, [pc, #560]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 8009022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009026:	f003 0302 	and.w	r3, r3, #2
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1ea      	bne.n	8009004 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 0304 	and.w	r3, r3, #4
 8009036:	2b00      	cmp	r3, #0
 8009038:	f000 80a6 	beq.w	8009188 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800903c:	2300      	movs	r3, #0
 800903e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009040:	4b84      	ldr	r3, [pc, #528]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 8009042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009048:	2b00      	cmp	r3, #0
 800904a:	d101      	bne.n	8009050 <HAL_RCC_OscConfig+0x2b4>
 800904c:	2301      	movs	r3, #1
 800904e:	e000      	b.n	8009052 <HAL_RCC_OscConfig+0x2b6>
 8009050:	2300      	movs	r3, #0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00d      	beq.n	8009072 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009056:	4b7f      	ldr	r3, [pc, #508]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 8009058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800905a:	4a7e      	ldr	r2, [pc, #504]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 800905c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009060:	6593      	str	r3, [r2, #88]	; 0x58
 8009062:	4b7c      	ldr	r3, [pc, #496]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 8009064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800906a:	60fb      	str	r3, [r7, #12]
 800906c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800906e:	2301      	movs	r3, #1
 8009070:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009072:	4b79      	ldr	r3, [pc, #484]	; (8009258 <HAL_RCC_OscConfig+0x4bc>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800907a:	2b00      	cmp	r3, #0
 800907c:	d118      	bne.n	80090b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800907e:	4b76      	ldr	r3, [pc, #472]	; (8009258 <HAL_RCC_OscConfig+0x4bc>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a75      	ldr	r2, [pc, #468]	; (8009258 <HAL_RCC_OscConfig+0x4bc>)
 8009084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800908a:	f7fc fe15 	bl	8005cb8 <HAL_GetTick>
 800908e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009090:	e008      	b.n	80090a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009092:	f7fc fe11 	bl	8005cb8 <HAL_GetTick>
 8009096:	4602      	mov	r2, r0
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	1ad3      	subs	r3, r2, r3
 800909c:	2b02      	cmp	r3, #2
 800909e:	d901      	bls.n	80090a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80090a0:	2303      	movs	r3, #3
 80090a2:	e18b      	b.n	80093bc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090a4:	4b6c      	ldr	r3, [pc, #432]	; (8009258 <HAL_RCC_OscConfig+0x4bc>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d0f0      	beq.n	8009092 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d108      	bne.n	80090ca <HAL_RCC_OscConfig+0x32e>
 80090b8:	4b66      	ldr	r3, [pc, #408]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 80090ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090be:	4a65      	ldr	r2, [pc, #404]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 80090c0:	f043 0301 	orr.w	r3, r3, #1
 80090c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80090c8:	e024      	b.n	8009114 <HAL_RCC_OscConfig+0x378>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	2b05      	cmp	r3, #5
 80090d0:	d110      	bne.n	80090f4 <HAL_RCC_OscConfig+0x358>
 80090d2:	4b60      	ldr	r3, [pc, #384]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 80090d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090d8:	4a5e      	ldr	r2, [pc, #376]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 80090da:	f043 0304 	orr.w	r3, r3, #4
 80090de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80090e2:	4b5c      	ldr	r3, [pc, #368]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 80090e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090e8:	4a5a      	ldr	r2, [pc, #360]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 80090ea:	f043 0301 	orr.w	r3, r3, #1
 80090ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80090f2:	e00f      	b.n	8009114 <HAL_RCC_OscConfig+0x378>
 80090f4:	4b57      	ldr	r3, [pc, #348]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 80090f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090fa:	4a56      	ldr	r2, [pc, #344]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 80090fc:	f023 0301 	bic.w	r3, r3, #1
 8009100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009104:	4b53      	ldr	r3, [pc, #332]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 8009106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800910a:	4a52      	ldr	r2, [pc, #328]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 800910c:	f023 0304 	bic.w	r3, r3, #4
 8009110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d016      	beq.n	800914a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800911c:	f7fc fdcc 	bl	8005cb8 <HAL_GetTick>
 8009120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009122:	e00a      	b.n	800913a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009124:	f7fc fdc8 	bl	8005cb8 <HAL_GetTick>
 8009128:	4602      	mov	r2, r0
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009132:	4293      	cmp	r3, r2
 8009134:	d901      	bls.n	800913a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e140      	b.n	80093bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800913a:	4b46      	ldr	r3, [pc, #280]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 800913c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009140:	f003 0302 	and.w	r3, r3, #2
 8009144:	2b00      	cmp	r3, #0
 8009146:	d0ed      	beq.n	8009124 <HAL_RCC_OscConfig+0x388>
 8009148:	e015      	b.n	8009176 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800914a:	f7fc fdb5 	bl	8005cb8 <HAL_GetTick>
 800914e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009150:	e00a      	b.n	8009168 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009152:	f7fc fdb1 	bl	8005cb8 <HAL_GetTick>
 8009156:	4602      	mov	r2, r0
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	1ad3      	subs	r3, r2, r3
 800915c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009160:	4293      	cmp	r3, r2
 8009162:	d901      	bls.n	8009168 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009164:	2303      	movs	r3, #3
 8009166:	e129      	b.n	80093bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009168:	4b3a      	ldr	r3, [pc, #232]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 800916a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800916e:	f003 0302 	and.w	r3, r3, #2
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1ed      	bne.n	8009152 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009176:	7ffb      	ldrb	r3, [r7, #31]
 8009178:	2b01      	cmp	r3, #1
 800917a:	d105      	bne.n	8009188 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800917c:	4b35      	ldr	r3, [pc, #212]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 800917e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009180:	4a34      	ldr	r2, [pc, #208]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 8009182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009186:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 0320 	and.w	r3, r3, #32
 8009190:	2b00      	cmp	r3, #0
 8009192:	d03c      	beq.n	800920e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d01c      	beq.n	80091d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800919c:	4b2d      	ldr	r3, [pc, #180]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 800919e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80091a2:	4a2c      	ldr	r2, [pc, #176]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 80091a4:	f043 0301 	orr.w	r3, r3, #1
 80091a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091ac:	f7fc fd84 	bl	8005cb8 <HAL_GetTick>
 80091b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80091b2:	e008      	b.n	80091c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80091b4:	f7fc fd80 	bl	8005cb8 <HAL_GetTick>
 80091b8:	4602      	mov	r2, r0
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	1ad3      	subs	r3, r2, r3
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d901      	bls.n	80091c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80091c2:	2303      	movs	r3, #3
 80091c4:	e0fa      	b.n	80093bc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80091c6:	4b23      	ldr	r3, [pc, #140]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 80091c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80091cc:	f003 0302 	and.w	r3, r3, #2
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d0ef      	beq.n	80091b4 <HAL_RCC_OscConfig+0x418>
 80091d4:	e01b      	b.n	800920e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80091d6:	4b1f      	ldr	r3, [pc, #124]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 80091d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80091dc:	4a1d      	ldr	r2, [pc, #116]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 80091de:	f023 0301 	bic.w	r3, r3, #1
 80091e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091e6:	f7fc fd67 	bl	8005cb8 <HAL_GetTick>
 80091ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80091ec:	e008      	b.n	8009200 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80091ee:	f7fc fd63 	bl	8005cb8 <HAL_GetTick>
 80091f2:	4602      	mov	r2, r0
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d901      	bls.n	8009200 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80091fc:	2303      	movs	r3, #3
 80091fe:	e0dd      	b.n	80093bc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009200:	4b14      	ldr	r3, [pc, #80]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 8009202:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009206:	f003 0302 	and.w	r3, r3, #2
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1ef      	bne.n	80091ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	69db      	ldr	r3, [r3, #28]
 8009212:	2b00      	cmp	r3, #0
 8009214:	f000 80d1 	beq.w	80093ba <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009218:	4b0e      	ldr	r3, [pc, #56]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	f003 030c 	and.w	r3, r3, #12
 8009220:	2b0c      	cmp	r3, #12
 8009222:	f000 808b 	beq.w	800933c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	69db      	ldr	r3, [r3, #28]
 800922a:	2b02      	cmp	r3, #2
 800922c:	d15e      	bne.n	80092ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800922e:	4b09      	ldr	r3, [pc, #36]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a08      	ldr	r2, [pc, #32]	; (8009254 <HAL_RCC_OscConfig+0x4b8>)
 8009234:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800923a:	f7fc fd3d 	bl	8005cb8 <HAL_GetTick>
 800923e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009240:	e00c      	b.n	800925c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009242:	f7fc fd39 	bl	8005cb8 <HAL_GetTick>
 8009246:	4602      	mov	r2, r0
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	2b02      	cmp	r3, #2
 800924e:	d905      	bls.n	800925c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009250:	2303      	movs	r3, #3
 8009252:	e0b3      	b.n	80093bc <HAL_RCC_OscConfig+0x620>
 8009254:	40021000 	.word	0x40021000
 8009258:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800925c:	4b59      	ldr	r3, [pc, #356]	; (80093c4 <HAL_RCC_OscConfig+0x628>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1ec      	bne.n	8009242 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009268:	4b56      	ldr	r3, [pc, #344]	; (80093c4 <HAL_RCC_OscConfig+0x628>)
 800926a:	68da      	ldr	r2, [r3, #12]
 800926c:	4b56      	ldr	r3, [pc, #344]	; (80093c8 <HAL_RCC_OscConfig+0x62c>)
 800926e:	4013      	ands	r3, r2
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	6a11      	ldr	r1, [r2, #32]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009278:	3a01      	subs	r2, #1
 800927a:	0112      	lsls	r2, r2, #4
 800927c:	4311      	orrs	r1, r2
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009282:	0212      	lsls	r2, r2, #8
 8009284:	4311      	orrs	r1, r2
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800928a:	0852      	lsrs	r2, r2, #1
 800928c:	3a01      	subs	r2, #1
 800928e:	0552      	lsls	r2, r2, #21
 8009290:	4311      	orrs	r1, r2
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009296:	0852      	lsrs	r2, r2, #1
 8009298:	3a01      	subs	r2, #1
 800929a:	0652      	lsls	r2, r2, #25
 800929c:	4311      	orrs	r1, r2
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80092a2:	06d2      	lsls	r2, r2, #27
 80092a4:	430a      	orrs	r2, r1
 80092a6:	4947      	ldr	r1, [pc, #284]	; (80093c4 <HAL_RCC_OscConfig+0x628>)
 80092a8:	4313      	orrs	r3, r2
 80092aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80092ac:	4b45      	ldr	r3, [pc, #276]	; (80093c4 <HAL_RCC_OscConfig+0x628>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a44      	ldr	r2, [pc, #272]	; (80093c4 <HAL_RCC_OscConfig+0x628>)
 80092b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80092b8:	4b42      	ldr	r3, [pc, #264]	; (80093c4 <HAL_RCC_OscConfig+0x628>)
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	4a41      	ldr	r2, [pc, #260]	; (80093c4 <HAL_RCC_OscConfig+0x628>)
 80092be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092c4:	f7fc fcf8 	bl	8005cb8 <HAL_GetTick>
 80092c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092ca:	e008      	b.n	80092de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092cc:	f7fc fcf4 	bl	8005cb8 <HAL_GetTick>
 80092d0:	4602      	mov	r2, r0
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d901      	bls.n	80092de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e06e      	b.n	80093bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092de:	4b39      	ldr	r3, [pc, #228]	; (80093c4 <HAL_RCC_OscConfig+0x628>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d0f0      	beq.n	80092cc <HAL_RCC_OscConfig+0x530>
 80092ea:	e066      	b.n	80093ba <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092ec:	4b35      	ldr	r3, [pc, #212]	; (80093c4 <HAL_RCC_OscConfig+0x628>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a34      	ldr	r2, [pc, #208]	; (80093c4 <HAL_RCC_OscConfig+0x628>)
 80092f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092f6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80092f8:	4b32      	ldr	r3, [pc, #200]	; (80093c4 <HAL_RCC_OscConfig+0x628>)
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	4a31      	ldr	r2, [pc, #196]	; (80093c4 <HAL_RCC_OscConfig+0x628>)
 80092fe:	f023 0303 	bic.w	r3, r3, #3
 8009302:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009304:	4b2f      	ldr	r3, [pc, #188]	; (80093c4 <HAL_RCC_OscConfig+0x628>)
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	4a2e      	ldr	r2, [pc, #184]	; (80093c4 <HAL_RCC_OscConfig+0x628>)
 800930a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800930e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009312:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009314:	f7fc fcd0 	bl	8005cb8 <HAL_GetTick>
 8009318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800931a:	e008      	b.n	800932e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800931c:	f7fc fccc 	bl	8005cb8 <HAL_GetTick>
 8009320:	4602      	mov	r2, r0
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	1ad3      	subs	r3, r2, r3
 8009326:	2b02      	cmp	r3, #2
 8009328:	d901      	bls.n	800932e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	e046      	b.n	80093bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800932e:	4b25      	ldr	r3, [pc, #148]	; (80093c4 <HAL_RCC_OscConfig+0x628>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1f0      	bne.n	800931c <HAL_RCC_OscConfig+0x580>
 800933a:	e03e      	b.n	80093ba <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	69db      	ldr	r3, [r3, #28]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d101      	bne.n	8009348 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	e039      	b.n	80093bc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009348:	4b1e      	ldr	r3, [pc, #120]	; (80093c4 <HAL_RCC_OscConfig+0x628>)
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	f003 0203 	and.w	r2, r3, #3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a1b      	ldr	r3, [r3, #32]
 8009358:	429a      	cmp	r2, r3
 800935a:	d12c      	bne.n	80093b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009366:	3b01      	subs	r3, #1
 8009368:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800936a:	429a      	cmp	r2, r3
 800936c:	d123      	bne.n	80093b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009378:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800937a:	429a      	cmp	r2, r3
 800937c:	d11b      	bne.n	80093b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009388:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800938a:	429a      	cmp	r2, r3
 800938c:	d113      	bne.n	80093b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009398:	085b      	lsrs	r3, r3, #1
 800939a:	3b01      	subs	r3, #1
 800939c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800939e:	429a      	cmp	r2, r3
 80093a0:	d109      	bne.n	80093b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ac:	085b      	lsrs	r3, r3, #1
 80093ae:	3b01      	subs	r3, #1
 80093b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d001      	beq.n	80093ba <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80093b6:	2301      	movs	r3, #1
 80093b8:	e000      	b.n	80093bc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3720      	adds	r7, #32
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	40021000 	.word	0x40021000
 80093c8:	019f800c 	.word	0x019f800c

080093cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80093d6:	2300      	movs	r3, #0
 80093d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d101      	bne.n	80093e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e11e      	b.n	8009622 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80093e4:	4b91      	ldr	r3, [pc, #580]	; (800962c <HAL_RCC_ClockConfig+0x260>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f003 030f 	and.w	r3, r3, #15
 80093ec:	683a      	ldr	r2, [r7, #0]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d910      	bls.n	8009414 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093f2:	4b8e      	ldr	r3, [pc, #568]	; (800962c <HAL_RCC_ClockConfig+0x260>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f023 020f 	bic.w	r2, r3, #15
 80093fa:	498c      	ldr	r1, [pc, #560]	; (800962c <HAL_RCC_ClockConfig+0x260>)
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	4313      	orrs	r3, r2
 8009400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009402:	4b8a      	ldr	r3, [pc, #552]	; (800962c <HAL_RCC_ClockConfig+0x260>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 030f 	and.w	r3, r3, #15
 800940a:	683a      	ldr	r2, [r7, #0]
 800940c:	429a      	cmp	r2, r3
 800940e:	d001      	beq.n	8009414 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	e106      	b.n	8009622 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f003 0301 	and.w	r3, r3, #1
 800941c:	2b00      	cmp	r3, #0
 800941e:	d073      	beq.n	8009508 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	2b03      	cmp	r3, #3
 8009426:	d129      	bne.n	800947c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009428:	4b81      	ldr	r3, [pc, #516]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009430:	2b00      	cmp	r3, #0
 8009432:	d101      	bne.n	8009438 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	e0f4      	b.n	8009622 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009438:	f000 f99e 	bl	8009778 <RCC_GetSysClockFreqFromPLLSource>
 800943c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	4a7c      	ldr	r2, [pc, #496]	; (8009634 <HAL_RCC_ClockConfig+0x268>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d93f      	bls.n	80094c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009446:	4b7a      	ldr	r3, [pc, #488]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d009      	beq.n	8009466 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800945a:	2b00      	cmp	r3, #0
 800945c:	d033      	beq.n	80094c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009462:	2b00      	cmp	r3, #0
 8009464:	d12f      	bne.n	80094c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009466:	4b72      	ldr	r3, [pc, #456]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800946e:	4a70      	ldr	r2, [pc, #448]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 8009470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009474:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009476:	2380      	movs	r3, #128	; 0x80
 8009478:	617b      	str	r3, [r7, #20]
 800947a:	e024      	b.n	80094c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	2b02      	cmp	r3, #2
 8009482:	d107      	bne.n	8009494 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009484:	4b6a      	ldr	r3, [pc, #424]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d109      	bne.n	80094a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e0c6      	b.n	8009622 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009494:	4b66      	ldr	r3, [pc, #408]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800949c:	2b00      	cmp	r3, #0
 800949e:	d101      	bne.n	80094a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	e0be      	b.n	8009622 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80094a4:	f000 f8ce 	bl	8009644 <HAL_RCC_GetSysClockFreq>
 80094a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	4a61      	ldr	r2, [pc, #388]	; (8009634 <HAL_RCC_ClockConfig+0x268>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d909      	bls.n	80094c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80094b2:	4b5f      	ldr	r3, [pc, #380]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094ba:	4a5d      	ldr	r2, [pc, #372]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 80094bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80094c2:	2380      	movs	r3, #128	; 0x80
 80094c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80094c6:	4b5a      	ldr	r3, [pc, #360]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	f023 0203 	bic.w	r2, r3, #3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	4957      	ldr	r1, [pc, #348]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 80094d4:	4313      	orrs	r3, r2
 80094d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094d8:	f7fc fbee 	bl	8005cb8 <HAL_GetTick>
 80094dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094de:	e00a      	b.n	80094f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094e0:	f7fc fbea 	bl	8005cb8 <HAL_GetTick>
 80094e4:	4602      	mov	r2, r0
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d901      	bls.n	80094f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80094f2:	2303      	movs	r3, #3
 80094f4:	e095      	b.n	8009622 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094f6:	4b4e      	ldr	r3, [pc, #312]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	f003 020c 	and.w	r2, r3, #12
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	429a      	cmp	r2, r3
 8009506:	d1eb      	bne.n	80094e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0302 	and.w	r3, r3, #2
 8009510:	2b00      	cmp	r3, #0
 8009512:	d023      	beq.n	800955c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0304 	and.w	r3, r3, #4
 800951c:	2b00      	cmp	r3, #0
 800951e:	d005      	beq.n	800952c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009520:	4b43      	ldr	r3, [pc, #268]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	4a42      	ldr	r2, [pc, #264]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 8009526:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800952a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 0308 	and.w	r3, r3, #8
 8009534:	2b00      	cmp	r3, #0
 8009536:	d007      	beq.n	8009548 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009538:	4b3d      	ldr	r3, [pc, #244]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009540:	4a3b      	ldr	r2, [pc, #236]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 8009542:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009546:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009548:	4b39      	ldr	r3, [pc, #228]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	4936      	ldr	r1, [pc, #216]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 8009556:	4313      	orrs	r3, r2
 8009558:	608b      	str	r3, [r1, #8]
 800955a:	e008      	b.n	800956e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	2b80      	cmp	r3, #128	; 0x80
 8009560:	d105      	bne.n	800956e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009562:	4b33      	ldr	r3, [pc, #204]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	4a32      	ldr	r2, [pc, #200]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 8009568:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800956c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800956e:	4b2f      	ldr	r3, [pc, #188]	; (800962c <HAL_RCC_ClockConfig+0x260>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f003 030f 	and.w	r3, r3, #15
 8009576:	683a      	ldr	r2, [r7, #0]
 8009578:	429a      	cmp	r2, r3
 800957a:	d21d      	bcs.n	80095b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800957c:	4b2b      	ldr	r3, [pc, #172]	; (800962c <HAL_RCC_ClockConfig+0x260>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f023 020f 	bic.w	r2, r3, #15
 8009584:	4929      	ldr	r1, [pc, #164]	; (800962c <HAL_RCC_ClockConfig+0x260>)
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	4313      	orrs	r3, r2
 800958a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800958c:	f7fc fb94 	bl	8005cb8 <HAL_GetTick>
 8009590:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009592:	e00a      	b.n	80095aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009594:	f7fc fb90 	bl	8005cb8 <HAL_GetTick>
 8009598:	4602      	mov	r2, r0
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	f241 3288 	movw	r2, #5000	; 0x1388
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d901      	bls.n	80095aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80095a6:	2303      	movs	r3, #3
 80095a8:	e03b      	b.n	8009622 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095aa:	4b20      	ldr	r3, [pc, #128]	; (800962c <HAL_RCC_ClockConfig+0x260>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f003 030f 	and.w	r3, r3, #15
 80095b2:	683a      	ldr	r2, [r7, #0]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d1ed      	bne.n	8009594 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0304 	and.w	r3, r3, #4
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d008      	beq.n	80095d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80095c4:	4b1a      	ldr	r3, [pc, #104]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	4917      	ldr	r1, [pc, #92]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 80095d2:	4313      	orrs	r3, r2
 80095d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 0308 	and.w	r3, r3, #8
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d009      	beq.n	80095f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80095e2:	4b13      	ldr	r3, [pc, #76]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	00db      	lsls	r3, r3, #3
 80095f0:	490f      	ldr	r1, [pc, #60]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 80095f2:	4313      	orrs	r3, r2
 80095f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80095f6:	f000 f825 	bl	8009644 <HAL_RCC_GetSysClockFreq>
 80095fa:	4602      	mov	r2, r0
 80095fc:	4b0c      	ldr	r3, [pc, #48]	; (8009630 <HAL_RCC_ClockConfig+0x264>)
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	091b      	lsrs	r3, r3, #4
 8009602:	f003 030f 	and.w	r3, r3, #15
 8009606:	490c      	ldr	r1, [pc, #48]	; (8009638 <HAL_RCC_ClockConfig+0x26c>)
 8009608:	5ccb      	ldrb	r3, [r1, r3]
 800960a:	f003 031f 	and.w	r3, r3, #31
 800960e:	fa22 f303 	lsr.w	r3, r2, r3
 8009612:	4a0a      	ldr	r2, [pc, #40]	; (800963c <HAL_RCC_ClockConfig+0x270>)
 8009614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009616:	4b0a      	ldr	r3, [pc, #40]	; (8009640 <HAL_RCC_ClockConfig+0x274>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4618      	mov	r0, r3
 800961c:	f7fc fb00 	bl	8005c20 <HAL_InitTick>
 8009620:	4603      	mov	r3, r0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3718      	adds	r7, #24
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	40022000 	.word	0x40022000
 8009630:	40021000 	.word	0x40021000
 8009634:	04c4b400 	.word	0x04c4b400
 8009638:	08012a4c 	.word	0x08012a4c
 800963c:	20000000 	.word	0x20000000
 8009640:	20000004 	.word	0x20000004

08009644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009644:	b480      	push	{r7}
 8009646:	b087      	sub	sp, #28
 8009648:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800964a:	4b2c      	ldr	r3, [pc, #176]	; (80096fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	f003 030c 	and.w	r3, r3, #12
 8009652:	2b04      	cmp	r3, #4
 8009654:	d102      	bne.n	800965c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009656:	4b2a      	ldr	r3, [pc, #168]	; (8009700 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009658:	613b      	str	r3, [r7, #16]
 800965a:	e047      	b.n	80096ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800965c:	4b27      	ldr	r3, [pc, #156]	; (80096fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	f003 030c 	and.w	r3, r3, #12
 8009664:	2b08      	cmp	r3, #8
 8009666:	d102      	bne.n	800966e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009668:	4b26      	ldr	r3, [pc, #152]	; (8009704 <HAL_RCC_GetSysClockFreq+0xc0>)
 800966a:	613b      	str	r3, [r7, #16]
 800966c:	e03e      	b.n	80096ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800966e:	4b23      	ldr	r3, [pc, #140]	; (80096fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	f003 030c 	and.w	r3, r3, #12
 8009676:	2b0c      	cmp	r3, #12
 8009678:	d136      	bne.n	80096e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800967a:	4b20      	ldr	r3, [pc, #128]	; (80096fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	f003 0303 	and.w	r3, r3, #3
 8009682:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009684:	4b1d      	ldr	r3, [pc, #116]	; (80096fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	091b      	lsrs	r3, r3, #4
 800968a:	f003 030f 	and.w	r3, r3, #15
 800968e:	3301      	adds	r3, #1
 8009690:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2b03      	cmp	r3, #3
 8009696:	d10c      	bne.n	80096b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009698:	4a1a      	ldr	r2, [pc, #104]	; (8009704 <HAL_RCC_GetSysClockFreq+0xc0>)
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	fbb2 f3f3 	udiv	r3, r2, r3
 80096a0:	4a16      	ldr	r2, [pc, #88]	; (80096fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80096a2:	68d2      	ldr	r2, [r2, #12]
 80096a4:	0a12      	lsrs	r2, r2, #8
 80096a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80096aa:	fb02 f303 	mul.w	r3, r2, r3
 80096ae:	617b      	str	r3, [r7, #20]
      break;
 80096b0:	e00c      	b.n	80096cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80096b2:	4a13      	ldr	r2, [pc, #76]	; (8009700 <HAL_RCC_GetSysClockFreq+0xbc>)
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ba:	4a10      	ldr	r2, [pc, #64]	; (80096fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80096bc:	68d2      	ldr	r2, [r2, #12]
 80096be:	0a12      	lsrs	r2, r2, #8
 80096c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80096c4:	fb02 f303 	mul.w	r3, r2, r3
 80096c8:	617b      	str	r3, [r7, #20]
      break;
 80096ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80096cc:	4b0b      	ldr	r3, [pc, #44]	; (80096fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	0e5b      	lsrs	r3, r3, #25
 80096d2:	f003 0303 	and.w	r3, r3, #3
 80096d6:	3301      	adds	r3, #1
 80096d8:	005b      	lsls	r3, r3, #1
 80096da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80096dc:	697a      	ldr	r2, [r7, #20]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80096e4:	613b      	str	r3, [r7, #16]
 80096e6:	e001      	b.n	80096ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80096e8:	2300      	movs	r3, #0
 80096ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80096ec:	693b      	ldr	r3, [r7, #16]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	371c      	adds	r7, #28
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	40021000 	.word	0x40021000
 8009700:	00f42400 	.word	0x00f42400
 8009704:	007a1200 	.word	0x007a1200

08009708 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009708:	b480      	push	{r7}
 800970a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800970c:	4b03      	ldr	r3, [pc, #12]	; (800971c <HAL_RCC_GetHCLKFreq+0x14>)
 800970e:	681b      	ldr	r3, [r3, #0]
}
 8009710:	4618      	mov	r0, r3
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	20000000 	.word	0x20000000

08009720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009724:	f7ff fff0 	bl	8009708 <HAL_RCC_GetHCLKFreq>
 8009728:	4602      	mov	r2, r0
 800972a:	4b06      	ldr	r3, [pc, #24]	; (8009744 <HAL_RCC_GetPCLK1Freq+0x24>)
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	0a1b      	lsrs	r3, r3, #8
 8009730:	f003 0307 	and.w	r3, r3, #7
 8009734:	4904      	ldr	r1, [pc, #16]	; (8009748 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009736:	5ccb      	ldrb	r3, [r1, r3]
 8009738:	f003 031f 	and.w	r3, r3, #31
 800973c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009740:	4618      	mov	r0, r3
 8009742:	bd80      	pop	{r7, pc}
 8009744:	40021000 	.word	0x40021000
 8009748:	08012a5c 	.word	0x08012a5c

0800974c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009750:	f7ff ffda 	bl	8009708 <HAL_RCC_GetHCLKFreq>
 8009754:	4602      	mov	r2, r0
 8009756:	4b06      	ldr	r3, [pc, #24]	; (8009770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	0adb      	lsrs	r3, r3, #11
 800975c:	f003 0307 	and.w	r3, r3, #7
 8009760:	4904      	ldr	r1, [pc, #16]	; (8009774 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009762:	5ccb      	ldrb	r3, [r1, r3]
 8009764:	f003 031f 	and.w	r3, r3, #31
 8009768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800976c:	4618      	mov	r0, r3
 800976e:	bd80      	pop	{r7, pc}
 8009770:	40021000 	.word	0x40021000
 8009774:	08012a5c 	.word	0x08012a5c

08009778 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009778:	b480      	push	{r7}
 800977a:	b087      	sub	sp, #28
 800977c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800977e:	4b1e      	ldr	r3, [pc, #120]	; (80097f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	f003 0303 	and.w	r3, r3, #3
 8009786:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009788:	4b1b      	ldr	r3, [pc, #108]	; (80097f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	091b      	lsrs	r3, r3, #4
 800978e:	f003 030f 	and.w	r3, r3, #15
 8009792:	3301      	adds	r3, #1
 8009794:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	2b03      	cmp	r3, #3
 800979a:	d10c      	bne.n	80097b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800979c:	4a17      	ldr	r2, [pc, #92]	; (80097fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80097a4:	4a14      	ldr	r2, [pc, #80]	; (80097f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80097a6:	68d2      	ldr	r2, [r2, #12]
 80097a8:	0a12      	lsrs	r2, r2, #8
 80097aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80097ae:	fb02 f303 	mul.w	r3, r2, r3
 80097b2:	617b      	str	r3, [r7, #20]
    break;
 80097b4:	e00c      	b.n	80097d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80097b6:	4a12      	ldr	r2, [pc, #72]	; (8009800 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80097be:	4a0e      	ldr	r2, [pc, #56]	; (80097f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80097c0:	68d2      	ldr	r2, [r2, #12]
 80097c2:	0a12      	lsrs	r2, r2, #8
 80097c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80097c8:	fb02 f303 	mul.w	r3, r2, r3
 80097cc:	617b      	str	r3, [r7, #20]
    break;
 80097ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80097d0:	4b09      	ldr	r3, [pc, #36]	; (80097f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	0e5b      	lsrs	r3, r3, #25
 80097d6:	f003 0303 	and.w	r3, r3, #3
 80097da:	3301      	adds	r3, #1
 80097dc:	005b      	lsls	r3, r3, #1
 80097de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80097e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80097ea:	687b      	ldr	r3, [r7, #4]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	371c      	adds	r7, #28
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr
 80097f8:	40021000 	.word	0x40021000
 80097fc:	007a1200 	.word	0x007a1200
 8009800:	00f42400 	.word	0x00f42400

08009804 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800980c:	2300      	movs	r3, #0
 800980e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009810:	2300      	movs	r3, #0
 8009812:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800981c:	2b00      	cmp	r3, #0
 800981e:	f000 8098 	beq.w	8009952 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009822:	2300      	movs	r3, #0
 8009824:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009826:	4b43      	ldr	r3, [pc, #268]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800982a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d10d      	bne.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009832:	4b40      	ldr	r3, [pc, #256]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009836:	4a3f      	ldr	r2, [pc, #252]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800983c:	6593      	str	r3, [r2, #88]	; 0x58
 800983e:	4b3d      	ldr	r3, [pc, #244]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009846:	60bb      	str	r3, [r7, #8]
 8009848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800984a:	2301      	movs	r3, #1
 800984c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800984e:	4b3a      	ldr	r3, [pc, #232]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a39      	ldr	r2, [pc, #228]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009858:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800985a:	f7fc fa2d 	bl	8005cb8 <HAL_GetTick>
 800985e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009860:	e009      	b.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009862:	f7fc fa29 	bl	8005cb8 <HAL_GetTick>
 8009866:	4602      	mov	r2, r0
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	2b02      	cmp	r3, #2
 800986e:	d902      	bls.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	74fb      	strb	r3, [r7, #19]
        break;
 8009874:	e005      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009876:	4b30      	ldr	r3, [pc, #192]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800987e:	2b00      	cmp	r3, #0
 8009880:	d0ef      	beq.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009882:	7cfb      	ldrb	r3, [r7, #19]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d159      	bne.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009888:	4b2a      	ldr	r3, [pc, #168]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800988a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800988e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009892:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d01e      	beq.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d019      	beq.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80098a4:	4b23      	ldr	r3, [pc, #140]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80098a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80098b0:	4b20      	ldr	r3, [pc, #128]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80098b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098b6:	4a1f      	ldr	r2, [pc, #124]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80098b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80098c0:	4b1c      	ldr	r3, [pc, #112]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80098c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098c6:	4a1b      	ldr	r2, [pc, #108]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80098c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80098d0:	4a18      	ldr	r2, [pc, #96]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	f003 0301 	and.w	r3, r3, #1
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d016      	beq.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098e2:	f7fc f9e9 	bl	8005cb8 <HAL_GetTick>
 80098e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80098e8:	e00b      	b.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098ea:	f7fc f9e5 	bl	8005cb8 <HAL_GetTick>
 80098ee:	4602      	mov	r2, r0
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d902      	bls.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80098fc:	2303      	movs	r3, #3
 80098fe:	74fb      	strb	r3, [r7, #19]
            break;
 8009900:	e006      	b.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009902:	4b0c      	ldr	r3, [pc, #48]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009908:	f003 0302 	and.w	r3, r3, #2
 800990c:	2b00      	cmp	r3, #0
 800990e:	d0ec      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009910:	7cfb      	ldrb	r3, [r7, #19]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10b      	bne.n	800992e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009916:	4b07      	ldr	r3, [pc, #28]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800991c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009924:	4903      	ldr	r1, [pc, #12]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009926:	4313      	orrs	r3, r2
 8009928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800992c:	e008      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800992e:	7cfb      	ldrb	r3, [r7, #19]
 8009930:	74bb      	strb	r3, [r7, #18]
 8009932:	e005      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009934:	40021000 	.word	0x40021000
 8009938:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800993c:	7cfb      	ldrb	r3, [r7, #19]
 800993e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009940:	7c7b      	ldrb	r3, [r7, #17]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d105      	bne.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009946:	4ba6      	ldr	r3, [pc, #664]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800994a:	4aa5      	ldr	r2, [pc, #660]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800994c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009950:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 0301 	and.w	r3, r3, #1
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00a      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800995e:	4ba0      	ldr	r3, [pc, #640]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009964:	f023 0203 	bic.w	r2, r3, #3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	499c      	ldr	r1, [pc, #624]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800996e:	4313      	orrs	r3, r2
 8009970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 0302 	and.w	r3, r3, #2
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00a      	beq.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009980:	4b97      	ldr	r3, [pc, #604]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009986:	f023 020c 	bic.w	r2, r3, #12
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	4994      	ldr	r1, [pc, #592]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009990:	4313      	orrs	r3, r2
 8009992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 0304 	and.w	r3, r3, #4
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d00a      	beq.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80099a2:	4b8f      	ldr	r3, [pc, #572]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	498b      	ldr	r1, [pc, #556]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099b2:	4313      	orrs	r3, r2
 80099b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f003 0308 	and.w	r3, r3, #8
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00a      	beq.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80099c4:	4b86      	ldr	r3, [pc, #536]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	4983      	ldr	r1, [pc, #524]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099d4:	4313      	orrs	r3, r2
 80099d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f003 0320 	and.w	r3, r3, #32
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00a      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80099e6:	4b7e      	ldr	r3, [pc, #504]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	695b      	ldr	r3, [r3, #20]
 80099f4:	497a      	ldr	r1, [pc, #488]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099f6:	4313      	orrs	r3, r2
 80099f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00a      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009a08:	4b75      	ldr	r3, [pc, #468]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	699b      	ldr	r3, [r3, #24]
 8009a16:	4972      	ldr	r1, [pc, #456]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00a      	beq.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009a2a:	4b6d      	ldr	r3, [pc, #436]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	69db      	ldr	r3, [r3, #28]
 8009a38:	4969      	ldr	r1, [pc, #420]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00a      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009a4c:	4b64      	ldr	r3, [pc, #400]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a1b      	ldr	r3, [r3, #32]
 8009a5a:	4961      	ldr	r1, [pc, #388]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00a      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009a6e:	4b5c      	ldr	r3, [pc, #368]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7c:	4958      	ldr	r1, [pc, #352]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d015      	beq.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009a90:	4b53      	ldr	r3, [pc, #332]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a9e:	4950      	ldr	r1, [pc, #320]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009aae:	d105      	bne.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ab0:	4b4b      	ldr	r3, [pc, #300]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	4a4a      	ldr	r2, [pc, #296]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009aba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d015      	beq.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009ac8:	4b45      	ldr	r3, [pc, #276]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ace:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad6:	4942      	ldr	r1, [pc, #264]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ae6:	d105      	bne.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ae8:	4b3d      	ldr	r3, [pc, #244]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	4a3c      	ldr	r2, [pc, #240]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009af2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d015      	beq.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009b00:	4b37      	ldr	r3, [pc, #220]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b06:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b0e:	4934      	ldr	r1, [pc, #208]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009b10:	4313      	orrs	r3, r2
 8009b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b1e:	d105      	bne.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b20:	4b2f      	ldr	r3, [pc, #188]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	4a2e      	ldr	r2, [pc, #184]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b2a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d015      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009b38:	4b29      	ldr	r3, [pc, #164]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b46:	4926      	ldr	r1, [pc, #152]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b56:	d105      	bne.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b58:	4b21      	ldr	r3, [pc, #132]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	4a20      	ldr	r2, [pc, #128]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b62:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d015      	beq.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009b70:	4b1b      	ldr	r3, [pc, #108]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7e:	4918      	ldr	r1, [pc, #96]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009b80:	4313      	orrs	r3, r2
 8009b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b8e:	d105      	bne.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b90:	4b13      	ldr	r3, [pc, #76]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	4a12      	ldr	r2, [pc, #72]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d015      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009ba8:	4b0d      	ldr	r3, [pc, #52]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb6:	490a      	ldr	r1, [pc, #40]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bc6:	d105      	bne.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009bc8:	4b05      	ldr	r3, [pc, #20]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	4a04      	ldr	r2, [pc, #16]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bd2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009bd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3718      	adds	r7, #24
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	40021000 	.word	0x40021000

08009be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d101      	bne.n	8009bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e049      	b.n	8009c8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d106      	bne.n	8009c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7fb fe52 	bl	80058b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2202      	movs	r2, #2
 8009c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	3304      	adds	r3, #4
 8009c20:	4619      	mov	r1, r3
 8009c22:	4610      	mov	r0, r2
 8009c24:	f000 fdba 	bl	800a79c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
	...

08009c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d001      	beq.n	8009cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e04a      	b.n	8009d42 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2202      	movs	r2, #2
 8009cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68da      	ldr	r2, [r3, #12]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f042 0201 	orr.w	r2, r2, #1
 8009cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a21      	ldr	r2, [pc, #132]	; (8009d50 <HAL_TIM_Base_Start_IT+0xbc>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d018      	beq.n	8009d00 <HAL_TIM_Base_Start_IT+0x6c>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cd6:	d013      	beq.n	8009d00 <HAL_TIM_Base_Start_IT+0x6c>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a1d      	ldr	r2, [pc, #116]	; (8009d54 <HAL_TIM_Base_Start_IT+0xc0>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d00e      	beq.n	8009d00 <HAL_TIM_Base_Start_IT+0x6c>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a1c      	ldr	r2, [pc, #112]	; (8009d58 <HAL_TIM_Base_Start_IT+0xc4>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d009      	beq.n	8009d00 <HAL_TIM_Base_Start_IT+0x6c>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a1a      	ldr	r2, [pc, #104]	; (8009d5c <HAL_TIM_Base_Start_IT+0xc8>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d004      	beq.n	8009d00 <HAL_TIM_Base_Start_IT+0x6c>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a19      	ldr	r2, [pc, #100]	; (8009d60 <HAL_TIM_Base_Start_IT+0xcc>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d115      	bne.n	8009d2c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	689a      	ldr	r2, [r3, #8]
 8009d06:	4b17      	ldr	r3, [pc, #92]	; (8009d64 <HAL_TIM_Base_Start_IT+0xd0>)
 8009d08:	4013      	ands	r3, r2
 8009d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2b06      	cmp	r3, #6
 8009d10:	d015      	beq.n	8009d3e <HAL_TIM_Base_Start_IT+0xaa>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d18:	d011      	beq.n	8009d3e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f042 0201 	orr.w	r2, r2, #1
 8009d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d2a:	e008      	b.n	8009d3e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f042 0201 	orr.w	r2, r2, #1
 8009d3a:	601a      	str	r2, [r3, #0]
 8009d3c:	e000      	b.n	8009d40 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3714      	adds	r7, #20
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	40012c00 	.word	0x40012c00
 8009d54:	40000400 	.word	0x40000400
 8009d58:	40000800 	.word	0x40000800
 8009d5c:	40013400 	.word	0x40013400
 8009d60:	40014000 	.word	0x40014000
 8009d64:	00010007 	.word	0x00010007

08009d68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d101      	bne.n	8009d7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e049      	b.n	8009e0e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d106      	bne.n	8009d94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f841 	bl	8009e16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2202      	movs	r2, #2
 8009d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	3304      	adds	r3, #4
 8009da4:	4619      	mov	r1, r3
 8009da6:	4610      	mov	r0, r2
 8009da8:	f000 fcf8 	bl	800a79c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2201      	movs	r2, #1
 8009db0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2201      	movs	r2, #1
 8009db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009e16:	b480      	push	{r7}
 8009e18:	b083      	sub	sp, #12
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009e1e:	bf00      	nop
 8009e20:	370c      	adds	r7, #12
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
	...

08009e2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d109      	bne.n	8009e50 <HAL_TIM_PWM_Start+0x24>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	bf14      	ite	ne
 8009e48:	2301      	movne	r3, #1
 8009e4a:	2300      	moveq	r3, #0
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	e03c      	b.n	8009eca <HAL_TIM_PWM_Start+0x9e>
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	2b04      	cmp	r3, #4
 8009e54:	d109      	bne.n	8009e6a <HAL_TIM_PWM_Start+0x3e>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	bf14      	ite	ne
 8009e62:	2301      	movne	r3, #1
 8009e64:	2300      	moveq	r3, #0
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	e02f      	b.n	8009eca <HAL_TIM_PWM_Start+0x9e>
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2b08      	cmp	r3, #8
 8009e6e:	d109      	bne.n	8009e84 <HAL_TIM_PWM_Start+0x58>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	bf14      	ite	ne
 8009e7c:	2301      	movne	r3, #1
 8009e7e:	2300      	moveq	r3, #0
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	e022      	b.n	8009eca <HAL_TIM_PWM_Start+0x9e>
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	2b0c      	cmp	r3, #12
 8009e88:	d109      	bne.n	8009e9e <HAL_TIM_PWM_Start+0x72>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	bf14      	ite	ne
 8009e96:	2301      	movne	r3, #1
 8009e98:	2300      	moveq	r3, #0
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	e015      	b.n	8009eca <HAL_TIM_PWM_Start+0x9e>
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	2b10      	cmp	r3, #16
 8009ea2:	d109      	bne.n	8009eb8 <HAL_TIM_PWM_Start+0x8c>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	bf14      	ite	ne
 8009eb0:	2301      	movne	r3, #1
 8009eb2:	2300      	moveq	r3, #0
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	e008      	b.n	8009eca <HAL_TIM_PWM_Start+0x9e>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	bf14      	ite	ne
 8009ec4:	2301      	movne	r3, #1
 8009ec6:	2300      	moveq	r3, #0
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e097      	b.n	800a002 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d104      	bne.n	8009ee2 <HAL_TIM_PWM_Start+0xb6>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2202      	movs	r2, #2
 8009edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ee0:	e023      	b.n	8009f2a <HAL_TIM_PWM_Start+0xfe>
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	2b04      	cmp	r3, #4
 8009ee6:	d104      	bne.n	8009ef2 <HAL_TIM_PWM_Start+0xc6>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2202      	movs	r2, #2
 8009eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ef0:	e01b      	b.n	8009f2a <HAL_TIM_PWM_Start+0xfe>
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	2b08      	cmp	r3, #8
 8009ef6:	d104      	bne.n	8009f02 <HAL_TIM_PWM_Start+0xd6>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2202      	movs	r2, #2
 8009efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f00:	e013      	b.n	8009f2a <HAL_TIM_PWM_Start+0xfe>
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b0c      	cmp	r3, #12
 8009f06:	d104      	bne.n	8009f12 <HAL_TIM_PWM_Start+0xe6>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2202      	movs	r2, #2
 8009f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f10:	e00b      	b.n	8009f2a <HAL_TIM_PWM_Start+0xfe>
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	2b10      	cmp	r3, #16
 8009f16:	d104      	bne.n	8009f22 <HAL_TIM_PWM_Start+0xf6>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2202      	movs	r2, #2
 8009f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f20:	e003      	b.n	8009f2a <HAL_TIM_PWM_Start+0xfe>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2202      	movs	r2, #2
 8009f26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f001 f854 	bl	800afe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a33      	ldr	r2, [pc, #204]	; (800a00c <HAL_TIM_PWM_Start+0x1e0>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d013      	beq.n	8009f6a <HAL_TIM_PWM_Start+0x13e>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a32      	ldr	r2, [pc, #200]	; (800a010 <HAL_TIM_PWM_Start+0x1e4>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d00e      	beq.n	8009f6a <HAL_TIM_PWM_Start+0x13e>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a30      	ldr	r2, [pc, #192]	; (800a014 <HAL_TIM_PWM_Start+0x1e8>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d009      	beq.n	8009f6a <HAL_TIM_PWM_Start+0x13e>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a2f      	ldr	r2, [pc, #188]	; (800a018 <HAL_TIM_PWM_Start+0x1ec>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d004      	beq.n	8009f6a <HAL_TIM_PWM_Start+0x13e>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a2d      	ldr	r2, [pc, #180]	; (800a01c <HAL_TIM_PWM_Start+0x1f0>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d101      	bne.n	8009f6e <HAL_TIM_PWM_Start+0x142>
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e000      	b.n	8009f70 <HAL_TIM_PWM_Start+0x144>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d007      	beq.n	8009f84 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f82:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a20      	ldr	r2, [pc, #128]	; (800a00c <HAL_TIM_PWM_Start+0x1e0>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d018      	beq.n	8009fc0 <HAL_TIM_PWM_Start+0x194>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f96:	d013      	beq.n	8009fc0 <HAL_TIM_PWM_Start+0x194>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a20      	ldr	r2, [pc, #128]	; (800a020 <HAL_TIM_PWM_Start+0x1f4>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d00e      	beq.n	8009fc0 <HAL_TIM_PWM_Start+0x194>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a1f      	ldr	r2, [pc, #124]	; (800a024 <HAL_TIM_PWM_Start+0x1f8>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d009      	beq.n	8009fc0 <HAL_TIM_PWM_Start+0x194>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a17      	ldr	r2, [pc, #92]	; (800a010 <HAL_TIM_PWM_Start+0x1e4>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d004      	beq.n	8009fc0 <HAL_TIM_PWM_Start+0x194>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a16      	ldr	r2, [pc, #88]	; (800a014 <HAL_TIM_PWM_Start+0x1e8>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d115      	bne.n	8009fec <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	689a      	ldr	r2, [r3, #8]
 8009fc6:	4b18      	ldr	r3, [pc, #96]	; (800a028 <HAL_TIM_PWM_Start+0x1fc>)
 8009fc8:	4013      	ands	r3, r2
 8009fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2b06      	cmp	r3, #6
 8009fd0:	d015      	beq.n	8009ffe <HAL_TIM_PWM_Start+0x1d2>
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fd8:	d011      	beq.n	8009ffe <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f042 0201 	orr.w	r2, r2, #1
 8009fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fea:	e008      	b.n	8009ffe <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f042 0201 	orr.w	r2, r2, #1
 8009ffa:	601a      	str	r2, [r3, #0]
 8009ffc:	e000      	b.n	800a000 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ffe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	40012c00 	.word	0x40012c00
 800a010:	40013400 	.word	0x40013400
 800a014:	40014000 	.word	0x40014000
 800a018:	40014400 	.word	0x40014400
 800a01c:	40014800 	.word	0x40014800
 800a020:	40000400 	.word	0x40000400
 800a024:	40000800 	.word	0x40000800
 800a028:	00010007 	.word	0x00010007

0800a02c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	f003 0302 	and.w	r3, r3, #2
 800a03e:	2b02      	cmp	r3, #2
 800a040:	d122      	bne.n	800a088 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	f003 0302 	and.w	r3, r3, #2
 800a04c:	2b02      	cmp	r3, #2
 800a04e:	d11b      	bne.n	800a088 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f06f 0202 	mvn.w	r2, #2
 800a058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	699b      	ldr	r3, [r3, #24]
 800a066:	f003 0303 	and.w	r3, r3, #3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d003      	beq.n	800a076 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fb76 	bl	800a760 <HAL_TIM_IC_CaptureCallback>
 800a074:	e005      	b.n	800a082 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 fb68 	bl	800a74c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fb79 	bl	800a774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	f003 0304 	and.w	r3, r3, #4
 800a092:	2b04      	cmp	r3, #4
 800a094:	d122      	bne.n	800a0dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	f003 0304 	and.w	r3, r3, #4
 800a0a0:	2b04      	cmp	r3, #4
 800a0a2:	d11b      	bne.n	800a0dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f06f 0204 	mvn.w	r2, #4
 800a0ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2202      	movs	r2, #2
 800a0b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	699b      	ldr	r3, [r3, #24]
 800a0ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d003      	beq.n	800a0ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 fb4c 	bl	800a760 <HAL_TIM_IC_CaptureCallback>
 800a0c8:	e005      	b.n	800a0d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 fb3e 	bl	800a74c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 fb4f 	bl	800a774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	f003 0308 	and.w	r3, r3, #8
 800a0e6:	2b08      	cmp	r3, #8
 800a0e8:	d122      	bne.n	800a130 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	f003 0308 	and.w	r3, r3, #8
 800a0f4:	2b08      	cmp	r3, #8
 800a0f6:	d11b      	bne.n	800a130 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f06f 0208 	mvn.w	r2, #8
 800a100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2204      	movs	r2, #4
 800a106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	69db      	ldr	r3, [r3, #28]
 800a10e:	f003 0303 	and.w	r3, r3, #3
 800a112:	2b00      	cmp	r3, #0
 800a114:	d003      	beq.n	800a11e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 fb22 	bl	800a760 <HAL_TIM_IC_CaptureCallback>
 800a11c:	e005      	b.n	800a12a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 fb14 	bl	800a74c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 fb25 	bl	800a774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	f003 0310 	and.w	r3, r3, #16
 800a13a:	2b10      	cmp	r3, #16
 800a13c:	d122      	bne.n	800a184 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	f003 0310 	and.w	r3, r3, #16
 800a148:	2b10      	cmp	r3, #16
 800a14a:	d11b      	bne.n	800a184 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f06f 0210 	mvn.w	r2, #16
 800a154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2208      	movs	r2, #8
 800a15a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	69db      	ldr	r3, [r3, #28]
 800a162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a166:	2b00      	cmp	r3, #0
 800a168:	d003      	beq.n	800a172 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 faf8 	bl	800a760 <HAL_TIM_IC_CaptureCallback>
 800a170:	e005      	b.n	800a17e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 faea 	bl	800a74c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fafb 	bl	800a774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	f003 0301 	and.w	r3, r3, #1
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d10e      	bne.n	800a1b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	f003 0301 	and.w	r3, r3, #1
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d107      	bne.n	800a1b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f06f 0201 	mvn.w	r2, #1
 800a1a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fac4 	bl	800a738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ba:	2b80      	cmp	r3, #128	; 0x80
 800a1bc:	d10e      	bne.n	800a1dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1c8:	2b80      	cmp	r3, #128	; 0x80
 800a1ca:	d107      	bne.n	800a1dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a1d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f001 f91b 	bl	800b412 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1ea:	d10e      	bne.n	800a20a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1f6:	2b80      	cmp	r3, #128	; 0x80
 800a1f8:	d107      	bne.n	800a20a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f001 f90e 	bl	800b426 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a214:	2b40      	cmp	r3, #64	; 0x40
 800a216:	d10e      	bne.n	800a236 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a222:	2b40      	cmp	r3, #64	; 0x40
 800a224:	d107      	bne.n	800a236 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a22e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 faa9 	bl	800a788 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	f003 0320 	and.w	r3, r3, #32
 800a240:	2b20      	cmp	r3, #32
 800a242:	d10e      	bne.n	800a262 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	f003 0320 	and.w	r3, r3, #32
 800a24e:	2b20      	cmp	r3, #32
 800a250:	d107      	bne.n	800a262 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f06f 0220 	mvn.w	r2, #32
 800a25a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f001 f8ce 	bl	800b3fe <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	691b      	ldr	r3, [r3, #16]
 800a268:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a26c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a270:	d10f      	bne.n	800a292 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a27c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a280:	d107      	bne.n	800a292 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a28a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f001 f8d4 	bl	800b43a <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a29c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2a0:	d10f      	bne.n	800a2c2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2b0:	d107      	bne.n	800a2c2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a2ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f001 f8c6 	bl	800b44e <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	691b      	ldr	r3, [r3, #16]
 800a2c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2d0:	d10f      	bne.n	800a2f2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2e0:	d107      	bne.n	800a2f2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a2ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f001 f8b8 	bl	800b462 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a300:	d10f      	bne.n	800a322 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a30c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a310:	d107      	bne.n	800a322 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a31a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f001 f8aa 	bl	800b476 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a322:	bf00      	nop
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
	...

0800a32c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d101      	bne.n	800a346 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a342:	2302      	movs	r3, #2
 800a344:	e0fd      	b.n	800a542 <HAL_TIM_PWM_ConfigChannel+0x216>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2201      	movs	r2, #1
 800a34a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2b14      	cmp	r3, #20
 800a352:	f200 80f0 	bhi.w	800a536 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a356:	a201      	add	r2, pc, #4	; (adr r2, 800a35c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a35c:	0800a3b1 	.word	0x0800a3b1
 800a360:	0800a537 	.word	0x0800a537
 800a364:	0800a537 	.word	0x0800a537
 800a368:	0800a537 	.word	0x0800a537
 800a36c:	0800a3f1 	.word	0x0800a3f1
 800a370:	0800a537 	.word	0x0800a537
 800a374:	0800a537 	.word	0x0800a537
 800a378:	0800a537 	.word	0x0800a537
 800a37c:	0800a433 	.word	0x0800a433
 800a380:	0800a537 	.word	0x0800a537
 800a384:	0800a537 	.word	0x0800a537
 800a388:	0800a537 	.word	0x0800a537
 800a38c:	0800a473 	.word	0x0800a473
 800a390:	0800a537 	.word	0x0800a537
 800a394:	0800a537 	.word	0x0800a537
 800a398:	0800a537 	.word	0x0800a537
 800a39c:	0800a4b5 	.word	0x0800a4b5
 800a3a0:	0800a537 	.word	0x0800a537
 800a3a4:	0800a537 	.word	0x0800a537
 800a3a8:	0800a537 	.word	0x0800a537
 800a3ac:	0800a4f5 	.word	0x0800a4f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	68b9      	ldr	r1, [r7, #8]
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f000 fa80 	bl	800a8bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	699a      	ldr	r2, [r3, #24]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f042 0208 	orr.w	r2, r2, #8
 800a3ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	699a      	ldr	r2, [r3, #24]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f022 0204 	bic.w	r2, r2, #4
 800a3da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	6999      	ldr	r1, [r3, #24]
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	691a      	ldr	r2, [r3, #16]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	619a      	str	r2, [r3, #24]
      break;
 800a3ee:	e0a3      	b.n	800a538 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	68b9      	ldr	r1, [r7, #8]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f000 faf0 	bl	800a9dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	699a      	ldr	r2, [r3, #24]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a40a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	699a      	ldr	r2, [r3, #24]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a41a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6999      	ldr	r1, [r3, #24]
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	021a      	lsls	r2, r3, #8
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	430a      	orrs	r2, r1
 800a42e:	619a      	str	r2, [r3, #24]
      break;
 800a430:	e082      	b.n	800a538 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68b9      	ldr	r1, [r7, #8]
 800a438:	4618      	mov	r0, r3
 800a43a:	f000 fb59 	bl	800aaf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	69da      	ldr	r2, [r3, #28]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f042 0208 	orr.w	r2, r2, #8
 800a44c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	69da      	ldr	r2, [r3, #28]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f022 0204 	bic.w	r2, r2, #4
 800a45c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	69d9      	ldr	r1, [r3, #28]
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	691a      	ldr	r2, [r3, #16]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	430a      	orrs	r2, r1
 800a46e:	61da      	str	r2, [r3, #28]
      break;
 800a470:	e062      	b.n	800a538 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	68b9      	ldr	r1, [r7, #8]
 800a478:	4618      	mov	r0, r3
 800a47a:	f000 fbc1 	bl	800ac00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	69da      	ldr	r2, [r3, #28]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a48c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	69da      	ldr	r2, [r3, #28]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a49c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	69d9      	ldr	r1, [r3, #28]
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	691b      	ldr	r3, [r3, #16]
 800a4a8:	021a      	lsls	r2, r3, #8
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	61da      	str	r2, [r3, #28]
      break;
 800a4b2:	e041      	b.n	800a538 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68b9      	ldr	r1, [r7, #8]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f000 fc2a 	bl	800ad14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f042 0208 	orr.w	r2, r2, #8
 800a4ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f022 0204 	bic.w	r2, r2, #4
 800a4de:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	691a      	ldr	r2, [r3, #16]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	430a      	orrs	r2, r1
 800a4f0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a4f2:	e021      	b.n	800a538 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68b9      	ldr	r1, [r7, #8]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f000 fc6e 	bl	800addc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a50e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a51e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	021a      	lsls	r2, r3, #8
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	430a      	orrs	r2, r1
 800a532:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a534:	e000      	b.n	800a538 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a536:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2200      	movs	r2, #0
 800a53c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop

0800a54c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d101      	bne.n	800a564 <HAL_TIM_ConfigClockSource+0x18>
 800a560:	2302      	movs	r3, #2
 800a562:	e0dd      	b.n	800a720 <HAL_TIM_ConfigClockSource+0x1d4>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2202      	movs	r2, #2
 800a570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a582:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a586:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a58e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a62      	ldr	r2, [pc, #392]	; (800a728 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	f000 80a9 	beq.w	800a6f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a5a4:	4a60      	ldr	r2, [pc, #384]	; (800a728 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	f200 80ae 	bhi.w	800a708 <HAL_TIM_ConfigClockSource+0x1bc>
 800a5ac:	4a5f      	ldr	r2, [pc, #380]	; (800a72c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	f000 80a1 	beq.w	800a6f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a5b4:	4a5d      	ldr	r2, [pc, #372]	; (800a72c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	f200 80a6 	bhi.w	800a708 <HAL_TIM_ConfigClockSource+0x1bc>
 800a5bc:	4a5c      	ldr	r2, [pc, #368]	; (800a730 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	f000 8099 	beq.w	800a6f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a5c4:	4a5a      	ldr	r2, [pc, #360]	; (800a730 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	f200 809e 	bhi.w	800a708 <HAL_TIM_ConfigClockSource+0x1bc>
 800a5cc:	4a59      	ldr	r2, [pc, #356]	; (800a734 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	f000 8091 	beq.w	800a6f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a5d4:	4a57      	ldr	r2, [pc, #348]	; (800a734 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	f200 8096 	bhi.w	800a708 <HAL_TIM_ConfigClockSource+0x1bc>
 800a5dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a5e0:	f000 8089 	beq.w	800a6f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a5e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a5e8:	f200 808e 	bhi.w	800a708 <HAL_TIM_ConfigClockSource+0x1bc>
 800a5ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5f0:	d03e      	beq.n	800a670 <HAL_TIM_ConfigClockSource+0x124>
 800a5f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5f6:	f200 8087 	bhi.w	800a708 <HAL_TIM_ConfigClockSource+0x1bc>
 800a5fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5fe:	f000 8085 	beq.w	800a70c <HAL_TIM_ConfigClockSource+0x1c0>
 800a602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a606:	d87f      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x1bc>
 800a608:	2b70      	cmp	r3, #112	; 0x70
 800a60a:	d01a      	beq.n	800a642 <HAL_TIM_ConfigClockSource+0xf6>
 800a60c:	2b70      	cmp	r3, #112	; 0x70
 800a60e:	d87b      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x1bc>
 800a610:	2b60      	cmp	r3, #96	; 0x60
 800a612:	d050      	beq.n	800a6b6 <HAL_TIM_ConfigClockSource+0x16a>
 800a614:	2b60      	cmp	r3, #96	; 0x60
 800a616:	d877      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x1bc>
 800a618:	2b50      	cmp	r3, #80	; 0x50
 800a61a:	d03c      	beq.n	800a696 <HAL_TIM_ConfigClockSource+0x14a>
 800a61c:	2b50      	cmp	r3, #80	; 0x50
 800a61e:	d873      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x1bc>
 800a620:	2b40      	cmp	r3, #64	; 0x40
 800a622:	d058      	beq.n	800a6d6 <HAL_TIM_ConfigClockSource+0x18a>
 800a624:	2b40      	cmp	r3, #64	; 0x40
 800a626:	d86f      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x1bc>
 800a628:	2b30      	cmp	r3, #48	; 0x30
 800a62a:	d064      	beq.n	800a6f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a62c:	2b30      	cmp	r3, #48	; 0x30
 800a62e:	d86b      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x1bc>
 800a630:	2b20      	cmp	r3, #32
 800a632:	d060      	beq.n	800a6f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a634:	2b20      	cmp	r3, #32
 800a636:	d867      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x1bc>
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d05c      	beq.n	800a6f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a63c:	2b10      	cmp	r3, #16
 800a63e:	d05a      	beq.n	800a6f6 <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a640:	e062      	b.n	800a708 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6818      	ldr	r0, [r3, #0]
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	6899      	ldr	r1, [r3, #8]
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	685a      	ldr	r2, [r3, #4]
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	f000 fca5 	bl	800afa0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a664:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	609a      	str	r2, [r3, #8]
      break;
 800a66e:	e04e      	b.n	800a70e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6818      	ldr	r0, [r3, #0]
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	6899      	ldr	r1, [r3, #8]
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	685a      	ldr	r2, [r3, #4]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	f000 fc8e 	bl	800afa0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	689a      	ldr	r2, [r3, #8]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a692:	609a      	str	r2, [r3, #8]
      break;
 800a694:	e03b      	b.n	800a70e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6818      	ldr	r0, [r3, #0]
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	6859      	ldr	r1, [r3, #4]
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	f000 fc00 	bl	800aea8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2150      	movs	r1, #80	; 0x50
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f000 fc59 	bl	800af66 <TIM_ITRx_SetConfig>
      break;
 800a6b4:	e02b      	b.n	800a70e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6818      	ldr	r0, [r3, #0]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	6859      	ldr	r1, [r3, #4]
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	f000 fc1f 	bl	800af06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2160      	movs	r1, #96	; 0x60
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f000 fc49 	bl	800af66 <TIM_ITRx_SetConfig>
      break;
 800a6d4:	e01b      	b.n	800a70e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6818      	ldr	r0, [r3, #0]
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	6859      	ldr	r1, [r3, #4]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	f000 fbe0 	bl	800aea8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2140      	movs	r1, #64	; 0x40
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 fc39 	bl	800af66 <TIM_ITRx_SetConfig>
      break;
 800a6f4:	e00b      	b.n	800a70e <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4619      	mov	r1, r3
 800a700:	4610      	mov	r0, r2
 800a702:	f000 fc30 	bl	800af66 <TIM_ITRx_SetConfig>
        break;
 800a706:	e002      	b.n	800a70e <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800a708:	bf00      	nop
 800a70a:	e000      	b.n	800a70e <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800a70c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2201      	movs	r2, #1
 800a712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	00100070 	.word	0x00100070
 800a72c:	00100040 	.word	0x00100040
 800a730:	00100030 	.word	0x00100030
 800a734:	00100020 	.word	0x00100020

0800a738 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a740:	bf00      	nop
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a754:	bf00      	nop
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a77c:	bf00      	nop
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a790:	bf00      	nop
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a3c      	ldr	r2, [pc, #240]	; (800a8a0 <TIM_Base_SetConfig+0x104>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d00f      	beq.n	800a7d4 <TIM_Base_SetConfig+0x38>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ba:	d00b      	beq.n	800a7d4 <TIM_Base_SetConfig+0x38>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	4a39      	ldr	r2, [pc, #228]	; (800a8a4 <TIM_Base_SetConfig+0x108>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d007      	beq.n	800a7d4 <TIM_Base_SetConfig+0x38>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a38      	ldr	r2, [pc, #224]	; (800a8a8 <TIM_Base_SetConfig+0x10c>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d003      	beq.n	800a7d4 <TIM_Base_SetConfig+0x38>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4a37      	ldr	r2, [pc, #220]	; (800a8ac <TIM_Base_SetConfig+0x110>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d108      	bne.n	800a7e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4a2d      	ldr	r2, [pc, #180]	; (800a8a0 <TIM_Base_SetConfig+0x104>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d01b      	beq.n	800a826 <TIM_Base_SetConfig+0x8a>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7f4:	d017      	beq.n	800a826 <TIM_Base_SetConfig+0x8a>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a2a      	ldr	r2, [pc, #168]	; (800a8a4 <TIM_Base_SetConfig+0x108>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d013      	beq.n	800a826 <TIM_Base_SetConfig+0x8a>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a29      	ldr	r2, [pc, #164]	; (800a8a8 <TIM_Base_SetConfig+0x10c>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d00f      	beq.n	800a826 <TIM_Base_SetConfig+0x8a>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4a28      	ldr	r2, [pc, #160]	; (800a8ac <TIM_Base_SetConfig+0x110>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d00b      	beq.n	800a826 <TIM_Base_SetConfig+0x8a>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4a27      	ldr	r2, [pc, #156]	; (800a8b0 <TIM_Base_SetConfig+0x114>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d007      	beq.n	800a826 <TIM_Base_SetConfig+0x8a>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4a26      	ldr	r2, [pc, #152]	; (800a8b4 <TIM_Base_SetConfig+0x118>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d003      	beq.n	800a826 <TIM_Base_SetConfig+0x8a>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4a25      	ldr	r2, [pc, #148]	; (800a8b8 <TIM_Base_SetConfig+0x11c>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d108      	bne.n	800a838 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a82c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	4313      	orrs	r3, r2
 800a836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	695b      	ldr	r3, [r3, #20]
 800a842:	4313      	orrs	r3, r2
 800a844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	689a      	ldr	r2, [r3, #8]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a10      	ldr	r2, [pc, #64]	; (800a8a0 <TIM_Base_SetConfig+0x104>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d00f      	beq.n	800a884 <TIM_Base_SetConfig+0xe8>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4a11      	ldr	r2, [pc, #68]	; (800a8ac <TIM_Base_SetConfig+0x110>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d00b      	beq.n	800a884 <TIM_Base_SetConfig+0xe8>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4a10      	ldr	r2, [pc, #64]	; (800a8b0 <TIM_Base_SetConfig+0x114>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d007      	beq.n	800a884 <TIM_Base_SetConfig+0xe8>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	4a0f      	ldr	r2, [pc, #60]	; (800a8b4 <TIM_Base_SetConfig+0x118>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d003      	beq.n	800a884 <TIM_Base_SetConfig+0xe8>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4a0e      	ldr	r2, [pc, #56]	; (800a8b8 <TIM_Base_SetConfig+0x11c>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d103      	bne.n	800a88c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	691a      	ldr	r2, [r3, #16]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2201      	movs	r2, #1
 800a890:	615a      	str	r2, [r3, #20]
}
 800a892:	bf00      	nop
 800a894:	3714      	adds	r7, #20
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	40012c00 	.word	0x40012c00
 800a8a4:	40000400 	.word	0x40000400
 800a8a8:	40000800 	.word	0x40000800
 800a8ac:	40013400 	.word	0x40013400
 800a8b0:	40014000 	.word	0x40014000
 800a8b4:	40014400 	.word	0x40014400
 800a8b8:	40014800 	.word	0x40014800

0800a8bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b087      	sub	sp, #28
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6a1b      	ldr	r3, [r3, #32]
 800a8ca:	f023 0201 	bic.w	r2, r3, #1
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a1b      	ldr	r3, [r3, #32]
 800a8d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	699b      	ldr	r3, [r3, #24]
 800a8e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f023 0303 	bic.w	r3, r3, #3
 800a8f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	f023 0302 	bic.w	r3, r3, #2
 800a908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	689b      	ldr	r3, [r3, #8]
 800a90e:	697a      	ldr	r2, [r7, #20]
 800a910:	4313      	orrs	r3, r2
 800a912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4a2c      	ldr	r2, [pc, #176]	; (800a9c8 <TIM_OC1_SetConfig+0x10c>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d00f      	beq.n	800a93c <TIM_OC1_SetConfig+0x80>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	4a2b      	ldr	r2, [pc, #172]	; (800a9cc <TIM_OC1_SetConfig+0x110>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d00b      	beq.n	800a93c <TIM_OC1_SetConfig+0x80>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a2a      	ldr	r2, [pc, #168]	; (800a9d0 <TIM_OC1_SetConfig+0x114>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d007      	beq.n	800a93c <TIM_OC1_SetConfig+0x80>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a29      	ldr	r2, [pc, #164]	; (800a9d4 <TIM_OC1_SetConfig+0x118>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d003      	beq.n	800a93c <TIM_OC1_SetConfig+0x80>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a28      	ldr	r2, [pc, #160]	; (800a9d8 <TIM_OC1_SetConfig+0x11c>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d10c      	bne.n	800a956 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	f023 0308 	bic.w	r3, r3, #8
 800a942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	697a      	ldr	r2, [r7, #20]
 800a94a:	4313      	orrs	r3, r2
 800a94c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	f023 0304 	bic.w	r3, r3, #4
 800a954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a1b      	ldr	r2, [pc, #108]	; (800a9c8 <TIM_OC1_SetConfig+0x10c>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d00f      	beq.n	800a97e <TIM_OC1_SetConfig+0xc2>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4a1a      	ldr	r2, [pc, #104]	; (800a9cc <TIM_OC1_SetConfig+0x110>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d00b      	beq.n	800a97e <TIM_OC1_SetConfig+0xc2>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a19      	ldr	r2, [pc, #100]	; (800a9d0 <TIM_OC1_SetConfig+0x114>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d007      	beq.n	800a97e <TIM_OC1_SetConfig+0xc2>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a18      	ldr	r2, [pc, #96]	; (800a9d4 <TIM_OC1_SetConfig+0x118>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d003      	beq.n	800a97e <TIM_OC1_SetConfig+0xc2>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4a17      	ldr	r2, [pc, #92]	; (800a9d8 <TIM_OC1_SetConfig+0x11c>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d111      	bne.n	800a9a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a98c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	695b      	ldr	r3, [r3, #20]
 800a992:	693a      	ldr	r2, [r7, #16]
 800a994:	4313      	orrs	r3, r2
 800a996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	699b      	ldr	r3, [r3, #24]
 800a99c:	693a      	ldr	r2, [r7, #16]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	693a      	ldr	r2, [r7, #16]
 800a9a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	685a      	ldr	r2, [r3, #4]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	697a      	ldr	r2, [r7, #20]
 800a9ba:	621a      	str	r2, [r3, #32]
}
 800a9bc:	bf00      	nop
 800a9be:	371c      	adds	r7, #28
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr
 800a9c8:	40012c00 	.word	0x40012c00
 800a9cc:	40013400 	.word	0x40013400
 800a9d0:	40014000 	.word	0x40014000
 800a9d4:	40014400 	.word	0x40014400
 800a9d8:	40014800 	.word	0x40014800

0800a9dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b087      	sub	sp, #28
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a1b      	ldr	r3, [r3, #32]
 800a9ea:	f023 0210 	bic.w	r2, r3, #16
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a1b      	ldr	r3, [r3, #32]
 800a9f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	699b      	ldr	r3, [r3, #24]
 800aa02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	021b      	lsls	r3, r3, #8
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	4313      	orrs	r3, r2
 800aa22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	f023 0320 	bic.w	r3, r3, #32
 800aa2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	011b      	lsls	r3, r3, #4
 800aa32:	697a      	ldr	r2, [r7, #20]
 800aa34:	4313      	orrs	r3, r2
 800aa36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4a28      	ldr	r2, [pc, #160]	; (800aadc <TIM_OC2_SetConfig+0x100>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d003      	beq.n	800aa48 <TIM_OC2_SetConfig+0x6c>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a27      	ldr	r2, [pc, #156]	; (800aae0 <TIM_OC2_SetConfig+0x104>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d10d      	bne.n	800aa64 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	011b      	lsls	r3, r3, #4
 800aa56:	697a      	ldr	r2, [r7, #20]
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a1d      	ldr	r2, [pc, #116]	; (800aadc <TIM_OC2_SetConfig+0x100>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d00f      	beq.n	800aa8c <TIM_OC2_SetConfig+0xb0>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4a1c      	ldr	r2, [pc, #112]	; (800aae0 <TIM_OC2_SetConfig+0x104>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d00b      	beq.n	800aa8c <TIM_OC2_SetConfig+0xb0>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4a1b      	ldr	r2, [pc, #108]	; (800aae4 <TIM_OC2_SetConfig+0x108>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d007      	beq.n	800aa8c <TIM_OC2_SetConfig+0xb0>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4a1a      	ldr	r2, [pc, #104]	; (800aae8 <TIM_OC2_SetConfig+0x10c>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d003      	beq.n	800aa8c <TIM_OC2_SetConfig+0xb0>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4a19      	ldr	r2, [pc, #100]	; (800aaec <TIM_OC2_SetConfig+0x110>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d113      	bne.n	800aab4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	695b      	ldr	r3, [r3, #20]
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	693a      	ldr	r2, [r7, #16]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	693a      	ldr	r2, [r7, #16]
 800aab0:	4313      	orrs	r3, r2
 800aab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	685a      	ldr	r2, [r3, #4]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	697a      	ldr	r2, [r7, #20]
 800aacc:	621a      	str	r2, [r3, #32]
}
 800aace:	bf00      	nop
 800aad0:	371c      	adds	r7, #28
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	40012c00 	.word	0x40012c00
 800aae0:	40013400 	.word	0x40013400
 800aae4:	40014000 	.word	0x40014000
 800aae8:	40014400 	.word	0x40014400
 800aaec:	40014800 	.word	0x40014800

0800aaf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b087      	sub	sp, #28
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a1b      	ldr	r3, [r3, #32]
 800aafe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6a1b      	ldr	r3, [r3, #32]
 800ab0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	69db      	ldr	r3, [r3, #28]
 800ab16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f023 0303 	bic.w	r3, r3, #3
 800ab2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	4313      	orrs	r3, r2
 800ab34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	021b      	lsls	r3, r3, #8
 800ab44:	697a      	ldr	r2, [r7, #20]
 800ab46:	4313      	orrs	r3, r2
 800ab48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a27      	ldr	r2, [pc, #156]	; (800abec <TIM_OC3_SetConfig+0xfc>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d003      	beq.n	800ab5a <TIM_OC3_SetConfig+0x6a>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a26      	ldr	r2, [pc, #152]	; (800abf0 <TIM_OC3_SetConfig+0x100>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d10d      	bne.n	800ab76 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	021b      	lsls	r3, r3, #8
 800ab68:	697a      	ldr	r2, [r7, #20]
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4a1c      	ldr	r2, [pc, #112]	; (800abec <TIM_OC3_SetConfig+0xfc>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d00f      	beq.n	800ab9e <TIM_OC3_SetConfig+0xae>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a1b      	ldr	r2, [pc, #108]	; (800abf0 <TIM_OC3_SetConfig+0x100>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d00b      	beq.n	800ab9e <TIM_OC3_SetConfig+0xae>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	4a1a      	ldr	r2, [pc, #104]	; (800abf4 <TIM_OC3_SetConfig+0x104>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d007      	beq.n	800ab9e <TIM_OC3_SetConfig+0xae>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a19      	ldr	r2, [pc, #100]	; (800abf8 <TIM_OC3_SetConfig+0x108>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d003      	beq.n	800ab9e <TIM_OC3_SetConfig+0xae>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a18      	ldr	r2, [pc, #96]	; (800abfc <TIM_OC3_SetConfig+0x10c>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d113      	bne.n	800abc6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	011b      	lsls	r3, r3, #4
 800abb4:	693a      	ldr	r2, [r7, #16]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	699b      	ldr	r3, [r3, #24]
 800abbe:	011b      	lsls	r3, r3, #4
 800abc0:	693a      	ldr	r2, [r7, #16]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	693a      	ldr	r2, [r7, #16]
 800abca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	68fa      	ldr	r2, [r7, #12]
 800abd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	685a      	ldr	r2, [r3, #4]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	697a      	ldr	r2, [r7, #20]
 800abde:	621a      	str	r2, [r3, #32]
}
 800abe0:	bf00      	nop
 800abe2:	371c      	adds	r7, #28
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr
 800abec:	40012c00 	.word	0x40012c00
 800abf0:	40013400 	.word	0x40013400
 800abf4:	40014000 	.word	0x40014000
 800abf8:	40014400 	.word	0x40014400
 800abfc:	40014800 	.word	0x40014800

0800ac00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6a1b      	ldr	r3, [r3, #32]
 800ac0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6a1b      	ldr	r3, [r3, #32]
 800ac1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	69db      	ldr	r3, [r3, #28]
 800ac26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	021b      	lsls	r3, r3, #8
 800ac42:	68fa      	ldr	r2, [r7, #12]
 800ac44:	4313      	orrs	r3, r2
 800ac46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	031b      	lsls	r3, r3, #12
 800ac56:	697a      	ldr	r2, [r7, #20]
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a28      	ldr	r2, [pc, #160]	; (800ad00 <TIM_OC4_SetConfig+0x100>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d003      	beq.n	800ac6c <TIM_OC4_SetConfig+0x6c>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4a27      	ldr	r2, [pc, #156]	; (800ad04 <TIM_OC4_SetConfig+0x104>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d10d      	bne.n	800ac88 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ac72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	031b      	lsls	r3, r3, #12
 800ac7a:	697a      	ldr	r2, [r7, #20]
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4a1d      	ldr	r2, [pc, #116]	; (800ad00 <TIM_OC4_SetConfig+0x100>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d00f      	beq.n	800acb0 <TIM_OC4_SetConfig+0xb0>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a1c      	ldr	r2, [pc, #112]	; (800ad04 <TIM_OC4_SetConfig+0x104>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d00b      	beq.n	800acb0 <TIM_OC4_SetConfig+0xb0>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4a1b      	ldr	r2, [pc, #108]	; (800ad08 <TIM_OC4_SetConfig+0x108>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d007      	beq.n	800acb0 <TIM_OC4_SetConfig+0xb0>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4a1a      	ldr	r2, [pc, #104]	; (800ad0c <TIM_OC4_SetConfig+0x10c>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d003      	beq.n	800acb0 <TIM_OC4_SetConfig+0xb0>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a19      	ldr	r2, [pc, #100]	; (800ad10 <TIM_OC4_SetConfig+0x110>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d113      	bne.n	800acd8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acb6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800acbe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	695b      	ldr	r3, [r3, #20]
 800acc4:	019b      	lsls	r3, r3, #6
 800acc6:	693a      	ldr	r2, [r7, #16]
 800acc8:	4313      	orrs	r3, r2
 800acca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	699b      	ldr	r3, [r3, #24]
 800acd0:	019b      	lsls	r3, r3, #6
 800acd2:	693a      	ldr	r2, [r7, #16]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	693a      	ldr	r2, [r7, #16]
 800acdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	685a      	ldr	r2, [r3, #4]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	697a      	ldr	r2, [r7, #20]
 800acf0:	621a      	str	r2, [r3, #32]
}
 800acf2:	bf00      	nop
 800acf4:	371c      	adds	r7, #28
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	40012c00 	.word	0x40012c00
 800ad04:	40013400 	.word	0x40013400
 800ad08:	40014000 	.word	0x40014000
 800ad0c:	40014400 	.word	0x40014400
 800ad10:	40014800 	.word	0x40014800

0800ad14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b087      	sub	sp, #28
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a1b      	ldr	r3, [r3, #32]
 800ad22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6a1b      	ldr	r3, [r3, #32]
 800ad2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ad58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	689b      	ldr	r3, [r3, #8]
 800ad5e:	041b      	lsls	r3, r3, #16
 800ad60:	693a      	ldr	r2, [r7, #16]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4a17      	ldr	r2, [pc, #92]	; (800adc8 <TIM_OC5_SetConfig+0xb4>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d00f      	beq.n	800ad8e <TIM_OC5_SetConfig+0x7a>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4a16      	ldr	r2, [pc, #88]	; (800adcc <TIM_OC5_SetConfig+0xb8>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d00b      	beq.n	800ad8e <TIM_OC5_SetConfig+0x7a>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4a15      	ldr	r2, [pc, #84]	; (800add0 <TIM_OC5_SetConfig+0xbc>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d007      	beq.n	800ad8e <TIM_OC5_SetConfig+0x7a>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4a14      	ldr	r2, [pc, #80]	; (800add4 <TIM_OC5_SetConfig+0xc0>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d003      	beq.n	800ad8e <TIM_OC5_SetConfig+0x7a>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4a13      	ldr	r2, [pc, #76]	; (800add8 <TIM_OC5_SetConfig+0xc4>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d109      	bne.n	800ada2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	695b      	ldr	r3, [r3, #20]
 800ad9a:	021b      	lsls	r3, r3, #8
 800ad9c:	697a      	ldr	r2, [r7, #20]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	697a      	ldr	r2, [r7, #20]
 800ada6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	685a      	ldr	r2, [r3, #4]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	693a      	ldr	r2, [r7, #16]
 800adba:	621a      	str	r2, [r3, #32]
}
 800adbc:	bf00      	nop
 800adbe:	371c      	adds	r7, #28
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr
 800adc8:	40012c00 	.word	0x40012c00
 800adcc:	40013400 	.word	0x40013400
 800add0:	40014000 	.word	0x40014000
 800add4:	40014400 	.word	0x40014400
 800add8:	40014800 	.word	0x40014800

0800addc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800addc:	b480      	push	{r7}
 800adde:	b087      	sub	sp, #28
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6a1b      	ldr	r3, [r3, #32]
 800adea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a1b      	ldr	r3, [r3, #32]
 800adf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	021b      	lsls	r3, r3, #8
 800ae16:	68fa      	ldr	r2, [r7, #12]
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ae22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	689b      	ldr	r3, [r3, #8]
 800ae28:	051b      	lsls	r3, r3, #20
 800ae2a:	693a      	ldr	r2, [r7, #16]
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a18      	ldr	r2, [pc, #96]	; (800ae94 <TIM_OC6_SetConfig+0xb8>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d00f      	beq.n	800ae58 <TIM_OC6_SetConfig+0x7c>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a17      	ldr	r2, [pc, #92]	; (800ae98 <TIM_OC6_SetConfig+0xbc>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d00b      	beq.n	800ae58 <TIM_OC6_SetConfig+0x7c>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a16      	ldr	r2, [pc, #88]	; (800ae9c <TIM_OC6_SetConfig+0xc0>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d007      	beq.n	800ae58 <TIM_OC6_SetConfig+0x7c>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4a15      	ldr	r2, [pc, #84]	; (800aea0 <TIM_OC6_SetConfig+0xc4>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d003      	beq.n	800ae58 <TIM_OC6_SetConfig+0x7c>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4a14      	ldr	r2, [pc, #80]	; (800aea4 <TIM_OC6_SetConfig+0xc8>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d109      	bne.n	800ae6c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	695b      	ldr	r3, [r3, #20]
 800ae64:	029b      	lsls	r3, r3, #10
 800ae66:	697a      	ldr	r2, [r7, #20]
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	697a      	ldr	r2, [r7, #20]
 800ae70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	68fa      	ldr	r2, [r7, #12]
 800ae76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	685a      	ldr	r2, [r3, #4]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	693a      	ldr	r2, [r7, #16]
 800ae84:	621a      	str	r2, [r3, #32]
}
 800ae86:	bf00      	nop
 800ae88:	371c      	adds	r7, #28
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
 800ae92:	bf00      	nop
 800ae94:	40012c00 	.word	0x40012c00
 800ae98:	40013400 	.word	0x40013400
 800ae9c:	40014000 	.word	0x40014000
 800aea0:	40014400 	.word	0x40014400
 800aea4:	40014800 	.word	0x40014800

0800aea8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b087      	sub	sp, #28
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6a1b      	ldr	r3, [r3, #32]
 800aeb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	6a1b      	ldr	r3, [r3, #32]
 800aebe:	f023 0201 	bic.w	r2, r3, #1
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	699b      	ldr	r3, [r3, #24]
 800aeca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	011b      	lsls	r3, r3, #4
 800aed8:	693a      	ldr	r2, [r7, #16]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	f023 030a 	bic.w	r3, r3, #10
 800aee4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aee6:	697a      	ldr	r2, [r7, #20]
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	693a      	ldr	r2, [r7, #16]
 800aef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	621a      	str	r2, [r3, #32]
}
 800aefa:	bf00      	nop
 800aefc:	371c      	adds	r7, #28
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr

0800af06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af06:	b480      	push	{r7}
 800af08:	b087      	sub	sp, #28
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	60f8      	str	r0, [r7, #12]
 800af0e:	60b9      	str	r1, [r7, #8]
 800af10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6a1b      	ldr	r3, [r3, #32]
 800af16:	f023 0210 	bic.w	r2, r3, #16
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	6a1b      	ldr	r3, [r3, #32]
 800af28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	031b      	lsls	r3, r3, #12
 800af36:	697a      	ldr	r2, [r7, #20]
 800af38:	4313      	orrs	r3, r2
 800af3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	011b      	lsls	r3, r3, #4
 800af48:	693a      	ldr	r2, [r7, #16]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	697a      	ldr	r2, [r7, #20]
 800af52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	693a      	ldr	r2, [r7, #16]
 800af58:	621a      	str	r2, [r3, #32]
}
 800af5a:	bf00      	nop
 800af5c:	371c      	adds	r7, #28
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr

0800af66 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af66:	b480      	push	{r7}
 800af68:	b085      	sub	sp, #20
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800af7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af82:	683a      	ldr	r2, [r7, #0]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	4313      	orrs	r3, r2
 800af88:	f043 0307 	orr.w	r3, r3, #7
 800af8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	68fa      	ldr	r2, [r7, #12]
 800af92:	609a      	str	r2, [r3, #8]
}
 800af94:	bf00      	nop
 800af96:	3714      	adds	r7, #20
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b087      	sub	sp, #28
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	607a      	str	r2, [r7, #4]
 800afac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800afba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	021a      	lsls	r2, r3, #8
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	431a      	orrs	r2, r3
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	697a      	ldr	r2, [r7, #20]
 800afca:	4313      	orrs	r3, r2
 800afcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	697a      	ldr	r2, [r7, #20]
 800afd2:	609a      	str	r2, [r3, #8]
}
 800afd4:	bf00      	nop
 800afd6:	371c      	adds	r7, #28
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b087      	sub	sp, #28
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	f003 031f 	and.w	r3, r3, #31
 800aff2:	2201      	movs	r2, #1
 800aff4:	fa02 f303 	lsl.w	r3, r2, r3
 800aff8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	6a1a      	ldr	r2, [r3, #32]
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	43db      	mvns	r3, r3
 800b002:	401a      	ands	r2, r3
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	6a1a      	ldr	r2, [r3, #32]
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	f003 031f 	and.w	r3, r3, #31
 800b012:	6879      	ldr	r1, [r7, #4]
 800b014:	fa01 f303 	lsl.w	r3, r1, r3
 800b018:	431a      	orrs	r2, r3
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	621a      	str	r2, [r3, #32]
}
 800b01e:	bf00      	nop
 800b020:	371c      	adds	r7, #28
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
	...

0800b02c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d109      	bne.n	800b050 <HAL_TIMEx_PWMN_Start+0x24>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b042:	b2db      	uxtb	r3, r3
 800b044:	2b01      	cmp	r3, #1
 800b046:	bf14      	ite	ne
 800b048:	2301      	movne	r3, #1
 800b04a:	2300      	moveq	r3, #0
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	e022      	b.n	800b096 <HAL_TIMEx_PWMN_Start+0x6a>
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	2b04      	cmp	r3, #4
 800b054:	d109      	bne.n	800b06a <HAL_TIMEx_PWMN_Start+0x3e>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	2b01      	cmp	r3, #1
 800b060:	bf14      	ite	ne
 800b062:	2301      	movne	r3, #1
 800b064:	2300      	moveq	r3, #0
 800b066:	b2db      	uxtb	r3, r3
 800b068:	e015      	b.n	800b096 <HAL_TIMEx_PWMN_Start+0x6a>
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	2b08      	cmp	r3, #8
 800b06e:	d109      	bne.n	800b084 <HAL_TIMEx_PWMN_Start+0x58>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b076:	b2db      	uxtb	r3, r3
 800b078:	2b01      	cmp	r3, #1
 800b07a:	bf14      	ite	ne
 800b07c:	2301      	movne	r3, #1
 800b07e:	2300      	moveq	r3, #0
 800b080:	b2db      	uxtb	r3, r3
 800b082:	e008      	b.n	800b096 <HAL_TIMEx_PWMN_Start+0x6a>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b08a:	b2db      	uxtb	r3, r3
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	bf14      	ite	ne
 800b090:	2301      	movne	r3, #1
 800b092:	2300      	moveq	r3, #0
 800b094:	b2db      	uxtb	r3, r3
 800b096:	2b00      	cmp	r3, #0
 800b098:	d001      	beq.n	800b09e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b09a:	2301      	movs	r3, #1
 800b09c:	e069      	b.n	800b172 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d104      	bne.n	800b0ae <HAL_TIMEx_PWMN_Start+0x82>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2202      	movs	r2, #2
 800b0a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0ac:	e013      	b.n	800b0d6 <HAL_TIMEx_PWMN_Start+0xaa>
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	2b04      	cmp	r3, #4
 800b0b2:	d104      	bne.n	800b0be <HAL_TIMEx_PWMN_Start+0x92>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2202      	movs	r2, #2
 800b0b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0bc:	e00b      	b.n	800b0d6 <HAL_TIMEx_PWMN_Start+0xaa>
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	2b08      	cmp	r3, #8
 800b0c2:	d104      	bne.n	800b0ce <HAL_TIMEx_PWMN_Start+0xa2>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2202      	movs	r2, #2
 800b0c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b0cc:	e003      	b.n	800b0d6 <HAL_TIMEx_PWMN_Start+0xaa>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2202      	movs	r2, #2
 800b0d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2204      	movs	r2, #4
 800b0dc:	6839      	ldr	r1, [r7, #0]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f000 f9d3 	bl	800b48a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b0f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a20      	ldr	r2, [pc, #128]	; (800b17c <HAL_TIMEx_PWMN_Start+0x150>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d018      	beq.n	800b130 <HAL_TIMEx_PWMN_Start+0x104>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b106:	d013      	beq.n	800b130 <HAL_TIMEx_PWMN_Start+0x104>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a1c      	ldr	r2, [pc, #112]	; (800b180 <HAL_TIMEx_PWMN_Start+0x154>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d00e      	beq.n	800b130 <HAL_TIMEx_PWMN_Start+0x104>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4a1b      	ldr	r2, [pc, #108]	; (800b184 <HAL_TIMEx_PWMN_Start+0x158>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d009      	beq.n	800b130 <HAL_TIMEx_PWMN_Start+0x104>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a19      	ldr	r2, [pc, #100]	; (800b188 <HAL_TIMEx_PWMN_Start+0x15c>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d004      	beq.n	800b130 <HAL_TIMEx_PWMN_Start+0x104>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4a18      	ldr	r2, [pc, #96]	; (800b18c <HAL_TIMEx_PWMN_Start+0x160>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d115      	bne.n	800b15c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	689a      	ldr	r2, [r3, #8]
 800b136:	4b16      	ldr	r3, [pc, #88]	; (800b190 <HAL_TIMEx_PWMN_Start+0x164>)
 800b138:	4013      	ands	r3, r2
 800b13a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2b06      	cmp	r3, #6
 800b140:	d015      	beq.n	800b16e <HAL_TIMEx_PWMN_Start+0x142>
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b148:	d011      	beq.n	800b16e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	681a      	ldr	r2, [r3, #0]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f042 0201 	orr.w	r2, r2, #1
 800b158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b15a:	e008      	b.n	800b16e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f042 0201 	orr.w	r2, r2, #1
 800b16a:	601a      	str	r2, [r3, #0]
 800b16c:	e000      	b.n	800b170 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b16e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	3710      	adds	r7, #16
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	40012c00 	.word	0x40012c00
 800b180:	40000400 	.word	0x40000400
 800b184:	40000800 	.word	0x40000800
 800b188:	40013400 	.word	0x40013400
 800b18c:	40014000 	.word	0x40014000
 800b190:	00010007 	.word	0x00010007

0800b194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d101      	bne.n	800b1ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b1a8:	2302      	movs	r3, #2
 800b1aa:	e065      	b.n	800b278 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2202      	movs	r2, #2
 800b1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a2c      	ldr	r2, [pc, #176]	; (800b284 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d004      	beq.n	800b1e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a2b      	ldr	r2, [pc, #172]	; (800b288 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d108      	bne.n	800b1f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b1e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b1f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	4313      	orrs	r3, r2
 800b206:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a1b      	ldr	r2, [pc, #108]	; (800b284 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d018      	beq.n	800b24c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b222:	d013      	beq.n	800b24c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a18      	ldr	r2, [pc, #96]	; (800b28c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d00e      	beq.n	800b24c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a17      	ldr	r2, [pc, #92]	; (800b290 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d009      	beq.n	800b24c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a12      	ldr	r2, [pc, #72]	; (800b288 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d004      	beq.n	800b24c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a13      	ldr	r2, [pc, #76]	; (800b294 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d10c      	bne.n	800b266 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b252:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2201      	movs	r2, #1
 800b26a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b276:	2300      	movs	r3, #0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3714      	adds	r7, #20
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr
 800b284:	40012c00 	.word	0x40012c00
 800b288:	40013400 	.word	0x40013400
 800b28c:	40000400 	.word	0x40000400
 800b290:	40000800 	.word	0x40000800
 800b294:	40014000 	.word	0x40014000

0800b298 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b298:	b480      	push	{r7}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d101      	bne.n	800b2b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	e087      	b.n	800b3c4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	695b      	ldr	r3, [r3, #20]
 800b30c:	4313      	orrs	r3, r2
 800b30e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b31a:	4313      	orrs	r3, r2
 800b31c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	699b      	ldr	r3, [r3, #24]
 800b328:	041b      	lsls	r3, r3, #16
 800b32a:	4313      	orrs	r3, r2
 800b32c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a27      	ldr	r2, [pc, #156]	; (800b3d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d004      	beq.n	800b342 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a25      	ldr	r2, [pc, #148]	; (800b3d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d106      	bne.n	800b350 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	69db      	ldr	r3, [r3, #28]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a1e      	ldr	r2, [pc, #120]	; (800b3d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d004      	beq.n	800b364 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a1d      	ldr	r2, [pc, #116]	; (800b3d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d126      	bne.n	800b3b2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b36e:	051b      	lsls	r3, r3, #20
 800b370:	4313      	orrs	r3, r2
 800b372:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	6a1b      	ldr	r3, [r3, #32]
 800b37e:	4313      	orrs	r3, r2
 800b380:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38c:	4313      	orrs	r3, r2
 800b38e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a0e      	ldr	r2, [pc, #56]	; (800b3d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d004      	beq.n	800b3a4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4a0d      	ldr	r2, [pc, #52]	; (800b3d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d106      	bne.n	800b3b2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	68fa      	ldr	r2, [r7, #12]
 800b3b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3c2:	2300      	movs	r3, #0
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3714      	adds	r7, #20
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr
 800b3d0:	40012c00 	.word	0x40012c00
 800b3d4:	40013400 	.word	0x40013400

0800b3d8 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b3ee:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	370c      	adds	r7, #12
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr

0800b3fe <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b3fe:	b480      	push	{r7}
 800b400:	b083      	sub	sp, #12
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b406:	bf00      	nop
 800b408:	370c      	adds	r7, #12
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr

0800b412 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b412:	b480      	push	{r7}
 800b414:	b083      	sub	sp, #12
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b41a:	bf00      	nop
 800b41c:	370c      	adds	r7, #12
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr

0800b426 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b426:	b480      	push	{r7}
 800b428:	b083      	sub	sp, #12
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b42e:	bf00      	nop
 800b430:	370c      	adds	r7, #12
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr

0800b43a <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b43a:	b480      	push	{r7}
 800b43c:	b083      	sub	sp, #12
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b442:	bf00      	nop
 800b444:	370c      	adds	r7, #12
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr

0800b44e <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b44e:	b480      	push	{r7}
 800b450:	b083      	sub	sp, #12
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b456:	bf00      	nop
 800b458:	370c      	adds	r7, #12
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr

0800b462 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b462:	b480      	push	{r7}
 800b464:	b083      	sub	sp, #12
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b46a:	bf00      	nop
 800b46c:	370c      	adds	r7, #12
 800b46e:	46bd      	mov	sp, r7
 800b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b474:	4770      	bx	lr

0800b476 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b476:	b480      	push	{r7}
 800b478:	b083      	sub	sp, #12
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b47e:	bf00      	nop
 800b480:	370c      	adds	r7, #12
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr

0800b48a <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b48a:	b480      	push	{r7}
 800b48c:	b087      	sub	sp, #28
 800b48e:	af00      	add	r7, sp, #0
 800b490:	60f8      	str	r0, [r7, #12]
 800b492:	60b9      	str	r1, [r7, #8]
 800b494:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	f003 031f 	and.w	r3, r3, #31
 800b49c:	2204      	movs	r2, #4
 800b49e:	fa02 f303 	lsl.w	r3, r2, r3
 800b4a2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	6a1a      	ldr	r2, [r3, #32]
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	43db      	mvns	r3, r3
 800b4ac:	401a      	ands	r2, r3
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	6a1a      	ldr	r2, [r3, #32]
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	f003 031f 	and.w	r3, r3, #31
 800b4bc:	6879      	ldr	r1, [r7, #4]
 800b4be:	fa01 f303 	lsl.w	r3, r1, r3
 800b4c2:	431a      	orrs	r2, r3
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	621a      	str	r2, [r3, #32]
}
 800b4c8:	bf00      	nop
 800b4ca:	371c      	adds	r7, #28
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr

0800b4d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d101      	bne.n	800b4e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e042      	b.n	800b56c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d106      	bne.n	800b4fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f7fa fac3 	bl	8005a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2224      	movs	r2, #36	; 0x24
 800b502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f022 0201 	bic.w	r2, r2, #1
 800b514:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 fb5c 	bl	800bbd4 <UART_SetConfig>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d101      	bne.n	800b526 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	e022      	b.n	800b56c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d002      	beq.n	800b534 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 fe1c 	bl	800c16c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	685a      	ldr	r2, [r3, #4]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	689a      	ldr	r2, [r3, #8]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b552:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	681a      	ldr	r2, [r3, #0]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f042 0201 	orr.w	r2, r2, #1
 800b562:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 fea3 	bl	800c2b0 <UART_CheckIdleState>
 800b56a:	4603      	mov	r3, r0
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3708      	adds	r7, #8
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b08a      	sub	sp, #40	; 0x28
 800b578:	af02      	add	r7, sp, #8
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	60b9      	str	r1, [r7, #8]
 800b57e:	603b      	str	r3, [r7, #0]
 800b580:	4613      	mov	r3, r2
 800b582:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b58a:	2b20      	cmp	r3, #32
 800b58c:	f040 8083 	bne.w	800b696 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d002      	beq.n	800b59c <HAL_UART_Transmit+0x28>
 800b596:	88fb      	ldrh	r3, [r7, #6]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d101      	bne.n	800b5a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b59c:	2301      	movs	r3, #1
 800b59e:	e07b      	b.n	800b698 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b5a6:	2b01      	cmp	r3, #1
 800b5a8:	d101      	bne.n	800b5ae <HAL_UART_Transmit+0x3a>
 800b5aa:	2302      	movs	r3, #2
 800b5ac:	e074      	b.n	800b698 <HAL_UART_Transmit+0x124>
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2221      	movs	r2, #33	; 0x21
 800b5c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b5c6:	f7fa fb77 	bl	8005cb8 <HAL_GetTick>
 800b5ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	88fa      	ldrh	r2, [r7, #6]
 800b5d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	88fa      	ldrh	r2, [r7, #6]
 800b5d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5e4:	d108      	bne.n	800b5f8 <HAL_UART_Transmit+0x84>
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	691b      	ldr	r3, [r3, #16]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d104      	bne.n	800b5f8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	61bb      	str	r3, [r7, #24]
 800b5f6:	e003      	b.n	800b600 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2200      	movs	r2, #0
 800b604:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b608:	e02c      	b.n	800b664 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	2200      	movs	r2, #0
 800b612:	2180      	movs	r1, #128	; 0x80
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f000 fe96 	bl	800c346 <UART_WaitOnFlagUntilTimeout>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d001      	beq.n	800b624 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b620:	2303      	movs	r3, #3
 800b622:	e039      	b.n	800b698 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b624:	69fb      	ldr	r3, [r7, #28]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d10b      	bne.n	800b642 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	881b      	ldrh	r3, [r3, #0]
 800b62e:	461a      	mov	r2, r3
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b638:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b63a:	69bb      	ldr	r3, [r7, #24]
 800b63c:	3302      	adds	r3, #2
 800b63e:	61bb      	str	r3, [r7, #24]
 800b640:	e007      	b.n	800b652 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	781a      	ldrb	r2, [r3, #0]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	3301      	adds	r3, #1
 800b650:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b658:	b29b      	uxth	r3, r3
 800b65a:	3b01      	subs	r3, #1
 800b65c:	b29a      	uxth	r2, r3
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d1cc      	bne.n	800b60a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	2200      	movs	r2, #0
 800b678:	2140      	movs	r1, #64	; 0x40
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	f000 fe63 	bl	800c346 <UART_WaitOnFlagUntilTimeout>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d001      	beq.n	800b68a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b686:	2303      	movs	r3, #3
 800b688:	e006      	b.n	800b698 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2220      	movs	r2, #32
 800b68e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b692:	2300      	movs	r3, #0
 800b694:	e000      	b.n	800b698 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b696:	2302      	movs	r3, #2
  }
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3720      	adds	r7, #32
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	4613      	mov	r3, r2
 800b6ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6b4:	2b20      	cmp	r3, #32
 800b6b6:	d131      	bne.n	800b71c <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d002      	beq.n	800b6c4 <HAL_UART_Receive_IT+0x24>
 800b6be:	88fb      	ldrh	r3, [r7, #6]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d101      	bne.n	800b6c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	e02a      	b.n	800b71e <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d101      	bne.n	800b6d6 <HAL_UART_Receive_IT+0x36>
 800b6d2:	2302      	movs	r3, #2
 800b6d4:	e023      	b.n	800b71e <HAL_UART_Receive_IT+0x7e>
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a0f      	ldr	r2, [pc, #60]	; (800b728 <HAL_UART_Receive_IT+0x88>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d00e      	beq.n	800b70c <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d007      	beq.n	800b70c <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b70a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b70c:	88fb      	ldrh	r3, [r7, #6]
 800b70e:	461a      	mov	r2, r3
 800b710:	68b9      	ldr	r1, [r7, #8]
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f000 fe98 	bl	800c448 <UART_Start_Receive_IT>
 800b718:	4603      	mov	r3, r0
 800b71a:	e000      	b.n	800b71e <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b71c:	2302      	movs	r3, #2
  }
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	40008000 	.word	0x40008000

0800b72c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b088      	sub	sp, #32
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	69db      	ldr	r3, [r3, #28]
 800b73a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	689b      	ldr	r3, [r3, #8]
 800b74a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b74c:	69fa      	ldr	r2, [r7, #28]
 800b74e:	f640 030f 	movw	r3, #2063	; 0x80f
 800b752:	4013      	ands	r3, r2
 800b754:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d118      	bne.n	800b78e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	f003 0320 	and.w	r3, r3, #32
 800b762:	2b00      	cmp	r3, #0
 800b764:	d013      	beq.n	800b78e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b766:	69bb      	ldr	r3, [r7, #24]
 800b768:	f003 0320 	and.w	r3, r3, #32
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d104      	bne.n	800b77a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b776:	2b00      	cmp	r3, #0
 800b778:	d009      	beq.n	800b78e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b77e:	2b00      	cmp	r3, #0
 800b780:	f000 81fb 	beq.w	800bb7a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	4798      	blx	r3
      }
      return;
 800b78c:	e1f5      	b.n	800bb7a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	2b00      	cmp	r3, #0
 800b792:	f000 80ef 	beq.w	800b974 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b796:	697a      	ldr	r2, [r7, #20]
 800b798:	4b73      	ldr	r3, [pc, #460]	; (800b968 <HAL_UART_IRQHandler+0x23c>)
 800b79a:	4013      	ands	r3, r2
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d105      	bne.n	800b7ac <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b7a0:	69ba      	ldr	r2, [r7, #24]
 800b7a2:	4b72      	ldr	r3, [pc, #456]	; (800b96c <HAL_UART_IRQHandler+0x240>)
 800b7a4:	4013      	ands	r3, r2
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	f000 80e4 	beq.w	800b974 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	f003 0301 	and.w	r3, r3, #1
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d010      	beq.n	800b7d8 <HAL_UART_IRQHandler+0xac>
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d00b      	beq.n	800b7d8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7ce:	f043 0201 	orr.w	r2, r3, #1
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	f003 0302 	and.w	r3, r3, #2
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d010      	beq.n	800b804 <HAL_UART_IRQHandler+0xd8>
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	f003 0301 	and.w	r3, r3, #1
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d00b      	beq.n	800b804 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2202      	movs	r2, #2
 800b7f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7fa:	f043 0204 	orr.w	r2, r3, #4
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	f003 0304 	and.w	r3, r3, #4
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d010      	beq.n	800b830 <HAL_UART_IRQHandler+0x104>
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	f003 0301 	and.w	r3, r3, #1
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00b      	beq.n	800b830 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2204      	movs	r2, #4
 800b81e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b826:	f043 0202 	orr.w	r2, r3, #2
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b830:	69fb      	ldr	r3, [r7, #28]
 800b832:	f003 0308 	and.w	r3, r3, #8
 800b836:	2b00      	cmp	r3, #0
 800b838:	d015      	beq.n	800b866 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	f003 0320 	and.w	r3, r3, #32
 800b840:	2b00      	cmp	r3, #0
 800b842:	d104      	bne.n	800b84e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b844:	697a      	ldr	r2, [r7, #20]
 800b846:	4b48      	ldr	r3, [pc, #288]	; (800b968 <HAL_UART_IRQHandler+0x23c>)
 800b848:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00b      	beq.n	800b866 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2208      	movs	r2, #8
 800b854:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b85c:	f043 0208 	orr.w	r2, r3, #8
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b866:	69fb      	ldr	r3, [r7, #28]
 800b868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d011      	beq.n	800b894 <HAL_UART_IRQHandler+0x168>
 800b870:	69bb      	ldr	r3, [r7, #24]
 800b872:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00c      	beq.n	800b894 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b88a:	f043 0220 	orr.w	r2, r3, #32
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	f000 816f 	beq.w	800bb7e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	f003 0320 	and.w	r3, r3, #32
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d011      	beq.n	800b8ce <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b8aa:	69bb      	ldr	r3, [r7, #24]
 800b8ac:	f003 0320 	and.w	r3, r3, #32
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d104      	bne.n	800b8be <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d007      	beq.n	800b8ce <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d003      	beq.n	800b8ce <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8d4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	689b      	ldr	r3, [r3, #8]
 800b8dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8e0:	2b40      	cmp	r3, #64	; 0x40
 800b8e2:	d004      	beq.n	800b8ee <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d031      	beq.n	800b952 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 fe68 	bl	800c5c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8fe:	2b40      	cmp	r3, #64	; 0x40
 800b900:	d123      	bne.n	800b94a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	689a      	ldr	r2, [r3, #8]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b910:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b916:	2b00      	cmp	r3, #0
 800b918:	d013      	beq.n	800b942 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b91e:	4a14      	ldr	r2, [pc, #80]	; (800b970 <HAL_UART_IRQHandler+0x244>)
 800b920:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b926:	4618      	mov	r0, r3
 800b928:	f7fb feaa 	bl	8007680 <HAL_DMA_Abort_IT>
 800b92c:	4603      	mov	r3, r0
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d017      	beq.n	800b962 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b938:	687a      	ldr	r2, [r7, #4]
 800b93a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b93c:	4610      	mov	r0, r2
 800b93e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b940:	e00f      	b.n	800b962 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 f930 	bl	800bba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b948:	e00b      	b.n	800b962 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 f92c 	bl	800bba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b950:	e007      	b.n	800b962 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 f928 	bl	800bba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b960:	e10d      	b.n	800bb7e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b962:	bf00      	nop
    return;
 800b964:	e10b      	b.n	800bb7e <HAL_UART_IRQHandler+0x452>
 800b966:	bf00      	nop
 800b968:	10000001 	.word	0x10000001
 800b96c:	04000120 	.word	0x04000120
 800b970:	0800c629 	.word	0x0800c629

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b978:	2b01      	cmp	r3, #1
 800b97a:	f040 80ab 	bne.w	800bad4 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b97e:	69fb      	ldr	r3, [r7, #28]
 800b980:	f003 0310 	and.w	r3, r3, #16
 800b984:	2b00      	cmp	r3, #0
 800b986:	f000 80a5 	beq.w	800bad4 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	f003 0310 	and.w	r3, r3, #16
 800b990:	2b00      	cmp	r3, #0
 800b992:	f000 809f 	beq.w	800bad4 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2210      	movs	r2, #16
 800b99c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9a8:	2b40      	cmp	r3, #64	; 0x40
 800b9aa:	d155      	bne.n	800ba58 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800b9b6:	893b      	ldrh	r3, [r7, #8]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	f000 80e2 	beq.w	800bb82 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b9c4:	893a      	ldrh	r2, [r7, #8]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	f080 80db 	bcs.w	800bb82 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	893a      	ldrh	r2, [r7, #8]
 800b9d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f003 0320 	and.w	r3, r3, #32
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d12b      	bne.n	800ba3c <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b9f2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	689a      	ldr	r2, [r3, #8]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f022 0201 	bic.w	r2, r2, #1
 800ba02:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	689a      	ldr	r2, [r3, #8]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba12:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2220      	movs	r2, #32
 800ba18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f022 0210 	bic.w	r2, r2, #16
 800ba30:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fb fdc9 	bl	80075ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	1ad3      	subs	r3, r2, r3
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	4619      	mov	r1, r3
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 f8b3 	bl	800bbbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba56:	e094      	b.n	800bb82 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	1ad3      	subs	r3, r2, r3
 800ba68:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	f000 8087 	beq.w	800bb86 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 800ba78:	897b      	ldrh	r3, [r7, #10]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	f000 8083 	beq.w	800bb86 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	681a      	ldr	r2, [r3, #0]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ba8e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	6812      	ldr	r2, [r2, #0]
 800ba9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba9e:	f023 0301 	bic.w	r3, r3, #1
 800baa2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2220      	movs	r2, #32
 800baa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f022 0210 	bic.w	r2, r2, #16
 800bac6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bac8:	897b      	ldrh	r3, [r7, #10]
 800baca:	4619      	mov	r1, r3
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 f875 	bl	800bbbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bad2:	e058      	b.n	800bb86 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bad4:	69fb      	ldr	r3, [r7, #28]
 800bad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00d      	beq.n	800bafa <HAL_UART_IRQHandler+0x3ce>
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d008      	beq.n	800bafa <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800baf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f001 f8a4 	bl	800cc40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800baf8:	e048      	b.n	800bb8c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bafa:	69fb      	ldr	r3, [r7, #28]
 800bafc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d012      	beq.n	800bb2a <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bb04:	69bb      	ldr	r3, [r7, #24]
 800bb06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d104      	bne.n	800bb18 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d008      	beq.n	800bb2a <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d034      	beq.n	800bb8a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	4798      	blx	r3
    }
    return;
 800bb28:	e02f      	b.n	800bb8a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d008      	beq.n	800bb46 <HAL_UART_IRQHandler+0x41a>
 800bb34:	69bb      	ldr	r3, [r7, #24]
 800bb36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d003      	beq.n	800bb46 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 fd88 	bl	800c654 <UART_EndTransmit_IT>
    return;
 800bb44:	e022      	b.n	800bb8c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bb46:	69fb      	ldr	r3, [r7, #28]
 800bb48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d008      	beq.n	800bb62 <HAL_UART_IRQHandler+0x436>
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d003      	beq.n	800bb62 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f001 f884 	bl	800cc68 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb60:	e014      	b.n	800bb8c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bb62:	69fb      	ldr	r3, [r7, #28]
 800bb64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d00f      	beq.n	800bb8c <HAL_UART_IRQHandler+0x460>
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	da0c      	bge.n	800bb8c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f001 f86e 	bl	800cc54 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb78:	e008      	b.n	800bb8c <HAL_UART_IRQHandler+0x460>
      return;
 800bb7a:	bf00      	nop
 800bb7c:	e006      	b.n	800bb8c <HAL_UART_IRQHandler+0x460>
    return;
 800bb7e:	bf00      	nop
 800bb80:	e004      	b.n	800bb8c <HAL_UART_IRQHandler+0x460>
      return;
 800bb82:	bf00      	nop
 800bb84:	e002      	b.n	800bb8c <HAL_UART_IRQHandler+0x460>
      return;
 800bb86:	bf00      	nop
 800bb88:	e000      	b.n	800bb8c <HAL_UART_IRQHandler+0x460>
    return;
 800bb8a:	bf00      	nop
  }
}
 800bb8c:	3720      	adds	r7, #32
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop

0800bb94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bb9c:	bf00      	nop
 800bb9e:	370c      	adds	r7, #12
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr

0800bba8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b083      	sub	sp, #12
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bbb0:	bf00      	nop
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bbc8:	bf00      	nop
 800bbca:	370c      	adds	r7, #12
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bbd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bbd8:	b08c      	sub	sp, #48	; 0x30
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	689a      	ldr	r2, [r3, #8]
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	691b      	ldr	r3, [r3, #16]
 800bbec:	431a      	orrs	r2, r3
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	695b      	ldr	r3, [r3, #20]
 800bbf2:	431a      	orrs	r2, r3
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	69db      	ldr	r3, [r3, #28]
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	4bab      	ldr	r3, [pc, #684]	; (800beb0 <UART_SetConfig+0x2dc>)
 800bc04:	4013      	ands	r3, r2
 800bc06:	697a      	ldr	r2, [r7, #20]
 800bc08:	6812      	ldr	r2, [r2, #0]
 800bc0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc0c:	430b      	orrs	r3, r1
 800bc0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	68da      	ldr	r2, [r3, #12]
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	430a      	orrs	r2, r1
 800bc24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	699b      	ldr	r3, [r3, #24]
 800bc2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4aa0      	ldr	r2, [pc, #640]	; (800beb4 <UART_SetConfig+0x2e0>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d004      	beq.n	800bc40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	6a1b      	ldr	r3, [r3, #32]
 800bc3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800bc4a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800bc4e:	697a      	ldr	r2, [r7, #20]
 800bc50:	6812      	ldr	r2, [r2, #0]
 800bc52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc54:	430b      	orrs	r3, r1
 800bc56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc5e:	f023 010f 	bic.w	r1, r3, #15
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	430a      	orrs	r2, r1
 800bc6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4a91      	ldr	r2, [pc, #580]	; (800beb8 <UART_SetConfig+0x2e4>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d125      	bne.n	800bcc4 <UART_SetConfig+0xf0>
 800bc78:	4b90      	ldr	r3, [pc, #576]	; (800bebc <UART_SetConfig+0x2e8>)
 800bc7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc7e:	f003 0303 	and.w	r3, r3, #3
 800bc82:	2b03      	cmp	r3, #3
 800bc84:	d81a      	bhi.n	800bcbc <UART_SetConfig+0xe8>
 800bc86:	a201      	add	r2, pc, #4	; (adr r2, 800bc8c <UART_SetConfig+0xb8>)
 800bc88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc8c:	0800bc9d 	.word	0x0800bc9d
 800bc90:	0800bcad 	.word	0x0800bcad
 800bc94:	0800bca5 	.word	0x0800bca5
 800bc98:	0800bcb5 	.word	0x0800bcb5
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bca2:	e0d6      	b.n	800be52 <UART_SetConfig+0x27e>
 800bca4:	2302      	movs	r3, #2
 800bca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcaa:	e0d2      	b.n	800be52 <UART_SetConfig+0x27e>
 800bcac:	2304      	movs	r3, #4
 800bcae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcb2:	e0ce      	b.n	800be52 <UART_SetConfig+0x27e>
 800bcb4:	2308      	movs	r3, #8
 800bcb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcba:	e0ca      	b.n	800be52 <UART_SetConfig+0x27e>
 800bcbc:	2310      	movs	r3, #16
 800bcbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcc2:	e0c6      	b.n	800be52 <UART_SetConfig+0x27e>
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a7d      	ldr	r2, [pc, #500]	; (800bec0 <UART_SetConfig+0x2ec>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d138      	bne.n	800bd40 <UART_SetConfig+0x16c>
 800bcce:	4b7b      	ldr	r3, [pc, #492]	; (800bebc <UART_SetConfig+0x2e8>)
 800bcd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcd4:	f003 030c 	and.w	r3, r3, #12
 800bcd8:	2b0c      	cmp	r3, #12
 800bcda:	d82d      	bhi.n	800bd38 <UART_SetConfig+0x164>
 800bcdc:	a201      	add	r2, pc, #4	; (adr r2, 800bce4 <UART_SetConfig+0x110>)
 800bcde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce2:	bf00      	nop
 800bce4:	0800bd19 	.word	0x0800bd19
 800bce8:	0800bd39 	.word	0x0800bd39
 800bcec:	0800bd39 	.word	0x0800bd39
 800bcf0:	0800bd39 	.word	0x0800bd39
 800bcf4:	0800bd29 	.word	0x0800bd29
 800bcf8:	0800bd39 	.word	0x0800bd39
 800bcfc:	0800bd39 	.word	0x0800bd39
 800bd00:	0800bd39 	.word	0x0800bd39
 800bd04:	0800bd21 	.word	0x0800bd21
 800bd08:	0800bd39 	.word	0x0800bd39
 800bd0c:	0800bd39 	.word	0x0800bd39
 800bd10:	0800bd39 	.word	0x0800bd39
 800bd14:	0800bd31 	.word	0x0800bd31
 800bd18:	2300      	movs	r3, #0
 800bd1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd1e:	e098      	b.n	800be52 <UART_SetConfig+0x27e>
 800bd20:	2302      	movs	r3, #2
 800bd22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd26:	e094      	b.n	800be52 <UART_SetConfig+0x27e>
 800bd28:	2304      	movs	r3, #4
 800bd2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd2e:	e090      	b.n	800be52 <UART_SetConfig+0x27e>
 800bd30:	2308      	movs	r3, #8
 800bd32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd36:	e08c      	b.n	800be52 <UART_SetConfig+0x27e>
 800bd38:	2310      	movs	r3, #16
 800bd3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd3e:	e088      	b.n	800be52 <UART_SetConfig+0x27e>
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4a5f      	ldr	r2, [pc, #380]	; (800bec4 <UART_SetConfig+0x2f0>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d125      	bne.n	800bd96 <UART_SetConfig+0x1c2>
 800bd4a:	4b5c      	ldr	r3, [pc, #368]	; (800bebc <UART_SetConfig+0x2e8>)
 800bd4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bd54:	2b30      	cmp	r3, #48	; 0x30
 800bd56:	d016      	beq.n	800bd86 <UART_SetConfig+0x1b2>
 800bd58:	2b30      	cmp	r3, #48	; 0x30
 800bd5a:	d818      	bhi.n	800bd8e <UART_SetConfig+0x1ba>
 800bd5c:	2b20      	cmp	r3, #32
 800bd5e:	d00a      	beq.n	800bd76 <UART_SetConfig+0x1a2>
 800bd60:	2b20      	cmp	r3, #32
 800bd62:	d814      	bhi.n	800bd8e <UART_SetConfig+0x1ba>
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d002      	beq.n	800bd6e <UART_SetConfig+0x19a>
 800bd68:	2b10      	cmp	r3, #16
 800bd6a:	d008      	beq.n	800bd7e <UART_SetConfig+0x1aa>
 800bd6c:	e00f      	b.n	800bd8e <UART_SetConfig+0x1ba>
 800bd6e:	2300      	movs	r3, #0
 800bd70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd74:	e06d      	b.n	800be52 <UART_SetConfig+0x27e>
 800bd76:	2302      	movs	r3, #2
 800bd78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd7c:	e069      	b.n	800be52 <UART_SetConfig+0x27e>
 800bd7e:	2304      	movs	r3, #4
 800bd80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd84:	e065      	b.n	800be52 <UART_SetConfig+0x27e>
 800bd86:	2308      	movs	r3, #8
 800bd88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd8c:	e061      	b.n	800be52 <UART_SetConfig+0x27e>
 800bd8e:	2310      	movs	r3, #16
 800bd90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd94:	e05d      	b.n	800be52 <UART_SetConfig+0x27e>
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a4b      	ldr	r2, [pc, #300]	; (800bec8 <UART_SetConfig+0x2f4>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d125      	bne.n	800bdec <UART_SetConfig+0x218>
 800bda0:	4b46      	ldr	r3, [pc, #280]	; (800bebc <UART_SetConfig+0x2e8>)
 800bda2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bda6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bdaa:	2bc0      	cmp	r3, #192	; 0xc0
 800bdac:	d016      	beq.n	800bddc <UART_SetConfig+0x208>
 800bdae:	2bc0      	cmp	r3, #192	; 0xc0
 800bdb0:	d818      	bhi.n	800bde4 <UART_SetConfig+0x210>
 800bdb2:	2b80      	cmp	r3, #128	; 0x80
 800bdb4:	d00a      	beq.n	800bdcc <UART_SetConfig+0x1f8>
 800bdb6:	2b80      	cmp	r3, #128	; 0x80
 800bdb8:	d814      	bhi.n	800bde4 <UART_SetConfig+0x210>
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d002      	beq.n	800bdc4 <UART_SetConfig+0x1f0>
 800bdbe:	2b40      	cmp	r3, #64	; 0x40
 800bdc0:	d008      	beq.n	800bdd4 <UART_SetConfig+0x200>
 800bdc2:	e00f      	b.n	800bde4 <UART_SetConfig+0x210>
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bdca:	e042      	b.n	800be52 <UART_SetConfig+0x27e>
 800bdcc:	2302      	movs	r3, #2
 800bdce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bdd2:	e03e      	b.n	800be52 <UART_SetConfig+0x27e>
 800bdd4:	2304      	movs	r3, #4
 800bdd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bdda:	e03a      	b.n	800be52 <UART_SetConfig+0x27e>
 800bddc:	2308      	movs	r3, #8
 800bdde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bde2:	e036      	b.n	800be52 <UART_SetConfig+0x27e>
 800bde4:	2310      	movs	r3, #16
 800bde6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bdea:	e032      	b.n	800be52 <UART_SetConfig+0x27e>
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a30      	ldr	r2, [pc, #192]	; (800beb4 <UART_SetConfig+0x2e0>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d12a      	bne.n	800be4c <UART_SetConfig+0x278>
 800bdf6:	4b31      	ldr	r3, [pc, #196]	; (800bebc <UART_SetConfig+0x2e8>)
 800bdf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800be00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be04:	d01a      	beq.n	800be3c <UART_SetConfig+0x268>
 800be06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be0a:	d81b      	bhi.n	800be44 <UART_SetConfig+0x270>
 800be0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be10:	d00c      	beq.n	800be2c <UART_SetConfig+0x258>
 800be12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be16:	d815      	bhi.n	800be44 <UART_SetConfig+0x270>
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d003      	beq.n	800be24 <UART_SetConfig+0x250>
 800be1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be20:	d008      	beq.n	800be34 <UART_SetConfig+0x260>
 800be22:	e00f      	b.n	800be44 <UART_SetConfig+0x270>
 800be24:	2300      	movs	r3, #0
 800be26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be2a:	e012      	b.n	800be52 <UART_SetConfig+0x27e>
 800be2c:	2302      	movs	r3, #2
 800be2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be32:	e00e      	b.n	800be52 <UART_SetConfig+0x27e>
 800be34:	2304      	movs	r3, #4
 800be36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be3a:	e00a      	b.n	800be52 <UART_SetConfig+0x27e>
 800be3c:	2308      	movs	r3, #8
 800be3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be42:	e006      	b.n	800be52 <UART_SetConfig+0x27e>
 800be44:	2310      	movs	r3, #16
 800be46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be4a:	e002      	b.n	800be52 <UART_SetConfig+0x27e>
 800be4c:	2310      	movs	r3, #16
 800be4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4a17      	ldr	r2, [pc, #92]	; (800beb4 <UART_SetConfig+0x2e0>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	f040 80a8 	bne.w	800bfae <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800be5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be62:	2b08      	cmp	r3, #8
 800be64:	d834      	bhi.n	800bed0 <UART_SetConfig+0x2fc>
 800be66:	a201      	add	r2, pc, #4	; (adr r2, 800be6c <UART_SetConfig+0x298>)
 800be68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be6c:	0800be91 	.word	0x0800be91
 800be70:	0800bed1 	.word	0x0800bed1
 800be74:	0800be99 	.word	0x0800be99
 800be78:	0800bed1 	.word	0x0800bed1
 800be7c:	0800be9f 	.word	0x0800be9f
 800be80:	0800bed1 	.word	0x0800bed1
 800be84:	0800bed1 	.word	0x0800bed1
 800be88:	0800bed1 	.word	0x0800bed1
 800be8c:	0800bea7 	.word	0x0800bea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be90:	f7fd fc46 	bl	8009720 <HAL_RCC_GetPCLK1Freq>
 800be94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be96:	e021      	b.n	800bedc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800be98:	4b0c      	ldr	r3, [pc, #48]	; (800becc <UART_SetConfig+0x2f8>)
 800be9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800be9c:	e01e      	b.n	800bedc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be9e:	f7fd fbd1 	bl	8009644 <HAL_RCC_GetSysClockFreq>
 800bea2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bea4:	e01a      	b.n	800bedc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800beaa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800beac:	e016      	b.n	800bedc <UART_SetConfig+0x308>
 800beae:	bf00      	nop
 800beb0:	cfff69f3 	.word	0xcfff69f3
 800beb4:	40008000 	.word	0x40008000
 800beb8:	40013800 	.word	0x40013800
 800bebc:	40021000 	.word	0x40021000
 800bec0:	40004400 	.word	0x40004400
 800bec4:	40004800 	.word	0x40004800
 800bec8:	40004c00 	.word	0x40004c00
 800becc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800bed0:	2300      	movs	r3, #0
 800bed2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bed4:	2301      	movs	r3, #1
 800bed6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800beda:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bede:	2b00      	cmp	r3, #0
 800bee0:	f000 812a 	beq.w	800c138 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee8:	4a9e      	ldr	r2, [pc, #632]	; (800c164 <UART_SetConfig+0x590>)
 800beea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800beee:	461a      	mov	r2, r3
 800bef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bef6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	685a      	ldr	r2, [r3, #4]
 800befc:	4613      	mov	r3, r2
 800befe:	005b      	lsls	r3, r3, #1
 800bf00:	4413      	add	r3, r2
 800bf02:	69ba      	ldr	r2, [r7, #24]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d305      	bcc.n	800bf14 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf0e:	69ba      	ldr	r2, [r7, #24]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d903      	bls.n	800bf1c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800bf14:	2301      	movs	r3, #1
 800bf16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bf1a:	e10d      	b.n	800c138 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1e:	2200      	movs	r2, #0
 800bf20:	60bb      	str	r3, [r7, #8]
 800bf22:	60fa      	str	r2, [r7, #12]
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf28:	4a8e      	ldr	r2, [pc, #568]	; (800c164 <UART_SetConfig+0x590>)
 800bf2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	2200      	movs	r2, #0
 800bf32:	603b      	str	r3, [r7, #0]
 800bf34:	607a      	str	r2, [r7, #4]
 800bf36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bf3e:	f7f4 fecb 	bl	8000cd8 <__aeabi_uldivmod>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	4610      	mov	r0, r2
 800bf48:	4619      	mov	r1, r3
 800bf4a:	f04f 0200 	mov.w	r2, #0
 800bf4e:	f04f 0300 	mov.w	r3, #0
 800bf52:	020b      	lsls	r3, r1, #8
 800bf54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bf58:	0202      	lsls	r2, r0, #8
 800bf5a:	6979      	ldr	r1, [r7, #20]
 800bf5c:	6849      	ldr	r1, [r1, #4]
 800bf5e:	0849      	lsrs	r1, r1, #1
 800bf60:	2000      	movs	r0, #0
 800bf62:	460c      	mov	r4, r1
 800bf64:	4605      	mov	r5, r0
 800bf66:	eb12 0804 	adds.w	r8, r2, r4
 800bf6a:	eb43 0905 	adc.w	r9, r3, r5
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	469a      	mov	sl, r3
 800bf76:	4693      	mov	fp, r2
 800bf78:	4652      	mov	r2, sl
 800bf7a:	465b      	mov	r3, fp
 800bf7c:	4640      	mov	r0, r8
 800bf7e:	4649      	mov	r1, r9
 800bf80:	f7f4 feaa 	bl	8000cd8 <__aeabi_uldivmod>
 800bf84:	4602      	mov	r2, r0
 800bf86:	460b      	mov	r3, r1
 800bf88:	4613      	mov	r3, r2
 800bf8a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bf8c:	6a3b      	ldr	r3, [r7, #32]
 800bf8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf92:	d308      	bcc.n	800bfa6 <UART_SetConfig+0x3d2>
 800bf94:	6a3b      	ldr	r3, [r7, #32]
 800bf96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf9a:	d204      	bcs.n	800bfa6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	6a3a      	ldr	r2, [r7, #32]
 800bfa2:	60da      	str	r2, [r3, #12]
 800bfa4:	e0c8      	b.n	800c138 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bfac:	e0c4      	b.n	800c138 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	69db      	ldr	r3, [r3, #28]
 800bfb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfb6:	d168      	bne.n	800c08a <UART_SetConfig+0x4b6>
  {
    switch (clocksource)
 800bfb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bfbc:	2b08      	cmp	r3, #8
 800bfbe:	d828      	bhi.n	800c012 <UART_SetConfig+0x43e>
 800bfc0:	a201      	add	r2, pc, #4	; (adr r2, 800bfc8 <UART_SetConfig+0x3f4>)
 800bfc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc6:	bf00      	nop
 800bfc8:	0800bfed 	.word	0x0800bfed
 800bfcc:	0800bff5 	.word	0x0800bff5
 800bfd0:	0800bffd 	.word	0x0800bffd
 800bfd4:	0800c013 	.word	0x0800c013
 800bfd8:	0800c003 	.word	0x0800c003
 800bfdc:	0800c013 	.word	0x0800c013
 800bfe0:	0800c013 	.word	0x0800c013
 800bfe4:	0800c013 	.word	0x0800c013
 800bfe8:	0800c00b 	.word	0x0800c00b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bfec:	f7fd fb98 	bl	8009720 <HAL_RCC_GetPCLK1Freq>
 800bff0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bff2:	e014      	b.n	800c01e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bff4:	f7fd fbaa 	bl	800974c <HAL_RCC_GetPCLK2Freq>
 800bff8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bffa:	e010      	b.n	800c01e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bffc:	4b5a      	ldr	r3, [pc, #360]	; (800c168 <UART_SetConfig+0x594>)
 800bffe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c000:	e00d      	b.n	800c01e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c002:	f7fd fb1f 	bl	8009644 <HAL_RCC_GetSysClockFreq>
 800c006:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c008:	e009      	b.n	800c01e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c00a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c00e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c010:	e005      	b.n	800c01e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800c012:	2300      	movs	r3, #0
 800c014:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c016:	2301      	movs	r3, #1
 800c018:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c01c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c020:	2b00      	cmp	r3, #0
 800c022:	f000 8089 	beq.w	800c138 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02a:	4a4e      	ldr	r2, [pc, #312]	; (800c164 <UART_SetConfig+0x590>)
 800c02c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c030:	461a      	mov	r2, r3
 800c032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c034:	fbb3 f3f2 	udiv	r3, r3, r2
 800c038:	005a      	lsls	r2, r3, #1
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	085b      	lsrs	r3, r3, #1
 800c040:	441a      	add	r2, r3
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	fbb2 f3f3 	udiv	r3, r2, r3
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c04e:	6a3b      	ldr	r3, [r7, #32]
 800c050:	2b0f      	cmp	r3, #15
 800c052:	d916      	bls.n	800c082 <UART_SetConfig+0x4ae>
 800c054:	6a3b      	ldr	r3, [r7, #32]
 800c056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c05a:	d212      	bcs.n	800c082 <UART_SetConfig+0x4ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c05c:	6a3b      	ldr	r3, [r7, #32]
 800c05e:	b29b      	uxth	r3, r3
 800c060:	f023 030f 	bic.w	r3, r3, #15
 800c064:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c066:	6a3b      	ldr	r3, [r7, #32]
 800c068:	085b      	lsrs	r3, r3, #1
 800c06a:	b29b      	uxth	r3, r3
 800c06c:	f003 0307 	and.w	r3, r3, #7
 800c070:	b29a      	uxth	r2, r3
 800c072:	8bfb      	ldrh	r3, [r7, #30]
 800c074:	4313      	orrs	r3, r2
 800c076:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	8bfa      	ldrh	r2, [r7, #30]
 800c07e:	60da      	str	r2, [r3, #12]
 800c080:	e05a      	b.n	800c138 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800c082:	2301      	movs	r3, #1
 800c084:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c088:	e056      	b.n	800c138 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c08a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c08e:	2b08      	cmp	r3, #8
 800c090:	d827      	bhi.n	800c0e2 <UART_SetConfig+0x50e>
 800c092:	a201      	add	r2, pc, #4	; (adr r2, 800c098 <UART_SetConfig+0x4c4>)
 800c094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c098:	0800c0bd 	.word	0x0800c0bd
 800c09c:	0800c0c5 	.word	0x0800c0c5
 800c0a0:	0800c0cd 	.word	0x0800c0cd
 800c0a4:	0800c0e3 	.word	0x0800c0e3
 800c0a8:	0800c0d3 	.word	0x0800c0d3
 800c0ac:	0800c0e3 	.word	0x0800c0e3
 800c0b0:	0800c0e3 	.word	0x0800c0e3
 800c0b4:	0800c0e3 	.word	0x0800c0e3
 800c0b8:	0800c0db 	.word	0x0800c0db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0bc:	f7fd fb30 	bl	8009720 <HAL_RCC_GetPCLK1Freq>
 800c0c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c0c2:	e014      	b.n	800c0ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c0c4:	f7fd fb42 	bl	800974c <HAL_RCC_GetPCLK2Freq>
 800c0c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c0ca:	e010      	b.n	800c0ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c0cc:	4b26      	ldr	r3, [pc, #152]	; (800c168 <UART_SetConfig+0x594>)
 800c0ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c0d0:	e00d      	b.n	800c0ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c0d2:	f7fd fab7 	bl	8009644 <HAL_RCC_GetSysClockFreq>
 800c0d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c0d8:	e009      	b.n	800c0ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c0e0:	e005      	b.n	800c0ee <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c0ec:	bf00      	nop
    }

    if (pclk != 0U)
 800c0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d021      	beq.n	800c138 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f8:	4a1a      	ldr	r2, [pc, #104]	; (800c164 <UART_SetConfig+0x590>)
 800c0fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0fe:	461a      	mov	r2, r3
 800c100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c102:	fbb3 f2f2 	udiv	r2, r3, r2
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	085b      	lsrs	r3, r3, #1
 800c10c:	441a      	add	r2, r3
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	fbb2 f3f3 	udiv	r3, r2, r3
 800c116:	b29b      	uxth	r3, r3
 800c118:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c11a:	6a3b      	ldr	r3, [r7, #32]
 800c11c:	2b0f      	cmp	r3, #15
 800c11e:	d908      	bls.n	800c132 <UART_SetConfig+0x55e>
 800c120:	6a3b      	ldr	r3, [r7, #32]
 800c122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c126:	d204      	bcs.n	800c132 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = usartdiv;
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	6a3a      	ldr	r2, [r7, #32]
 800c12e:	60da      	str	r2, [r3, #12]
 800c130:	e002      	b.n	800c138 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800c132:	2301      	movs	r3, #1
 800c134:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	2201      	movs	r2, #1
 800c13c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	2201      	movs	r2, #1
 800c144:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	2200      	movs	r2, #0
 800c14c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	2200      	movs	r2, #0
 800c152:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c154:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3730      	adds	r7, #48	; 0x30
 800c15c:	46bd      	mov	sp, r7
 800c15e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c162:	bf00      	nop
 800c164:	08012a74 	.word	0x08012a74
 800c168:	00f42400 	.word	0x00f42400

0800c16c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b083      	sub	sp, #12
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c178:	f003 0301 	and.w	r3, r3, #1
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d00a      	beq.n	800c196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	430a      	orrs	r2, r1
 800c194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c19a:	f003 0302 	and.w	r3, r3, #2
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d00a      	beq.n	800c1b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	430a      	orrs	r2, r1
 800c1b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1bc:	f003 0304 	and.w	r3, r3, #4
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d00a      	beq.n	800c1da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	430a      	orrs	r2, r1
 800c1d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1de:	f003 0308 	and.w	r3, r3, #8
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d00a      	beq.n	800c1fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	430a      	orrs	r2, r1
 800c1fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c200:	f003 0310 	and.w	r3, r3, #16
 800c204:	2b00      	cmp	r3, #0
 800c206:	d00a      	beq.n	800c21e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	430a      	orrs	r2, r1
 800c21c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c222:	f003 0320 	and.w	r3, r3, #32
 800c226:	2b00      	cmp	r3, #0
 800c228:	d00a      	beq.n	800c240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	689b      	ldr	r3, [r3, #8]
 800c230:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	430a      	orrs	r2, r1
 800c23e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d01a      	beq.n	800c282 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	430a      	orrs	r2, r1
 800c260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c26a:	d10a      	bne.n	800c282 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	430a      	orrs	r2, r1
 800c280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d00a      	beq.n	800c2a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	430a      	orrs	r2, r1
 800c2a2:	605a      	str	r2, [r3, #4]
  }
}
 800c2a4:	bf00      	nop
 800c2a6:	370c      	adds	r7, #12
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b086      	sub	sp, #24
 800c2b4:	af02      	add	r7, sp, #8
 800c2b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c2c0:	f7f9 fcfa 	bl	8005cb8 <HAL_GetTick>
 800c2c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f003 0308 	and.w	r3, r3, #8
 800c2d0:	2b08      	cmp	r3, #8
 800c2d2:	d10e      	bne.n	800c2f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c2d8:	9300      	str	r3, [sp, #0]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 f82f 	bl	800c346 <UART_WaitOnFlagUntilTimeout>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d001      	beq.n	800c2f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c2ee:	2303      	movs	r3, #3
 800c2f0:	e025      	b.n	800c33e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f003 0304 	and.w	r3, r3, #4
 800c2fc:	2b04      	cmp	r3, #4
 800c2fe:	d10e      	bne.n	800c31e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c300:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c304:	9300      	str	r3, [sp, #0]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2200      	movs	r2, #0
 800c30a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 f819 	bl	800c346 <UART_WaitOnFlagUntilTimeout>
 800c314:	4603      	mov	r3, r0
 800c316:	2b00      	cmp	r3, #0
 800c318:	d001      	beq.n	800c31e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c31a:	2303      	movs	r3, #3
 800c31c:	e00f      	b.n	800c33e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2220      	movs	r2, #32
 800c322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2220      	movs	r2, #32
 800c32a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2200      	movs	r2, #0
 800c332:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2200      	movs	r2, #0
 800c338:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c33c:	2300      	movs	r3, #0
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3710      	adds	r7, #16
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}

0800c346 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c346:	b580      	push	{r7, lr}
 800c348:	b084      	sub	sp, #16
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	60f8      	str	r0, [r7, #12]
 800c34e:	60b9      	str	r1, [r7, #8]
 800c350:	603b      	str	r3, [r7, #0]
 800c352:	4613      	mov	r3, r2
 800c354:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c356:	e062      	b.n	800c41e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c358:	69bb      	ldr	r3, [r7, #24]
 800c35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c35e:	d05e      	beq.n	800c41e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c360:	f7f9 fcaa 	bl	8005cb8 <HAL_GetTick>
 800c364:	4602      	mov	r2, r0
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	1ad3      	subs	r3, r2, r3
 800c36a:	69ba      	ldr	r2, [r7, #24]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d302      	bcc.n	800c376 <UART_WaitOnFlagUntilTimeout+0x30>
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d11d      	bne.n	800c3b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c384:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	689a      	ldr	r2, [r3, #8]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f022 0201 	bic.w	r2, r2, #1
 800c394:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2220      	movs	r2, #32
 800c39a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2220      	movs	r2, #32
 800c3a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c3ae:	2303      	movs	r3, #3
 800c3b0:	e045      	b.n	800c43e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f003 0304 	and.w	r3, r3, #4
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d02e      	beq.n	800c41e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	69db      	ldr	r3, [r3, #28]
 800c3c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c3ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3ce:	d126      	bne.n	800c41e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c3d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c3e8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	689a      	ldr	r2, [r3, #8]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f022 0201 	bic.w	r2, r2, #1
 800c3f8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2220      	movs	r2, #32
 800c3fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2220      	movs	r2, #32
 800c406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2220      	movs	r2, #32
 800c40e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2200      	movs	r2, #0
 800c416:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c41a:	2303      	movs	r3, #3
 800c41c:	e00f      	b.n	800c43e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	69da      	ldr	r2, [r3, #28]
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	4013      	ands	r3, r2
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	bf0c      	ite	eq
 800c42e:	2301      	moveq	r3, #1
 800c430:	2300      	movne	r3, #0
 800c432:	b2db      	uxtb	r3, r3
 800c434:	461a      	mov	r2, r3
 800c436:	79fb      	ldrb	r3, [r7, #7]
 800c438:	429a      	cmp	r2, r3
 800c43a:	d08d      	beq.n	800c358 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c43c:	2300      	movs	r3, #0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
	...

0800c448 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c448:	b480      	push	{r7}
 800c44a:	b085      	sub	sp, #20
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	4613      	mov	r3, r2
 800c454:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	68ba      	ldr	r2, [r7, #8]
 800c45a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	88fa      	ldrh	r2, [r7, #6]
 800c460:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	88fa      	ldrh	r2, [r7, #6]
 800c468:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2200      	movs	r2, #0
 800c470:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	689b      	ldr	r3, [r3, #8]
 800c476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c47a:	d10e      	bne.n	800c49a <UART_Start_Receive_IT+0x52>
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	691b      	ldr	r3, [r3, #16]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d105      	bne.n	800c490 <UART_Start_Receive_IT+0x48>
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c48a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c48e:	e02d      	b.n	800c4ec <UART_Start_Receive_IT+0xa4>
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	22ff      	movs	r2, #255	; 0xff
 800c494:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c498:	e028      	b.n	800c4ec <UART_Start_Receive_IT+0xa4>
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	689b      	ldr	r3, [r3, #8]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d10d      	bne.n	800c4be <UART_Start_Receive_IT+0x76>
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	691b      	ldr	r3, [r3, #16]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d104      	bne.n	800c4b4 <UART_Start_Receive_IT+0x6c>
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	22ff      	movs	r2, #255	; 0xff
 800c4ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c4b2:	e01b      	b.n	800c4ec <UART_Start_Receive_IT+0xa4>
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	227f      	movs	r2, #127	; 0x7f
 800c4b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c4bc:	e016      	b.n	800c4ec <UART_Start_Receive_IT+0xa4>
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	689b      	ldr	r3, [r3, #8]
 800c4c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4c6:	d10d      	bne.n	800c4e4 <UART_Start_Receive_IT+0x9c>
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	691b      	ldr	r3, [r3, #16]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d104      	bne.n	800c4da <UART_Start_Receive_IT+0x92>
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	227f      	movs	r2, #127	; 0x7f
 800c4d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c4d8:	e008      	b.n	800c4ec <UART_Start_Receive_IT+0xa4>
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	223f      	movs	r2, #63	; 0x3f
 800c4de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c4e2:	e003      	b.n	800c4ec <UART_Start_Receive_IT+0xa4>
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2222      	movs	r2, #34	; 0x22
 800c4f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	689a      	ldr	r2, [r3, #8]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f042 0201 	orr.w	r2, r2, #1
 800c50a:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c514:	d12a      	bne.n	800c56c <UART_Start_Receive_IT+0x124>
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c51c:	88fa      	ldrh	r2, [r7, #6]
 800c51e:	429a      	cmp	r2, r3
 800c520:	d324      	bcc.n	800c56c <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	689b      	ldr	r3, [r3, #8]
 800c526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c52a:	d107      	bne.n	800c53c <UART_Start_Receive_IT+0xf4>
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	691b      	ldr	r3, [r3, #16]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d103      	bne.n	800c53c <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	4a1f      	ldr	r2, [pc, #124]	; (800c5b4 <UART_Start_Receive_IT+0x16c>)
 800c538:	671a      	str	r2, [r3, #112]	; 0x70
 800c53a:	e002      	b.n	800c542 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	4a1e      	ldr	r2, [pc, #120]	; (800c5b8 <UART_Start_Receive_IT+0x170>)
 800c540:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2200      	movs	r2, #0
 800c546:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c558:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	689a      	ldr	r2, [r3, #8]
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c568:	609a      	str	r2, [r3, #8]
 800c56a:	e01b      	b.n	800c5a4 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	689b      	ldr	r3, [r3, #8]
 800c570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c574:	d107      	bne.n	800c586 <UART_Start_Receive_IT+0x13e>
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	691b      	ldr	r3, [r3, #16]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d103      	bne.n	800c586 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	4a0e      	ldr	r2, [pc, #56]	; (800c5bc <UART_Start_Receive_IT+0x174>)
 800c582:	671a      	str	r2, [r3, #112]	; 0x70
 800c584:	e002      	b.n	800c58c <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	4a0d      	ldr	r2, [pc, #52]	; (800c5c0 <UART_Start_Receive_IT+0x178>)
 800c58a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2200      	movs	r2, #0
 800c590:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800c5a2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3714      	adds	r7, #20
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop
 800c5b4:	0800ca3d 	.word	0x0800ca3d
 800c5b8:	0800c839 	.word	0x0800c839
 800c5bc:	0800c761 	.word	0x0800c761
 800c5c0:	0800c689 	.word	0x0800c689

0800c5c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c5da:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	689b      	ldr	r3, [r3, #8]
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	6812      	ldr	r2, [r2, #0]
 800c5e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5ea:	f023 0301 	bic.w	r3, r3, #1
 800c5ee:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d107      	bne.n	800c608 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	681a      	ldr	r2, [r3, #0]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f022 0210 	bic.w	r2, r2, #16
 800c606:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2220      	movs	r2, #32
 800c60c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2200      	movs	r2, #0
 800c61a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c61c:	bf00      	nop
 800c61e:	370c      	adds	r7, #12
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b084      	sub	sp, #16
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c634:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2200      	movs	r2, #0
 800c63a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2200      	movs	r2, #0
 800c642:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	f7ff faae 	bl	800bba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c64c:	bf00      	nop
 800c64e:	3710      	adds	r7, #16
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c66a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2220      	movs	r2, #32
 800c670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2200      	movs	r2, #0
 800c678:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f7ff fa8a 	bl	800bb94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c680:	bf00      	nop
 800c682:	3708      	adds	r7, #8
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c696:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c69e:	2b22      	cmp	r3, #34	; 0x22
 800c6a0:	d152      	bne.n	800c748 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c6aa:	89bb      	ldrh	r3, [r7, #12]
 800c6ac:	b2d9      	uxtb	r1, r3
 800c6ae:	89fb      	ldrh	r3, [r7, #14]
 800c6b0:	b2da      	uxtb	r2, r3
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6b6:	400a      	ands	r2, r1
 800c6b8:	b2d2      	uxtb	r2, r2
 800c6ba:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6c0:	1c5a      	adds	r2, r3, #1
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	3b01      	subs	r3, #1
 800c6d0:	b29a      	uxth	r2, r3
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d139      	bne.n	800c758 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c6f2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	689a      	ldr	r2, [r3, #8]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f022 0201 	bic.w	r2, r2, #1
 800c702:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2220      	movs	r2, #32
 800c708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2200      	movs	r2, #0
 800c710:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c716:	2b01      	cmp	r3, #1
 800c718:	d10f      	bne.n	800c73a <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	681a      	ldr	r2, [r3, #0]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f022 0210 	bic.w	r2, r2, #16
 800c728:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c730:	4619      	mov	r1, r3
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f7ff fa42 	bl	800bbbc <HAL_UARTEx_RxEventCallback>
 800c738:	e002      	b.n	800c740 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f7f9 fa00 	bl	8005b40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c746:	e007      	b.n	800c758 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	699a      	ldr	r2, [r3, #24]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f042 0208 	orr.w	r2, r2, #8
 800c756:	619a      	str	r2, [r3, #24]
}
 800c758:	bf00      	nop
 800c75a:	3710      	adds	r7, #16
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c76e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c776:	2b22      	cmp	r3, #34	; 0x22
 800c778:	d152      	bne.n	800c820 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c780:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c786:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c788:	89ba      	ldrh	r2, [r7, #12]
 800c78a:	89fb      	ldrh	r3, [r7, #14]
 800c78c:	4013      	ands	r3, r2
 800c78e:	b29a      	uxth	r2, r3
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c798:	1c9a      	adds	r2, r3, #2
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7a4:	b29b      	uxth	r3, r3
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	b29a      	uxth	r2, r3
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d139      	bne.n	800c830 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c7ca:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	689a      	ldr	r2, [r3, #8]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f022 0201 	bic.w	r2, r2, #1
 800c7da:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2220      	movs	r2, #32
 800c7e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	d10f      	bne.n	800c812 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f022 0210 	bic.w	r2, r2, #16
 800c800:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c808:	4619      	mov	r1, r3
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f7ff f9d6 	bl	800bbbc <HAL_UARTEx_RxEventCallback>
 800c810:	e002      	b.n	800c818 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f7f9 f994 	bl	8005b40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c81e:	e007      	b.n	800c830 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	699a      	ldr	r2, [r3, #24]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f042 0208 	orr.w	r2, r2, #8
 800c82e:	619a      	str	r2, [r3, #24]
}
 800c830:	bf00      	nop
 800c832:	3710      	adds	r7, #16
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b088      	sub	sp, #32
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c846:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	69db      	ldr	r3, [r3, #28]
 800c84e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	689b      	ldr	r3, [r3, #8]
 800c85e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c866:	2b22      	cmp	r3, #34	; 0x22
 800c868:	f040 80da 	bne.w	800ca20 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c872:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c874:	e0aa      	b.n	800c9cc <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c87c:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c87e:	89bb      	ldrh	r3, [r7, #12]
 800c880:	b2d9      	uxtb	r1, r3
 800c882:	8b7b      	ldrh	r3, [r7, #26]
 800c884:	b2da      	uxtb	r2, r3
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c88a:	400a      	ands	r2, r1
 800c88c:	b2d2      	uxtb	r2, r2
 800c88e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c894:	1c5a      	adds	r2, r3, #1
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8a0:	b29b      	uxth	r3, r3
 800c8a2:	3b01      	subs	r3, #1
 800c8a4:	b29a      	uxth	r2, r3
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	69db      	ldr	r3, [r3, #28]
 800c8b2:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c8b4:	69fb      	ldr	r3, [r7, #28]
 800c8b6:	f003 0307 	and.w	r3, r3, #7
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d04d      	beq.n	800c95a <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c8be:	69fb      	ldr	r3, [r7, #28]
 800c8c0:	f003 0301 	and.w	r3, r3, #1
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d010      	beq.n	800c8ea <UART_RxISR_8BIT_FIFOEN+0xb2>
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d00b      	beq.n	800c8ea <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8e0:	f043 0201 	orr.w	r2, r3, #1
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c8ea:	69fb      	ldr	r3, [r7, #28]
 800c8ec:	f003 0302 	and.w	r3, r3, #2
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d010      	beq.n	800c916 <UART_RxISR_8BIT_FIFOEN+0xde>
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	f003 0301 	and.w	r3, r3, #1
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d00b      	beq.n	800c916 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	2202      	movs	r2, #2
 800c904:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c90c:	f043 0204 	orr.w	r2, r3, #4
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	f003 0304 	and.w	r3, r3, #4
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d010      	beq.n	800c942 <UART_RxISR_8BIT_FIFOEN+0x10a>
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	f003 0301 	and.w	r3, r3, #1
 800c926:	2b00      	cmp	r3, #0
 800c928:	d00b      	beq.n	800c942 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	2204      	movs	r2, #4
 800c930:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c938:	f043 0202 	orr.w	r2, r3, #2
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d006      	beq.n	800c95a <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f7ff f92b 	bl	800bba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c960:	b29b      	uxth	r3, r3
 800c962:	2b00      	cmp	r3, #0
 800c964:	d132      	bne.n	800c9cc <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c974:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	689b      	ldr	r3, [r3, #8]
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	6812      	ldr	r2, [r2, #0]
 800c980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c984:	f023 0301 	bic.w	r3, r3, #1
 800c988:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2220      	movs	r2, #32
 800c98e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2200      	movs	r2, #0
 800c996:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d10f      	bne.n	800c9c0 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	681a      	ldr	r2, [r3, #0]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f022 0210 	bic.w	r2, r2, #16
 800c9ae:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f7ff f8ff 	bl	800bbbc <HAL_UARTEx_RxEventCallback>
 800c9be:	e002      	b.n	800c9c6 <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f7f9 f8bd 	bl	8005b40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c9cc:	89fb      	ldrh	r3, [r7, #14]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d005      	beq.n	800c9de <UART_RxISR_8BIT_FIFOEN+0x1a6>
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	f003 0320 	and.w	r3, r3, #32
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	f47f af4c 	bne.w	800c876 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9e4:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c9e6:	897b      	ldrh	r3, [r7, #10]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d021      	beq.n	800ca30 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c9f2:	897a      	ldrh	r2, [r7, #10]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d21b      	bcs.n	800ca30 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	689a      	ldr	r2, [r3, #8]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ca06:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	4a0b      	ldr	r2, [pc, #44]	; (800ca38 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800ca0c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f042 0220 	orr.w	r2, r2, #32
 800ca1c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca1e:	e007      	b.n	800ca30 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	699a      	ldr	r2, [r3, #24]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f042 0208 	orr.w	r2, r2, #8
 800ca2e:	619a      	str	r2, [r3, #24]
}
 800ca30:	bf00      	nop
 800ca32:	3720      	adds	r7, #32
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	0800c689 	.word	0x0800c689

0800ca3c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b08a      	sub	sp, #40	; 0x28
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ca4a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	69db      	ldr	r3, [r3, #28]
 800ca52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	689b      	ldr	r3, [r3, #8]
 800ca62:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca6a:	2b22      	cmp	r3, #34	; 0x22
 800ca6c:	f040 80da 	bne.w	800cc24 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ca76:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ca78:	e0aa      	b.n	800cbd0 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca80:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca86:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800ca88:	8aba      	ldrh	r2, [r7, #20]
 800ca8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca8c:	4013      	ands	r3, r2
 800ca8e:	b29a      	uxth	r2, r3
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca98:	1c9a      	adds	r2, r3, #2
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800caa4:	b29b      	uxth	r3, r3
 800caa6:	3b01      	subs	r3, #1
 800caa8:	b29a      	uxth	r2, r3
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	69db      	ldr	r3, [r3, #28]
 800cab6:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caba:	f003 0307 	and.w	r3, r3, #7
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d04d      	beq.n	800cb5e <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac4:	f003 0301 	and.w	r3, r3, #1
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d010      	beq.n	800caee <UART_RxISR_16BIT_FIFOEN+0xb2>
 800cacc:	69fb      	ldr	r3, [r7, #28]
 800cace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d00b      	beq.n	800caee <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2201      	movs	r2, #1
 800cadc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cae4:	f043 0201 	orr.w	r2, r3, #1
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800caee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf0:	f003 0302 	and.w	r3, r3, #2
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d010      	beq.n	800cb1a <UART_RxISR_16BIT_FIFOEN+0xde>
 800caf8:	69bb      	ldr	r3, [r7, #24]
 800cafa:	f003 0301 	and.w	r3, r3, #1
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d00b      	beq.n	800cb1a <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2202      	movs	r2, #2
 800cb08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb10:	f043 0204 	orr.w	r2, r3, #4
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1c:	f003 0304 	and.w	r3, r3, #4
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d010      	beq.n	800cb46 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800cb24:	69bb      	ldr	r3, [r7, #24]
 800cb26:	f003 0301 	and.w	r3, r3, #1
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d00b      	beq.n	800cb46 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	2204      	movs	r2, #4
 800cb34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb3c:	f043 0202 	orr.w	r2, r3, #2
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d006      	beq.n	800cb5e <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f7ff f829 	bl	800bba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb64:	b29b      	uxth	r3, r3
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d132      	bne.n	800cbd0 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	681a      	ldr	r2, [r3, #0]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cb78:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	689b      	ldr	r3, [r3, #8]
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	6812      	ldr	r2, [r2, #0]
 800cb84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb88:	f023 0301 	bic.w	r3, r3, #1
 800cb8c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2220      	movs	r2, #32
 800cb92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d10f      	bne.n	800cbc4 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f022 0210 	bic.w	r2, r2, #16
 800cbb2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cbba:	4619      	mov	r1, r3
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f7fe fffd 	bl	800bbbc <HAL_UARTEx_RxEventCallback>
 800cbc2:	e002      	b.n	800cbca <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f7f8 ffbb 	bl	8005b40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cbd0:	8afb      	ldrh	r3, [r7, #22]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d005      	beq.n	800cbe2 <UART_RxISR_16BIT_FIFOEN+0x1a6>
 800cbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd8:	f003 0320 	and.w	r3, r3, #32
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f47f af4c 	bne.w	800ca7a <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cbe8:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cbea:	89fb      	ldrh	r3, [r7, #14]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d021      	beq.n	800cc34 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cbf6:	89fa      	ldrh	r2, [r7, #14]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d21b      	bcs.n	800cc34 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	689a      	ldr	r2, [r3, #8]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cc0a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	4a0b      	ldr	r2, [pc, #44]	; (800cc3c <UART_RxISR_16BIT_FIFOEN+0x200>)
 800cc10:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	681a      	ldr	r2, [r3, #0]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f042 0220 	orr.w	r2, r2, #32
 800cc20:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cc22:	e007      	b.n	800cc34 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	699a      	ldr	r2, [r3, #24]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f042 0208 	orr.w	r2, r2, #8
 800cc32:	619a      	str	r2, [r3, #24]
}
 800cc34:	bf00      	nop
 800cc36:	3728      	adds	r7, #40	; 0x28
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}
 800cc3c:	0800c761 	.word	0x0800c761

0800cc40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b083      	sub	sp, #12
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cc48:	bf00      	nop
 800cc4a:	370c      	adds	r7, #12
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc52:	4770      	bx	lr

0800cc54 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b083      	sub	sp, #12
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cc5c:	bf00      	nop
 800cc5e:	370c      	adds	r7, #12
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr

0800cc68 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b083      	sub	sp, #12
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cc70:	bf00      	nop
 800cc72:	370c      	adds	r7, #12
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr

0800cc7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b085      	sub	sp, #20
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	d101      	bne.n	800cc92 <HAL_UARTEx_DisableFifoMode+0x16>
 800cc8e:	2302      	movs	r3, #2
 800cc90:	e027      	b.n	800cce2 <HAL_UARTEx_DisableFifoMode+0x66>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2201      	movs	r2, #1
 800cc96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2224      	movs	r2, #36	; 0x24
 800cc9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	681a      	ldr	r2, [r3, #0]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f022 0201 	bic.w	r2, r2, #1
 800ccb8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ccc0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	68fa      	ldr	r2, [r7, #12]
 800ccce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2220      	movs	r2, #32
 800ccd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cce0:	2300      	movs	r3, #0
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3714      	adds	r7, #20
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr

0800ccee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ccee:	b580      	push	{r7, lr}
 800ccf0:	b084      	sub	sp, #16
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	6078      	str	r0, [r7, #4]
 800ccf6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	d101      	bne.n	800cd06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cd02:	2302      	movs	r3, #2
 800cd04:	e02d      	b.n	800cd62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2201      	movs	r2, #1
 800cd0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2224      	movs	r2, #36	; 0x24
 800cd12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f022 0201 	bic.w	r2, r2, #1
 800cd2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	689b      	ldr	r3, [r3, #8]
 800cd34:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	683a      	ldr	r2, [r7, #0]
 800cd3e:	430a      	orrs	r2, r1
 800cd40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 f850 	bl	800cde8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	68fa      	ldr	r2, [r7, #12]
 800cd4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2220      	movs	r2, #32
 800cd54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cd60:	2300      	movs	r3, #0
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3710      	adds	r7, #16
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}

0800cd6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b084      	sub	sp, #16
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
 800cd72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	d101      	bne.n	800cd82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cd7e:	2302      	movs	r3, #2
 800cd80:	e02d      	b.n	800cdde <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2201      	movs	r2, #1
 800cd86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2224      	movs	r2, #36	; 0x24
 800cd8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	681a      	ldr	r2, [r3, #0]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f022 0201 	bic.w	r2, r2, #1
 800cda8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	689b      	ldr	r3, [r3, #8]
 800cdb0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	683a      	ldr	r2, [r7, #0]
 800cdba:	430a      	orrs	r2, r1
 800cdbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 f812 	bl	800cde8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2220      	movs	r2, #32
 800cdd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cddc:	2300      	movs	r3, #0
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
	...

0800cde8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b085      	sub	sp, #20
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d108      	bne.n	800ce0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2201      	movs	r2, #1
 800ce04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ce08:	e031      	b.n	800ce6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ce0a:	2308      	movs	r3, #8
 800ce0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ce0e:	2308      	movs	r3, #8
 800ce10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	689b      	ldr	r3, [r3, #8]
 800ce18:	0e5b      	lsrs	r3, r3, #25
 800ce1a:	b2db      	uxtb	r3, r3
 800ce1c:	f003 0307 	and.w	r3, r3, #7
 800ce20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	689b      	ldr	r3, [r3, #8]
 800ce28:	0f5b      	lsrs	r3, r3, #29
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	f003 0307 	and.w	r3, r3, #7
 800ce30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ce32:	7bbb      	ldrb	r3, [r7, #14]
 800ce34:	7b3a      	ldrb	r2, [r7, #12]
 800ce36:	4911      	ldr	r1, [pc, #68]	; (800ce7c <UARTEx_SetNbDataToProcess+0x94>)
 800ce38:	5c8a      	ldrb	r2, [r1, r2]
 800ce3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ce3e:	7b3a      	ldrb	r2, [r7, #12]
 800ce40:	490f      	ldr	r1, [pc, #60]	; (800ce80 <UARTEx_SetNbDataToProcess+0x98>)
 800ce42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ce44:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce48:	b29a      	uxth	r2, r3
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ce50:	7bfb      	ldrb	r3, [r7, #15]
 800ce52:	7b7a      	ldrb	r2, [r7, #13]
 800ce54:	4909      	ldr	r1, [pc, #36]	; (800ce7c <UARTEx_SetNbDataToProcess+0x94>)
 800ce56:	5c8a      	ldrb	r2, [r1, r2]
 800ce58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ce5c:	7b7a      	ldrb	r2, [r7, #13]
 800ce5e:	4908      	ldr	r1, [pc, #32]	; (800ce80 <UARTEx_SetNbDataToProcess+0x98>)
 800ce60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ce62:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce66:	b29a      	uxth	r2, r3
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ce6e:	bf00      	nop
 800ce70:	3714      	adds	r7, #20
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr
 800ce7a:	bf00      	nop
 800ce7c:	08012a8c 	.word	0x08012a8c
 800ce80:	08012a94 	.word	0x08012a94

0800ce84 <atof>:
 800ce84:	2100      	movs	r1, #0
 800ce86:	f001 bb79 	b.w	800e57c <strtod>

0800ce8a <atoi>:
 800ce8a:	220a      	movs	r2, #10
 800ce8c:	2100      	movs	r1, #0
 800ce8e:	f001 bc03 	b.w	800e698 <strtol>
	...

0800ce94 <__errno>:
 800ce94:	4b01      	ldr	r3, [pc, #4]	; (800ce9c <__errno+0x8>)
 800ce96:	6818      	ldr	r0, [r3, #0]
 800ce98:	4770      	bx	lr
 800ce9a:	bf00      	nop
 800ce9c:	2000002c 	.word	0x2000002c

0800cea0 <__libc_init_array>:
 800cea0:	b570      	push	{r4, r5, r6, lr}
 800cea2:	4d0d      	ldr	r5, [pc, #52]	; (800ced8 <__libc_init_array+0x38>)
 800cea4:	4c0d      	ldr	r4, [pc, #52]	; (800cedc <__libc_init_array+0x3c>)
 800cea6:	1b64      	subs	r4, r4, r5
 800cea8:	10a4      	asrs	r4, r4, #2
 800ceaa:	2600      	movs	r6, #0
 800ceac:	42a6      	cmp	r6, r4
 800ceae:	d109      	bne.n	800cec4 <__libc_init_array+0x24>
 800ceb0:	4d0b      	ldr	r5, [pc, #44]	; (800cee0 <__libc_init_array+0x40>)
 800ceb2:	4c0c      	ldr	r4, [pc, #48]	; (800cee4 <__libc_init_array+0x44>)
 800ceb4:	f004 fde6 	bl	8011a84 <_init>
 800ceb8:	1b64      	subs	r4, r4, r5
 800ceba:	10a4      	asrs	r4, r4, #2
 800cebc:	2600      	movs	r6, #0
 800cebe:	42a6      	cmp	r6, r4
 800cec0:	d105      	bne.n	800cece <__libc_init_array+0x2e>
 800cec2:	bd70      	pop	{r4, r5, r6, pc}
 800cec4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cec8:	4798      	blx	r3
 800ceca:	3601      	adds	r6, #1
 800cecc:	e7ee      	b.n	800ceac <__libc_init_array+0xc>
 800cece:	f855 3b04 	ldr.w	r3, [r5], #4
 800ced2:	4798      	blx	r3
 800ced4:	3601      	adds	r6, #1
 800ced6:	e7f2      	b.n	800cebe <__libc_init_array+0x1e>
 800ced8:	08012f88 	.word	0x08012f88
 800cedc:	08012f88 	.word	0x08012f88
 800cee0:	08012f88 	.word	0x08012f88
 800cee4:	08012f8c 	.word	0x08012f8c

0800cee8 <memcpy>:
 800cee8:	440a      	add	r2, r1
 800ceea:	4291      	cmp	r1, r2
 800ceec:	f100 33ff 	add.w	r3, r0, #4294967295
 800cef0:	d100      	bne.n	800cef4 <memcpy+0xc>
 800cef2:	4770      	bx	lr
 800cef4:	b510      	push	{r4, lr}
 800cef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cefa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cefe:	4291      	cmp	r1, r2
 800cf00:	d1f9      	bne.n	800cef6 <memcpy+0xe>
 800cf02:	bd10      	pop	{r4, pc}

0800cf04 <memmove>:
 800cf04:	4288      	cmp	r0, r1
 800cf06:	b510      	push	{r4, lr}
 800cf08:	eb01 0402 	add.w	r4, r1, r2
 800cf0c:	d902      	bls.n	800cf14 <memmove+0x10>
 800cf0e:	4284      	cmp	r4, r0
 800cf10:	4623      	mov	r3, r4
 800cf12:	d807      	bhi.n	800cf24 <memmove+0x20>
 800cf14:	1e43      	subs	r3, r0, #1
 800cf16:	42a1      	cmp	r1, r4
 800cf18:	d008      	beq.n	800cf2c <memmove+0x28>
 800cf1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf22:	e7f8      	b.n	800cf16 <memmove+0x12>
 800cf24:	4402      	add	r2, r0
 800cf26:	4601      	mov	r1, r0
 800cf28:	428a      	cmp	r2, r1
 800cf2a:	d100      	bne.n	800cf2e <memmove+0x2a>
 800cf2c:	bd10      	pop	{r4, pc}
 800cf2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf36:	e7f7      	b.n	800cf28 <memmove+0x24>

0800cf38 <memset>:
 800cf38:	4402      	add	r2, r0
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d100      	bne.n	800cf42 <memset+0xa>
 800cf40:	4770      	bx	lr
 800cf42:	f803 1b01 	strb.w	r1, [r3], #1
 800cf46:	e7f9      	b.n	800cf3c <memset+0x4>

0800cf48 <__cvt>:
 800cf48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf4c:	ec55 4b10 	vmov	r4, r5, d0
 800cf50:	2d00      	cmp	r5, #0
 800cf52:	460e      	mov	r6, r1
 800cf54:	4619      	mov	r1, r3
 800cf56:	462b      	mov	r3, r5
 800cf58:	bfbb      	ittet	lt
 800cf5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cf5e:	461d      	movlt	r5, r3
 800cf60:	2300      	movge	r3, #0
 800cf62:	232d      	movlt	r3, #45	; 0x2d
 800cf64:	700b      	strb	r3, [r1, #0]
 800cf66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cf6c:	4691      	mov	r9, r2
 800cf6e:	f023 0820 	bic.w	r8, r3, #32
 800cf72:	bfbc      	itt	lt
 800cf74:	4622      	movlt	r2, r4
 800cf76:	4614      	movlt	r4, r2
 800cf78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cf7c:	d005      	beq.n	800cf8a <__cvt+0x42>
 800cf7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cf82:	d100      	bne.n	800cf86 <__cvt+0x3e>
 800cf84:	3601      	adds	r6, #1
 800cf86:	2102      	movs	r1, #2
 800cf88:	e000      	b.n	800cf8c <__cvt+0x44>
 800cf8a:	2103      	movs	r1, #3
 800cf8c:	ab03      	add	r3, sp, #12
 800cf8e:	9301      	str	r3, [sp, #4]
 800cf90:	ab02      	add	r3, sp, #8
 800cf92:	9300      	str	r3, [sp, #0]
 800cf94:	ec45 4b10 	vmov	d0, r4, r5
 800cf98:	4653      	mov	r3, sl
 800cf9a:	4632      	mov	r2, r6
 800cf9c:	f001 fcd4 	bl	800e948 <_dtoa_r>
 800cfa0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cfa4:	4607      	mov	r7, r0
 800cfa6:	d102      	bne.n	800cfae <__cvt+0x66>
 800cfa8:	f019 0f01 	tst.w	r9, #1
 800cfac:	d022      	beq.n	800cff4 <__cvt+0xac>
 800cfae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cfb2:	eb07 0906 	add.w	r9, r7, r6
 800cfb6:	d110      	bne.n	800cfda <__cvt+0x92>
 800cfb8:	783b      	ldrb	r3, [r7, #0]
 800cfba:	2b30      	cmp	r3, #48	; 0x30
 800cfbc:	d10a      	bne.n	800cfd4 <__cvt+0x8c>
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	4629      	mov	r1, r5
 800cfc6:	f7f3 fda7 	bl	8000b18 <__aeabi_dcmpeq>
 800cfca:	b918      	cbnz	r0, 800cfd4 <__cvt+0x8c>
 800cfcc:	f1c6 0601 	rsb	r6, r6, #1
 800cfd0:	f8ca 6000 	str.w	r6, [sl]
 800cfd4:	f8da 3000 	ldr.w	r3, [sl]
 800cfd8:	4499      	add	r9, r3
 800cfda:	2200      	movs	r2, #0
 800cfdc:	2300      	movs	r3, #0
 800cfde:	4620      	mov	r0, r4
 800cfe0:	4629      	mov	r1, r5
 800cfe2:	f7f3 fd99 	bl	8000b18 <__aeabi_dcmpeq>
 800cfe6:	b108      	cbz	r0, 800cfec <__cvt+0xa4>
 800cfe8:	f8cd 900c 	str.w	r9, [sp, #12]
 800cfec:	2230      	movs	r2, #48	; 0x30
 800cfee:	9b03      	ldr	r3, [sp, #12]
 800cff0:	454b      	cmp	r3, r9
 800cff2:	d307      	bcc.n	800d004 <__cvt+0xbc>
 800cff4:	9b03      	ldr	r3, [sp, #12]
 800cff6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cff8:	1bdb      	subs	r3, r3, r7
 800cffa:	4638      	mov	r0, r7
 800cffc:	6013      	str	r3, [r2, #0]
 800cffe:	b004      	add	sp, #16
 800d000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d004:	1c59      	adds	r1, r3, #1
 800d006:	9103      	str	r1, [sp, #12]
 800d008:	701a      	strb	r2, [r3, #0]
 800d00a:	e7f0      	b.n	800cfee <__cvt+0xa6>

0800d00c <__exponent>:
 800d00c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d00e:	4603      	mov	r3, r0
 800d010:	2900      	cmp	r1, #0
 800d012:	bfb8      	it	lt
 800d014:	4249      	neglt	r1, r1
 800d016:	f803 2b02 	strb.w	r2, [r3], #2
 800d01a:	bfb4      	ite	lt
 800d01c:	222d      	movlt	r2, #45	; 0x2d
 800d01e:	222b      	movge	r2, #43	; 0x2b
 800d020:	2909      	cmp	r1, #9
 800d022:	7042      	strb	r2, [r0, #1]
 800d024:	dd2a      	ble.n	800d07c <__exponent+0x70>
 800d026:	f10d 0407 	add.w	r4, sp, #7
 800d02a:	46a4      	mov	ip, r4
 800d02c:	270a      	movs	r7, #10
 800d02e:	46a6      	mov	lr, r4
 800d030:	460a      	mov	r2, r1
 800d032:	fb91 f6f7 	sdiv	r6, r1, r7
 800d036:	fb07 1516 	mls	r5, r7, r6, r1
 800d03a:	3530      	adds	r5, #48	; 0x30
 800d03c:	2a63      	cmp	r2, #99	; 0x63
 800d03e:	f104 34ff 	add.w	r4, r4, #4294967295
 800d042:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d046:	4631      	mov	r1, r6
 800d048:	dcf1      	bgt.n	800d02e <__exponent+0x22>
 800d04a:	3130      	adds	r1, #48	; 0x30
 800d04c:	f1ae 0502 	sub.w	r5, lr, #2
 800d050:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d054:	1c44      	adds	r4, r0, #1
 800d056:	4629      	mov	r1, r5
 800d058:	4561      	cmp	r1, ip
 800d05a:	d30a      	bcc.n	800d072 <__exponent+0x66>
 800d05c:	f10d 0209 	add.w	r2, sp, #9
 800d060:	eba2 020e 	sub.w	r2, r2, lr
 800d064:	4565      	cmp	r5, ip
 800d066:	bf88      	it	hi
 800d068:	2200      	movhi	r2, #0
 800d06a:	4413      	add	r3, r2
 800d06c:	1a18      	subs	r0, r3, r0
 800d06e:	b003      	add	sp, #12
 800d070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d072:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d076:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d07a:	e7ed      	b.n	800d058 <__exponent+0x4c>
 800d07c:	2330      	movs	r3, #48	; 0x30
 800d07e:	3130      	adds	r1, #48	; 0x30
 800d080:	7083      	strb	r3, [r0, #2]
 800d082:	70c1      	strb	r1, [r0, #3]
 800d084:	1d03      	adds	r3, r0, #4
 800d086:	e7f1      	b.n	800d06c <__exponent+0x60>

0800d088 <_printf_float>:
 800d088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d08c:	ed2d 8b02 	vpush	{d8}
 800d090:	b08d      	sub	sp, #52	; 0x34
 800d092:	460c      	mov	r4, r1
 800d094:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d098:	4616      	mov	r6, r2
 800d09a:	461f      	mov	r7, r3
 800d09c:	4605      	mov	r5, r0
 800d09e:	f002 ff67 	bl	800ff70 <_localeconv_r>
 800d0a2:	f8d0 a000 	ldr.w	sl, [r0]
 800d0a6:	4650      	mov	r0, sl
 800d0a8:	f7f3 f8ba 	bl	8000220 <strlen>
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	930a      	str	r3, [sp, #40]	; 0x28
 800d0b0:	6823      	ldr	r3, [r4, #0]
 800d0b2:	9305      	str	r3, [sp, #20]
 800d0b4:	f8d8 3000 	ldr.w	r3, [r8]
 800d0b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d0bc:	3307      	adds	r3, #7
 800d0be:	f023 0307 	bic.w	r3, r3, #7
 800d0c2:	f103 0208 	add.w	r2, r3, #8
 800d0c6:	f8c8 2000 	str.w	r2, [r8]
 800d0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d0d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d0d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d0da:	9307      	str	r3, [sp, #28]
 800d0dc:	f8cd 8018 	str.w	r8, [sp, #24]
 800d0e0:	ee08 0a10 	vmov	s16, r0
 800d0e4:	4b9f      	ldr	r3, [pc, #636]	; (800d364 <_printf_float+0x2dc>)
 800d0e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d0ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ee:	f7f3 fd45 	bl	8000b7c <__aeabi_dcmpun>
 800d0f2:	bb88      	cbnz	r0, 800d158 <_printf_float+0xd0>
 800d0f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d0f8:	4b9a      	ldr	r3, [pc, #616]	; (800d364 <_printf_float+0x2dc>)
 800d0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d0fe:	f7f3 fd1f 	bl	8000b40 <__aeabi_dcmple>
 800d102:	bb48      	cbnz	r0, 800d158 <_printf_float+0xd0>
 800d104:	2200      	movs	r2, #0
 800d106:	2300      	movs	r3, #0
 800d108:	4640      	mov	r0, r8
 800d10a:	4649      	mov	r1, r9
 800d10c:	f7f3 fd0e 	bl	8000b2c <__aeabi_dcmplt>
 800d110:	b110      	cbz	r0, 800d118 <_printf_float+0x90>
 800d112:	232d      	movs	r3, #45	; 0x2d
 800d114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d118:	4b93      	ldr	r3, [pc, #588]	; (800d368 <_printf_float+0x2e0>)
 800d11a:	4894      	ldr	r0, [pc, #592]	; (800d36c <_printf_float+0x2e4>)
 800d11c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d120:	bf94      	ite	ls
 800d122:	4698      	movls	r8, r3
 800d124:	4680      	movhi	r8, r0
 800d126:	2303      	movs	r3, #3
 800d128:	6123      	str	r3, [r4, #16]
 800d12a:	9b05      	ldr	r3, [sp, #20]
 800d12c:	f023 0204 	bic.w	r2, r3, #4
 800d130:	6022      	str	r2, [r4, #0]
 800d132:	f04f 0900 	mov.w	r9, #0
 800d136:	9700      	str	r7, [sp, #0]
 800d138:	4633      	mov	r3, r6
 800d13a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d13c:	4621      	mov	r1, r4
 800d13e:	4628      	mov	r0, r5
 800d140:	f000 f9d8 	bl	800d4f4 <_printf_common>
 800d144:	3001      	adds	r0, #1
 800d146:	f040 8090 	bne.w	800d26a <_printf_float+0x1e2>
 800d14a:	f04f 30ff 	mov.w	r0, #4294967295
 800d14e:	b00d      	add	sp, #52	; 0x34
 800d150:	ecbd 8b02 	vpop	{d8}
 800d154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d158:	4642      	mov	r2, r8
 800d15a:	464b      	mov	r3, r9
 800d15c:	4640      	mov	r0, r8
 800d15e:	4649      	mov	r1, r9
 800d160:	f7f3 fd0c 	bl	8000b7c <__aeabi_dcmpun>
 800d164:	b140      	cbz	r0, 800d178 <_printf_float+0xf0>
 800d166:	464b      	mov	r3, r9
 800d168:	2b00      	cmp	r3, #0
 800d16a:	bfbc      	itt	lt
 800d16c:	232d      	movlt	r3, #45	; 0x2d
 800d16e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d172:	487f      	ldr	r0, [pc, #508]	; (800d370 <_printf_float+0x2e8>)
 800d174:	4b7f      	ldr	r3, [pc, #508]	; (800d374 <_printf_float+0x2ec>)
 800d176:	e7d1      	b.n	800d11c <_printf_float+0x94>
 800d178:	6863      	ldr	r3, [r4, #4]
 800d17a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d17e:	9206      	str	r2, [sp, #24]
 800d180:	1c5a      	adds	r2, r3, #1
 800d182:	d13f      	bne.n	800d204 <_printf_float+0x17c>
 800d184:	2306      	movs	r3, #6
 800d186:	6063      	str	r3, [r4, #4]
 800d188:	9b05      	ldr	r3, [sp, #20]
 800d18a:	6861      	ldr	r1, [r4, #4]
 800d18c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d190:	2300      	movs	r3, #0
 800d192:	9303      	str	r3, [sp, #12]
 800d194:	ab0a      	add	r3, sp, #40	; 0x28
 800d196:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d19a:	ab09      	add	r3, sp, #36	; 0x24
 800d19c:	ec49 8b10 	vmov	d0, r8, r9
 800d1a0:	9300      	str	r3, [sp, #0]
 800d1a2:	6022      	str	r2, [r4, #0]
 800d1a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d1a8:	4628      	mov	r0, r5
 800d1aa:	f7ff fecd 	bl	800cf48 <__cvt>
 800d1ae:	9b06      	ldr	r3, [sp, #24]
 800d1b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d1b2:	2b47      	cmp	r3, #71	; 0x47
 800d1b4:	4680      	mov	r8, r0
 800d1b6:	d108      	bne.n	800d1ca <_printf_float+0x142>
 800d1b8:	1cc8      	adds	r0, r1, #3
 800d1ba:	db02      	blt.n	800d1c2 <_printf_float+0x13a>
 800d1bc:	6863      	ldr	r3, [r4, #4]
 800d1be:	4299      	cmp	r1, r3
 800d1c0:	dd41      	ble.n	800d246 <_printf_float+0x1be>
 800d1c2:	f1ab 0b02 	sub.w	fp, fp, #2
 800d1c6:	fa5f fb8b 	uxtb.w	fp, fp
 800d1ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d1ce:	d820      	bhi.n	800d212 <_printf_float+0x18a>
 800d1d0:	3901      	subs	r1, #1
 800d1d2:	465a      	mov	r2, fp
 800d1d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d1d8:	9109      	str	r1, [sp, #36]	; 0x24
 800d1da:	f7ff ff17 	bl	800d00c <__exponent>
 800d1de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1e0:	1813      	adds	r3, r2, r0
 800d1e2:	2a01      	cmp	r2, #1
 800d1e4:	4681      	mov	r9, r0
 800d1e6:	6123      	str	r3, [r4, #16]
 800d1e8:	dc02      	bgt.n	800d1f0 <_printf_float+0x168>
 800d1ea:	6822      	ldr	r2, [r4, #0]
 800d1ec:	07d2      	lsls	r2, r2, #31
 800d1ee:	d501      	bpl.n	800d1f4 <_printf_float+0x16c>
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	6123      	str	r3, [r4, #16]
 800d1f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d09c      	beq.n	800d136 <_printf_float+0xae>
 800d1fc:	232d      	movs	r3, #45	; 0x2d
 800d1fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d202:	e798      	b.n	800d136 <_printf_float+0xae>
 800d204:	9a06      	ldr	r2, [sp, #24]
 800d206:	2a47      	cmp	r2, #71	; 0x47
 800d208:	d1be      	bne.n	800d188 <_printf_float+0x100>
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d1bc      	bne.n	800d188 <_printf_float+0x100>
 800d20e:	2301      	movs	r3, #1
 800d210:	e7b9      	b.n	800d186 <_printf_float+0xfe>
 800d212:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d216:	d118      	bne.n	800d24a <_printf_float+0x1c2>
 800d218:	2900      	cmp	r1, #0
 800d21a:	6863      	ldr	r3, [r4, #4]
 800d21c:	dd0b      	ble.n	800d236 <_printf_float+0x1ae>
 800d21e:	6121      	str	r1, [r4, #16]
 800d220:	b913      	cbnz	r3, 800d228 <_printf_float+0x1a0>
 800d222:	6822      	ldr	r2, [r4, #0]
 800d224:	07d0      	lsls	r0, r2, #31
 800d226:	d502      	bpl.n	800d22e <_printf_float+0x1a6>
 800d228:	3301      	adds	r3, #1
 800d22a:	440b      	add	r3, r1
 800d22c:	6123      	str	r3, [r4, #16]
 800d22e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d230:	f04f 0900 	mov.w	r9, #0
 800d234:	e7de      	b.n	800d1f4 <_printf_float+0x16c>
 800d236:	b913      	cbnz	r3, 800d23e <_printf_float+0x1b6>
 800d238:	6822      	ldr	r2, [r4, #0]
 800d23a:	07d2      	lsls	r2, r2, #31
 800d23c:	d501      	bpl.n	800d242 <_printf_float+0x1ba>
 800d23e:	3302      	adds	r3, #2
 800d240:	e7f4      	b.n	800d22c <_printf_float+0x1a4>
 800d242:	2301      	movs	r3, #1
 800d244:	e7f2      	b.n	800d22c <_printf_float+0x1a4>
 800d246:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d24a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d24c:	4299      	cmp	r1, r3
 800d24e:	db05      	blt.n	800d25c <_printf_float+0x1d4>
 800d250:	6823      	ldr	r3, [r4, #0]
 800d252:	6121      	str	r1, [r4, #16]
 800d254:	07d8      	lsls	r0, r3, #31
 800d256:	d5ea      	bpl.n	800d22e <_printf_float+0x1a6>
 800d258:	1c4b      	adds	r3, r1, #1
 800d25a:	e7e7      	b.n	800d22c <_printf_float+0x1a4>
 800d25c:	2900      	cmp	r1, #0
 800d25e:	bfd4      	ite	le
 800d260:	f1c1 0202 	rsble	r2, r1, #2
 800d264:	2201      	movgt	r2, #1
 800d266:	4413      	add	r3, r2
 800d268:	e7e0      	b.n	800d22c <_printf_float+0x1a4>
 800d26a:	6823      	ldr	r3, [r4, #0]
 800d26c:	055a      	lsls	r2, r3, #21
 800d26e:	d407      	bmi.n	800d280 <_printf_float+0x1f8>
 800d270:	6923      	ldr	r3, [r4, #16]
 800d272:	4642      	mov	r2, r8
 800d274:	4631      	mov	r1, r6
 800d276:	4628      	mov	r0, r5
 800d278:	47b8      	blx	r7
 800d27a:	3001      	adds	r0, #1
 800d27c:	d12c      	bne.n	800d2d8 <_printf_float+0x250>
 800d27e:	e764      	b.n	800d14a <_printf_float+0xc2>
 800d280:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d284:	f240 80e0 	bls.w	800d448 <_printf_float+0x3c0>
 800d288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d28c:	2200      	movs	r2, #0
 800d28e:	2300      	movs	r3, #0
 800d290:	f7f3 fc42 	bl	8000b18 <__aeabi_dcmpeq>
 800d294:	2800      	cmp	r0, #0
 800d296:	d034      	beq.n	800d302 <_printf_float+0x27a>
 800d298:	4a37      	ldr	r2, [pc, #220]	; (800d378 <_printf_float+0x2f0>)
 800d29a:	2301      	movs	r3, #1
 800d29c:	4631      	mov	r1, r6
 800d29e:	4628      	mov	r0, r5
 800d2a0:	47b8      	blx	r7
 800d2a2:	3001      	adds	r0, #1
 800d2a4:	f43f af51 	beq.w	800d14a <_printf_float+0xc2>
 800d2a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	db02      	blt.n	800d2b6 <_printf_float+0x22e>
 800d2b0:	6823      	ldr	r3, [r4, #0]
 800d2b2:	07d8      	lsls	r0, r3, #31
 800d2b4:	d510      	bpl.n	800d2d8 <_printf_float+0x250>
 800d2b6:	ee18 3a10 	vmov	r3, s16
 800d2ba:	4652      	mov	r2, sl
 800d2bc:	4631      	mov	r1, r6
 800d2be:	4628      	mov	r0, r5
 800d2c0:	47b8      	blx	r7
 800d2c2:	3001      	adds	r0, #1
 800d2c4:	f43f af41 	beq.w	800d14a <_printf_float+0xc2>
 800d2c8:	f04f 0800 	mov.w	r8, #0
 800d2cc:	f104 091a 	add.w	r9, r4, #26
 800d2d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2d2:	3b01      	subs	r3, #1
 800d2d4:	4543      	cmp	r3, r8
 800d2d6:	dc09      	bgt.n	800d2ec <_printf_float+0x264>
 800d2d8:	6823      	ldr	r3, [r4, #0]
 800d2da:	079b      	lsls	r3, r3, #30
 800d2dc:	f100 8105 	bmi.w	800d4ea <_printf_float+0x462>
 800d2e0:	68e0      	ldr	r0, [r4, #12]
 800d2e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2e4:	4298      	cmp	r0, r3
 800d2e6:	bfb8      	it	lt
 800d2e8:	4618      	movlt	r0, r3
 800d2ea:	e730      	b.n	800d14e <_printf_float+0xc6>
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	464a      	mov	r2, r9
 800d2f0:	4631      	mov	r1, r6
 800d2f2:	4628      	mov	r0, r5
 800d2f4:	47b8      	blx	r7
 800d2f6:	3001      	adds	r0, #1
 800d2f8:	f43f af27 	beq.w	800d14a <_printf_float+0xc2>
 800d2fc:	f108 0801 	add.w	r8, r8, #1
 800d300:	e7e6      	b.n	800d2d0 <_printf_float+0x248>
 800d302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d304:	2b00      	cmp	r3, #0
 800d306:	dc39      	bgt.n	800d37c <_printf_float+0x2f4>
 800d308:	4a1b      	ldr	r2, [pc, #108]	; (800d378 <_printf_float+0x2f0>)
 800d30a:	2301      	movs	r3, #1
 800d30c:	4631      	mov	r1, r6
 800d30e:	4628      	mov	r0, r5
 800d310:	47b8      	blx	r7
 800d312:	3001      	adds	r0, #1
 800d314:	f43f af19 	beq.w	800d14a <_printf_float+0xc2>
 800d318:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d31c:	4313      	orrs	r3, r2
 800d31e:	d102      	bne.n	800d326 <_printf_float+0x29e>
 800d320:	6823      	ldr	r3, [r4, #0]
 800d322:	07d9      	lsls	r1, r3, #31
 800d324:	d5d8      	bpl.n	800d2d8 <_printf_float+0x250>
 800d326:	ee18 3a10 	vmov	r3, s16
 800d32a:	4652      	mov	r2, sl
 800d32c:	4631      	mov	r1, r6
 800d32e:	4628      	mov	r0, r5
 800d330:	47b8      	blx	r7
 800d332:	3001      	adds	r0, #1
 800d334:	f43f af09 	beq.w	800d14a <_printf_float+0xc2>
 800d338:	f04f 0900 	mov.w	r9, #0
 800d33c:	f104 0a1a 	add.w	sl, r4, #26
 800d340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d342:	425b      	negs	r3, r3
 800d344:	454b      	cmp	r3, r9
 800d346:	dc01      	bgt.n	800d34c <_printf_float+0x2c4>
 800d348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d34a:	e792      	b.n	800d272 <_printf_float+0x1ea>
 800d34c:	2301      	movs	r3, #1
 800d34e:	4652      	mov	r2, sl
 800d350:	4631      	mov	r1, r6
 800d352:	4628      	mov	r0, r5
 800d354:	47b8      	blx	r7
 800d356:	3001      	adds	r0, #1
 800d358:	f43f aef7 	beq.w	800d14a <_printf_float+0xc2>
 800d35c:	f109 0901 	add.w	r9, r9, #1
 800d360:	e7ee      	b.n	800d340 <_printf_float+0x2b8>
 800d362:	bf00      	nop
 800d364:	7fefffff 	.word	0x7fefffff
 800d368:	08012aa0 	.word	0x08012aa0
 800d36c:	08012aa4 	.word	0x08012aa4
 800d370:	08012aac 	.word	0x08012aac
 800d374:	08012aa8 	.word	0x08012aa8
 800d378:	08012ab0 	.word	0x08012ab0
 800d37c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d37e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d380:	429a      	cmp	r2, r3
 800d382:	bfa8      	it	ge
 800d384:	461a      	movge	r2, r3
 800d386:	2a00      	cmp	r2, #0
 800d388:	4691      	mov	r9, r2
 800d38a:	dc37      	bgt.n	800d3fc <_printf_float+0x374>
 800d38c:	f04f 0b00 	mov.w	fp, #0
 800d390:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d394:	f104 021a 	add.w	r2, r4, #26
 800d398:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d39a:	9305      	str	r3, [sp, #20]
 800d39c:	eba3 0309 	sub.w	r3, r3, r9
 800d3a0:	455b      	cmp	r3, fp
 800d3a2:	dc33      	bgt.n	800d40c <_printf_float+0x384>
 800d3a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	db3b      	blt.n	800d424 <_printf_float+0x39c>
 800d3ac:	6823      	ldr	r3, [r4, #0]
 800d3ae:	07da      	lsls	r2, r3, #31
 800d3b0:	d438      	bmi.n	800d424 <_printf_float+0x39c>
 800d3b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3b4:	9a05      	ldr	r2, [sp, #20]
 800d3b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d3b8:	1a9a      	subs	r2, r3, r2
 800d3ba:	eba3 0901 	sub.w	r9, r3, r1
 800d3be:	4591      	cmp	r9, r2
 800d3c0:	bfa8      	it	ge
 800d3c2:	4691      	movge	r9, r2
 800d3c4:	f1b9 0f00 	cmp.w	r9, #0
 800d3c8:	dc35      	bgt.n	800d436 <_printf_float+0x3ae>
 800d3ca:	f04f 0800 	mov.w	r8, #0
 800d3ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d3d2:	f104 0a1a 	add.w	sl, r4, #26
 800d3d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d3da:	1a9b      	subs	r3, r3, r2
 800d3dc:	eba3 0309 	sub.w	r3, r3, r9
 800d3e0:	4543      	cmp	r3, r8
 800d3e2:	f77f af79 	ble.w	800d2d8 <_printf_float+0x250>
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	4652      	mov	r2, sl
 800d3ea:	4631      	mov	r1, r6
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	47b8      	blx	r7
 800d3f0:	3001      	adds	r0, #1
 800d3f2:	f43f aeaa 	beq.w	800d14a <_printf_float+0xc2>
 800d3f6:	f108 0801 	add.w	r8, r8, #1
 800d3fa:	e7ec      	b.n	800d3d6 <_printf_float+0x34e>
 800d3fc:	4613      	mov	r3, r2
 800d3fe:	4631      	mov	r1, r6
 800d400:	4642      	mov	r2, r8
 800d402:	4628      	mov	r0, r5
 800d404:	47b8      	blx	r7
 800d406:	3001      	adds	r0, #1
 800d408:	d1c0      	bne.n	800d38c <_printf_float+0x304>
 800d40a:	e69e      	b.n	800d14a <_printf_float+0xc2>
 800d40c:	2301      	movs	r3, #1
 800d40e:	4631      	mov	r1, r6
 800d410:	4628      	mov	r0, r5
 800d412:	9205      	str	r2, [sp, #20]
 800d414:	47b8      	blx	r7
 800d416:	3001      	adds	r0, #1
 800d418:	f43f ae97 	beq.w	800d14a <_printf_float+0xc2>
 800d41c:	9a05      	ldr	r2, [sp, #20]
 800d41e:	f10b 0b01 	add.w	fp, fp, #1
 800d422:	e7b9      	b.n	800d398 <_printf_float+0x310>
 800d424:	ee18 3a10 	vmov	r3, s16
 800d428:	4652      	mov	r2, sl
 800d42a:	4631      	mov	r1, r6
 800d42c:	4628      	mov	r0, r5
 800d42e:	47b8      	blx	r7
 800d430:	3001      	adds	r0, #1
 800d432:	d1be      	bne.n	800d3b2 <_printf_float+0x32a>
 800d434:	e689      	b.n	800d14a <_printf_float+0xc2>
 800d436:	9a05      	ldr	r2, [sp, #20]
 800d438:	464b      	mov	r3, r9
 800d43a:	4442      	add	r2, r8
 800d43c:	4631      	mov	r1, r6
 800d43e:	4628      	mov	r0, r5
 800d440:	47b8      	blx	r7
 800d442:	3001      	adds	r0, #1
 800d444:	d1c1      	bne.n	800d3ca <_printf_float+0x342>
 800d446:	e680      	b.n	800d14a <_printf_float+0xc2>
 800d448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d44a:	2a01      	cmp	r2, #1
 800d44c:	dc01      	bgt.n	800d452 <_printf_float+0x3ca>
 800d44e:	07db      	lsls	r3, r3, #31
 800d450:	d538      	bpl.n	800d4c4 <_printf_float+0x43c>
 800d452:	2301      	movs	r3, #1
 800d454:	4642      	mov	r2, r8
 800d456:	4631      	mov	r1, r6
 800d458:	4628      	mov	r0, r5
 800d45a:	47b8      	blx	r7
 800d45c:	3001      	adds	r0, #1
 800d45e:	f43f ae74 	beq.w	800d14a <_printf_float+0xc2>
 800d462:	ee18 3a10 	vmov	r3, s16
 800d466:	4652      	mov	r2, sl
 800d468:	4631      	mov	r1, r6
 800d46a:	4628      	mov	r0, r5
 800d46c:	47b8      	blx	r7
 800d46e:	3001      	adds	r0, #1
 800d470:	f43f ae6b 	beq.w	800d14a <_printf_float+0xc2>
 800d474:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d478:	2200      	movs	r2, #0
 800d47a:	2300      	movs	r3, #0
 800d47c:	f7f3 fb4c 	bl	8000b18 <__aeabi_dcmpeq>
 800d480:	b9d8      	cbnz	r0, 800d4ba <_printf_float+0x432>
 800d482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d484:	f108 0201 	add.w	r2, r8, #1
 800d488:	3b01      	subs	r3, #1
 800d48a:	4631      	mov	r1, r6
 800d48c:	4628      	mov	r0, r5
 800d48e:	47b8      	blx	r7
 800d490:	3001      	adds	r0, #1
 800d492:	d10e      	bne.n	800d4b2 <_printf_float+0x42a>
 800d494:	e659      	b.n	800d14a <_printf_float+0xc2>
 800d496:	2301      	movs	r3, #1
 800d498:	4652      	mov	r2, sl
 800d49a:	4631      	mov	r1, r6
 800d49c:	4628      	mov	r0, r5
 800d49e:	47b8      	blx	r7
 800d4a0:	3001      	adds	r0, #1
 800d4a2:	f43f ae52 	beq.w	800d14a <_printf_float+0xc2>
 800d4a6:	f108 0801 	add.w	r8, r8, #1
 800d4aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4ac:	3b01      	subs	r3, #1
 800d4ae:	4543      	cmp	r3, r8
 800d4b0:	dcf1      	bgt.n	800d496 <_printf_float+0x40e>
 800d4b2:	464b      	mov	r3, r9
 800d4b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d4b8:	e6dc      	b.n	800d274 <_printf_float+0x1ec>
 800d4ba:	f04f 0800 	mov.w	r8, #0
 800d4be:	f104 0a1a 	add.w	sl, r4, #26
 800d4c2:	e7f2      	b.n	800d4aa <_printf_float+0x422>
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	4642      	mov	r2, r8
 800d4c8:	e7df      	b.n	800d48a <_printf_float+0x402>
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	464a      	mov	r2, r9
 800d4ce:	4631      	mov	r1, r6
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	47b8      	blx	r7
 800d4d4:	3001      	adds	r0, #1
 800d4d6:	f43f ae38 	beq.w	800d14a <_printf_float+0xc2>
 800d4da:	f108 0801 	add.w	r8, r8, #1
 800d4de:	68e3      	ldr	r3, [r4, #12]
 800d4e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d4e2:	1a5b      	subs	r3, r3, r1
 800d4e4:	4543      	cmp	r3, r8
 800d4e6:	dcf0      	bgt.n	800d4ca <_printf_float+0x442>
 800d4e8:	e6fa      	b.n	800d2e0 <_printf_float+0x258>
 800d4ea:	f04f 0800 	mov.w	r8, #0
 800d4ee:	f104 0919 	add.w	r9, r4, #25
 800d4f2:	e7f4      	b.n	800d4de <_printf_float+0x456>

0800d4f4 <_printf_common>:
 800d4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4f8:	4616      	mov	r6, r2
 800d4fa:	4699      	mov	r9, r3
 800d4fc:	688a      	ldr	r2, [r1, #8]
 800d4fe:	690b      	ldr	r3, [r1, #16]
 800d500:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d504:	4293      	cmp	r3, r2
 800d506:	bfb8      	it	lt
 800d508:	4613      	movlt	r3, r2
 800d50a:	6033      	str	r3, [r6, #0]
 800d50c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d510:	4607      	mov	r7, r0
 800d512:	460c      	mov	r4, r1
 800d514:	b10a      	cbz	r2, 800d51a <_printf_common+0x26>
 800d516:	3301      	adds	r3, #1
 800d518:	6033      	str	r3, [r6, #0]
 800d51a:	6823      	ldr	r3, [r4, #0]
 800d51c:	0699      	lsls	r1, r3, #26
 800d51e:	bf42      	ittt	mi
 800d520:	6833      	ldrmi	r3, [r6, #0]
 800d522:	3302      	addmi	r3, #2
 800d524:	6033      	strmi	r3, [r6, #0]
 800d526:	6825      	ldr	r5, [r4, #0]
 800d528:	f015 0506 	ands.w	r5, r5, #6
 800d52c:	d106      	bne.n	800d53c <_printf_common+0x48>
 800d52e:	f104 0a19 	add.w	sl, r4, #25
 800d532:	68e3      	ldr	r3, [r4, #12]
 800d534:	6832      	ldr	r2, [r6, #0]
 800d536:	1a9b      	subs	r3, r3, r2
 800d538:	42ab      	cmp	r3, r5
 800d53a:	dc26      	bgt.n	800d58a <_printf_common+0x96>
 800d53c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d540:	1e13      	subs	r3, r2, #0
 800d542:	6822      	ldr	r2, [r4, #0]
 800d544:	bf18      	it	ne
 800d546:	2301      	movne	r3, #1
 800d548:	0692      	lsls	r2, r2, #26
 800d54a:	d42b      	bmi.n	800d5a4 <_printf_common+0xb0>
 800d54c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d550:	4649      	mov	r1, r9
 800d552:	4638      	mov	r0, r7
 800d554:	47c0      	blx	r8
 800d556:	3001      	adds	r0, #1
 800d558:	d01e      	beq.n	800d598 <_printf_common+0xa4>
 800d55a:	6823      	ldr	r3, [r4, #0]
 800d55c:	68e5      	ldr	r5, [r4, #12]
 800d55e:	6832      	ldr	r2, [r6, #0]
 800d560:	f003 0306 	and.w	r3, r3, #6
 800d564:	2b04      	cmp	r3, #4
 800d566:	bf08      	it	eq
 800d568:	1aad      	subeq	r5, r5, r2
 800d56a:	68a3      	ldr	r3, [r4, #8]
 800d56c:	6922      	ldr	r2, [r4, #16]
 800d56e:	bf0c      	ite	eq
 800d570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d574:	2500      	movne	r5, #0
 800d576:	4293      	cmp	r3, r2
 800d578:	bfc4      	itt	gt
 800d57a:	1a9b      	subgt	r3, r3, r2
 800d57c:	18ed      	addgt	r5, r5, r3
 800d57e:	2600      	movs	r6, #0
 800d580:	341a      	adds	r4, #26
 800d582:	42b5      	cmp	r5, r6
 800d584:	d11a      	bne.n	800d5bc <_printf_common+0xc8>
 800d586:	2000      	movs	r0, #0
 800d588:	e008      	b.n	800d59c <_printf_common+0xa8>
 800d58a:	2301      	movs	r3, #1
 800d58c:	4652      	mov	r2, sl
 800d58e:	4649      	mov	r1, r9
 800d590:	4638      	mov	r0, r7
 800d592:	47c0      	blx	r8
 800d594:	3001      	adds	r0, #1
 800d596:	d103      	bne.n	800d5a0 <_printf_common+0xac>
 800d598:	f04f 30ff 	mov.w	r0, #4294967295
 800d59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5a0:	3501      	adds	r5, #1
 800d5a2:	e7c6      	b.n	800d532 <_printf_common+0x3e>
 800d5a4:	18e1      	adds	r1, r4, r3
 800d5a6:	1c5a      	adds	r2, r3, #1
 800d5a8:	2030      	movs	r0, #48	; 0x30
 800d5aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d5ae:	4422      	add	r2, r4
 800d5b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d5b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d5b8:	3302      	adds	r3, #2
 800d5ba:	e7c7      	b.n	800d54c <_printf_common+0x58>
 800d5bc:	2301      	movs	r3, #1
 800d5be:	4622      	mov	r2, r4
 800d5c0:	4649      	mov	r1, r9
 800d5c2:	4638      	mov	r0, r7
 800d5c4:	47c0      	blx	r8
 800d5c6:	3001      	adds	r0, #1
 800d5c8:	d0e6      	beq.n	800d598 <_printf_common+0xa4>
 800d5ca:	3601      	adds	r6, #1
 800d5cc:	e7d9      	b.n	800d582 <_printf_common+0x8e>
	...

0800d5d0 <_printf_i>:
 800d5d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5d4:	7e0f      	ldrb	r7, [r1, #24]
 800d5d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d5d8:	2f78      	cmp	r7, #120	; 0x78
 800d5da:	4691      	mov	r9, r2
 800d5dc:	4680      	mov	r8, r0
 800d5de:	460c      	mov	r4, r1
 800d5e0:	469a      	mov	sl, r3
 800d5e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d5e6:	d807      	bhi.n	800d5f8 <_printf_i+0x28>
 800d5e8:	2f62      	cmp	r7, #98	; 0x62
 800d5ea:	d80a      	bhi.n	800d602 <_printf_i+0x32>
 800d5ec:	2f00      	cmp	r7, #0
 800d5ee:	f000 80d8 	beq.w	800d7a2 <_printf_i+0x1d2>
 800d5f2:	2f58      	cmp	r7, #88	; 0x58
 800d5f4:	f000 80a3 	beq.w	800d73e <_printf_i+0x16e>
 800d5f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d600:	e03a      	b.n	800d678 <_printf_i+0xa8>
 800d602:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d606:	2b15      	cmp	r3, #21
 800d608:	d8f6      	bhi.n	800d5f8 <_printf_i+0x28>
 800d60a:	a101      	add	r1, pc, #4	; (adr r1, 800d610 <_printf_i+0x40>)
 800d60c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d610:	0800d669 	.word	0x0800d669
 800d614:	0800d67d 	.word	0x0800d67d
 800d618:	0800d5f9 	.word	0x0800d5f9
 800d61c:	0800d5f9 	.word	0x0800d5f9
 800d620:	0800d5f9 	.word	0x0800d5f9
 800d624:	0800d5f9 	.word	0x0800d5f9
 800d628:	0800d67d 	.word	0x0800d67d
 800d62c:	0800d5f9 	.word	0x0800d5f9
 800d630:	0800d5f9 	.word	0x0800d5f9
 800d634:	0800d5f9 	.word	0x0800d5f9
 800d638:	0800d5f9 	.word	0x0800d5f9
 800d63c:	0800d789 	.word	0x0800d789
 800d640:	0800d6ad 	.word	0x0800d6ad
 800d644:	0800d76b 	.word	0x0800d76b
 800d648:	0800d5f9 	.word	0x0800d5f9
 800d64c:	0800d5f9 	.word	0x0800d5f9
 800d650:	0800d7ab 	.word	0x0800d7ab
 800d654:	0800d5f9 	.word	0x0800d5f9
 800d658:	0800d6ad 	.word	0x0800d6ad
 800d65c:	0800d5f9 	.word	0x0800d5f9
 800d660:	0800d5f9 	.word	0x0800d5f9
 800d664:	0800d773 	.word	0x0800d773
 800d668:	682b      	ldr	r3, [r5, #0]
 800d66a:	1d1a      	adds	r2, r3, #4
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	602a      	str	r2, [r5, #0]
 800d670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d678:	2301      	movs	r3, #1
 800d67a:	e0a3      	b.n	800d7c4 <_printf_i+0x1f4>
 800d67c:	6820      	ldr	r0, [r4, #0]
 800d67e:	6829      	ldr	r1, [r5, #0]
 800d680:	0606      	lsls	r6, r0, #24
 800d682:	f101 0304 	add.w	r3, r1, #4
 800d686:	d50a      	bpl.n	800d69e <_printf_i+0xce>
 800d688:	680e      	ldr	r6, [r1, #0]
 800d68a:	602b      	str	r3, [r5, #0]
 800d68c:	2e00      	cmp	r6, #0
 800d68e:	da03      	bge.n	800d698 <_printf_i+0xc8>
 800d690:	232d      	movs	r3, #45	; 0x2d
 800d692:	4276      	negs	r6, r6
 800d694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d698:	485e      	ldr	r0, [pc, #376]	; (800d814 <_printf_i+0x244>)
 800d69a:	230a      	movs	r3, #10
 800d69c:	e019      	b.n	800d6d2 <_printf_i+0x102>
 800d69e:	680e      	ldr	r6, [r1, #0]
 800d6a0:	602b      	str	r3, [r5, #0]
 800d6a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d6a6:	bf18      	it	ne
 800d6a8:	b236      	sxthne	r6, r6
 800d6aa:	e7ef      	b.n	800d68c <_printf_i+0xbc>
 800d6ac:	682b      	ldr	r3, [r5, #0]
 800d6ae:	6820      	ldr	r0, [r4, #0]
 800d6b0:	1d19      	adds	r1, r3, #4
 800d6b2:	6029      	str	r1, [r5, #0]
 800d6b4:	0601      	lsls	r1, r0, #24
 800d6b6:	d501      	bpl.n	800d6bc <_printf_i+0xec>
 800d6b8:	681e      	ldr	r6, [r3, #0]
 800d6ba:	e002      	b.n	800d6c2 <_printf_i+0xf2>
 800d6bc:	0646      	lsls	r6, r0, #25
 800d6be:	d5fb      	bpl.n	800d6b8 <_printf_i+0xe8>
 800d6c0:	881e      	ldrh	r6, [r3, #0]
 800d6c2:	4854      	ldr	r0, [pc, #336]	; (800d814 <_printf_i+0x244>)
 800d6c4:	2f6f      	cmp	r7, #111	; 0x6f
 800d6c6:	bf0c      	ite	eq
 800d6c8:	2308      	moveq	r3, #8
 800d6ca:	230a      	movne	r3, #10
 800d6cc:	2100      	movs	r1, #0
 800d6ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d6d2:	6865      	ldr	r5, [r4, #4]
 800d6d4:	60a5      	str	r5, [r4, #8]
 800d6d6:	2d00      	cmp	r5, #0
 800d6d8:	bfa2      	ittt	ge
 800d6da:	6821      	ldrge	r1, [r4, #0]
 800d6dc:	f021 0104 	bicge.w	r1, r1, #4
 800d6e0:	6021      	strge	r1, [r4, #0]
 800d6e2:	b90e      	cbnz	r6, 800d6e8 <_printf_i+0x118>
 800d6e4:	2d00      	cmp	r5, #0
 800d6e6:	d04d      	beq.n	800d784 <_printf_i+0x1b4>
 800d6e8:	4615      	mov	r5, r2
 800d6ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800d6ee:	fb03 6711 	mls	r7, r3, r1, r6
 800d6f2:	5dc7      	ldrb	r7, [r0, r7]
 800d6f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d6f8:	4637      	mov	r7, r6
 800d6fa:	42bb      	cmp	r3, r7
 800d6fc:	460e      	mov	r6, r1
 800d6fe:	d9f4      	bls.n	800d6ea <_printf_i+0x11a>
 800d700:	2b08      	cmp	r3, #8
 800d702:	d10b      	bne.n	800d71c <_printf_i+0x14c>
 800d704:	6823      	ldr	r3, [r4, #0]
 800d706:	07de      	lsls	r6, r3, #31
 800d708:	d508      	bpl.n	800d71c <_printf_i+0x14c>
 800d70a:	6923      	ldr	r3, [r4, #16]
 800d70c:	6861      	ldr	r1, [r4, #4]
 800d70e:	4299      	cmp	r1, r3
 800d710:	bfde      	ittt	le
 800d712:	2330      	movle	r3, #48	; 0x30
 800d714:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d718:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d71c:	1b52      	subs	r2, r2, r5
 800d71e:	6122      	str	r2, [r4, #16]
 800d720:	f8cd a000 	str.w	sl, [sp]
 800d724:	464b      	mov	r3, r9
 800d726:	aa03      	add	r2, sp, #12
 800d728:	4621      	mov	r1, r4
 800d72a:	4640      	mov	r0, r8
 800d72c:	f7ff fee2 	bl	800d4f4 <_printf_common>
 800d730:	3001      	adds	r0, #1
 800d732:	d14c      	bne.n	800d7ce <_printf_i+0x1fe>
 800d734:	f04f 30ff 	mov.w	r0, #4294967295
 800d738:	b004      	add	sp, #16
 800d73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d73e:	4835      	ldr	r0, [pc, #212]	; (800d814 <_printf_i+0x244>)
 800d740:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d744:	6829      	ldr	r1, [r5, #0]
 800d746:	6823      	ldr	r3, [r4, #0]
 800d748:	f851 6b04 	ldr.w	r6, [r1], #4
 800d74c:	6029      	str	r1, [r5, #0]
 800d74e:	061d      	lsls	r5, r3, #24
 800d750:	d514      	bpl.n	800d77c <_printf_i+0x1ac>
 800d752:	07df      	lsls	r7, r3, #31
 800d754:	bf44      	itt	mi
 800d756:	f043 0320 	orrmi.w	r3, r3, #32
 800d75a:	6023      	strmi	r3, [r4, #0]
 800d75c:	b91e      	cbnz	r6, 800d766 <_printf_i+0x196>
 800d75e:	6823      	ldr	r3, [r4, #0]
 800d760:	f023 0320 	bic.w	r3, r3, #32
 800d764:	6023      	str	r3, [r4, #0]
 800d766:	2310      	movs	r3, #16
 800d768:	e7b0      	b.n	800d6cc <_printf_i+0xfc>
 800d76a:	6823      	ldr	r3, [r4, #0]
 800d76c:	f043 0320 	orr.w	r3, r3, #32
 800d770:	6023      	str	r3, [r4, #0]
 800d772:	2378      	movs	r3, #120	; 0x78
 800d774:	4828      	ldr	r0, [pc, #160]	; (800d818 <_printf_i+0x248>)
 800d776:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d77a:	e7e3      	b.n	800d744 <_printf_i+0x174>
 800d77c:	0659      	lsls	r1, r3, #25
 800d77e:	bf48      	it	mi
 800d780:	b2b6      	uxthmi	r6, r6
 800d782:	e7e6      	b.n	800d752 <_printf_i+0x182>
 800d784:	4615      	mov	r5, r2
 800d786:	e7bb      	b.n	800d700 <_printf_i+0x130>
 800d788:	682b      	ldr	r3, [r5, #0]
 800d78a:	6826      	ldr	r6, [r4, #0]
 800d78c:	6961      	ldr	r1, [r4, #20]
 800d78e:	1d18      	adds	r0, r3, #4
 800d790:	6028      	str	r0, [r5, #0]
 800d792:	0635      	lsls	r5, r6, #24
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	d501      	bpl.n	800d79c <_printf_i+0x1cc>
 800d798:	6019      	str	r1, [r3, #0]
 800d79a:	e002      	b.n	800d7a2 <_printf_i+0x1d2>
 800d79c:	0670      	lsls	r0, r6, #25
 800d79e:	d5fb      	bpl.n	800d798 <_printf_i+0x1c8>
 800d7a0:	8019      	strh	r1, [r3, #0]
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	6123      	str	r3, [r4, #16]
 800d7a6:	4615      	mov	r5, r2
 800d7a8:	e7ba      	b.n	800d720 <_printf_i+0x150>
 800d7aa:	682b      	ldr	r3, [r5, #0]
 800d7ac:	1d1a      	adds	r2, r3, #4
 800d7ae:	602a      	str	r2, [r5, #0]
 800d7b0:	681d      	ldr	r5, [r3, #0]
 800d7b2:	6862      	ldr	r2, [r4, #4]
 800d7b4:	2100      	movs	r1, #0
 800d7b6:	4628      	mov	r0, r5
 800d7b8:	f7f2 fd3a 	bl	8000230 <memchr>
 800d7bc:	b108      	cbz	r0, 800d7c2 <_printf_i+0x1f2>
 800d7be:	1b40      	subs	r0, r0, r5
 800d7c0:	6060      	str	r0, [r4, #4]
 800d7c2:	6863      	ldr	r3, [r4, #4]
 800d7c4:	6123      	str	r3, [r4, #16]
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7cc:	e7a8      	b.n	800d720 <_printf_i+0x150>
 800d7ce:	6923      	ldr	r3, [r4, #16]
 800d7d0:	462a      	mov	r2, r5
 800d7d2:	4649      	mov	r1, r9
 800d7d4:	4640      	mov	r0, r8
 800d7d6:	47d0      	blx	sl
 800d7d8:	3001      	adds	r0, #1
 800d7da:	d0ab      	beq.n	800d734 <_printf_i+0x164>
 800d7dc:	6823      	ldr	r3, [r4, #0]
 800d7de:	079b      	lsls	r3, r3, #30
 800d7e0:	d413      	bmi.n	800d80a <_printf_i+0x23a>
 800d7e2:	68e0      	ldr	r0, [r4, #12]
 800d7e4:	9b03      	ldr	r3, [sp, #12]
 800d7e6:	4298      	cmp	r0, r3
 800d7e8:	bfb8      	it	lt
 800d7ea:	4618      	movlt	r0, r3
 800d7ec:	e7a4      	b.n	800d738 <_printf_i+0x168>
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	4632      	mov	r2, r6
 800d7f2:	4649      	mov	r1, r9
 800d7f4:	4640      	mov	r0, r8
 800d7f6:	47d0      	blx	sl
 800d7f8:	3001      	adds	r0, #1
 800d7fa:	d09b      	beq.n	800d734 <_printf_i+0x164>
 800d7fc:	3501      	adds	r5, #1
 800d7fe:	68e3      	ldr	r3, [r4, #12]
 800d800:	9903      	ldr	r1, [sp, #12]
 800d802:	1a5b      	subs	r3, r3, r1
 800d804:	42ab      	cmp	r3, r5
 800d806:	dcf2      	bgt.n	800d7ee <_printf_i+0x21e>
 800d808:	e7eb      	b.n	800d7e2 <_printf_i+0x212>
 800d80a:	2500      	movs	r5, #0
 800d80c:	f104 0619 	add.w	r6, r4, #25
 800d810:	e7f5      	b.n	800d7fe <_printf_i+0x22e>
 800d812:	bf00      	nop
 800d814:	08012ab2 	.word	0x08012ab2
 800d818:	08012ac3 	.word	0x08012ac3

0800d81c <iprintf>:
 800d81c:	b40f      	push	{r0, r1, r2, r3}
 800d81e:	4b0a      	ldr	r3, [pc, #40]	; (800d848 <iprintf+0x2c>)
 800d820:	b513      	push	{r0, r1, r4, lr}
 800d822:	681c      	ldr	r4, [r3, #0]
 800d824:	b124      	cbz	r4, 800d830 <iprintf+0x14>
 800d826:	69a3      	ldr	r3, [r4, #24]
 800d828:	b913      	cbnz	r3, 800d830 <iprintf+0x14>
 800d82a:	4620      	mov	r0, r4
 800d82c:	f001 ff94 	bl	800f758 <__sinit>
 800d830:	ab05      	add	r3, sp, #20
 800d832:	9a04      	ldr	r2, [sp, #16]
 800d834:	68a1      	ldr	r1, [r4, #8]
 800d836:	9301      	str	r3, [sp, #4]
 800d838:	4620      	mov	r0, r4
 800d83a:	f003 fa01 	bl	8010c40 <_vfiprintf_r>
 800d83e:	b002      	add	sp, #8
 800d840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d844:	b004      	add	sp, #16
 800d846:	4770      	bx	lr
 800d848:	2000002c 	.word	0x2000002c

0800d84c <_puts_r>:
 800d84c:	b570      	push	{r4, r5, r6, lr}
 800d84e:	460e      	mov	r6, r1
 800d850:	4605      	mov	r5, r0
 800d852:	b118      	cbz	r0, 800d85c <_puts_r+0x10>
 800d854:	6983      	ldr	r3, [r0, #24]
 800d856:	b90b      	cbnz	r3, 800d85c <_puts_r+0x10>
 800d858:	f001 ff7e 	bl	800f758 <__sinit>
 800d85c:	69ab      	ldr	r3, [r5, #24]
 800d85e:	68ac      	ldr	r4, [r5, #8]
 800d860:	b913      	cbnz	r3, 800d868 <_puts_r+0x1c>
 800d862:	4628      	mov	r0, r5
 800d864:	f001 ff78 	bl	800f758 <__sinit>
 800d868:	4b2c      	ldr	r3, [pc, #176]	; (800d91c <_puts_r+0xd0>)
 800d86a:	429c      	cmp	r4, r3
 800d86c:	d120      	bne.n	800d8b0 <_puts_r+0x64>
 800d86e:	686c      	ldr	r4, [r5, #4]
 800d870:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d872:	07db      	lsls	r3, r3, #31
 800d874:	d405      	bmi.n	800d882 <_puts_r+0x36>
 800d876:	89a3      	ldrh	r3, [r4, #12]
 800d878:	0598      	lsls	r0, r3, #22
 800d87a:	d402      	bmi.n	800d882 <_puts_r+0x36>
 800d87c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d87e:	f002 fb7c 	bl	800ff7a <__retarget_lock_acquire_recursive>
 800d882:	89a3      	ldrh	r3, [r4, #12]
 800d884:	0719      	lsls	r1, r3, #28
 800d886:	d51d      	bpl.n	800d8c4 <_puts_r+0x78>
 800d888:	6923      	ldr	r3, [r4, #16]
 800d88a:	b1db      	cbz	r3, 800d8c4 <_puts_r+0x78>
 800d88c:	3e01      	subs	r6, #1
 800d88e:	68a3      	ldr	r3, [r4, #8]
 800d890:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d894:	3b01      	subs	r3, #1
 800d896:	60a3      	str	r3, [r4, #8]
 800d898:	bb39      	cbnz	r1, 800d8ea <_puts_r+0x9e>
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	da38      	bge.n	800d910 <_puts_r+0xc4>
 800d89e:	4622      	mov	r2, r4
 800d8a0:	210a      	movs	r1, #10
 800d8a2:	4628      	mov	r0, r5
 800d8a4:	f000 ff02 	bl	800e6ac <__swbuf_r>
 800d8a8:	3001      	adds	r0, #1
 800d8aa:	d011      	beq.n	800d8d0 <_puts_r+0x84>
 800d8ac:	250a      	movs	r5, #10
 800d8ae:	e011      	b.n	800d8d4 <_puts_r+0x88>
 800d8b0:	4b1b      	ldr	r3, [pc, #108]	; (800d920 <_puts_r+0xd4>)
 800d8b2:	429c      	cmp	r4, r3
 800d8b4:	d101      	bne.n	800d8ba <_puts_r+0x6e>
 800d8b6:	68ac      	ldr	r4, [r5, #8]
 800d8b8:	e7da      	b.n	800d870 <_puts_r+0x24>
 800d8ba:	4b1a      	ldr	r3, [pc, #104]	; (800d924 <_puts_r+0xd8>)
 800d8bc:	429c      	cmp	r4, r3
 800d8be:	bf08      	it	eq
 800d8c0:	68ec      	ldreq	r4, [r5, #12]
 800d8c2:	e7d5      	b.n	800d870 <_puts_r+0x24>
 800d8c4:	4621      	mov	r1, r4
 800d8c6:	4628      	mov	r0, r5
 800d8c8:	f000 ff42 	bl	800e750 <__swsetup_r>
 800d8cc:	2800      	cmp	r0, #0
 800d8ce:	d0dd      	beq.n	800d88c <_puts_r+0x40>
 800d8d0:	f04f 35ff 	mov.w	r5, #4294967295
 800d8d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8d6:	07da      	lsls	r2, r3, #31
 800d8d8:	d405      	bmi.n	800d8e6 <_puts_r+0x9a>
 800d8da:	89a3      	ldrh	r3, [r4, #12]
 800d8dc:	059b      	lsls	r3, r3, #22
 800d8de:	d402      	bmi.n	800d8e6 <_puts_r+0x9a>
 800d8e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8e2:	f002 fb4b 	bl	800ff7c <__retarget_lock_release_recursive>
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	bd70      	pop	{r4, r5, r6, pc}
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	da04      	bge.n	800d8f8 <_puts_r+0xac>
 800d8ee:	69a2      	ldr	r2, [r4, #24]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	dc06      	bgt.n	800d902 <_puts_r+0xb6>
 800d8f4:	290a      	cmp	r1, #10
 800d8f6:	d004      	beq.n	800d902 <_puts_r+0xb6>
 800d8f8:	6823      	ldr	r3, [r4, #0]
 800d8fa:	1c5a      	adds	r2, r3, #1
 800d8fc:	6022      	str	r2, [r4, #0]
 800d8fe:	7019      	strb	r1, [r3, #0]
 800d900:	e7c5      	b.n	800d88e <_puts_r+0x42>
 800d902:	4622      	mov	r2, r4
 800d904:	4628      	mov	r0, r5
 800d906:	f000 fed1 	bl	800e6ac <__swbuf_r>
 800d90a:	3001      	adds	r0, #1
 800d90c:	d1bf      	bne.n	800d88e <_puts_r+0x42>
 800d90e:	e7df      	b.n	800d8d0 <_puts_r+0x84>
 800d910:	6823      	ldr	r3, [r4, #0]
 800d912:	250a      	movs	r5, #10
 800d914:	1c5a      	adds	r2, r3, #1
 800d916:	6022      	str	r2, [r4, #0]
 800d918:	701d      	strb	r5, [r3, #0]
 800d91a:	e7db      	b.n	800d8d4 <_puts_r+0x88>
 800d91c:	08012cdc 	.word	0x08012cdc
 800d920:	08012cfc 	.word	0x08012cfc
 800d924:	08012cbc 	.word	0x08012cbc

0800d928 <puts>:
 800d928:	4b02      	ldr	r3, [pc, #8]	; (800d934 <puts+0xc>)
 800d92a:	4601      	mov	r1, r0
 800d92c:	6818      	ldr	r0, [r3, #0]
 800d92e:	f7ff bf8d 	b.w	800d84c <_puts_r>
 800d932:	bf00      	nop
 800d934:	2000002c 	.word	0x2000002c

0800d938 <sulp>:
 800d938:	b570      	push	{r4, r5, r6, lr}
 800d93a:	4604      	mov	r4, r0
 800d93c:	460d      	mov	r5, r1
 800d93e:	ec45 4b10 	vmov	d0, r4, r5
 800d942:	4616      	mov	r6, r2
 800d944:	f002 ff0c 	bl	8010760 <__ulp>
 800d948:	ec51 0b10 	vmov	r0, r1, d0
 800d94c:	b17e      	cbz	r6, 800d96e <sulp+0x36>
 800d94e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d952:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d956:	2b00      	cmp	r3, #0
 800d958:	dd09      	ble.n	800d96e <sulp+0x36>
 800d95a:	051b      	lsls	r3, r3, #20
 800d95c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d960:	2400      	movs	r4, #0
 800d962:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d966:	4622      	mov	r2, r4
 800d968:	462b      	mov	r3, r5
 800d96a:	f7f2 fe6d 	bl	8000648 <__aeabi_dmul>
 800d96e:	bd70      	pop	{r4, r5, r6, pc}

0800d970 <_strtod_l>:
 800d970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d974:	ed2d 8b02 	vpush	{d8}
 800d978:	b09d      	sub	sp, #116	; 0x74
 800d97a:	461f      	mov	r7, r3
 800d97c:	2300      	movs	r3, #0
 800d97e:	9318      	str	r3, [sp, #96]	; 0x60
 800d980:	4ba2      	ldr	r3, [pc, #648]	; (800dc0c <_strtod_l+0x29c>)
 800d982:	9213      	str	r2, [sp, #76]	; 0x4c
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	9305      	str	r3, [sp, #20]
 800d988:	4604      	mov	r4, r0
 800d98a:	4618      	mov	r0, r3
 800d98c:	4688      	mov	r8, r1
 800d98e:	f7f2 fc47 	bl	8000220 <strlen>
 800d992:	f04f 0a00 	mov.w	sl, #0
 800d996:	4605      	mov	r5, r0
 800d998:	f04f 0b00 	mov.w	fp, #0
 800d99c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d9a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d9a2:	781a      	ldrb	r2, [r3, #0]
 800d9a4:	2a2b      	cmp	r2, #43	; 0x2b
 800d9a6:	d04e      	beq.n	800da46 <_strtod_l+0xd6>
 800d9a8:	d83b      	bhi.n	800da22 <_strtod_l+0xb2>
 800d9aa:	2a0d      	cmp	r2, #13
 800d9ac:	d834      	bhi.n	800da18 <_strtod_l+0xa8>
 800d9ae:	2a08      	cmp	r2, #8
 800d9b0:	d834      	bhi.n	800da1c <_strtod_l+0xac>
 800d9b2:	2a00      	cmp	r2, #0
 800d9b4:	d03e      	beq.n	800da34 <_strtod_l+0xc4>
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	930a      	str	r3, [sp, #40]	; 0x28
 800d9ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d9bc:	7833      	ldrb	r3, [r6, #0]
 800d9be:	2b30      	cmp	r3, #48	; 0x30
 800d9c0:	f040 80b0 	bne.w	800db24 <_strtod_l+0x1b4>
 800d9c4:	7873      	ldrb	r3, [r6, #1]
 800d9c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d9ca:	2b58      	cmp	r3, #88	; 0x58
 800d9cc:	d168      	bne.n	800daa0 <_strtod_l+0x130>
 800d9ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9d0:	9301      	str	r3, [sp, #4]
 800d9d2:	ab18      	add	r3, sp, #96	; 0x60
 800d9d4:	9702      	str	r7, [sp, #8]
 800d9d6:	9300      	str	r3, [sp, #0]
 800d9d8:	4a8d      	ldr	r2, [pc, #564]	; (800dc10 <_strtod_l+0x2a0>)
 800d9da:	ab19      	add	r3, sp, #100	; 0x64
 800d9dc:	a917      	add	r1, sp, #92	; 0x5c
 800d9de:	4620      	mov	r0, r4
 800d9e0:	f001 ffbe 	bl	800f960 <__gethex>
 800d9e4:	f010 0707 	ands.w	r7, r0, #7
 800d9e8:	4605      	mov	r5, r0
 800d9ea:	d005      	beq.n	800d9f8 <_strtod_l+0x88>
 800d9ec:	2f06      	cmp	r7, #6
 800d9ee:	d12c      	bne.n	800da4a <_strtod_l+0xda>
 800d9f0:	3601      	adds	r6, #1
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	9617      	str	r6, [sp, #92]	; 0x5c
 800d9f6:	930a      	str	r3, [sp, #40]	; 0x28
 800d9f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	f040 8590 	bne.w	800e520 <_strtod_l+0xbb0>
 800da00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da02:	b1eb      	cbz	r3, 800da40 <_strtod_l+0xd0>
 800da04:	4652      	mov	r2, sl
 800da06:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800da0a:	ec43 2b10 	vmov	d0, r2, r3
 800da0e:	b01d      	add	sp, #116	; 0x74
 800da10:	ecbd 8b02 	vpop	{d8}
 800da14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da18:	2a20      	cmp	r2, #32
 800da1a:	d1cc      	bne.n	800d9b6 <_strtod_l+0x46>
 800da1c:	3301      	adds	r3, #1
 800da1e:	9317      	str	r3, [sp, #92]	; 0x5c
 800da20:	e7be      	b.n	800d9a0 <_strtod_l+0x30>
 800da22:	2a2d      	cmp	r2, #45	; 0x2d
 800da24:	d1c7      	bne.n	800d9b6 <_strtod_l+0x46>
 800da26:	2201      	movs	r2, #1
 800da28:	920a      	str	r2, [sp, #40]	; 0x28
 800da2a:	1c5a      	adds	r2, r3, #1
 800da2c:	9217      	str	r2, [sp, #92]	; 0x5c
 800da2e:	785b      	ldrb	r3, [r3, #1]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d1c2      	bne.n	800d9ba <_strtod_l+0x4a>
 800da34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da36:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	f040 856e 	bne.w	800e51c <_strtod_l+0xbac>
 800da40:	4652      	mov	r2, sl
 800da42:	465b      	mov	r3, fp
 800da44:	e7e1      	b.n	800da0a <_strtod_l+0x9a>
 800da46:	2200      	movs	r2, #0
 800da48:	e7ee      	b.n	800da28 <_strtod_l+0xb8>
 800da4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800da4c:	b13a      	cbz	r2, 800da5e <_strtod_l+0xee>
 800da4e:	2135      	movs	r1, #53	; 0x35
 800da50:	a81a      	add	r0, sp, #104	; 0x68
 800da52:	f002 ff90 	bl	8010976 <__copybits>
 800da56:	9918      	ldr	r1, [sp, #96]	; 0x60
 800da58:	4620      	mov	r0, r4
 800da5a:	f002 fb4f 	bl	80100fc <_Bfree>
 800da5e:	3f01      	subs	r7, #1
 800da60:	2f04      	cmp	r7, #4
 800da62:	d806      	bhi.n	800da72 <_strtod_l+0x102>
 800da64:	e8df f007 	tbb	[pc, r7]
 800da68:	1714030a 	.word	0x1714030a
 800da6c:	0a          	.byte	0x0a
 800da6d:	00          	.byte	0x00
 800da6e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800da72:	0728      	lsls	r0, r5, #28
 800da74:	d5c0      	bpl.n	800d9f8 <_strtod_l+0x88>
 800da76:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800da7a:	e7bd      	b.n	800d9f8 <_strtod_l+0x88>
 800da7c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800da80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800da82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800da86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800da8a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800da8e:	e7f0      	b.n	800da72 <_strtod_l+0x102>
 800da90:	f8df b180 	ldr.w	fp, [pc, #384]	; 800dc14 <_strtod_l+0x2a4>
 800da94:	e7ed      	b.n	800da72 <_strtod_l+0x102>
 800da96:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800da9a:	f04f 3aff 	mov.w	sl, #4294967295
 800da9e:	e7e8      	b.n	800da72 <_strtod_l+0x102>
 800daa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800daa2:	1c5a      	adds	r2, r3, #1
 800daa4:	9217      	str	r2, [sp, #92]	; 0x5c
 800daa6:	785b      	ldrb	r3, [r3, #1]
 800daa8:	2b30      	cmp	r3, #48	; 0x30
 800daaa:	d0f9      	beq.n	800daa0 <_strtod_l+0x130>
 800daac:	2b00      	cmp	r3, #0
 800daae:	d0a3      	beq.n	800d9f8 <_strtod_l+0x88>
 800dab0:	2301      	movs	r3, #1
 800dab2:	f04f 0900 	mov.w	r9, #0
 800dab6:	9304      	str	r3, [sp, #16]
 800dab8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800daba:	9308      	str	r3, [sp, #32]
 800dabc:	f8cd 901c 	str.w	r9, [sp, #28]
 800dac0:	464f      	mov	r7, r9
 800dac2:	220a      	movs	r2, #10
 800dac4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800dac6:	7806      	ldrb	r6, [r0, #0]
 800dac8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800dacc:	b2d9      	uxtb	r1, r3
 800dace:	2909      	cmp	r1, #9
 800dad0:	d92a      	bls.n	800db28 <_strtod_l+0x1b8>
 800dad2:	9905      	ldr	r1, [sp, #20]
 800dad4:	462a      	mov	r2, r5
 800dad6:	f003 fa44 	bl	8010f62 <strncmp>
 800dada:	b398      	cbz	r0, 800db44 <_strtod_l+0x1d4>
 800dadc:	2000      	movs	r0, #0
 800dade:	4632      	mov	r2, r6
 800dae0:	463d      	mov	r5, r7
 800dae2:	9005      	str	r0, [sp, #20]
 800dae4:	4603      	mov	r3, r0
 800dae6:	2a65      	cmp	r2, #101	; 0x65
 800dae8:	d001      	beq.n	800daee <_strtod_l+0x17e>
 800daea:	2a45      	cmp	r2, #69	; 0x45
 800daec:	d118      	bne.n	800db20 <_strtod_l+0x1b0>
 800daee:	b91d      	cbnz	r5, 800daf8 <_strtod_l+0x188>
 800daf0:	9a04      	ldr	r2, [sp, #16]
 800daf2:	4302      	orrs	r2, r0
 800daf4:	d09e      	beq.n	800da34 <_strtod_l+0xc4>
 800daf6:	2500      	movs	r5, #0
 800daf8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800dafc:	f108 0201 	add.w	r2, r8, #1
 800db00:	9217      	str	r2, [sp, #92]	; 0x5c
 800db02:	f898 2001 	ldrb.w	r2, [r8, #1]
 800db06:	2a2b      	cmp	r2, #43	; 0x2b
 800db08:	d075      	beq.n	800dbf6 <_strtod_l+0x286>
 800db0a:	2a2d      	cmp	r2, #45	; 0x2d
 800db0c:	d07b      	beq.n	800dc06 <_strtod_l+0x296>
 800db0e:	f04f 0c00 	mov.w	ip, #0
 800db12:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800db16:	2909      	cmp	r1, #9
 800db18:	f240 8082 	bls.w	800dc20 <_strtod_l+0x2b0>
 800db1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800db20:	2600      	movs	r6, #0
 800db22:	e09d      	b.n	800dc60 <_strtod_l+0x2f0>
 800db24:	2300      	movs	r3, #0
 800db26:	e7c4      	b.n	800dab2 <_strtod_l+0x142>
 800db28:	2f08      	cmp	r7, #8
 800db2a:	bfd8      	it	le
 800db2c:	9907      	ldrle	r1, [sp, #28]
 800db2e:	f100 0001 	add.w	r0, r0, #1
 800db32:	bfda      	itte	le
 800db34:	fb02 3301 	mlale	r3, r2, r1, r3
 800db38:	9307      	strle	r3, [sp, #28]
 800db3a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800db3e:	3701      	adds	r7, #1
 800db40:	9017      	str	r0, [sp, #92]	; 0x5c
 800db42:	e7bf      	b.n	800dac4 <_strtod_l+0x154>
 800db44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db46:	195a      	adds	r2, r3, r5
 800db48:	9217      	str	r2, [sp, #92]	; 0x5c
 800db4a:	5d5a      	ldrb	r2, [r3, r5]
 800db4c:	2f00      	cmp	r7, #0
 800db4e:	d037      	beq.n	800dbc0 <_strtod_l+0x250>
 800db50:	9005      	str	r0, [sp, #20]
 800db52:	463d      	mov	r5, r7
 800db54:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800db58:	2b09      	cmp	r3, #9
 800db5a:	d912      	bls.n	800db82 <_strtod_l+0x212>
 800db5c:	2301      	movs	r3, #1
 800db5e:	e7c2      	b.n	800dae6 <_strtod_l+0x176>
 800db60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db62:	1c5a      	adds	r2, r3, #1
 800db64:	9217      	str	r2, [sp, #92]	; 0x5c
 800db66:	785a      	ldrb	r2, [r3, #1]
 800db68:	3001      	adds	r0, #1
 800db6a:	2a30      	cmp	r2, #48	; 0x30
 800db6c:	d0f8      	beq.n	800db60 <_strtod_l+0x1f0>
 800db6e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800db72:	2b08      	cmp	r3, #8
 800db74:	f200 84d9 	bhi.w	800e52a <_strtod_l+0xbba>
 800db78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db7a:	9005      	str	r0, [sp, #20]
 800db7c:	2000      	movs	r0, #0
 800db7e:	9308      	str	r3, [sp, #32]
 800db80:	4605      	mov	r5, r0
 800db82:	3a30      	subs	r2, #48	; 0x30
 800db84:	f100 0301 	add.w	r3, r0, #1
 800db88:	d014      	beq.n	800dbb4 <_strtod_l+0x244>
 800db8a:	9905      	ldr	r1, [sp, #20]
 800db8c:	4419      	add	r1, r3
 800db8e:	9105      	str	r1, [sp, #20]
 800db90:	462b      	mov	r3, r5
 800db92:	eb00 0e05 	add.w	lr, r0, r5
 800db96:	210a      	movs	r1, #10
 800db98:	4573      	cmp	r3, lr
 800db9a:	d113      	bne.n	800dbc4 <_strtod_l+0x254>
 800db9c:	182b      	adds	r3, r5, r0
 800db9e:	2b08      	cmp	r3, #8
 800dba0:	f105 0501 	add.w	r5, r5, #1
 800dba4:	4405      	add	r5, r0
 800dba6:	dc1c      	bgt.n	800dbe2 <_strtod_l+0x272>
 800dba8:	9907      	ldr	r1, [sp, #28]
 800dbaa:	230a      	movs	r3, #10
 800dbac:	fb03 2301 	mla	r3, r3, r1, r2
 800dbb0:	9307      	str	r3, [sp, #28]
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dbb6:	1c51      	adds	r1, r2, #1
 800dbb8:	9117      	str	r1, [sp, #92]	; 0x5c
 800dbba:	7852      	ldrb	r2, [r2, #1]
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	e7c9      	b.n	800db54 <_strtod_l+0x1e4>
 800dbc0:	4638      	mov	r0, r7
 800dbc2:	e7d2      	b.n	800db6a <_strtod_l+0x1fa>
 800dbc4:	2b08      	cmp	r3, #8
 800dbc6:	dc04      	bgt.n	800dbd2 <_strtod_l+0x262>
 800dbc8:	9e07      	ldr	r6, [sp, #28]
 800dbca:	434e      	muls	r6, r1
 800dbcc:	9607      	str	r6, [sp, #28]
 800dbce:	3301      	adds	r3, #1
 800dbd0:	e7e2      	b.n	800db98 <_strtod_l+0x228>
 800dbd2:	f103 0c01 	add.w	ip, r3, #1
 800dbd6:	f1bc 0f10 	cmp.w	ip, #16
 800dbda:	bfd8      	it	le
 800dbdc:	fb01 f909 	mulle.w	r9, r1, r9
 800dbe0:	e7f5      	b.n	800dbce <_strtod_l+0x25e>
 800dbe2:	2d10      	cmp	r5, #16
 800dbe4:	bfdc      	itt	le
 800dbe6:	230a      	movle	r3, #10
 800dbe8:	fb03 2909 	mlale	r9, r3, r9, r2
 800dbec:	e7e1      	b.n	800dbb2 <_strtod_l+0x242>
 800dbee:	2300      	movs	r3, #0
 800dbf0:	9305      	str	r3, [sp, #20]
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	e77c      	b.n	800daf0 <_strtod_l+0x180>
 800dbf6:	f04f 0c00 	mov.w	ip, #0
 800dbfa:	f108 0202 	add.w	r2, r8, #2
 800dbfe:	9217      	str	r2, [sp, #92]	; 0x5c
 800dc00:	f898 2002 	ldrb.w	r2, [r8, #2]
 800dc04:	e785      	b.n	800db12 <_strtod_l+0x1a2>
 800dc06:	f04f 0c01 	mov.w	ip, #1
 800dc0a:	e7f6      	b.n	800dbfa <_strtod_l+0x28a>
 800dc0c:	08012d84 	.word	0x08012d84
 800dc10:	08012ad4 	.word	0x08012ad4
 800dc14:	7ff00000 	.word	0x7ff00000
 800dc18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc1a:	1c51      	adds	r1, r2, #1
 800dc1c:	9117      	str	r1, [sp, #92]	; 0x5c
 800dc1e:	7852      	ldrb	r2, [r2, #1]
 800dc20:	2a30      	cmp	r2, #48	; 0x30
 800dc22:	d0f9      	beq.n	800dc18 <_strtod_l+0x2a8>
 800dc24:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800dc28:	2908      	cmp	r1, #8
 800dc2a:	f63f af79 	bhi.w	800db20 <_strtod_l+0x1b0>
 800dc2e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800dc32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc34:	9206      	str	r2, [sp, #24]
 800dc36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc38:	1c51      	adds	r1, r2, #1
 800dc3a:	9117      	str	r1, [sp, #92]	; 0x5c
 800dc3c:	7852      	ldrb	r2, [r2, #1]
 800dc3e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800dc42:	2e09      	cmp	r6, #9
 800dc44:	d937      	bls.n	800dcb6 <_strtod_l+0x346>
 800dc46:	9e06      	ldr	r6, [sp, #24]
 800dc48:	1b89      	subs	r1, r1, r6
 800dc4a:	2908      	cmp	r1, #8
 800dc4c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800dc50:	dc02      	bgt.n	800dc58 <_strtod_l+0x2e8>
 800dc52:	4576      	cmp	r6, lr
 800dc54:	bfa8      	it	ge
 800dc56:	4676      	movge	r6, lr
 800dc58:	f1bc 0f00 	cmp.w	ip, #0
 800dc5c:	d000      	beq.n	800dc60 <_strtod_l+0x2f0>
 800dc5e:	4276      	negs	r6, r6
 800dc60:	2d00      	cmp	r5, #0
 800dc62:	d14d      	bne.n	800dd00 <_strtod_l+0x390>
 800dc64:	9904      	ldr	r1, [sp, #16]
 800dc66:	4301      	orrs	r1, r0
 800dc68:	f47f aec6 	bne.w	800d9f8 <_strtod_l+0x88>
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	f47f aee1 	bne.w	800da34 <_strtod_l+0xc4>
 800dc72:	2a69      	cmp	r2, #105	; 0x69
 800dc74:	d027      	beq.n	800dcc6 <_strtod_l+0x356>
 800dc76:	dc24      	bgt.n	800dcc2 <_strtod_l+0x352>
 800dc78:	2a49      	cmp	r2, #73	; 0x49
 800dc7a:	d024      	beq.n	800dcc6 <_strtod_l+0x356>
 800dc7c:	2a4e      	cmp	r2, #78	; 0x4e
 800dc7e:	f47f aed9 	bne.w	800da34 <_strtod_l+0xc4>
 800dc82:	499f      	ldr	r1, [pc, #636]	; (800df00 <_strtod_l+0x590>)
 800dc84:	a817      	add	r0, sp, #92	; 0x5c
 800dc86:	f002 f8c3 	bl	800fe10 <__match>
 800dc8a:	2800      	cmp	r0, #0
 800dc8c:	f43f aed2 	beq.w	800da34 <_strtod_l+0xc4>
 800dc90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	2b28      	cmp	r3, #40	; 0x28
 800dc96:	d12d      	bne.n	800dcf4 <_strtod_l+0x384>
 800dc98:	499a      	ldr	r1, [pc, #616]	; (800df04 <_strtod_l+0x594>)
 800dc9a:	aa1a      	add	r2, sp, #104	; 0x68
 800dc9c:	a817      	add	r0, sp, #92	; 0x5c
 800dc9e:	f002 f8cb 	bl	800fe38 <__hexnan>
 800dca2:	2805      	cmp	r0, #5
 800dca4:	d126      	bne.n	800dcf4 <_strtod_l+0x384>
 800dca6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dca8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800dcac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800dcb0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800dcb4:	e6a0      	b.n	800d9f8 <_strtod_l+0x88>
 800dcb6:	210a      	movs	r1, #10
 800dcb8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800dcbc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800dcc0:	e7b9      	b.n	800dc36 <_strtod_l+0x2c6>
 800dcc2:	2a6e      	cmp	r2, #110	; 0x6e
 800dcc4:	e7db      	b.n	800dc7e <_strtod_l+0x30e>
 800dcc6:	4990      	ldr	r1, [pc, #576]	; (800df08 <_strtod_l+0x598>)
 800dcc8:	a817      	add	r0, sp, #92	; 0x5c
 800dcca:	f002 f8a1 	bl	800fe10 <__match>
 800dcce:	2800      	cmp	r0, #0
 800dcd0:	f43f aeb0 	beq.w	800da34 <_strtod_l+0xc4>
 800dcd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dcd6:	498d      	ldr	r1, [pc, #564]	; (800df0c <_strtod_l+0x59c>)
 800dcd8:	3b01      	subs	r3, #1
 800dcda:	a817      	add	r0, sp, #92	; 0x5c
 800dcdc:	9317      	str	r3, [sp, #92]	; 0x5c
 800dcde:	f002 f897 	bl	800fe10 <__match>
 800dce2:	b910      	cbnz	r0, 800dcea <_strtod_l+0x37a>
 800dce4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dce6:	3301      	adds	r3, #1
 800dce8:	9317      	str	r3, [sp, #92]	; 0x5c
 800dcea:	f8df b230 	ldr.w	fp, [pc, #560]	; 800df1c <_strtod_l+0x5ac>
 800dcee:	f04f 0a00 	mov.w	sl, #0
 800dcf2:	e681      	b.n	800d9f8 <_strtod_l+0x88>
 800dcf4:	4886      	ldr	r0, [pc, #536]	; (800df10 <_strtod_l+0x5a0>)
 800dcf6:	f003 f8d3 	bl	8010ea0 <nan>
 800dcfa:	ec5b ab10 	vmov	sl, fp, d0
 800dcfe:	e67b      	b.n	800d9f8 <_strtod_l+0x88>
 800dd00:	9b05      	ldr	r3, [sp, #20]
 800dd02:	9807      	ldr	r0, [sp, #28]
 800dd04:	1af3      	subs	r3, r6, r3
 800dd06:	2f00      	cmp	r7, #0
 800dd08:	bf08      	it	eq
 800dd0a:	462f      	moveq	r7, r5
 800dd0c:	2d10      	cmp	r5, #16
 800dd0e:	9306      	str	r3, [sp, #24]
 800dd10:	46a8      	mov	r8, r5
 800dd12:	bfa8      	it	ge
 800dd14:	f04f 0810 	movge.w	r8, #16
 800dd18:	f7f2 fc1c 	bl	8000554 <__aeabi_ui2d>
 800dd1c:	2d09      	cmp	r5, #9
 800dd1e:	4682      	mov	sl, r0
 800dd20:	468b      	mov	fp, r1
 800dd22:	dd13      	ble.n	800dd4c <_strtod_l+0x3dc>
 800dd24:	4b7b      	ldr	r3, [pc, #492]	; (800df14 <_strtod_l+0x5a4>)
 800dd26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800dd2a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800dd2e:	f7f2 fc8b 	bl	8000648 <__aeabi_dmul>
 800dd32:	4682      	mov	sl, r0
 800dd34:	4648      	mov	r0, r9
 800dd36:	468b      	mov	fp, r1
 800dd38:	f7f2 fc0c 	bl	8000554 <__aeabi_ui2d>
 800dd3c:	4602      	mov	r2, r0
 800dd3e:	460b      	mov	r3, r1
 800dd40:	4650      	mov	r0, sl
 800dd42:	4659      	mov	r1, fp
 800dd44:	f7f2 faca 	bl	80002dc <__adddf3>
 800dd48:	4682      	mov	sl, r0
 800dd4a:	468b      	mov	fp, r1
 800dd4c:	2d0f      	cmp	r5, #15
 800dd4e:	dc38      	bgt.n	800ddc2 <_strtod_l+0x452>
 800dd50:	9b06      	ldr	r3, [sp, #24]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	f43f ae50 	beq.w	800d9f8 <_strtod_l+0x88>
 800dd58:	dd24      	ble.n	800dda4 <_strtod_l+0x434>
 800dd5a:	2b16      	cmp	r3, #22
 800dd5c:	dc0b      	bgt.n	800dd76 <_strtod_l+0x406>
 800dd5e:	496d      	ldr	r1, [pc, #436]	; (800df14 <_strtod_l+0x5a4>)
 800dd60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dd64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd68:	4652      	mov	r2, sl
 800dd6a:	465b      	mov	r3, fp
 800dd6c:	f7f2 fc6c 	bl	8000648 <__aeabi_dmul>
 800dd70:	4682      	mov	sl, r0
 800dd72:	468b      	mov	fp, r1
 800dd74:	e640      	b.n	800d9f8 <_strtod_l+0x88>
 800dd76:	9a06      	ldr	r2, [sp, #24]
 800dd78:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	db20      	blt.n	800ddc2 <_strtod_l+0x452>
 800dd80:	4c64      	ldr	r4, [pc, #400]	; (800df14 <_strtod_l+0x5a4>)
 800dd82:	f1c5 050f 	rsb	r5, r5, #15
 800dd86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dd8a:	4652      	mov	r2, sl
 800dd8c:	465b      	mov	r3, fp
 800dd8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd92:	f7f2 fc59 	bl	8000648 <__aeabi_dmul>
 800dd96:	9b06      	ldr	r3, [sp, #24]
 800dd98:	1b5d      	subs	r5, r3, r5
 800dd9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800dd9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dda2:	e7e3      	b.n	800dd6c <_strtod_l+0x3fc>
 800dda4:	9b06      	ldr	r3, [sp, #24]
 800dda6:	3316      	adds	r3, #22
 800dda8:	db0b      	blt.n	800ddc2 <_strtod_l+0x452>
 800ddaa:	9b05      	ldr	r3, [sp, #20]
 800ddac:	1b9e      	subs	r6, r3, r6
 800ddae:	4b59      	ldr	r3, [pc, #356]	; (800df14 <_strtod_l+0x5a4>)
 800ddb0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ddb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ddb8:	4650      	mov	r0, sl
 800ddba:	4659      	mov	r1, fp
 800ddbc:	f7f2 fd6e 	bl	800089c <__aeabi_ddiv>
 800ddc0:	e7d6      	b.n	800dd70 <_strtod_l+0x400>
 800ddc2:	9b06      	ldr	r3, [sp, #24]
 800ddc4:	eba5 0808 	sub.w	r8, r5, r8
 800ddc8:	4498      	add	r8, r3
 800ddca:	f1b8 0f00 	cmp.w	r8, #0
 800ddce:	dd74      	ble.n	800deba <_strtod_l+0x54a>
 800ddd0:	f018 030f 	ands.w	r3, r8, #15
 800ddd4:	d00a      	beq.n	800ddec <_strtod_l+0x47c>
 800ddd6:	494f      	ldr	r1, [pc, #316]	; (800df14 <_strtod_l+0x5a4>)
 800ddd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dddc:	4652      	mov	r2, sl
 800ddde:	465b      	mov	r3, fp
 800dde0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dde4:	f7f2 fc30 	bl	8000648 <__aeabi_dmul>
 800dde8:	4682      	mov	sl, r0
 800ddea:	468b      	mov	fp, r1
 800ddec:	f038 080f 	bics.w	r8, r8, #15
 800ddf0:	d04f      	beq.n	800de92 <_strtod_l+0x522>
 800ddf2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ddf6:	dd22      	ble.n	800de3e <_strtod_l+0x4ce>
 800ddf8:	2500      	movs	r5, #0
 800ddfa:	462e      	mov	r6, r5
 800ddfc:	9507      	str	r5, [sp, #28]
 800ddfe:	9505      	str	r5, [sp, #20]
 800de00:	2322      	movs	r3, #34	; 0x22
 800de02:	f8df b118 	ldr.w	fp, [pc, #280]	; 800df1c <_strtod_l+0x5ac>
 800de06:	6023      	str	r3, [r4, #0]
 800de08:	f04f 0a00 	mov.w	sl, #0
 800de0c:	9b07      	ldr	r3, [sp, #28]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	f43f adf2 	beq.w	800d9f8 <_strtod_l+0x88>
 800de14:	9918      	ldr	r1, [sp, #96]	; 0x60
 800de16:	4620      	mov	r0, r4
 800de18:	f002 f970 	bl	80100fc <_Bfree>
 800de1c:	9905      	ldr	r1, [sp, #20]
 800de1e:	4620      	mov	r0, r4
 800de20:	f002 f96c 	bl	80100fc <_Bfree>
 800de24:	4631      	mov	r1, r6
 800de26:	4620      	mov	r0, r4
 800de28:	f002 f968 	bl	80100fc <_Bfree>
 800de2c:	9907      	ldr	r1, [sp, #28]
 800de2e:	4620      	mov	r0, r4
 800de30:	f002 f964 	bl	80100fc <_Bfree>
 800de34:	4629      	mov	r1, r5
 800de36:	4620      	mov	r0, r4
 800de38:	f002 f960 	bl	80100fc <_Bfree>
 800de3c:	e5dc      	b.n	800d9f8 <_strtod_l+0x88>
 800de3e:	4b36      	ldr	r3, [pc, #216]	; (800df18 <_strtod_l+0x5a8>)
 800de40:	9304      	str	r3, [sp, #16]
 800de42:	2300      	movs	r3, #0
 800de44:	ea4f 1828 	mov.w	r8, r8, asr #4
 800de48:	4650      	mov	r0, sl
 800de4a:	4659      	mov	r1, fp
 800de4c:	4699      	mov	r9, r3
 800de4e:	f1b8 0f01 	cmp.w	r8, #1
 800de52:	dc21      	bgt.n	800de98 <_strtod_l+0x528>
 800de54:	b10b      	cbz	r3, 800de5a <_strtod_l+0x4ea>
 800de56:	4682      	mov	sl, r0
 800de58:	468b      	mov	fp, r1
 800de5a:	4b2f      	ldr	r3, [pc, #188]	; (800df18 <_strtod_l+0x5a8>)
 800de5c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800de60:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800de64:	4652      	mov	r2, sl
 800de66:	465b      	mov	r3, fp
 800de68:	e9d9 0100 	ldrd	r0, r1, [r9]
 800de6c:	f7f2 fbec 	bl	8000648 <__aeabi_dmul>
 800de70:	4b2a      	ldr	r3, [pc, #168]	; (800df1c <_strtod_l+0x5ac>)
 800de72:	460a      	mov	r2, r1
 800de74:	400b      	ands	r3, r1
 800de76:	492a      	ldr	r1, [pc, #168]	; (800df20 <_strtod_l+0x5b0>)
 800de78:	428b      	cmp	r3, r1
 800de7a:	4682      	mov	sl, r0
 800de7c:	d8bc      	bhi.n	800ddf8 <_strtod_l+0x488>
 800de7e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800de82:	428b      	cmp	r3, r1
 800de84:	bf86      	itte	hi
 800de86:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800df24 <_strtod_l+0x5b4>
 800de8a:	f04f 3aff 	movhi.w	sl, #4294967295
 800de8e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800de92:	2300      	movs	r3, #0
 800de94:	9304      	str	r3, [sp, #16]
 800de96:	e084      	b.n	800dfa2 <_strtod_l+0x632>
 800de98:	f018 0f01 	tst.w	r8, #1
 800de9c:	d005      	beq.n	800deaa <_strtod_l+0x53a>
 800de9e:	9b04      	ldr	r3, [sp, #16]
 800dea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea4:	f7f2 fbd0 	bl	8000648 <__aeabi_dmul>
 800dea8:	2301      	movs	r3, #1
 800deaa:	9a04      	ldr	r2, [sp, #16]
 800deac:	3208      	adds	r2, #8
 800deae:	f109 0901 	add.w	r9, r9, #1
 800deb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800deb6:	9204      	str	r2, [sp, #16]
 800deb8:	e7c9      	b.n	800de4e <_strtod_l+0x4de>
 800deba:	d0ea      	beq.n	800de92 <_strtod_l+0x522>
 800debc:	f1c8 0800 	rsb	r8, r8, #0
 800dec0:	f018 020f 	ands.w	r2, r8, #15
 800dec4:	d00a      	beq.n	800dedc <_strtod_l+0x56c>
 800dec6:	4b13      	ldr	r3, [pc, #76]	; (800df14 <_strtod_l+0x5a4>)
 800dec8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800decc:	4650      	mov	r0, sl
 800dece:	4659      	mov	r1, fp
 800ded0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded4:	f7f2 fce2 	bl	800089c <__aeabi_ddiv>
 800ded8:	4682      	mov	sl, r0
 800deda:	468b      	mov	fp, r1
 800dedc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800dee0:	d0d7      	beq.n	800de92 <_strtod_l+0x522>
 800dee2:	f1b8 0f1f 	cmp.w	r8, #31
 800dee6:	dd1f      	ble.n	800df28 <_strtod_l+0x5b8>
 800dee8:	2500      	movs	r5, #0
 800deea:	462e      	mov	r6, r5
 800deec:	9507      	str	r5, [sp, #28]
 800deee:	9505      	str	r5, [sp, #20]
 800def0:	2322      	movs	r3, #34	; 0x22
 800def2:	f04f 0a00 	mov.w	sl, #0
 800def6:	f04f 0b00 	mov.w	fp, #0
 800defa:	6023      	str	r3, [r4, #0]
 800defc:	e786      	b.n	800de0c <_strtod_l+0x49c>
 800defe:	bf00      	nop
 800df00:	08012aad 	.word	0x08012aad
 800df04:	08012ae8 	.word	0x08012ae8
 800df08:	08012aa5 	.word	0x08012aa5
 800df0c:	08012c2c 	.word	0x08012c2c
 800df10:	08012f40 	.word	0x08012f40
 800df14:	08012e20 	.word	0x08012e20
 800df18:	08012df8 	.word	0x08012df8
 800df1c:	7ff00000 	.word	0x7ff00000
 800df20:	7ca00000 	.word	0x7ca00000
 800df24:	7fefffff 	.word	0x7fefffff
 800df28:	f018 0310 	ands.w	r3, r8, #16
 800df2c:	bf18      	it	ne
 800df2e:	236a      	movne	r3, #106	; 0x6a
 800df30:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800e2e0 <_strtod_l+0x970>
 800df34:	9304      	str	r3, [sp, #16]
 800df36:	4650      	mov	r0, sl
 800df38:	4659      	mov	r1, fp
 800df3a:	2300      	movs	r3, #0
 800df3c:	f018 0f01 	tst.w	r8, #1
 800df40:	d004      	beq.n	800df4c <_strtod_l+0x5dc>
 800df42:	e9d9 2300 	ldrd	r2, r3, [r9]
 800df46:	f7f2 fb7f 	bl	8000648 <__aeabi_dmul>
 800df4a:	2301      	movs	r3, #1
 800df4c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800df50:	f109 0908 	add.w	r9, r9, #8
 800df54:	d1f2      	bne.n	800df3c <_strtod_l+0x5cc>
 800df56:	b10b      	cbz	r3, 800df5c <_strtod_l+0x5ec>
 800df58:	4682      	mov	sl, r0
 800df5a:	468b      	mov	fp, r1
 800df5c:	9b04      	ldr	r3, [sp, #16]
 800df5e:	b1c3      	cbz	r3, 800df92 <_strtod_l+0x622>
 800df60:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800df64:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800df68:	2b00      	cmp	r3, #0
 800df6a:	4659      	mov	r1, fp
 800df6c:	dd11      	ble.n	800df92 <_strtod_l+0x622>
 800df6e:	2b1f      	cmp	r3, #31
 800df70:	f340 8124 	ble.w	800e1bc <_strtod_l+0x84c>
 800df74:	2b34      	cmp	r3, #52	; 0x34
 800df76:	bfde      	ittt	le
 800df78:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800df7c:	f04f 33ff 	movle.w	r3, #4294967295
 800df80:	fa03 f202 	lslle.w	r2, r3, r2
 800df84:	f04f 0a00 	mov.w	sl, #0
 800df88:	bfcc      	ite	gt
 800df8a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800df8e:	ea02 0b01 	andle.w	fp, r2, r1
 800df92:	2200      	movs	r2, #0
 800df94:	2300      	movs	r3, #0
 800df96:	4650      	mov	r0, sl
 800df98:	4659      	mov	r1, fp
 800df9a:	f7f2 fdbd 	bl	8000b18 <__aeabi_dcmpeq>
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	d1a2      	bne.n	800dee8 <_strtod_l+0x578>
 800dfa2:	9b07      	ldr	r3, [sp, #28]
 800dfa4:	9300      	str	r3, [sp, #0]
 800dfa6:	9908      	ldr	r1, [sp, #32]
 800dfa8:	462b      	mov	r3, r5
 800dfaa:	463a      	mov	r2, r7
 800dfac:	4620      	mov	r0, r4
 800dfae:	f002 f90d 	bl	80101cc <__s2b>
 800dfb2:	9007      	str	r0, [sp, #28]
 800dfb4:	2800      	cmp	r0, #0
 800dfb6:	f43f af1f 	beq.w	800ddf8 <_strtod_l+0x488>
 800dfba:	9b05      	ldr	r3, [sp, #20]
 800dfbc:	1b9e      	subs	r6, r3, r6
 800dfbe:	9b06      	ldr	r3, [sp, #24]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	bfb4      	ite	lt
 800dfc4:	4633      	movlt	r3, r6
 800dfc6:	2300      	movge	r3, #0
 800dfc8:	930c      	str	r3, [sp, #48]	; 0x30
 800dfca:	9b06      	ldr	r3, [sp, #24]
 800dfcc:	2500      	movs	r5, #0
 800dfce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dfd2:	9312      	str	r3, [sp, #72]	; 0x48
 800dfd4:	462e      	mov	r6, r5
 800dfd6:	9b07      	ldr	r3, [sp, #28]
 800dfd8:	4620      	mov	r0, r4
 800dfda:	6859      	ldr	r1, [r3, #4]
 800dfdc:	f002 f84e 	bl	801007c <_Balloc>
 800dfe0:	9005      	str	r0, [sp, #20]
 800dfe2:	2800      	cmp	r0, #0
 800dfe4:	f43f af0c 	beq.w	800de00 <_strtod_l+0x490>
 800dfe8:	9b07      	ldr	r3, [sp, #28]
 800dfea:	691a      	ldr	r2, [r3, #16]
 800dfec:	3202      	adds	r2, #2
 800dfee:	f103 010c 	add.w	r1, r3, #12
 800dff2:	0092      	lsls	r2, r2, #2
 800dff4:	300c      	adds	r0, #12
 800dff6:	f7fe ff77 	bl	800cee8 <memcpy>
 800dffa:	ec4b ab10 	vmov	d0, sl, fp
 800dffe:	aa1a      	add	r2, sp, #104	; 0x68
 800e000:	a919      	add	r1, sp, #100	; 0x64
 800e002:	4620      	mov	r0, r4
 800e004:	f002 fc28 	bl	8010858 <__d2b>
 800e008:	ec4b ab18 	vmov	d8, sl, fp
 800e00c:	9018      	str	r0, [sp, #96]	; 0x60
 800e00e:	2800      	cmp	r0, #0
 800e010:	f43f aef6 	beq.w	800de00 <_strtod_l+0x490>
 800e014:	2101      	movs	r1, #1
 800e016:	4620      	mov	r0, r4
 800e018:	f002 f972 	bl	8010300 <__i2b>
 800e01c:	4606      	mov	r6, r0
 800e01e:	2800      	cmp	r0, #0
 800e020:	f43f aeee 	beq.w	800de00 <_strtod_l+0x490>
 800e024:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e026:	9904      	ldr	r1, [sp, #16]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	bfab      	itete	ge
 800e02c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800e02e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800e030:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e032:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800e036:	bfac      	ite	ge
 800e038:	eb03 0902 	addge.w	r9, r3, r2
 800e03c:	1ad7      	sublt	r7, r2, r3
 800e03e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e040:	eba3 0801 	sub.w	r8, r3, r1
 800e044:	4490      	add	r8, r2
 800e046:	4ba1      	ldr	r3, [pc, #644]	; (800e2cc <_strtod_l+0x95c>)
 800e048:	f108 38ff 	add.w	r8, r8, #4294967295
 800e04c:	4598      	cmp	r8, r3
 800e04e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e052:	f280 80c7 	bge.w	800e1e4 <_strtod_l+0x874>
 800e056:	eba3 0308 	sub.w	r3, r3, r8
 800e05a:	2b1f      	cmp	r3, #31
 800e05c:	eba2 0203 	sub.w	r2, r2, r3
 800e060:	f04f 0101 	mov.w	r1, #1
 800e064:	f300 80b1 	bgt.w	800e1ca <_strtod_l+0x85a>
 800e068:	fa01 f303 	lsl.w	r3, r1, r3
 800e06c:	930d      	str	r3, [sp, #52]	; 0x34
 800e06e:	2300      	movs	r3, #0
 800e070:	9308      	str	r3, [sp, #32]
 800e072:	eb09 0802 	add.w	r8, r9, r2
 800e076:	9b04      	ldr	r3, [sp, #16]
 800e078:	45c1      	cmp	r9, r8
 800e07a:	4417      	add	r7, r2
 800e07c:	441f      	add	r7, r3
 800e07e:	464b      	mov	r3, r9
 800e080:	bfa8      	it	ge
 800e082:	4643      	movge	r3, r8
 800e084:	42bb      	cmp	r3, r7
 800e086:	bfa8      	it	ge
 800e088:	463b      	movge	r3, r7
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	bfc2      	ittt	gt
 800e08e:	eba8 0803 	subgt.w	r8, r8, r3
 800e092:	1aff      	subgt	r7, r7, r3
 800e094:	eba9 0903 	subgt.w	r9, r9, r3
 800e098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	dd17      	ble.n	800e0ce <_strtod_l+0x75e>
 800e09e:	4631      	mov	r1, r6
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	f002 f9ec 	bl	8010480 <__pow5mult>
 800e0a8:	4606      	mov	r6, r0
 800e0aa:	2800      	cmp	r0, #0
 800e0ac:	f43f aea8 	beq.w	800de00 <_strtod_l+0x490>
 800e0b0:	4601      	mov	r1, r0
 800e0b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	f002 f939 	bl	801032c <__multiply>
 800e0ba:	900b      	str	r0, [sp, #44]	; 0x2c
 800e0bc:	2800      	cmp	r0, #0
 800e0be:	f43f ae9f 	beq.w	800de00 <_strtod_l+0x490>
 800e0c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	f002 f819 	bl	80100fc <_Bfree>
 800e0ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0cc:	9318      	str	r3, [sp, #96]	; 0x60
 800e0ce:	f1b8 0f00 	cmp.w	r8, #0
 800e0d2:	f300 808c 	bgt.w	800e1ee <_strtod_l+0x87e>
 800e0d6:	9b06      	ldr	r3, [sp, #24]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	dd08      	ble.n	800e0ee <_strtod_l+0x77e>
 800e0dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e0de:	9905      	ldr	r1, [sp, #20]
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	f002 f9cd 	bl	8010480 <__pow5mult>
 800e0e6:	9005      	str	r0, [sp, #20]
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	f43f ae89 	beq.w	800de00 <_strtod_l+0x490>
 800e0ee:	2f00      	cmp	r7, #0
 800e0f0:	dd08      	ble.n	800e104 <_strtod_l+0x794>
 800e0f2:	9905      	ldr	r1, [sp, #20]
 800e0f4:	463a      	mov	r2, r7
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	f002 fa1c 	bl	8010534 <__lshift>
 800e0fc:	9005      	str	r0, [sp, #20]
 800e0fe:	2800      	cmp	r0, #0
 800e100:	f43f ae7e 	beq.w	800de00 <_strtod_l+0x490>
 800e104:	f1b9 0f00 	cmp.w	r9, #0
 800e108:	dd08      	ble.n	800e11c <_strtod_l+0x7ac>
 800e10a:	4631      	mov	r1, r6
 800e10c:	464a      	mov	r2, r9
 800e10e:	4620      	mov	r0, r4
 800e110:	f002 fa10 	bl	8010534 <__lshift>
 800e114:	4606      	mov	r6, r0
 800e116:	2800      	cmp	r0, #0
 800e118:	f43f ae72 	beq.w	800de00 <_strtod_l+0x490>
 800e11c:	9a05      	ldr	r2, [sp, #20]
 800e11e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e120:	4620      	mov	r0, r4
 800e122:	f002 fa93 	bl	801064c <__mdiff>
 800e126:	4605      	mov	r5, r0
 800e128:	2800      	cmp	r0, #0
 800e12a:	f43f ae69 	beq.w	800de00 <_strtod_l+0x490>
 800e12e:	68c3      	ldr	r3, [r0, #12]
 800e130:	930b      	str	r3, [sp, #44]	; 0x2c
 800e132:	2300      	movs	r3, #0
 800e134:	60c3      	str	r3, [r0, #12]
 800e136:	4631      	mov	r1, r6
 800e138:	f002 fa6c 	bl	8010614 <__mcmp>
 800e13c:	2800      	cmp	r0, #0
 800e13e:	da60      	bge.n	800e202 <_strtod_l+0x892>
 800e140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e142:	ea53 030a 	orrs.w	r3, r3, sl
 800e146:	f040 8082 	bne.w	800e24e <_strtod_l+0x8de>
 800e14a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d17d      	bne.n	800e24e <_strtod_l+0x8de>
 800e152:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e156:	0d1b      	lsrs	r3, r3, #20
 800e158:	051b      	lsls	r3, r3, #20
 800e15a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e15e:	d976      	bls.n	800e24e <_strtod_l+0x8de>
 800e160:	696b      	ldr	r3, [r5, #20]
 800e162:	b913      	cbnz	r3, 800e16a <_strtod_l+0x7fa>
 800e164:	692b      	ldr	r3, [r5, #16]
 800e166:	2b01      	cmp	r3, #1
 800e168:	dd71      	ble.n	800e24e <_strtod_l+0x8de>
 800e16a:	4629      	mov	r1, r5
 800e16c:	2201      	movs	r2, #1
 800e16e:	4620      	mov	r0, r4
 800e170:	f002 f9e0 	bl	8010534 <__lshift>
 800e174:	4631      	mov	r1, r6
 800e176:	4605      	mov	r5, r0
 800e178:	f002 fa4c 	bl	8010614 <__mcmp>
 800e17c:	2800      	cmp	r0, #0
 800e17e:	dd66      	ble.n	800e24e <_strtod_l+0x8de>
 800e180:	9904      	ldr	r1, [sp, #16]
 800e182:	4a53      	ldr	r2, [pc, #332]	; (800e2d0 <_strtod_l+0x960>)
 800e184:	465b      	mov	r3, fp
 800e186:	2900      	cmp	r1, #0
 800e188:	f000 8081 	beq.w	800e28e <_strtod_l+0x91e>
 800e18c:	ea02 010b 	and.w	r1, r2, fp
 800e190:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e194:	dc7b      	bgt.n	800e28e <_strtod_l+0x91e>
 800e196:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e19a:	f77f aea9 	ble.w	800def0 <_strtod_l+0x580>
 800e19e:	4b4d      	ldr	r3, [pc, #308]	; (800e2d4 <_strtod_l+0x964>)
 800e1a0:	4650      	mov	r0, sl
 800e1a2:	4659      	mov	r1, fp
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	f7f2 fa4f 	bl	8000648 <__aeabi_dmul>
 800e1aa:	460b      	mov	r3, r1
 800e1ac:	4303      	orrs	r3, r0
 800e1ae:	bf08      	it	eq
 800e1b0:	2322      	moveq	r3, #34	; 0x22
 800e1b2:	4682      	mov	sl, r0
 800e1b4:	468b      	mov	fp, r1
 800e1b6:	bf08      	it	eq
 800e1b8:	6023      	streq	r3, [r4, #0]
 800e1ba:	e62b      	b.n	800de14 <_strtod_l+0x4a4>
 800e1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e1c0:	fa02 f303 	lsl.w	r3, r2, r3
 800e1c4:	ea03 0a0a 	and.w	sl, r3, sl
 800e1c8:	e6e3      	b.n	800df92 <_strtod_l+0x622>
 800e1ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e1ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e1d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e1d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e1da:	fa01 f308 	lsl.w	r3, r1, r8
 800e1de:	9308      	str	r3, [sp, #32]
 800e1e0:	910d      	str	r1, [sp, #52]	; 0x34
 800e1e2:	e746      	b.n	800e072 <_strtod_l+0x702>
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	9308      	str	r3, [sp, #32]
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	930d      	str	r3, [sp, #52]	; 0x34
 800e1ec:	e741      	b.n	800e072 <_strtod_l+0x702>
 800e1ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e1f0:	4642      	mov	r2, r8
 800e1f2:	4620      	mov	r0, r4
 800e1f4:	f002 f99e 	bl	8010534 <__lshift>
 800e1f8:	9018      	str	r0, [sp, #96]	; 0x60
 800e1fa:	2800      	cmp	r0, #0
 800e1fc:	f47f af6b 	bne.w	800e0d6 <_strtod_l+0x766>
 800e200:	e5fe      	b.n	800de00 <_strtod_l+0x490>
 800e202:	465f      	mov	r7, fp
 800e204:	d16e      	bne.n	800e2e4 <_strtod_l+0x974>
 800e206:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e208:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e20c:	b342      	cbz	r2, 800e260 <_strtod_l+0x8f0>
 800e20e:	4a32      	ldr	r2, [pc, #200]	; (800e2d8 <_strtod_l+0x968>)
 800e210:	4293      	cmp	r3, r2
 800e212:	d128      	bne.n	800e266 <_strtod_l+0x8f6>
 800e214:	9b04      	ldr	r3, [sp, #16]
 800e216:	4651      	mov	r1, sl
 800e218:	b1eb      	cbz	r3, 800e256 <_strtod_l+0x8e6>
 800e21a:	4b2d      	ldr	r3, [pc, #180]	; (800e2d0 <_strtod_l+0x960>)
 800e21c:	403b      	ands	r3, r7
 800e21e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e222:	f04f 32ff 	mov.w	r2, #4294967295
 800e226:	d819      	bhi.n	800e25c <_strtod_l+0x8ec>
 800e228:	0d1b      	lsrs	r3, r3, #20
 800e22a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e22e:	fa02 f303 	lsl.w	r3, r2, r3
 800e232:	4299      	cmp	r1, r3
 800e234:	d117      	bne.n	800e266 <_strtod_l+0x8f6>
 800e236:	4b29      	ldr	r3, [pc, #164]	; (800e2dc <_strtod_l+0x96c>)
 800e238:	429f      	cmp	r7, r3
 800e23a:	d102      	bne.n	800e242 <_strtod_l+0x8d2>
 800e23c:	3101      	adds	r1, #1
 800e23e:	f43f addf 	beq.w	800de00 <_strtod_l+0x490>
 800e242:	4b23      	ldr	r3, [pc, #140]	; (800e2d0 <_strtod_l+0x960>)
 800e244:	403b      	ands	r3, r7
 800e246:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e24a:	f04f 0a00 	mov.w	sl, #0
 800e24e:	9b04      	ldr	r3, [sp, #16]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d1a4      	bne.n	800e19e <_strtod_l+0x82e>
 800e254:	e5de      	b.n	800de14 <_strtod_l+0x4a4>
 800e256:	f04f 33ff 	mov.w	r3, #4294967295
 800e25a:	e7ea      	b.n	800e232 <_strtod_l+0x8c2>
 800e25c:	4613      	mov	r3, r2
 800e25e:	e7e8      	b.n	800e232 <_strtod_l+0x8c2>
 800e260:	ea53 030a 	orrs.w	r3, r3, sl
 800e264:	d08c      	beq.n	800e180 <_strtod_l+0x810>
 800e266:	9b08      	ldr	r3, [sp, #32]
 800e268:	b1db      	cbz	r3, 800e2a2 <_strtod_l+0x932>
 800e26a:	423b      	tst	r3, r7
 800e26c:	d0ef      	beq.n	800e24e <_strtod_l+0x8de>
 800e26e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e270:	9a04      	ldr	r2, [sp, #16]
 800e272:	4650      	mov	r0, sl
 800e274:	4659      	mov	r1, fp
 800e276:	b1c3      	cbz	r3, 800e2aa <_strtod_l+0x93a>
 800e278:	f7ff fb5e 	bl	800d938 <sulp>
 800e27c:	4602      	mov	r2, r0
 800e27e:	460b      	mov	r3, r1
 800e280:	ec51 0b18 	vmov	r0, r1, d8
 800e284:	f7f2 f82a 	bl	80002dc <__adddf3>
 800e288:	4682      	mov	sl, r0
 800e28a:	468b      	mov	fp, r1
 800e28c:	e7df      	b.n	800e24e <_strtod_l+0x8de>
 800e28e:	4013      	ands	r3, r2
 800e290:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e294:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e298:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e29c:	f04f 3aff 	mov.w	sl, #4294967295
 800e2a0:	e7d5      	b.n	800e24e <_strtod_l+0x8de>
 800e2a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2a4:	ea13 0f0a 	tst.w	r3, sl
 800e2a8:	e7e0      	b.n	800e26c <_strtod_l+0x8fc>
 800e2aa:	f7ff fb45 	bl	800d938 <sulp>
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	ec51 0b18 	vmov	r0, r1, d8
 800e2b6:	f7f2 f80f 	bl	80002d8 <__aeabi_dsub>
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	2300      	movs	r3, #0
 800e2be:	4682      	mov	sl, r0
 800e2c0:	468b      	mov	fp, r1
 800e2c2:	f7f2 fc29 	bl	8000b18 <__aeabi_dcmpeq>
 800e2c6:	2800      	cmp	r0, #0
 800e2c8:	d0c1      	beq.n	800e24e <_strtod_l+0x8de>
 800e2ca:	e611      	b.n	800def0 <_strtod_l+0x580>
 800e2cc:	fffffc02 	.word	0xfffffc02
 800e2d0:	7ff00000 	.word	0x7ff00000
 800e2d4:	39500000 	.word	0x39500000
 800e2d8:	000fffff 	.word	0x000fffff
 800e2dc:	7fefffff 	.word	0x7fefffff
 800e2e0:	08012b00 	.word	0x08012b00
 800e2e4:	4631      	mov	r1, r6
 800e2e6:	4628      	mov	r0, r5
 800e2e8:	f002 fb12 	bl	8010910 <__ratio>
 800e2ec:	ec59 8b10 	vmov	r8, r9, d0
 800e2f0:	ee10 0a10 	vmov	r0, s0
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e2fa:	4649      	mov	r1, r9
 800e2fc:	f7f2 fc20 	bl	8000b40 <__aeabi_dcmple>
 800e300:	2800      	cmp	r0, #0
 800e302:	d07a      	beq.n	800e3fa <_strtod_l+0xa8a>
 800e304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e306:	2b00      	cmp	r3, #0
 800e308:	d04a      	beq.n	800e3a0 <_strtod_l+0xa30>
 800e30a:	4b95      	ldr	r3, [pc, #596]	; (800e560 <_strtod_l+0xbf0>)
 800e30c:	2200      	movs	r2, #0
 800e30e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e312:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e560 <_strtod_l+0xbf0>
 800e316:	f04f 0800 	mov.w	r8, #0
 800e31a:	4b92      	ldr	r3, [pc, #584]	; (800e564 <_strtod_l+0xbf4>)
 800e31c:	403b      	ands	r3, r7
 800e31e:	930d      	str	r3, [sp, #52]	; 0x34
 800e320:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e322:	4b91      	ldr	r3, [pc, #580]	; (800e568 <_strtod_l+0xbf8>)
 800e324:	429a      	cmp	r2, r3
 800e326:	f040 80b0 	bne.w	800e48a <_strtod_l+0xb1a>
 800e32a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e32e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e332:	ec4b ab10 	vmov	d0, sl, fp
 800e336:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e33a:	f002 fa11 	bl	8010760 <__ulp>
 800e33e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e342:	ec53 2b10 	vmov	r2, r3, d0
 800e346:	f7f2 f97f 	bl	8000648 <__aeabi_dmul>
 800e34a:	4652      	mov	r2, sl
 800e34c:	465b      	mov	r3, fp
 800e34e:	f7f1 ffc5 	bl	80002dc <__adddf3>
 800e352:	460b      	mov	r3, r1
 800e354:	4983      	ldr	r1, [pc, #524]	; (800e564 <_strtod_l+0xbf4>)
 800e356:	4a85      	ldr	r2, [pc, #532]	; (800e56c <_strtod_l+0xbfc>)
 800e358:	4019      	ands	r1, r3
 800e35a:	4291      	cmp	r1, r2
 800e35c:	4682      	mov	sl, r0
 800e35e:	d960      	bls.n	800e422 <_strtod_l+0xab2>
 800e360:	ee18 3a90 	vmov	r3, s17
 800e364:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e368:	4293      	cmp	r3, r2
 800e36a:	d104      	bne.n	800e376 <_strtod_l+0xa06>
 800e36c:	ee18 3a10 	vmov	r3, s16
 800e370:	3301      	adds	r3, #1
 800e372:	f43f ad45 	beq.w	800de00 <_strtod_l+0x490>
 800e376:	f8df b200 	ldr.w	fp, [pc, #512]	; 800e578 <_strtod_l+0xc08>
 800e37a:	f04f 3aff 	mov.w	sl, #4294967295
 800e37e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e380:	4620      	mov	r0, r4
 800e382:	f001 febb 	bl	80100fc <_Bfree>
 800e386:	9905      	ldr	r1, [sp, #20]
 800e388:	4620      	mov	r0, r4
 800e38a:	f001 feb7 	bl	80100fc <_Bfree>
 800e38e:	4631      	mov	r1, r6
 800e390:	4620      	mov	r0, r4
 800e392:	f001 feb3 	bl	80100fc <_Bfree>
 800e396:	4629      	mov	r1, r5
 800e398:	4620      	mov	r0, r4
 800e39a:	f001 feaf 	bl	80100fc <_Bfree>
 800e39e:	e61a      	b.n	800dfd6 <_strtod_l+0x666>
 800e3a0:	f1ba 0f00 	cmp.w	sl, #0
 800e3a4:	d11b      	bne.n	800e3de <_strtod_l+0xa6e>
 800e3a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e3aa:	b9f3      	cbnz	r3, 800e3ea <_strtod_l+0xa7a>
 800e3ac:	4b6c      	ldr	r3, [pc, #432]	; (800e560 <_strtod_l+0xbf0>)
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	4640      	mov	r0, r8
 800e3b2:	4649      	mov	r1, r9
 800e3b4:	f7f2 fbba 	bl	8000b2c <__aeabi_dcmplt>
 800e3b8:	b9d0      	cbnz	r0, 800e3f0 <_strtod_l+0xa80>
 800e3ba:	4640      	mov	r0, r8
 800e3bc:	4649      	mov	r1, r9
 800e3be:	4b6c      	ldr	r3, [pc, #432]	; (800e570 <_strtod_l+0xc00>)
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	f7f2 f941 	bl	8000648 <__aeabi_dmul>
 800e3c6:	4680      	mov	r8, r0
 800e3c8:	4689      	mov	r9, r1
 800e3ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e3ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e3d2:	9315      	str	r3, [sp, #84]	; 0x54
 800e3d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e3d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e3dc:	e79d      	b.n	800e31a <_strtod_l+0x9aa>
 800e3de:	f1ba 0f01 	cmp.w	sl, #1
 800e3e2:	d102      	bne.n	800e3ea <_strtod_l+0xa7a>
 800e3e4:	2f00      	cmp	r7, #0
 800e3e6:	f43f ad83 	beq.w	800def0 <_strtod_l+0x580>
 800e3ea:	4b62      	ldr	r3, [pc, #392]	; (800e574 <_strtod_l+0xc04>)
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	e78e      	b.n	800e30e <_strtod_l+0x99e>
 800e3f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800e570 <_strtod_l+0xc00>
 800e3f4:	f04f 0800 	mov.w	r8, #0
 800e3f8:	e7e7      	b.n	800e3ca <_strtod_l+0xa5a>
 800e3fa:	4b5d      	ldr	r3, [pc, #372]	; (800e570 <_strtod_l+0xc00>)
 800e3fc:	4640      	mov	r0, r8
 800e3fe:	4649      	mov	r1, r9
 800e400:	2200      	movs	r2, #0
 800e402:	f7f2 f921 	bl	8000648 <__aeabi_dmul>
 800e406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e408:	4680      	mov	r8, r0
 800e40a:	4689      	mov	r9, r1
 800e40c:	b933      	cbnz	r3, 800e41c <_strtod_l+0xaac>
 800e40e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e412:	900e      	str	r0, [sp, #56]	; 0x38
 800e414:	930f      	str	r3, [sp, #60]	; 0x3c
 800e416:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e41a:	e7dd      	b.n	800e3d8 <_strtod_l+0xa68>
 800e41c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800e420:	e7f9      	b.n	800e416 <_strtod_l+0xaa6>
 800e422:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e426:	9b04      	ldr	r3, [sp, #16]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d1a8      	bne.n	800e37e <_strtod_l+0xa0e>
 800e42c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e430:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e432:	0d1b      	lsrs	r3, r3, #20
 800e434:	051b      	lsls	r3, r3, #20
 800e436:	429a      	cmp	r2, r3
 800e438:	d1a1      	bne.n	800e37e <_strtod_l+0xa0e>
 800e43a:	4640      	mov	r0, r8
 800e43c:	4649      	mov	r1, r9
 800e43e:	f7f2 fc63 	bl	8000d08 <__aeabi_d2lz>
 800e442:	f7f2 f8d3 	bl	80005ec <__aeabi_l2d>
 800e446:	4602      	mov	r2, r0
 800e448:	460b      	mov	r3, r1
 800e44a:	4640      	mov	r0, r8
 800e44c:	4649      	mov	r1, r9
 800e44e:	f7f1 ff43 	bl	80002d8 <__aeabi_dsub>
 800e452:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e454:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e458:	ea43 030a 	orr.w	r3, r3, sl
 800e45c:	4313      	orrs	r3, r2
 800e45e:	4680      	mov	r8, r0
 800e460:	4689      	mov	r9, r1
 800e462:	d055      	beq.n	800e510 <_strtod_l+0xba0>
 800e464:	a336      	add	r3, pc, #216	; (adr r3, 800e540 <_strtod_l+0xbd0>)
 800e466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46a:	f7f2 fb5f 	bl	8000b2c <__aeabi_dcmplt>
 800e46e:	2800      	cmp	r0, #0
 800e470:	f47f acd0 	bne.w	800de14 <_strtod_l+0x4a4>
 800e474:	a334      	add	r3, pc, #208	; (adr r3, 800e548 <_strtod_l+0xbd8>)
 800e476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e47a:	4640      	mov	r0, r8
 800e47c:	4649      	mov	r1, r9
 800e47e:	f7f2 fb73 	bl	8000b68 <__aeabi_dcmpgt>
 800e482:	2800      	cmp	r0, #0
 800e484:	f43f af7b 	beq.w	800e37e <_strtod_l+0xa0e>
 800e488:	e4c4      	b.n	800de14 <_strtod_l+0x4a4>
 800e48a:	9b04      	ldr	r3, [sp, #16]
 800e48c:	b333      	cbz	r3, 800e4dc <_strtod_l+0xb6c>
 800e48e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e490:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e494:	d822      	bhi.n	800e4dc <_strtod_l+0xb6c>
 800e496:	a32e      	add	r3, pc, #184	; (adr r3, 800e550 <_strtod_l+0xbe0>)
 800e498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49c:	4640      	mov	r0, r8
 800e49e:	4649      	mov	r1, r9
 800e4a0:	f7f2 fb4e 	bl	8000b40 <__aeabi_dcmple>
 800e4a4:	b1a0      	cbz	r0, 800e4d0 <_strtod_l+0xb60>
 800e4a6:	4649      	mov	r1, r9
 800e4a8:	4640      	mov	r0, r8
 800e4aa:	f7f2 fba5 	bl	8000bf8 <__aeabi_d2uiz>
 800e4ae:	2801      	cmp	r0, #1
 800e4b0:	bf38      	it	cc
 800e4b2:	2001      	movcc	r0, #1
 800e4b4:	f7f2 f84e 	bl	8000554 <__aeabi_ui2d>
 800e4b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4ba:	4680      	mov	r8, r0
 800e4bc:	4689      	mov	r9, r1
 800e4be:	bb23      	cbnz	r3, 800e50a <_strtod_l+0xb9a>
 800e4c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e4c4:	9010      	str	r0, [sp, #64]	; 0x40
 800e4c6:	9311      	str	r3, [sp, #68]	; 0x44
 800e4c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e4cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4d4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e4d8:	1a9b      	subs	r3, r3, r2
 800e4da:	9309      	str	r3, [sp, #36]	; 0x24
 800e4dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e4e0:	eeb0 0a48 	vmov.f32	s0, s16
 800e4e4:	eef0 0a68 	vmov.f32	s1, s17
 800e4e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e4ec:	f002 f938 	bl	8010760 <__ulp>
 800e4f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e4f4:	ec53 2b10 	vmov	r2, r3, d0
 800e4f8:	f7f2 f8a6 	bl	8000648 <__aeabi_dmul>
 800e4fc:	ec53 2b18 	vmov	r2, r3, d8
 800e500:	f7f1 feec 	bl	80002dc <__adddf3>
 800e504:	4682      	mov	sl, r0
 800e506:	468b      	mov	fp, r1
 800e508:	e78d      	b.n	800e426 <_strtod_l+0xab6>
 800e50a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800e50e:	e7db      	b.n	800e4c8 <_strtod_l+0xb58>
 800e510:	a311      	add	r3, pc, #68	; (adr r3, 800e558 <_strtod_l+0xbe8>)
 800e512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e516:	f7f2 fb09 	bl	8000b2c <__aeabi_dcmplt>
 800e51a:	e7b2      	b.n	800e482 <_strtod_l+0xb12>
 800e51c:	2300      	movs	r3, #0
 800e51e:	930a      	str	r3, [sp, #40]	; 0x28
 800e520:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e522:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e524:	6013      	str	r3, [r2, #0]
 800e526:	f7ff ba6b 	b.w	800da00 <_strtod_l+0x90>
 800e52a:	2a65      	cmp	r2, #101	; 0x65
 800e52c:	f43f ab5f 	beq.w	800dbee <_strtod_l+0x27e>
 800e530:	2a45      	cmp	r2, #69	; 0x45
 800e532:	f43f ab5c 	beq.w	800dbee <_strtod_l+0x27e>
 800e536:	2301      	movs	r3, #1
 800e538:	f7ff bb94 	b.w	800dc64 <_strtod_l+0x2f4>
 800e53c:	f3af 8000 	nop.w
 800e540:	94a03595 	.word	0x94a03595
 800e544:	3fdfffff 	.word	0x3fdfffff
 800e548:	35afe535 	.word	0x35afe535
 800e54c:	3fe00000 	.word	0x3fe00000
 800e550:	ffc00000 	.word	0xffc00000
 800e554:	41dfffff 	.word	0x41dfffff
 800e558:	94a03595 	.word	0x94a03595
 800e55c:	3fcfffff 	.word	0x3fcfffff
 800e560:	3ff00000 	.word	0x3ff00000
 800e564:	7ff00000 	.word	0x7ff00000
 800e568:	7fe00000 	.word	0x7fe00000
 800e56c:	7c9fffff 	.word	0x7c9fffff
 800e570:	3fe00000 	.word	0x3fe00000
 800e574:	bff00000 	.word	0xbff00000
 800e578:	7fefffff 	.word	0x7fefffff

0800e57c <strtod>:
 800e57c:	460a      	mov	r2, r1
 800e57e:	4601      	mov	r1, r0
 800e580:	4802      	ldr	r0, [pc, #8]	; (800e58c <strtod+0x10>)
 800e582:	4b03      	ldr	r3, [pc, #12]	; (800e590 <strtod+0x14>)
 800e584:	6800      	ldr	r0, [r0, #0]
 800e586:	f7ff b9f3 	b.w	800d970 <_strtod_l>
 800e58a:	bf00      	nop
 800e58c:	2000002c 	.word	0x2000002c
 800e590:	20000094 	.word	0x20000094

0800e594 <_strtol_l.constprop.0>:
 800e594:	2b01      	cmp	r3, #1
 800e596:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e59a:	d001      	beq.n	800e5a0 <_strtol_l.constprop.0+0xc>
 800e59c:	2b24      	cmp	r3, #36	; 0x24
 800e59e:	d906      	bls.n	800e5ae <_strtol_l.constprop.0+0x1a>
 800e5a0:	f7fe fc78 	bl	800ce94 <__errno>
 800e5a4:	2316      	movs	r3, #22
 800e5a6:	6003      	str	r3, [r0, #0]
 800e5a8:	2000      	movs	r0, #0
 800e5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e694 <_strtol_l.constprop.0+0x100>
 800e5b2:	460d      	mov	r5, r1
 800e5b4:	462e      	mov	r6, r5
 800e5b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e5ba:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e5be:	f017 0708 	ands.w	r7, r7, #8
 800e5c2:	d1f7      	bne.n	800e5b4 <_strtol_l.constprop.0+0x20>
 800e5c4:	2c2d      	cmp	r4, #45	; 0x2d
 800e5c6:	d132      	bne.n	800e62e <_strtol_l.constprop.0+0x9a>
 800e5c8:	782c      	ldrb	r4, [r5, #0]
 800e5ca:	2701      	movs	r7, #1
 800e5cc:	1cb5      	adds	r5, r6, #2
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d05b      	beq.n	800e68a <_strtol_l.constprop.0+0xf6>
 800e5d2:	2b10      	cmp	r3, #16
 800e5d4:	d109      	bne.n	800e5ea <_strtol_l.constprop.0+0x56>
 800e5d6:	2c30      	cmp	r4, #48	; 0x30
 800e5d8:	d107      	bne.n	800e5ea <_strtol_l.constprop.0+0x56>
 800e5da:	782c      	ldrb	r4, [r5, #0]
 800e5dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e5e0:	2c58      	cmp	r4, #88	; 0x58
 800e5e2:	d14d      	bne.n	800e680 <_strtol_l.constprop.0+0xec>
 800e5e4:	786c      	ldrb	r4, [r5, #1]
 800e5e6:	2310      	movs	r3, #16
 800e5e8:	3502      	adds	r5, #2
 800e5ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e5ee:	f108 38ff 	add.w	r8, r8, #4294967295
 800e5f2:	f04f 0c00 	mov.w	ip, #0
 800e5f6:	fbb8 f9f3 	udiv	r9, r8, r3
 800e5fa:	4666      	mov	r6, ip
 800e5fc:	fb03 8a19 	mls	sl, r3, r9, r8
 800e600:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e604:	f1be 0f09 	cmp.w	lr, #9
 800e608:	d816      	bhi.n	800e638 <_strtol_l.constprop.0+0xa4>
 800e60a:	4674      	mov	r4, lr
 800e60c:	42a3      	cmp	r3, r4
 800e60e:	dd24      	ble.n	800e65a <_strtol_l.constprop.0+0xc6>
 800e610:	f1bc 0f00 	cmp.w	ip, #0
 800e614:	db1e      	blt.n	800e654 <_strtol_l.constprop.0+0xc0>
 800e616:	45b1      	cmp	r9, r6
 800e618:	d31c      	bcc.n	800e654 <_strtol_l.constprop.0+0xc0>
 800e61a:	d101      	bne.n	800e620 <_strtol_l.constprop.0+0x8c>
 800e61c:	45a2      	cmp	sl, r4
 800e61e:	db19      	blt.n	800e654 <_strtol_l.constprop.0+0xc0>
 800e620:	fb06 4603 	mla	r6, r6, r3, r4
 800e624:	f04f 0c01 	mov.w	ip, #1
 800e628:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e62c:	e7e8      	b.n	800e600 <_strtol_l.constprop.0+0x6c>
 800e62e:	2c2b      	cmp	r4, #43	; 0x2b
 800e630:	bf04      	itt	eq
 800e632:	782c      	ldrbeq	r4, [r5, #0]
 800e634:	1cb5      	addeq	r5, r6, #2
 800e636:	e7ca      	b.n	800e5ce <_strtol_l.constprop.0+0x3a>
 800e638:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e63c:	f1be 0f19 	cmp.w	lr, #25
 800e640:	d801      	bhi.n	800e646 <_strtol_l.constprop.0+0xb2>
 800e642:	3c37      	subs	r4, #55	; 0x37
 800e644:	e7e2      	b.n	800e60c <_strtol_l.constprop.0+0x78>
 800e646:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e64a:	f1be 0f19 	cmp.w	lr, #25
 800e64e:	d804      	bhi.n	800e65a <_strtol_l.constprop.0+0xc6>
 800e650:	3c57      	subs	r4, #87	; 0x57
 800e652:	e7db      	b.n	800e60c <_strtol_l.constprop.0+0x78>
 800e654:	f04f 3cff 	mov.w	ip, #4294967295
 800e658:	e7e6      	b.n	800e628 <_strtol_l.constprop.0+0x94>
 800e65a:	f1bc 0f00 	cmp.w	ip, #0
 800e65e:	da05      	bge.n	800e66c <_strtol_l.constprop.0+0xd8>
 800e660:	2322      	movs	r3, #34	; 0x22
 800e662:	6003      	str	r3, [r0, #0]
 800e664:	4646      	mov	r6, r8
 800e666:	b942      	cbnz	r2, 800e67a <_strtol_l.constprop.0+0xe6>
 800e668:	4630      	mov	r0, r6
 800e66a:	e79e      	b.n	800e5aa <_strtol_l.constprop.0+0x16>
 800e66c:	b107      	cbz	r7, 800e670 <_strtol_l.constprop.0+0xdc>
 800e66e:	4276      	negs	r6, r6
 800e670:	2a00      	cmp	r2, #0
 800e672:	d0f9      	beq.n	800e668 <_strtol_l.constprop.0+0xd4>
 800e674:	f1bc 0f00 	cmp.w	ip, #0
 800e678:	d000      	beq.n	800e67c <_strtol_l.constprop.0+0xe8>
 800e67a:	1e69      	subs	r1, r5, #1
 800e67c:	6011      	str	r1, [r2, #0]
 800e67e:	e7f3      	b.n	800e668 <_strtol_l.constprop.0+0xd4>
 800e680:	2430      	movs	r4, #48	; 0x30
 800e682:	2b00      	cmp	r3, #0
 800e684:	d1b1      	bne.n	800e5ea <_strtol_l.constprop.0+0x56>
 800e686:	2308      	movs	r3, #8
 800e688:	e7af      	b.n	800e5ea <_strtol_l.constprop.0+0x56>
 800e68a:	2c30      	cmp	r4, #48	; 0x30
 800e68c:	d0a5      	beq.n	800e5da <_strtol_l.constprop.0+0x46>
 800e68e:	230a      	movs	r3, #10
 800e690:	e7ab      	b.n	800e5ea <_strtol_l.constprop.0+0x56>
 800e692:	bf00      	nop
 800e694:	08012b29 	.word	0x08012b29

0800e698 <strtol>:
 800e698:	4613      	mov	r3, r2
 800e69a:	460a      	mov	r2, r1
 800e69c:	4601      	mov	r1, r0
 800e69e:	4802      	ldr	r0, [pc, #8]	; (800e6a8 <strtol+0x10>)
 800e6a0:	6800      	ldr	r0, [r0, #0]
 800e6a2:	f7ff bf77 	b.w	800e594 <_strtol_l.constprop.0>
 800e6a6:	bf00      	nop
 800e6a8:	2000002c 	.word	0x2000002c

0800e6ac <__swbuf_r>:
 800e6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ae:	460e      	mov	r6, r1
 800e6b0:	4614      	mov	r4, r2
 800e6b2:	4605      	mov	r5, r0
 800e6b4:	b118      	cbz	r0, 800e6be <__swbuf_r+0x12>
 800e6b6:	6983      	ldr	r3, [r0, #24]
 800e6b8:	b90b      	cbnz	r3, 800e6be <__swbuf_r+0x12>
 800e6ba:	f001 f84d 	bl	800f758 <__sinit>
 800e6be:	4b21      	ldr	r3, [pc, #132]	; (800e744 <__swbuf_r+0x98>)
 800e6c0:	429c      	cmp	r4, r3
 800e6c2:	d12b      	bne.n	800e71c <__swbuf_r+0x70>
 800e6c4:	686c      	ldr	r4, [r5, #4]
 800e6c6:	69a3      	ldr	r3, [r4, #24]
 800e6c8:	60a3      	str	r3, [r4, #8]
 800e6ca:	89a3      	ldrh	r3, [r4, #12]
 800e6cc:	071a      	lsls	r2, r3, #28
 800e6ce:	d52f      	bpl.n	800e730 <__swbuf_r+0x84>
 800e6d0:	6923      	ldr	r3, [r4, #16]
 800e6d2:	b36b      	cbz	r3, 800e730 <__swbuf_r+0x84>
 800e6d4:	6923      	ldr	r3, [r4, #16]
 800e6d6:	6820      	ldr	r0, [r4, #0]
 800e6d8:	1ac0      	subs	r0, r0, r3
 800e6da:	6963      	ldr	r3, [r4, #20]
 800e6dc:	b2f6      	uxtb	r6, r6
 800e6de:	4283      	cmp	r3, r0
 800e6e0:	4637      	mov	r7, r6
 800e6e2:	dc04      	bgt.n	800e6ee <__swbuf_r+0x42>
 800e6e4:	4621      	mov	r1, r4
 800e6e6:	4628      	mov	r0, r5
 800e6e8:	f000 ffa2 	bl	800f630 <_fflush_r>
 800e6ec:	bb30      	cbnz	r0, 800e73c <__swbuf_r+0x90>
 800e6ee:	68a3      	ldr	r3, [r4, #8]
 800e6f0:	3b01      	subs	r3, #1
 800e6f2:	60a3      	str	r3, [r4, #8]
 800e6f4:	6823      	ldr	r3, [r4, #0]
 800e6f6:	1c5a      	adds	r2, r3, #1
 800e6f8:	6022      	str	r2, [r4, #0]
 800e6fa:	701e      	strb	r6, [r3, #0]
 800e6fc:	6963      	ldr	r3, [r4, #20]
 800e6fe:	3001      	adds	r0, #1
 800e700:	4283      	cmp	r3, r0
 800e702:	d004      	beq.n	800e70e <__swbuf_r+0x62>
 800e704:	89a3      	ldrh	r3, [r4, #12]
 800e706:	07db      	lsls	r3, r3, #31
 800e708:	d506      	bpl.n	800e718 <__swbuf_r+0x6c>
 800e70a:	2e0a      	cmp	r6, #10
 800e70c:	d104      	bne.n	800e718 <__swbuf_r+0x6c>
 800e70e:	4621      	mov	r1, r4
 800e710:	4628      	mov	r0, r5
 800e712:	f000 ff8d 	bl	800f630 <_fflush_r>
 800e716:	b988      	cbnz	r0, 800e73c <__swbuf_r+0x90>
 800e718:	4638      	mov	r0, r7
 800e71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e71c:	4b0a      	ldr	r3, [pc, #40]	; (800e748 <__swbuf_r+0x9c>)
 800e71e:	429c      	cmp	r4, r3
 800e720:	d101      	bne.n	800e726 <__swbuf_r+0x7a>
 800e722:	68ac      	ldr	r4, [r5, #8]
 800e724:	e7cf      	b.n	800e6c6 <__swbuf_r+0x1a>
 800e726:	4b09      	ldr	r3, [pc, #36]	; (800e74c <__swbuf_r+0xa0>)
 800e728:	429c      	cmp	r4, r3
 800e72a:	bf08      	it	eq
 800e72c:	68ec      	ldreq	r4, [r5, #12]
 800e72e:	e7ca      	b.n	800e6c6 <__swbuf_r+0x1a>
 800e730:	4621      	mov	r1, r4
 800e732:	4628      	mov	r0, r5
 800e734:	f000 f80c 	bl	800e750 <__swsetup_r>
 800e738:	2800      	cmp	r0, #0
 800e73a:	d0cb      	beq.n	800e6d4 <__swbuf_r+0x28>
 800e73c:	f04f 37ff 	mov.w	r7, #4294967295
 800e740:	e7ea      	b.n	800e718 <__swbuf_r+0x6c>
 800e742:	bf00      	nop
 800e744:	08012cdc 	.word	0x08012cdc
 800e748:	08012cfc 	.word	0x08012cfc
 800e74c:	08012cbc 	.word	0x08012cbc

0800e750 <__swsetup_r>:
 800e750:	4b32      	ldr	r3, [pc, #200]	; (800e81c <__swsetup_r+0xcc>)
 800e752:	b570      	push	{r4, r5, r6, lr}
 800e754:	681d      	ldr	r5, [r3, #0]
 800e756:	4606      	mov	r6, r0
 800e758:	460c      	mov	r4, r1
 800e75a:	b125      	cbz	r5, 800e766 <__swsetup_r+0x16>
 800e75c:	69ab      	ldr	r3, [r5, #24]
 800e75e:	b913      	cbnz	r3, 800e766 <__swsetup_r+0x16>
 800e760:	4628      	mov	r0, r5
 800e762:	f000 fff9 	bl	800f758 <__sinit>
 800e766:	4b2e      	ldr	r3, [pc, #184]	; (800e820 <__swsetup_r+0xd0>)
 800e768:	429c      	cmp	r4, r3
 800e76a:	d10f      	bne.n	800e78c <__swsetup_r+0x3c>
 800e76c:	686c      	ldr	r4, [r5, #4]
 800e76e:	89a3      	ldrh	r3, [r4, #12]
 800e770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e774:	0719      	lsls	r1, r3, #28
 800e776:	d42c      	bmi.n	800e7d2 <__swsetup_r+0x82>
 800e778:	06dd      	lsls	r5, r3, #27
 800e77a:	d411      	bmi.n	800e7a0 <__swsetup_r+0x50>
 800e77c:	2309      	movs	r3, #9
 800e77e:	6033      	str	r3, [r6, #0]
 800e780:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e784:	81a3      	strh	r3, [r4, #12]
 800e786:	f04f 30ff 	mov.w	r0, #4294967295
 800e78a:	e03e      	b.n	800e80a <__swsetup_r+0xba>
 800e78c:	4b25      	ldr	r3, [pc, #148]	; (800e824 <__swsetup_r+0xd4>)
 800e78e:	429c      	cmp	r4, r3
 800e790:	d101      	bne.n	800e796 <__swsetup_r+0x46>
 800e792:	68ac      	ldr	r4, [r5, #8]
 800e794:	e7eb      	b.n	800e76e <__swsetup_r+0x1e>
 800e796:	4b24      	ldr	r3, [pc, #144]	; (800e828 <__swsetup_r+0xd8>)
 800e798:	429c      	cmp	r4, r3
 800e79a:	bf08      	it	eq
 800e79c:	68ec      	ldreq	r4, [r5, #12]
 800e79e:	e7e6      	b.n	800e76e <__swsetup_r+0x1e>
 800e7a0:	0758      	lsls	r0, r3, #29
 800e7a2:	d512      	bpl.n	800e7ca <__swsetup_r+0x7a>
 800e7a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7a6:	b141      	cbz	r1, 800e7ba <__swsetup_r+0x6a>
 800e7a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7ac:	4299      	cmp	r1, r3
 800e7ae:	d002      	beq.n	800e7b6 <__swsetup_r+0x66>
 800e7b0:	4630      	mov	r0, r6
 800e7b2:	f002 f93b 	bl	8010a2c <_free_r>
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	6363      	str	r3, [r4, #52]	; 0x34
 800e7ba:	89a3      	ldrh	r3, [r4, #12]
 800e7bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e7c0:	81a3      	strh	r3, [r4, #12]
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	6063      	str	r3, [r4, #4]
 800e7c6:	6923      	ldr	r3, [r4, #16]
 800e7c8:	6023      	str	r3, [r4, #0]
 800e7ca:	89a3      	ldrh	r3, [r4, #12]
 800e7cc:	f043 0308 	orr.w	r3, r3, #8
 800e7d0:	81a3      	strh	r3, [r4, #12]
 800e7d2:	6923      	ldr	r3, [r4, #16]
 800e7d4:	b94b      	cbnz	r3, 800e7ea <__swsetup_r+0x9a>
 800e7d6:	89a3      	ldrh	r3, [r4, #12]
 800e7d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e7dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7e0:	d003      	beq.n	800e7ea <__swsetup_r+0x9a>
 800e7e2:	4621      	mov	r1, r4
 800e7e4:	4630      	mov	r0, r6
 800e7e6:	f001 fbef 	bl	800ffc8 <__smakebuf_r>
 800e7ea:	89a0      	ldrh	r0, [r4, #12]
 800e7ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e7f0:	f010 0301 	ands.w	r3, r0, #1
 800e7f4:	d00a      	beq.n	800e80c <__swsetup_r+0xbc>
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	60a3      	str	r3, [r4, #8]
 800e7fa:	6963      	ldr	r3, [r4, #20]
 800e7fc:	425b      	negs	r3, r3
 800e7fe:	61a3      	str	r3, [r4, #24]
 800e800:	6923      	ldr	r3, [r4, #16]
 800e802:	b943      	cbnz	r3, 800e816 <__swsetup_r+0xc6>
 800e804:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e808:	d1ba      	bne.n	800e780 <__swsetup_r+0x30>
 800e80a:	bd70      	pop	{r4, r5, r6, pc}
 800e80c:	0781      	lsls	r1, r0, #30
 800e80e:	bf58      	it	pl
 800e810:	6963      	ldrpl	r3, [r4, #20]
 800e812:	60a3      	str	r3, [r4, #8]
 800e814:	e7f4      	b.n	800e800 <__swsetup_r+0xb0>
 800e816:	2000      	movs	r0, #0
 800e818:	e7f7      	b.n	800e80a <__swsetup_r+0xba>
 800e81a:	bf00      	nop
 800e81c:	2000002c 	.word	0x2000002c
 800e820:	08012cdc 	.word	0x08012cdc
 800e824:	08012cfc 	.word	0x08012cfc
 800e828:	08012cbc 	.word	0x08012cbc

0800e82c <quorem>:
 800e82c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e830:	6903      	ldr	r3, [r0, #16]
 800e832:	690c      	ldr	r4, [r1, #16]
 800e834:	42a3      	cmp	r3, r4
 800e836:	4607      	mov	r7, r0
 800e838:	f2c0 8081 	blt.w	800e93e <quorem+0x112>
 800e83c:	3c01      	subs	r4, #1
 800e83e:	f101 0814 	add.w	r8, r1, #20
 800e842:	f100 0514 	add.w	r5, r0, #20
 800e846:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e84a:	9301      	str	r3, [sp, #4]
 800e84c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e850:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e854:	3301      	adds	r3, #1
 800e856:	429a      	cmp	r2, r3
 800e858:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e85c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e860:	fbb2 f6f3 	udiv	r6, r2, r3
 800e864:	d331      	bcc.n	800e8ca <quorem+0x9e>
 800e866:	f04f 0e00 	mov.w	lr, #0
 800e86a:	4640      	mov	r0, r8
 800e86c:	46ac      	mov	ip, r5
 800e86e:	46f2      	mov	sl, lr
 800e870:	f850 2b04 	ldr.w	r2, [r0], #4
 800e874:	b293      	uxth	r3, r2
 800e876:	fb06 e303 	mla	r3, r6, r3, lr
 800e87a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e87e:	b29b      	uxth	r3, r3
 800e880:	ebaa 0303 	sub.w	r3, sl, r3
 800e884:	f8dc a000 	ldr.w	sl, [ip]
 800e888:	0c12      	lsrs	r2, r2, #16
 800e88a:	fa13 f38a 	uxtah	r3, r3, sl
 800e88e:	fb06 e202 	mla	r2, r6, r2, lr
 800e892:	9300      	str	r3, [sp, #0]
 800e894:	9b00      	ldr	r3, [sp, #0]
 800e896:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e89a:	b292      	uxth	r2, r2
 800e89c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e8a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e8a4:	f8bd 3000 	ldrh.w	r3, [sp]
 800e8a8:	4581      	cmp	r9, r0
 800e8aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8ae:	f84c 3b04 	str.w	r3, [ip], #4
 800e8b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e8b6:	d2db      	bcs.n	800e870 <quorem+0x44>
 800e8b8:	f855 300b 	ldr.w	r3, [r5, fp]
 800e8bc:	b92b      	cbnz	r3, 800e8ca <quorem+0x9e>
 800e8be:	9b01      	ldr	r3, [sp, #4]
 800e8c0:	3b04      	subs	r3, #4
 800e8c2:	429d      	cmp	r5, r3
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	d32e      	bcc.n	800e926 <quorem+0xfa>
 800e8c8:	613c      	str	r4, [r7, #16]
 800e8ca:	4638      	mov	r0, r7
 800e8cc:	f001 fea2 	bl	8010614 <__mcmp>
 800e8d0:	2800      	cmp	r0, #0
 800e8d2:	db24      	blt.n	800e91e <quorem+0xf2>
 800e8d4:	3601      	adds	r6, #1
 800e8d6:	4628      	mov	r0, r5
 800e8d8:	f04f 0c00 	mov.w	ip, #0
 800e8dc:	f858 2b04 	ldr.w	r2, [r8], #4
 800e8e0:	f8d0 e000 	ldr.w	lr, [r0]
 800e8e4:	b293      	uxth	r3, r2
 800e8e6:	ebac 0303 	sub.w	r3, ip, r3
 800e8ea:	0c12      	lsrs	r2, r2, #16
 800e8ec:	fa13 f38e 	uxtah	r3, r3, lr
 800e8f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e8f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e8f8:	b29b      	uxth	r3, r3
 800e8fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8fe:	45c1      	cmp	r9, r8
 800e900:	f840 3b04 	str.w	r3, [r0], #4
 800e904:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e908:	d2e8      	bcs.n	800e8dc <quorem+0xb0>
 800e90a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e90e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e912:	b922      	cbnz	r2, 800e91e <quorem+0xf2>
 800e914:	3b04      	subs	r3, #4
 800e916:	429d      	cmp	r5, r3
 800e918:	461a      	mov	r2, r3
 800e91a:	d30a      	bcc.n	800e932 <quorem+0x106>
 800e91c:	613c      	str	r4, [r7, #16]
 800e91e:	4630      	mov	r0, r6
 800e920:	b003      	add	sp, #12
 800e922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e926:	6812      	ldr	r2, [r2, #0]
 800e928:	3b04      	subs	r3, #4
 800e92a:	2a00      	cmp	r2, #0
 800e92c:	d1cc      	bne.n	800e8c8 <quorem+0x9c>
 800e92e:	3c01      	subs	r4, #1
 800e930:	e7c7      	b.n	800e8c2 <quorem+0x96>
 800e932:	6812      	ldr	r2, [r2, #0]
 800e934:	3b04      	subs	r3, #4
 800e936:	2a00      	cmp	r2, #0
 800e938:	d1f0      	bne.n	800e91c <quorem+0xf0>
 800e93a:	3c01      	subs	r4, #1
 800e93c:	e7eb      	b.n	800e916 <quorem+0xea>
 800e93e:	2000      	movs	r0, #0
 800e940:	e7ee      	b.n	800e920 <quorem+0xf4>
 800e942:	0000      	movs	r0, r0
 800e944:	0000      	movs	r0, r0
	...

0800e948 <_dtoa_r>:
 800e948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e94c:	ed2d 8b04 	vpush	{d8-d9}
 800e950:	ec57 6b10 	vmov	r6, r7, d0
 800e954:	b093      	sub	sp, #76	; 0x4c
 800e956:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e958:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e95c:	9106      	str	r1, [sp, #24]
 800e95e:	ee10 aa10 	vmov	sl, s0
 800e962:	4604      	mov	r4, r0
 800e964:	9209      	str	r2, [sp, #36]	; 0x24
 800e966:	930c      	str	r3, [sp, #48]	; 0x30
 800e968:	46bb      	mov	fp, r7
 800e96a:	b975      	cbnz	r5, 800e98a <_dtoa_r+0x42>
 800e96c:	2010      	movs	r0, #16
 800e96e:	f001 fb6b 	bl	8010048 <malloc>
 800e972:	4602      	mov	r2, r0
 800e974:	6260      	str	r0, [r4, #36]	; 0x24
 800e976:	b920      	cbnz	r0, 800e982 <_dtoa_r+0x3a>
 800e978:	4ba7      	ldr	r3, [pc, #668]	; (800ec18 <_dtoa_r+0x2d0>)
 800e97a:	21ea      	movs	r1, #234	; 0xea
 800e97c:	48a7      	ldr	r0, [pc, #668]	; (800ec1c <_dtoa_r+0x2d4>)
 800e97e:	f002 fb23 	bl	8010fc8 <__assert_func>
 800e982:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e986:	6005      	str	r5, [r0, #0]
 800e988:	60c5      	str	r5, [r0, #12]
 800e98a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e98c:	6819      	ldr	r1, [r3, #0]
 800e98e:	b151      	cbz	r1, 800e9a6 <_dtoa_r+0x5e>
 800e990:	685a      	ldr	r2, [r3, #4]
 800e992:	604a      	str	r2, [r1, #4]
 800e994:	2301      	movs	r3, #1
 800e996:	4093      	lsls	r3, r2
 800e998:	608b      	str	r3, [r1, #8]
 800e99a:	4620      	mov	r0, r4
 800e99c:	f001 fbae 	bl	80100fc <_Bfree>
 800e9a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	601a      	str	r2, [r3, #0]
 800e9a6:	1e3b      	subs	r3, r7, #0
 800e9a8:	bfaa      	itet	ge
 800e9aa:	2300      	movge	r3, #0
 800e9ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e9b0:	f8c8 3000 	strge.w	r3, [r8]
 800e9b4:	4b9a      	ldr	r3, [pc, #616]	; (800ec20 <_dtoa_r+0x2d8>)
 800e9b6:	bfbc      	itt	lt
 800e9b8:	2201      	movlt	r2, #1
 800e9ba:	f8c8 2000 	strlt.w	r2, [r8]
 800e9be:	ea33 030b 	bics.w	r3, r3, fp
 800e9c2:	d11b      	bne.n	800e9fc <_dtoa_r+0xb4>
 800e9c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e9c6:	f242 730f 	movw	r3, #9999	; 0x270f
 800e9ca:	6013      	str	r3, [r2, #0]
 800e9cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e9d0:	4333      	orrs	r3, r6
 800e9d2:	f000 8592 	beq.w	800f4fa <_dtoa_r+0xbb2>
 800e9d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9d8:	b963      	cbnz	r3, 800e9f4 <_dtoa_r+0xac>
 800e9da:	4b92      	ldr	r3, [pc, #584]	; (800ec24 <_dtoa_r+0x2dc>)
 800e9dc:	e022      	b.n	800ea24 <_dtoa_r+0xdc>
 800e9de:	4b92      	ldr	r3, [pc, #584]	; (800ec28 <_dtoa_r+0x2e0>)
 800e9e0:	9301      	str	r3, [sp, #4]
 800e9e2:	3308      	adds	r3, #8
 800e9e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e9e6:	6013      	str	r3, [r2, #0]
 800e9e8:	9801      	ldr	r0, [sp, #4]
 800e9ea:	b013      	add	sp, #76	; 0x4c
 800e9ec:	ecbd 8b04 	vpop	{d8-d9}
 800e9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9f4:	4b8b      	ldr	r3, [pc, #556]	; (800ec24 <_dtoa_r+0x2dc>)
 800e9f6:	9301      	str	r3, [sp, #4]
 800e9f8:	3303      	adds	r3, #3
 800e9fa:	e7f3      	b.n	800e9e4 <_dtoa_r+0x9c>
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	2300      	movs	r3, #0
 800ea00:	4650      	mov	r0, sl
 800ea02:	4659      	mov	r1, fp
 800ea04:	f7f2 f888 	bl	8000b18 <__aeabi_dcmpeq>
 800ea08:	ec4b ab19 	vmov	d9, sl, fp
 800ea0c:	4680      	mov	r8, r0
 800ea0e:	b158      	cbz	r0, 800ea28 <_dtoa_r+0xe0>
 800ea10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea12:	2301      	movs	r3, #1
 800ea14:	6013      	str	r3, [r2, #0]
 800ea16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	f000 856b 	beq.w	800f4f4 <_dtoa_r+0xbac>
 800ea1e:	4883      	ldr	r0, [pc, #524]	; (800ec2c <_dtoa_r+0x2e4>)
 800ea20:	6018      	str	r0, [r3, #0]
 800ea22:	1e43      	subs	r3, r0, #1
 800ea24:	9301      	str	r3, [sp, #4]
 800ea26:	e7df      	b.n	800e9e8 <_dtoa_r+0xa0>
 800ea28:	ec4b ab10 	vmov	d0, sl, fp
 800ea2c:	aa10      	add	r2, sp, #64	; 0x40
 800ea2e:	a911      	add	r1, sp, #68	; 0x44
 800ea30:	4620      	mov	r0, r4
 800ea32:	f001 ff11 	bl	8010858 <__d2b>
 800ea36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ea3a:	ee08 0a10 	vmov	s16, r0
 800ea3e:	2d00      	cmp	r5, #0
 800ea40:	f000 8084 	beq.w	800eb4c <_dtoa_r+0x204>
 800ea44:	ee19 3a90 	vmov	r3, s19
 800ea48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ea50:	4656      	mov	r6, sl
 800ea52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ea56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ea5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ea5e:	4b74      	ldr	r3, [pc, #464]	; (800ec30 <_dtoa_r+0x2e8>)
 800ea60:	2200      	movs	r2, #0
 800ea62:	4630      	mov	r0, r6
 800ea64:	4639      	mov	r1, r7
 800ea66:	f7f1 fc37 	bl	80002d8 <__aeabi_dsub>
 800ea6a:	a365      	add	r3, pc, #404	; (adr r3, 800ec00 <_dtoa_r+0x2b8>)
 800ea6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea70:	f7f1 fdea 	bl	8000648 <__aeabi_dmul>
 800ea74:	a364      	add	r3, pc, #400	; (adr r3, 800ec08 <_dtoa_r+0x2c0>)
 800ea76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea7a:	f7f1 fc2f 	bl	80002dc <__adddf3>
 800ea7e:	4606      	mov	r6, r0
 800ea80:	4628      	mov	r0, r5
 800ea82:	460f      	mov	r7, r1
 800ea84:	f7f1 fd76 	bl	8000574 <__aeabi_i2d>
 800ea88:	a361      	add	r3, pc, #388	; (adr r3, 800ec10 <_dtoa_r+0x2c8>)
 800ea8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8e:	f7f1 fddb 	bl	8000648 <__aeabi_dmul>
 800ea92:	4602      	mov	r2, r0
 800ea94:	460b      	mov	r3, r1
 800ea96:	4630      	mov	r0, r6
 800ea98:	4639      	mov	r1, r7
 800ea9a:	f7f1 fc1f 	bl	80002dc <__adddf3>
 800ea9e:	4606      	mov	r6, r0
 800eaa0:	460f      	mov	r7, r1
 800eaa2:	f7f2 f881 	bl	8000ba8 <__aeabi_d2iz>
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	9000      	str	r0, [sp, #0]
 800eaaa:	2300      	movs	r3, #0
 800eaac:	4630      	mov	r0, r6
 800eaae:	4639      	mov	r1, r7
 800eab0:	f7f2 f83c 	bl	8000b2c <__aeabi_dcmplt>
 800eab4:	b150      	cbz	r0, 800eacc <_dtoa_r+0x184>
 800eab6:	9800      	ldr	r0, [sp, #0]
 800eab8:	f7f1 fd5c 	bl	8000574 <__aeabi_i2d>
 800eabc:	4632      	mov	r2, r6
 800eabe:	463b      	mov	r3, r7
 800eac0:	f7f2 f82a 	bl	8000b18 <__aeabi_dcmpeq>
 800eac4:	b910      	cbnz	r0, 800eacc <_dtoa_r+0x184>
 800eac6:	9b00      	ldr	r3, [sp, #0]
 800eac8:	3b01      	subs	r3, #1
 800eaca:	9300      	str	r3, [sp, #0]
 800eacc:	9b00      	ldr	r3, [sp, #0]
 800eace:	2b16      	cmp	r3, #22
 800ead0:	d85a      	bhi.n	800eb88 <_dtoa_r+0x240>
 800ead2:	9a00      	ldr	r2, [sp, #0]
 800ead4:	4b57      	ldr	r3, [pc, #348]	; (800ec34 <_dtoa_r+0x2ec>)
 800ead6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eade:	ec51 0b19 	vmov	r0, r1, d9
 800eae2:	f7f2 f823 	bl	8000b2c <__aeabi_dcmplt>
 800eae6:	2800      	cmp	r0, #0
 800eae8:	d050      	beq.n	800eb8c <_dtoa_r+0x244>
 800eaea:	9b00      	ldr	r3, [sp, #0]
 800eaec:	3b01      	subs	r3, #1
 800eaee:	9300      	str	r3, [sp, #0]
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	930b      	str	r3, [sp, #44]	; 0x2c
 800eaf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eaf6:	1b5d      	subs	r5, r3, r5
 800eaf8:	1e6b      	subs	r3, r5, #1
 800eafa:	9305      	str	r3, [sp, #20]
 800eafc:	bf45      	ittet	mi
 800eafe:	f1c5 0301 	rsbmi	r3, r5, #1
 800eb02:	9304      	strmi	r3, [sp, #16]
 800eb04:	2300      	movpl	r3, #0
 800eb06:	2300      	movmi	r3, #0
 800eb08:	bf4c      	ite	mi
 800eb0a:	9305      	strmi	r3, [sp, #20]
 800eb0c:	9304      	strpl	r3, [sp, #16]
 800eb0e:	9b00      	ldr	r3, [sp, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	db3d      	blt.n	800eb90 <_dtoa_r+0x248>
 800eb14:	9b05      	ldr	r3, [sp, #20]
 800eb16:	9a00      	ldr	r2, [sp, #0]
 800eb18:	920a      	str	r2, [sp, #40]	; 0x28
 800eb1a:	4413      	add	r3, r2
 800eb1c:	9305      	str	r3, [sp, #20]
 800eb1e:	2300      	movs	r3, #0
 800eb20:	9307      	str	r3, [sp, #28]
 800eb22:	9b06      	ldr	r3, [sp, #24]
 800eb24:	2b09      	cmp	r3, #9
 800eb26:	f200 8089 	bhi.w	800ec3c <_dtoa_r+0x2f4>
 800eb2a:	2b05      	cmp	r3, #5
 800eb2c:	bfc4      	itt	gt
 800eb2e:	3b04      	subgt	r3, #4
 800eb30:	9306      	strgt	r3, [sp, #24]
 800eb32:	9b06      	ldr	r3, [sp, #24]
 800eb34:	f1a3 0302 	sub.w	r3, r3, #2
 800eb38:	bfcc      	ite	gt
 800eb3a:	2500      	movgt	r5, #0
 800eb3c:	2501      	movle	r5, #1
 800eb3e:	2b03      	cmp	r3, #3
 800eb40:	f200 8087 	bhi.w	800ec52 <_dtoa_r+0x30a>
 800eb44:	e8df f003 	tbb	[pc, r3]
 800eb48:	59383a2d 	.word	0x59383a2d
 800eb4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800eb50:	441d      	add	r5, r3
 800eb52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800eb56:	2b20      	cmp	r3, #32
 800eb58:	bfc1      	itttt	gt
 800eb5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800eb5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800eb62:	fa0b f303 	lslgt.w	r3, fp, r3
 800eb66:	fa26 f000 	lsrgt.w	r0, r6, r0
 800eb6a:	bfda      	itte	le
 800eb6c:	f1c3 0320 	rsble	r3, r3, #32
 800eb70:	fa06 f003 	lslle.w	r0, r6, r3
 800eb74:	4318      	orrgt	r0, r3
 800eb76:	f7f1 fced 	bl	8000554 <__aeabi_ui2d>
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	4606      	mov	r6, r0
 800eb7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800eb82:	3d01      	subs	r5, #1
 800eb84:	930e      	str	r3, [sp, #56]	; 0x38
 800eb86:	e76a      	b.n	800ea5e <_dtoa_r+0x116>
 800eb88:	2301      	movs	r3, #1
 800eb8a:	e7b2      	b.n	800eaf2 <_dtoa_r+0x1aa>
 800eb8c:	900b      	str	r0, [sp, #44]	; 0x2c
 800eb8e:	e7b1      	b.n	800eaf4 <_dtoa_r+0x1ac>
 800eb90:	9b04      	ldr	r3, [sp, #16]
 800eb92:	9a00      	ldr	r2, [sp, #0]
 800eb94:	1a9b      	subs	r3, r3, r2
 800eb96:	9304      	str	r3, [sp, #16]
 800eb98:	4253      	negs	r3, r2
 800eb9a:	9307      	str	r3, [sp, #28]
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	930a      	str	r3, [sp, #40]	; 0x28
 800eba0:	e7bf      	b.n	800eb22 <_dtoa_r+0x1da>
 800eba2:	2300      	movs	r3, #0
 800eba4:	9308      	str	r3, [sp, #32]
 800eba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	dc55      	bgt.n	800ec58 <_dtoa_r+0x310>
 800ebac:	2301      	movs	r3, #1
 800ebae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	9209      	str	r2, [sp, #36]	; 0x24
 800ebb6:	e00c      	b.n	800ebd2 <_dtoa_r+0x28a>
 800ebb8:	2301      	movs	r3, #1
 800ebba:	e7f3      	b.n	800eba4 <_dtoa_r+0x25c>
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebc0:	9308      	str	r3, [sp, #32]
 800ebc2:	9b00      	ldr	r3, [sp, #0]
 800ebc4:	4413      	add	r3, r2
 800ebc6:	9302      	str	r3, [sp, #8]
 800ebc8:	3301      	adds	r3, #1
 800ebca:	2b01      	cmp	r3, #1
 800ebcc:	9303      	str	r3, [sp, #12]
 800ebce:	bfb8      	it	lt
 800ebd0:	2301      	movlt	r3, #1
 800ebd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	6042      	str	r2, [r0, #4]
 800ebd8:	2204      	movs	r2, #4
 800ebda:	f102 0614 	add.w	r6, r2, #20
 800ebde:	429e      	cmp	r6, r3
 800ebe0:	6841      	ldr	r1, [r0, #4]
 800ebe2:	d93d      	bls.n	800ec60 <_dtoa_r+0x318>
 800ebe4:	4620      	mov	r0, r4
 800ebe6:	f001 fa49 	bl	801007c <_Balloc>
 800ebea:	9001      	str	r0, [sp, #4]
 800ebec:	2800      	cmp	r0, #0
 800ebee:	d13b      	bne.n	800ec68 <_dtoa_r+0x320>
 800ebf0:	4b11      	ldr	r3, [pc, #68]	; (800ec38 <_dtoa_r+0x2f0>)
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ebf8:	e6c0      	b.n	800e97c <_dtoa_r+0x34>
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	e7df      	b.n	800ebbe <_dtoa_r+0x276>
 800ebfe:	bf00      	nop
 800ec00:	636f4361 	.word	0x636f4361
 800ec04:	3fd287a7 	.word	0x3fd287a7
 800ec08:	8b60c8b3 	.word	0x8b60c8b3
 800ec0c:	3fc68a28 	.word	0x3fc68a28
 800ec10:	509f79fb 	.word	0x509f79fb
 800ec14:	3fd34413 	.word	0x3fd34413
 800ec18:	08012c36 	.word	0x08012c36
 800ec1c:	08012c4d 	.word	0x08012c4d
 800ec20:	7ff00000 	.word	0x7ff00000
 800ec24:	08012c32 	.word	0x08012c32
 800ec28:	08012c29 	.word	0x08012c29
 800ec2c:	08012ab1 	.word	0x08012ab1
 800ec30:	3ff80000 	.word	0x3ff80000
 800ec34:	08012e20 	.word	0x08012e20
 800ec38:	08012ca8 	.word	0x08012ca8
 800ec3c:	2501      	movs	r5, #1
 800ec3e:	2300      	movs	r3, #0
 800ec40:	9306      	str	r3, [sp, #24]
 800ec42:	9508      	str	r5, [sp, #32]
 800ec44:	f04f 33ff 	mov.w	r3, #4294967295
 800ec48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	2312      	movs	r3, #18
 800ec50:	e7b0      	b.n	800ebb4 <_dtoa_r+0x26c>
 800ec52:	2301      	movs	r3, #1
 800ec54:	9308      	str	r3, [sp, #32]
 800ec56:	e7f5      	b.n	800ec44 <_dtoa_r+0x2fc>
 800ec58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ec5e:	e7b8      	b.n	800ebd2 <_dtoa_r+0x28a>
 800ec60:	3101      	adds	r1, #1
 800ec62:	6041      	str	r1, [r0, #4]
 800ec64:	0052      	lsls	r2, r2, #1
 800ec66:	e7b8      	b.n	800ebda <_dtoa_r+0x292>
 800ec68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec6a:	9a01      	ldr	r2, [sp, #4]
 800ec6c:	601a      	str	r2, [r3, #0]
 800ec6e:	9b03      	ldr	r3, [sp, #12]
 800ec70:	2b0e      	cmp	r3, #14
 800ec72:	f200 809d 	bhi.w	800edb0 <_dtoa_r+0x468>
 800ec76:	2d00      	cmp	r5, #0
 800ec78:	f000 809a 	beq.w	800edb0 <_dtoa_r+0x468>
 800ec7c:	9b00      	ldr	r3, [sp, #0]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	dd32      	ble.n	800ece8 <_dtoa_r+0x3a0>
 800ec82:	4ab7      	ldr	r2, [pc, #732]	; (800ef60 <_dtoa_r+0x618>)
 800ec84:	f003 030f 	and.w	r3, r3, #15
 800ec88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ec8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ec90:	9b00      	ldr	r3, [sp, #0]
 800ec92:	05d8      	lsls	r0, r3, #23
 800ec94:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ec98:	d516      	bpl.n	800ecc8 <_dtoa_r+0x380>
 800ec9a:	4bb2      	ldr	r3, [pc, #712]	; (800ef64 <_dtoa_r+0x61c>)
 800ec9c:	ec51 0b19 	vmov	r0, r1, d9
 800eca0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eca4:	f7f1 fdfa 	bl	800089c <__aeabi_ddiv>
 800eca8:	f007 070f 	and.w	r7, r7, #15
 800ecac:	4682      	mov	sl, r0
 800ecae:	468b      	mov	fp, r1
 800ecb0:	2503      	movs	r5, #3
 800ecb2:	4eac      	ldr	r6, [pc, #688]	; (800ef64 <_dtoa_r+0x61c>)
 800ecb4:	b957      	cbnz	r7, 800eccc <_dtoa_r+0x384>
 800ecb6:	4642      	mov	r2, r8
 800ecb8:	464b      	mov	r3, r9
 800ecba:	4650      	mov	r0, sl
 800ecbc:	4659      	mov	r1, fp
 800ecbe:	f7f1 fded 	bl	800089c <__aeabi_ddiv>
 800ecc2:	4682      	mov	sl, r0
 800ecc4:	468b      	mov	fp, r1
 800ecc6:	e028      	b.n	800ed1a <_dtoa_r+0x3d2>
 800ecc8:	2502      	movs	r5, #2
 800ecca:	e7f2      	b.n	800ecb2 <_dtoa_r+0x36a>
 800eccc:	07f9      	lsls	r1, r7, #31
 800ecce:	d508      	bpl.n	800ece2 <_dtoa_r+0x39a>
 800ecd0:	4640      	mov	r0, r8
 800ecd2:	4649      	mov	r1, r9
 800ecd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ecd8:	f7f1 fcb6 	bl	8000648 <__aeabi_dmul>
 800ecdc:	3501      	adds	r5, #1
 800ecde:	4680      	mov	r8, r0
 800ece0:	4689      	mov	r9, r1
 800ece2:	107f      	asrs	r7, r7, #1
 800ece4:	3608      	adds	r6, #8
 800ece6:	e7e5      	b.n	800ecb4 <_dtoa_r+0x36c>
 800ece8:	f000 809b 	beq.w	800ee22 <_dtoa_r+0x4da>
 800ecec:	9b00      	ldr	r3, [sp, #0]
 800ecee:	4f9d      	ldr	r7, [pc, #628]	; (800ef64 <_dtoa_r+0x61c>)
 800ecf0:	425e      	negs	r6, r3
 800ecf2:	4b9b      	ldr	r3, [pc, #620]	; (800ef60 <_dtoa_r+0x618>)
 800ecf4:	f006 020f 	and.w	r2, r6, #15
 800ecf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ecfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed00:	ec51 0b19 	vmov	r0, r1, d9
 800ed04:	f7f1 fca0 	bl	8000648 <__aeabi_dmul>
 800ed08:	1136      	asrs	r6, r6, #4
 800ed0a:	4682      	mov	sl, r0
 800ed0c:	468b      	mov	fp, r1
 800ed0e:	2300      	movs	r3, #0
 800ed10:	2502      	movs	r5, #2
 800ed12:	2e00      	cmp	r6, #0
 800ed14:	d17a      	bne.n	800ee0c <_dtoa_r+0x4c4>
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d1d3      	bne.n	800ecc2 <_dtoa_r+0x37a>
 800ed1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	f000 8082 	beq.w	800ee26 <_dtoa_r+0x4de>
 800ed22:	4b91      	ldr	r3, [pc, #580]	; (800ef68 <_dtoa_r+0x620>)
 800ed24:	2200      	movs	r2, #0
 800ed26:	4650      	mov	r0, sl
 800ed28:	4659      	mov	r1, fp
 800ed2a:	f7f1 feff 	bl	8000b2c <__aeabi_dcmplt>
 800ed2e:	2800      	cmp	r0, #0
 800ed30:	d079      	beq.n	800ee26 <_dtoa_r+0x4de>
 800ed32:	9b03      	ldr	r3, [sp, #12]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d076      	beq.n	800ee26 <_dtoa_r+0x4de>
 800ed38:	9b02      	ldr	r3, [sp, #8]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	dd36      	ble.n	800edac <_dtoa_r+0x464>
 800ed3e:	9b00      	ldr	r3, [sp, #0]
 800ed40:	4650      	mov	r0, sl
 800ed42:	4659      	mov	r1, fp
 800ed44:	1e5f      	subs	r7, r3, #1
 800ed46:	2200      	movs	r2, #0
 800ed48:	4b88      	ldr	r3, [pc, #544]	; (800ef6c <_dtoa_r+0x624>)
 800ed4a:	f7f1 fc7d 	bl	8000648 <__aeabi_dmul>
 800ed4e:	9e02      	ldr	r6, [sp, #8]
 800ed50:	4682      	mov	sl, r0
 800ed52:	468b      	mov	fp, r1
 800ed54:	3501      	adds	r5, #1
 800ed56:	4628      	mov	r0, r5
 800ed58:	f7f1 fc0c 	bl	8000574 <__aeabi_i2d>
 800ed5c:	4652      	mov	r2, sl
 800ed5e:	465b      	mov	r3, fp
 800ed60:	f7f1 fc72 	bl	8000648 <__aeabi_dmul>
 800ed64:	4b82      	ldr	r3, [pc, #520]	; (800ef70 <_dtoa_r+0x628>)
 800ed66:	2200      	movs	r2, #0
 800ed68:	f7f1 fab8 	bl	80002dc <__adddf3>
 800ed6c:	46d0      	mov	r8, sl
 800ed6e:	46d9      	mov	r9, fp
 800ed70:	4682      	mov	sl, r0
 800ed72:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ed76:	2e00      	cmp	r6, #0
 800ed78:	d158      	bne.n	800ee2c <_dtoa_r+0x4e4>
 800ed7a:	4b7e      	ldr	r3, [pc, #504]	; (800ef74 <_dtoa_r+0x62c>)
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	4640      	mov	r0, r8
 800ed80:	4649      	mov	r1, r9
 800ed82:	f7f1 faa9 	bl	80002d8 <__aeabi_dsub>
 800ed86:	4652      	mov	r2, sl
 800ed88:	465b      	mov	r3, fp
 800ed8a:	4680      	mov	r8, r0
 800ed8c:	4689      	mov	r9, r1
 800ed8e:	f7f1 feeb 	bl	8000b68 <__aeabi_dcmpgt>
 800ed92:	2800      	cmp	r0, #0
 800ed94:	f040 8295 	bne.w	800f2c2 <_dtoa_r+0x97a>
 800ed98:	4652      	mov	r2, sl
 800ed9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ed9e:	4640      	mov	r0, r8
 800eda0:	4649      	mov	r1, r9
 800eda2:	f7f1 fec3 	bl	8000b2c <__aeabi_dcmplt>
 800eda6:	2800      	cmp	r0, #0
 800eda8:	f040 8289 	bne.w	800f2be <_dtoa_r+0x976>
 800edac:	ec5b ab19 	vmov	sl, fp, d9
 800edb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	f2c0 8148 	blt.w	800f048 <_dtoa_r+0x700>
 800edb8:	9a00      	ldr	r2, [sp, #0]
 800edba:	2a0e      	cmp	r2, #14
 800edbc:	f300 8144 	bgt.w	800f048 <_dtoa_r+0x700>
 800edc0:	4b67      	ldr	r3, [pc, #412]	; (800ef60 <_dtoa_r+0x618>)
 800edc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800edc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800edca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edcc:	2b00      	cmp	r3, #0
 800edce:	f280 80d5 	bge.w	800ef7c <_dtoa_r+0x634>
 800edd2:	9b03      	ldr	r3, [sp, #12]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	f300 80d1 	bgt.w	800ef7c <_dtoa_r+0x634>
 800edda:	f040 826f 	bne.w	800f2bc <_dtoa_r+0x974>
 800edde:	4b65      	ldr	r3, [pc, #404]	; (800ef74 <_dtoa_r+0x62c>)
 800ede0:	2200      	movs	r2, #0
 800ede2:	4640      	mov	r0, r8
 800ede4:	4649      	mov	r1, r9
 800ede6:	f7f1 fc2f 	bl	8000648 <__aeabi_dmul>
 800edea:	4652      	mov	r2, sl
 800edec:	465b      	mov	r3, fp
 800edee:	f7f1 feb1 	bl	8000b54 <__aeabi_dcmpge>
 800edf2:	9e03      	ldr	r6, [sp, #12]
 800edf4:	4637      	mov	r7, r6
 800edf6:	2800      	cmp	r0, #0
 800edf8:	f040 8245 	bne.w	800f286 <_dtoa_r+0x93e>
 800edfc:	9d01      	ldr	r5, [sp, #4]
 800edfe:	2331      	movs	r3, #49	; 0x31
 800ee00:	f805 3b01 	strb.w	r3, [r5], #1
 800ee04:	9b00      	ldr	r3, [sp, #0]
 800ee06:	3301      	adds	r3, #1
 800ee08:	9300      	str	r3, [sp, #0]
 800ee0a:	e240      	b.n	800f28e <_dtoa_r+0x946>
 800ee0c:	07f2      	lsls	r2, r6, #31
 800ee0e:	d505      	bpl.n	800ee1c <_dtoa_r+0x4d4>
 800ee10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee14:	f7f1 fc18 	bl	8000648 <__aeabi_dmul>
 800ee18:	3501      	adds	r5, #1
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	1076      	asrs	r6, r6, #1
 800ee1e:	3708      	adds	r7, #8
 800ee20:	e777      	b.n	800ed12 <_dtoa_r+0x3ca>
 800ee22:	2502      	movs	r5, #2
 800ee24:	e779      	b.n	800ed1a <_dtoa_r+0x3d2>
 800ee26:	9f00      	ldr	r7, [sp, #0]
 800ee28:	9e03      	ldr	r6, [sp, #12]
 800ee2a:	e794      	b.n	800ed56 <_dtoa_r+0x40e>
 800ee2c:	9901      	ldr	r1, [sp, #4]
 800ee2e:	4b4c      	ldr	r3, [pc, #304]	; (800ef60 <_dtoa_r+0x618>)
 800ee30:	4431      	add	r1, r6
 800ee32:	910d      	str	r1, [sp, #52]	; 0x34
 800ee34:	9908      	ldr	r1, [sp, #32]
 800ee36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ee3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ee3e:	2900      	cmp	r1, #0
 800ee40:	d043      	beq.n	800eeca <_dtoa_r+0x582>
 800ee42:	494d      	ldr	r1, [pc, #308]	; (800ef78 <_dtoa_r+0x630>)
 800ee44:	2000      	movs	r0, #0
 800ee46:	f7f1 fd29 	bl	800089c <__aeabi_ddiv>
 800ee4a:	4652      	mov	r2, sl
 800ee4c:	465b      	mov	r3, fp
 800ee4e:	f7f1 fa43 	bl	80002d8 <__aeabi_dsub>
 800ee52:	9d01      	ldr	r5, [sp, #4]
 800ee54:	4682      	mov	sl, r0
 800ee56:	468b      	mov	fp, r1
 800ee58:	4649      	mov	r1, r9
 800ee5a:	4640      	mov	r0, r8
 800ee5c:	f7f1 fea4 	bl	8000ba8 <__aeabi_d2iz>
 800ee60:	4606      	mov	r6, r0
 800ee62:	f7f1 fb87 	bl	8000574 <__aeabi_i2d>
 800ee66:	4602      	mov	r2, r0
 800ee68:	460b      	mov	r3, r1
 800ee6a:	4640      	mov	r0, r8
 800ee6c:	4649      	mov	r1, r9
 800ee6e:	f7f1 fa33 	bl	80002d8 <__aeabi_dsub>
 800ee72:	3630      	adds	r6, #48	; 0x30
 800ee74:	f805 6b01 	strb.w	r6, [r5], #1
 800ee78:	4652      	mov	r2, sl
 800ee7a:	465b      	mov	r3, fp
 800ee7c:	4680      	mov	r8, r0
 800ee7e:	4689      	mov	r9, r1
 800ee80:	f7f1 fe54 	bl	8000b2c <__aeabi_dcmplt>
 800ee84:	2800      	cmp	r0, #0
 800ee86:	d163      	bne.n	800ef50 <_dtoa_r+0x608>
 800ee88:	4642      	mov	r2, r8
 800ee8a:	464b      	mov	r3, r9
 800ee8c:	4936      	ldr	r1, [pc, #216]	; (800ef68 <_dtoa_r+0x620>)
 800ee8e:	2000      	movs	r0, #0
 800ee90:	f7f1 fa22 	bl	80002d8 <__aeabi_dsub>
 800ee94:	4652      	mov	r2, sl
 800ee96:	465b      	mov	r3, fp
 800ee98:	f7f1 fe48 	bl	8000b2c <__aeabi_dcmplt>
 800ee9c:	2800      	cmp	r0, #0
 800ee9e:	f040 80b5 	bne.w	800f00c <_dtoa_r+0x6c4>
 800eea2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eea4:	429d      	cmp	r5, r3
 800eea6:	d081      	beq.n	800edac <_dtoa_r+0x464>
 800eea8:	4b30      	ldr	r3, [pc, #192]	; (800ef6c <_dtoa_r+0x624>)
 800eeaa:	2200      	movs	r2, #0
 800eeac:	4650      	mov	r0, sl
 800eeae:	4659      	mov	r1, fp
 800eeb0:	f7f1 fbca 	bl	8000648 <__aeabi_dmul>
 800eeb4:	4b2d      	ldr	r3, [pc, #180]	; (800ef6c <_dtoa_r+0x624>)
 800eeb6:	4682      	mov	sl, r0
 800eeb8:	468b      	mov	fp, r1
 800eeba:	4640      	mov	r0, r8
 800eebc:	4649      	mov	r1, r9
 800eebe:	2200      	movs	r2, #0
 800eec0:	f7f1 fbc2 	bl	8000648 <__aeabi_dmul>
 800eec4:	4680      	mov	r8, r0
 800eec6:	4689      	mov	r9, r1
 800eec8:	e7c6      	b.n	800ee58 <_dtoa_r+0x510>
 800eeca:	4650      	mov	r0, sl
 800eecc:	4659      	mov	r1, fp
 800eece:	f7f1 fbbb 	bl	8000648 <__aeabi_dmul>
 800eed2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eed4:	9d01      	ldr	r5, [sp, #4]
 800eed6:	930f      	str	r3, [sp, #60]	; 0x3c
 800eed8:	4682      	mov	sl, r0
 800eeda:	468b      	mov	fp, r1
 800eedc:	4649      	mov	r1, r9
 800eede:	4640      	mov	r0, r8
 800eee0:	f7f1 fe62 	bl	8000ba8 <__aeabi_d2iz>
 800eee4:	4606      	mov	r6, r0
 800eee6:	f7f1 fb45 	bl	8000574 <__aeabi_i2d>
 800eeea:	3630      	adds	r6, #48	; 0x30
 800eeec:	4602      	mov	r2, r0
 800eeee:	460b      	mov	r3, r1
 800eef0:	4640      	mov	r0, r8
 800eef2:	4649      	mov	r1, r9
 800eef4:	f7f1 f9f0 	bl	80002d8 <__aeabi_dsub>
 800eef8:	f805 6b01 	strb.w	r6, [r5], #1
 800eefc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eefe:	429d      	cmp	r5, r3
 800ef00:	4680      	mov	r8, r0
 800ef02:	4689      	mov	r9, r1
 800ef04:	f04f 0200 	mov.w	r2, #0
 800ef08:	d124      	bne.n	800ef54 <_dtoa_r+0x60c>
 800ef0a:	4b1b      	ldr	r3, [pc, #108]	; (800ef78 <_dtoa_r+0x630>)
 800ef0c:	4650      	mov	r0, sl
 800ef0e:	4659      	mov	r1, fp
 800ef10:	f7f1 f9e4 	bl	80002dc <__adddf3>
 800ef14:	4602      	mov	r2, r0
 800ef16:	460b      	mov	r3, r1
 800ef18:	4640      	mov	r0, r8
 800ef1a:	4649      	mov	r1, r9
 800ef1c:	f7f1 fe24 	bl	8000b68 <__aeabi_dcmpgt>
 800ef20:	2800      	cmp	r0, #0
 800ef22:	d173      	bne.n	800f00c <_dtoa_r+0x6c4>
 800ef24:	4652      	mov	r2, sl
 800ef26:	465b      	mov	r3, fp
 800ef28:	4913      	ldr	r1, [pc, #76]	; (800ef78 <_dtoa_r+0x630>)
 800ef2a:	2000      	movs	r0, #0
 800ef2c:	f7f1 f9d4 	bl	80002d8 <__aeabi_dsub>
 800ef30:	4602      	mov	r2, r0
 800ef32:	460b      	mov	r3, r1
 800ef34:	4640      	mov	r0, r8
 800ef36:	4649      	mov	r1, r9
 800ef38:	f7f1 fdf8 	bl	8000b2c <__aeabi_dcmplt>
 800ef3c:	2800      	cmp	r0, #0
 800ef3e:	f43f af35 	beq.w	800edac <_dtoa_r+0x464>
 800ef42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ef44:	1e6b      	subs	r3, r5, #1
 800ef46:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef48:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ef4c:	2b30      	cmp	r3, #48	; 0x30
 800ef4e:	d0f8      	beq.n	800ef42 <_dtoa_r+0x5fa>
 800ef50:	9700      	str	r7, [sp, #0]
 800ef52:	e049      	b.n	800efe8 <_dtoa_r+0x6a0>
 800ef54:	4b05      	ldr	r3, [pc, #20]	; (800ef6c <_dtoa_r+0x624>)
 800ef56:	f7f1 fb77 	bl	8000648 <__aeabi_dmul>
 800ef5a:	4680      	mov	r8, r0
 800ef5c:	4689      	mov	r9, r1
 800ef5e:	e7bd      	b.n	800eedc <_dtoa_r+0x594>
 800ef60:	08012e20 	.word	0x08012e20
 800ef64:	08012df8 	.word	0x08012df8
 800ef68:	3ff00000 	.word	0x3ff00000
 800ef6c:	40240000 	.word	0x40240000
 800ef70:	401c0000 	.word	0x401c0000
 800ef74:	40140000 	.word	0x40140000
 800ef78:	3fe00000 	.word	0x3fe00000
 800ef7c:	9d01      	ldr	r5, [sp, #4]
 800ef7e:	4656      	mov	r6, sl
 800ef80:	465f      	mov	r7, fp
 800ef82:	4642      	mov	r2, r8
 800ef84:	464b      	mov	r3, r9
 800ef86:	4630      	mov	r0, r6
 800ef88:	4639      	mov	r1, r7
 800ef8a:	f7f1 fc87 	bl	800089c <__aeabi_ddiv>
 800ef8e:	f7f1 fe0b 	bl	8000ba8 <__aeabi_d2iz>
 800ef92:	4682      	mov	sl, r0
 800ef94:	f7f1 faee 	bl	8000574 <__aeabi_i2d>
 800ef98:	4642      	mov	r2, r8
 800ef9a:	464b      	mov	r3, r9
 800ef9c:	f7f1 fb54 	bl	8000648 <__aeabi_dmul>
 800efa0:	4602      	mov	r2, r0
 800efa2:	460b      	mov	r3, r1
 800efa4:	4630      	mov	r0, r6
 800efa6:	4639      	mov	r1, r7
 800efa8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800efac:	f7f1 f994 	bl	80002d8 <__aeabi_dsub>
 800efb0:	f805 6b01 	strb.w	r6, [r5], #1
 800efb4:	9e01      	ldr	r6, [sp, #4]
 800efb6:	9f03      	ldr	r7, [sp, #12]
 800efb8:	1bae      	subs	r6, r5, r6
 800efba:	42b7      	cmp	r7, r6
 800efbc:	4602      	mov	r2, r0
 800efbe:	460b      	mov	r3, r1
 800efc0:	d135      	bne.n	800f02e <_dtoa_r+0x6e6>
 800efc2:	f7f1 f98b 	bl	80002dc <__adddf3>
 800efc6:	4642      	mov	r2, r8
 800efc8:	464b      	mov	r3, r9
 800efca:	4606      	mov	r6, r0
 800efcc:	460f      	mov	r7, r1
 800efce:	f7f1 fdcb 	bl	8000b68 <__aeabi_dcmpgt>
 800efd2:	b9d0      	cbnz	r0, 800f00a <_dtoa_r+0x6c2>
 800efd4:	4642      	mov	r2, r8
 800efd6:	464b      	mov	r3, r9
 800efd8:	4630      	mov	r0, r6
 800efda:	4639      	mov	r1, r7
 800efdc:	f7f1 fd9c 	bl	8000b18 <__aeabi_dcmpeq>
 800efe0:	b110      	cbz	r0, 800efe8 <_dtoa_r+0x6a0>
 800efe2:	f01a 0f01 	tst.w	sl, #1
 800efe6:	d110      	bne.n	800f00a <_dtoa_r+0x6c2>
 800efe8:	4620      	mov	r0, r4
 800efea:	ee18 1a10 	vmov	r1, s16
 800efee:	f001 f885 	bl	80100fc <_Bfree>
 800eff2:	2300      	movs	r3, #0
 800eff4:	9800      	ldr	r0, [sp, #0]
 800eff6:	702b      	strb	r3, [r5, #0]
 800eff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800effa:	3001      	adds	r0, #1
 800effc:	6018      	str	r0, [r3, #0]
 800effe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f000:	2b00      	cmp	r3, #0
 800f002:	f43f acf1 	beq.w	800e9e8 <_dtoa_r+0xa0>
 800f006:	601d      	str	r5, [r3, #0]
 800f008:	e4ee      	b.n	800e9e8 <_dtoa_r+0xa0>
 800f00a:	9f00      	ldr	r7, [sp, #0]
 800f00c:	462b      	mov	r3, r5
 800f00e:	461d      	mov	r5, r3
 800f010:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f014:	2a39      	cmp	r2, #57	; 0x39
 800f016:	d106      	bne.n	800f026 <_dtoa_r+0x6de>
 800f018:	9a01      	ldr	r2, [sp, #4]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d1f7      	bne.n	800f00e <_dtoa_r+0x6c6>
 800f01e:	9901      	ldr	r1, [sp, #4]
 800f020:	2230      	movs	r2, #48	; 0x30
 800f022:	3701      	adds	r7, #1
 800f024:	700a      	strb	r2, [r1, #0]
 800f026:	781a      	ldrb	r2, [r3, #0]
 800f028:	3201      	adds	r2, #1
 800f02a:	701a      	strb	r2, [r3, #0]
 800f02c:	e790      	b.n	800ef50 <_dtoa_r+0x608>
 800f02e:	4ba6      	ldr	r3, [pc, #664]	; (800f2c8 <_dtoa_r+0x980>)
 800f030:	2200      	movs	r2, #0
 800f032:	f7f1 fb09 	bl	8000648 <__aeabi_dmul>
 800f036:	2200      	movs	r2, #0
 800f038:	2300      	movs	r3, #0
 800f03a:	4606      	mov	r6, r0
 800f03c:	460f      	mov	r7, r1
 800f03e:	f7f1 fd6b 	bl	8000b18 <__aeabi_dcmpeq>
 800f042:	2800      	cmp	r0, #0
 800f044:	d09d      	beq.n	800ef82 <_dtoa_r+0x63a>
 800f046:	e7cf      	b.n	800efe8 <_dtoa_r+0x6a0>
 800f048:	9a08      	ldr	r2, [sp, #32]
 800f04a:	2a00      	cmp	r2, #0
 800f04c:	f000 80d7 	beq.w	800f1fe <_dtoa_r+0x8b6>
 800f050:	9a06      	ldr	r2, [sp, #24]
 800f052:	2a01      	cmp	r2, #1
 800f054:	f300 80ba 	bgt.w	800f1cc <_dtoa_r+0x884>
 800f058:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f05a:	2a00      	cmp	r2, #0
 800f05c:	f000 80b2 	beq.w	800f1c4 <_dtoa_r+0x87c>
 800f060:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f064:	9e07      	ldr	r6, [sp, #28]
 800f066:	9d04      	ldr	r5, [sp, #16]
 800f068:	9a04      	ldr	r2, [sp, #16]
 800f06a:	441a      	add	r2, r3
 800f06c:	9204      	str	r2, [sp, #16]
 800f06e:	9a05      	ldr	r2, [sp, #20]
 800f070:	2101      	movs	r1, #1
 800f072:	441a      	add	r2, r3
 800f074:	4620      	mov	r0, r4
 800f076:	9205      	str	r2, [sp, #20]
 800f078:	f001 f942 	bl	8010300 <__i2b>
 800f07c:	4607      	mov	r7, r0
 800f07e:	2d00      	cmp	r5, #0
 800f080:	dd0c      	ble.n	800f09c <_dtoa_r+0x754>
 800f082:	9b05      	ldr	r3, [sp, #20]
 800f084:	2b00      	cmp	r3, #0
 800f086:	dd09      	ble.n	800f09c <_dtoa_r+0x754>
 800f088:	42ab      	cmp	r3, r5
 800f08a:	9a04      	ldr	r2, [sp, #16]
 800f08c:	bfa8      	it	ge
 800f08e:	462b      	movge	r3, r5
 800f090:	1ad2      	subs	r2, r2, r3
 800f092:	9204      	str	r2, [sp, #16]
 800f094:	9a05      	ldr	r2, [sp, #20]
 800f096:	1aed      	subs	r5, r5, r3
 800f098:	1ad3      	subs	r3, r2, r3
 800f09a:	9305      	str	r3, [sp, #20]
 800f09c:	9b07      	ldr	r3, [sp, #28]
 800f09e:	b31b      	cbz	r3, 800f0e8 <_dtoa_r+0x7a0>
 800f0a0:	9b08      	ldr	r3, [sp, #32]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	f000 80af 	beq.w	800f206 <_dtoa_r+0x8be>
 800f0a8:	2e00      	cmp	r6, #0
 800f0aa:	dd13      	ble.n	800f0d4 <_dtoa_r+0x78c>
 800f0ac:	4639      	mov	r1, r7
 800f0ae:	4632      	mov	r2, r6
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	f001 f9e5 	bl	8010480 <__pow5mult>
 800f0b6:	ee18 2a10 	vmov	r2, s16
 800f0ba:	4601      	mov	r1, r0
 800f0bc:	4607      	mov	r7, r0
 800f0be:	4620      	mov	r0, r4
 800f0c0:	f001 f934 	bl	801032c <__multiply>
 800f0c4:	ee18 1a10 	vmov	r1, s16
 800f0c8:	4680      	mov	r8, r0
 800f0ca:	4620      	mov	r0, r4
 800f0cc:	f001 f816 	bl	80100fc <_Bfree>
 800f0d0:	ee08 8a10 	vmov	s16, r8
 800f0d4:	9b07      	ldr	r3, [sp, #28]
 800f0d6:	1b9a      	subs	r2, r3, r6
 800f0d8:	d006      	beq.n	800f0e8 <_dtoa_r+0x7a0>
 800f0da:	ee18 1a10 	vmov	r1, s16
 800f0de:	4620      	mov	r0, r4
 800f0e0:	f001 f9ce 	bl	8010480 <__pow5mult>
 800f0e4:	ee08 0a10 	vmov	s16, r0
 800f0e8:	2101      	movs	r1, #1
 800f0ea:	4620      	mov	r0, r4
 800f0ec:	f001 f908 	bl	8010300 <__i2b>
 800f0f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	4606      	mov	r6, r0
 800f0f6:	f340 8088 	ble.w	800f20a <_dtoa_r+0x8c2>
 800f0fa:	461a      	mov	r2, r3
 800f0fc:	4601      	mov	r1, r0
 800f0fe:	4620      	mov	r0, r4
 800f100:	f001 f9be 	bl	8010480 <__pow5mult>
 800f104:	9b06      	ldr	r3, [sp, #24]
 800f106:	2b01      	cmp	r3, #1
 800f108:	4606      	mov	r6, r0
 800f10a:	f340 8081 	ble.w	800f210 <_dtoa_r+0x8c8>
 800f10e:	f04f 0800 	mov.w	r8, #0
 800f112:	6933      	ldr	r3, [r6, #16]
 800f114:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f118:	6918      	ldr	r0, [r3, #16]
 800f11a:	f001 f8a1 	bl	8010260 <__hi0bits>
 800f11e:	f1c0 0020 	rsb	r0, r0, #32
 800f122:	9b05      	ldr	r3, [sp, #20]
 800f124:	4418      	add	r0, r3
 800f126:	f010 001f 	ands.w	r0, r0, #31
 800f12a:	f000 8092 	beq.w	800f252 <_dtoa_r+0x90a>
 800f12e:	f1c0 0320 	rsb	r3, r0, #32
 800f132:	2b04      	cmp	r3, #4
 800f134:	f340 808a 	ble.w	800f24c <_dtoa_r+0x904>
 800f138:	f1c0 001c 	rsb	r0, r0, #28
 800f13c:	9b04      	ldr	r3, [sp, #16]
 800f13e:	4403      	add	r3, r0
 800f140:	9304      	str	r3, [sp, #16]
 800f142:	9b05      	ldr	r3, [sp, #20]
 800f144:	4403      	add	r3, r0
 800f146:	4405      	add	r5, r0
 800f148:	9305      	str	r3, [sp, #20]
 800f14a:	9b04      	ldr	r3, [sp, #16]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	dd07      	ble.n	800f160 <_dtoa_r+0x818>
 800f150:	ee18 1a10 	vmov	r1, s16
 800f154:	461a      	mov	r2, r3
 800f156:	4620      	mov	r0, r4
 800f158:	f001 f9ec 	bl	8010534 <__lshift>
 800f15c:	ee08 0a10 	vmov	s16, r0
 800f160:	9b05      	ldr	r3, [sp, #20]
 800f162:	2b00      	cmp	r3, #0
 800f164:	dd05      	ble.n	800f172 <_dtoa_r+0x82a>
 800f166:	4631      	mov	r1, r6
 800f168:	461a      	mov	r2, r3
 800f16a:	4620      	mov	r0, r4
 800f16c:	f001 f9e2 	bl	8010534 <__lshift>
 800f170:	4606      	mov	r6, r0
 800f172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f174:	2b00      	cmp	r3, #0
 800f176:	d06e      	beq.n	800f256 <_dtoa_r+0x90e>
 800f178:	ee18 0a10 	vmov	r0, s16
 800f17c:	4631      	mov	r1, r6
 800f17e:	f001 fa49 	bl	8010614 <__mcmp>
 800f182:	2800      	cmp	r0, #0
 800f184:	da67      	bge.n	800f256 <_dtoa_r+0x90e>
 800f186:	9b00      	ldr	r3, [sp, #0]
 800f188:	3b01      	subs	r3, #1
 800f18a:	ee18 1a10 	vmov	r1, s16
 800f18e:	9300      	str	r3, [sp, #0]
 800f190:	220a      	movs	r2, #10
 800f192:	2300      	movs	r3, #0
 800f194:	4620      	mov	r0, r4
 800f196:	f000 ffd3 	bl	8010140 <__multadd>
 800f19a:	9b08      	ldr	r3, [sp, #32]
 800f19c:	ee08 0a10 	vmov	s16, r0
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	f000 81b1 	beq.w	800f508 <_dtoa_r+0xbc0>
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	4639      	mov	r1, r7
 800f1aa:	220a      	movs	r2, #10
 800f1ac:	4620      	mov	r0, r4
 800f1ae:	f000 ffc7 	bl	8010140 <__multadd>
 800f1b2:	9b02      	ldr	r3, [sp, #8]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	4607      	mov	r7, r0
 800f1b8:	f300 808e 	bgt.w	800f2d8 <_dtoa_r+0x990>
 800f1bc:	9b06      	ldr	r3, [sp, #24]
 800f1be:	2b02      	cmp	r3, #2
 800f1c0:	dc51      	bgt.n	800f266 <_dtoa_r+0x91e>
 800f1c2:	e089      	b.n	800f2d8 <_dtoa_r+0x990>
 800f1c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f1c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f1ca:	e74b      	b.n	800f064 <_dtoa_r+0x71c>
 800f1cc:	9b03      	ldr	r3, [sp, #12]
 800f1ce:	1e5e      	subs	r6, r3, #1
 800f1d0:	9b07      	ldr	r3, [sp, #28]
 800f1d2:	42b3      	cmp	r3, r6
 800f1d4:	bfbf      	itttt	lt
 800f1d6:	9b07      	ldrlt	r3, [sp, #28]
 800f1d8:	9607      	strlt	r6, [sp, #28]
 800f1da:	1af2      	sublt	r2, r6, r3
 800f1dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f1de:	bfb6      	itet	lt
 800f1e0:	189b      	addlt	r3, r3, r2
 800f1e2:	1b9e      	subge	r6, r3, r6
 800f1e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f1e6:	9b03      	ldr	r3, [sp, #12]
 800f1e8:	bfb8      	it	lt
 800f1ea:	2600      	movlt	r6, #0
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	bfb7      	itett	lt
 800f1f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f1f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f1f8:	1a9d      	sublt	r5, r3, r2
 800f1fa:	2300      	movlt	r3, #0
 800f1fc:	e734      	b.n	800f068 <_dtoa_r+0x720>
 800f1fe:	9e07      	ldr	r6, [sp, #28]
 800f200:	9d04      	ldr	r5, [sp, #16]
 800f202:	9f08      	ldr	r7, [sp, #32]
 800f204:	e73b      	b.n	800f07e <_dtoa_r+0x736>
 800f206:	9a07      	ldr	r2, [sp, #28]
 800f208:	e767      	b.n	800f0da <_dtoa_r+0x792>
 800f20a:	9b06      	ldr	r3, [sp, #24]
 800f20c:	2b01      	cmp	r3, #1
 800f20e:	dc18      	bgt.n	800f242 <_dtoa_r+0x8fa>
 800f210:	f1ba 0f00 	cmp.w	sl, #0
 800f214:	d115      	bne.n	800f242 <_dtoa_r+0x8fa>
 800f216:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f21a:	b993      	cbnz	r3, 800f242 <_dtoa_r+0x8fa>
 800f21c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f220:	0d1b      	lsrs	r3, r3, #20
 800f222:	051b      	lsls	r3, r3, #20
 800f224:	b183      	cbz	r3, 800f248 <_dtoa_r+0x900>
 800f226:	9b04      	ldr	r3, [sp, #16]
 800f228:	3301      	adds	r3, #1
 800f22a:	9304      	str	r3, [sp, #16]
 800f22c:	9b05      	ldr	r3, [sp, #20]
 800f22e:	3301      	adds	r3, #1
 800f230:	9305      	str	r3, [sp, #20]
 800f232:	f04f 0801 	mov.w	r8, #1
 800f236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f238:	2b00      	cmp	r3, #0
 800f23a:	f47f af6a 	bne.w	800f112 <_dtoa_r+0x7ca>
 800f23e:	2001      	movs	r0, #1
 800f240:	e76f      	b.n	800f122 <_dtoa_r+0x7da>
 800f242:	f04f 0800 	mov.w	r8, #0
 800f246:	e7f6      	b.n	800f236 <_dtoa_r+0x8ee>
 800f248:	4698      	mov	r8, r3
 800f24a:	e7f4      	b.n	800f236 <_dtoa_r+0x8ee>
 800f24c:	f43f af7d 	beq.w	800f14a <_dtoa_r+0x802>
 800f250:	4618      	mov	r0, r3
 800f252:	301c      	adds	r0, #28
 800f254:	e772      	b.n	800f13c <_dtoa_r+0x7f4>
 800f256:	9b03      	ldr	r3, [sp, #12]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	dc37      	bgt.n	800f2cc <_dtoa_r+0x984>
 800f25c:	9b06      	ldr	r3, [sp, #24]
 800f25e:	2b02      	cmp	r3, #2
 800f260:	dd34      	ble.n	800f2cc <_dtoa_r+0x984>
 800f262:	9b03      	ldr	r3, [sp, #12]
 800f264:	9302      	str	r3, [sp, #8]
 800f266:	9b02      	ldr	r3, [sp, #8]
 800f268:	b96b      	cbnz	r3, 800f286 <_dtoa_r+0x93e>
 800f26a:	4631      	mov	r1, r6
 800f26c:	2205      	movs	r2, #5
 800f26e:	4620      	mov	r0, r4
 800f270:	f000 ff66 	bl	8010140 <__multadd>
 800f274:	4601      	mov	r1, r0
 800f276:	4606      	mov	r6, r0
 800f278:	ee18 0a10 	vmov	r0, s16
 800f27c:	f001 f9ca 	bl	8010614 <__mcmp>
 800f280:	2800      	cmp	r0, #0
 800f282:	f73f adbb 	bgt.w	800edfc <_dtoa_r+0x4b4>
 800f286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f288:	9d01      	ldr	r5, [sp, #4]
 800f28a:	43db      	mvns	r3, r3
 800f28c:	9300      	str	r3, [sp, #0]
 800f28e:	f04f 0800 	mov.w	r8, #0
 800f292:	4631      	mov	r1, r6
 800f294:	4620      	mov	r0, r4
 800f296:	f000 ff31 	bl	80100fc <_Bfree>
 800f29a:	2f00      	cmp	r7, #0
 800f29c:	f43f aea4 	beq.w	800efe8 <_dtoa_r+0x6a0>
 800f2a0:	f1b8 0f00 	cmp.w	r8, #0
 800f2a4:	d005      	beq.n	800f2b2 <_dtoa_r+0x96a>
 800f2a6:	45b8      	cmp	r8, r7
 800f2a8:	d003      	beq.n	800f2b2 <_dtoa_r+0x96a>
 800f2aa:	4641      	mov	r1, r8
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	f000 ff25 	bl	80100fc <_Bfree>
 800f2b2:	4639      	mov	r1, r7
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	f000 ff21 	bl	80100fc <_Bfree>
 800f2ba:	e695      	b.n	800efe8 <_dtoa_r+0x6a0>
 800f2bc:	2600      	movs	r6, #0
 800f2be:	4637      	mov	r7, r6
 800f2c0:	e7e1      	b.n	800f286 <_dtoa_r+0x93e>
 800f2c2:	9700      	str	r7, [sp, #0]
 800f2c4:	4637      	mov	r7, r6
 800f2c6:	e599      	b.n	800edfc <_dtoa_r+0x4b4>
 800f2c8:	40240000 	.word	0x40240000
 800f2cc:	9b08      	ldr	r3, [sp, #32]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	f000 80ca 	beq.w	800f468 <_dtoa_r+0xb20>
 800f2d4:	9b03      	ldr	r3, [sp, #12]
 800f2d6:	9302      	str	r3, [sp, #8]
 800f2d8:	2d00      	cmp	r5, #0
 800f2da:	dd05      	ble.n	800f2e8 <_dtoa_r+0x9a0>
 800f2dc:	4639      	mov	r1, r7
 800f2de:	462a      	mov	r2, r5
 800f2e0:	4620      	mov	r0, r4
 800f2e2:	f001 f927 	bl	8010534 <__lshift>
 800f2e6:	4607      	mov	r7, r0
 800f2e8:	f1b8 0f00 	cmp.w	r8, #0
 800f2ec:	d05b      	beq.n	800f3a6 <_dtoa_r+0xa5e>
 800f2ee:	6879      	ldr	r1, [r7, #4]
 800f2f0:	4620      	mov	r0, r4
 800f2f2:	f000 fec3 	bl	801007c <_Balloc>
 800f2f6:	4605      	mov	r5, r0
 800f2f8:	b928      	cbnz	r0, 800f306 <_dtoa_r+0x9be>
 800f2fa:	4b87      	ldr	r3, [pc, #540]	; (800f518 <_dtoa_r+0xbd0>)
 800f2fc:	4602      	mov	r2, r0
 800f2fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f302:	f7ff bb3b 	b.w	800e97c <_dtoa_r+0x34>
 800f306:	693a      	ldr	r2, [r7, #16]
 800f308:	3202      	adds	r2, #2
 800f30a:	0092      	lsls	r2, r2, #2
 800f30c:	f107 010c 	add.w	r1, r7, #12
 800f310:	300c      	adds	r0, #12
 800f312:	f7fd fde9 	bl	800cee8 <memcpy>
 800f316:	2201      	movs	r2, #1
 800f318:	4629      	mov	r1, r5
 800f31a:	4620      	mov	r0, r4
 800f31c:	f001 f90a 	bl	8010534 <__lshift>
 800f320:	9b01      	ldr	r3, [sp, #4]
 800f322:	f103 0901 	add.w	r9, r3, #1
 800f326:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f32a:	4413      	add	r3, r2
 800f32c:	9305      	str	r3, [sp, #20]
 800f32e:	f00a 0301 	and.w	r3, sl, #1
 800f332:	46b8      	mov	r8, r7
 800f334:	9304      	str	r3, [sp, #16]
 800f336:	4607      	mov	r7, r0
 800f338:	4631      	mov	r1, r6
 800f33a:	ee18 0a10 	vmov	r0, s16
 800f33e:	f7ff fa75 	bl	800e82c <quorem>
 800f342:	4641      	mov	r1, r8
 800f344:	9002      	str	r0, [sp, #8]
 800f346:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f34a:	ee18 0a10 	vmov	r0, s16
 800f34e:	f001 f961 	bl	8010614 <__mcmp>
 800f352:	463a      	mov	r2, r7
 800f354:	9003      	str	r0, [sp, #12]
 800f356:	4631      	mov	r1, r6
 800f358:	4620      	mov	r0, r4
 800f35a:	f001 f977 	bl	801064c <__mdiff>
 800f35e:	68c2      	ldr	r2, [r0, #12]
 800f360:	f109 3bff 	add.w	fp, r9, #4294967295
 800f364:	4605      	mov	r5, r0
 800f366:	bb02      	cbnz	r2, 800f3aa <_dtoa_r+0xa62>
 800f368:	4601      	mov	r1, r0
 800f36a:	ee18 0a10 	vmov	r0, s16
 800f36e:	f001 f951 	bl	8010614 <__mcmp>
 800f372:	4602      	mov	r2, r0
 800f374:	4629      	mov	r1, r5
 800f376:	4620      	mov	r0, r4
 800f378:	9207      	str	r2, [sp, #28]
 800f37a:	f000 febf 	bl	80100fc <_Bfree>
 800f37e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f382:	ea43 0102 	orr.w	r1, r3, r2
 800f386:	9b04      	ldr	r3, [sp, #16]
 800f388:	430b      	orrs	r3, r1
 800f38a:	464d      	mov	r5, r9
 800f38c:	d10f      	bne.n	800f3ae <_dtoa_r+0xa66>
 800f38e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f392:	d02a      	beq.n	800f3ea <_dtoa_r+0xaa2>
 800f394:	9b03      	ldr	r3, [sp, #12]
 800f396:	2b00      	cmp	r3, #0
 800f398:	dd02      	ble.n	800f3a0 <_dtoa_r+0xa58>
 800f39a:	9b02      	ldr	r3, [sp, #8]
 800f39c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f3a0:	f88b a000 	strb.w	sl, [fp]
 800f3a4:	e775      	b.n	800f292 <_dtoa_r+0x94a>
 800f3a6:	4638      	mov	r0, r7
 800f3a8:	e7ba      	b.n	800f320 <_dtoa_r+0x9d8>
 800f3aa:	2201      	movs	r2, #1
 800f3ac:	e7e2      	b.n	800f374 <_dtoa_r+0xa2c>
 800f3ae:	9b03      	ldr	r3, [sp, #12]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	db04      	blt.n	800f3be <_dtoa_r+0xa76>
 800f3b4:	9906      	ldr	r1, [sp, #24]
 800f3b6:	430b      	orrs	r3, r1
 800f3b8:	9904      	ldr	r1, [sp, #16]
 800f3ba:	430b      	orrs	r3, r1
 800f3bc:	d122      	bne.n	800f404 <_dtoa_r+0xabc>
 800f3be:	2a00      	cmp	r2, #0
 800f3c0:	ddee      	ble.n	800f3a0 <_dtoa_r+0xa58>
 800f3c2:	ee18 1a10 	vmov	r1, s16
 800f3c6:	2201      	movs	r2, #1
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	f001 f8b3 	bl	8010534 <__lshift>
 800f3ce:	4631      	mov	r1, r6
 800f3d0:	ee08 0a10 	vmov	s16, r0
 800f3d4:	f001 f91e 	bl	8010614 <__mcmp>
 800f3d8:	2800      	cmp	r0, #0
 800f3da:	dc03      	bgt.n	800f3e4 <_dtoa_r+0xa9c>
 800f3dc:	d1e0      	bne.n	800f3a0 <_dtoa_r+0xa58>
 800f3de:	f01a 0f01 	tst.w	sl, #1
 800f3e2:	d0dd      	beq.n	800f3a0 <_dtoa_r+0xa58>
 800f3e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f3e8:	d1d7      	bne.n	800f39a <_dtoa_r+0xa52>
 800f3ea:	2339      	movs	r3, #57	; 0x39
 800f3ec:	f88b 3000 	strb.w	r3, [fp]
 800f3f0:	462b      	mov	r3, r5
 800f3f2:	461d      	mov	r5, r3
 800f3f4:	3b01      	subs	r3, #1
 800f3f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f3fa:	2a39      	cmp	r2, #57	; 0x39
 800f3fc:	d071      	beq.n	800f4e2 <_dtoa_r+0xb9a>
 800f3fe:	3201      	adds	r2, #1
 800f400:	701a      	strb	r2, [r3, #0]
 800f402:	e746      	b.n	800f292 <_dtoa_r+0x94a>
 800f404:	2a00      	cmp	r2, #0
 800f406:	dd07      	ble.n	800f418 <_dtoa_r+0xad0>
 800f408:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f40c:	d0ed      	beq.n	800f3ea <_dtoa_r+0xaa2>
 800f40e:	f10a 0301 	add.w	r3, sl, #1
 800f412:	f88b 3000 	strb.w	r3, [fp]
 800f416:	e73c      	b.n	800f292 <_dtoa_r+0x94a>
 800f418:	9b05      	ldr	r3, [sp, #20]
 800f41a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f41e:	4599      	cmp	r9, r3
 800f420:	d047      	beq.n	800f4b2 <_dtoa_r+0xb6a>
 800f422:	ee18 1a10 	vmov	r1, s16
 800f426:	2300      	movs	r3, #0
 800f428:	220a      	movs	r2, #10
 800f42a:	4620      	mov	r0, r4
 800f42c:	f000 fe88 	bl	8010140 <__multadd>
 800f430:	45b8      	cmp	r8, r7
 800f432:	ee08 0a10 	vmov	s16, r0
 800f436:	f04f 0300 	mov.w	r3, #0
 800f43a:	f04f 020a 	mov.w	r2, #10
 800f43e:	4641      	mov	r1, r8
 800f440:	4620      	mov	r0, r4
 800f442:	d106      	bne.n	800f452 <_dtoa_r+0xb0a>
 800f444:	f000 fe7c 	bl	8010140 <__multadd>
 800f448:	4680      	mov	r8, r0
 800f44a:	4607      	mov	r7, r0
 800f44c:	f109 0901 	add.w	r9, r9, #1
 800f450:	e772      	b.n	800f338 <_dtoa_r+0x9f0>
 800f452:	f000 fe75 	bl	8010140 <__multadd>
 800f456:	4639      	mov	r1, r7
 800f458:	4680      	mov	r8, r0
 800f45a:	2300      	movs	r3, #0
 800f45c:	220a      	movs	r2, #10
 800f45e:	4620      	mov	r0, r4
 800f460:	f000 fe6e 	bl	8010140 <__multadd>
 800f464:	4607      	mov	r7, r0
 800f466:	e7f1      	b.n	800f44c <_dtoa_r+0xb04>
 800f468:	9b03      	ldr	r3, [sp, #12]
 800f46a:	9302      	str	r3, [sp, #8]
 800f46c:	9d01      	ldr	r5, [sp, #4]
 800f46e:	ee18 0a10 	vmov	r0, s16
 800f472:	4631      	mov	r1, r6
 800f474:	f7ff f9da 	bl	800e82c <quorem>
 800f478:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f47c:	9b01      	ldr	r3, [sp, #4]
 800f47e:	f805 ab01 	strb.w	sl, [r5], #1
 800f482:	1aea      	subs	r2, r5, r3
 800f484:	9b02      	ldr	r3, [sp, #8]
 800f486:	4293      	cmp	r3, r2
 800f488:	dd09      	ble.n	800f49e <_dtoa_r+0xb56>
 800f48a:	ee18 1a10 	vmov	r1, s16
 800f48e:	2300      	movs	r3, #0
 800f490:	220a      	movs	r2, #10
 800f492:	4620      	mov	r0, r4
 800f494:	f000 fe54 	bl	8010140 <__multadd>
 800f498:	ee08 0a10 	vmov	s16, r0
 800f49c:	e7e7      	b.n	800f46e <_dtoa_r+0xb26>
 800f49e:	9b02      	ldr	r3, [sp, #8]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	bfc8      	it	gt
 800f4a4:	461d      	movgt	r5, r3
 800f4a6:	9b01      	ldr	r3, [sp, #4]
 800f4a8:	bfd8      	it	le
 800f4aa:	2501      	movle	r5, #1
 800f4ac:	441d      	add	r5, r3
 800f4ae:	f04f 0800 	mov.w	r8, #0
 800f4b2:	ee18 1a10 	vmov	r1, s16
 800f4b6:	2201      	movs	r2, #1
 800f4b8:	4620      	mov	r0, r4
 800f4ba:	f001 f83b 	bl	8010534 <__lshift>
 800f4be:	4631      	mov	r1, r6
 800f4c0:	ee08 0a10 	vmov	s16, r0
 800f4c4:	f001 f8a6 	bl	8010614 <__mcmp>
 800f4c8:	2800      	cmp	r0, #0
 800f4ca:	dc91      	bgt.n	800f3f0 <_dtoa_r+0xaa8>
 800f4cc:	d102      	bne.n	800f4d4 <_dtoa_r+0xb8c>
 800f4ce:	f01a 0f01 	tst.w	sl, #1
 800f4d2:	d18d      	bne.n	800f3f0 <_dtoa_r+0xaa8>
 800f4d4:	462b      	mov	r3, r5
 800f4d6:	461d      	mov	r5, r3
 800f4d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f4dc:	2a30      	cmp	r2, #48	; 0x30
 800f4de:	d0fa      	beq.n	800f4d6 <_dtoa_r+0xb8e>
 800f4e0:	e6d7      	b.n	800f292 <_dtoa_r+0x94a>
 800f4e2:	9a01      	ldr	r2, [sp, #4]
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d184      	bne.n	800f3f2 <_dtoa_r+0xaaa>
 800f4e8:	9b00      	ldr	r3, [sp, #0]
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	9300      	str	r3, [sp, #0]
 800f4ee:	2331      	movs	r3, #49	; 0x31
 800f4f0:	7013      	strb	r3, [r2, #0]
 800f4f2:	e6ce      	b.n	800f292 <_dtoa_r+0x94a>
 800f4f4:	4b09      	ldr	r3, [pc, #36]	; (800f51c <_dtoa_r+0xbd4>)
 800f4f6:	f7ff ba95 	b.w	800ea24 <_dtoa_r+0xdc>
 800f4fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	f47f aa6e 	bne.w	800e9de <_dtoa_r+0x96>
 800f502:	4b07      	ldr	r3, [pc, #28]	; (800f520 <_dtoa_r+0xbd8>)
 800f504:	f7ff ba8e 	b.w	800ea24 <_dtoa_r+0xdc>
 800f508:	9b02      	ldr	r3, [sp, #8]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	dcae      	bgt.n	800f46c <_dtoa_r+0xb24>
 800f50e:	9b06      	ldr	r3, [sp, #24]
 800f510:	2b02      	cmp	r3, #2
 800f512:	f73f aea8 	bgt.w	800f266 <_dtoa_r+0x91e>
 800f516:	e7a9      	b.n	800f46c <_dtoa_r+0xb24>
 800f518:	08012ca8 	.word	0x08012ca8
 800f51c:	08012ab0 	.word	0x08012ab0
 800f520:	08012c29 	.word	0x08012c29

0800f524 <__sflush_r>:
 800f524:	898a      	ldrh	r2, [r1, #12]
 800f526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f52a:	4605      	mov	r5, r0
 800f52c:	0710      	lsls	r0, r2, #28
 800f52e:	460c      	mov	r4, r1
 800f530:	d458      	bmi.n	800f5e4 <__sflush_r+0xc0>
 800f532:	684b      	ldr	r3, [r1, #4]
 800f534:	2b00      	cmp	r3, #0
 800f536:	dc05      	bgt.n	800f544 <__sflush_r+0x20>
 800f538:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	dc02      	bgt.n	800f544 <__sflush_r+0x20>
 800f53e:	2000      	movs	r0, #0
 800f540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f544:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f546:	2e00      	cmp	r6, #0
 800f548:	d0f9      	beq.n	800f53e <__sflush_r+0x1a>
 800f54a:	2300      	movs	r3, #0
 800f54c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f550:	682f      	ldr	r7, [r5, #0]
 800f552:	602b      	str	r3, [r5, #0]
 800f554:	d032      	beq.n	800f5bc <__sflush_r+0x98>
 800f556:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f558:	89a3      	ldrh	r3, [r4, #12]
 800f55a:	075a      	lsls	r2, r3, #29
 800f55c:	d505      	bpl.n	800f56a <__sflush_r+0x46>
 800f55e:	6863      	ldr	r3, [r4, #4]
 800f560:	1ac0      	subs	r0, r0, r3
 800f562:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f564:	b10b      	cbz	r3, 800f56a <__sflush_r+0x46>
 800f566:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f568:	1ac0      	subs	r0, r0, r3
 800f56a:	2300      	movs	r3, #0
 800f56c:	4602      	mov	r2, r0
 800f56e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f570:	6a21      	ldr	r1, [r4, #32]
 800f572:	4628      	mov	r0, r5
 800f574:	47b0      	blx	r6
 800f576:	1c43      	adds	r3, r0, #1
 800f578:	89a3      	ldrh	r3, [r4, #12]
 800f57a:	d106      	bne.n	800f58a <__sflush_r+0x66>
 800f57c:	6829      	ldr	r1, [r5, #0]
 800f57e:	291d      	cmp	r1, #29
 800f580:	d82c      	bhi.n	800f5dc <__sflush_r+0xb8>
 800f582:	4a2a      	ldr	r2, [pc, #168]	; (800f62c <__sflush_r+0x108>)
 800f584:	40ca      	lsrs	r2, r1
 800f586:	07d6      	lsls	r6, r2, #31
 800f588:	d528      	bpl.n	800f5dc <__sflush_r+0xb8>
 800f58a:	2200      	movs	r2, #0
 800f58c:	6062      	str	r2, [r4, #4]
 800f58e:	04d9      	lsls	r1, r3, #19
 800f590:	6922      	ldr	r2, [r4, #16]
 800f592:	6022      	str	r2, [r4, #0]
 800f594:	d504      	bpl.n	800f5a0 <__sflush_r+0x7c>
 800f596:	1c42      	adds	r2, r0, #1
 800f598:	d101      	bne.n	800f59e <__sflush_r+0x7a>
 800f59a:	682b      	ldr	r3, [r5, #0]
 800f59c:	b903      	cbnz	r3, 800f5a0 <__sflush_r+0x7c>
 800f59e:	6560      	str	r0, [r4, #84]	; 0x54
 800f5a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f5a2:	602f      	str	r7, [r5, #0]
 800f5a4:	2900      	cmp	r1, #0
 800f5a6:	d0ca      	beq.n	800f53e <__sflush_r+0x1a>
 800f5a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f5ac:	4299      	cmp	r1, r3
 800f5ae:	d002      	beq.n	800f5b6 <__sflush_r+0x92>
 800f5b0:	4628      	mov	r0, r5
 800f5b2:	f001 fa3b 	bl	8010a2c <_free_r>
 800f5b6:	2000      	movs	r0, #0
 800f5b8:	6360      	str	r0, [r4, #52]	; 0x34
 800f5ba:	e7c1      	b.n	800f540 <__sflush_r+0x1c>
 800f5bc:	6a21      	ldr	r1, [r4, #32]
 800f5be:	2301      	movs	r3, #1
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	47b0      	blx	r6
 800f5c4:	1c41      	adds	r1, r0, #1
 800f5c6:	d1c7      	bne.n	800f558 <__sflush_r+0x34>
 800f5c8:	682b      	ldr	r3, [r5, #0]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d0c4      	beq.n	800f558 <__sflush_r+0x34>
 800f5ce:	2b1d      	cmp	r3, #29
 800f5d0:	d001      	beq.n	800f5d6 <__sflush_r+0xb2>
 800f5d2:	2b16      	cmp	r3, #22
 800f5d4:	d101      	bne.n	800f5da <__sflush_r+0xb6>
 800f5d6:	602f      	str	r7, [r5, #0]
 800f5d8:	e7b1      	b.n	800f53e <__sflush_r+0x1a>
 800f5da:	89a3      	ldrh	r3, [r4, #12]
 800f5dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5e0:	81a3      	strh	r3, [r4, #12]
 800f5e2:	e7ad      	b.n	800f540 <__sflush_r+0x1c>
 800f5e4:	690f      	ldr	r7, [r1, #16]
 800f5e6:	2f00      	cmp	r7, #0
 800f5e8:	d0a9      	beq.n	800f53e <__sflush_r+0x1a>
 800f5ea:	0793      	lsls	r3, r2, #30
 800f5ec:	680e      	ldr	r6, [r1, #0]
 800f5ee:	bf08      	it	eq
 800f5f0:	694b      	ldreq	r3, [r1, #20]
 800f5f2:	600f      	str	r7, [r1, #0]
 800f5f4:	bf18      	it	ne
 800f5f6:	2300      	movne	r3, #0
 800f5f8:	eba6 0807 	sub.w	r8, r6, r7
 800f5fc:	608b      	str	r3, [r1, #8]
 800f5fe:	f1b8 0f00 	cmp.w	r8, #0
 800f602:	dd9c      	ble.n	800f53e <__sflush_r+0x1a>
 800f604:	6a21      	ldr	r1, [r4, #32]
 800f606:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f608:	4643      	mov	r3, r8
 800f60a:	463a      	mov	r2, r7
 800f60c:	4628      	mov	r0, r5
 800f60e:	47b0      	blx	r6
 800f610:	2800      	cmp	r0, #0
 800f612:	dc06      	bgt.n	800f622 <__sflush_r+0xfe>
 800f614:	89a3      	ldrh	r3, [r4, #12]
 800f616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f61a:	81a3      	strh	r3, [r4, #12]
 800f61c:	f04f 30ff 	mov.w	r0, #4294967295
 800f620:	e78e      	b.n	800f540 <__sflush_r+0x1c>
 800f622:	4407      	add	r7, r0
 800f624:	eba8 0800 	sub.w	r8, r8, r0
 800f628:	e7e9      	b.n	800f5fe <__sflush_r+0xda>
 800f62a:	bf00      	nop
 800f62c:	20400001 	.word	0x20400001

0800f630 <_fflush_r>:
 800f630:	b538      	push	{r3, r4, r5, lr}
 800f632:	690b      	ldr	r3, [r1, #16]
 800f634:	4605      	mov	r5, r0
 800f636:	460c      	mov	r4, r1
 800f638:	b913      	cbnz	r3, 800f640 <_fflush_r+0x10>
 800f63a:	2500      	movs	r5, #0
 800f63c:	4628      	mov	r0, r5
 800f63e:	bd38      	pop	{r3, r4, r5, pc}
 800f640:	b118      	cbz	r0, 800f64a <_fflush_r+0x1a>
 800f642:	6983      	ldr	r3, [r0, #24]
 800f644:	b90b      	cbnz	r3, 800f64a <_fflush_r+0x1a>
 800f646:	f000 f887 	bl	800f758 <__sinit>
 800f64a:	4b14      	ldr	r3, [pc, #80]	; (800f69c <_fflush_r+0x6c>)
 800f64c:	429c      	cmp	r4, r3
 800f64e:	d11b      	bne.n	800f688 <_fflush_r+0x58>
 800f650:	686c      	ldr	r4, [r5, #4]
 800f652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d0ef      	beq.n	800f63a <_fflush_r+0xa>
 800f65a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f65c:	07d0      	lsls	r0, r2, #31
 800f65e:	d404      	bmi.n	800f66a <_fflush_r+0x3a>
 800f660:	0599      	lsls	r1, r3, #22
 800f662:	d402      	bmi.n	800f66a <_fflush_r+0x3a>
 800f664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f666:	f000 fc88 	bl	800ff7a <__retarget_lock_acquire_recursive>
 800f66a:	4628      	mov	r0, r5
 800f66c:	4621      	mov	r1, r4
 800f66e:	f7ff ff59 	bl	800f524 <__sflush_r>
 800f672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f674:	07da      	lsls	r2, r3, #31
 800f676:	4605      	mov	r5, r0
 800f678:	d4e0      	bmi.n	800f63c <_fflush_r+0xc>
 800f67a:	89a3      	ldrh	r3, [r4, #12]
 800f67c:	059b      	lsls	r3, r3, #22
 800f67e:	d4dd      	bmi.n	800f63c <_fflush_r+0xc>
 800f680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f682:	f000 fc7b 	bl	800ff7c <__retarget_lock_release_recursive>
 800f686:	e7d9      	b.n	800f63c <_fflush_r+0xc>
 800f688:	4b05      	ldr	r3, [pc, #20]	; (800f6a0 <_fflush_r+0x70>)
 800f68a:	429c      	cmp	r4, r3
 800f68c:	d101      	bne.n	800f692 <_fflush_r+0x62>
 800f68e:	68ac      	ldr	r4, [r5, #8]
 800f690:	e7df      	b.n	800f652 <_fflush_r+0x22>
 800f692:	4b04      	ldr	r3, [pc, #16]	; (800f6a4 <_fflush_r+0x74>)
 800f694:	429c      	cmp	r4, r3
 800f696:	bf08      	it	eq
 800f698:	68ec      	ldreq	r4, [r5, #12]
 800f69a:	e7da      	b.n	800f652 <_fflush_r+0x22>
 800f69c:	08012cdc 	.word	0x08012cdc
 800f6a0:	08012cfc 	.word	0x08012cfc
 800f6a4:	08012cbc 	.word	0x08012cbc

0800f6a8 <std>:
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	b510      	push	{r4, lr}
 800f6ac:	4604      	mov	r4, r0
 800f6ae:	e9c0 3300 	strd	r3, r3, [r0]
 800f6b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f6b6:	6083      	str	r3, [r0, #8]
 800f6b8:	8181      	strh	r1, [r0, #12]
 800f6ba:	6643      	str	r3, [r0, #100]	; 0x64
 800f6bc:	81c2      	strh	r2, [r0, #14]
 800f6be:	6183      	str	r3, [r0, #24]
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	2208      	movs	r2, #8
 800f6c4:	305c      	adds	r0, #92	; 0x5c
 800f6c6:	f7fd fc37 	bl	800cf38 <memset>
 800f6ca:	4b05      	ldr	r3, [pc, #20]	; (800f6e0 <std+0x38>)
 800f6cc:	6263      	str	r3, [r4, #36]	; 0x24
 800f6ce:	4b05      	ldr	r3, [pc, #20]	; (800f6e4 <std+0x3c>)
 800f6d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800f6d2:	4b05      	ldr	r3, [pc, #20]	; (800f6e8 <std+0x40>)
 800f6d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f6d6:	4b05      	ldr	r3, [pc, #20]	; (800f6ec <std+0x44>)
 800f6d8:	6224      	str	r4, [r4, #32]
 800f6da:	6323      	str	r3, [r4, #48]	; 0x30
 800f6dc:	bd10      	pop	{r4, pc}
 800f6de:	bf00      	nop
 800f6e0:	08010edd 	.word	0x08010edd
 800f6e4:	08010eff 	.word	0x08010eff
 800f6e8:	08010f37 	.word	0x08010f37
 800f6ec:	08010f5b 	.word	0x08010f5b

0800f6f0 <_cleanup_r>:
 800f6f0:	4901      	ldr	r1, [pc, #4]	; (800f6f8 <_cleanup_r+0x8>)
 800f6f2:	f000 b8af 	b.w	800f854 <_fwalk_reent>
 800f6f6:	bf00      	nop
 800f6f8:	0800f631 	.word	0x0800f631

0800f6fc <__sfmoreglue>:
 800f6fc:	b570      	push	{r4, r5, r6, lr}
 800f6fe:	2268      	movs	r2, #104	; 0x68
 800f700:	1e4d      	subs	r5, r1, #1
 800f702:	4355      	muls	r5, r2
 800f704:	460e      	mov	r6, r1
 800f706:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f70a:	f001 f9fb 	bl	8010b04 <_malloc_r>
 800f70e:	4604      	mov	r4, r0
 800f710:	b140      	cbz	r0, 800f724 <__sfmoreglue+0x28>
 800f712:	2100      	movs	r1, #0
 800f714:	e9c0 1600 	strd	r1, r6, [r0]
 800f718:	300c      	adds	r0, #12
 800f71a:	60a0      	str	r0, [r4, #8]
 800f71c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f720:	f7fd fc0a 	bl	800cf38 <memset>
 800f724:	4620      	mov	r0, r4
 800f726:	bd70      	pop	{r4, r5, r6, pc}

0800f728 <__sfp_lock_acquire>:
 800f728:	4801      	ldr	r0, [pc, #4]	; (800f730 <__sfp_lock_acquire+0x8>)
 800f72a:	f000 bc26 	b.w	800ff7a <__retarget_lock_acquire_recursive>
 800f72e:	bf00      	nop
 800f730:	20005139 	.word	0x20005139

0800f734 <__sfp_lock_release>:
 800f734:	4801      	ldr	r0, [pc, #4]	; (800f73c <__sfp_lock_release+0x8>)
 800f736:	f000 bc21 	b.w	800ff7c <__retarget_lock_release_recursive>
 800f73a:	bf00      	nop
 800f73c:	20005139 	.word	0x20005139

0800f740 <__sinit_lock_acquire>:
 800f740:	4801      	ldr	r0, [pc, #4]	; (800f748 <__sinit_lock_acquire+0x8>)
 800f742:	f000 bc1a 	b.w	800ff7a <__retarget_lock_acquire_recursive>
 800f746:	bf00      	nop
 800f748:	2000513a 	.word	0x2000513a

0800f74c <__sinit_lock_release>:
 800f74c:	4801      	ldr	r0, [pc, #4]	; (800f754 <__sinit_lock_release+0x8>)
 800f74e:	f000 bc15 	b.w	800ff7c <__retarget_lock_release_recursive>
 800f752:	bf00      	nop
 800f754:	2000513a 	.word	0x2000513a

0800f758 <__sinit>:
 800f758:	b510      	push	{r4, lr}
 800f75a:	4604      	mov	r4, r0
 800f75c:	f7ff fff0 	bl	800f740 <__sinit_lock_acquire>
 800f760:	69a3      	ldr	r3, [r4, #24]
 800f762:	b11b      	cbz	r3, 800f76c <__sinit+0x14>
 800f764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f768:	f7ff bff0 	b.w	800f74c <__sinit_lock_release>
 800f76c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f770:	6523      	str	r3, [r4, #80]	; 0x50
 800f772:	4b13      	ldr	r3, [pc, #76]	; (800f7c0 <__sinit+0x68>)
 800f774:	4a13      	ldr	r2, [pc, #76]	; (800f7c4 <__sinit+0x6c>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	62a2      	str	r2, [r4, #40]	; 0x28
 800f77a:	42a3      	cmp	r3, r4
 800f77c:	bf04      	itt	eq
 800f77e:	2301      	moveq	r3, #1
 800f780:	61a3      	streq	r3, [r4, #24]
 800f782:	4620      	mov	r0, r4
 800f784:	f000 f820 	bl	800f7c8 <__sfp>
 800f788:	6060      	str	r0, [r4, #4]
 800f78a:	4620      	mov	r0, r4
 800f78c:	f000 f81c 	bl	800f7c8 <__sfp>
 800f790:	60a0      	str	r0, [r4, #8]
 800f792:	4620      	mov	r0, r4
 800f794:	f000 f818 	bl	800f7c8 <__sfp>
 800f798:	2200      	movs	r2, #0
 800f79a:	60e0      	str	r0, [r4, #12]
 800f79c:	2104      	movs	r1, #4
 800f79e:	6860      	ldr	r0, [r4, #4]
 800f7a0:	f7ff ff82 	bl	800f6a8 <std>
 800f7a4:	68a0      	ldr	r0, [r4, #8]
 800f7a6:	2201      	movs	r2, #1
 800f7a8:	2109      	movs	r1, #9
 800f7aa:	f7ff ff7d 	bl	800f6a8 <std>
 800f7ae:	68e0      	ldr	r0, [r4, #12]
 800f7b0:	2202      	movs	r2, #2
 800f7b2:	2112      	movs	r1, #18
 800f7b4:	f7ff ff78 	bl	800f6a8 <std>
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	61a3      	str	r3, [r4, #24]
 800f7bc:	e7d2      	b.n	800f764 <__sinit+0xc>
 800f7be:	bf00      	nop
 800f7c0:	08012a9c 	.word	0x08012a9c
 800f7c4:	0800f6f1 	.word	0x0800f6f1

0800f7c8 <__sfp>:
 800f7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ca:	4607      	mov	r7, r0
 800f7cc:	f7ff ffac 	bl	800f728 <__sfp_lock_acquire>
 800f7d0:	4b1e      	ldr	r3, [pc, #120]	; (800f84c <__sfp+0x84>)
 800f7d2:	681e      	ldr	r6, [r3, #0]
 800f7d4:	69b3      	ldr	r3, [r6, #24]
 800f7d6:	b913      	cbnz	r3, 800f7de <__sfp+0x16>
 800f7d8:	4630      	mov	r0, r6
 800f7da:	f7ff ffbd 	bl	800f758 <__sinit>
 800f7de:	3648      	adds	r6, #72	; 0x48
 800f7e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f7e4:	3b01      	subs	r3, #1
 800f7e6:	d503      	bpl.n	800f7f0 <__sfp+0x28>
 800f7e8:	6833      	ldr	r3, [r6, #0]
 800f7ea:	b30b      	cbz	r3, 800f830 <__sfp+0x68>
 800f7ec:	6836      	ldr	r6, [r6, #0]
 800f7ee:	e7f7      	b.n	800f7e0 <__sfp+0x18>
 800f7f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f7f4:	b9d5      	cbnz	r5, 800f82c <__sfp+0x64>
 800f7f6:	4b16      	ldr	r3, [pc, #88]	; (800f850 <__sfp+0x88>)
 800f7f8:	60e3      	str	r3, [r4, #12]
 800f7fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f7fe:	6665      	str	r5, [r4, #100]	; 0x64
 800f800:	f000 fbba 	bl	800ff78 <__retarget_lock_init_recursive>
 800f804:	f7ff ff96 	bl	800f734 <__sfp_lock_release>
 800f808:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f80c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f810:	6025      	str	r5, [r4, #0]
 800f812:	61a5      	str	r5, [r4, #24]
 800f814:	2208      	movs	r2, #8
 800f816:	4629      	mov	r1, r5
 800f818:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f81c:	f7fd fb8c 	bl	800cf38 <memset>
 800f820:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f824:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f828:	4620      	mov	r0, r4
 800f82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f82c:	3468      	adds	r4, #104	; 0x68
 800f82e:	e7d9      	b.n	800f7e4 <__sfp+0x1c>
 800f830:	2104      	movs	r1, #4
 800f832:	4638      	mov	r0, r7
 800f834:	f7ff ff62 	bl	800f6fc <__sfmoreglue>
 800f838:	4604      	mov	r4, r0
 800f83a:	6030      	str	r0, [r6, #0]
 800f83c:	2800      	cmp	r0, #0
 800f83e:	d1d5      	bne.n	800f7ec <__sfp+0x24>
 800f840:	f7ff ff78 	bl	800f734 <__sfp_lock_release>
 800f844:	230c      	movs	r3, #12
 800f846:	603b      	str	r3, [r7, #0]
 800f848:	e7ee      	b.n	800f828 <__sfp+0x60>
 800f84a:	bf00      	nop
 800f84c:	08012a9c 	.word	0x08012a9c
 800f850:	ffff0001 	.word	0xffff0001

0800f854 <_fwalk_reent>:
 800f854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f858:	4606      	mov	r6, r0
 800f85a:	4688      	mov	r8, r1
 800f85c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f860:	2700      	movs	r7, #0
 800f862:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f866:	f1b9 0901 	subs.w	r9, r9, #1
 800f86a:	d505      	bpl.n	800f878 <_fwalk_reent+0x24>
 800f86c:	6824      	ldr	r4, [r4, #0]
 800f86e:	2c00      	cmp	r4, #0
 800f870:	d1f7      	bne.n	800f862 <_fwalk_reent+0xe>
 800f872:	4638      	mov	r0, r7
 800f874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f878:	89ab      	ldrh	r3, [r5, #12]
 800f87a:	2b01      	cmp	r3, #1
 800f87c:	d907      	bls.n	800f88e <_fwalk_reent+0x3a>
 800f87e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f882:	3301      	adds	r3, #1
 800f884:	d003      	beq.n	800f88e <_fwalk_reent+0x3a>
 800f886:	4629      	mov	r1, r5
 800f888:	4630      	mov	r0, r6
 800f88a:	47c0      	blx	r8
 800f88c:	4307      	orrs	r7, r0
 800f88e:	3568      	adds	r5, #104	; 0x68
 800f890:	e7e9      	b.n	800f866 <_fwalk_reent+0x12>

0800f892 <rshift>:
 800f892:	6903      	ldr	r3, [r0, #16]
 800f894:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f89c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f8a0:	f100 0414 	add.w	r4, r0, #20
 800f8a4:	dd45      	ble.n	800f932 <rshift+0xa0>
 800f8a6:	f011 011f 	ands.w	r1, r1, #31
 800f8aa:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f8ae:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f8b2:	d10c      	bne.n	800f8ce <rshift+0x3c>
 800f8b4:	f100 0710 	add.w	r7, r0, #16
 800f8b8:	4629      	mov	r1, r5
 800f8ba:	42b1      	cmp	r1, r6
 800f8bc:	d334      	bcc.n	800f928 <rshift+0x96>
 800f8be:	1a9b      	subs	r3, r3, r2
 800f8c0:	009b      	lsls	r3, r3, #2
 800f8c2:	1eea      	subs	r2, r5, #3
 800f8c4:	4296      	cmp	r6, r2
 800f8c6:	bf38      	it	cc
 800f8c8:	2300      	movcc	r3, #0
 800f8ca:	4423      	add	r3, r4
 800f8cc:	e015      	b.n	800f8fa <rshift+0x68>
 800f8ce:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f8d2:	f1c1 0820 	rsb	r8, r1, #32
 800f8d6:	40cf      	lsrs	r7, r1
 800f8d8:	f105 0e04 	add.w	lr, r5, #4
 800f8dc:	46a1      	mov	r9, r4
 800f8de:	4576      	cmp	r6, lr
 800f8e0:	46f4      	mov	ip, lr
 800f8e2:	d815      	bhi.n	800f910 <rshift+0x7e>
 800f8e4:	1a9a      	subs	r2, r3, r2
 800f8e6:	0092      	lsls	r2, r2, #2
 800f8e8:	3a04      	subs	r2, #4
 800f8ea:	3501      	adds	r5, #1
 800f8ec:	42ae      	cmp	r6, r5
 800f8ee:	bf38      	it	cc
 800f8f0:	2200      	movcc	r2, #0
 800f8f2:	18a3      	adds	r3, r4, r2
 800f8f4:	50a7      	str	r7, [r4, r2]
 800f8f6:	b107      	cbz	r7, 800f8fa <rshift+0x68>
 800f8f8:	3304      	adds	r3, #4
 800f8fa:	1b1a      	subs	r2, r3, r4
 800f8fc:	42a3      	cmp	r3, r4
 800f8fe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f902:	bf08      	it	eq
 800f904:	2300      	moveq	r3, #0
 800f906:	6102      	str	r2, [r0, #16]
 800f908:	bf08      	it	eq
 800f90a:	6143      	streq	r3, [r0, #20]
 800f90c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f910:	f8dc c000 	ldr.w	ip, [ip]
 800f914:	fa0c fc08 	lsl.w	ip, ip, r8
 800f918:	ea4c 0707 	orr.w	r7, ip, r7
 800f91c:	f849 7b04 	str.w	r7, [r9], #4
 800f920:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f924:	40cf      	lsrs	r7, r1
 800f926:	e7da      	b.n	800f8de <rshift+0x4c>
 800f928:	f851 cb04 	ldr.w	ip, [r1], #4
 800f92c:	f847 cf04 	str.w	ip, [r7, #4]!
 800f930:	e7c3      	b.n	800f8ba <rshift+0x28>
 800f932:	4623      	mov	r3, r4
 800f934:	e7e1      	b.n	800f8fa <rshift+0x68>

0800f936 <__hexdig_fun>:
 800f936:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f93a:	2b09      	cmp	r3, #9
 800f93c:	d802      	bhi.n	800f944 <__hexdig_fun+0xe>
 800f93e:	3820      	subs	r0, #32
 800f940:	b2c0      	uxtb	r0, r0
 800f942:	4770      	bx	lr
 800f944:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f948:	2b05      	cmp	r3, #5
 800f94a:	d801      	bhi.n	800f950 <__hexdig_fun+0x1a>
 800f94c:	3847      	subs	r0, #71	; 0x47
 800f94e:	e7f7      	b.n	800f940 <__hexdig_fun+0xa>
 800f950:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f954:	2b05      	cmp	r3, #5
 800f956:	d801      	bhi.n	800f95c <__hexdig_fun+0x26>
 800f958:	3827      	subs	r0, #39	; 0x27
 800f95a:	e7f1      	b.n	800f940 <__hexdig_fun+0xa>
 800f95c:	2000      	movs	r0, #0
 800f95e:	4770      	bx	lr

0800f960 <__gethex>:
 800f960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f964:	ed2d 8b02 	vpush	{d8}
 800f968:	b089      	sub	sp, #36	; 0x24
 800f96a:	ee08 0a10 	vmov	s16, r0
 800f96e:	9304      	str	r3, [sp, #16]
 800f970:	4bb4      	ldr	r3, [pc, #720]	; (800fc44 <__gethex+0x2e4>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	9301      	str	r3, [sp, #4]
 800f976:	4618      	mov	r0, r3
 800f978:	468b      	mov	fp, r1
 800f97a:	4690      	mov	r8, r2
 800f97c:	f7f0 fc50 	bl	8000220 <strlen>
 800f980:	9b01      	ldr	r3, [sp, #4]
 800f982:	f8db 2000 	ldr.w	r2, [fp]
 800f986:	4403      	add	r3, r0
 800f988:	4682      	mov	sl, r0
 800f98a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f98e:	9305      	str	r3, [sp, #20]
 800f990:	1c93      	adds	r3, r2, #2
 800f992:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f996:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f99a:	32fe      	adds	r2, #254	; 0xfe
 800f99c:	18d1      	adds	r1, r2, r3
 800f99e:	461f      	mov	r7, r3
 800f9a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f9a4:	9100      	str	r1, [sp, #0]
 800f9a6:	2830      	cmp	r0, #48	; 0x30
 800f9a8:	d0f8      	beq.n	800f99c <__gethex+0x3c>
 800f9aa:	f7ff ffc4 	bl	800f936 <__hexdig_fun>
 800f9ae:	4604      	mov	r4, r0
 800f9b0:	2800      	cmp	r0, #0
 800f9b2:	d13a      	bne.n	800fa2a <__gethex+0xca>
 800f9b4:	9901      	ldr	r1, [sp, #4]
 800f9b6:	4652      	mov	r2, sl
 800f9b8:	4638      	mov	r0, r7
 800f9ba:	f001 fad2 	bl	8010f62 <strncmp>
 800f9be:	4605      	mov	r5, r0
 800f9c0:	2800      	cmp	r0, #0
 800f9c2:	d168      	bne.n	800fa96 <__gethex+0x136>
 800f9c4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f9c8:	eb07 060a 	add.w	r6, r7, sl
 800f9cc:	f7ff ffb3 	bl	800f936 <__hexdig_fun>
 800f9d0:	2800      	cmp	r0, #0
 800f9d2:	d062      	beq.n	800fa9a <__gethex+0x13a>
 800f9d4:	4633      	mov	r3, r6
 800f9d6:	7818      	ldrb	r0, [r3, #0]
 800f9d8:	2830      	cmp	r0, #48	; 0x30
 800f9da:	461f      	mov	r7, r3
 800f9dc:	f103 0301 	add.w	r3, r3, #1
 800f9e0:	d0f9      	beq.n	800f9d6 <__gethex+0x76>
 800f9e2:	f7ff ffa8 	bl	800f936 <__hexdig_fun>
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	fab0 f480 	clz	r4, r0
 800f9ec:	0964      	lsrs	r4, r4, #5
 800f9ee:	4635      	mov	r5, r6
 800f9f0:	9300      	str	r3, [sp, #0]
 800f9f2:	463a      	mov	r2, r7
 800f9f4:	4616      	mov	r6, r2
 800f9f6:	3201      	adds	r2, #1
 800f9f8:	7830      	ldrb	r0, [r6, #0]
 800f9fa:	f7ff ff9c 	bl	800f936 <__hexdig_fun>
 800f9fe:	2800      	cmp	r0, #0
 800fa00:	d1f8      	bne.n	800f9f4 <__gethex+0x94>
 800fa02:	9901      	ldr	r1, [sp, #4]
 800fa04:	4652      	mov	r2, sl
 800fa06:	4630      	mov	r0, r6
 800fa08:	f001 faab 	bl	8010f62 <strncmp>
 800fa0c:	b980      	cbnz	r0, 800fa30 <__gethex+0xd0>
 800fa0e:	b94d      	cbnz	r5, 800fa24 <__gethex+0xc4>
 800fa10:	eb06 050a 	add.w	r5, r6, sl
 800fa14:	462a      	mov	r2, r5
 800fa16:	4616      	mov	r6, r2
 800fa18:	3201      	adds	r2, #1
 800fa1a:	7830      	ldrb	r0, [r6, #0]
 800fa1c:	f7ff ff8b 	bl	800f936 <__hexdig_fun>
 800fa20:	2800      	cmp	r0, #0
 800fa22:	d1f8      	bne.n	800fa16 <__gethex+0xb6>
 800fa24:	1bad      	subs	r5, r5, r6
 800fa26:	00ad      	lsls	r5, r5, #2
 800fa28:	e004      	b.n	800fa34 <__gethex+0xd4>
 800fa2a:	2400      	movs	r4, #0
 800fa2c:	4625      	mov	r5, r4
 800fa2e:	e7e0      	b.n	800f9f2 <__gethex+0x92>
 800fa30:	2d00      	cmp	r5, #0
 800fa32:	d1f7      	bne.n	800fa24 <__gethex+0xc4>
 800fa34:	7833      	ldrb	r3, [r6, #0]
 800fa36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fa3a:	2b50      	cmp	r3, #80	; 0x50
 800fa3c:	d13b      	bne.n	800fab6 <__gethex+0x156>
 800fa3e:	7873      	ldrb	r3, [r6, #1]
 800fa40:	2b2b      	cmp	r3, #43	; 0x2b
 800fa42:	d02c      	beq.n	800fa9e <__gethex+0x13e>
 800fa44:	2b2d      	cmp	r3, #45	; 0x2d
 800fa46:	d02e      	beq.n	800faa6 <__gethex+0x146>
 800fa48:	1c71      	adds	r1, r6, #1
 800fa4a:	f04f 0900 	mov.w	r9, #0
 800fa4e:	7808      	ldrb	r0, [r1, #0]
 800fa50:	f7ff ff71 	bl	800f936 <__hexdig_fun>
 800fa54:	1e43      	subs	r3, r0, #1
 800fa56:	b2db      	uxtb	r3, r3
 800fa58:	2b18      	cmp	r3, #24
 800fa5a:	d82c      	bhi.n	800fab6 <__gethex+0x156>
 800fa5c:	f1a0 0210 	sub.w	r2, r0, #16
 800fa60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fa64:	f7ff ff67 	bl	800f936 <__hexdig_fun>
 800fa68:	1e43      	subs	r3, r0, #1
 800fa6a:	b2db      	uxtb	r3, r3
 800fa6c:	2b18      	cmp	r3, #24
 800fa6e:	d91d      	bls.n	800faac <__gethex+0x14c>
 800fa70:	f1b9 0f00 	cmp.w	r9, #0
 800fa74:	d000      	beq.n	800fa78 <__gethex+0x118>
 800fa76:	4252      	negs	r2, r2
 800fa78:	4415      	add	r5, r2
 800fa7a:	f8cb 1000 	str.w	r1, [fp]
 800fa7e:	b1e4      	cbz	r4, 800faba <__gethex+0x15a>
 800fa80:	9b00      	ldr	r3, [sp, #0]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	bf14      	ite	ne
 800fa86:	2700      	movne	r7, #0
 800fa88:	2706      	moveq	r7, #6
 800fa8a:	4638      	mov	r0, r7
 800fa8c:	b009      	add	sp, #36	; 0x24
 800fa8e:	ecbd 8b02 	vpop	{d8}
 800fa92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa96:	463e      	mov	r6, r7
 800fa98:	4625      	mov	r5, r4
 800fa9a:	2401      	movs	r4, #1
 800fa9c:	e7ca      	b.n	800fa34 <__gethex+0xd4>
 800fa9e:	f04f 0900 	mov.w	r9, #0
 800faa2:	1cb1      	adds	r1, r6, #2
 800faa4:	e7d3      	b.n	800fa4e <__gethex+0xee>
 800faa6:	f04f 0901 	mov.w	r9, #1
 800faaa:	e7fa      	b.n	800faa2 <__gethex+0x142>
 800faac:	230a      	movs	r3, #10
 800faae:	fb03 0202 	mla	r2, r3, r2, r0
 800fab2:	3a10      	subs	r2, #16
 800fab4:	e7d4      	b.n	800fa60 <__gethex+0x100>
 800fab6:	4631      	mov	r1, r6
 800fab8:	e7df      	b.n	800fa7a <__gethex+0x11a>
 800faba:	1bf3      	subs	r3, r6, r7
 800fabc:	3b01      	subs	r3, #1
 800fabe:	4621      	mov	r1, r4
 800fac0:	2b07      	cmp	r3, #7
 800fac2:	dc0b      	bgt.n	800fadc <__gethex+0x17c>
 800fac4:	ee18 0a10 	vmov	r0, s16
 800fac8:	f000 fad8 	bl	801007c <_Balloc>
 800facc:	4604      	mov	r4, r0
 800face:	b940      	cbnz	r0, 800fae2 <__gethex+0x182>
 800fad0:	4b5d      	ldr	r3, [pc, #372]	; (800fc48 <__gethex+0x2e8>)
 800fad2:	4602      	mov	r2, r0
 800fad4:	21de      	movs	r1, #222	; 0xde
 800fad6:	485d      	ldr	r0, [pc, #372]	; (800fc4c <__gethex+0x2ec>)
 800fad8:	f001 fa76 	bl	8010fc8 <__assert_func>
 800fadc:	3101      	adds	r1, #1
 800fade:	105b      	asrs	r3, r3, #1
 800fae0:	e7ee      	b.n	800fac0 <__gethex+0x160>
 800fae2:	f100 0914 	add.w	r9, r0, #20
 800fae6:	f04f 0b00 	mov.w	fp, #0
 800faea:	f1ca 0301 	rsb	r3, sl, #1
 800faee:	f8cd 9008 	str.w	r9, [sp, #8]
 800faf2:	f8cd b000 	str.w	fp, [sp]
 800faf6:	9306      	str	r3, [sp, #24]
 800faf8:	42b7      	cmp	r7, r6
 800fafa:	d340      	bcc.n	800fb7e <__gethex+0x21e>
 800fafc:	9802      	ldr	r0, [sp, #8]
 800fafe:	9b00      	ldr	r3, [sp, #0]
 800fb00:	f840 3b04 	str.w	r3, [r0], #4
 800fb04:	eba0 0009 	sub.w	r0, r0, r9
 800fb08:	1080      	asrs	r0, r0, #2
 800fb0a:	0146      	lsls	r6, r0, #5
 800fb0c:	6120      	str	r0, [r4, #16]
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f000 fba6 	bl	8010260 <__hi0bits>
 800fb14:	1a30      	subs	r0, r6, r0
 800fb16:	f8d8 6000 	ldr.w	r6, [r8]
 800fb1a:	42b0      	cmp	r0, r6
 800fb1c:	dd63      	ble.n	800fbe6 <__gethex+0x286>
 800fb1e:	1b87      	subs	r7, r0, r6
 800fb20:	4639      	mov	r1, r7
 800fb22:	4620      	mov	r0, r4
 800fb24:	f000 ff4a 	bl	80109bc <__any_on>
 800fb28:	4682      	mov	sl, r0
 800fb2a:	b1a8      	cbz	r0, 800fb58 <__gethex+0x1f8>
 800fb2c:	1e7b      	subs	r3, r7, #1
 800fb2e:	1159      	asrs	r1, r3, #5
 800fb30:	f003 021f 	and.w	r2, r3, #31
 800fb34:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fb38:	f04f 0a01 	mov.w	sl, #1
 800fb3c:	fa0a f202 	lsl.w	r2, sl, r2
 800fb40:	420a      	tst	r2, r1
 800fb42:	d009      	beq.n	800fb58 <__gethex+0x1f8>
 800fb44:	4553      	cmp	r3, sl
 800fb46:	dd05      	ble.n	800fb54 <__gethex+0x1f4>
 800fb48:	1eb9      	subs	r1, r7, #2
 800fb4a:	4620      	mov	r0, r4
 800fb4c:	f000 ff36 	bl	80109bc <__any_on>
 800fb50:	2800      	cmp	r0, #0
 800fb52:	d145      	bne.n	800fbe0 <__gethex+0x280>
 800fb54:	f04f 0a02 	mov.w	sl, #2
 800fb58:	4639      	mov	r1, r7
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	f7ff fe99 	bl	800f892 <rshift>
 800fb60:	443d      	add	r5, r7
 800fb62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fb66:	42ab      	cmp	r3, r5
 800fb68:	da4c      	bge.n	800fc04 <__gethex+0x2a4>
 800fb6a:	ee18 0a10 	vmov	r0, s16
 800fb6e:	4621      	mov	r1, r4
 800fb70:	f000 fac4 	bl	80100fc <_Bfree>
 800fb74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fb76:	2300      	movs	r3, #0
 800fb78:	6013      	str	r3, [r2, #0]
 800fb7a:	27a3      	movs	r7, #163	; 0xa3
 800fb7c:	e785      	b.n	800fa8a <__gethex+0x12a>
 800fb7e:	1e73      	subs	r3, r6, #1
 800fb80:	9a05      	ldr	r2, [sp, #20]
 800fb82:	9303      	str	r3, [sp, #12]
 800fb84:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fb88:	4293      	cmp	r3, r2
 800fb8a:	d019      	beq.n	800fbc0 <__gethex+0x260>
 800fb8c:	f1bb 0f20 	cmp.w	fp, #32
 800fb90:	d107      	bne.n	800fba2 <__gethex+0x242>
 800fb92:	9b02      	ldr	r3, [sp, #8]
 800fb94:	9a00      	ldr	r2, [sp, #0]
 800fb96:	f843 2b04 	str.w	r2, [r3], #4
 800fb9a:	9302      	str	r3, [sp, #8]
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	9300      	str	r3, [sp, #0]
 800fba0:	469b      	mov	fp, r3
 800fba2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fba6:	f7ff fec6 	bl	800f936 <__hexdig_fun>
 800fbaa:	9b00      	ldr	r3, [sp, #0]
 800fbac:	f000 000f 	and.w	r0, r0, #15
 800fbb0:	fa00 f00b 	lsl.w	r0, r0, fp
 800fbb4:	4303      	orrs	r3, r0
 800fbb6:	9300      	str	r3, [sp, #0]
 800fbb8:	f10b 0b04 	add.w	fp, fp, #4
 800fbbc:	9b03      	ldr	r3, [sp, #12]
 800fbbe:	e00d      	b.n	800fbdc <__gethex+0x27c>
 800fbc0:	9b03      	ldr	r3, [sp, #12]
 800fbc2:	9a06      	ldr	r2, [sp, #24]
 800fbc4:	4413      	add	r3, r2
 800fbc6:	42bb      	cmp	r3, r7
 800fbc8:	d3e0      	bcc.n	800fb8c <__gethex+0x22c>
 800fbca:	4618      	mov	r0, r3
 800fbcc:	9901      	ldr	r1, [sp, #4]
 800fbce:	9307      	str	r3, [sp, #28]
 800fbd0:	4652      	mov	r2, sl
 800fbd2:	f001 f9c6 	bl	8010f62 <strncmp>
 800fbd6:	9b07      	ldr	r3, [sp, #28]
 800fbd8:	2800      	cmp	r0, #0
 800fbda:	d1d7      	bne.n	800fb8c <__gethex+0x22c>
 800fbdc:	461e      	mov	r6, r3
 800fbde:	e78b      	b.n	800faf8 <__gethex+0x198>
 800fbe0:	f04f 0a03 	mov.w	sl, #3
 800fbe4:	e7b8      	b.n	800fb58 <__gethex+0x1f8>
 800fbe6:	da0a      	bge.n	800fbfe <__gethex+0x29e>
 800fbe8:	1a37      	subs	r7, r6, r0
 800fbea:	4621      	mov	r1, r4
 800fbec:	ee18 0a10 	vmov	r0, s16
 800fbf0:	463a      	mov	r2, r7
 800fbf2:	f000 fc9f 	bl	8010534 <__lshift>
 800fbf6:	1bed      	subs	r5, r5, r7
 800fbf8:	4604      	mov	r4, r0
 800fbfa:	f100 0914 	add.w	r9, r0, #20
 800fbfe:	f04f 0a00 	mov.w	sl, #0
 800fc02:	e7ae      	b.n	800fb62 <__gethex+0x202>
 800fc04:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fc08:	42a8      	cmp	r0, r5
 800fc0a:	dd72      	ble.n	800fcf2 <__gethex+0x392>
 800fc0c:	1b45      	subs	r5, r0, r5
 800fc0e:	42ae      	cmp	r6, r5
 800fc10:	dc36      	bgt.n	800fc80 <__gethex+0x320>
 800fc12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fc16:	2b02      	cmp	r3, #2
 800fc18:	d02a      	beq.n	800fc70 <__gethex+0x310>
 800fc1a:	2b03      	cmp	r3, #3
 800fc1c:	d02c      	beq.n	800fc78 <__gethex+0x318>
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	d11c      	bne.n	800fc5c <__gethex+0x2fc>
 800fc22:	42ae      	cmp	r6, r5
 800fc24:	d11a      	bne.n	800fc5c <__gethex+0x2fc>
 800fc26:	2e01      	cmp	r6, #1
 800fc28:	d112      	bne.n	800fc50 <__gethex+0x2f0>
 800fc2a:	9a04      	ldr	r2, [sp, #16]
 800fc2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fc30:	6013      	str	r3, [r2, #0]
 800fc32:	2301      	movs	r3, #1
 800fc34:	6123      	str	r3, [r4, #16]
 800fc36:	f8c9 3000 	str.w	r3, [r9]
 800fc3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fc3c:	2762      	movs	r7, #98	; 0x62
 800fc3e:	601c      	str	r4, [r3, #0]
 800fc40:	e723      	b.n	800fa8a <__gethex+0x12a>
 800fc42:	bf00      	nop
 800fc44:	08012d84 	.word	0x08012d84
 800fc48:	08012ca8 	.word	0x08012ca8
 800fc4c:	08012d1c 	.word	0x08012d1c
 800fc50:	1e71      	subs	r1, r6, #1
 800fc52:	4620      	mov	r0, r4
 800fc54:	f000 feb2 	bl	80109bc <__any_on>
 800fc58:	2800      	cmp	r0, #0
 800fc5a:	d1e6      	bne.n	800fc2a <__gethex+0x2ca>
 800fc5c:	ee18 0a10 	vmov	r0, s16
 800fc60:	4621      	mov	r1, r4
 800fc62:	f000 fa4b 	bl	80100fc <_Bfree>
 800fc66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fc68:	2300      	movs	r3, #0
 800fc6a:	6013      	str	r3, [r2, #0]
 800fc6c:	2750      	movs	r7, #80	; 0x50
 800fc6e:	e70c      	b.n	800fa8a <__gethex+0x12a>
 800fc70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d1f2      	bne.n	800fc5c <__gethex+0x2fc>
 800fc76:	e7d8      	b.n	800fc2a <__gethex+0x2ca>
 800fc78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d1d5      	bne.n	800fc2a <__gethex+0x2ca>
 800fc7e:	e7ed      	b.n	800fc5c <__gethex+0x2fc>
 800fc80:	1e6f      	subs	r7, r5, #1
 800fc82:	f1ba 0f00 	cmp.w	sl, #0
 800fc86:	d131      	bne.n	800fcec <__gethex+0x38c>
 800fc88:	b127      	cbz	r7, 800fc94 <__gethex+0x334>
 800fc8a:	4639      	mov	r1, r7
 800fc8c:	4620      	mov	r0, r4
 800fc8e:	f000 fe95 	bl	80109bc <__any_on>
 800fc92:	4682      	mov	sl, r0
 800fc94:	117b      	asrs	r3, r7, #5
 800fc96:	2101      	movs	r1, #1
 800fc98:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fc9c:	f007 071f 	and.w	r7, r7, #31
 800fca0:	fa01 f707 	lsl.w	r7, r1, r7
 800fca4:	421f      	tst	r7, r3
 800fca6:	4629      	mov	r1, r5
 800fca8:	4620      	mov	r0, r4
 800fcaa:	bf18      	it	ne
 800fcac:	f04a 0a02 	orrne.w	sl, sl, #2
 800fcb0:	1b76      	subs	r6, r6, r5
 800fcb2:	f7ff fdee 	bl	800f892 <rshift>
 800fcb6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fcba:	2702      	movs	r7, #2
 800fcbc:	f1ba 0f00 	cmp.w	sl, #0
 800fcc0:	d048      	beq.n	800fd54 <__gethex+0x3f4>
 800fcc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fcc6:	2b02      	cmp	r3, #2
 800fcc8:	d015      	beq.n	800fcf6 <__gethex+0x396>
 800fcca:	2b03      	cmp	r3, #3
 800fccc:	d017      	beq.n	800fcfe <__gethex+0x39e>
 800fcce:	2b01      	cmp	r3, #1
 800fcd0:	d109      	bne.n	800fce6 <__gethex+0x386>
 800fcd2:	f01a 0f02 	tst.w	sl, #2
 800fcd6:	d006      	beq.n	800fce6 <__gethex+0x386>
 800fcd8:	f8d9 0000 	ldr.w	r0, [r9]
 800fcdc:	ea4a 0a00 	orr.w	sl, sl, r0
 800fce0:	f01a 0f01 	tst.w	sl, #1
 800fce4:	d10e      	bne.n	800fd04 <__gethex+0x3a4>
 800fce6:	f047 0710 	orr.w	r7, r7, #16
 800fcea:	e033      	b.n	800fd54 <__gethex+0x3f4>
 800fcec:	f04f 0a01 	mov.w	sl, #1
 800fcf0:	e7d0      	b.n	800fc94 <__gethex+0x334>
 800fcf2:	2701      	movs	r7, #1
 800fcf4:	e7e2      	b.n	800fcbc <__gethex+0x35c>
 800fcf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fcf8:	f1c3 0301 	rsb	r3, r3, #1
 800fcfc:	9315      	str	r3, [sp, #84]	; 0x54
 800fcfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d0f0      	beq.n	800fce6 <__gethex+0x386>
 800fd04:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fd08:	f104 0314 	add.w	r3, r4, #20
 800fd0c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fd10:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fd14:	f04f 0c00 	mov.w	ip, #0
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd1e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fd22:	d01c      	beq.n	800fd5e <__gethex+0x3fe>
 800fd24:	3201      	adds	r2, #1
 800fd26:	6002      	str	r2, [r0, #0]
 800fd28:	2f02      	cmp	r7, #2
 800fd2a:	f104 0314 	add.w	r3, r4, #20
 800fd2e:	d13f      	bne.n	800fdb0 <__gethex+0x450>
 800fd30:	f8d8 2000 	ldr.w	r2, [r8]
 800fd34:	3a01      	subs	r2, #1
 800fd36:	42b2      	cmp	r2, r6
 800fd38:	d10a      	bne.n	800fd50 <__gethex+0x3f0>
 800fd3a:	1171      	asrs	r1, r6, #5
 800fd3c:	2201      	movs	r2, #1
 800fd3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fd42:	f006 061f 	and.w	r6, r6, #31
 800fd46:	fa02 f606 	lsl.w	r6, r2, r6
 800fd4a:	421e      	tst	r6, r3
 800fd4c:	bf18      	it	ne
 800fd4e:	4617      	movne	r7, r2
 800fd50:	f047 0720 	orr.w	r7, r7, #32
 800fd54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fd56:	601c      	str	r4, [r3, #0]
 800fd58:	9b04      	ldr	r3, [sp, #16]
 800fd5a:	601d      	str	r5, [r3, #0]
 800fd5c:	e695      	b.n	800fa8a <__gethex+0x12a>
 800fd5e:	4299      	cmp	r1, r3
 800fd60:	f843 cc04 	str.w	ip, [r3, #-4]
 800fd64:	d8d8      	bhi.n	800fd18 <__gethex+0x3b8>
 800fd66:	68a3      	ldr	r3, [r4, #8]
 800fd68:	459b      	cmp	fp, r3
 800fd6a:	db19      	blt.n	800fda0 <__gethex+0x440>
 800fd6c:	6861      	ldr	r1, [r4, #4]
 800fd6e:	ee18 0a10 	vmov	r0, s16
 800fd72:	3101      	adds	r1, #1
 800fd74:	f000 f982 	bl	801007c <_Balloc>
 800fd78:	4681      	mov	r9, r0
 800fd7a:	b918      	cbnz	r0, 800fd84 <__gethex+0x424>
 800fd7c:	4b1a      	ldr	r3, [pc, #104]	; (800fde8 <__gethex+0x488>)
 800fd7e:	4602      	mov	r2, r0
 800fd80:	2184      	movs	r1, #132	; 0x84
 800fd82:	e6a8      	b.n	800fad6 <__gethex+0x176>
 800fd84:	6922      	ldr	r2, [r4, #16]
 800fd86:	3202      	adds	r2, #2
 800fd88:	f104 010c 	add.w	r1, r4, #12
 800fd8c:	0092      	lsls	r2, r2, #2
 800fd8e:	300c      	adds	r0, #12
 800fd90:	f7fd f8aa 	bl	800cee8 <memcpy>
 800fd94:	4621      	mov	r1, r4
 800fd96:	ee18 0a10 	vmov	r0, s16
 800fd9a:	f000 f9af 	bl	80100fc <_Bfree>
 800fd9e:	464c      	mov	r4, r9
 800fda0:	6923      	ldr	r3, [r4, #16]
 800fda2:	1c5a      	adds	r2, r3, #1
 800fda4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fda8:	6122      	str	r2, [r4, #16]
 800fdaa:	2201      	movs	r2, #1
 800fdac:	615a      	str	r2, [r3, #20]
 800fdae:	e7bb      	b.n	800fd28 <__gethex+0x3c8>
 800fdb0:	6922      	ldr	r2, [r4, #16]
 800fdb2:	455a      	cmp	r2, fp
 800fdb4:	dd0b      	ble.n	800fdce <__gethex+0x46e>
 800fdb6:	2101      	movs	r1, #1
 800fdb8:	4620      	mov	r0, r4
 800fdba:	f7ff fd6a 	bl	800f892 <rshift>
 800fdbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fdc2:	3501      	adds	r5, #1
 800fdc4:	42ab      	cmp	r3, r5
 800fdc6:	f6ff aed0 	blt.w	800fb6a <__gethex+0x20a>
 800fdca:	2701      	movs	r7, #1
 800fdcc:	e7c0      	b.n	800fd50 <__gethex+0x3f0>
 800fdce:	f016 061f 	ands.w	r6, r6, #31
 800fdd2:	d0fa      	beq.n	800fdca <__gethex+0x46a>
 800fdd4:	4453      	add	r3, sl
 800fdd6:	f1c6 0620 	rsb	r6, r6, #32
 800fdda:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fdde:	f000 fa3f 	bl	8010260 <__hi0bits>
 800fde2:	42b0      	cmp	r0, r6
 800fde4:	dbe7      	blt.n	800fdb6 <__gethex+0x456>
 800fde6:	e7f0      	b.n	800fdca <__gethex+0x46a>
 800fde8:	08012ca8 	.word	0x08012ca8

0800fdec <L_shift>:
 800fdec:	f1c2 0208 	rsb	r2, r2, #8
 800fdf0:	0092      	lsls	r2, r2, #2
 800fdf2:	b570      	push	{r4, r5, r6, lr}
 800fdf4:	f1c2 0620 	rsb	r6, r2, #32
 800fdf8:	6843      	ldr	r3, [r0, #4]
 800fdfa:	6804      	ldr	r4, [r0, #0]
 800fdfc:	fa03 f506 	lsl.w	r5, r3, r6
 800fe00:	432c      	orrs	r4, r5
 800fe02:	40d3      	lsrs	r3, r2
 800fe04:	6004      	str	r4, [r0, #0]
 800fe06:	f840 3f04 	str.w	r3, [r0, #4]!
 800fe0a:	4288      	cmp	r0, r1
 800fe0c:	d3f4      	bcc.n	800fdf8 <L_shift+0xc>
 800fe0e:	bd70      	pop	{r4, r5, r6, pc}

0800fe10 <__match>:
 800fe10:	b530      	push	{r4, r5, lr}
 800fe12:	6803      	ldr	r3, [r0, #0]
 800fe14:	3301      	adds	r3, #1
 800fe16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe1a:	b914      	cbnz	r4, 800fe22 <__match+0x12>
 800fe1c:	6003      	str	r3, [r0, #0]
 800fe1e:	2001      	movs	r0, #1
 800fe20:	bd30      	pop	{r4, r5, pc}
 800fe22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fe2a:	2d19      	cmp	r5, #25
 800fe2c:	bf98      	it	ls
 800fe2e:	3220      	addls	r2, #32
 800fe30:	42a2      	cmp	r2, r4
 800fe32:	d0f0      	beq.n	800fe16 <__match+0x6>
 800fe34:	2000      	movs	r0, #0
 800fe36:	e7f3      	b.n	800fe20 <__match+0x10>

0800fe38 <__hexnan>:
 800fe38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe3c:	680b      	ldr	r3, [r1, #0]
 800fe3e:	115e      	asrs	r6, r3, #5
 800fe40:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fe44:	f013 031f 	ands.w	r3, r3, #31
 800fe48:	b087      	sub	sp, #28
 800fe4a:	bf18      	it	ne
 800fe4c:	3604      	addne	r6, #4
 800fe4e:	2500      	movs	r5, #0
 800fe50:	1f37      	subs	r7, r6, #4
 800fe52:	4690      	mov	r8, r2
 800fe54:	6802      	ldr	r2, [r0, #0]
 800fe56:	9301      	str	r3, [sp, #4]
 800fe58:	4682      	mov	sl, r0
 800fe5a:	f846 5c04 	str.w	r5, [r6, #-4]
 800fe5e:	46b9      	mov	r9, r7
 800fe60:	463c      	mov	r4, r7
 800fe62:	9502      	str	r5, [sp, #8]
 800fe64:	46ab      	mov	fp, r5
 800fe66:	7851      	ldrb	r1, [r2, #1]
 800fe68:	1c53      	adds	r3, r2, #1
 800fe6a:	9303      	str	r3, [sp, #12]
 800fe6c:	b341      	cbz	r1, 800fec0 <__hexnan+0x88>
 800fe6e:	4608      	mov	r0, r1
 800fe70:	9205      	str	r2, [sp, #20]
 800fe72:	9104      	str	r1, [sp, #16]
 800fe74:	f7ff fd5f 	bl	800f936 <__hexdig_fun>
 800fe78:	2800      	cmp	r0, #0
 800fe7a:	d14f      	bne.n	800ff1c <__hexnan+0xe4>
 800fe7c:	9904      	ldr	r1, [sp, #16]
 800fe7e:	9a05      	ldr	r2, [sp, #20]
 800fe80:	2920      	cmp	r1, #32
 800fe82:	d818      	bhi.n	800feb6 <__hexnan+0x7e>
 800fe84:	9b02      	ldr	r3, [sp, #8]
 800fe86:	459b      	cmp	fp, r3
 800fe88:	dd13      	ble.n	800feb2 <__hexnan+0x7a>
 800fe8a:	454c      	cmp	r4, r9
 800fe8c:	d206      	bcs.n	800fe9c <__hexnan+0x64>
 800fe8e:	2d07      	cmp	r5, #7
 800fe90:	dc04      	bgt.n	800fe9c <__hexnan+0x64>
 800fe92:	462a      	mov	r2, r5
 800fe94:	4649      	mov	r1, r9
 800fe96:	4620      	mov	r0, r4
 800fe98:	f7ff ffa8 	bl	800fdec <L_shift>
 800fe9c:	4544      	cmp	r4, r8
 800fe9e:	d950      	bls.n	800ff42 <__hexnan+0x10a>
 800fea0:	2300      	movs	r3, #0
 800fea2:	f1a4 0904 	sub.w	r9, r4, #4
 800fea6:	f844 3c04 	str.w	r3, [r4, #-4]
 800feaa:	f8cd b008 	str.w	fp, [sp, #8]
 800feae:	464c      	mov	r4, r9
 800feb0:	461d      	mov	r5, r3
 800feb2:	9a03      	ldr	r2, [sp, #12]
 800feb4:	e7d7      	b.n	800fe66 <__hexnan+0x2e>
 800feb6:	2929      	cmp	r1, #41	; 0x29
 800feb8:	d156      	bne.n	800ff68 <__hexnan+0x130>
 800feba:	3202      	adds	r2, #2
 800febc:	f8ca 2000 	str.w	r2, [sl]
 800fec0:	f1bb 0f00 	cmp.w	fp, #0
 800fec4:	d050      	beq.n	800ff68 <__hexnan+0x130>
 800fec6:	454c      	cmp	r4, r9
 800fec8:	d206      	bcs.n	800fed8 <__hexnan+0xa0>
 800feca:	2d07      	cmp	r5, #7
 800fecc:	dc04      	bgt.n	800fed8 <__hexnan+0xa0>
 800fece:	462a      	mov	r2, r5
 800fed0:	4649      	mov	r1, r9
 800fed2:	4620      	mov	r0, r4
 800fed4:	f7ff ff8a 	bl	800fdec <L_shift>
 800fed8:	4544      	cmp	r4, r8
 800feda:	d934      	bls.n	800ff46 <__hexnan+0x10e>
 800fedc:	f1a8 0204 	sub.w	r2, r8, #4
 800fee0:	4623      	mov	r3, r4
 800fee2:	f853 1b04 	ldr.w	r1, [r3], #4
 800fee6:	f842 1f04 	str.w	r1, [r2, #4]!
 800feea:	429f      	cmp	r7, r3
 800feec:	d2f9      	bcs.n	800fee2 <__hexnan+0xaa>
 800feee:	1b3b      	subs	r3, r7, r4
 800fef0:	f023 0303 	bic.w	r3, r3, #3
 800fef4:	3304      	adds	r3, #4
 800fef6:	3401      	adds	r4, #1
 800fef8:	3e03      	subs	r6, #3
 800fefa:	42b4      	cmp	r4, r6
 800fefc:	bf88      	it	hi
 800fefe:	2304      	movhi	r3, #4
 800ff00:	4443      	add	r3, r8
 800ff02:	2200      	movs	r2, #0
 800ff04:	f843 2b04 	str.w	r2, [r3], #4
 800ff08:	429f      	cmp	r7, r3
 800ff0a:	d2fb      	bcs.n	800ff04 <__hexnan+0xcc>
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	b91b      	cbnz	r3, 800ff18 <__hexnan+0xe0>
 800ff10:	4547      	cmp	r7, r8
 800ff12:	d127      	bne.n	800ff64 <__hexnan+0x12c>
 800ff14:	2301      	movs	r3, #1
 800ff16:	603b      	str	r3, [r7, #0]
 800ff18:	2005      	movs	r0, #5
 800ff1a:	e026      	b.n	800ff6a <__hexnan+0x132>
 800ff1c:	3501      	adds	r5, #1
 800ff1e:	2d08      	cmp	r5, #8
 800ff20:	f10b 0b01 	add.w	fp, fp, #1
 800ff24:	dd06      	ble.n	800ff34 <__hexnan+0xfc>
 800ff26:	4544      	cmp	r4, r8
 800ff28:	d9c3      	bls.n	800feb2 <__hexnan+0x7a>
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ff30:	2501      	movs	r5, #1
 800ff32:	3c04      	subs	r4, #4
 800ff34:	6822      	ldr	r2, [r4, #0]
 800ff36:	f000 000f 	and.w	r0, r0, #15
 800ff3a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ff3e:	6022      	str	r2, [r4, #0]
 800ff40:	e7b7      	b.n	800feb2 <__hexnan+0x7a>
 800ff42:	2508      	movs	r5, #8
 800ff44:	e7b5      	b.n	800feb2 <__hexnan+0x7a>
 800ff46:	9b01      	ldr	r3, [sp, #4]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d0df      	beq.n	800ff0c <__hexnan+0xd4>
 800ff4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ff50:	f1c3 0320 	rsb	r3, r3, #32
 800ff54:	fa22 f303 	lsr.w	r3, r2, r3
 800ff58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ff5c:	401a      	ands	r2, r3
 800ff5e:	f846 2c04 	str.w	r2, [r6, #-4]
 800ff62:	e7d3      	b.n	800ff0c <__hexnan+0xd4>
 800ff64:	3f04      	subs	r7, #4
 800ff66:	e7d1      	b.n	800ff0c <__hexnan+0xd4>
 800ff68:	2004      	movs	r0, #4
 800ff6a:	b007      	add	sp, #28
 800ff6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ff70 <_localeconv_r>:
 800ff70:	4800      	ldr	r0, [pc, #0]	; (800ff74 <_localeconv_r+0x4>)
 800ff72:	4770      	bx	lr
 800ff74:	20000184 	.word	0x20000184

0800ff78 <__retarget_lock_init_recursive>:
 800ff78:	4770      	bx	lr

0800ff7a <__retarget_lock_acquire_recursive>:
 800ff7a:	4770      	bx	lr

0800ff7c <__retarget_lock_release_recursive>:
 800ff7c:	4770      	bx	lr

0800ff7e <__swhatbuf_r>:
 800ff7e:	b570      	push	{r4, r5, r6, lr}
 800ff80:	460e      	mov	r6, r1
 800ff82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff86:	2900      	cmp	r1, #0
 800ff88:	b096      	sub	sp, #88	; 0x58
 800ff8a:	4614      	mov	r4, r2
 800ff8c:	461d      	mov	r5, r3
 800ff8e:	da08      	bge.n	800ffa2 <__swhatbuf_r+0x24>
 800ff90:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ff94:	2200      	movs	r2, #0
 800ff96:	602a      	str	r2, [r5, #0]
 800ff98:	061a      	lsls	r2, r3, #24
 800ff9a:	d410      	bmi.n	800ffbe <__swhatbuf_r+0x40>
 800ff9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ffa0:	e00e      	b.n	800ffc0 <__swhatbuf_r+0x42>
 800ffa2:	466a      	mov	r2, sp
 800ffa4:	f001 f850 	bl	8011048 <_fstat_r>
 800ffa8:	2800      	cmp	r0, #0
 800ffaa:	dbf1      	blt.n	800ff90 <__swhatbuf_r+0x12>
 800ffac:	9a01      	ldr	r2, [sp, #4]
 800ffae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ffb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ffb6:	425a      	negs	r2, r3
 800ffb8:	415a      	adcs	r2, r3
 800ffba:	602a      	str	r2, [r5, #0]
 800ffbc:	e7ee      	b.n	800ff9c <__swhatbuf_r+0x1e>
 800ffbe:	2340      	movs	r3, #64	; 0x40
 800ffc0:	2000      	movs	r0, #0
 800ffc2:	6023      	str	r3, [r4, #0]
 800ffc4:	b016      	add	sp, #88	; 0x58
 800ffc6:	bd70      	pop	{r4, r5, r6, pc}

0800ffc8 <__smakebuf_r>:
 800ffc8:	898b      	ldrh	r3, [r1, #12]
 800ffca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ffcc:	079d      	lsls	r5, r3, #30
 800ffce:	4606      	mov	r6, r0
 800ffd0:	460c      	mov	r4, r1
 800ffd2:	d507      	bpl.n	800ffe4 <__smakebuf_r+0x1c>
 800ffd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ffd8:	6023      	str	r3, [r4, #0]
 800ffda:	6123      	str	r3, [r4, #16]
 800ffdc:	2301      	movs	r3, #1
 800ffde:	6163      	str	r3, [r4, #20]
 800ffe0:	b002      	add	sp, #8
 800ffe2:	bd70      	pop	{r4, r5, r6, pc}
 800ffe4:	ab01      	add	r3, sp, #4
 800ffe6:	466a      	mov	r2, sp
 800ffe8:	f7ff ffc9 	bl	800ff7e <__swhatbuf_r>
 800ffec:	9900      	ldr	r1, [sp, #0]
 800ffee:	4605      	mov	r5, r0
 800fff0:	4630      	mov	r0, r6
 800fff2:	f000 fd87 	bl	8010b04 <_malloc_r>
 800fff6:	b948      	cbnz	r0, 801000c <__smakebuf_r+0x44>
 800fff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fffc:	059a      	lsls	r2, r3, #22
 800fffe:	d4ef      	bmi.n	800ffe0 <__smakebuf_r+0x18>
 8010000:	f023 0303 	bic.w	r3, r3, #3
 8010004:	f043 0302 	orr.w	r3, r3, #2
 8010008:	81a3      	strh	r3, [r4, #12]
 801000a:	e7e3      	b.n	800ffd4 <__smakebuf_r+0xc>
 801000c:	4b0d      	ldr	r3, [pc, #52]	; (8010044 <__smakebuf_r+0x7c>)
 801000e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010010:	89a3      	ldrh	r3, [r4, #12]
 8010012:	6020      	str	r0, [r4, #0]
 8010014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010018:	81a3      	strh	r3, [r4, #12]
 801001a:	9b00      	ldr	r3, [sp, #0]
 801001c:	6163      	str	r3, [r4, #20]
 801001e:	9b01      	ldr	r3, [sp, #4]
 8010020:	6120      	str	r0, [r4, #16]
 8010022:	b15b      	cbz	r3, 801003c <__smakebuf_r+0x74>
 8010024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010028:	4630      	mov	r0, r6
 801002a:	f001 f81f 	bl	801106c <_isatty_r>
 801002e:	b128      	cbz	r0, 801003c <__smakebuf_r+0x74>
 8010030:	89a3      	ldrh	r3, [r4, #12]
 8010032:	f023 0303 	bic.w	r3, r3, #3
 8010036:	f043 0301 	orr.w	r3, r3, #1
 801003a:	81a3      	strh	r3, [r4, #12]
 801003c:	89a0      	ldrh	r0, [r4, #12]
 801003e:	4305      	orrs	r5, r0
 8010040:	81a5      	strh	r5, [r4, #12]
 8010042:	e7cd      	b.n	800ffe0 <__smakebuf_r+0x18>
 8010044:	0800f6f1 	.word	0x0800f6f1

08010048 <malloc>:
 8010048:	4b02      	ldr	r3, [pc, #8]	; (8010054 <malloc+0xc>)
 801004a:	4601      	mov	r1, r0
 801004c:	6818      	ldr	r0, [r3, #0]
 801004e:	f000 bd59 	b.w	8010b04 <_malloc_r>
 8010052:	bf00      	nop
 8010054:	2000002c 	.word	0x2000002c

08010058 <__ascii_mbtowc>:
 8010058:	b082      	sub	sp, #8
 801005a:	b901      	cbnz	r1, 801005e <__ascii_mbtowc+0x6>
 801005c:	a901      	add	r1, sp, #4
 801005e:	b142      	cbz	r2, 8010072 <__ascii_mbtowc+0x1a>
 8010060:	b14b      	cbz	r3, 8010076 <__ascii_mbtowc+0x1e>
 8010062:	7813      	ldrb	r3, [r2, #0]
 8010064:	600b      	str	r3, [r1, #0]
 8010066:	7812      	ldrb	r2, [r2, #0]
 8010068:	1e10      	subs	r0, r2, #0
 801006a:	bf18      	it	ne
 801006c:	2001      	movne	r0, #1
 801006e:	b002      	add	sp, #8
 8010070:	4770      	bx	lr
 8010072:	4610      	mov	r0, r2
 8010074:	e7fb      	b.n	801006e <__ascii_mbtowc+0x16>
 8010076:	f06f 0001 	mvn.w	r0, #1
 801007a:	e7f8      	b.n	801006e <__ascii_mbtowc+0x16>

0801007c <_Balloc>:
 801007c:	b570      	push	{r4, r5, r6, lr}
 801007e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010080:	4604      	mov	r4, r0
 8010082:	460d      	mov	r5, r1
 8010084:	b976      	cbnz	r6, 80100a4 <_Balloc+0x28>
 8010086:	2010      	movs	r0, #16
 8010088:	f7ff ffde 	bl	8010048 <malloc>
 801008c:	4602      	mov	r2, r0
 801008e:	6260      	str	r0, [r4, #36]	; 0x24
 8010090:	b920      	cbnz	r0, 801009c <_Balloc+0x20>
 8010092:	4b18      	ldr	r3, [pc, #96]	; (80100f4 <_Balloc+0x78>)
 8010094:	4818      	ldr	r0, [pc, #96]	; (80100f8 <_Balloc+0x7c>)
 8010096:	2166      	movs	r1, #102	; 0x66
 8010098:	f000 ff96 	bl	8010fc8 <__assert_func>
 801009c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80100a0:	6006      	str	r6, [r0, #0]
 80100a2:	60c6      	str	r6, [r0, #12]
 80100a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80100a6:	68f3      	ldr	r3, [r6, #12]
 80100a8:	b183      	cbz	r3, 80100cc <_Balloc+0x50>
 80100aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80100ac:	68db      	ldr	r3, [r3, #12]
 80100ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80100b2:	b9b8      	cbnz	r0, 80100e4 <_Balloc+0x68>
 80100b4:	2101      	movs	r1, #1
 80100b6:	fa01 f605 	lsl.w	r6, r1, r5
 80100ba:	1d72      	adds	r2, r6, #5
 80100bc:	0092      	lsls	r2, r2, #2
 80100be:	4620      	mov	r0, r4
 80100c0:	f000 fc9d 	bl	80109fe <_calloc_r>
 80100c4:	b160      	cbz	r0, 80100e0 <_Balloc+0x64>
 80100c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80100ca:	e00e      	b.n	80100ea <_Balloc+0x6e>
 80100cc:	2221      	movs	r2, #33	; 0x21
 80100ce:	2104      	movs	r1, #4
 80100d0:	4620      	mov	r0, r4
 80100d2:	f000 fc94 	bl	80109fe <_calloc_r>
 80100d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80100d8:	60f0      	str	r0, [r6, #12]
 80100da:	68db      	ldr	r3, [r3, #12]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d1e4      	bne.n	80100aa <_Balloc+0x2e>
 80100e0:	2000      	movs	r0, #0
 80100e2:	bd70      	pop	{r4, r5, r6, pc}
 80100e4:	6802      	ldr	r2, [r0, #0]
 80100e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80100ea:	2300      	movs	r3, #0
 80100ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80100f0:	e7f7      	b.n	80100e2 <_Balloc+0x66>
 80100f2:	bf00      	nop
 80100f4:	08012c36 	.word	0x08012c36
 80100f8:	08012d98 	.word	0x08012d98

080100fc <_Bfree>:
 80100fc:	b570      	push	{r4, r5, r6, lr}
 80100fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010100:	4605      	mov	r5, r0
 8010102:	460c      	mov	r4, r1
 8010104:	b976      	cbnz	r6, 8010124 <_Bfree+0x28>
 8010106:	2010      	movs	r0, #16
 8010108:	f7ff ff9e 	bl	8010048 <malloc>
 801010c:	4602      	mov	r2, r0
 801010e:	6268      	str	r0, [r5, #36]	; 0x24
 8010110:	b920      	cbnz	r0, 801011c <_Bfree+0x20>
 8010112:	4b09      	ldr	r3, [pc, #36]	; (8010138 <_Bfree+0x3c>)
 8010114:	4809      	ldr	r0, [pc, #36]	; (801013c <_Bfree+0x40>)
 8010116:	218a      	movs	r1, #138	; 0x8a
 8010118:	f000 ff56 	bl	8010fc8 <__assert_func>
 801011c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010120:	6006      	str	r6, [r0, #0]
 8010122:	60c6      	str	r6, [r0, #12]
 8010124:	b13c      	cbz	r4, 8010136 <_Bfree+0x3a>
 8010126:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010128:	6862      	ldr	r2, [r4, #4]
 801012a:	68db      	ldr	r3, [r3, #12]
 801012c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010130:	6021      	str	r1, [r4, #0]
 8010132:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010136:	bd70      	pop	{r4, r5, r6, pc}
 8010138:	08012c36 	.word	0x08012c36
 801013c:	08012d98 	.word	0x08012d98

08010140 <__multadd>:
 8010140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010144:	690d      	ldr	r5, [r1, #16]
 8010146:	4607      	mov	r7, r0
 8010148:	460c      	mov	r4, r1
 801014a:	461e      	mov	r6, r3
 801014c:	f101 0c14 	add.w	ip, r1, #20
 8010150:	2000      	movs	r0, #0
 8010152:	f8dc 3000 	ldr.w	r3, [ip]
 8010156:	b299      	uxth	r1, r3
 8010158:	fb02 6101 	mla	r1, r2, r1, r6
 801015c:	0c1e      	lsrs	r6, r3, #16
 801015e:	0c0b      	lsrs	r3, r1, #16
 8010160:	fb02 3306 	mla	r3, r2, r6, r3
 8010164:	b289      	uxth	r1, r1
 8010166:	3001      	adds	r0, #1
 8010168:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801016c:	4285      	cmp	r5, r0
 801016e:	f84c 1b04 	str.w	r1, [ip], #4
 8010172:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010176:	dcec      	bgt.n	8010152 <__multadd+0x12>
 8010178:	b30e      	cbz	r6, 80101be <__multadd+0x7e>
 801017a:	68a3      	ldr	r3, [r4, #8]
 801017c:	42ab      	cmp	r3, r5
 801017e:	dc19      	bgt.n	80101b4 <__multadd+0x74>
 8010180:	6861      	ldr	r1, [r4, #4]
 8010182:	4638      	mov	r0, r7
 8010184:	3101      	adds	r1, #1
 8010186:	f7ff ff79 	bl	801007c <_Balloc>
 801018a:	4680      	mov	r8, r0
 801018c:	b928      	cbnz	r0, 801019a <__multadd+0x5a>
 801018e:	4602      	mov	r2, r0
 8010190:	4b0c      	ldr	r3, [pc, #48]	; (80101c4 <__multadd+0x84>)
 8010192:	480d      	ldr	r0, [pc, #52]	; (80101c8 <__multadd+0x88>)
 8010194:	21b5      	movs	r1, #181	; 0xb5
 8010196:	f000 ff17 	bl	8010fc8 <__assert_func>
 801019a:	6922      	ldr	r2, [r4, #16]
 801019c:	3202      	adds	r2, #2
 801019e:	f104 010c 	add.w	r1, r4, #12
 80101a2:	0092      	lsls	r2, r2, #2
 80101a4:	300c      	adds	r0, #12
 80101a6:	f7fc fe9f 	bl	800cee8 <memcpy>
 80101aa:	4621      	mov	r1, r4
 80101ac:	4638      	mov	r0, r7
 80101ae:	f7ff ffa5 	bl	80100fc <_Bfree>
 80101b2:	4644      	mov	r4, r8
 80101b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80101b8:	3501      	adds	r5, #1
 80101ba:	615e      	str	r6, [r3, #20]
 80101bc:	6125      	str	r5, [r4, #16]
 80101be:	4620      	mov	r0, r4
 80101c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101c4:	08012ca8 	.word	0x08012ca8
 80101c8:	08012d98 	.word	0x08012d98

080101cc <__s2b>:
 80101cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101d0:	460c      	mov	r4, r1
 80101d2:	4615      	mov	r5, r2
 80101d4:	461f      	mov	r7, r3
 80101d6:	2209      	movs	r2, #9
 80101d8:	3308      	adds	r3, #8
 80101da:	4606      	mov	r6, r0
 80101dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80101e0:	2100      	movs	r1, #0
 80101e2:	2201      	movs	r2, #1
 80101e4:	429a      	cmp	r2, r3
 80101e6:	db09      	blt.n	80101fc <__s2b+0x30>
 80101e8:	4630      	mov	r0, r6
 80101ea:	f7ff ff47 	bl	801007c <_Balloc>
 80101ee:	b940      	cbnz	r0, 8010202 <__s2b+0x36>
 80101f0:	4602      	mov	r2, r0
 80101f2:	4b19      	ldr	r3, [pc, #100]	; (8010258 <__s2b+0x8c>)
 80101f4:	4819      	ldr	r0, [pc, #100]	; (801025c <__s2b+0x90>)
 80101f6:	21ce      	movs	r1, #206	; 0xce
 80101f8:	f000 fee6 	bl	8010fc8 <__assert_func>
 80101fc:	0052      	lsls	r2, r2, #1
 80101fe:	3101      	adds	r1, #1
 8010200:	e7f0      	b.n	80101e4 <__s2b+0x18>
 8010202:	9b08      	ldr	r3, [sp, #32]
 8010204:	6143      	str	r3, [r0, #20]
 8010206:	2d09      	cmp	r5, #9
 8010208:	f04f 0301 	mov.w	r3, #1
 801020c:	6103      	str	r3, [r0, #16]
 801020e:	dd16      	ble.n	801023e <__s2b+0x72>
 8010210:	f104 0909 	add.w	r9, r4, #9
 8010214:	46c8      	mov	r8, r9
 8010216:	442c      	add	r4, r5
 8010218:	f818 3b01 	ldrb.w	r3, [r8], #1
 801021c:	4601      	mov	r1, r0
 801021e:	3b30      	subs	r3, #48	; 0x30
 8010220:	220a      	movs	r2, #10
 8010222:	4630      	mov	r0, r6
 8010224:	f7ff ff8c 	bl	8010140 <__multadd>
 8010228:	45a0      	cmp	r8, r4
 801022a:	d1f5      	bne.n	8010218 <__s2b+0x4c>
 801022c:	f1a5 0408 	sub.w	r4, r5, #8
 8010230:	444c      	add	r4, r9
 8010232:	1b2d      	subs	r5, r5, r4
 8010234:	1963      	adds	r3, r4, r5
 8010236:	42bb      	cmp	r3, r7
 8010238:	db04      	blt.n	8010244 <__s2b+0x78>
 801023a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801023e:	340a      	adds	r4, #10
 8010240:	2509      	movs	r5, #9
 8010242:	e7f6      	b.n	8010232 <__s2b+0x66>
 8010244:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010248:	4601      	mov	r1, r0
 801024a:	3b30      	subs	r3, #48	; 0x30
 801024c:	220a      	movs	r2, #10
 801024e:	4630      	mov	r0, r6
 8010250:	f7ff ff76 	bl	8010140 <__multadd>
 8010254:	e7ee      	b.n	8010234 <__s2b+0x68>
 8010256:	bf00      	nop
 8010258:	08012ca8 	.word	0x08012ca8
 801025c:	08012d98 	.word	0x08012d98

08010260 <__hi0bits>:
 8010260:	0c03      	lsrs	r3, r0, #16
 8010262:	041b      	lsls	r3, r3, #16
 8010264:	b9d3      	cbnz	r3, 801029c <__hi0bits+0x3c>
 8010266:	0400      	lsls	r0, r0, #16
 8010268:	2310      	movs	r3, #16
 801026a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801026e:	bf04      	itt	eq
 8010270:	0200      	lsleq	r0, r0, #8
 8010272:	3308      	addeq	r3, #8
 8010274:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010278:	bf04      	itt	eq
 801027a:	0100      	lsleq	r0, r0, #4
 801027c:	3304      	addeq	r3, #4
 801027e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010282:	bf04      	itt	eq
 8010284:	0080      	lsleq	r0, r0, #2
 8010286:	3302      	addeq	r3, #2
 8010288:	2800      	cmp	r0, #0
 801028a:	db05      	blt.n	8010298 <__hi0bits+0x38>
 801028c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010290:	f103 0301 	add.w	r3, r3, #1
 8010294:	bf08      	it	eq
 8010296:	2320      	moveq	r3, #32
 8010298:	4618      	mov	r0, r3
 801029a:	4770      	bx	lr
 801029c:	2300      	movs	r3, #0
 801029e:	e7e4      	b.n	801026a <__hi0bits+0xa>

080102a0 <__lo0bits>:
 80102a0:	6803      	ldr	r3, [r0, #0]
 80102a2:	f013 0207 	ands.w	r2, r3, #7
 80102a6:	4601      	mov	r1, r0
 80102a8:	d00b      	beq.n	80102c2 <__lo0bits+0x22>
 80102aa:	07da      	lsls	r2, r3, #31
 80102ac:	d423      	bmi.n	80102f6 <__lo0bits+0x56>
 80102ae:	0798      	lsls	r0, r3, #30
 80102b0:	bf49      	itett	mi
 80102b2:	085b      	lsrmi	r3, r3, #1
 80102b4:	089b      	lsrpl	r3, r3, #2
 80102b6:	2001      	movmi	r0, #1
 80102b8:	600b      	strmi	r3, [r1, #0]
 80102ba:	bf5c      	itt	pl
 80102bc:	600b      	strpl	r3, [r1, #0]
 80102be:	2002      	movpl	r0, #2
 80102c0:	4770      	bx	lr
 80102c2:	b298      	uxth	r0, r3
 80102c4:	b9a8      	cbnz	r0, 80102f2 <__lo0bits+0x52>
 80102c6:	0c1b      	lsrs	r3, r3, #16
 80102c8:	2010      	movs	r0, #16
 80102ca:	b2da      	uxtb	r2, r3
 80102cc:	b90a      	cbnz	r2, 80102d2 <__lo0bits+0x32>
 80102ce:	3008      	adds	r0, #8
 80102d0:	0a1b      	lsrs	r3, r3, #8
 80102d2:	071a      	lsls	r2, r3, #28
 80102d4:	bf04      	itt	eq
 80102d6:	091b      	lsreq	r3, r3, #4
 80102d8:	3004      	addeq	r0, #4
 80102da:	079a      	lsls	r2, r3, #30
 80102dc:	bf04      	itt	eq
 80102de:	089b      	lsreq	r3, r3, #2
 80102e0:	3002      	addeq	r0, #2
 80102e2:	07da      	lsls	r2, r3, #31
 80102e4:	d403      	bmi.n	80102ee <__lo0bits+0x4e>
 80102e6:	085b      	lsrs	r3, r3, #1
 80102e8:	f100 0001 	add.w	r0, r0, #1
 80102ec:	d005      	beq.n	80102fa <__lo0bits+0x5a>
 80102ee:	600b      	str	r3, [r1, #0]
 80102f0:	4770      	bx	lr
 80102f2:	4610      	mov	r0, r2
 80102f4:	e7e9      	b.n	80102ca <__lo0bits+0x2a>
 80102f6:	2000      	movs	r0, #0
 80102f8:	4770      	bx	lr
 80102fa:	2020      	movs	r0, #32
 80102fc:	4770      	bx	lr
	...

08010300 <__i2b>:
 8010300:	b510      	push	{r4, lr}
 8010302:	460c      	mov	r4, r1
 8010304:	2101      	movs	r1, #1
 8010306:	f7ff feb9 	bl	801007c <_Balloc>
 801030a:	4602      	mov	r2, r0
 801030c:	b928      	cbnz	r0, 801031a <__i2b+0x1a>
 801030e:	4b05      	ldr	r3, [pc, #20]	; (8010324 <__i2b+0x24>)
 8010310:	4805      	ldr	r0, [pc, #20]	; (8010328 <__i2b+0x28>)
 8010312:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010316:	f000 fe57 	bl	8010fc8 <__assert_func>
 801031a:	2301      	movs	r3, #1
 801031c:	6144      	str	r4, [r0, #20]
 801031e:	6103      	str	r3, [r0, #16]
 8010320:	bd10      	pop	{r4, pc}
 8010322:	bf00      	nop
 8010324:	08012ca8 	.word	0x08012ca8
 8010328:	08012d98 	.word	0x08012d98

0801032c <__multiply>:
 801032c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010330:	4691      	mov	r9, r2
 8010332:	690a      	ldr	r2, [r1, #16]
 8010334:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010338:	429a      	cmp	r2, r3
 801033a:	bfb8      	it	lt
 801033c:	460b      	movlt	r3, r1
 801033e:	460c      	mov	r4, r1
 8010340:	bfbc      	itt	lt
 8010342:	464c      	movlt	r4, r9
 8010344:	4699      	movlt	r9, r3
 8010346:	6927      	ldr	r7, [r4, #16]
 8010348:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801034c:	68a3      	ldr	r3, [r4, #8]
 801034e:	6861      	ldr	r1, [r4, #4]
 8010350:	eb07 060a 	add.w	r6, r7, sl
 8010354:	42b3      	cmp	r3, r6
 8010356:	b085      	sub	sp, #20
 8010358:	bfb8      	it	lt
 801035a:	3101      	addlt	r1, #1
 801035c:	f7ff fe8e 	bl	801007c <_Balloc>
 8010360:	b930      	cbnz	r0, 8010370 <__multiply+0x44>
 8010362:	4602      	mov	r2, r0
 8010364:	4b44      	ldr	r3, [pc, #272]	; (8010478 <__multiply+0x14c>)
 8010366:	4845      	ldr	r0, [pc, #276]	; (801047c <__multiply+0x150>)
 8010368:	f240 115d 	movw	r1, #349	; 0x15d
 801036c:	f000 fe2c 	bl	8010fc8 <__assert_func>
 8010370:	f100 0514 	add.w	r5, r0, #20
 8010374:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010378:	462b      	mov	r3, r5
 801037a:	2200      	movs	r2, #0
 801037c:	4543      	cmp	r3, r8
 801037e:	d321      	bcc.n	80103c4 <__multiply+0x98>
 8010380:	f104 0314 	add.w	r3, r4, #20
 8010384:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010388:	f109 0314 	add.w	r3, r9, #20
 801038c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010390:	9202      	str	r2, [sp, #8]
 8010392:	1b3a      	subs	r2, r7, r4
 8010394:	3a15      	subs	r2, #21
 8010396:	f022 0203 	bic.w	r2, r2, #3
 801039a:	3204      	adds	r2, #4
 801039c:	f104 0115 	add.w	r1, r4, #21
 80103a0:	428f      	cmp	r7, r1
 80103a2:	bf38      	it	cc
 80103a4:	2204      	movcc	r2, #4
 80103a6:	9201      	str	r2, [sp, #4]
 80103a8:	9a02      	ldr	r2, [sp, #8]
 80103aa:	9303      	str	r3, [sp, #12]
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d80c      	bhi.n	80103ca <__multiply+0x9e>
 80103b0:	2e00      	cmp	r6, #0
 80103b2:	dd03      	ble.n	80103bc <__multiply+0x90>
 80103b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d05a      	beq.n	8010472 <__multiply+0x146>
 80103bc:	6106      	str	r6, [r0, #16]
 80103be:	b005      	add	sp, #20
 80103c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103c4:	f843 2b04 	str.w	r2, [r3], #4
 80103c8:	e7d8      	b.n	801037c <__multiply+0x50>
 80103ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80103ce:	f1ba 0f00 	cmp.w	sl, #0
 80103d2:	d024      	beq.n	801041e <__multiply+0xf2>
 80103d4:	f104 0e14 	add.w	lr, r4, #20
 80103d8:	46a9      	mov	r9, r5
 80103da:	f04f 0c00 	mov.w	ip, #0
 80103de:	f85e 2b04 	ldr.w	r2, [lr], #4
 80103e2:	f8d9 1000 	ldr.w	r1, [r9]
 80103e6:	fa1f fb82 	uxth.w	fp, r2
 80103ea:	b289      	uxth	r1, r1
 80103ec:	fb0a 110b 	mla	r1, sl, fp, r1
 80103f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80103f4:	f8d9 2000 	ldr.w	r2, [r9]
 80103f8:	4461      	add	r1, ip
 80103fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80103fe:	fb0a c20b 	mla	r2, sl, fp, ip
 8010402:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010406:	b289      	uxth	r1, r1
 8010408:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801040c:	4577      	cmp	r7, lr
 801040e:	f849 1b04 	str.w	r1, [r9], #4
 8010412:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010416:	d8e2      	bhi.n	80103de <__multiply+0xb2>
 8010418:	9a01      	ldr	r2, [sp, #4]
 801041a:	f845 c002 	str.w	ip, [r5, r2]
 801041e:	9a03      	ldr	r2, [sp, #12]
 8010420:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010424:	3304      	adds	r3, #4
 8010426:	f1b9 0f00 	cmp.w	r9, #0
 801042a:	d020      	beq.n	801046e <__multiply+0x142>
 801042c:	6829      	ldr	r1, [r5, #0]
 801042e:	f104 0c14 	add.w	ip, r4, #20
 8010432:	46ae      	mov	lr, r5
 8010434:	f04f 0a00 	mov.w	sl, #0
 8010438:	f8bc b000 	ldrh.w	fp, [ip]
 801043c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010440:	fb09 220b 	mla	r2, r9, fp, r2
 8010444:	4492      	add	sl, r2
 8010446:	b289      	uxth	r1, r1
 8010448:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801044c:	f84e 1b04 	str.w	r1, [lr], #4
 8010450:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010454:	f8be 1000 	ldrh.w	r1, [lr]
 8010458:	0c12      	lsrs	r2, r2, #16
 801045a:	fb09 1102 	mla	r1, r9, r2, r1
 801045e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010462:	4567      	cmp	r7, ip
 8010464:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010468:	d8e6      	bhi.n	8010438 <__multiply+0x10c>
 801046a:	9a01      	ldr	r2, [sp, #4]
 801046c:	50a9      	str	r1, [r5, r2]
 801046e:	3504      	adds	r5, #4
 8010470:	e79a      	b.n	80103a8 <__multiply+0x7c>
 8010472:	3e01      	subs	r6, #1
 8010474:	e79c      	b.n	80103b0 <__multiply+0x84>
 8010476:	bf00      	nop
 8010478:	08012ca8 	.word	0x08012ca8
 801047c:	08012d98 	.word	0x08012d98

08010480 <__pow5mult>:
 8010480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010484:	4615      	mov	r5, r2
 8010486:	f012 0203 	ands.w	r2, r2, #3
 801048a:	4606      	mov	r6, r0
 801048c:	460f      	mov	r7, r1
 801048e:	d007      	beq.n	80104a0 <__pow5mult+0x20>
 8010490:	4c25      	ldr	r4, [pc, #148]	; (8010528 <__pow5mult+0xa8>)
 8010492:	3a01      	subs	r2, #1
 8010494:	2300      	movs	r3, #0
 8010496:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801049a:	f7ff fe51 	bl	8010140 <__multadd>
 801049e:	4607      	mov	r7, r0
 80104a0:	10ad      	asrs	r5, r5, #2
 80104a2:	d03d      	beq.n	8010520 <__pow5mult+0xa0>
 80104a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80104a6:	b97c      	cbnz	r4, 80104c8 <__pow5mult+0x48>
 80104a8:	2010      	movs	r0, #16
 80104aa:	f7ff fdcd 	bl	8010048 <malloc>
 80104ae:	4602      	mov	r2, r0
 80104b0:	6270      	str	r0, [r6, #36]	; 0x24
 80104b2:	b928      	cbnz	r0, 80104c0 <__pow5mult+0x40>
 80104b4:	4b1d      	ldr	r3, [pc, #116]	; (801052c <__pow5mult+0xac>)
 80104b6:	481e      	ldr	r0, [pc, #120]	; (8010530 <__pow5mult+0xb0>)
 80104b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80104bc:	f000 fd84 	bl	8010fc8 <__assert_func>
 80104c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80104c4:	6004      	str	r4, [r0, #0]
 80104c6:	60c4      	str	r4, [r0, #12]
 80104c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80104cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80104d0:	b94c      	cbnz	r4, 80104e6 <__pow5mult+0x66>
 80104d2:	f240 2171 	movw	r1, #625	; 0x271
 80104d6:	4630      	mov	r0, r6
 80104d8:	f7ff ff12 	bl	8010300 <__i2b>
 80104dc:	2300      	movs	r3, #0
 80104de:	f8c8 0008 	str.w	r0, [r8, #8]
 80104e2:	4604      	mov	r4, r0
 80104e4:	6003      	str	r3, [r0, #0]
 80104e6:	f04f 0900 	mov.w	r9, #0
 80104ea:	07eb      	lsls	r3, r5, #31
 80104ec:	d50a      	bpl.n	8010504 <__pow5mult+0x84>
 80104ee:	4639      	mov	r1, r7
 80104f0:	4622      	mov	r2, r4
 80104f2:	4630      	mov	r0, r6
 80104f4:	f7ff ff1a 	bl	801032c <__multiply>
 80104f8:	4639      	mov	r1, r7
 80104fa:	4680      	mov	r8, r0
 80104fc:	4630      	mov	r0, r6
 80104fe:	f7ff fdfd 	bl	80100fc <_Bfree>
 8010502:	4647      	mov	r7, r8
 8010504:	106d      	asrs	r5, r5, #1
 8010506:	d00b      	beq.n	8010520 <__pow5mult+0xa0>
 8010508:	6820      	ldr	r0, [r4, #0]
 801050a:	b938      	cbnz	r0, 801051c <__pow5mult+0x9c>
 801050c:	4622      	mov	r2, r4
 801050e:	4621      	mov	r1, r4
 8010510:	4630      	mov	r0, r6
 8010512:	f7ff ff0b 	bl	801032c <__multiply>
 8010516:	6020      	str	r0, [r4, #0]
 8010518:	f8c0 9000 	str.w	r9, [r0]
 801051c:	4604      	mov	r4, r0
 801051e:	e7e4      	b.n	80104ea <__pow5mult+0x6a>
 8010520:	4638      	mov	r0, r7
 8010522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010526:	bf00      	nop
 8010528:	08012ee8 	.word	0x08012ee8
 801052c:	08012c36 	.word	0x08012c36
 8010530:	08012d98 	.word	0x08012d98

08010534 <__lshift>:
 8010534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010538:	460c      	mov	r4, r1
 801053a:	6849      	ldr	r1, [r1, #4]
 801053c:	6923      	ldr	r3, [r4, #16]
 801053e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010542:	68a3      	ldr	r3, [r4, #8]
 8010544:	4607      	mov	r7, r0
 8010546:	4691      	mov	r9, r2
 8010548:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801054c:	f108 0601 	add.w	r6, r8, #1
 8010550:	42b3      	cmp	r3, r6
 8010552:	db0b      	blt.n	801056c <__lshift+0x38>
 8010554:	4638      	mov	r0, r7
 8010556:	f7ff fd91 	bl	801007c <_Balloc>
 801055a:	4605      	mov	r5, r0
 801055c:	b948      	cbnz	r0, 8010572 <__lshift+0x3e>
 801055e:	4602      	mov	r2, r0
 8010560:	4b2a      	ldr	r3, [pc, #168]	; (801060c <__lshift+0xd8>)
 8010562:	482b      	ldr	r0, [pc, #172]	; (8010610 <__lshift+0xdc>)
 8010564:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010568:	f000 fd2e 	bl	8010fc8 <__assert_func>
 801056c:	3101      	adds	r1, #1
 801056e:	005b      	lsls	r3, r3, #1
 8010570:	e7ee      	b.n	8010550 <__lshift+0x1c>
 8010572:	2300      	movs	r3, #0
 8010574:	f100 0114 	add.w	r1, r0, #20
 8010578:	f100 0210 	add.w	r2, r0, #16
 801057c:	4618      	mov	r0, r3
 801057e:	4553      	cmp	r3, sl
 8010580:	db37      	blt.n	80105f2 <__lshift+0xbe>
 8010582:	6920      	ldr	r0, [r4, #16]
 8010584:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010588:	f104 0314 	add.w	r3, r4, #20
 801058c:	f019 091f 	ands.w	r9, r9, #31
 8010590:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010594:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010598:	d02f      	beq.n	80105fa <__lshift+0xc6>
 801059a:	f1c9 0e20 	rsb	lr, r9, #32
 801059e:	468a      	mov	sl, r1
 80105a0:	f04f 0c00 	mov.w	ip, #0
 80105a4:	681a      	ldr	r2, [r3, #0]
 80105a6:	fa02 f209 	lsl.w	r2, r2, r9
 80105aa:	ea42 020c 	orr.w	r2, r2, ip
 80105ae:	f84a 2b04 	str.w	r2, [sl], #4
 80105b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80105b6:	4298      	cmp	r0, r3
 80105b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80105bc:	d8f2      	bhi.n	80105a4 <__lshift+0x70>
 80105be:	1b03      	subs	r3, r0, r4
 80105c0:	3b15      	subs	r3, #21
 80105c2:	f023 0303 	bic.w	r3, r3, #3
 80105c6:	3304      	adds	r3, #4
 80105c8:	f104 0215 	add.w	r2, r4, #21
 80105cc:	4290      	cmp	r0, r2
 80105ce:	bf38      	it	cc
 80105d0:	2304      	movcc	r3, #4
 80105d2:	f841 c003 	str.w	ip, [r1, r3]
 80105d6:	f1bc 0f00 	cmp.w	ip, #0
 80105da:	d001      	beq.n	80105e0 <__lshift+0xac>
 80105dc:	f108 0602 	add.w	r6, r8, #2
 80105e0:	3e01      	subs	r6, #1
 80105e2:	4638      	mov	r0, r7
 80105e4:	612e      	str	r6, [r5, #16]
 80105e6:	4621      	mov	r1, r4
 80105e8:	f7ff fd88 	bl	80100fc <_Bfree>
 80105ec:	4628      	mov	r0, r5
 80105ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80105f6:	3301      	adds	r3, #1
 80105f8:	e7c1      	b.n	801057e <__lshift+0x4a>
 80105fa:	3904      	subs	r1, #4
 80105fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010600:	f841 2f04 	str.w	r2, [r1, #4]!
 8010604:	4298      	cmp	r0, r3
 8010606:	d8f9      	bhi.n	80105fc <__lshift+0xc8>
 8010608:	e7ea      	b.n	80105e0 <__lshift+0xac>
 801060a:	bf00      	nop
 801060c:	08012ca8 	.word	0x08012ca8
 8010610:	08012d98 	.word	0x08012d98

08010614 <__mcmp>:
 8010614:	b530      	push	{r4, r5, lr}
 8010616:	6902      	ldr	r2, [r0, #16]
 8010618:	690c      	ldr	r4, [r1, #16]
 801061a:	1b12      	subs	r2, r2, r4
 801061c:	d10e      	bne.n	801063c <__mcmp+0x28>
 801061e:	f100 0314 	add.w	r3, r0, #20
 8010622:	3114      	adds	r1, #20
 8010624:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010628:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801062c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010630:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010634:	42a5      	cmp	r5, r4
 8010636:	d003      	beq.n	8010640 <__mcmp+0x2c>
 8010638:	d305      	bcc.n	8010646 <__mcmp+0x32>
 801063a:	2201      	movs	r2, #1
 801063c:	4610      	mov	r0, r2
 801063e:	bd30      	pop	{r4, r5, pc}
 8010640:	4283      	cmp	r3, r0
 8010642:	d3f3      	bcc.n	801062c <__mcmp+0x18>
 8010644:	e7fa      	b.n	801063c <__mcmp+0x28>
 8010646:	f04f 32ff 	mov.w	r2, #4294967295
 801064a:	e7f7      	b.n	801063c <__mcmp+0x28>

0801064c <__mdiff>:
 801064c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010650:	460c      	mov	r4, r1
 8010652:	4606      	mov	r6, r0
 8010654:	4611      	mov	r1, r2
 8010656:	4620      	mov	r0, r4
 8010658:	4690      	mov	r8, r2
 801065a:	f7ff ffdb 	bl	8010614 <__mcmp>
 801065e:	1e05      	subs	r5, r0, #0
 8010660:	d110      	bne.n	8010684 <__mdiff+0x38>
 8010662:	4629      	mov	r1, r5
 8010664:	4630      	mov	r0, r6
 8010666:	f7ff fd09 	bl	801007c <_Balloc>
 801066a:	b930      	cbnz	r0, 801067a <__mdiff+0x2e>
 801066c:	4b3a      	ldr	r3, [pc, #232]	; (8010758 <__mdiff+0x10c>)
 801066e:	4602      	mov	r2, r0
 8010670:	f240 2132 	movw	r1, #562	; 0x232
 8010674:	4839      	ldr	r0, [pc, #228]	; (801075c <__mdiff+0x110>)
 8010676:	f000 fca7 	bl	8010fc8 <__assert_func>
 801067a:	2301      	movs	r3, #1
 801067c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010684:	bfa4      	itt	ge
 8010686:	4643      	movge	r3, r8
 8010688:	46a0      	movge	r8, r4
 801068a:	4630      	mov	r0, r6
 801068c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010690:	bfa6      	itte	ge
 8010692:	461c      	movge	r4, r3
 8010694:	2500      	movge	r5, #0
 8010696:	2501      	movlt	r5, #1
 8010698:	f7ff fcf0 	bl	801007c <_Balloc>
 801069c:	b920      	cbnz	r0, 80106a8 <__mdiff+0x5c>
 801069e:	4b2e      	ldr	r3, [pc, #184]	; (8010758 <__mdiff+0x10c>)
 80106a0:	4602      	mov	r2, r0
 80106a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80106a6:	e7e5      	b.n	8010674 <__mdiff+0x28>
 80106a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80106ac:	6926      	ldr	r6, [r4, #16]
 80106ae:	60c5      	str	r5, [r0, #12]
 80106b0:	f104 0914 	add.w	r9, r4, #20
 80106b4:	f108 0514 	add.w	r5, r8, #20
 80106b8:	f100 0e14 	add.w	lr, r0, #20
 80106bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80106c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80106c4:	f108 0210 	add.w	r2, r8, #16
 80106c8:	46f2      	mov	sl, lr
 80106ca:	2100      	movs	r1, #0
 80106cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80106d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80106d4:	fa1f f883 	uxth.w	r8, r3
 80106d8:	fa11 f18b 	uxtah	r1, r1, fp
 80106dc:	0c1b      	lsrs	r3, r3, #16
 80106de:	eba1 0808 	sub.w	r8, r1, r8
 80106e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80106e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80106ea:	fa1f f888 	uxth.w	r8, r8
 80106ee:	1419      	asrs	r1, r3, #16
 80106f0:	454e      	cmp	r6, r9
 80106f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80106f6:	f84a 3b04 	str.w	r3, [sl], #4
 80106fa:	d8e7      	bhi.n	80106cc <__mdiff+0x80>
 80106fc:	1b33      	subs	r3, r6, r4
 80106fe:	3b15      	subs	r3, #21
 8010700:	f023 0303 	bic.w	r3, r3, #3
 8010704:	3304      	adds	r3, #4
 8010706:	3415      	adds	r4, #21
 8010708:	42a6      	cmp	r6, r4
 801070a:	bf38      	it	cc
 801070c:	2304      	movcc	r3, #4
 801070e:	441d      	add	r5, r3
 8010710:	4473      	add	r3, lr
 8010712:	469e      	mov	lr, r3
 8010714:	462e      	mov	r6, r5
 8010716:	4566      	cmp	r6, ip
 8010718:	d30e      	bcc.n	8010738 <__mdiff+0xec>
 801071a:	f10c 0203 	add.w	r2, ip, #3
 801071e:	1b52      	subs	r2, r2, r5
 8010720:	f022 0203 	bic.w	r2, r2, #3
 8010724:	3d03      	subs	r5, #3
 8010726:	45ac      	cmp	ip, r5
 8010728:	bf38      	it	cc
 801072a:	2200      	movcc	r2, #0
 801072c:	441a      	add	r2, r3
 801072e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010732:	b17b      	cbz	r3, 8010754 <__mdiff+0x108>
 8010734:	6107      	str	r7, [r0, #16]
 8010736:	e7a3      	b.n	8010680 <__mdiff+0x34>
 8010738:	f856 8b04 	ldr.w	r8, [r6], #4
 801073c:	fa11 f288 	uxtah	r2, r1, r8
 8010740:	1414      	asrs	r4, r2, #16
 8010742:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010746:	b292      	uxth	r2, r2
 8010748:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801074c:	f84e 2b04 	str.w	r2, [lr], #4
 8010750:	1421      	asrs	r1, r4, #16
 8010752:	e7e0      	b.n	8010716 <__mdiff+0xca>
 8010754:	3f01      	subs	r7, #1
 8010756:	e7ea      	b.n	801072e <__mdiff+0xe2>
 8010758:	08012ca8 	.word	0x08012ca8
 801075c:	08012d98 	.word	0x08012d98

08010760 <__ulp>:
 8010760:	b082      	sub	sp, #8
 8010762:	ed8d 0b00 	vstr	d0, [sp]
 8010766:	9b01      	ldr	r3, [sp, #4]
 8010768:	4912      	ldr	r1, [pc, #72]	; (80107b4 <__ulp+0x54>)
 801076a:	4019      	ands	r1, r3
 801076c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010770:	2900      	cmp	r1, #0
 8010772:	dd05      	ble.n	8010780 <__ulp+0x20>
 8010774:	2200      	movs	r2, #0
 8010776:	460b      	mov	r3, r1
 8010778:	ec43 2b10 	vmov	d0, r2, r3
 801077c:	b002      	add	sp, #8
 801077e:	4770      	bx	lr
 8010780:	4249      	negs	r1, r1
 8010782:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010786:	ea4f 5021 	mov.w	r0, r1, asr #20
 801078a:	f04f 0200 	mov.w	r2, #0
 801078e:	f04f 0300 	mov.w	r3, #0
 8010792:	da04      	bge.n	801079e <__ulp+0x3e>
 8010794:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010798:	fa41 f300 	asr.w	r3, r1, r0
 801079c:	e7ec      	b.n	8010778 <__ulp+0x18>
 801079e:	f1a0 0114 	sub.w	r1, r0, #20
 80107a2:	291e      	cmp	r1, #30
 80107a4:	bfda      	itte	le
 80107a6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80107aa:	fa20 f101 	lsrle.w	r1, r0, r1
 80107ae:	2101      	movgt	r1, #1
 80107b0:	460a      	mov	r2, r1
 80107b2:	e7e1      	b.n	8010778 <__ulp+0x18>
 80107b4:	7ff00000 	.word	0x7ff00000

080107b8 <__b2d>:
 80107b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ba:	6905      	ldr	r5, [r0, #16]
 80107bc:	f100 0714 	add.w	r7, r0, #20
 80107c0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80107c4:	1f2e      	subs	r6, r5, #4
 80107c6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80107ca:	4620      	mov	r0, r4
 80107cc:	f7ff fd48 	bl	8010260 <__hi0bits>
 80107d0:	f1c0 0320 	rsb	r3, r0, #32
 80107d4:	280a      	cmp	r0, #10
 80107d6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010854 <__b2d+0x9c>
 80107da:	600b      	str	r3, [r1, #0]
 80107dc:	dc14      	bgt.n	8010808 <__b2d+0x50>
 80107de:	f1c0 0e0b 	rsb	lr, r0, #11
 80107e2:	fa24 f10e 	lsr.w	r1, r4, lr
 80107e6:	42b7      	cmp	r7, r6
 80107e8:	ea41 030c 	orr.w	r3, r1, ip
 80107ec:	bf34      	ite	cc
 80107ee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80107f2:	2100      	movcs	r1, #0
 80107f4:	3015      	adds	r0, #21
 80107f6:	fa04 f000 	lsl.w	r0, r4, r0
 80107fa:	fa21 f10e 	lsr.w	r1, r1, lr
 80107fe:	ea40 0201 	orr.w	r2, r0, r1
 8010802:	ec43 2b10 	vmov	d0, r2, r3
 8010806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010808:	42b7      	cmp	r7, r6
 801080a:	bf3a      	itte	cc
 801080c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010810:	f1a5 0608 	subcc.w	r6, r5, #8
 8010814:	2100      	movcs	r1, #0
 8010816:	380b      	subs	r0, #11
 8010818:	d017      	beq.n	801084a <__b2d+0x92>
 801081a:	f1c0 0c20 	rsb	ip, r0, #32
 801081e:	fa04 f500 	lsl.w	r5, r4, r0
 8010822:	42be      	cmp	r6, r7
 8010824:	fa21 f40c 	lsr.w	r4, r1, ip
 8010828:	ea45 0504 	orr.w	r5, r5, r4
 801082c:	bf8c      	ite	hi
 801082e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010832:	2400      	movls	r4, #0
 8010834:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010838:	fa01 f000 	lsl.w	r0, r1, r0
 801083c:	fa24 f40c 	lsr.w	r4, r4, ip
 8010840:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010844:	ea40 0204 	orr.w	r2, r0, r4
 8010848:	e7db      	b.n	8010802 <__b2d+0x4a>
 801084a:	ea44 030c 	orr.w	r3, r4, ip
 801084e:	460a      	mov	r2, r1
 8010850:	e7d7      	b.n	8010802 <__b2d+0x4a>
 8010852:	bf00      	nop
 8010854:	3ff00000 	.word	0x3ff00000

08010858 <__d2b>:
 8010858:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801085c:	4689      	mov	r9, r1
 801085e:	2101      	movs	r1, #1
 8010860:	ec57 6b10 	vmov	r6, r7, d0
 8010864:	4690      	mov	r8, r2
 8010866:	f7ff fc09 	bl	801007c <_Balloc>
 801086a:	4604      	mov	r4, r0
 801086c:	b930      	cbnz	r0, 801087c <__d2b+0x24>
 801086e:	4602      	mov	r2, r0
 8010870:	4b25      	ldr	r3, [pc, #148]	; (8010908 <__d2b+0xb0>)
 8010872:	4826      	ldr	r0, [pc, #152]	; (801090c <__d2b+0xb4>)
 8010874:	f240 310a 	movw	r1, #778	; 0x30a
 8010878:	f000 fba6 	bl	8010fc8 <__assert_func>
 801087c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010880:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010884:	bb35      	cbnz	r5, 80108d4 <__d2b+0x7c>
 8010886:	2e00      	cmp	r6, #0
 8010888:	9301      	str	r3, [sp, #4]
 801088a:	d028      	beq.n	80108de <__d2b+0x86>
 801088c:	4668      	mov	r0, sp
 801088e:	9600      	str	r6, [sp, #0]
 8010890:	f7ff fd06 	bl	80102a0 <__lo0bits>
 8010894:	9900      	ldr	r1, [sp, #0]
 8010896:	b300      	cbz	r0, 80108da <__d2b+0x82>
 8010898:	9a01      	ldr	r2, [sp, #4]
 801089a:	f1c0 0320 	rsb	r3, r0, #32
 801089e:	fa02 f303 	lsl.w	r3, r2, r3
 80108a2:	430b      	orrs	r3, r1
 80108a4:	40c2      	lsrs	r2, r0
 80108a6:	6163      	str	r3, [r4, #20]
 80108a8:	9201      	str	r2, [sp, #4]
 80108aa:	9b01      	ldr	r3, [sp, #4]
 80108ac:	61a3      	str	r3, [r4, #24]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	bf14      	ite	ne
 80108b2:	2202      	movne	r2, #2
 80108b4:	2201      	moveq	r2, #1
 80108b6:	6122      	str	r2, [r4, #16]
 80108b8:	b1d5      	cbz	r5, 80108f0 <__d2b+0x98>
 80108ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80108be:	4405      	add	r5, r0
 80108c0:	f8c9 5000 	str.w	r5, [r9]
 80108c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80108c8:	f8c8 0000 	str.w	r0, [r8]
 80108cc:	4620      	mov	r0, r4
 80108ce:	b003      	add	sp, #12
 80108d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80108d8:	e7d5      	b.n	8010886 <__d2b+0x2e>
 80108da:	6161      	str	r1, [r4, #20]
 80108dc:	e7e5      	b.n	80108aa <__d2b+0x52>
 80108de:	a801      	add	r0, sp, #4
 80108e0:	f7ff fcde 	bl	80102a0 <__lo0bits>
 80108e4:	9b01      	ldr	r3, [sp, #4]
 80108e6:	6163      	str	r3, [r4, #20]
 80108e8:	2201      	movs	r2, #1
 80108ea:	6122      	str	r2, [r4, #16]
 80108ec:	3020      	adds	r0, #32
 80108ee:	e7e3      	b.n	80108b8 <__d2b+0x60>
 80108f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80108f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80108f8:	f8c9 0000 	str.w	r0, [r9]
 80108fc:	6918      	ldr	r0, [r3, #16]
 80108fe:	f7ff fcaf 	bl	8010260 <__hi0bits>
 8010902:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010906:	e7df      	b.n	80108c8 <__d2b+0x70>
 8010908:	08012ca8 	.word	0x08012ca8
 801090c:	08012d98 	.word	0x08012d98

08010910 <__ratio>:
 8010910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010914:	4688      	mov	r8, r1
 8010916:	4669      	mov	r1, sp
 8010918:	4681      	mov	r9, r0
 801091a:	f7ff ff4d 	bl	80107b8 <__b2d>
 801091e:	a901      	add	r1, sp, #4
 8010920:	4640      	mov	r0, r8
 8010922:	ec55 4b10 	vmov	r4, r5, d0
 8010926:	f7ff ff47 	bl	80107b8 <__b2d>
 801092a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801092e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010932:	eba3 0c02 	sub.w	ip, r3, r2
 8010936:	e9dd 3200 	ldrd	r3, r2, [sp]
 801093a:	1a9b      	subs	r3, r3, r2
 801093c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010940:	ec51 0b10 	vmov	r0, r1, d0
 8010944:	2b00      	cmp	r3, #0
 8010946:	bfd6      	itet	le
 8010948:	460a      	movle	r2, r1
 801094a:	462a      	movgt	r2, r5
 801094c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010950:	468b      	mov	fp, r1
 8010952:	462f      	mov	r7, r5
 8010954:	bfd4      	ite	le
 8010956:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801095a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801095e:	4620      	mov	r0, r4
 8010960:	ee10 2a10 	vmov	r2, s0
 8010964:	465b      	mov	r3, fp
 8010966:	4639      	mov	r1, r7
 8010968:	f7ef ff98 	bl	800089c <__aeabi_ddiv>
 801096c:	ec41 0b10 	vmov	d0, r0, r1
 8010970:	b003      	add	sp, #12
 8010972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010976 <__copybits>:
 8010976:	3901      	subs	r1, #1
 8010978:	b570      	push	{r4, r5, r6, lr}
 801097a:	1149      	asrs	r1, r1, #5
 801097c:	6914      	ldr	r4, [r2, #16]
 801097e:	3101      	adds	r1, #1
 8010980:	f102 0314 	add.w	r3, r2, #20
 8010984:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010988:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801098c:	1f05      	subs	r5, r0, #4
 801098e:	42a3      	cmp	r3, r4
 8010990:	d30c      	bcc.n	80109ac <__copybits+0x36>
 8010992:	1aa3      	subs	r3, r4, r2
 8010994:	3b11      	subs	r3, #17
 8010996:	f023 0303 	bic.w	r3, r3, #3
 801099a:	3211      	adds	r2, #17
 801099c:	42a2      	cmp	r2, r4
 801099e:	bf88      	it	hi
 80109a0:	2300      	movhi	r3, #0
 80109a2:	4418      	add	r0, r3
 80109a4:	2300      	movs	r3, #0
 80109a6:	4288      	cmp	r0, r1
 80109a8:	d305      	bcc.n	80109b6 <__copybits+0x40>
 80109aa:	bd70      	pop	{r4, r5, r6, pc}
 80109ac:	f853 6b04 	ldr.w	r6, [r3], #4
 80109b0:	f845 6f04 	str.w	r6, [r5, #4]!
 80109b4:	e7eb      	b.n	801098e <__copybits+0x18>
 80109b6:	f840 3b04 	str.w	r3, [r0], #4
 80109ba:	e7f4      	b.n	80109a6 <__copybits+0x30>

080109bc <__any_on>:
 80109bc:	f100 0214 	add.w	r2, r0, #20
 80109c0:	6900      	ldr	r0, [r0, #16]
 80109c2:	114b      	asrs	r3, r1, #5
 80109c4:	4298      	cmp	r0, r3
 80109c6:	b510      	push	{r4, lr}
 80109c8:	db11      	blt.n	80109ee <__any_on+0x32>
 80109ca:	dd0a      	ble.n	80109e2 <__any_on+0x26>
 80109cc:	f011 011f 	ands.w	r1, r1, #31
 80109d0:	d007      	beq.n	80109e2 <__any_on+0x26>
 80109d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80109d6:	fa24 f001 	lsr.w	r0, r4, r1
 80109da:	fa00 f101 	lsl.w	r1, r0, r1
 80109de:	428c      	cmp	r4, r1
 80109e0:	d10b      	bne.n	80109fa <__any_on+0x3e>
 80109e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80109e6:	4293      	cmp	r3, r2
 80109e8:	d803      	bhi.n	80109f2 <__any_on+0x36>
 80109ea:	2000      	movs	r0, #0
 80109ec:	bd10      	pop	{r4, pc}
 80109ee:	4603      	mov	r3, r0
 80109f0:	e7f7      	b.n	80109e2 <__any_on+0x26>
 80109f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80109f6:	2900      	cmp	r1, #0
 80109f8:	d0f5      	beq.n	80109e6 <__any_on+0x2a>
 80109fa:	2001      	movs	r0, #1
 80109fc:	e7f6      	b.n	80109ec <__any_on+0x30>

080109fe <_calloc_r>:
 80109fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a00:	fba1 2402 	umull	r2, r4, r1, r2
 8010a04:	b94c      	cbnz	r4, 8010a1a <_calloc_r+0x1c>
 8010a06:	4611      	mov	r1, r2
 8010a08:	9201      	str	r2, [sp, #4]
 8010a0a:	f000 f87b 	bl	8010b04 <_malloc_r>
 8010a0e:	9a01      	ldr	r2, [sp, #4]
 8010a10:	4605      	mov	r5, r0
 8010a12:	b930      	cbnz	r0, 8010a22 <_calloc_r+0x24>
 8010a14:	4628      	mov	r0, r5
 8010a16:	b003      	add	sp, #12
 8010a18:	bd30      	pop	{r4, r5, pc}
 8010a1a:	220c      	movs	r2, #12
 8010a1c:	6002      	str	r2, [r0, #0]
 8010a1e:	2500      	movs	r5, #0
 8010a20:	e7f8      	b.n	8010a14 <_calloc_r+0x16>
 8010a22:	4621      	mov	r1, r4
 8010a24:	f7fc fa88 	bl	800cf38 <memset>
 8010a28:	e7f4      	b.n	8010a14 <_calloc_r+0x16>
	...

08010a2c <_free_r>:
 8010a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a2e:	2900      	cmp	r1, #0
 8010a30:	d044      	beq.n	8010abc <_free_r+0x90>
 8010a32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a36:	9001      	str	r0, [sp, #4]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	f1a1 0404 	sub.w	r4, r1, #4
 8010a3e:	bfb8      	it	lt
 8010a40:	18e4      	addlt	r4, r4, r3
 8010a42:	f000 fb35 	bl	80110b0 <__malloc_lock>
 8010a46:	4a1e      	ldr	r2, [pc, #120]	; (8010ac0 <_free_r+0x94>)
 8010a48:	9801      	ldr	r0, [sp, #4]
 8010a4a:	6813      	ldr	r3, [r2, #0]
 8010a4c:	b933      	cbnz	r3, 8010a5c <_free_r+0x30>
 8010a4e:	6063      	str	r3, [r4, #4]
 8010a50:	6014      	str	r4, [r2, #0]
 8010a52:	b003      	add	sp, #12
 8010a54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a58:	f000 bb30 	b.w	80110bc <__malloc_unlock>
 8010a5c:	42a3      	cmp	r3, r4
 8010a5e:	d908      	bls.n	8010a72 <_free_r+0x46>
 8010a60:	6825      	ldr	r5, [r4, #0]
 8010a62:	1961      	adds	r1, r4, r5
 8010a64:	428b      	cmp	r3, r1
 8010a66:	bf01      	itttt	eq
 8010a68:	6819      	ldreq	r1, [r3, #0]
 8010a6a:	685b      	ldreq	r3, [r3, #4]
 8010a6c:	1949      	addeq	r1, r1, r5
 8010a6e:	6021      	streq	r1, [r4, #0]
 8010a70:	e7ed      	b.n	8010a4e <_free_r+0x22>
 8010a72:	461a      	mov	r2, r3
 8010a74:	685b      	ldr	r3, [r3, #4]
 8010a76:	b10b      	cbz	r3, 8010a7c <_free_r+0x50>
 8010a78:	42a3      	cmp	r3, r4
 8010a7a:	d9fa      	bls.n	8010a72 <_free_r+0x46>
 8010a7c:	6811      	ldr	r1, [r2, #0]
 8010a7e:	1855      	adds	r5, r2, r1
 8010a80:	42a5      	cmp	r5, r4
 8010a82:	d10b      	bne.n	8010a9c <_free_r+0x70>
 8010a84:	6824      	ldr	r4, [r4, #0]
 8010a86:	4421      	add	r1, r4
 8010a88:	1854      	adds	r4, r2, r1
 8010a8a:	42a3      	cmp	r3, r4
 8010a8c:	6011      	str	r1, [r2, #0]
 8010a8e:	d1e0      	bne.n	8010a52 <_free_r+0x26>
 8010a90:	681c      	ldr	r4, [r3, #0]
 8010a92:	685b      	ldr	r3, [r3, #4]
 8010a94:	6053      	str	r3, [r2, #4]
 8010a96:	4421      	add	r1, r4
 8010a98:	6011      	str	r1, [r2, #0]
 8010a9a:	e7da      	b.n	8010a52 <_free_r+0x26>
 8010a9c:	d902      	bls.n	8010aa4 <_free_r+0x78>
 8010a9e:	230c      	movs	r3, #12
 8010aa0:	6003      	str	r3, [r0, #0]
 8010aa2:	e7d6      	b.n	8010a52 <_free_r+0x26>
 8010aa4:	6825      	ldr	r5, [r4, #0]
 8010aa6:	1961      	adds	r1, r4, r5
 8010aa8:	428b      	cmp	r3, r1
 8010aaa:	bf04      	itt	eq
 8010aac:	6819      	ldreq	r1, [r3, #0]
 8010aae:	685b      	ldreq	r3, [r3, #4]
 8010ab0:	6063      	str	r3, [r4, #4]
 8010ab2:	bf04      	itt	eq
 8010ab4:	1949      	addeq	r1, r1, r5
 8010ab6:	6021      	streq	r1, [r4, #0]
 8010ab8:	6054      	str	r4, [r2, #4]
 8010aba:	e7ca      	b.n	8010a52 <_free_r+0x26>
 8010abc:	b003      	add	sp, #12
 8010abe:	bd30      	pop	{r4, r5, pc}
 8010ac0:	2000513c 	.word	0x2000513c

08010ac4 <sbrk_aligned>:
 8010ac4:	b570      	push	{r4, r5, r6, lr}
 8010ac6:	4e0e      	ldr	r6, [pc, #56]	; (8010b00 <sbrk_aligned+0x3c>)
 8010ac8:	460c      	mov	r4, r1
 8010aca:	6831      	ldr	r1, [r6, #0]
 8010acc:	4605      	mov	r5, r0
 8010ace:	b911      	cbnz	r1, 8010ad6 <sbrk_aligned+0x12>
 8010ad0:	f000 f9ee 	bl	8010eb0 <_sbrk_r>
 8010ad4:	6030      	str	r0, [r6, #0]
 8010ad6:	4621      	mov	r1, r4
 8010ad8:	4628      	mov	r0, r5
 8010ada:	f000 f9e9 	bl	8010eb0 <_sbrk_r>
 8010ade:	1c43      	adds	r3, r0, #1
 8010ae0:	d00a      	beq.n	8010af8 <sbrk_aligned+0x34>
 8010ae2:	1cc4      	adds	r4, r0, #3
 8010ae4:	f024 0403 	bic.w	r4, r4, #3
 8010ae8:	42a0      	cmp	r0, r4
 8010aea:	d007      	beq.n	8010afc <sbrk_aligned+0x38>
 8010aec:	1a21      	subs	r1, r4, r0
 8010aee:	4628      	mov	r0, r5
 8010af0:	f000 f9de 	bl	8010eb0 <_sbrk_r>
 8010af4:	3001      	adds	r0, #1
 8010af6:	d101      	bne.n	8010afc <sbrk_aligned+0x38>
 8010af8:	f04f 34ff 	mov.w	r4, #4294967295
 8010afc:	4620      	mov	r0, r4
 8010afe:	bd70      	pop	{r4, r5, r6, pc}
 8010b00:	20005140 	.word	0x20005140

08010b04 <_malloc_r>:
 8010b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b08:	1ccd      	adds	r5, r1, #3
 8010b0a:	f025 0503 	bic.w	r5, r5, #3
 8010b0e:	3508      	adds	r5, #8
 8010b10:	2d0c      	cmp	r5, #12
 8010b12:	bf38      	it	cc
 8010b14:	250c      	movcc	r5, #12
 8010b16:	2d00      	cmp	r5, #0
 8010b18:	4607      	mov	r7, r0
 8010b1a:	db01      	blt.n	8010b20 <_malloc_r+0x1c>
 8010b1c:	42a9      	cmp	r1, r5
 8010b1e:	d905      	bls.n	8010b2c <_malloc_r+0x28>
 8010b20:	230c      	movs	r3, #12
 8010b22:	603b      	str	r3, [r7, #0]
 8010b24:	2600      	movs	r6, #0
 8010b26:	4630      	mov	r0, r6
 8010b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b2c:	4e2e      	ldr	r6, [pc, #184]	; (8010be8 <_malloc_r+0xe4>)
 8010b2e:	f000 fabf 	bl	80110b0 <__malloc_lock>
 8010b32:	6833      	ldr	r3, [r6, #0]
 8010b34:	461c      	mov	r4, r3
 8010b36:	bb34      	cbnz	r4, 8010b86 <_malloc_r+0x82>
 8010b38:	4629      	mov	r1, r5
 8010b3a:	4638      	mov	r0, r7
 8010b3c:	f7ff ffc2 	bl	8010ac4 <sbrk_aligned>
 8010b40:	1c43      	adds	r3, r0, #1
 8010b42:	4604      	mov	r4, r0
 8010b44:	d14d      	bne.n	8010be2 <_malloc_r+0xde>
 8010b46:	6834      	ldr	r4, [r6, #0]
 8010b48:	4626      	mov	r6, r4
 8010b4a:	2e00      	cmp	r6, #0
 8010b4c:	d140      	bne.n	8010bd0 <_malloc_r+0xcc>
 8010b4e:	6823      	ldr	r3, [r4, #0]
 8010b50:	4631      	mov	r1, r6
 8010b52:	4638      	mov	r0, r7
 8010b54:	eb04 0803 	add.w	r8, r4, r3
 8010b58:	f000 f9aa 	bl	8010eb0 <_sbrk_r>
 8010b5c:	4580      	cmp	r8, r0
 8010b5e:	d13a      	bne.n	8010bd6 <_malloc_r+0xd2>
 8010b60:	6821      	ldr	r1, [r4, #0]
 8010b62:	3503      	adds	r5, #3
 8010b64:	1a6d      	subs	r5, r5, r1
 8010b66:	f025 0503 	bic.w	r5, r5, #3
 8010b6a:	3508      	adds	r5, #8
 8010b6c:	2d0c      	cmp	r5, #12
 8010b6e:	bf38      	it	cc
 8010b70:	250c      	movcc	r5, #12
 8010b72:	4629      	mov	r1, r5
 8010b74:	4638      	mov	r0, r7
 8010b76:	f7ff ffa5 	bl	8010ac4 <sbrk_aligned>
 8010b7a:	3001      	adds	r0, #1
 8010b7c:	d02b      	beq.n	8010bd6 <_malloc_r+0xd2>
 8010b7e:	6823      	ldr	r3, [r4, #0]
 8010b80:	442b      	add	r3, r5
 8010b82:	6023      	str	r3, [r4, #0]
 8010b84:	e00e      	b.n	8010ba4 <_malloc_r+0xa0>
 8010b86:	6822      	ldr	r2, [r4, #0]
 8010b88:	1b52      	subs	r2, r2, r5
 8010b8a:	d41e      	bmi.n	8010bca <_malloc_r+0xc6>
 8010b8c:	2a0b      	cmp	r2, #11
 8010b8e:	d916      	bls.n	8010bbe <_malloc_r+0xba>
 8010b90:	1961      	adds	r1, r4, r5
 8010b92:	42a3      	cmp	r3, r4
 8010b94:	6025      	str	r5, [r4, #0]
 8010b96:	bf18      	it	ne
 8010b98:	6059      	strne	r1, [r3, #4]
 8010b9a:	6863      	ldr	r3, [r4, #4]
 8010b9c:	bf08      	it	eq
 8010b9e:	6031      	streq	r1, [r6, #0]
 8010ba0:	5162      	str	r2, [r4, r5]
 8010ba2:	604b      	str	r3, [r1, #4]
 8010ba4:	4638      	mov	r0, r7
 8010ba6:	f104 060b 	add.w	r6, r4, #11
 8010baa:	f000 fa87 	bl	80110bc <__malloc_unlock>
 8010bae:	f026 0607 	bic.w	r6, r6, #7
 8010bb2:	1d23      	adds	r3, r4, #4
 8010bb4:	1af2      	subs	r2, r6, r3
 8010bb6:	d0b6      	beq.n	8010b26 <_malloc_r+0x22>
 8010bb8:	1b9b      	subs	r3, r3, r6
 8010bba:	50a3      	str	r3, [r4, r2]
 8010bbc:	e7b3      	b.n	8010b26 <_malloc_r+0x22>
 8010bbe:	6862      	ldr	r2, [r4, #4]
 8010bc0:	42a3      	cmp	r3, r4
 8010bc2:	bf0c      	ite	eq
 8010bc4:	6032      	streq	r2, [r6, #0]
 8010bc6:	605a      	strne	r2, [r3, #4]
 8010bc8:	e7ec      	b.n	8010ba4 <_malloc_r+0xa0>
 8010bca:	4623      	mov	r3, r4
 8010bcc:	6864      	ldr	r4, [r4, #4]
 8010bce:	e7b2      	b.n	8010b36 <_malloc_r+0x32>
 8010bd0:	4634      	mov	r4, r6
 8010bd2:	6876      	ldr	r6, [r6, #4]
 8010bd4:	e7b9      	b.n	8010b4a <_malloc_r+0x46>
 8010bd6:	230c      	movs	r3, #12
 8010bd8:	603b      	str	r3, [r7, #0]
 8010bda:	4638      	mov	r0, r7
 8010bdc:	f000 fa6e 	bl	80110bc <__malloc_unlock>
 8010be0:	e7a1      	b.n	8010b26 <_malloc_r+0x22>
 8010be2:	6025      	str	r5, [r4, #0]
 8010be4:	e7de      	b.n	8010ba4 <_malloc_r+0xa0>
 8010be6:	bf00      	nop
 8010be8:	2000513c 	.word	0x2000513c

08010bec <__sfputc_r>:
 8010bec:	6893      	ldr	r3, [r2, #8]
 8010bee:	3b01      	subs	r3, #1
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	b410      	push	{r4}
 8010bf4:	6093      	str	r3, [r2, #8]
 8010bf6:	da08      	bge.n	8010c0a <__sfputc_r+0x1e>
 8010bf8:	6994      	ldr	r4, [r2, #24]
 8010bfa:	42a3      	cmp	r3, r4
 8010bfc:	db01      	blt.n	8010c02 <__sfputc_r+0x16>
 8010bfe:	290a      	cmp	r1, #10
 8010c00:	d103      	bne.n	8010c0a <__sfputc_r+0x1e>
 8010c02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c06:	f7fd bd51 	b.w	800e6ac <__swbuf_r>
 8010c0a:	6813      	ldr	r3, [r2, #0]
 8010c0c:	1c58      	adds	r0, r3, #1
 8010c0e:	6010      	str	r0, [r2, #0]
 8010c10:	7019      	strb	r1, [r3, #0]
 8010c12:	4608      	mov	r0, r1
 8010c14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c18:	4770      	bx	lr

08010c1a <__sfputs_r>:
 8010c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c1c:	4606      	mov	r6, r0
 8010c1e:	460f      	mov	r7, r1
 8010c20:	4614      	mov	r4, r2
 8010c22:	18d5      	adds	r5, r2, r3
 8010c24:	42ac      	cmp	r4, r5
 8010c26:	d101      	bne.n	8010c2c <__sfputs_r+0x12>
 8010c28:	2000      	movs	r0, #0
 8010c2a:	e007      	b.n	8010c3c <__sfputs_r+0x22>
 8010c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c30:	463a      	mov	r2, r7
 8010c32:	4630      	mov	r0, r6
 8010c34:	f7ff ffda 	bl	8010bec <__sfputc_r>
 8010c38:	1c43      	adds	r3, r0, #1
 8010c3a:	d1f3      	bne.n	8010c24 <__sfputs_r+0xa>
 8010c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010c40 <_vfiprintf_r>:
 8010c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c44:	460d      	mov	r5, r1
 8010c46:	b09d      	sub	sp, #116	; 0x74
 8010c48:	4614      	mov	r4, r2
 8010c4a:	4698      	mov	r8, r3
 8010c4c:	4606      	mov	r6, r0
 8010c4e:	b118      	cbz	r0, 8010c58 <_vfiprintf_r+0x18>
 8010c50:	6983      	ldr	r3, [r0, #24]
 8010c52:	b90b      	cbnz	r3, 8010c58 <_vfiprintf_r+0x18>
 8010c54:	f7fe fd80 	bl	800f758 <__sinit>
 8010c58:	4b89      	ldr	r3, [pc, #548]	; (8010e80 <_vfiprintf_r+0x240>)
 8010c5a:	429d      	cmp	r5, r3
 8010c5c:	d11b      	bne.n	8010c96 <_vfiprintf_r+0x56>
 8010c5e:	6875      	ldr	r5, [r6, #4]
 8010c60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c62:	07d9      	lsls	r1, r3, #31
 8010c64:	d405      	bmi.n	8010c72 <_vfiprintf_r+0x32>
 8010c66:	89ab      	ldrh	r3, [r5, #12]
 8010c68:	059a      	lsls	r2, r3, #22
 8010c6a:	d402      	bmi.n	8010c72 <_vfiprintf_r+0x32>
 8010c6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c6e:	f7ff f984 	bl	800ff7a <__retarget_lock_acquire_recursive>
 8010c72:	89ab      	ldrh	r3, [r5, #12]
 8010c74:	071b      	lsls	r3, r3, #28
 8010c76:	d501      	bpl.n	8010c7c <_vfiprintf_r+0x3c>
 8010c78:	692b      	ldr	r3, [r5, #16]
 8010c7a:	b9eb      	cbnz	r3, 8010cb8 <_vfiprintf_r+0x78>
 8010c7c:	4629      	mov	r1, r5
 8010c7e:	4630      	mov	r0, r6
 8010c80:	f7fd fd66 	bl	800e750 <__swsetup_r>
 8010c84:	b1c0      	cbz	r0, 8010cb8 <_vfiprintf_r+0x78>
 8010c86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c88:	07dc      	lsls	r4, r3, #31
 8010c8a:	d50e      	bpl.n	8010caa <_vfiprintf_r+0x6a>
 8010c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c90:	b01d      	add	sp, #116	; 0x74
 8010c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c96:	4b7b      	ldr	r3, [pc, #492]	; (8010e84 <_vfiprintf_r+0x244>)
 8010c98:	429d      	cmp	r5, r3
 8010c9a:	d101      	bne.n	8010ca0 <_vfiprintf_r+0x60>
 8010c9c:	68b5      	ldr	r5, [r6, #8]
 8010c9e:	e7df      	b.n	8010c60 <_vfiprintf_r+0x20>
 8010ca0:	4b79      	ldr	r3, [pc, #484]	; (8010e88 <_vfiprintf_r+0x248>)
 8010ca2:	429d      	cmp	r5, r3
 8010ca4:	bf08      	it	eq
 8010ca6:	68f5      	ldreq	r5, [r6, #12]
 8010ca8:	e7da      	b.n	8010c60 <_vfiprintf_r+0x20>
 8010caa:	89ab      	ldrh	r3, [r5, #12]
 8010cac:	0598      	lsls	r0, r3, #22
 8010cae:	d4ed      	bmi.n	8010c8c <_vfiprintf_r+0x4c>
 8010cb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010cb2:	f7ff f963 	bl	800ff7c <__retarget_lock_release_recursive>
 8010cb6:	e7e9      	b.n	8010c8c <_vfiprintf_r+0x4c>
 8010cb8:	2300      	movs	r3, #0
 8010cba:	9309      	str	r3, [sp, #36]	; 0x24
 8010cbc:	2320      	movs	r3, #32
 8010cbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010cc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8010cc6:	2330      	movs	r3, #48	; 0x30
 8010cc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010e8c <_vfiprintf_r+0x24c>
 8010ccc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010cd0:	f04f 0901 	mov.w	r9, #1
 8010cd4:	4623      	mov	r3, r4
 8010cd6:	469a      	mov	sl, r3
 8010cd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cdc:	b10a      	cbz	r2, 8010ce2 <_vfiprintf_r+0xa2>
 8010cde:	2a25      	cmp	r2, #37	; 0x25
 8010ce0:	d1f9      	bne.n	8010cd6 <_vfiprintf_r+0x96>
 8010ce2:	ebba 0b04 	subs.w	fp, sl, r4
 8010ce6:	d00b      	beq.n	8010d00 <_vfiprintf_r+0xc0>
 8010ce8:	465b      	mov	r3, fp
 8010cea:	4622      	mov	r2, r4
 8010cec:	4629      	mov	r1, r5
 8010cee:	4630      	mov	r0, r6
 8010cf0:	f7ff ff93 	bl	8010c1a <__sfputs_r>
 8010cf4:	3001      	adds	r0, #1
 8010cf6:	f000 80aa 	beq.w	8010e4e <_vfiprintf_r+0x20e>
 8010cfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cfc:	445a      	add	r2, fp
 8010cfe:	9209      	str	r2, [sp, #36]	; 0x24
 8010d00:	f89a 3000 	ldrb.w	r3, [sl]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	f000 80a2 	beq.w	8010e4e <_vfiprintf_r+0x20e>
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8010d10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d14:	f10a 0a01 	add.w	sl, sl, #1
 8010d18:	9304      	str	r3, [sp, #16]
 8010d1a:	9307      	str	r3, [sp, #28]
 8010d1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d20:	931a      	str	r3, [sp, #104]	; 0x68
 8010d22:	4654      	mov	r4, sl
 8010d24:	2205      	movs	r2, #5
 8010d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d2a:	4858      	ldr	r0, [pc, #352]	; (8010e8c <_vfiprintf_r+0x24c>)
 8010d2c:	f7ef fa80 	bl	8000230 <memchr>
 8010d30:	9a04      	ldr	r2, [sp, #16]
 8010d32:	b9d8      	cbnz	r0, 8010d6c <_vfiprintf_r+0x12c>
 8010d34:	06d1      	lsls	r1, r2, #27
 8010d36:	bf44      	itt	mi
 8010d38:	2320      	movmi	r3, #32
 8010d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d3e:	0713      	lsls	r3, r2, #28
 8010d40:	bf44      	itt	mi
 8010d42:	232b      	movmi	r3, #43	; 0x2b
 8010d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d48:	f89a 3000 	ldrb.w	r3, [sl]
 8010d4c:	2b2a      	cmp	r3, #42	; 0x2a
 8010d4e:	d015      	beq.n	8010d7c <_vfiprintf_r+0x13c>
 8010d50:	9a07      	ldr	r2, [sp, #28]
 8010d52:	4654      	mov	r4, sl
 8010d54:	2000      	movs	r0, #0
 8010d56:	f04f 0c0a 	mov.w	ip, #10
 8010d5a:	4621      	mov	r1, r4
 8010d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d60:	3b30      	subs	r3, #48	; 0x30
 8010d62:	2b09      	cmp	r3, #9
 8010d64:	d94e      	bls.n	8010e04 <_vfiprintf_r+0x1c4>
 8010d66:	b1b0      	cbz	r0, 8010d96 <_vfiprintf_r+0x156>
 8010d68:	9207      	str	r2, [sp, #28]
 8010d6a:	e014      	b.n	8010d96 <_vfiprintf_r+0x156>
 8010d6c:	eba0 0308 	sub.w	r3, r0, r8
 8010d70:	fa09 f303 	lsl.w	r3, r9, r3
 8010d74:	4313      	orrs	r3, r2
 8010d76:	9304      	str	r3, [sp, #16]
 8010d78:	46a2      	mov	sl, r4
 8010d7a:	e7d2      	b.n	8010d22 <_vfiprintf_r+0xe2>
 8010d7c:	9b03      	ldr	r3, [sp, #12]
 8010d7e:	1d19      	adds	r1, r3, #4
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	9103      	str	r1, [sp, #12]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	bfbb      	ittet	lt
 8010d88:	425b      	neglt	r3, r3
 8010d8a:	f042 0202 	orrlt.w	r2, r2, #2
 8010d8e:	9307      	strge	r3, [sp, #28]
 8010d90:	9307      	strlt	r3, [sp, #28]
 8010d92:	bfb8      	it	lt
 8010d94:	9204      	strlt	r2, [sp, #16]
 8010d96:	7823      	ldrb	r3, [r4, #0]
 8010d98:	2b2e      	cmp	r3, #46	; 0x2e
 8010d9a:	d10c      	bne.n	8010db6 <_vfiprintf_r+0x176>
 8010d9c:	7863      	ldrb	r3, [r4, #1]
 8010d9e:	2b2a      	cmp	r3, #42	; 0x2a
 8010da0:	d135      	bne.n	8010e0e <_vfiprintf_r+0x1ce>
 8010da2:	9b03      	ldr	r3, [sp, #12]
 8010da4:	1d1a      	adds	r2, r3, #4
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	9203      	str	r2, [sp, #12]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	bfb8      	it	lt
 8010dae:	f04f 33ff 	movlt.w	r3, #4294967295
 8010db2:	3402      	adds	r4, #2
 8010db4:	9305      	str	r3, [sp, #20]
 8010db6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010e9c <_vfiprintf_r+0x25c>
 8010dba:	7821      	ldrb	r1, [r4, #0]
 8010dbc:	2203      	movs	r2, #3
 8010dbe:	4650      	mov	r0, sl
 8010dc0:	f7ef fa36 	bl	8000230 <memchr>
 8010dc4:	b140      	cbz	r0, 8010dd8 <_vfiprintf_r+0x198>
 8010dc6:	2340      	movs	r3, #64	; 0x40
 8010dc8:	eba0 000a 	sub.w	r0, r0, sl
 8010dcc:	fa03 f000 	lsl.w	r0, r3, r0
 8010dd0:	9b04      	ldr	r3, [sp, #16]
 8010dd2:	4303      	orrs	r3, r0
 8010dd4:	3401      	adds	r4, #1
 8010dd6:	9304      	str	r3, [sp, #16]
 8010dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ddc:	482c      	ldr	r0, [pc, #176]	; (8010e90 <_vfiprintf_r+0x250>)
 8010dde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010de2:	2206      	movs	r2, #6
 8010de4:	f7ef fa24 	bl	8000230 <memchr>
 8010de8:	2800      	cmp	r0, #0
 8010dea:	d03f      	beq.n	8010e6c <_vfiprintf_r+0x22c>
 8010dec:	4b29      	ldr	r3, [pc, #164]	; (8010e94 <_vfiprintf_r+0x254>)
 8010dee:	bb1b      	cbnz	r3, 8010e38 <_vfiprintf_r+0x1f8>
 8010df0:	9b03      	ldr	r3, [sp, #12]
 8010df2:	3307      	adds	r3, #7
 8010df4:	f023 0307 	bic.w	r3, r3, #7
 8010df8:	3308      	adds	r3, #8
 8010dfa:	9303      	str	r3, [sp, #12]
 8010dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dfe:	443b      	add	r3, r7
 8010e00:	9309      	str	r3, [sp, #36]	; 0x24
 8010e02:	e767      	b.n	8010cd4 <_vfiprintf_r+0x94>
 8010e04:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e08:	460c      	mov	r4, r1
 8010e0a:	2001      	movs	r0, #1
 8010e0c:	e7a5      	b.n	8010d5a <_vfiprintf_r+0x11a>
 8010e0e:	2300      	movs	r3, #0
 8010e10:	3401      	adds	r4, #1
 8010e12:	9305      	str	r3, [sp, #20]
 8010e14:	4619      	mov	r1, r3
 8010e16:	f04f 0c0a 	mov.w	ip, #10
 8010e1a:	4620      	mov	r0, r4
 8010e1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e20:	3a30      	subs	r2, #48	; 0x30
 8010e22:	2a09      	cmp	r2, #9
 8010e24:	d903      	bls.n	8010e2e <_vfiprintf_r+0x1ee>
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d0c5      	beq.n	8010db6 <_vfiprintf_r+0x176>
 8010e2a:	9105      	str	r1, [sp, #20]
 8010e2c:	e7c3      	b.n	8010db6 <_vfiprintf_r+0x176>
 8010e2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e32:	4604      	mov	r4, r0
 8010e34:	2301      	movs	r3, #1
 8010e36:	e7f0      	b.n	8010e1a <_vfiprintf_r+0x1da>
 8010e38:	ab03      	add	r3, sp, #12
 8010e3a:	9300      	str	r3, [sp, #0]
 8010e3c:	462a      	mov	r2, r5
 8010e3e:	4b16      	ldr	r3, [pc, #88]	; (8010e98 <_vfiprintf_r+0x258>)
 8010e40:	a904      	add	r1, sp, #16
 8010e42:	4630      	mov	r0, r6
 8010e44:	f7fc f920 	bl	800d088 <_printf_float>
 8010e48:	4607      	mov	r7, r0
 8010e4a:	1c78      	adds	r0, r7, #1
 8010e4c:	d1d6      	bne.n	8010dfc <_vfiprintf_r+0x1bc>
 8010e4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e50:	07d9      	lsls	r1, r3, #31
 8010e52:	d405      	bmi.n	8010e60 <_vfiprintf_r+0x220>
 8010e54:	89ab      	ldrh	r3, [r5, #12]
 8010e56:	059a      	lsls	r2, r3, #22
 8010e58:	d402      	bmi.n	8010e60 <_vfiprintf_r+0x220>
 8010e5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e5c:	f7ff f88e 	bl	800ff7c <__retarget_lock_release_recursive>
 8010e60:	89ab      	ldrh	r3, [r5, #12]
 8010e62:	065b      	lsls	r3, r3, #25
 8010e64:	f53f af12 	bmi.w	8010c8c <_vfiprintf_r+0x4c>
 8010e68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e6a:	e711      	b.n	8010c90 <_vfiprintf_r+0x50>
 8010e6c:	ab03      	add	r3, sp, #12
 8010e6e:	9300      	str	r3, [sp, #0]
 8010e70:	462a      	mov	r2, r5
 8010e72:	4b09      	ldr	r3, [pc, #36]	; (8010e98 <_vfiprintf_r+0x258>)
 8010e74:	a904      	add	r1, sp, #16
 8010e76:	4630      	mov	r0, r6
 8010e78:	f7fc fbaa 	bl	800d5d0 <_printf_i>
 8010e7c:	e7e4      	b.n	8010e48 <_vfiprintf_r+0x208>
 8010e7e:	bf00      	nop
 8010e80:	08012cdc 	.word	0x08012cdc
 8010e84:	08012cfc 	.word	0x08012cfc
 8010e88:	08012cbc 	.word	0x08012cbc
 8010e8c:	08012ef4 	.word	0x08012ef4
 8010e90:	08012efe 	.word	0x08012efe
 8010e94:	0800d089 	.word	0x0800d089
 8010e98:	08010c1b 	.word	0x08010c1b
 8010e9c:	08012efa 	.word	0x08012efa

08010ea0 <nan>:
 8010ea0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010ea8 <nan+0x8>
 8010ea4:	4770      	bx	lr
 8010ea6:	bf00      	nop
 8010ea8:	00000000 	.word	0x00000000
 8010eac:	7ff80000 	.word	0x7ff80000

08010eb0 <_sbrk_r>:
 8010eb0:	b538      	push	{r3, r4, r5, lr}
 8010eb2:	4d06      	ldr	r5, [pc, #24]	; (8010ecc <_sbrk_r+0x1c>)
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	4604      	mov	r4, r0
 8010eb8:	4608      	mov	r0, r1
 8010eba:	602b      	str	r3, [r5, #0]
 8010ebc:	f7f4 fbe4 	bl	8005688 <_sbrk>
 8010ec0:	1c43      	adds	r3, r0, #1
 8010ec2:	d102      	bne.n	8010eca <_sbrk_r+0x1a>
 8010ec4:	682b      	ldr	r3, [r5, #0]
 8010ec6:	b103      	cbz	r3, 8010eca <_sbrk_r+0x1a>
 8010ec8:	6023      	str	r3, [r4, #0]
 8010eca:	bd38      	pop	{r3, r4, r5, pc}
 8010ecc:	20005144 	.word	0x20005144

08010ed0 <nanf>:
 8010ed0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010ed8 <nanf+0x8>
 8010ed4:	4770      	bx	lr
 8010ed6:	bf00      	nop
 8010ed8:	7fc00000 	.word	0x7fc00000

08010edc <__sread>:
 8010edc:	b510      	push	{r4, lr}
 8010ede:	460c      	mov	r4, r1
 8010ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ee4:	f000 f8f0 	bl	80110c8 <_read_r>
 8010ee8:	2800      	cmp	r0, #0
 8010eea:	bfab      	itete	ge
 8010eec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010eee:	89a3      	ldrhlt	r3, [r4, #12]
 8010ef0:	181b      	addge	r3, r3, r0
 8010ef2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010ef6:	bfac      	ite	ge
 8010ef8:	6563      	strge	r3, [r4, #84]	; 0x54
 8010efa:	81a3      	strhlt	r3, [r4, #12]
 8010efc:	bd10      	pop	{r4, pc}

08010efe <__swrite>:
 8010efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f02:	461f      	mov	r7, r3
 8010f04:	898b      	ldrh	r3, [r1, #12]
 8010f06:	05db      	lsls	r3, r3, #23
 8010f08:	4605      	mov	r5, r0
 8010f0a:	460c      	mov	r4, r1
 8010f0c:	4616      	mov	r6, r2
 8010f0e:	d505      	bpl.n	8010f1c <__swrite+0x1e>
 8010f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f14:	2302      	movs	r3, #2
 8010f16:	2200      	movs	r2, #0
 8010f18:	f000 f8b8 	bl	801108c <_lseek_r>
 8010f1c:	89a3      	ldrh	r3, [r4, #12]
 8010f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010f26:	81a3      	strh	r3, [r4, #12]
 8010f28:	4632      	mov	r2, r6
 8010f2a:	463b      	mov	r3, r7
 8010f2c:	4628      	mov	r0, r5
 8010f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f32:	f000 b837 	b.w	8010fa4 <_write_r>

08010f36 <__sseek>:
 8010f36:	b510      	push	{r4, lr}
 8010f38:	460c      	mov	r4, r1
 8010f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f3e:	f000 f8a5 	bl	801108c <_lseek_r>
 8010f42:	1c43      	adds	r3, r0, #1
 8010f44:	89a3      	ldrh	r3, [r4, #12]
 8010f46:	bf15      	itete	ne
 8010f48:	6560      	strne	r0, [r4, #84]	; 0x54
 8010f4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010f4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010f52:	81a3      	strheq	r3, [r4, #12]
 8010f54:	bf18      	it	ne
 8010f56:	81a3      	strhne	r3, [r4, #12]
 8010f58:	bd10      	pop	{r4, pc}

08010f5a <__sclose>:
 8010f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f5e:	f000 b851 	b.w	8011004 <_close_r>

08010f62 <strncmp>:
 8010f62:	b510      	push	{r4, lr}
 8010f64:	b17a      	cbz	r2, 8010f86 <strncmp+0x24>
 8010f66:	4603      	mov	r3, r0
 8010f68:	3901      	subs	r1, #1
 8010f6a:	1884      	adds	r4, r0, r2
 8010f6c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010f70:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010f74:	4290      	cmp	r0, r2
 8010f76:	d101      	bne.n	8010f7c <strncmp+0x1a>
 8010f78:	42a3      	cmp	r3, r4
 8010f7a:	d101      	bne.n	8010f80 <strncmp+0x1e>
 8010f7c:	1a80      	subs	r0, r0, r2
 8010f7e:	bd10      	pop	{r4, pc}
 8010f80:	2800      	cmp	r0, #0
 8010f82:	d1f3      	bne.n	8010f6c <strncmp+0xa>
 8010f84:	e7fa      	b.n	8010f7c <strncmp+0x1a>
 8010f86:	4610      	mov	r0, r2
 8010f88:	e7f9      	b.n	8010f7e <strncmp+0x1c>

08010f8a <__ascii_wctomb>:
 8010f8a:	b149      	cbz	r1, 8010fa0 <__ascii_wctomb+0x16>
 8010f8c:	2aff      	cmp	r2, #255	; 0xff
 8010f8e:	bf85      	ittet	hi
 8010f90:	238a      	movhi	r3, #138	; 0x8a
 8010f92:	6003      	strhi	r3, [r0, #0]
 8010f94:	700a      	strbls	r2, [r1, #0]
 8010f96:	f04f 30ff 	movhi.w	r0, #4294967295
 8010f9a:	bf98      	it	ls
 8010f9c:	2001      	movls	r0, #1
 8010f9e:	4770      	bx	lr
 8010fa0:	4608      	mov	r0, r1
 8010fa2:	4770      	bx	lr

08010fa4 <_write_r>:
 8010fa4:	b538      	push	{r3, r4, r5, lr}
 8010fa6:	4d07      	ldr	r5, [pc, #28]	; (8010fc4 <_write_r+0x20>)
 8010fa8:	4604      	mov	r4, r0
 8010faa:	4608      	mov	r0, r1
 8010fac:	4611      	mov	r1, r2
 8010fae:	2200      	movs	r2, #0
 8010fb0:	602a      	str	r2, [r5, #0]
 8010fb2:	461a      	mov	r2, r3
 8010fb4:	f7f4 fb17 	bl	80055e6 <_write>
 8010fb8:	1c43      	adds	r3, r0, #1
 8010fba:	d102      	bne.n	8010fc2 <_write_r+0x1e>
 8010fbc:	682b      	ldr	r3, [r5, #0]
 8010fbe:	b103      	cbz	r3, 8010fc2 <_write_r+0x1e>
 8010fc0:	6023      	str	r3, [r4, #0]
 8010fc2:	bd38      	pop	{r3, r4, r5, pc}
 8010fc4:	20005144 	.word	0x20005144

08010fc8 <__assert_func>:
 8010fc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010fca:	4614      	mov	r4, r2
 8010fcc:	461a      	mov	r2, r3
 8010fce:	4b09      	ldr	r3, [pc, #36]	; (8010ff4 <__assert_func+0x2c>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	4605      	mov	r5, r0
 8010fd4:	68d8      	ldr	r0, [r3, #12]
 8010fd6:	b14c      	cbz	r4, 8010fec <__assert_func+0x24>
 8010fd8:	4b07      	ldr	r3, [pc, #28]	; (8010ff8 <__assert_func+0x30>)
 8010fda:	9100      	str	r1, [sp, #0]
 8010fdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010fe0:	4906      	ldr	r1, [pc, #24]	; (8010ffc <__assert_func+0x34>)
 8010fe2:	462b      	mov	r3, r5
 8010fe4:	f000 f81e 	bl	8011024 <fiprintf>
 8010fe8:	f000 f880 	bl	80110ec <abort>
 8010fec:	4b04      	ldr	r3, [pc, #16]	; (8011000 <__assert_func+0x38>)
 8010fee:	461c      	mov	r4, r3
 8010ff0:	e7f3      	b.n	8010fda <__assert_func+0x12>
 8010ff2:	bf00      	nop
 8010ff4:	2000002c 	.word	0x2000002c
 8010ff8:	08012f05 	.word	0x08012f05
 8010ffc:	08012f12 	.word	0x08012f12
 8011000:	08012f40 	.word	0x08012f40

08011004 <_close_r>:
 8011004:	b538      	push	{r3, r4, r5, lr}
 8011006:	4d06      	ldr	r5, [pc, #24]	; (8011020 <_close_r+0x1c>)
 8011008:	2300      	movs	r3, #0
 801100a:	4604      	mov	r4, r0
 801100c:	4608      	mov	r0, r1
 801100e:	602b      	str	r3, [r5, #0]
 8011010:	f7f4 fb05 	bl	800561e <_close>
 8011014:	1c43      	adds	r3, r0, #1
 8011016:	d102      	bne.n	801101e <_close_r+0x1a>
 8011018:	682b      	ldr	r3, [r5, #0]
 801101a:	b103      	cbz	r3, 801101e <_close_r+0x1a>
 801101c:	6023      	str	r3, [r4, #0]
 801101e:	bd38      	pop	{r3, r4, r5, pc}
 8011020:	20005144 	.word	0x20005144

08011024 <fiprintf>:
 8011024:	b40e      	push	{r1, r2, r3}
 8011026:	b503      	push	{r0, r1, lr}
 8011028:	4601      	mov	r1, r0
 801102a:	ab03      	add	r3, sp, #12
 801102c:	4805      	ldr	r0, [pc, #20]	; (8011044 <fiprintf+0x20>)
 801102e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011032:	6800      	ldr	r0, [r0, #0]
 8011034:	9301      	str	r3, [sp, #4]
 8011036:	f7ff fe03 	bl	8010c40 <_vfiprintf_r>
 801103a:	b002      	add	sp, #8
 801103c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011040:	b003      	add	sp, #12
 8011042:	4770      	bx	lr
 8011044:	2000002c 	.word	0x2000002c

08011048 <_fstat_r>:
 8011048:	b538      	push	{r3, r4, r5, lr}
 801104a:	4d07      	ldr	r5, [pc, #28]	; (8011068 <_fstat_r+0x20>)
 801104c:	2300      	movs	r3, #0
 801104e:	4604      	mov	r4, r0
 8011050:	4608      	mov	r0, r1
 8011052:	4611      	mov	r1, r2
 8011054:	602b      	str	r3, [r5, #0]
 8011056:	f7f4 faee 	bl	8005636 <_fstat>
 801105a:	1c43      	adds	r3, r0, #1
 801105c:	d102      	bne.n	8011064 <_fstat_r+0x1c>
 801105e:	682b      	ldr	r3, [r5, #0]
 8011060:	b103      	cbz	r3, 8011064 <_fstat_r+0x1c>
 8011062:	6023      	str	r3, [r4, #0]
 8011064:	bd38      	pop	{r3, r4, r5, pc}
 8011066:	bf00      	nop
 8011068:	20005144 	.word	0x20005144

0801106c <_isatty_r>:
 801106c:	b538      	push	{r3, r4, r5, lr}
 801106e:	4d06      	ldr	r5, [pc, #24]	; (8011088 <_isatty_r+0x1c>)
 8011070:	2300      	movs	r3, #0
 8011072:	4604      	mov	r4, r0
 8011074:	4608      	mov	r0, r1
 8011076:	602b      	str	r3, [r5, #0]
 8011078:	f7f4 faed 	bl	8005656 <_isatty>
 801107c:	1c43      	adds	r3, r0, #1
 801107e:	d102      	bne.n	8011086 <_isatty_r+0x1a>
 8011080:	682b      	ldr	r3, [r5, #0]
 8011082:	b103      	cbz	r3, 8011086 <_isatty_r+0x1a>
 8011084:	6023      	str	r3, [r4, #0]
 8011086:	bd38      	pop	{r3, r4, r5, pc}
 8011088:	20005144 	.word	0x20005144

0801108c <_lseek_r>:
 801108c:	b538      	push	{r3, r4, r5, lr}
 801108e:	4d07      	ldr	r5, [pc, #28]	; (80110ac <_lseek_r+0x20>)
 8011090:	4604      	mov	r4, r0
 8011092:	4608      	mov	r0, r1
 8011094:	4611      	mov	r1, r2
 8011096:	2200      	movs	r2, #0
 8011098:	602a      	str	r2, [r5, #0]
 801109a:	461a      	mov	r2, r3
 801109c:	f7f4 fae6 	bl	800566c <_lseek>
 80110a0:	1c43      	adds	r3, r0, #1
 80110a2:	d102      	bne.n	80110aa <_lseek_r+0x1e>
 80110a4:	682b      	ldr	r3, [r5, #0]
 80110a6:	b103      	cbz	r3, 80110aa <_lseek_r+0x1e>
 80110a8:	6023      	str	r3, [r4, #0]
 80110aa:	bd38      	pop	{r3, r4, r5, pc}
 80110ac:	20005144 	.word	0x20005144

080110b0 <__malloc_lock>:
 80110b0:	4801      	ldr	r0, [pc, #4]	; (80110b8 <__malloc_lock+0x8>)
 80110b2:	f7fe bf62 	b.w	800ff7a <__retarget_lock_acquire_recursive>
 80110b6:	bf00      	nop
 80110b8:	20005138 	.word	0x20005138

080110bc <__malloc_unlock>:
 80110bc:	4801      	ldr	r0, [pc, #4]	; (80110c4 <__malloc_unlock+0x8>)
 80110be:	f7fe bf5d 	b.w	800ff7c <__retarget_lock_release_recursive>
 80110c2:	bf00      	nop
 80110c4:	20005138 	.word	0x20005138

080110c8 <_read_r>:
 80110c8:	b538      	push	{r3, r4, r5, lr}
 80110ca:	4d07      	ldr	r5, [pc, #28]	; (80110e8 <_read_r+0x20>)
 80110cc:	4604      	mov	r4, r0
 80110ce:	4608      	mov	r0, r1
 80110d0:	4611      	mov	r1, r2
 80110d2:	2200      	movs	r2, #0
 80110d4:	602a      	str	r2, [r5, #0]
 80110d6:	461a      	mov	r2, r3
 80110d8:	f7f4 fa68 	bl	80055ac <_read>
 80110dc:	1c43      	adds	r3, r0, #1
 80110de:	d102      	bne.n	80110e6 <_read_r+0x1e>
 80110e0:	682b      	ldr	r3, [r5, #0]
 80110e2:	b103      	cbz	r3, 80110e6 <_read_r+0x1e>
 80110e4:	6023      	str	r3, [r4, #0]
 80110e6:	bd38      	pop	{r3, r4, r5, pc}
 80110e8:	20005144 	.word	0x20005144

080110ec <abort>:
 80110ec:	b508      	push	{r3, lr}
 80110ee:	2006      	movs	r0, #6
 80110f0:	f000 f82c 	bl	801114c <raise>
 80110f4:	2001      	movs	r0, #1
 80110f6:	f7f4 fa4f 	bl	8005598 <_exit>

080110fa <_raise_r>:
 80110fa:	291f      	cmp	r1, #31
 80110fc:	b538      	push	{r3, r4, r5, lr}
 80110fe:	4604      	mov	r4, r0
 8011100:	460d      	mov	r5, r1
 8011102:	d904      	bls.n	801110e <_raise_r+0x14>
 8011104:	2316      	movs	r3, #22
 8011106:	6003      	str	r3, [r0, #0]
 8011108:	f04f 30ff 	mov.w	r0, #4294967295
 801110c:	bd38      	pop	{r3, r4, r5, pc}
 801110e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011110:	b112      	cbz	r2, 8011118 <_raise_r+0x1e>
 8011112:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011116:	b94b      	cbnz	r3, 801112c <_raise_r+0x32>
 8011118:	4620      	mov	r0, r4
 801111a:	f000 f831 	bl	8011180 <_getpid_r>
 801111e:	462a      	mov	r2, r5
 8011120:	4601      	mov	r1, r0
 8011122:	4620      	mov	r0, r4
 8011124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011128:	f000 b818 	b.w	801115c <_kill_r>
 801112c:	2b01      	cmp	r3, #1
 801112e:	d00a      	beq.n	8011146 <_raise_r+0x4c>
 8011130:	1c59      	adds	r1, r3, #1
 8011132:	d103      	bne.n	801113c <_raise_r+0x42>
 8011134:	2316      	movs	r3, #22
 8011136:	6003      	str	r3, [r0, #0]
 8011138:	2001      	movs	r0, #1
 801113a:	e7e7      	b.n	801110c <_raise_r+0x12>
 801113c:	2400      	movs	r4, #0
 801113e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011142:	4628      	mov	r0, r5
 8011144:	4798      	blx	r3
 8011146:	2000      	movs	r0, #0
 8011148:	e7e0      	b.n	801110c <_raise_r+0x12>
	...

0801114c <raise>:
 801114c:	4b02      	ldr	r3, [pc, #8]	; (8011158 <raise+0xc>)
 801114e:	4601      	mov	r1, r0
 8011150:	6818      	ldr	r0, [r3, #0]
 8011152:	f7ff bfd2 	b.w	80110fa <_raise_r>
 8011156:	bf00      	nop
 8011158:	2000002c 	.word	0x2000002c

0801115c <_kill_r>:
 801115c:	b538      	push	{r3, r4, r5, lr}
 801115e:	4d07      	ldr	r5, [pc, #28]	; (801117c <_kill_r+0x20>)
 8011160:	2300      	movs	r3, #0
 8011162:	4604      	mov	r4, r0
 8011164:	4608      	mov	r0, r1
 8011166:	4611      	mov	r1, r2
 8011168:	602b      	str	r3, [r5, #0]
 801116a:	f7f4 fa05 	bl	8005578 <_kill>
 801116e:	1c43      	adds	r3, r0, #1
 8011170:	d102      	bne.n	8011178 <_kill_r+0x1c>
 8011172:	682b      	ldr	r3, [r5, #0]
 8011174:	b103      	cbz	r3, 8011178 <_kill_r+0x1c>
 8011176:	6023      	str	r3, [r4, #0]
 8011178:	bd38      	pop	{r3, r4, r5, pc}
 801117a:	bf00      	nop
 801117c:	20005144 	.word	0x20005144

08011180 <_getpid_r>:
 8011180:	f7f4 b9f2 	b.w	8005568 <_getpid>

08011184 <round>:
 8011184:	ec51 0b10 	vmov	r0, r1, d0
 8011188:	b570      	push	{r4, r5, r6, lr}
 801118a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801118e:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8011192:	2c13      	cmp	r4, #19
 8011194:	ee10 2a10 	vmov	r2, s0
 8011198:	460b      	mov	r3, r1
 801119a:	dc19      	bgt.n	80111d0 <round+0x4c>
 801119c:	2c00      	cmp	r4, #0
 801119e:	da09      	bge.n	80111b4 <round+0x30>
 80111a0:	3401      	adds	r4, #1
 80111a2:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80111a6:	d103      	bne.n	80111b0 <round+0x2c>
 80111a8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80111ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80111b0:	2200      	movs	r2, #0
 80111b2:	e028      	b.n	8011206 <round+0x82>
 80111b4:	4d15      	ldr	r5, [pc, #84]	; (801120c <round+0x88>)
 80111b6:	4125      	asrs	r5, r4
 80111b8:	ea01 0605 	and.w	r6, r1, r5
 80111bc:	4332      	orrs	r2, r6
 80111be:	d00e      	beq.n	80111de <round+0x5a>
 80111c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80111c4:	fa42 f404 	asr.w	r4, r2, r4
 80111c8:	4423      	add	r3, r4
 80111ca:	ea23 0305 	bic.w	r3, r3, r5
 80111ce:	e7ef      	b.n	80111b0 <round+0x2c>
 80111d0:	2c33      	cmp	r4, #51	; 0x33
 80111d2:	dd07      	ble.n	80111e4 <round+0x60>
 80111d4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80111d8:	d101      	bne.n	80111de <round+0x5a>
 80111da:	f7ef f87f 	bl	80002dc <__adddf3>
 80111de:	ec41 0b10 	vmov	d0, r0, r1
 80111e2:	bd70      	pop	{r4, r5, r6, pc}
 80111e4:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80111e8:	f04f 35ff 	mov.w	r5, #4294967295
 80111ec:	40f5      	lsrs	r5, r6
 80111ee:	4228      	tst	r0, r5
 80111f0:	d0f5      	beq.n	80111de <round+0x5a>
 80111f2:	2101      	movs	r1, #1
 80111f4:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80111f8:	fa01 f404 	lsl.w	r4, r1, r4
 80111fc:	1912      	adds	r2, r2, r4
 80111fe:	bf28      	it	cs
 8011200:	185b      	addcs	r3, r3, r1
 8011202:	ea22 0205 	bic.w	r2, r2, r5
 8011206:	4619      	mov	r1, r3
 8011208:	4610      	mov	r0, r2
 801120a:	e7e8      	b.n	80111de <round+0x5a>
 801120c:	000fffff 	.word	0x000fffff

08011210 <fmaxf>:
 8011210:	b508      	push	{r3, lr}
 8011212:	ed2d 8b02 	vpush	{d8}
 8011216:	eeb0 8a40 	vmov.f32	s16, s0
 801121a:	eef0 8a60 	vmov.f32	s17, s1
 801121e:	f000 f82d 	bl	801127c <__fpclassifyf>
 8011222:	b148      	cbz	r0, 8011238 <fmaxf+0x28>
 8011224:	eeb0 0a68 	vmov.f32	s0, s17
 8011228:	f000 f828 	bl	801127c <__fpclassifyf>
 801122c:	b130      	cbz	r0, 801123c <fmaxf+0x2c>
 801122e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011236:	dc01      	bgt.n	801123c <fmaxf+0x2c>
 8011238:	eeb0 8a68 	vmov.f32	s16, s17
 801123c:	eeb0 0a48 	vmov.f32	s0, s16
 8011240:	ecbd 8b02 	vpop	{d8}
 8011244:	bd08      	pop	{r3, pc}

08011246 <fminf>:
 8011246:	b508      	push	{r3, lr}
 8011248:	ed2d 8b02 	vpush	{d8}
 801124c:	eeb0 8a40 	vmov.f32	s16, s0
 8011250:	eef0 8a60 	vmov.f32	s17, s1
 8011254:	f000 f812 	bl	801127c <__fpclassifyf>
 8011258:	b148      	cbz	r0, 801126e <fminf+0x28>
 801125a:	eeb0 0a68 	vmov.f32	s0, s17
 801125e:	f000 f80d 	bl	801127c <__fpclassifyf>
 8011262:	b130      	cbz	r0, 8011272 <fminf+0x2c>
 8011264:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801126c:	d401      	bmi.n	8011272 <fminf+0x2c>
 801126e:	eeb0 8a68 	vmov.f32	s16, s17
 8011272:	eeb0 0a48 	vmov.f32	s0, s16
 8011276:	ecbd 8b02 	vpop	{d8}
 801127a:	bd08      	pop	{r3, pc}

0801127c <__fpclassifyf>:
 801127c:	ee10 3a10 	vmov	r3, s0
 8011280:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8011284:	d00d      	beq.n	80112a2 <__fpclassifyf+0x26>
 8011286:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 801128a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801128e:	d30a      	bcc.n	80112a6 <__fpclassifyf+0x2a>
 8011290:	4b07      	ldr	r3, [pc, #28]	; (80112b0 <__fpclassifyf+0x34>)
 8011292:	1e42      	subs	r2, r0, #1
 8011294:	429a      	cmp	r2, r3
 8011296:	d908      	bls.n	80112aa <__fpclassifyf+0x2e>
 8011298:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 801129c:	4258      	negs	r0, r3
 801129e:	4158      	adcs	r0, r3
 80112a0:	4770      	bx	lr
 80112a2:	2002      	movs	r0, #2
 80112a4:	4770      	bx	lr
 80112a6:	2004      	movs	r0, #4
 80112a8:	4770      	bx	lr
 80112aa:	2003      	movs	r0, #3
 80112ac:	4770      	bx	lr
 80112ae:	bf00      	nop
 80112b0:	007ffffe 	.word	0x007ffffe
 80112b4:	00000000 	.word	0x00000000

080112b8 <exp>:
 80112b8:	b538      	push	{r3, r4, r5, lr}
 80112ba:	ed2d 8b02 	vpush	{d8}
 80112be:	ec55 4b10 	vmov	r4, r5, d0
 80112c2:	f000 f8ad 	bl	8011420 <__ieee754_exp>
 80112c6:	eeb0 8a40 	vmov.f32	s16, s0
 80112ca:	eef0 8a60 	vmov.f32	s17, s1
 80112ce:	ec45 4b10 	vmov	d0, r4, r5
 80112d2:	f000 fbcc 	bl	8011a6e <finite>
 80112d6:	b168      	cbz	r0, 80112f4 <exp+0x3c>
 80112d8:	a317      	add	r3, pc, #92	; (adr r3, 8011338 <exp+0x80>)
 80112da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112de:	4620      	mov	r0, r4
 80112e0:	4629      	mov	r1, r5
 80112e2:	f7ef fc41 	bl	8000b68 <__aeabi_dcmpgt>
 80112e6:	b160      	cbz	r0, 8011302 <exp+0x4a>
 80112e8:	f7fb fdd4 	bl	800ce94 <__errno>
 80112ec:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8011328 <exp+0x70>
 80112f0:	2322      	movs	r3, #34	; 0x22
 80112f2:	6003      	str	r3, [r0, #0]
 80112f4:	eeb0 0a48 	vmov.f32	s0, s16
 80112f8:	eef0 0a68 	vmov.f32	s1, s17
 80112fc:	ecbd 8b02 	vpop	{d8}
 8011300:	bd38      	pop	{r3, r4, r5, pc}
 8011302:	a30f      	add	r3, pc, #60	; (adr r3, 8011340 <exp+0x88>)
 8011304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011308:	4620      	mov	r0, r4
 801130a:	4629      	mov	r1, r5
 801130c:	f7ef fc0e 	bl	8000b2c <__aeabi_dcmplt>
 8011310:	2800      	cmp	r0, #0
 8011312:	d0ef      	beq.n	80112f4 <exp+0x3c>
 8011314:	f7fb fdbe 	bl	800ce94 <__errno>
 8011318:	2322      	movs	r3, #34	; 0x22
 801131a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8011330 <exp+0x78>
 801131e:	6003      	str	r3, [r0, #0]
 8011320:	e7e8      	b.n	80112f4 <exp+0x3c>
 8011322:	bf00      	nop
 8011324:	f3af 8000 	nop.w
 8011328:	00000000 	.word	0x00000000
 801132c:	7ff00000 	.word	0x7ff00000
	...
 8011338:	fefa39ef 	.word	0xfefa39ef
 801133c:	40862e42 	.word	0x40862e42
 8011340:	d52d3051 	.word	0xd52d3051
 8011344:	c0874910 	.word	0xc0874910

08011348 <fmodf>:
 8011348:	b508      	push	{r3, lr}
 801134a:	ed2d 8b02 	vpush	{d8}
 801134e:	eef0 8a40 	vmov.f32	s17, s0
 8011352:	eeb0 8a60 	vmov.f32	s16, s1
 8011356:	f000 f9e5 	bl	8011724 <__ieee754_fmodf>
 801135a:	eef4 8a48 	vcmp.f32	s17, s16
 801135e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011362:	d60c      	bvs.n	801137e <fmodf+0x36>
 8011364:	eddf 8a07 	vldr	s17, [pc, #28]	; 8011384 <fmodf+0x3c>
 8011368:	eeb4 8a68 	vcmp.f32	s16, s17
 801136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011370:	d105      	bne.n	801137e <fmodf+0x36>
 8011372:	f7fb fd8f 	bl	800ce94 <__errno>
 8011376:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801137a:	2321      	movs	r3, #33	; 0x21
 801137c:	6003      	str	r3, [r0, #0]
 801137e:	ecbd 8b02 	vpop	{d8}
 8011382:	bd08      	pop	{r3, pc}
 8011384:	00000000 	.word	0x00000000

08011388 <logf>:
 8011388:	b508      	push	{r3, lr}
 801138a:	ed2d 8b02 	vpush	{d8}
 801138e:	eeb0 8a40 	vmov.f32	s16, s0
 8011392:	f000 fa49 	bl	8011828 <__ieee754_logf>
 8011396:	eeb4 8a48 	vcmp.f32	s16, s16
 801139a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801139e:	d60f      	bvs.n	80113c0 <logf+0x38>
 80113a0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80113a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113a8:	dc0a      	bgt.n	80113c0 <logf+0x38>
 80113aa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80113ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113b2:	d108      	bne.n	80113c6 <logf+0x3e>
 80113b4:	f7fb fd6e 	bl	800ce94 <__errno>
 80113b8:	2322      	movs	r3, #34	; 0x22
 80113ba:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80113dc <logf+0x54>
 80113be:	6003      	str	r3, [r0, #0]
 80113c0:	ecbd 8b02 	vpop	{d8}
 80113c4:	bd08      	pop	{r3, pc}
 80113c6:	f7fb fd65 	bl	800ce94 <__errno>
 80113ca:	ecbd 8b02 	vpop	{d8}
 80113ce:	2321      	movs	r3, #33	; 0x21
 80113d0:	6003      	str	r3, [r0, #0]
 80113d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80113d6:	4802      	ldr	r0, [pc, #8]	; (80113e0 <logf+0x58>)
 80113d8:	f7ff bd7a 	b.w	8010ed0 <nanf>
 80113dc:	ff800000 	.word	0xff800000
 80113e0:	08012f40 	.word	0x08012f40

080113e4 <sqrtf>:
 80113e4:	b508      	push	{r3, lr}
 80113e6:	ed2d 8b02 	vpush	{d8}
 80113ea:	eeb0 8a40 	vmov.f32	s16, s0
 80113ee:	f000 fb0b 	bl	8011a08 <__ieee754_sqrtf>
 80113f2:	eeb4 8a48 	vcmp.f32	s16, s16
 80113f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113fa:	d60c      	bvs.n	8011416 <sqrtf+0x32>
 80113fc:	eddf 8a07 	vldr	s17, [pc, #28]	; 801141c <sqrtf+0x38>
 8011400:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011408:	d505      	bpl.n	8011416 <sqrtf+0x32>
 801140a:	f7fb fd43 	bl	800ce94 <__errno>
 801140e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011412:	2321      	movs	r3, #33	; 0x21
 8011414:	6003      	str	r3, [r0, #0]
 8011416:	ecbd 8b02 	vpop	{d8}
 801141a:	bd08      	pop	{r3, pc}
 801141c:	00000000 	.word	0x00000000

08011420 <__ieee754_exp>:
 8011420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011424:	ec55 4b10 	vmov	r4, r5, d0
 8011428:	49b5      	ldr	r1, [pc, #724]	; (8011700 <__ieee754_exp+0x2e0>)
 801142a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801142e:	428b      	cmp	r3, r1
 8011430:	ed2d 8b04 	vpush	{d8-d9}
 8011434:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8011438:	d93d      	bls.n	80114b6 <__ieee754_exp+0x96>
 801143a:	49b2      	ldr	r1, [pc, #712]	; (8011704 <__ieee754_exp+0x2e4>)
 801143c:	428b      	cmp	r3, r1
 801143e:	d918      	bls.n	8011472 <__ieee754_exp+0x52>
 8011440:	ee10 3a10 	vmov	r3, s0
 8011444:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8011448:	4313      	orrs	r3, r2
 801144a:	d009      	beq.n	8011460 <__ieee754_exp+0x40>
 801144c:	ee10 2a10 	vmov	r2, s0
 8011450:	462b      	mov	r3, r5
 8011452:	4620      	mov	r0, r4
 8011454:	4629      	mov	r1, r5
 8011456:	f7ee ff41 	bl	80002dc <__adddf3>
 801145a:	4604      	mov	r4, r0
 801145c:	460d      	mov	r5, r1
 801145e:	e002      	b.n	8011466 <__ieee754_exp+0x46>
 8011460:	b10e      	cbz	r6, 8011466 <__ieee754_exp+0x46>
 8011462:	2400      	movs	r4, #0
 8011464:	2500      	movs	r5, #0
 8011466:	ecbd 8b04 	vpop	{d8-d9}
 801146a:	ec45 4b10 	vmov	d0, r4, r5
 801146e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011472:	a38d      	add	r3, pc, #564	; (adr r3, 80116a8 <__ieee754_exp+0x288>)
 8011474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011478:	ee10 0a10 	vmov	r0, s0
 801147c:	4629      	mov	r1, r5
 801147e:	f7ef fb73 	bl	8000b68 <__aeabi_dcmpgt>
 8011482:	4607      	mov	r7, r0
 8011484:	b130      	cbz	r0, 8011494 <__ieee754_exp+0x74>
 8011486:	ecbd 8b04 	vpop	{d8-d9}
 801148a:	2000      	movs	r0, #0
 801148c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011490:	f000 bae4 	b.w	8011a5c <__math_oflow>
 8011494:	a386      	add	r3, pc, #536	; (adr r3, 80116b0 <__ieee754_exp+0x290>)
 8011496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801149a:	4620      	mov	r0, r4
 801149c:	4629      	mov	r1, r5
 801149e:	f7ef fb45 	bl	8000b2c <__aeabi_dcmplt>
 80114a2:	2800      	cmp	r0, #0
 80114a4:	f000 808b 	beq.w	80115be <__ieee754_exp+0x19e>
 80114a8:	ecbd 8b04 	vpop	{d8-d9}
 80114ac:	4638      	mov	r0, r7
 80114ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114b2:	f000 baca 	b.w	8011a4a <__math_uflow>
 80114b6:	4a94      	ldr	r2, [pc, #592]	; (8011708 <__ieee754_exp+0x2e8>)
 80114b8:	4293      	cmp	r3, r2
 80114ba:	f240 80ac 	bls.w	8011616 <__ieee754_exp+0x1f6>
 80114be:	4a93      	ldr	r2, [pc, #588]	; (801170c <__ieee754_exp+0x2ec>)
 80114c0:	4293      	cmp	r3, r2
 80114c2:	d87c      	bhi.n	80115be <__ieee754_exp+0x19e>
 80114c4:	4b92      	ldr	r3, [pc, #584]	; (8011710 <__ieee754_exp+0x2f0>)
 80114c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80114ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ce:	ee10 0a10 	vmov	r0, s0
 80114d2:	4629      	mov	r1, r5
 80114d4:	f7ee ff00 	bl	80002d8 <__aeabi_dsub>
 80114d8:	4b8e      	ldr	r3, [pc, #568]	; (8011714 <__ieee754_exp+0x2f4>)
 80114da:	00f7      	lsls	r7, r6, #3
 80114dc:	443b      	add	r3, r7
 80114de:	ed93 7b00 	vldr	d7, [r3]
 80114e2:	f1c6 0a01 	rsb	sl, r6, #1
 80114e6:	4680      	mov	r8, r0
 80114e8:	4689      	mov	r9, r1
 80114ea:	ebaa 0a06 	sub.w	sl, sl, r6
 80114ee:	eeb0 8a47 	vmov.f32	s16, s14
 80114f2:	eef0 8a67 	vmov.f32	s17, s15
 80114f6:	ec53 2b18 	vmov	r2, r3, d8
 80114fa:	4640      	mov	r0, r8
 80114fc:	4649      	mov	r1, r9
 80114fe:	f7ee feeb 	bl	80002d8 <__aeabi_dsub>
 8011502:	4604      	mov	r4, r0
 8011504:	460d      	mov	r5, r1
 8011506:	4622      	mov	r2, r4
 8011508:	462b      	mov	r3, r5
 801150a:	4620      	mov	r0, r4
 801150c:	4629      	mov	r1, r5
 801150e:	f7ef f89b 	bl	8000648 <__aeabi_dmul>
 8011512:	a369      	add	r3, pc, #420	; (adr r3, 80116b8 <__ieee754_exp+0x298>)
 8011514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011518:	4606      	mov	r6, r0
 801151a:	460f      	mov	r7, r1
 801151c:	f7ef f894 	bl	8000648 <__aeabi_dmul>
 8011520:	a367      	add	r3, pc, #412	; (adr r3, 80116c0 <__ieee754_exp+0x2a0>)
 8011522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011526:	f7ee fed7 	bl	80002d8 <__aeabi_dsub>
 801152a:	4632      	mov	r2, r6
 801152c:	463b      	mov	r3, r7
 801152e:	f7ef f88b 	bl	8000648 <__aeabi_dmul>
 8011532:	a365      	add	r3, pc, #404	; (adr r3, 80116c8 <__ieee754_exp+0x2a8>)
 8011534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011538:	f7ee fed0 	bl	80002dc <__adddf3>
 801153c:	4632      	mov	r2, r6
 801153e:	463b      	mov	r3, r7
 8011540:	f7ef f882 	bl	8000648 <__aeabi_dmul>
 8011544:	a362      	add	r3, pc, #392	; (adr r3, 80116d0 <__ieee754_exp+0x2b0>)
 8011546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801154a:	f7ee fec5 	bl	80002d8 <__aeabi_dsub>
 801154e:	4632      	mov	r2, r6
 8011550:	463b      	mov	r3, r7
 8011552:	f7ef f879 	bl	8000648 <__aeabi_dmul>
 8011556:	a360      	add	r3, pc, #384	; (adr r3, 80116d8 <__ieee754_exp+0x2b8>)
 8011558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801155c:	f7ee febe 	bl	80002dc <__adddf3>
 8011560:	4632      	mov	r2, r6
 8011562:	463b      	mov	r3, r7
 8011564:	f7ef f870 	bl	8000648 <__aeabi_dmul>
 8011568:	4602      	mov	r2, r0
 801156a:	460b      	mov	r3, r1
 801156c:	4620      	mov	r0, r4
 801156e:	4629      	mov	r1, r5
 8011570:	f7ee feb2 	bl	80002d8 <__aeabi_dsub>
 8011574:	4602      	mov	r2, r0
 8011576:	460b      	mov	r3, r1
 8011578:	4606      	mov	r6, r0
 801157a:	460f      	mov	r7, r1
 801157c:	4620      	mov	r0, r4
 801157e:	4629      	mov	r1, r5
 8011580:	f7ef f862 	bl	8000648 <__aeabi_dmul>
 8011584:	ec41 0b19 	vmov	d9, r0, r1
 8011588:	f1ba 0f00 	cmp.w	sl, #0
 801158c:	d15d      	bne.n	801164a <__ieee754_exp+0x22a>
 801158e:	2200      	movs	r2, #0
 8011590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011594:	4630      	mov	r0, r6
 8011596:	4639      	mov	r1, r7
 8011598:	f7ee fe9e 	bl	80002d8 <__aeabi_dsub>
 801159c:	4602      	mov	r2, r0
 801159e:	460b      	mov	r3, r1
 80115a0:	ec51 0b19 	vmov	r0, r1, d9
 80115a4:	f7ef f97a 	bl	800089c <__aeabi_ddiv>
 80115a8:	4622      	mov	r2, r4
 80115aa:	462b      	mov	r3, r5
 80115ac:	f7ee fe94 	bl	80002d8 <__aeabi_dsub>
 80115b0:	4602      	mov	r2, r0
 80115b2:	460b      	mov	r3, r1
 80115b4:	2000      	movs	r0, #0
 80115b6:	4958      	ldr	r1, [pc, #352]	; (8011718 <__ieee754_exp+0x2f8>)
 80115b8:	f7ee fe8e 	bl	80002d8 <__aeabi_dsub>
 80115bc:	e74d      	b.n	801145a <__ieee754_exp+0x3a>
 80115be:	4857      	ldr	r0, [pc, #348]	; (801171c <__ieee754_exp+0x2fc>)
 80115c0:	a347      	add	r3, pc, #284	; (adr r3, 80116e0 <__ieee754_exp+0x2c0>)
 80115c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115c6:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80115ca:	4629      	mov	r1, r5
 80115cc:	4620      	mov	r0, r4
 80115ce:	f7ef f83b 	bl	8000648 <__aeabi_dmul>
 80115d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80115d6:	f7ee fe81 	bl	80002dc <__adddf3>
 80115da:	f7ef fae5 	bl	8000ba8 <__aeabi_d2iz>
 80115de:	4682      	mov	sl, r0
 80115e0:	f7ee ffc8 	bl	8000574 <__aeabi_i2d>
 80115e4:	a340      	add	r3, pc, #256	; (adr r3, 80116e8 <__ieee754_exp+0x2c8>)
 80115e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ea:	4606      	mov	r6, r0
 80115ec:	460f      	mov	r7, r1
 80115ee:	f7ef f82b 	bl	8000648 <__aeabi_dmul>
 80115f2:	4602      	mov	r2, r0
 80115f4:	460b      	mov	r3, r1
 80115f6:	4620      	mov	r0, r4
 80115f8:	4629      	mov	r1, r5
 80115fa:	f7ee fe6d 	bl	80002d8 <__aeabi_dsub>
 80115fe:	a33c      	add	r3, pc, #240	; (adr r3, 80116f0 <__ieee754_exp+0x2d0>)
 8011600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011604:	4680      	mov	r8, r0
 8011606:	4689      	mov	r9, r1
 8011608:	4630      	mov	r0, r6
 801160a:	4639      	mov	r1, r7
 801160c:	f7ef f81c 	bl	8000648 <__aeabi_dmul>
 8011610:	ec41 0b18 	vmov	d8, r0, r1
 8011614:	e76f      	b.n	80114f6 <__ieee754_exp+0xd6>
 8011616:	4a42      	ldr	r2, [pc, #264]	; (8011720 <__ieee754_exp+0x300>)
 8011618:	4293      	cmp	r3, r2
 801161a:	d811      	bhi.n	8011640 <__ieee754_exp+0x220>
 801161c:	a336      	add	r3, pc, #216	; (adr r3, 80116f8 <__ieee754_exp+0x2d8>)
 801161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011622:	ee10 0a10 	vmov	r0, s0
 8011626:	4629      	mov	r1, r5
 8011628:	f7ee fe58 	bl	80002dc <__adddf3>
 801162c:	4b3a      	ldr	r3, [pc, #232]	; (8011718 <__ieee754_exp+0x2f8>)
 801162e:	2200      	movs	r2, #0
 8011630:	f7ef fa9a 	bl	8000b68 <__aeabi_dcmpgt>
 8011634:	b138      	cbz	r0, 8011646 <__ieee754_exp+0x226>
 8011636:	4b38      	ldr	r3, [pc, #224]	; (8011718 <__ieee754_exp+0x2f8>)
 8011638:	2200      	movs	r2, #0
 801163a:	4620      	mov	r0, r4
 801163c:	4629      	mov	r1, r5
 801163e:	e70a      	b.n	8011456 <__ieee754_exp+0x36>
 8011640:	f04f 0a00 	mov.w	sl, #0
 8011644:	e75f      	b.n	8011506 <__ieee754_exp+0xe6>
 8011646:	4682      	mov	sl, r0
 8011648:	e75d      	b.n	8011506 <__ieee754_exp+0xe6>
 801164a:	4632      	mov	r2, r6
 801164c:	463b      	mov	r3, r7
 801164e:	2000      	movs	r0, #0
 8011650:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8011654:	f7ee fe40 	bl	80002d8 <__aeabi_dsub>
 8011658:	4602      	mov	r2, r0
 801165a:	460b      	mov	r3, r1
 801165c:	ec51 0b19 	vmov	r0, r1, d9
 8011660:	f7ef f91c 	bl	800089c <__aeabi_ddiv>
 8011664:	4602      	mov	r2, r0
 8011666:	460b      	mov	r3, r1
 8011668:	ec51 0b18 	vmov	r0, r1, d8
 801166c:	f7ee fe34 	bl	80002d8 <__aeabi_dsub>
 8011670:	4642      	mov	r2, r8
 8011672:	464b      	mov	r3, r9
 8011674:	f7ee fe30 	bl	80002d8 <__aeabi_dsub>
 8011678:	4602      	mov	r2, r0
 801167a:	460b      	mov	r3, r1
 801167c:	2000      	movs	r0, #0
 801167e:	4926      	ldr	r1, [pc, #152]	; (8011718 <__ieee754_exp+0x2f8>)
 8011680:	f7ee fe2a 	bl	80002d8 <__aeabi_dsub>
 8011684:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8011688:	4592      	cmp	sl, r2
 801168a:	db02      	blt.n	8011692 <__ieee754_exp+0x272>
 801168c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8011690:	e6e3      	b.n	801145a <__ieee754_exp+0x3a>
 8011692:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8011696:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801169a:	2200      	movs	r2, #0
 801169c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80116a0:	f7ee ffd2 	bl	8000648 <__aeabi_dmul>
 80116a4:	e6d9      	b.n	801145a <__ieee754_exp+0x3a>
 80116a6:	bf00      	nop
 80116a8:	fefa39ef 	.word	0xfefa39ef
 80116ac:	40862e42 	.word	0x40862e42
 80116b0:	d52d3051 	.word	0xd52d3051
 80116b4:	c0874910 	.word	0xc0874910
 80116b8:	72bea4d0 	.word	0x72bea4d0
 80116bc:	3e663769 	.word	0x3e663769
 80116c0:	c5d26bf1 	.word	0xc5d26bf1
 80116c4:	3ebbbd41 	.word	0x3ebbbd41
 80116c8:	af25de2c 	.word	0xaf25de2c
 80116cc:	3f11566a 	.word	0x3f11566a
 80116d0:	16bebd93 	.word	0x16bebd93
 80116d4:	3f66c16c 	.word	0x3f66c16c
 80116d8:	5555553e 	.word	0x5555553e
 80116dc:	3fc55555 	.word	0x3fc55555
 80116e0:	652b82fe 	.word	0x652b82fe
 80116e4:	3ff71547 	.word	0x3ff71547
 80116e8:	fee00000 	.word	0xfee00000
 80116ec:	3fe62e42 	.word	0x3fe62e42
 80116f0:	35793c76 	.word	0x35793c76
 80116f4:	3dea39ef 	.word	0x3dea39ef
 80116f8:	8800759c 	.word	0x8800759c
 80116fc:	7e37e43c 	.word	0x7e37e43c
 8011700:	40862e41 	.word	0x40862e41
 8011704:	7fefffff 	.word	0x7fefffff
 8011708:	3fd62e42 	.word	0x3fd62e42
 801170c:	3ff0a2b1 	.word	0x3ff0a2b1
 8011710:	08012f58 	.word	0x08012f58
 8011714:	08012f68 	.word	0x08012f68
 8011718:	3ff00000 	.word	0x3ff00000
 801171c:	08012f48 	.word	0x08012f48
 8011720:	3defffff 	.word	0x3defffff

08011724 <__ieee754_fmodf>:
 8011724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011726:	ee10 5a90 	vmov	r5, s1
 801172a:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 801172e:	d009      	beq.n	8011744 <__ieee754_fmodf+0x20>
 8011730:	ee10 2a10 	vmov	r2, s0
 8011734:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8011738:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801173c:	da02      	bge.n	8011744 <__ieee754_fmodf+0x20>
 801173e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8011742:	dd04      	ble.n	801174e <__ieee754_fmodf+0x2a>
 8011744:	ee60 0a20 	vmul.f32	s1, s0, s1
 8011748:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 801174c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801174e:	42a3      	cmp	r3, r4
 8011750:	dbfc      	blt.n	801174c <__ieee754_fmodf+0x28>
 8011752:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 8011756:	d105      	bne.n	8011764 <__ieee754_fmodf+0x40>
 8011758:	4b32      	ldr	r3, [pc, #200]	; (8011824 <__ieee754_fmodf+0x100>)
 801175a:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 801175e:	ed93 0a00 	vldr	s0, [r3]
 8011762:	e7f3      	b.n	801174c <__ieee754_fmodf+0x28>
 8011764:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8011768:	d13f      	bne.n	80117ea <__ieee754_fmodf+0xc6>
 801176a:	0219      	lsls	r1, r3, #8
 801176c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8011770:	2900      	cmp	r1, #0
 8011772:	dc37      	bgt.n	80117e4 <__ieee754_fmodf+0xc0>
 8011774:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8011778:	d13d      	bne.n	80117f6 <__ieee754_fmodf+0xd2>
 801177a:	0227      	lsls	r7, r4, #8
 801177c:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8011780:	2f00      	cmp	r7, #0
 8011782:	da35      	bge.n	80117f0 <__ieee754_fmodf+0xcc>
 8011784:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8011788:	bfbb      	ittet	lt
 801178a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 801178e:	1a12      	sublt	r2, r2, r0
 8011790:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8011794:	4093      	lsllt	r3, r2
 8011796:	bfa8      	it	ge
 8011798:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 801179c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80117a0:	bfb5      	itete	lt
 80117a2:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80117a6:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 80117aa:	1a52      	sublt	r2, r2, r1
 80117ac:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 80117b0:	bfb8      	it	lt
 80117b2:	4094      	lsllt	r4, r2
 80117b4:	1a40      	subs	r0, r0, r1
 80117b6:	1b1a      	subs	r2, r3, r4
 80117b8:	bb00      	cbnz	r0, 80117fc <__ieee754_fmodf+0xd8>
 80117ba:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 80117be:	bf38      	it	cc
 80117c0:	4613      	movcc	r3, r2
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d0c8      	beq.n	8011758 <__ieee754_fmodf+0x34>
 80117c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80117ca:	db1f      	blt.n	801180c <__ieee754_fmodf+0xe8>
 80117cc:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80117d0:	db1f      	blt.n	8011812 <__ieee754_fmodf+0xee>
 80117d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80117d6:	317f      	adds	r1, #127	; 0x7f
 80117d8:	4333      	orrs	r3, r6
 80117da:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 80117de:	ee00 3a10 	vmov	s0, r3
 80117e2:	e7b3      	b.n	801174c <__ieee754_fmodf+0x28>
 80117e4:	3801      	subs	r0, #1
 80117e6:	0049      	lsls	r1, r1, #1
 80117e8:	e7c2      	b.n	8011770 <__ieee754_fmodf+0x4c>
 80117ea:	15d8      	asrs	r0, r3, #23
 80117ec:	387f      	subs	r0, #127	; 0x7f
 80117ee:	e7c1      	b.n	8011774 <__ieee754_fmodf+0x50>
 80117f0:	3901      	subs	r1, #1
 80117f2:	007f      	lsls	r7, r7, #1
 80117f4:	e7c4      	b.n	8011780 <__ieee754_fmodf+0x5c>
 80117f6:	15e1      	asrs	r1, r4, #23
 80117f8:	397f      	subs	r1, #127	; 0x7f
 80117fa:	e7c3      	b.n	8011784 <__ieee754_fmodf+0x60>
 80117fc:	2a00      	cmp	r2, #0
 80117fe:	da02      	bge.n	8011806 <__ieee754_fmodf+0xe2>
 8011800:	005b      	lsls	r3, r3, #1
 8011802:	3801      	subs	r0, #1
 8011804:	e7d7      	b.n	80117b6 <__ieee754_fmodf+0x92>
 8011806:	d0a7      	beq.n	8011758 <__ieee754_fmodf+0x34>
 8011808:	0053      	lsls	r3, r2, #1
 801180a:	e7fa      	b.n	8011802 <__ieee754_fmodf+0xde>
 801180c:	005b      	lsls	r3, r3, #1
 801180e:	3901      	subs	r1, #1
 8011810:	e7d9      	b.n	80117c6 <__ieee754_fmodf+0xa2>
 8011812:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8011816:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 801181a:	3182      	adds	r1, #130	; 0x82
 801181c:	410b      	asrs	r3, r1
 801181e:	4333      	orrs	r3, r6
 8011820:	e7dd      	b.n	80117de <__ieee754_fmodf+0xba>
 8011822:	bf00      	nop
 8011824:	08012f78 	.word	0x08012f78

08011828 <__ieee754_logf>:
 8011828:	ee10 3a10 	vmov	r3, s0
 801182c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8011830:	d106      	bne.n	8011840 <__ieee754_logf+0x18>
 8011832:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80119c8 <__ieee754_logf+0x1a0>
 8011836:	eddf 7a65 	vldr	s15, [pc, #404]	; 80119cc <__ieee754_logf+0x1a4>
 801183a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801183e:	4770      	bx	lr
 8011840:	2b00      	cmp	r3, #0
 8011842:	da02      	bge.n	801184a <__ieee754_logf+0x22>
 8011844:	ee30 7a40 	vsub.f32	s14, s0, s0
 8011848:	e7f5      	b.n	8011836 <__ieee754_logf+0xe>
 801184a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801184e:	db02      	blt.n	8011856 <__ieee754_logf+0x2e>
 8011850:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011854:	4770      	bx	lr
 8011856:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801185a:	bfb8      	it	lt
 801185c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 80119d0 <__ieee754_logf+0x1a8>
 8011860:	485c      	ldr	r0, [pc, #368]	; (80119d4 <__ieee754_logf+0x1ac>)
 8011862:	bfbe      	ittt	lt
 8011864:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8011868:	f06f 0118 	mvnlt.w	r1, #24
 801186c:	ee17 3a90 	vmovlt	r3, s15
 8011870:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8011874:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011878:	4418      	add	r0, r3
 801187a:	bfa8      	it	ge
 801187c:	2100      	movge	r1, #0
 801187e:	3a7f      	subs	r2, #127	; 0x7f
 8011880:	440a      	add	r2, r1
 8011882:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8011886:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 801188a:	4319      	orrs	r1, r3
 801188c:	ee00 1a10 	vmov	s0, r1
 8011890:	4951      	ldr	r1, [pc, #324]	; (80119d8 <__ieee754_logf+0x1b0>)
 8011892:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8011896:	f103 000f 	add.w	r0, r3, #15
 801189a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801189e:	4001      	ands	r1, r0
 80118a0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80118a4:	bb89      	cbnz	r1, 801190a <__ieee754_logf+0xe2>
 80118a6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80118aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ae:	d10f      	bne.n	80118d0 <__ieee754_logf+0xa8>
 80118b0:	2a00      	cmp	r2, #0
 80118b2:	f000 8085 	beq.w	80119c0 <__ieee754_logf+0x198>
 80118b6:	ee07 2a90 	vmov	s15, r2
 80118ba:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80119dc <__ieee754_logf+0x1b4>
 80118be:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80119e0 <__ieee754_logf+0x1b8>
 80118c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80118c6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80118ca:	eea7 0a87 	vfma.f32	s0, s15, s14
 80118ce:	4770      	bx	lr
 80118d0:	eddf 6a44 	vldr	s13, [pc, #272]	; 80119e4 <__ieee754_logf+0x1bc>
 80118d4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80118d8:	eee0 7a66 	vfms.f32	s15, s0, s13
 80118dc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80118e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80118e4:	b912      	cbnz	r2, 80118ec <__ieee754_logf+0xc4>
 80118e6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80118ea:	4770      	bx	lr
 80118ec:	ee07 2a90 	vmov	s15, r2
 80118f0:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80119dc <__ieee754_logf+0x1b4>
 80118f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80118f8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80118fc:	ee37 0a40 	vsub.f32	s0, s14, s0
 8011900:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80119e0 <__ieee754_logf+0x1b8>
 8011904:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8011908:	4770      	bx	lr
 801190a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801190e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011912:	eddf 5a35 	vldr	s11, [pc, #212]	; 80119e8 <__ieee754_logf+0x1c0>
 8011916:	eddf 4a35 	vldr	s9, [pc, #212]	; 80119ec <__ieee754_logf+0x1c4>
 801191a:	4935      	ldr	r1, [pc, #212]	; (80119f0 <__ieee754_logf+0x1c8>)
 801191c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8011920:	4419      	add	r1, r3
 8011922:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8011926:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801192a:	430b      	orrs	r3, r1
 801192c:	2b00      	cmp	r3, #0
 801192e:	ee07 2a90 	vmov	s15, r2
 8011932:	ee26 5a06 	vmul.f32	s10, s12, s12
 8011936:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801193a:	ee25 7a05 	vmul.f32	s14, s10, s10
 801193e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80119f4 <__ieee754_logf+0x1cc>
 8011942:	eee7 7a25 	vfma.f32	s15, s14, s11
 8011946:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80119f8 <__ieee754_logf+0x1d0>
 801194a:	eee7 5a87 	vfma.f32	s11, s15, s14
 801194e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80119fc <__ieee754_logf+0x1d4>
 8011952:	eee7 7a24 	vfma.f32	s15, s14, s9
 8011956:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8011a00 <__ieee754_logf+0x1d8>
 801195a:	eee7 4a87 	vfma.f32	s9, s15, s14
 801195e:	eddf 7a29 	vldr	s15, [pc, #164]	; 8011a04 <__ieee754_logf+0x1dc>
 8011962:	eee4 7a87 	vfma.f32	s15, s9, s14
 8011966:	ee67 7a85 	vmul.f32	s15, s15, s10
 801196a:	eee5 7a87 	vfma.f32	s15, s11, s14
 801196e:	dd1c      	ble.n	80119aa <__ieee754_logf+0x182>
 8011970:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011974:	ee20 7a07 	vmul.f32	s14, s0, s14
 8011978:	ee27 7a00 	vmul.f32	s14, s14, s0
 801197c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011980:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011984:	b922      	cbnz	r2, 8011990 <__ieee754_logf+0x168>
 8011986:	ee77 7a67 	vsub.f32	s15, s14, s15
 801198a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801198e:	4770      	bx	lr
 8011990:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80119dc <__ieee754_logf+0x1b4>
 8011994:	eee6 7a86 	vfma.f32	s15, s13, s12
 8011998:	ee77 7a67 	vsub.f32	s15, s14, s15
 801199c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80119a0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80119e0 <__ieee754_logf+0x1b8>
 80119a4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80119a8:	4770      	bx	lr
 80119aa:	ee70 7a67 	vsub.f32	s15, s0, s15
 80119ae:	ee67 7a86 	vmul.f32	s15, s15, s12
 80119b2:	2a00      	cmp	r2, #0
 80119b4:	d0e9      	beq.n	801198a <__ieee754_logf+0x162>
 80119b6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80119dc <__ieee754_logf+0x1b4>
 80119ba:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80119be:	e7ed      	b.n	801199c <__ieee754_logf+0x174>
 80119c0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80119cc <__ieee754_logf+0x1a4>
 80119c4:	4770      	bx	lr
 80119c6:	bf00      	nop
 80119c8:	cc000000 	.word	0xcc000000
 80119cc:	00000000 	.word	0x00000000
 80119d0:	4c000000 	.word	0x4c000000
 80119d4:	004afb20 	.word	0x004afb20
 80119d8:	007ffff0 	.word	0x007ffff0
 80119dc:	3717f7d1 	.word	0x3717f7d1
 80119e0:	3f317180 	.word	0x3f317180
 80119e4:	3eaaaaab 	.word	0x3eaaaaab
 80119e8:	3e1cd04f 	.word	0x3e1cd04f
 80119ec:	3e178897 	.word	0x3e178897
 80119f0:	ffcf5c30 	.word	0xffcf5c30
 80119f4:	3e638e29 	.word	0x3e638e29
 80119f8:	3ecccccd 	.word	0x3ecccccd
 80119fc:	3e3a3325 	.word	0x3e3a3325
 8011a00:	3e924925 	.word	0x3e924925
 8011a04:	3f2aaaab 	.word	0x3f2aaaab

08011a08 <__ieee754_sqrtf>:
 8011a08:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011a0c:	4770      	bx	lr

08011a0e <with_errno>:
 8011a0e:	b570      	push	{r4, r5, r6, lr}
 8011a10:	4604      	mov	r4, r0
 8011a12:	460d      	mov	r5, r1
 8011a14:	4616      	mov	r6, r2
 8011a16:	f7fb fa3d 	bl	800ce94 <__errno>
 8011a1a:	4629      	mov	r1, r5
 8011a1c:	6006      	str	r6, [r0, #0]
 8011a1e:	4620      	mov	r0, r4
 8011a20:	bd70      	pop	{r4, r5, r6, pc}

08011a22 <xflow>:
 8011a22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a24:	4614      	mov	r4, r2
 8011a26:	461d      	mov	r5, r3
 8011a28:	b108      	cbz	r0, 8011a2e <xflow+0xc>
 8011a2a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011a2e:	e9cd 2300 	strd	r2, r3, [sp]
 8011a32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a36:	4620      	mov	r0, r4
 8011a38:	4629      	mov	r1, r5
 8011a3a:	f7ee fe05 	bl	8000648 <__aeabi_dmul>
 8011a3e:	2222      	movs	r2, #34	; 0x22
 8011a40:	b003      	add	sp, #12
 8011a42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a46:	f7ff bfe2 	b.w	8011a0e <with_errno>

08011a4a <__math_uflow>:
 8011a4a:	b508      	push	{r3, lr}
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011a52:	f7ff ffe6 	bl	8011a22 <xflow>
 8011a56:	ec41 0b10 	vmov	d0, r0, r1
 8011a5a:	bd08      	pop	{r3, pc}

08011a5c <__math_oflow>:
 8011a5c:	b508      	push	{r3, lr}
 8011a5e:	2200      	movs	r2, #0
 8011a60:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8011a64:	f7ff ffdd 	bl	8011a22 <xflow>
 8011a68:	ec41 0b10 	vmov	d0, r0, r1
 8011a6c:	bd08      	pop	{r3, pc}

08011a6e <finite>:
 8011a6e:	b082      	sub	sp, #8
 8011a70:	ed8d 0b00 	vstr	d0, [sp]
 8011a74:	9801      	ldr	r0, [sp, #4]
 8011a76:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011a7a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011a7e:	0fc0      	lsrs	r0, r0, #31
 8011a80:	b002      	add	sp, #8
 8011a82:	4770      	bx	lr

08011a84 <_init>:
 8011a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a86:	bf00      	nop
 8011a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a8a:	bc08      	pop	{r3}
 8011a8c:	469e      	mov	lr, r3
 8011a8e:	4770      	bx	lr

08011a90 <_fini>:
 8011a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a92:	bf00      	nop
 8011a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a96:	bc08      	pop	{r3}
 8011a98:	469e      	mov	lr, r3
 8011a9a:	4770      	bx	lr
