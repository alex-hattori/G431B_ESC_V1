
G431B_ESC_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001238c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014c8  08012570  08012570  00022570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013a38  08013a38  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08013a38  08013a38  00023a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013a40  08013a40  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013a40  08013a40  00023a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013a44  08013a44  00023a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08013a48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f94  20000200  08013c48  00030200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005194  08013c48  00035194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000272d7  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005601  00000000  00000000  00057507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f38  00000000  00000000  0005cb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ce8  00000000  00000000  0005ea40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000266a8  00000000  00000000  00060728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027891  00000000  00000000  00086dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e78c2  00000000  00000000  000ae661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00195f23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b84  00000000  00000000  00195f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000200 	.word	0x20000200
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012554 	.word	0x08012554

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000204 	.word	0x20000204
 800021c:	08012554 	.word	0x08012554

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2220      	movs	r2, #32
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f00c fdf3 	bl	800dc4c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001066:	4b39      	ldr	r3, [pc, #228]	; (800114c <MX_ADC1_Init+0x104>)
 8001068:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800106c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106e:	4b37      	ldr	r3, [pc, #220]	; (800114c <MX_ADC1_Init+0x104>)
 8001070:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001074:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001076:	4b35      	ldr	r3, [pc, #212]	; (800114c <MX_ADC1_Init+0x104>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107c:	4b33      	ldr	r3, [pc, #204]	; (800114c <MX_ADC1_Init+0x104>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001082:	4b32      	ldr	r3, [pc, #200]	; (800114c <MX_ADC1_Init+0x104>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001088:	4b30      	ldr	r3, [pc, #192]	; (800114c <MX_ADC1_Init+0x104>)
 800108a:	2201      	movs	r2, #1
 800108c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800108e:	4b2f      	ldr	r3, [pc, #188]	; (800114c <MX_ADC1_Init+0x104>)
 8001090:	2208      	movs	r2, #8
 8001092:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001094:	4b2d      	ldr	r3, [pc, #180]	; (800114c <MX_ADC1_Init+0x104>)
 8001096:	2200      	movs	r2, #0
 8001098:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800109a:	4b2c      	ldr	r3, [pc, #176]	; (800114c <MX_ADC1_Init+0x104>)
 800109c:	2200      	movs	r2, #0
 800109e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80010a0:	4b2a      	ldr	r3, [pc, #168]	; (800114c <MX_ADC1_Init+0x104>)
 80010a2:	2202      	movs	r2, #2
 80010a4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a6:	4b29      	ldr	r3, [pc, #164]	; (800114c <MX_ADC1_Init+0x104>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ae:	4b27      	ldr	r3, [pc, #156]	; (800114c <MX_ADC1_Init+0x104>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <MX_ADC1_Init+0x104>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <MX_ADC1_Init+0x104>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010c2:	4b22      	ldr	r3, [pc, #136]	; (800114c <MX_ADC1_Init+0x104>)
 80010c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010ca:	4b20      	ldr	r3, [pc, #128]	; (800114c <MX_ADC1_Init+0x104>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d2:	481e      	ldr	r0, [pc, #120]	; (800114c <MX_ADC1_Init+0x104>)
 80010d4:	f005 f824 	bl	8006120 <HAL_ADC_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80010de:	f003 fb94 	bl	800480a <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ea:	4619      	mov	r1, r3
 80010ec:	4817      	ldr	r0, [pc, #92]	; (800114c <MX_ADC1_Init+0x104>)
 80010ee:	f005 ff7f 	bl	8006ff0 <HAL_ADCEx_MultiModeConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80010f8:	f003 fb87 	bl	800480a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_ADC1_Init+0x108>)
 80010fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001100:	2306      	movs	r3, #6
 8001102:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001108:	237f      	movs	r3, #127	; 0x7f
 800110a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800110c:	2304      	movs	r3, #4
 800110e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	4619      	mov	r1, r3
 8001118:	480c      	ldr	r0, [pc, #48]	; (800114c <MX_ADC1_Init+0x104>)
 800111a:	f005 fa5d 	bl	80065d8 <HAL_ADC_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001124:	f003 fb71 	bl	800480a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <MX_ADC1_Init+0x10c>)
 800112a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800112c:	230c      	movs	r3, #12
 800112e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_ADC1_Init+0x104>)
 8001136:	f005 fa4f 	bl	80065d8 <HAL_ADC_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001140:	f003 fb63 	bl	800480a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	3730      	adds	r7, #48	; 0x30
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000021c 	.word	0x2000021c
 8001150:	b6902000 	.word	0xb6902000
 8001154:	04300002 	.word	0x04300002

08001158 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800115e:	463b      	mov	r3, r7
 8001160:	2220      	movs	r2, #32
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f00c fd71 	bl	800dc4c <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800116a:	4b32      	ldr	r3, [pc, #200]	; (8001234 <MX_ADC2_Init+0xdc>)
 800116c:	4a32      	ldr	r2, [pc, #200]	; (8001238 <MX_ADC2_Init+0xe0>)
 800116e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001170:	4b30      	ldr	r3, [pc, #192]	; (8001234 <MX_ADC2_Init+0xdc>)
 8001172:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001176:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001178:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <MX_ADC2_Init+0xdc>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117e:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <MX_ADC2_Init+0xdc>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001184:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <MX_ADC2_Init+0xdc>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800118a:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <MX_ADC2_Init+0xdc>)
 800118c:	2201      	movs	r2, #1
 800118e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <MX_ADC2_Init+0xdc>)
 8001192:	2208      	movs	r2, #8
 8001194:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001196:	4b27      	ldr	r3, [pc, #156]	; (8001234 <MX_ADC2_Init+0xdc>)
 8001198:	2200      	movs	r2, #0
 800119a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800119c:	4b25      	ldr	r3, [pc, #148]	; (8001234 <MX_ADC2_Init+0xdc>)
 800119e:	2200      	movs	r2, #0
 80011a0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80011a2:	4b24      	ldr	r3, [pc, #144]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011a4:	2202      	movs	r2, #2
 80011a6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011a8:	4b22      	ldr	r3, [pc, #136]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b0:	4b20      	ldr	r3, [pc, #128]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b6:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011d4:	4817      	ldr	r0, [pc, #92]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011d6:	f004 ffa3 	bl	8006120 <HAL_ADC_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 80011e0:	f003 fb13 	bl	800480a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_ADC2_Init+0xe4>)
 80011e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011e8:	2306      	movs	r3, #6
 80011ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011f0:	237f      	movs	r3, #127	; 0x7f
 80011f2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011f4:	2304      	movs	r3, #4
 80011f6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011fc:	463b      	mov	r3, r7
 80011fe:	4619      	mov	r1, r3
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <MX_ADC2_Init+0xdc>)
 8001202:	f005 f9e9 	bl	80065d8 <HAL_ADC_ConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 800120c:	f003 fafd 	bl	800480a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_ADC2_Init+0xe8>)
 8001212:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001214:	230c      	movs	r3, #12
 8001216:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001218:	463b      	mov	r3, r7
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_ADC2_Init+0xdc>)
 800121e:	f005 f9db 	bl	80065d8 <HAL_ADC_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8001228:	f003 faef 	bl	800480a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	3720      	adds	r7, #32
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000288 	.word	0x20000288
 8001238:	50000100 	.word	0x50000100
 800123c:	c3290000 	.word	0xc3290000
 8001240:	cb8c0000 	.word	0xcb8c0000

08001244 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001264:	d159      	bne.n	800131a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001266:	4b51      	ldr	r3, [pc, #324]	; (80013ac <HAL_ADC_MspInit+0x168>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	4a4f      	ldr	r2, [pc, #316]	; (80013ac <HAL_ADC_MspInit+0x168>)
 800126e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001270:	4b4e      	ldr	r3, [pc, #312]	; (80013ac <HAL_ADC_MspInit+0x168>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d10b      	bne.n	8001290 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001278:	4b4d      	ldr	r3, [pc, #308]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	4a4c      	ldr	r2, [pc, #304]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 800127e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001282:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001284:	4b4a      	ldr	r3, [pc, #296]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	4b47      	ldr	r3, [pc, #284]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001294:	4a46      	ldr	r2, [pc, #280]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129c:	4b44      	ldr	r3, [pc, #272]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a8:	2301      	movs	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ac:	2303      	movs	r3, #3
 80012ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012be:	f007 f9ed 	bl	800869c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012c2:	4b3c      	ldr	r3, [pc, #240]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012c4:	4a3c      	ldr	r2, [pc, #240]	; (80013b8 <HAL_ADC_MspInit+0x174>)
 80012c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012c8:	4b3a      	ldr	r3, [pc, #232]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012ca:	2205      	movs	r2, #5
 80012cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ce:	4b39      	ldr	r3, [pc, #228]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012d4:	4b37      	ldr	r3, [pc, #220]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012da:	4b36      	ldr	r3, [pc, #216]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012dc:	2280      	movs	r2, #128	; 0x80
 80012de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012e0:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012e8:	4b32      	ldr	r3, [pc, #200]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80012f0:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012f6:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012fc:	482d      	ldr	r0, [pc, #180]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012fe:	f006 f82b 	bl	8007358 <HAL_DMA_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001308:	f003 fa7f 	bl	800480a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a29      	ldr	r2, [pc, #164]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 8001310:	655a      	str	r2, [r3, #84]	; 0x54
 8001312:	4a28      	ldr	r2, [pc, #160]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001318:	e044      	b.n	80013a4 <HAL_ADC_MspInit+0x160>
  else if(adcHandle->Instance==ADC2)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a27      	ldr	r2, [pc, #156]	; (80013bc <HAL_ADC_MspInit+0x178>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d13f      	bne.n	80013a4 <HAL_ADC_MspInit+0x160>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <HAL_ADC_MspInit+0x168>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	3301      	adds	r3, #1
 800132a:	4a20      	ldr	r2, [pc, #128]	; (80013ac <HAL_ADC_MspInit+0x168>)
 800132c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800132e:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <HAL_ADC_MspInit+0x168>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d10b      	bne.n	800134e <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	4a1d      	ldr	r2, [pc, #116]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 800133c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
    hdma_adc2.Instance = DMA1_Channel2;
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 8001350:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <HAL_ADC_MspInit+0x180>)
 8001352:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001354:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 8001356:	2224      	movs	r2, #36	; 0x24
 8001358:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001360:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 8001368:	2280      	movs	r2, #128	; 0x80
 800136a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 800136e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001372:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 8001376:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800137a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800137c:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001388:	480d      	ldr	r0, [pc, #52]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 800138a:	f005 ffe5 	bl	8007358 <HAL_DMA_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_ADC_MspInit+0x154>
      Error_Handler();
 8001394:	f003 fa39 	bl	800480a <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 800139c:	655a      	str	r2, [r3, #84]	; 0x54
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6293      	str	r3, [r2, #40]	; 0x28
}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	; 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200003b4 	.word	0x200003b4
 80013b0:	40021000 	.word	0x40021000
 80013b4:	200002f4 	.word	0x200002f4
 80013b8:	40020008 	.word	0x40020008
 80013bc:	50000100 	.word	0x50000100
 80013c0:	20000354 	.word	0x20000354
 80013c4:	4002001c 	.word	0x4002001c

080013c8 <order_phases>:
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"
#include "tim.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 80013c8:	b5b0      	push	{r4, r5, r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 80013d6:	4b7d      	ldr	r3, [pc, #500]	; (80015cc <order_phases+0x204>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
	if(!cal->started){
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7c1b      	ldrb	r3, [r3, #16]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d108      	bne.n	80013f6 <order_phases+0x2e>
		printf("Checking phase sign, pole pairs\r\n");
 80013e4:	487a      	ldr	r0, [pc, #488]	; (80015d0 <order_phases+0x208>)
 80013e6:	f00d f929 	bl	800e63c <puts>
		cal->started = 1;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001406:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80015d4 <order_phases+0x20c>
 800140a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	edd3 7a05 	vldr	s15, [r3, #20]
 800141a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800141e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001426:	d529      	bpl.n	800147c <order_phases+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800143a:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
        cal->cal_position.elec_velocity = 0;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001444:	461a      	mov	r2, r3
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
        controller->i_d_des = I_CAL;
 800144e:	4b62      	ldr	r3, [pc, #392]	; (80015d8 <order_phases+0x210>)
 8001450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8001468:	332c      	adds	r3, #44	; 0x2c
 800146a:	4619      	mov	r1, r3
 800146c:	68b8      	ldr	r0, [r7, #8]
 800146e:	f001 fb9b 	bl	8002ba8 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	619a      	str	r2, [r3, #24]
    	return;
 800147a:	e0a4      	b.n	80015c6 <order_phases+0x1fe>
    }
    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001482:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80015dc <order_phases+0x214>
 8001486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	d51d      	bpl.n	80014cc <order_phases+0x104>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	edd3 7a05 	vldr	s15, [r3, #20]
 8001496:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800149a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800149e:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80015e0 <order_phases+0x218>
 80014a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80014b6:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
		commutate(controller, &cal->cal_position);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80014c0:	332c      	adds	r3, #44	; 0x2c
 80014c2:	4619      	mov	r1, r3
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f001 fb6f 	bl	8002ba8 <commutate>
    	return;
 80014ca:	e07c      	b.n	80015c6 <order_phases+0x1fe>
    }
	reset_foc(controller);
 80014cc:	68b8      	ldr	r0, [r7, #8]
 80014ce:	f001 faf7 	bl	8002ac0 <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	edd3 7a06 	vldr	s15, [r3, #24]
 80014de:	ed97 7a05 	vldr	s14, [r7, #20]
 80014e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e6:	eef0 7ae7 	vabs.f32	s15, s15
 80014ea:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80015e4 <order_phases+0x21c>
 80014ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014f2:	ee16 0a90 	vmov	r0, s13
 80014f6:	f7ff f84f 	bl	8000598 <__aeabi_f2d>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	ec43 2b10 	vmov	d0, r2, r3
 8001502:	f010 fcc5 	bl	8011e90 <round>
 8001506:	ec53 2b10 	vmov	r2, r3, d0
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f7ff fb73 	bl	8000bf8 <__aeabi_d2uiz>
 8001512:	4603      	mov	r3, r0
 8001514:	b2da      	uxtb	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001520:	ed97 7a05 	vldr	s14, [r7, #20]
 8001524:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	dd07      	ble.n	800153e <order_phases+0x176>
		cal->phase_order = 0;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 8001536:	482c      	ldr	r0, [pc, #176]	; (80015e8 <order_phases+0x220>)
 8001538:	f00d f880 	bl	800e63c <puts>
 800153c:	e014      	b.n	8001568 <order_phases+0x1a0>
	}
	else{
		cal->phase_order = 1;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2020 	strb.w	r2, [r3, #32]
		int offsetATemp = controller->adc_a_offset;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800154c:	613b      	str	r3, [r7, #16]
		controller->adc_a_offset = controller->adc_b_offset;
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		controller->adc_b_offset = offsetATemp;
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		printf("Swapping phase sign\r\n");
 8001562:	4822      	ldr	r0, [pc, #136]	; (80015ec <order_phases+0x224>)
 8001564:	f00d f86a 	bl	800e63c <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	4820      	ldr	r0, [pc, #128]	; (80015f0 <order_phases+0x228>)
 8001570:	f00c ffde 	bl	800e530 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff f80d 	bl	8000598 <__aeabi_f2d>
 800157e:	4604      	mov	r4, r0
 8001580:	460d      	mov	r5, r1
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff f808 	bl	8000598 <__aeabi_f2d>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	e9cd 2300 	strd	r2, r3, [sp]
 8001590:	4622      	mov	r2, r4
 8001592:	462b      	mov	r3, r5
 8001594:	4817      	ldr	r0, [pc, #92]	; (80015f4 <order_phases+0x22c>)
 8001596:	f00c ffcb 	bl	800e530 <iprintf>
    PHASE_ORDER = cal->phase_order;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <order_phases+0x204>)
 80015a4:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	ee07 3a90 	vmov	s15, r3
 80015ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <order_phases+0x210>)
 80015b4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    cal->started = 0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bdb0      	pop	{r4, r5, r7, pc}
 80015cc:	20004dec 	.word	0x20004dec
 80015d0:	08012570 	.word	0x08012570
 80015d4:	388bcf64 	.word	0x388bcf64
 80015d8:	20004cec 	.word	0x20004cec
 80015dc:	3f8d6775 	.word	0x3f8d6775
 80015e0:	42700000 	.word	0x42700000
 80015e4:	40c90fdb 	.word	0x40c90fdb
 80015e8:	08012594 	.word	0x08012594
 80015ec:	080125ac 	.word	0x080125ac
 80015f0:	080125c4 	.word	0x080125c4
 80015f4:	080125d8 	.word	0x080125d8

080015f8 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	b094      	sub	sp, #80	; 0x50
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7c1b      	ldrb	r3, [r3, #16]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10f      	bne.n	800162e <calibrate_encoder+0x36>
		printf("Starting offset cal and linearization\r\n");
 800160e:	489e      	ldr	r0, [pc, #632]	; (8001888 <calibrate_encoder+0x290>)
 8001610:	f00d f814 	bl	800e63c <puts>
		cal->started = 1;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	60da      	str	r2, [r3, #12]
		cal->next_sample_time = T1;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
		cal->sample_count = 0;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	849a      	strh	r2, [r3, #36]	; 0x24
	}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	ee07 3a90 	vmov	s15, r3
 800163a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800163e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800188c <calibrate_encoder+0x294>
 8001642:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001652:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001656:	eef4 7ac7 	vcmpe.f32	s15, s14
 800165a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165e:	d525      	bpl.n	80016ac <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001672:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
        controller->i_d_des = I_CAL;
 8001676:	4b86      	ldr	r3, [pc, #536]	; (8001890 <calibrate_encoder+0x298>)
 8001678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8001690:	332c      	adds	r3, #44	; 0x2c
 8001692:	4619      	mov	r1, r3
 8001694:	68b8      	ldr	r0, [r7, #8]
 8001696:	f001 fa87 	bl	8002ba8 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 80016aa:	e258      	b.n	8001b5e <calibrate_encoder+0x566>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	ed93 7a05 	vldr	s14, [r3, #20]
 80016b2:	4b77      	ldr	r3, [pc, #476]	; (8001890 <calibrate_encoder+0x298>)
 80016b4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016b8:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001894 <calibrate_encoder+0x29c>
 80016bc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80016c0:	ed9f 6a75 	vldr	s12, [pc, #468]	; 8001898 <calibrate_encoder+0x2a0>
 80016c4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80016c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80016d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d8:	f140 808f 	bpl.w	80017fa <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	edd3 7a02 	vldr	s15, [r3, #8]
 80016e2:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800189c <calibrate_encoder+0x2a4>
 80016e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80016fa:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
		commutate(controller, &cal->cal_position);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8001704:	332c      	adds	r3, #44	; 0x2c
 8001706:	4619      	mov	r1, r3
 8001708:	68b8      	ldr	r0, [r7, #8]
 800170a:	f001 fa4d 	bl	8002ba8 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	ed93 7a05 	vldr	s14, [r3, #20]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800171a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800171e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001722:	dc00      	bgt.n	8001726 <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 8001724:	e21b      	b.n	8001b5e <calibrate_encoder+0x566>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	edd3 7a02 	vldr	s15, [r3, #8]
 800172c:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80018b0 <calibrate_encoder+0x2b8>
 8001730:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001734:	4b56      	ldr	r3, [pc, #344]	; (8001890 <calibrate_encoder+0x298>)
 8001736:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800173a:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001894 <calibrate_encoder+0x29c>
 800173e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001746:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800174a:	ee17 3a90 	vmov	r3, s15
 800174e:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	14db      	asrs	r3, r3, #19
 800175e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001766:	4618      	mov	r0, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	441a      	add	r2, r3
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	f100 030a 	add.w	r3, r0, #10
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800177c:	461d      	mov	r5, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	330a      	adds	r3, #10
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	685c      	ldr	r4, [r3, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe ff01 	bl	8000598 <__aeabi_f2d>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	e9cd 2300 	strd	r2, r3, [sp]
 800179e:	4623      	mov	r3, r4
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4629      	mov	r1, r5
 80017a4:	483e      	ldr	r0, [pc, #248]	; (80018a0 <calibrate_encoder+0x2a8>)
 80017a6:	f00c fec3 	bl	800e530 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80017b0:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80018a4 <calibrate_encoder+0x2ac>
 80017b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ca:	4b31      	ldr	r3, [pc, #196]	; (8001890 <calibrate_encoder+0x298>)
 80017cc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80017d0:	eddf 6a35 	vldr	s13, [pc, #212]	; 80018a8 <calibrate_encoder+0x2b0>
 80017d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80017e0:	eeb4 7a67 	vcmp.f32	s14, s15
 80017e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e8:	f000 81b6 	beq.w	8001b58 <calibrate_encoder+0x560>
			cal->sample_count++;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017f0:	3301      	adds	r3, #1
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 80017f8:	e1b1      	b.n	8001b5e <calibrate_encoder+0x566>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	ed93 7a05 	vldr	s14, [r3, #20]
 8001800:	4b23      	ldr	r3, [pc, #140]	; (8001890 <calibrate_encoder+0x298>)
 8001802:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001806:	eddf 6a29 	vldr	s13, [pc, #164]	; 80018ac <calibrate_encoder+0x2b4>
 800180a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800180e:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8001898 <calibrate_encoder+0x2a0>
 8001812:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800181a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800181e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001826:	f140 80ab 	bpl.w	8001980 <calibrate_encoder+0x388>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001830:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800189c <calibrate_encoder+0x2a4>
 8001834:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <calibrate_encoder+0x298>)
 8001840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		controller->i_q_des = 0.0f;
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		cal->cal_position.elec_angle = cal->theta_ref;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800185c:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
		commutate(controller, &cal->cal_position);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8001866:	332c      	adds	r3, #44	; 0x2c
 8001868:	4619      	mov	r1, r3
 800186a:	68b8      	ldr	r0, [r7, #8]
 800186c:	f001 f99c 	bl	8002ba8 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	ed93 7a05 	vldr	s14, [r3, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800187c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001884:	dc16      	bgt.n	80018b4 <calibrate_encoder+0x2bc>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 8001886:	e169      	b.n	8001b5c <calibrate_encoder+0x564>
 8001888:	080125f4 	.word	0x080125f4
 800188c:	388bcf64 	.word	0x388bcf64
 8001890:	20004cec 	.word	0x20004cec
 8001894:	40c90fdb 	.word	0x40c90fdb
 8001898:	42700000 	.word	0x42700000
 800189c:	3b83126e 	.word	0x3b83126e
 80018a0:	0801261c 	.word	0x0801261c
 80018a4:	3ad67750 	.word	0x3ad67750
 80018a8:	42800000 	.word	0x42800000
 80018ac:	41490fdb 	.word	0x41490fdb
 80018b0:	45800000 	.word	0x45800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 814f 	beq.w	8001b5c <calibrate_encoder+0x564>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80018c4:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80018b0 <calibrate_encoder+0x2b8>
 80018c8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80018cc:	4ba5      	ldr	r3, [pc, #660]	; (8001b64 <calibrate_encoder+0x56c>)
 80018ce:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018d2:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8001b68 <calibrate_encoder+0x570>
 80018d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e2:	ee17 3a90 	vmov	r3, s15
 80018e6:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	14db      	asrs	r3, r3, #19
 80018f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	4413      	add	r3, r2
 80018fe:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	330a      	adds	r3, #10
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	4413      	add	r3, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001916:	4610      	mov	r0, r2
 8001918:	0fda      	lsrs	r2, r3, #31
 800191a:	4413      	add	r3, r2
 800191c:	105b      	asrs	r3, r3, #1
 800191e:	4619      	mov	r1, r3
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	f100 030a 	add.w	r3, r0, #10
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001930:	461d      	mov	r5, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	330a      	adds	r3, #10
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	685c      	ldr	r4, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fe27 	bl	8000598 <__aeabi_f2d>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	e9cd 2300 	strd	r2, r3, [sp]
 8001952:	4623      	mov	r3, r4
 8001954:	6a3a      	ldr	r2, [r7, #32]
 8001956:	4629      	mov	r1, r5
 8001958:	4884      	ldr	r0, [pc, #528]	; (8001b6c <calibrate_encoder+0x574>)
 800195a:	f00c fde9 	bl	800e530 <iprintf>
			cal->sample_count--;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001962:	3b01      	subs	r3, #1
 8001964:	b29a      	uxth	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	849a      	strh	r2, [r3, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001970:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001b70 <calibrate_encoder+0x578>
 8001974:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 800197e:	e0ed      	b.n	8001b5c <calibrate_encoder+0x564>
    }

    reset_foc(controller);
 8001980:	68b8      	ldr	r0, [r7, #8]
 8001982:	f001 f89d 	bl	8002ac0 <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 800198a:	2300      	movs	r3, #0
 800198c:	643b      	str	r3, [r7, #64]	; 0x40
 800198e:	e00b      	b.n	80019a8 <calibrate_encoder+0x3b0>
		ezero_mean += cal->error_arr[i];
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001994:	330a      	adds	r3, #10
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800199e:	4413      	add	r3, r2
 80019a0:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80019a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019a4:	3301      	adds	r3, #1
 80019a6:	643b      	str	r3, [r7, #64]	; 0x40
 80019a8:	4b6e      	ldr	r3, [pc, #440]	; (8001b64 <calibrate_encoder+0x56c>)
 80019aa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b2:	ee17 3a90 	vmov	r3, s15
 80019b6:	019b      	lsls	r3, r3, #6
 80019b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019ba:	429a      	cmp	r2, r3
 80019bc:	dbe8      	blt.n	8001990 <calibrate_encoder+0x398>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 80019be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019c8:	4b66      	ldr	r3, [pc, #408]	; (8001b64 <calibrate_encoder+0x56c>)
 80019ca:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019ce:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001b74 <calibrate_encoder+0x57c>
 80019d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019de:	ee17 2a90 	vmov	r2, s15
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 80019e6:	2340      	movs	r3, #64	; 0x40
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
	int lut_offset = (cal->error_arr[0])*N_LUT/ENC_CPR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	da00      	bge.n	80019f4 <calibrate_encoder+0x3fc>
 80019f2:	333f      	adds	r3, #63	; 0x3f
 80019f4:	119b      	asrs	r3, r3, #6
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<N_LUT; i++){
 80019f8:	2300      	movs	r3, #0
 80019fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019fc:	e0a0      	b.n	8001b40 <calibrate_encoder+0x548>
			int moving_avg = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a04:	0fda      	lsrs	r2, r3, #31
 8001a06:	4413      	add	r3, r2
 8001a08:	105b      	asrs	r3, r3, #1
 8001a0a:	425b      	negs	r3, r3
 8001a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a0e:	e068      	b.n	8001ae2 <calibrate_encoder+0x4ea>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a1a:	4b52      	ldr	r3, [pc, #328]	; (8001b64 <calibrate_encoder+0x56c>)
 8001a1c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a24:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001b74 <calibrate_encoder+0x57c>
 8001a28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a2c:	eddf 6a51 	vldr	s13, [pc, #324]	; 8001b74 <calibrate_encoder+0x57c>
 8001a30:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a36:	ee07 3a90 	vmov	s15, r3
 8001a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a46:	ee17 3a90 	vmov	r3, s15
 8001a4a:	633b      	str	r3, [r7, #48]	; 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8001a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	da13      	bge.n	8001a7a <calibrate_encoder+0x482>
 8001a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a54:	ee07 3a90 	vmov	s15, r3
 8001a58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a5c:	4b41      	ldr	r3, [pc, #260]	; (8001b64 <calibrate_encoder+0x56c>)
 8001a5e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a62:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001b74 <calibrate_encoder+0x57c>
 8001a66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a72:	ee17 3a90 	vmov	r3, s15
 8001a76:	633b      	str	r3, [r7, #48]	; 0x30
 8001a78:	e027      	b.n	8001aca <calibrate_encoder+0x4d2>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7c:	ee07 3a90 	vmov	s15, r3
 8001a80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a84:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <calibrate_encoder+0x56c>)
 8001a86:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a8a:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001b74 <calibrate_encoder+0x57c>
 8001a8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa2:	dd12      	ble.n	8001aca <calibrate_encoder+0x4d2>
 8001aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa6:	ee07 3a90 	vmov	s15, r3
 8001aaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aae:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <calibrate_encoder+0x56c>)
 8001ab0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ab4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001b74 <calibrate_encoder+0x57c>
 8001ab8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001abc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ac0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ac4:	ee17 3a90 	vmov	r3, s15
 8001ac8:	633b      	str	r3, [r7, #48]	; 0x30
				moving_avg += cal->error_arr[index];
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ace:	330a      	adds	r3, #10
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ad8:	4413      	add	r3, r2
 8001ada:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ade:	3301      	adds	r3, #1
 8001ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae4:	0fda      	lsrs	r2, r3, #31
 8001ae6:	4413      	add	r3, r2
 8001ae8:	105b      	asrs	r3, r3, #1
 8001aea:	461a      	mov	r2, r3
 8001aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aee:	4293      	cmp	r3, r2
 8001af0:	db8e      	blt.n	8001a10 <calibrate_encoder+0x418>
			}
			moving_avg = moving_avg/window;
 8001af2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001afa:	63bb      	str	r3, [r7, #56]	; 0x38
			int lut_index = lut_offset + i;
 8001afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b00:	4413      	add	r3, r2
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b06:	2b3f      	cmp	r3, #63	; 0x3f
 8001b08:	dd02      	ble.n	8001b10 <calibrate_encoder+0x518>
 8001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0c:	3b40      	subs	r3, #64	; 0x40
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b16:	1ad2      	subs	r2, r2, r3
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b20:	330a      	adds	r3, #10
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	461a      	mov	r2, r3
 8001b32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b34:	4810      	ldr	r0, [pc, #64]	; (8001b78 <calibrate_encoder+0x580>)
 8001b36:	f00c fcfb 	bl	800e530 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8001b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b42:	2b3f      	cmp	r3, #63	; 0x3f
 8001b44:	f77f af5b 	ble.w	80019fe <calibrate_encoder+0x406>

		}

	cal->started = 0;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001b56:	e002      	b.n	8001b5e <calibrate_encoder+0x566>
				return;
 8001b58:	bf00      	nop
 8001b5a:	e000      	b.n	8001b5e <calibrate_encoder+0x566>
		return;
 8001b5c:	bf00      	nop
}
 8001b5e:	3748      	adds	r7, #72	; 0x48
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bdb0      	pop	{r4, r5, r7, pc}
 8001b64:	20004cec 	.word	0x20004cec
 8001b68:	40c90fdb 	.word	0x40c90fdb
 8001b6c:	0801261c 	.word	0x0801261c
 8001b70:	3ad67750 	.word	0x3ad67750
 8001b74:	42800000 	.word	0x42800000
 8001b78:	0801262c 	.word	0x0801262c

08001b7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b82:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <MX_DMA_Init+0x60>)
 8001b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b86:	4a15      	ldr	r2, [pc, #84]	; (8001bdc <MX_DMA_Init+0x60>)
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	6493      	str	r3, [r2, #72]	; 0x48
 8001b8e:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <MX_DMA_Init+0x60>)
 8001b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <MX_DMA_Init+0x60>)
 8001b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b9e:	4a0f      	ldr	r2, [pc, #60]	; (8001bdc <MX_DMA_Init+0x60>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6493      	str	r3, [r2, #72]	; 0x48
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <MX_DMA_Init+0x60>)
 8001ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	200b      	movs	r0, #11
 8001bb8:	f005 fb99 	bl	80072ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bbc:	200b      	movs	r0, #11
 8001bbe:	f005 fbb0 	bl	8007322 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	200c      	movs	r0, #12
 8001bc8:	f005 fb91 	bl	80072ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001bcc:	200c      	movs	r0, #12
 8001bce:	f005 fba8 	bl	8007322 <HAL_NVIC_EnableIRQ>

}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000

08001be0 <eeprom_restore>:

static uint32_t const page_nb = 58U; //(uint32_t)FLASH_PAGE_NB-1;
static uint32_t const start_address = 0x08000000UL+58*0x800U; //(FLASH_BASE)+page_nb*(FLASH_PAGE_SIZE);

HAL_StatusTypeDef eeprom_restore(float * float_regs, uint32_t float_size, int * int_regs, uint32_t int_size)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b090      	sub	sp, #64	; 0x40
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
 8001bec:	603b      	str	r3, [r7, #0]
	uint64_t data = 0xDEADBEEF;
 8001bee:	a33b      	add	r3, pc, #236	; (adr r3, 8001cdc <eeprom_restore+0xfc>)
 8001bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bfc:	e02c      	b.n	8001c58 <eeprom_restore+0x78>
	{
		memcpy(&data, (uint32_t *)(start_address+32*index), sizeof(uint64_t));
 8001bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c00:	015b      	lsls	r3, r3, #5
 8001c02:	4a35      	ldr	r2, [pc, #212]	; (8001cd8 <eeprom_restore+0xf8>)
 8001c04:	4413      	add	r3, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c0c:	2208      	movs	r2, #8
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f00c f80e 	bl	800dc30 <memcpy>
		uint32_t temp = data&0xFFFFFFFF;
 8001c14:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c18:	4613      	mov	r3, r2
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t temp2 = data>>32;
 8001c1c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	000a      	movs	r2, r1
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		float value;
		float value2;
		memcpy(&value,&temp,sizeof(uint32_t));
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
 8001c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
		memcpy(&value2,&temp2,sizeof(uint32_t));
 8001c36:	623b      	str	r3, [r7, #32]
		float_regs[index] = value;
 8001c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4413      	add	r3, r2
 8001c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c42:	601a      	str	r2, [r3, #0]
		float_regs[index+1] = value2;
 8001c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c46:	3301      	adds	r3, #1
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	6a3a      	ldr	r2, [r7, #32]
 8001c50:	601a      	str	r2, [r3, #0]
	for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8001c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c54:	3302      	adds	r3, #2
 8001c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d3ce      	bcc.n	8001bfe <eeprom_restore+0x1e>
	}
	for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8001c60:	2300      	movs	r3, #0
 8001c62:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c64:	e02e      	b.n	8001cc4 <eeprom_restore+0xe4>
	{

		memcpy(&data, (uint32_t *)(start_address+32*(index+float_size)), sizeof(uint64_t));
 8001c66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	015b      	lsls	r3, r3, #5
 8001c6e:	4a1a      	ldr	r2, [pc, #104]	; (8001cd8 <eeprom_restore+0xf8>)
 8001c70:	4413      	add	r3, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c78:	2208      	movs	r2, #8
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f00b ffd8 	bl	800dc30 <memcpy>
		uint32_t temp = data&0xFFFFFFFF;
 8001c80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c84:	4613      	mov	r3, r2
 8001c86:	61fb      	str	r3, [r7, #28]
		uint32_t temp2 = data>>32;
 8001c88:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	000a      	movs	r2, r1
 8001c96:	2300      	movs	r3, #0
 8001c98:	4613      	mov	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
		int value;
		int value2;
		memcpy(&value,&temp,sizeof(uint32_t));
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	69bb      	ldr	r3, [r7, #24]
		memcpy(&value2,&temp2,sizeof(uint32_t));
 8001ca2:	613b      	str	r3, [r7, #16]
		int_regs[index] = value;
 8001ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	4413      	add	r3, r2
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	601a      	str	r2, [r3, #0]
		int_regs[index+1] = value2;
 8001cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	601a      	str	r2, [r3, #0]
	for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8001cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc0:	3302      	adds	r3, #2
 8001cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d3cc      	bcc.n	8001c66 <eeprom_restore+0x86>
	}

	return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3740      	adds	r7, #64	; 0x40
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	0801d000 	.word	0x0801d000
 8001cdc:	deadbeef 	.word	0xdeadbeef
	...

08001ce8 <eeprom_store>:

HAL_StatusTypeDef eeprom_store(float const * float_regs, uint32_t float_size, int const * int_regs, uint32_t int_size)
{
 8001ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cec:	b0a2      	sub	sp, #136	; 0x88
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6278      	str	r0, [r7, #36]	; 0x24
 8001cf2:	6239      	str	r1, [r7, #32]
 8001cf4:	61fa      	str	r2, [r7, #28]
 8001cf6:	61bb      	str	r3, [r7, #24]
	HAL_FLASH_Unlock();
 8001cf8:	f006 fab4 	bl	8008264 <HAL_FLASH_Unlock>
	// erase the last page of bank1 (STM32G43x : 1 bank, 64 pages, 2kB per page, 64-bit data)
	{
		FLASH_EraseInitTypeDef erase ={FLASH_TYPEERASE_PAGES,FLASH_BANK_1,page_nb,5};
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	643b      	str	r3, [r7, #64]	; 0x40
 8001d00:	2301      	movs	r3, #1
 8001d02:	647b      	str	r3, [r7, #68]	; 0x44
 8001d04:	233a      	movs	r3, #58	; 0x3a
 8001d06:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d08:	2305      	movs	r3, #5
 8001d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
		uint32_t page_error = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&erase, &page_error);
 8001d10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d14:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	f006 fb9a 	bl	8008454 <HAL_FLASHEx_Erase>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if(result!=HAL_OK)
 8001d26:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d004      	beq.n	8001d38 <eeprom_store+0x50>
		{
			HAL_FLASH_Lock();
 8001d2e:	f006 fabb 	bl	80082a8 <HAL_FLASH_Lock>
			return result;
 8001d32:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d36:	e0bd      	b.n	8001eb4 <eeprom_store+0x1cc>
		}
	}
	// write the last page
	{
		uint64_t data = 0xDEADBEEF;
 8001d38:	a362      	add	r3, pc, #392	; (adr r3, 8001ec4 <eeprom_store+0x1dc>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001d48:	e052      	b.n	8001df0 <eeprom_store+0x108>
		{
			union UN {float a; uint32_t b;};
			union UN un1;
			union UN un2;
			un1.a = float_regs[index];
 8001d4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d52:	4413      	add	r3, r2
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	63bb      	str	r3, [r7, #56]	; 0x38
			un2.a = float_regs[index+1];
 8001d58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d62:	4413      	add	r3, r2
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
			uint64_t temp = un2.b;
 8001d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	617a      	str	r2, [r7, #20]
 8001d70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d74:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			data = (temp<<32)|un1.b;
 8001d78:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d7c:	f04f 0000 	mov.w	r0, #0
 8001d80:	f04f 0100 	mov.w	r1, #0
 8001d84:	0011      	movs	r1, r2
 8001d86:	2000      	movs	r0, #0
 8001d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	4698      	mov	r8, r3
 8001d8e:	4691      	mov	r9, r2
 8001d90:	ea40 0308 	orr.w	r3, r0, r8
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	ea41 0309 	orr.w	r3, r1, r9
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001da0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			HAL_StatusTypeDef result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,start_address+index*32,data);
 8001da4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001da8:	015b      	lsls	r3, r3, #5
 8001daa:	4a45      	ldr	r2, [pc, #276]	; (8001ec0 <eeprom_store+0x1d8>)
 8001dac:	1899      	adds	r1, r3, r2
 8001dae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001db2:	2000      	movs	r0, #0
 8001db4:	f006 fa00 	bl	80081b8 <HAL_FLASH_Program>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(result!=HAL_OK)
 8001dbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00f      	beq.n	8001de6 <eeprom_store+0xfe>
			{
				uint32_t error = HAL_FLASH_GetError();
 8001dc6:	f006 fa89 	bl	80082dc <HAL_FLASH_GetError>
 8001dca:	6538      	str	r0, [r7, #80]	; 0x50
				if(error)
 8001dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d004      	beq.n	8001ddc <eeprom_store+0xf4>
				{
					HAL_FLASH_Lock();
 8001dd2:	f006 fa69 	bl	80082a8 <HAL_FLASH_Lock>
					return error;
 8001dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	e06b      	b.n	8001eb4 <eeprom_store+0x1cc>
				}
				HAL_FLASH_Lock();
 8001ddc:	f006 fa64 	bl	80082a8 <HAL_FLASH_Lock>
				return result;
 8001de0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001de4:	e066      	b.n	8001eb4 <eeprom_store+0x1cc>
		for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8001de6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dea:	3302      	adds	r3, #2
 8001dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001df0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d3a7      	bcc.n	8001d4a <eeprom_store+0x62>
			}
		}
		for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e00:	e050      	b.n	8001ea4 <eeprom_store+0x1bc>
		{
			union UN {int a; uint32_t b;};
			union UN un1;
			union UN un2;
			un1.a = int_regs[index];
 8001e02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	69fa      	ldr	r2, [r7, #28]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
			un2.a = int_regs[index+1];
 8001e10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e14:	3301      	adds	r3, #1
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
			uint64_t temp = un2.b;
 8001e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e22:	2200      	movs	r2, #0
 8001e24:	603b      	str	r3, [r7, #0]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e2c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			data = (temp<<32)|un1.b;
 8001e30:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	2200      	movs	r2, #0
 8001e40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e42:	2000      	movs	r0, #0
 8001e44:	460c      	mov	r4, r1
 8001e46:	4605      	mov	r5, r0
 8001e48:	ea42 0a04 	orr.w	sl, r2, r4
 8001e4c:	ea43 0b05 	orr.w	fp, r3, r5
 8001e50:	e9c7 ab1c 	strd	sl, fp, [r7, #112]	; 0x70
			HAL_StatusTypeDef result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,start_address+(float_size+index)*32,data);
 8001e54:	6a3a      	ldr	r2, [r7, #32]
 8001e56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e5a:	4413      	add	r3, r2
 8001e5c:	015b      	lsls	r3, r3, #5
 8001e5e:	4a18      	ldr	r2, [pc, #96]	; (8001ec0 <eeprom_store+0x1d8>)
 8001e60:	1899      	adds	r1, r3, r2
 8001e62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001e66:	2000      	movs	r0, #0
 8001e68:	f006 f9a6 	bl	80081b8 <HAL_FLASH_Program>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			if(result!=HAL_OK)
 8001e72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00f      	beq.n	8001e9a <eeprom_store+0x1b2>
			{
				uint32_t error = HAL_FLASH_GetError();
 8001e7a:	f006 fa2f 	bl	80082dc <HAL_FLASH_GetError>
 8001e7e:	6638      	str	r0, [r7, #96]	; 0x60
				if(error)
 8001e80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d004      	beq.n	8001e90 <eeprom_store+0x1a8>
				{
					HAL_FLASH_Lock();
 8001e86:	f006 fa0f 	bl	80082a8 <HAL_FLASH_Lock>
					return error;
 8001e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	e011      	b.n	8001eb4 <eeprom_store+0x1cc>
				}
				HAL_FLASH_Lock();
 8001e90:	f006 fa0a 	bl	80082a8 <HAL_FLASH_Lock>
				return result;
 8001e94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e98:	e00c      	b.n	8001eb4 <eeprom_store+0x1cc>
		for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8001e9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e9e:	3302      	adds	r3, #2
 8001ea0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ea4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d3a9      	bcc.n	8001e02 <eeprom_store+0x11a>
			}
		}
	}
	HAL_FLASH_Lock();
 8001eae:	f006 f9fb 	bl	80082a8 <HAL_FLASH_Lock>
	return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3788      	adds	r7, #136	; 0x88
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ebe:	bf00      	nop
 8001ec0:	0801d000 	.word	0x0801d000
 8001ec4:	deadbeef 	.word	0xdeadbeef
 8001ec8:	00000000 	.word	0x00000000

08001ecc <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001ed0:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001ed2:	4a20      	ldr	r2, [pc, #128]	; (8001f54 <MX_FDCAN1_Init+0x88>)
 8001ed4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV4;
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001ed8:	2202      	movs	r2, #2
 8001eda:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001edc:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001ee8:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8001eee:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001ef4:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001efc:	2203      	movs	r2, #3
 8001efe:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001f00:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001f08:	220b      	movs	r2, #11
 8001f0a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001f0c:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001f0e:	2202      	movs	r2, #2
 8001f10:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001f12:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001f18:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001f24:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8001f2a:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001f30:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001f3c:	4804      	ldr	r0, [pc, #16]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001f3e:	f005 fd3d 	bl	80079bc <HAL_FDCAN_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001f48:	f002 fc5f 	bl	800480a <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	200003b8 	.word	0x200003b8
 8001f54:	40006400 	.word	0x40006400

08001f58 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a26      	ldr	r2, [pc, #152]	; (8002010 <HAL_FDCAN_MspInit+0xb8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d146      	bne.n	8002008 <HAL_FDCAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f7a:	4b26      	ldr	r3, [pc, #152]	; (8002014 <HAL_FDCAN_MspInit+0xbc>)
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	4a25      	ldr	r2, [pc, #148]	; (8002014 <HAL_FDCAN_MspInit+0xbc>)
 8001f80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f84:	6593      	str	r3, [r2, #88]	; 0x58
 8001f86:	4b23      	ldr	r3, [pc, #140]	; (8002014 <HAL_FDCAN_MspInit+0xbc>)
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <HAL_FDCAN_MspInit+0xbc>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	4a1f      	ldr	r2, [pc, #124]	; (8002014 <HAL_FDCAN_MspInit+0xbc>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_FDCAN_MspInit+0xbc>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001faa:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <HAL_FDCAN_MspInit+0xbc>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	4a19      	ldr	r2, [pc, #100]	; (8002014 <HAL_FDCAN_MspInit+0xbc>)
 8001fb0:	f043 0302 	orr.w	r3, r3, #2
 8001fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <HAL_FDCAN_MspInit+0xbc>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001fc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001fd4:	2309      	movs	r3, #9
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe2:	f006 fb5b 	bl	800869c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001ff8:	2309      	movs	r3, #9
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4619      	mov	r1, r3
 8002002:	4805      	ldr	r0, [pc, #20]	; (8002018 <HAL_FDCAN_MspInit+0xc0>)
 8002004:	f006 fb4a 	bl	800869c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002008:	bf00      	nop
 800200a:	3728      	adds	r7, #40	; 0x28
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40006400 	.word	0x40006400
 8002014:	40021000 	.word	0x40021000
 8002018:	48000400 	.word	0x48000400

0800201c <can_rx_init>:
  /* USER CODE END FDCAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void can_rx_init(CANRxMessage *msg){
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af02      	add	r7, sp, #8
 8002022:	6078      	str	r0, [r7, #4]
	msg->filter.IdType = FDCAN_STANDARD_ID;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	635a      	str	r2, [r3, #52]	; 0x34
	msg->filter.FilterIndex = 0;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	639a      	str	r2, [r3, #56]	; 0x38
	msg->filter.FilterType = FDCAN_FILTER_RANGE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	63da      	str	r2, [r3, #60]	; 0x3c
	msg->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
	msg->filter.FilterID1 = CAN_ID;
 800203c:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <can_rx_init+0x58>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	461a      	mov	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	645a      	str	r2, [r3, #68]	; 0x44
	msg->filter.FilterID2 = CAN_ID;
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <can_rx_init+0x58>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	461a      	mov	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	649a      	str	r2, [r3, #72]	; 0x48
	HAL_FDCAN_ConfigFilter(&CAN_H, &msg->filter);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3334      	adds	r3, #52	; 0x34
 8002054:	4619      	mov	r1, r3
 8002056:	4808      	ldr	r0, [pc, #32]	; (8002078 <can_rx_init+0x5c>)
 8002058:	f005 fe0a 	bl	8007c70 <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&CAN_H,3,3,0,1);
 800205c:	2301      	movs	r3, #1
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	2300      	movs	r3, #0
 8002062:	2203      	movs	r2, #3
 8002064:	2103      	movs	r1, #3
 8002066:	4804      	ldr	r0, [pc, #16]	; (8002078 <can_rx_init+0x5c>)
 8002068:	f005 fe5c 	bl	8007d24 <HAL_FDCAN_ConfigGlobalFilter>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20004dec 	.word	0x20004dec
 8002078:	200003b8 	.word	0x200003b8

0800207c <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
	msg->tx_header.Identifier = CAN_MASTER;
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <can_tx_init+0x50>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	461a      	mov	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	609a      	str	r2, [r3, #8]
	msg->tx_header.DataLength = FDCAN_DLC_BYTES_6;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8002094:	615a      	str	r2, [r3, #20]
	msg->tx_header.IdType = FDCAN_STANDARD_ID;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	60da      	str	r2, [r3, #12]
	msg->tx_header.TxFrameType = FDCAN_DATA_FRAME;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	611a      	str	r2, [r3, #16]
	msg->tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
	msg->tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
	msg->tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	621a      	str	r2, [r3, #32]
	msg->tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	625a      	str	r2, [r3, #36]	; 0x24
	msg->tx_header.MessageMarker = 0;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	20004dec 	.word	0x20004dec

080020d0 <pack_reply>:
/// 0: [position[15-8]]
/// 1: [position[7-0]]
/// 2: [velocity[11-4]]
/// 3: [velocity[3-0], current[11-8]]
/// 4: [current[7-0]]
void pack_reply(CANTxMessage *msg, uint8_t id, float p, float v, float t){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6178      	str	r0, [r7, #20]
 80020d8:	460b      	mov	r3, r1
 80020da:	ed87 0a03 	vstr	s0, [r7, #12]
 80020de:	edc7 0a02 	vstr	s1, [r7, #8]
 80020e2:	ed87 1a01 	vstr	s2, [r7, #4]
 80020e6:	74fb      	strb	r3, [r7, #19]
    int p_int = float_to_uint(p, P_MIN, P_MAX, 16);
 80020e8:	4b2a      	ldr	r3, [pc, #168]	; (8002194 <pack_reply+0xc4>)
 80020ea:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80020ee:	4b29      	ldr	r3, [pc, #164]	; (8002194 <pack_reply+0xc4>)
 80020f0:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80020f4:	2010      	movs	r0, #16
 80020f6:	eeb0 1a47 	vmov.f32	s2, s14
 80020fa:	eef0 0a67 	vmov.f32	s1, s15
 80020fe:	ed97 0a03 	vldr	s0, [r7, #12]
 8002102:	f002 fc70 	bl	80049e6 <float_to_uint>
 8002106:	6278      	str	r0, [r7, #36]	; 0x24
    int v_int = float_to_uint(v, V_MIN, V_MAX, 12);
 8002108:	4b22      	ldr	r3, [pc, #136]	; (8002194 <pack_reply+0xc4>)
 800210a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800210e:	4b21      	ldr	r3, [pc, #132]	; (8002194 <pack_reply+0xc4>)
 8002110:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002114:	200c      	movs	r0, #12
 8002116:	eeb0 1a47 	vmov.f32	s2, s14
 800211a:	eef0 0a67 	vmov.f32	s1, s15
 800211e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002122:	f002 fc60 	bl	80049e6 <float_to_uint>
 8002126:	6238      	str	r0, [r7, #32]
    int t_int = float_to_uint(t, -T_MAX, T_MAX, 12);
 8002128:	4b1a      	ldr	r3, [pc, #104]	; (8002194 <pack_reply+0xc4>)
 800212a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800212e:	eef1 7a67 	vneg.f32	s15, s15
 8002132:	4b18      	ldr	r3, [pc, #96]	; (8002194 <pack_reply+0xc4>)
 8002134:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8002138:	200c      	movs	r0, #12
 800213a:	eeb0 1a47 	vmov.f32	s2, s14
 800213e:	eef0 0a67 	vmov.f32	s1, s15
 8002142:	ed97 0a01 	vldr	s0, [r7, #4]
 8002146:	f002 fc4e 	bl	80049e6 <float_to_uint>
 800214a:	61f8      	str	r0, [r7, #28]
    msg->data[0] = id;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	7cfa      	ldrb	r2, [r7, #19]
 8002150:	705a      	strb	r2, [r3, #1]
    msg->data[1] = p_int>>8;
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	121b      	asrs	r3, r3, #8
 8002156:	b2da      	uxtb	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	709a      	strb	r2, [r3, #2]
    msg->data[2] = p_int&0xFF;
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	b2da      	uxtb	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	70da      	strb	r2, [r3, #3]
    msg->data[3] = v_int>>4;
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	111b      	asrs	r3, r3, #4
 8002168:	b2da      	uxtb	r2, r3
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	711a      	strb	r2, [r3, #4]
    msg->data[4] = ((v_int&0xF)<<4) + (t_int>>8);
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	b2da      	uxtb	r2, r3
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	121b      	asrs	r3, r3, #8
 8002178:	b2db      	uxtb	r3, r3
 800217a:	4413      	add	r3, r2
 800217c:	b2da      	uxtb	r2, r3
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	715a      	strb	r2, [r3, #5]
    msg->data[5] = t_int&0xFF;
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	719a      	strb	r2, [r3, #6]
    }
 800218a:	bf00      	nop
 800218c:	3728      	adds	r7, #40	; 0x28
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20004cec 	.word	0x20004cec

08002198 <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 8002198:	b084      	sub	sp, #16
 800219a:	b590      	push	{r4, r7, lr}
 800219c:	b087      	sub	sp, #28
 800219e:	af00      	add	r7, sp, #0
 80021a0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80021a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int p_int = (msg.data[0]<<8)|msg.data[1];
 80021a8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80021ac:	021b      	lsls	r3, r3, #8
 80021ae:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80021b2:	4313      	orrs	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 80021b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80021c0:	0912      	lsrs	r2, r2, #4
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 80021c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80021d2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 80021da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80021e4:	0912      	lsrs	r2, r2, #4
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60bb      	str	r3, [r7, #8]
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 80021ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80021f6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80021fa:	4313      	orrs	r3, r2
 80021fc:	607b      	str	r3, [r7, #4]

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 80021fe:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <unpack_cmd+0x138>)
 8002200:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002204:	4b32      	ldr	r3, [pc, #200]	; (80022d0 <unpack_cmd+0x138>)
 8002206:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800220a:	2110      	movs	r1, #16
 800220c:	eef0 0a47 	vmov.f32	s1, s14
 8002210:	eeb0 0a67 	vmov.f32	s0, s15
 8002214:	6978      	ldr	r0, [r7, #20]
 8002216:	f002 fc19 	bl	8004a4c <uint_to_float>
 800221a:	eef0 7a40 	vmov.f32	s15, s0
 800221e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002220:	edc3 7a00 	vstr	s15, [r3]
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8002224:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <unpack_cmd+0x138>)
 8002226:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800222a:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <unpack_cmd+0x138>)
 800222c:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002232:	1d1c      	adds	r4, r3, #4
 8002234:	210c      	movs	r1, #12
 8002236:	eef0 0a47 	vmov.f32	s1, s14
 800223a:	eeb0 0a67 	vmov.f32	s0, s15
 800223e:	6938      	ldr	r0, [r7, #16]
 8002240:	f002 fc04 	bl	8004a4c <uint_to_float>
 8002244:	eef0 7a40 	vmov.f32	s15, s0
 8002248:	edc4 7a00 	vstr	s15, [r4]
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <unpack_cmd+0x138>)
 800224e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002254:	f103 0408 	add.w	r4, r3, #8
 8002258:	210c      	movs	r1, #12
 800225a:	eef0 0a67 	vmov.f32	s1, s15
 800225e:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80022d4 <unpack_cmd+0x13c>
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f002 fbf2 	bl	8004a4c <uint_to_float>
 8002268:	eef0 7a40 	vmov.f32	s15, s0
 800226c:	edc4 7a00 	vstr	s15, [r4]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <unpack_cmd+0x138>)
 8002272:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002278:	f103 040c 	add.w	r4, r3, #12
 800227c:	210c      	movs	r1, #12
 800227e:	eef0 0a67 	vmov.f32	s1, s15
 8002282:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80022d4 <unpack_cmd+0x13c>
 8002286:	68b8      	ldr	r0, [r7, #8]
 8002288:	f002 fbe0 	bl	8004a4c <uint_to_float>
 800228c:	eef0 7a40 	vmov.f32	s15, s0
 8002290:	edc4 7a00 	vstr	s15, [r4]
        commands[4] = uint_to_float(t_int, -T_MAX, T_MAX, 12);
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <unpack_cmd+0x138>)
 8002296:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800229a:	eef1 7a67 	vneg.f32	s15, s15
 800229e:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <unpack_cmd+0x138>)
 80022a0:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80022a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022a6:	f103 0410 	add.w	r4, r3, #16
 80022aa:	210c      	movs	r1, #12
 80022ac:	eef0 0a47 	vmov.f32	s1, s14
 80022b0:	eeb0 0a67 	vmov.f32	s0, s15
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f002 fbc9 	bl	8004a4c <uint_to_float>
 80022ba:	eef0 7a40 	vmov.f32	s15, s0
 80022be:	edc4 7a00 	vstr	s15, [r4]

//    printf("Received   ");
//    printf("%.3f  %.3f  %.3f  %.3f  %.3f",commands[0], commands[1], commands[2], commands[3], commands[4]);
//    printf("\n\r");
    }
 80022c2:	bf00      	nop
 80022c4:	371c      	adds	r7, #28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80022cc:	b004      	add	sp, #16
 80022ce:	4770      	bx	lr
 80022d0:	20004cec 	.word	0x20004cec
 80022d4:	00000000 	.word	0x00000000

080022d8 <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e4:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ea:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f0:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80022f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002300:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800230a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800230e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002312:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800231c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002324:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002328:	4b3b      	ldr	r3, [pc, #236]	; (8002418 <set_dtc+0x140>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d136      	bne.n	800239e <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002330:	4b3a      	ldr	r3, [pc, #232]	; (800241c <set_dtc+0x144>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800233e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002346:	4b35      	ldr	r3, [pc, #212]	; (800241c <set_dtc+0x144>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800234e:	ee17 2a90 	vmov	r2, s15
 8002352:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002354:	4b31      	ldr	r3, [pc, #196]	; (800241c <set_dtc+0x144>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	ee07 3a90 	vmov	s15, r3
 800235e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002362:	edd7 7a04 	vldr	s15, [r7, #16]
 8002366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800236a:	4b2c      	ldr	r3, [pc, #176]	; (800241c <set_dtc+0x144>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002372:	ee17 2a90 	vmov	r2, s15
 8002376:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 8002378:	4b28      	ldr	r3, [pc, #160]	; (800241c <set_dtc+0x144>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237e:	ee07 3a90 	vmov	s15, r3
 8002382:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002386:	edd7 7a03 	vldr	s15, [r7, #12]
 800238a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238e:	4b23      	ldr	r3, [pc, #140]	; (800241c <set_dtc+0x144>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002396:	ee17 2a90 	vmov	r2, s15
 800239a:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 800239c:	e035      	b.n	800240a <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 800239e:	4b1f      	ldr	r3, [pc, #124]	; (800241c <set_dtc+0x144>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	ee07 3a90 	vmov	s15, r3
 80023a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80023b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <set_dtc+0x144>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023bc:	ee17 2a90 	vmov	r2, s15
 80023c0:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 80023c2:	4b16      	ldr	r3, [pc, #88]	; (800241c <set_dtc+0x144>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	ee07 3a90 	vmov	s15, r3
 80023cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80023d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d8:	4b10      	ldr	r3, [pc, #64]	; (800241c <set_dtc+0x144>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023e0:	ee17 2a90 	vmov	r2, s15
 80023e4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 80023e6:	4b0d      	ldr	r3, [pc, #52]	; (800241c <set_dtc+0x144>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	ee07 3a90 	vmov	s15, r3
 80023f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80023f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023fc:	4b07      	ldr	r3, [pc, #28]	; (800241c <set_dtc+0x144>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002404:	ee17 2a90 	vmov	r2, s15
 8002408:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800240a:	bf00      	nop
 800240c:	371c      	adds	r7, #28
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20004dec 	.word	0x20004dec
 800241c:	200050a4 	.word	0x200050a4

08002420 <analog_sample>:

void analog_sample (ControllerStruct *controller){
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	/* Sample ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002428:	4b41      	ldr	r3, [pc, #260]	; (8002530 <analog_sample+0x110>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d112      	bne.n	8002456 <analog_sample+0x36>
		controller->adc_a_raw = controller->ADC1_Val[0];
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 8002436:	461a      	mov	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = controller->ADC2_Val[0];
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 8002442:	461a      	mov	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	609a      	str	r2, [r3, #8]
		controller->adc_c_raw = controller->ADC2_Val[1];
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800244e:	461a      	mov	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	60da      	str	r2, [r3, #12]
 8002454:	e011      	b.n	800247a <analog_sample+0x5a>
	}
	else{
		controller->adc_a_raw = controller->ADC2_Val[0];
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 800245c:	461a      	mov	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = controller->ADC1_Val[0];
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 8002468:	461a      	mov	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	609a      	str	r2, [r3, #8]
		controller->adc_c_raw = controller->ADC2_Val[1];
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 8002474:	461a      	mov	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	60da      	str	r2, [r3, #12]
	}

    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)controller->ADC1_Val, 2);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8002480:	2202      	movs	r2, #2
 8002482:	4619      	mov	r1, r3
 8002484:	482b      	ldr	r0, [pc, #172]	; (8002534 <analog_sample+0x114>)
 8002486:	f003 ffd5 	bl	8006434 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc2, (uint32_t *)controller->ADC2_Val, 2);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8002490:	2202      	movs	r2, #2
 8002492:	4619      	mov	r1, r3
 8002494:	4828      	ldr	r0, [pc, #160]	; (8002538 <analog_sample+0x118>)
 8002496:	f003 ffcd 	bl	8006434 <HAL_ADC_Start_DMA>

	controller->adc_vbus_raw = controller->ADC1_Val[1];
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	; 0x2fa
 80024a0:	461a      	mov	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024b2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800253c <analog_sample+0x11c>
 80024b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	edc3 7a08 	vstr	s15, [r3, #32]

	controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	ee07 3a90 	vmov	s15, r3
 80024d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002540 <analog_sample+0x120>
 80024d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	edc3 7a05 	vstr	s15, [r3, #20]
	controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002540 <analog_sample+0x120>
 80024fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	edc3 7a06 	vstr	s15, [r3, #24]
	controller->i_c = I_SCALE*(float)(controller->adc_c_raw - controller->adc_c_offset);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	ee07 3a90 	vmov	s15, r3
 8002514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002518:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002540 <analog_sample+0x120>
 800251c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20004dec 	.word	0x20004dec
 8002534:	2000021c 	.word	0x2000021c
 8002538:	20000288 	.word	0x20000288
 800253c:	3c092822 	.word	0x3c092822
 8002540:	bcf0aa87 	.word	0xbcf0aa87

08002544 <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0
 800254a:	ed87 0a05 	vstr	s0, [r7, #20]
 800254e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002552:	ed87 1a03 	vstr	s2, [r7, #12]
 8002556:	60b8      	str	r0, [r7, #8]
 8002558:	6079      	str	r1, [r7, #4]
 800255a:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 800255c:	ed97 0a05 	vldr	s0, [r7, #20]
 8002560:	f002 fae0 	bl	8004b24 <cos_lut>
 8002564:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002568:	ed97 0a05 	vldr	s0, [r7, #20]
 800256c:	f002 faa0 	bl	8004ab0 <sin_lut>
 8002570:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 8002574:	ed97 7a07 	vldr	s14, [r7, #28]
 8002578:	edd7 7a04 	vldr	s15, [r7, #16]
 800257c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002580:	edd7 6a06 	vldr	s13, [r7, #24]
 8002584:	edd7 7a03 	vldr	s15, [r7, #12]
 8002588:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800258c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 8002596:	edd7 7a06 	vldr	s15, [r7, #24]
 800259a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002644 <abc+0x100>
 800259e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80025a6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80025aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80025ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80025b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80025be:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002648 <abc+0x104>
 80025c2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80025c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80025ca:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80025ce:	ee67 7a86 	vmul.f32	s15, s15, s12
 80025d2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80025d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80025da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 80025e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80025ec:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002648 <abc+0x104>
 80025f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80025f8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80025fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002600:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002604:	edd7 7a04 	vldr	s15, [r7, #16]
 8002608:	ee27 7a27 	vmul.f32	s14, s14, s15
 800260c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002610:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002644 <abc+0x100>
 8002614:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002618:	edd7 7a06 	vldr	s15, [r7, #24]
 800261c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002620:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002624:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002628:	edd7 7a03 	vldr	s15, [r7, #12]
 800262c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002630:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	edc3 7a00 	vstr	s15, [r3]
    }
 800263a:	bf00      	nop
 800263c:	3720      	adds	r7, #32
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	3f5db3d7 	.word	0x3f5db3d7
 8002648:	bf5db3d7 	.word	0xbf5db3d7

0800264c <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	ed87 0a05 	vstr	s0, [r7, #20]
 8002656:	edc7 0a04 	vstr	s1, [r7, #16]
 800265a:	ed87 1a03 	vstr	s2, [r7, #12]
 800265e:	edc7 1a02 	vstr	s3, [r7, #8]
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 8002666:	ed97 0a05 	vldr	s0, [r7, #20]
 800266a:	f002 fa5b 	bl	8004b24 <cos_lut>
 800266e:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002672:	ed97 0a05 	vldr	s0, [r7, #20]
 8002676:	f002 fa1b 	bl	8004ab0 <sin_lut>
 800267a:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 800267e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002682:	edd7 7a04 	vldr	s15, [r7, #16]
 8002686:	ee27 7a27 	vmul.f32	s14, s14, s15
 800268a:	edd7 7a06 	vldr	s15, [r7, #24]
 800268e:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002760 <dq0+0x114>
 8002692:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002696:	edd7 7a07 	vldr	s15, [r7, #28]
 800269a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800269e:	ee67 7a86 	vmul.f32	s15, s15, s12
 80026a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80026a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80026aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80026b6:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002764 <dq0+0x118>
 80026ba:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80026be:	edd7 7a07 	vldr	s15, [r7, #28]
 80026c2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80026c6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80026ca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80026ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80026d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026da:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002768 <dq0+0x11c>
 80026de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 80026e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80026ec:	eeb1 7a67 	vneg.f32	s14, s15
 80026f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80026f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80026fc:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002764 <dq0+0x118>
 8002700:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002704:	edd7 7a06 	vldr	s15, [r7, #24]
 8002708:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800270c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002710:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002714:	edd7 7a03 	vldr	s15, [r7, #12]
 8002718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800271c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002720:	edd7 7a07 	vldr	s15, [r7, #28]
 8002724:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002760 <dq0+0x114>
 8002728:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800272c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002730:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002734:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002738:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800273c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002740:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002748:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002768 <dq0+0x11c>
 800274c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	edc3 7a00 	vstr	s15, [r3]

    }
 8002756:	bf00      	nop
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	3f5db3d7 	.word	0x3f5db3d7
 8002764:	bf5db3d7 	.word	0xbf5db3d7
 8002768:	3f2aaaab 	.word	0x3f2aaaab

0800276c <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 800276c:	b580      	push	{r7, lr}
 800276e:	ed2d 8b02 	vpush	{d8}
 8002772:	b08a      	sub	sp, #40	; 0x28
 8002774:	af00      	add	r7, sp, #0
 8002776:	ed87 0a07 	vstr	s0, [r7, #28]
 800277a:	edc7 0a06 	vstr	s1, [r7, #24]
 800277e:	ed87 1a05 	vstr	s2, [r7, #20]
 8002782:	edc7 1a04 	vstr	s3, [r7, #16]
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 800278c:	ed97 1a04 	vldr	s2, [r7, #16]
 8002790:	edd7 0a05 	vldr	s1, [r7, #20]
 8002794:	ed97 0a06 	vldr	s0, [r7, #24]
 8002798:	f002 f8a8 	bl	80048ec <fminf3>
 800279c:	eeb0 8a40 	vmov.f32	s16, s0
 80027a0:	ed97 1a04 	vldr	s2, [r7, #16]
 80027a4:	edd7 0a05 	vldr	s1, [r7, #20]
 80027a8:	ed97 0a06 	vldr	s0, [r7, #24]
 80027ac:	f002 f86a 	bl	8004884 <fmaxf3>
 80027b0:	eef0 7a40 	vmov.f32	s15, s0
 80027b4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80027b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80027bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 80027c4:	4b41      	ldr	r3, [pc, #260]	; (80028cc <svm+0x160>)
 80027c6:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80027c8:	ed97 7a06 	vldr	s14, [r7, #24]
 80027cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80027d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027dc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80028d0 <svm+0x164>
 80027e0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80027e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80027e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80027f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f4:	eddf 0a37 	vldr	s1, [pc, #220]	; 80028d4 <svm+0x168>
 80027f8:	eeb0 0a67 	vmov.f32	s0, s15
 80027fc:	f002 f80a 	bl	8004814 <fast_fmaxf>
 8002800:	eef0 7a40 	vmov.f32	s15, s0
 8002804:	eddf 0a34 	vldr	s1, [pc, #208]	; 80028d8 <svm+0x16c>
 8002808:	eeb0 0a67 	vmov.f32	s0, s15
 800280c:	f002 f81e 	bl	800484c <fast_fminf>
 8002810:	eef0 7a40 	vmov.f32	s15, s0
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 800281a:	ed97 7a05 	vldr	s14, [r7, #20]
 800281e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002826:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800282a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800282e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80028d0 <svm+0x164>
 8002832:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002836:	edd7 7a07 	vldr	s15, [r7, #28]
 800283a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800283e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002846:	eddf 0a23 	vldr	s1, [pc, #140]	; 80028d4 <svm+0x168>
 800284a:	eeb0 0a67 	vmov.f32	s0, s15
 800284e:	f001 ffe1 	bl	8004814 <fast_fmaxf>
 8002852:	eef0 7a40 	vmov.f32	s15, s0
 8002856:	eddf 0a20 	vldr	s1, [pc, #128]	; 80028d8 <svm+0x16c>
 800285a:	eeb0 0a67 	vmov.f32	s0, s15
 800285e:	f001 fff5 	bl	800484c <fast_fminf>
 8002862:	eef0 7a40 	vmov.f32	s15, s0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 800286c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002870:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002874:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002878:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800287c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002880:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80028d0 <svm+0x164>
 8002884:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002888:	edd7 7a07 	vldr	s15, [r7, #28]
 800288c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002890:	edd7 7a08 	vldr	s15, [r7, #32]
 8002894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002898:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80028d4 <svm+0x168>
 800289c:	eeb0 0a67 	vmov.f32	s0, s15
 80028a0:	f001 ffb8 	bl	8004814 <fast_fmaxf>
 80028a4:	eef0 7a40 	vmov.f32	s15, s0
 80028a8:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80028d8 <svm+0x16c>
 80028ac:	eeb0 0a67 	vmov.f32	s0, s15
 80028b0:	f001 ffcc 	bl	800484c <fast_fminf>
 80028b4:	eef0 7a40 	vmov.f32	s15, s0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	edc3 7a00 	vstr	s15, [r3]

    }
 80028be:	bf00      	nop
 80028c0:	3728      	adds	r7, #40	; 0x28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	ecbd 8b02 	vpop	{d8}
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	3ef0a3d7 	.word	0x3ef0a3d7
 80028d0:	3f933333 	.word	0x3f933333
 80028d4:	00000000 	.word	0x00000000
 80028d8:	3f70a3d7 	.word	0x3f70a3d7

080028dc <zero_current>:

void zero_current(ControllerStruct *controller){
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61fb      	str	r3, [r7, #28]
    int adc_b_offset = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61bb      	str	r3, [r7, #24]
    int adc_c_offset = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
    int n = 1000;
 80028f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f4:	60fb      	str	r3, [r7, #12]
    controller->dtc_u = 0.f;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	659a      	str	r2, [r3, #88]	; 0x58
    controller->dtc_v = 0.f;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_w = 0.f;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	661a      	str	r2, [r3, #96]	; 0x60
    set_dtc(controller);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff fce2 	bl	80022d8 <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8002914:	2300      	movs	r3, #0
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	e014      	b.n	8002944 <zero_current+0x68>
    	analog_sample(controller);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff fd80 	bl	8002420 <analog_sample>
    	adc_a_offset += controller->adc_a_raw;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	4413      	add	r3, r2
 8002928:	61fb      	str	r3, [r7, #28]
    	adc_b_offset += controller->adc_b_raw;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4413      	add	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
    	adc_c_offset += controller->adc_c_raw;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	4413      	add	r3, r2
 800293c:	617b      	str	r3, [r7, #20]
    for (int i = 0; i<n; i++){               // Average n samples
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	3301      	adds	r3, #1
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	429a      	cmp	r2, r3
 800294a:	dbe6      	blt.n	800291a <zero_current+0x3e>
     }
    controller->adc_a_offset = adc_a_offset/n;
 800294c:	69fa      	ldr	r2, [r7, #28]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	fb92 f2f3 	sdiv	r2, r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    controller->adc_b_offset = adc_b_offset/n;
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	fb92 f2f3 	sdiv	r2, r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    controller->adc_c_offset = adc_c_offset/n;
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	fb92 f2f3 	sdiv	r2, r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    }
 8002976:	bf00      	nop
 8002978:	3720      	adds	r7, #32
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a42      	ldr	r2, [pc, #264]	; (8002a94 <init_controller_params+0x114>)
 800298c:	679a      	str	r2, [r3, #120]	; 0x78
    controller->ki_q = KI_Q;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a40      	ldr	r2, [pc, #256]	; (8002a94 <init_controller_params+0x114>)
 8002992:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->k_d = K_SCALE*I_BW;
 8002994:	4b40      	ldr	r3, [pc, #256]	; (8002a98 <init_controller_params+0x118>)
 8002996:	edd3 7a02 	vldr	s15, [r3, #8]
 800299a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002a9c <init_controller_params+0x11c>
 800299e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    controller->k_q = K_SCALE*I_BW;
 80029a8:	4b3b      	ldr	r3, [pc, #236]	; (8002a98 <init_controller_params+0x118>)
 80029aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80029ae:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002a9c <init_controller_params+0x11c>
 80029b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 80029bc:	4b36      	ldr	r3, [pc, #216]	; (8002a98 <init_controller_params+0x118>)
 80029be:	edd3 7a02 	vldr	s15, [r3, #8]
 80029c2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002aa0 <init_controller_params+0x120>
 80029c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ca:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002aa4 <init_controller_params+0x124>
 80029ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->ki_fw = .1f*controller->ki_d;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80029f6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002aa8 <init_controller_params+0x128>
 80029fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
    controller->phase_order = PHASE_ORDER;
 8002a04:	4b29      	ldr	r3, [pc, #164]	; (8002aac <init_controller_params+0x12c>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	e036      	b.n	8002a82 <init_controller_params+0x102>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	ee07 3a90 	vmov	s15, r3
 8002a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a1e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002ab0 <init_controller_params+0x130>
 8002a22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a26:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002ab4 <init_controller_params+0x134>
 8002a2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a2e:	ee16 0a90 	vmov	r0, s13
 8002a32:	f7fd fdb1 	bl	8000598 <__aeabi_f2d>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	ec43 2b10 	vmov	d0, r2, r3
 8002a3e:	f00f fabf 	bl	8011fc0 <exp>
 8002a42:	ec51 0b10 	vmov	r0, r1, d0
 8002a46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <init_controller_params+0x138>)
 8002a4c:	f7fd fdfc 	bl	8000648 <__aeabi_dmul>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4610      	mov	r0, r2
 8002a56:	4619      	mov	r1, r3
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	4b17      	ldr	r3, [pc, #92]	; (8002abc <init_controller_params+0x13c>)
 8002a5e:	f7fd fc3d 	bl	80002dc <__adddf3>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4610      	mov	r0, r2
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f7fe f8e5 	bl	8000c38 <__aeabi_d2f>
 8002a6e:	4601      	mov	r1, r0
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	333c      	adds	r3, #60	; 0x3c
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2b7f      	cmp	r3, #127	; 0x7f
 8002a86:	ddc5      	ble.n	8002a14 <init_controller_params+0x94>
    }
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	3d3851ec 	.word	0x3d3851ec
 8002a98:	20004cec 	.word	0x20004cec
 8002a9c:	38d1b717 	.word	0x38d1b717
 8002aa0:	388bcf64 	.word	0x388bcf64
 8002aa4:	40c90fdb 	.word	0x40c90fdb
 8002aa8:	3dcccccd 	.word	0x3dcccccd
 8002aac:	20004dec 	.word	0x20004dec
 8002ab0:	bc000000 	.word	0xbc000000
 8002ab4:	3d03126f 	.word	0x3d03126f
 8002ab8:	3ff33333 	.word	0x3ff33333
 8002abc:	3ff00000 	.word	0x3ff00000

08002ac0 <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002ac8:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <reset_foc+0xe4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	ee07 3a90 	vmov	s15, r3
 8002ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ada:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ade:	4b31      	ldr	r3, [pc, #196]	; (8002ba4 <reset_foc+0xe4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ae6:	ee17 2a90 	vmov	r2, s15
 8002aea:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002aec:	4b2d      	ldr	r3, [pc, #180]	; (8002ba4 <reset_foc+0xe4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	ee07 3a90 	vmov	s15, r3
 8002af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002afa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002afe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b02:	4b28      	ldr	r3, [pc, #160]	; (8002ba4 <reset_foc+0xe4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b0a:	ee17 2a90 	vmov	r2, s15
 8002b0e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002b10:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <reset_foc+0xe4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	ee07 3a90 	vmov	s15, r3
 8002b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b1e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b26:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <reset_foc+0xe4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b2e:	ee17 2a90 	vmov	r2, s15
 8002b32:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    controller->i_q_des = 0;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller->i_d = 0;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    controller->d_int = 0;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    controller->v_q = 0;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54
    controller->v_d = 0;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	651a      	str	r2, [r3, #80]	; 0x50
    controller->fw_int = 0;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    controller->otw_flag = 0;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

    }
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	200050a4 	.word	0x200050a4

08002ba8 <commutate>:


}

void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity/GR;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8002bc8:	4bd7      	ldr	r3, [pc, #860]	; (8002f28 <commutate+0x380>)
 8002bca:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	edd3 6a03 	vldr	s13, [r3, #12]
 8002bde:	4bd2      	ldr	r3, [pc, #840]	; (8002f28 <commutate+0x380>)
 8002be0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	ed93 7a05 	vldr	s14, [r3, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	edd3 6a06 	vldr	s13, [r3, #24]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	ed93 6a07 	vldr	s12, [r3, #28]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3340      	adds	r3, #64	; 0x40
 8002c10:	4619      	mov	r1, r3
 8002c12:	4610      	mov	r0, r2
 8002c14:	eef0 1a46 	vmov.f32	s3, s12
 8002c18:	eeb0 1a66 	vmov.f32	s2, s13
 8002c1c:	eef0 0a47 	vmov.f32	s1, s14
 8002c20:	eeb0 0a67 	vmov.f32	s0, s15
 8002c24:	f7ff fd12 	bl	800264c <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002c2e:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8002f2c <commutate+0x384>
 8002c32:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002c3c:	eddf 6abc 	vldr	s13, [pc, #752]	; 8002f30 <commutate+0x388>
 8002c40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002c54:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002f2c <commutate+0x384>
 8002c58:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002c62:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8002f30 <commutate+0x388>
 8002c66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002c7a:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8002f34 <commutate+0x38c>
 8002c7e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c88:	eddf 6aab 	vldr	s13, [pc, #684]	; 8002f38 <commutate+0x390>
 8002c8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002ca0:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002f3c <commutate+0x394>
 8002ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ca8:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002f40 <commutate+0x398>
 8002cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cb0:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8002f44 <commutate+0x39c>
 8002cb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 8002cbe:	4b9a      	ldr	r3, [pc, #616]	; (8002f28 <commutate+0x380>)
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f103 01a4 	add.w	r1, r3, #164	; 0xa4
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8002cda:	eeb0 0a67 	vmov.f32	s0, s15
 8002cde:	4610      	mov	r0, r2
 8002ce0:	f001 fe38 	bl	8004954 <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf4:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002d04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d08:	edc7 7a06 	vstr	s15, [r7, #24]


       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8002d1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002d2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d30:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002d4a:	eef0 0a47 	vmov.f32	s1, s14
 8002d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d52:	f001 fd7b 	bl	800484c <fast_fminf>
 8002d56:	eeb0 7a40 	vmov.f32	s14, s0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002d60:	eef1 7a67 	vneg.f32	s15, s15
 8002d64:	eef0 0a67 	vmov.f32	s1, s15
 8002d68:	eeb0 0a47 	vmov.f32	s0, s14
 8002d6c:	f001 fd52 	bl	8004814 <fast_fmaxf>
 8002d70:	eef0 7a40 	vmov.f32	s15, s0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002d8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d90:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002dae:	eef0 0a47 	vmov.f32	s1, s14
 8002db2:	eeb0 0a67 	vmov.f32	s0, s15
 8002db6:	f001 fd49 	bl	800484c <fast_fminf>
 8002dba:	eeb0 7a40 	vmov.f32	s14, s0
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002dc4:	eef1 7a67 	vneg.f32	s15, s15
 8002dc8:	eef0 0a67 	vmov.f32	s1, s15
 8002dcc:	eeb0 0a47 	vmov.f32	s0, s14
 8002dd0:	f001 fd20 	bl	8004814 <fast_fmaxf>
 8002dd4:	eef0 7a40 	vmov.f32	s15, s0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002dea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e02:	eeb0 0a67 	vmov.f32	s0, s15
 8002e06:	f00f f943 	bl	8012090 <sqrtf>
 8002e0a:	ed87 0a03 	vstr	s0, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002e14:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002e22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e26:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8002e46:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002e68:	eef0 0a47 	vmov.f32	s1, s14
 8002e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e70:	f001 fcec 	bl	800484c <fast_fminf>
 8002e74:	eeb0 7a40 	vmov.f32	s14, s0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002e7e:	eef1 7a67 	vneg.f32	s15, s15
 8002e82:	eef0 0a67 	vmov.f32	s1, s15
 8002e86:	eeb0 0a47 	vmov.f32	s0, s14
 8002e8a:	f001 fcc3 	bl	8004814 <fast_fmaxf>
 8002e8e:	eef0 7a40 	vmov.f32	s15, s0
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002ea4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002eb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec0:	f00f f8e6 	bl	8012090 <sqrtf>
 8002ec4:	eef0 7a40 	vmov.f32	s15, s0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002ed4:	edd7 0a03 	vldr	s1, [r7, #12]
 8002ed8:	eeb0 0a67 	vmov.f32	s0, s15
 8002edc:	f001 fcb6 	bl	800484c <fast_fminf>
 8002ee0:	eeb0 7a40 	vmov.f32	s14, s0
 8002ee4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ee8:	eef1 7a67 	vneg.f32	s15, s15
 8002eec:	eef0 0a67 	vmov.f32	s1, s15
 8002ef0:	eeb0 0a47 	vmov.f32	s0, s14
 8002ef4:	f001 fc8e 	bl	8004814 <fast_fmaxf>
 8002ef8:	eef0 7a40 	vmov.f32	s15, s0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002f14:	eeb0 0a67 	vmov.f32	s0, s15
 8002f18:	4610      	mov	r0, r2
 8002f1a:	f001 fd1b 	bl	8004954 <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	e011      	b.n	8002f4c <commutate+0x3a4>
 8002f28:	20004cec 	.word	0x20004cec
 8002f2c:	3f7d70a4 	.word	0x3f7d70a4
 8002f30:	3c23d70a 	.word	0x3c23d70a
 8002f34:	3f666666 	.word	0x3f666666
 8002f38:	3dcccccd 	.word	0x3dcccccd
 8002f3c:	3f933333 	.word	0x3f933333
 8002f40:	3f70a3d7 	.word	0x3f70a3d7
 8002f44:	3f13cd3a 	.word	0x3f13cd3a
 8002f48:	38d1b716 	.word	0x38d1b716
 8002f4c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002f50:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8002f48 <commutate+0x3a0>
 8002f54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	336c      	adds	r3, #108	; 0x6c
 8002f78:	461a      	mov	r2, r3
 8002f7a:	eeb0 1a66 	vmov.f32	s2, s13
 8002f7e:	eef0 0a47 	vmov.f32	s1, s14
 8002f82:	eeb0 0a67 	vmov.f32	s0, s15
 8002f86:	f7ff fadd 	bl	8002544 <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	ed93 6a1b 	vldr	s12, [r3, #108]	; 0x6c
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3360      	adds	r3, #96	; 0x60
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	eef0 1a46 	vmov.f32	s3, s12
 8002fb8:	eeb0 1a66 	vmov.f32	s2, s13
 8002fbc:	eef0 0a47 	vmov.f32	s1, s14
 8002fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fc4:	f7ff fbd2 	bl	800276c <svm>
       set_dtc(controller);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff f985 	bl	80022d8 <set_dtc>

    }
 8002fce:	bf00      	nop
 8002fd0:	3720      	adds	r7, #32
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop

08002fd8 <torque_control>:
void torque_control(ControllerStruct *controller){
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	edd3 6a32 	vldr	s13, [r3, #200]	; 0xc8
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002ff2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ff6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003000:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	ed93 6a33 	vldr	s12, [r3, #204]	; 0xcc
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003016:	ee76 7a67 	vsub.f32	s15, s12, s15
 800301a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800301e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003022:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = torque_des/(KT*GR);
 8003026:	4b0d      	ldr	r3, [pc, #52]	; (800305c <torque_control+0x84>)
 8003028:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <torque_control+0x84>)
 800302e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003032:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003036:	edd7 6a03 	vldr	s13, [r7, #12]
 800303a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    controller->i_d_des = 0.0f;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

}
 800304e:	bf00      	nop
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20004cec 	.word	0x20004cec

08003060 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->kp = 0;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	controller->kd = 0;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	controller->p_des = 0;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	controller->v_des = 0;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	controller->i_q_des = 0;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "gatedrive.h"

 void run_fsm(FSMStruct * fsmstate){
 80030b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */
	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	785a      	ldrb	r2, [r3, #1]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d00d      	beq.n	80030e0 <run_fsm+0x30>
//		 printf("trans %i %i \r\n",fsmstate->state, fsmstate->next_state);
		 fsm_exit_state(fsmstate);		// safely exit the old state
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f927 	bl	8003318 <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	78db      	ldrb	r3, [r3, #3]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d006      	beq.n	80030e0 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	785a      	ldrb	r2, [r3, #1]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f8c2 	bl	8003264 <fsm_enter_state>
		 }

	 }

	 switch(fsmstate->state){
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b06      	cmp	r3, #6
 80030e6:	f200 80a9 	bhi.w	800323c <run_fsm+0x18c>
 80030ea:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <run_fsm+0x40>)
 80030ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f0:	0800323b 	.word	0x0800323b
 80030f4:	0800310d 	.word	0x0800310d
 80030f8:	080031f5 	.word	0x080031f5
 80030fc:	0800323d 	.word	0x0800323d
 8003100:	0800323b 	.word	0x0800323b
 8003104:	08003231 	.word	0x08003231
 8003108:	0800323b 	.word	0x0800323b
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 800310c:	4b4d      	ldr	r3, [pc, #308]	; (8003244 <run_fsm+0x194>)
 800310e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003112:	2b00      	cmp	r3, #0
 8003114:	d108      	bne.n	8003128 <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8003116:	4b4c      	ldr	r3, [pc, #304]	; (8003248 <run_fsm+0x198>)
 8003118:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800311c:	4a49      	ldr	r2, [pc, #292]	; (8003244 <run_fsm+0x194>)
 800311e:	494a      	ldr	r1, [pc, #296]	; (8003248 <run_fsm+0x198>)
 8003120:	484a      	ldr	r0, [pc, #296]	; (800324c <run_fsm+0x19c>)
 8003122:	f7fe f951 	bl	80013c8 <order_phases>
//				HAL_Delay(10);
//				zero_current(&controller);
//				HAL_Delay(100);
			 }

			 break;
 8003126:	e089      	b.n	800323c <run_fsm+0x18c>
			 else if(!comm_encoder_cal.done_cal){
 8003128:	4b46      	ldr	r3, [pc, #280]	; (8003244 <run_fsm+0x194>)
 800312a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800312e:	2b00      	cmp	r3, #0
 8003130:	d108      	bne.n	8003144 <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8003132:	4b45      	ldr	r3, [pc, #276]	; (8003248 <run_fsm+0x198>)
 8003134:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003138:	4a42      	ldr	r2, [pc, #264]	; (8003244 <run_fsm+0x194>)
 800313a:	4943      	ldr	r1, [pc, #268]	; (8003248 <run_fsm+0x198>)
 800313c:	4843      	ldr	r0, [pc, #268]	; (800324c <run_fsm+0x19c>)
 800313e:	f7fe fa5b 	bl	80015f8 <calibrate_encoder>
			 break;
 8003142:	e07b      	b.n	800323c <run_fsm+0x18c>
				 E_ZERO = comm_encoder_cal.ezero;
 8003144:	4b3f      	ldr	r3, [pc, #252]	; (8003244 <run_fsm+0x194>)
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	4a41      	ldr	r2, [pc, #260]	; (8003250 <run_fsm+0x1a0>)
 800314a:	6153      	str	r3, [r2, #20]
				 printf("E_ZERO: %d  PP: %.3f %f\r\n", E_ZERO, PPAIRS, TWO_PI_F*fmodf((PPAIRS*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 800314c:	4b40      	ldr	r3, [pc, #256]	; (8003250 <run_fsm+0x1a0>)
 800314e:	695e      	ldr	r6, [r3, #20]
 8003150:	4b40      	ldr	r3, [pc, #256]	; (8003254 <run_fsm+0x1a4>)
 8003152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003154:	4618      	mov	r0, r3
 8003156:	f7fd fa1f 	bl	8000598 <__aeabi_f2d>
 800315a:	4604      	mov	r4, r0
 800315c:	460d      	mov	r5, r1
 800315e:	4b3d      	ldr	r3, [pc, #244]	; (8003254 <run_fsm+0x1a4>)
 8003160:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003164:	4b3a      	ldr	r3, [pc, #232]	; (8003250 <run_fsm+0x1a0>)
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	425b      	negs	r3, r3
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003176:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003258 <run_fsm+0x1a8>
 800317a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800317e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003182:	eeb0 0a47 	vmov.f32	s0, s14
 8003186:	f00e ff63 	bl	8012050 <fmodf>
 800318a:	eef0 7a40 	vmov.f32	s15, s0
 800318e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800325c <run_fsm+0x1ac>
 8003192:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003196:	ee17 0a90 	vmov	r0, s15
 800319a:	f7fd f9fd 	bl	8000598 <__aeabi_f2d>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	e9cd 2300 	strd	r2, r3, [sp]
 80031a6:	4622      	mov	r2, r4
 80031a8:	462b      	mov	r3, r5
 80031aa:	4631      	mov	r1, r6
 80031ac:	482c      	ldr	r0, [pc, #176]	; (8003260 <run_fsm+0x1b0>)
 80031ae:	f00b f9bf 	bl	800e530 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 80031b2:	4b26      	ldr	r3, [pc, #152]	; (800324c <run_fsm+0x19c>)
 80031b4:	4a23      	ldr	r2, [pc, #140]	; (8003244 <run_fsm+0x194>)
 80031b6:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80031ba:	33dc      	adds	r3, #220	; 0xdc
 80031bc:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 80031c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031c4:	4618      	mov	r0, r3
 80031c6:	f00a fd33 	bl	800dc30 <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 80031ca:	4b21      	ldr	r3, [pc, #132]	; (8003250 <run_fsm+0x1a0>)
 80031cc:	4a1d      	ldr	r2, [pc, #116]	; (8003244 <run_fsm+0x194>)
 80031ce:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80031d2:	331c      	adds	r3, #28
 80031d4:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 80031d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031dc:	4618      	mov	r0, r3
 80031de:	f00a fd27 	bl	800dc30 <memcpy>
				 store_eeprom_regs();
 80031e2:	f002 fca7 	bl	8005b34 <store_eeprom_regs>
				 load_eeprom_regs();
 80031e6:	f002 fcb3 	bl	8005b50 <load_eeprom_regs>
				 update_fsm(fsmstate, 27);
 80031ea:	211b      	movs	r1, #27
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f8d9 	bl	80033a4 <update_fsm>
			 break;
 80031f2:	e023      	b.n	800323c <run_fsm+0x18c>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 80031f4:	4b16      	ldr	r3, [pc, #88]	; (8003250 <run_fsm+0x1a0>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	dd0a      	ble.n	8003212 <run_fsm+0x162>
 80031fc:	4b12      	ldr	r3, [pc, #72]	; (8003248 <run_fsm+0x198>)
 80031fe:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8003202:	4b13      	ldr	r3, [pc, #76]	; (8003250 <run_fsm+0x1a0>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	429a      	cmp	r2, r3
 8003208:	dd03      	ble.n	8003212 <run_fsm+0x162>
				 zero_commands(&controller);
 800320a:	480f      	ldr	r0, [pc, #60]	; (8003248 <run_fsm+0x198>)
 800320c:	f7ff ff28 	bl	8003060 <zero_commands>
 8003210:	e002      	b.n	8003218 <run_fsm+0x168>
			 }
			 /* Otherwise, commutate */
			 else{
				 torque_control(&controller);
 8003212:	480d      	ldr	r0, [pc, #52]	; (8003248 <run_fsm+0x198>)
 8003214:	f7ff fee0 	bl	8002fd8 <torque_control>
//				 field_weaken(&controller);
			 }
			 commutate(&controller, &comm_encoder);
 8003218:	490c      	ldr	r1, [pc, #48]	; (800324c <run_fsm+0x19c>)
 800321a:	480b      	ldr	r0, [pc, #44]	; (8003248 <run_fsm+0x198>)
 800321c:	f7ff fcc4 	bl	8002ba8 <commutate>
			 controller.timeout ++;
 8003220:	4b09      	ldr	r3, [pc, #36]	; (8003248 <run_fsm+0x198>)
 8003222:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003226:	3301      	adds	r3, #1
 8003228:	4a07      	ldr	r2, [pc, #28]	; (8003248 <run_fsm+0x198>)
 800322a:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
			 break;
 800322e:	e005      	b.n	800323c <run_fsm+0x18c>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 8003230:	2164      	movs	r1, #100	; 0x64
 8003232:	4806      	ldr	r0, [pc, #24]	; (800324c <run_fsm+0x19c>)
 8003234:	f001 ff56 	bl	80050e4 <ps_print>
			 break;
 8003238:	e000      	b.n	800323c <run_fsm+0x18c>
			 break;
 800323a:	bf00      	nop

		 case INIT_TEMP_MODE:
			 break;
	 }

 }
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003244:	2000095c 	.word	0x2000095c
 8003248:	20000468 	.word	0x20000468
 800324c:	20000778 	.word	0x20000778
 8003250:	20004dec 	.word	0x20004dec
 8003254:	20004cec 	.word	0x20004cec
 8003258:	45800000 	.word	0x45800000
 800325c:	40c90fdb 	.word	0x40c90fdb
 8003260:	08012638 	.word	0x08012638

08003264 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b05      	cmp	r3, #5
 8003272:	d841      	bhi.n	80032f8 <fsm_enter_state+0x94>
 8003274:	a201      	add	r2, pc, #4	; (adr r2, 800327c <fsm_enter_state+0x18>)
 8003276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327a:	bf00      	nop
 800327c:	08003295 	.word	0x08003295
 8003280:	080032b9 	.word	0x080032b9
 8003284:	080032a1 	.word	0x080032a1
 8003288:	080032f9 	.word	0x080032f9
 800328c:	0800329b 	.word	0x0800329b
 8003290:	080032f7 	.word	0x080032f7
				case MENU_MODE:
//				printf("Entering Main Menu\r\n");
				enter_menu_state();
 8003294:	f000 f950 	bl	8003538 <enter_menu_state>
				break;
 8003298:	e02e      	b.n	80032f8 <fsm_enter_state+0x94>
			case SETUP_MODE:
//				printf("Entering Setup\r\n");
				enter_setup_state();
 800329a:	f000 f979 	bl	8003590 <enter_setup_state>
				break;
 800329e:	e02b      	b.n	80032f8 <fsm_enter_state+0x94>
			case ENCODER_MODE:
//				printf("Entering Encoder Mode\r\n");
				break;
			case MOTOR_MODE:
//				printf("Entering Motor Mode\r\n");
				HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 80032a0:	2201      	movs	r2, #1
 80032a2:	2140      	movs	r1, #64	; 0x40
 80032a4:	4816      	ldr	r0, [pc, #88]	; (8003300 <fsm_enter_state+0x9c>)
 80032a6:	f005 fb7b 	bl	80089a0 <HAL_GPIO_WritePin>
				reset_foc(&controller);
 80032aa:	4816      	ldr	r0, [pc, #88]	; (8003304 <fsm_enter_state+0xa0>)
 80032ac:	f7ff fc08 	bl	8002ac0 <reset_foc>
//				drv_enable_gd(drv);
				enable_gd(&controller);
 80032b0:	4814      	ldr	r0, [pc, #80]	; (8003304 <fsm_enter_state+0xa0>)
 80032b2:	f000 fda1 	bl	8003df8 <enable_gd>

				break;
 80032b6:	e01f      	b.n	80032f8 <fsm_enter_state+0x94>
			case CALIBRATION_MODE:
//				printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 80032b8:	4b13      	ldr	r3, [pc, #76]	; (8003308 <fsm_enter_state+0xa4>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 80032c0:	4b11      	ldr	r3, [pc, #68]	; (8003308 <fsm_enter_state+0xa4>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <fsm_enter_state+0xa4>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 80032ce:	4b0f      	ldr	r3, [pc, #60]	; (800330c <fsm_enter_state+0xa8>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 80032d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032da:	2100      	movs	r1, #0
 80032dc:	480c      	ldr	r0, [pc, #48]	; (8003310 <fsm_enter_state+0xac>)
 80032de:	f00a fcb5 	bl	800dc4c <memset>
				PHASE_ORDER = 0;
 80032e2:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <fsm_enter_state+0xb0>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
//			   disable_gd(&controller);
//			   HAL_Delay(10);
			   zero_current(&controller);
 80032e8:	4806      	ldr	r0, [pc, #24]	; (8003304 <fsm_enter_state+0xa0>)
 80032ea:	f7ff faf7 	bl	80028dc <zero_current>
//			   HAL_Delay(100);

//				drv_enable_gd(drv);
				enable_gd(&controller);
 80032ee:	4805      	ldr	r0, [pc, #20]	; (8003304 <fsm_enter_state+0xa0>)
 80032f0:	f000 fd82 	bl	8003df8 <enable_gd>
				break;
 80032f4:	e000      	b.n	80032f8 <fsm_enter_state+0x94>
				break;
 80032f6:	bf00      	nop

		}
 }
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	48000800 	.word	0x48000800
 8003304:	20000468 	.word	0x20000468
 8003308:	2000095c 	.word	0x2000095c
 800330c:	20000778 	.word	0x20000778
 8003310:	20000854 	.word	0x20000854
 8003314:	20004dec 	.word	0x20004dec

08003318 <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b05      	cmp	r3, #5
 8003326:	d834      	bhi.n	8003392 <fsm_exit_state+0x7a>
 8003328:	a201      	add	r2, pc, #4	; (adr r2, 8003330 <fsm_exit_state+0x18>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	08003349 	.word	0x08003349
 8003334:	08003385 	.word	0x08003385
 8003338:	08003361 	.word	0x08003361
 800333c:	08003393 	.word	0x08003393
 8003340:	08003351 	.word	0x08003351
 8003344:	08003359 	.word	0x08003359
			case MENU_MODE:
//				printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	70da      	strb	r2, [r3, #3]
				break;
 800334e:	e020      	b.n	8003392 <fsm_exit_state+0x7a>
			case SETUP_MODE:
//				printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	70da      	strb	r2, [r3, #3]
				break;
 8003356:	e01c      	b.n	8003392 <fsm_exit_state+0x7a>
			case ENCODER_MODE:
//				printf("Leaving Encoder Mode\r\n");
				fsmstate->ready = 1;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	70da      	strb	r2, [r3, #3]
				break;
 800335e:	e018      	b.n	8003392 <fsm_exit_state+0x7a>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
//				if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
					fsmstate->ready = 1;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	70da      	strb	r2, [r3, #3]
//					drv_disable_gd(drv);
					reset_foc(&controller);
 8003366:	480d      	ldr	r0, [pc, #52]	; (800339c <fsm_exit_state+0x84>)
 8003368:	f7ff fbaa 	bl	8002ac0 <reset_foc>
					disable_gd(&controller);
 800336c:	480b      	ldr	r0, [pc, #44]	; (800339c <fsm_exit_state+0x84>)
 800336e:	f000 fd69 	bl	8003e44 <disable_gd>
					HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 8003372:	2200      	movs	r2, #0
 8003374:	2140      	movs	r1, #64	; 0x40
 8003376:	480a      	ldr	r0, [pc, #40]	; (80033a0 <fsm_exit_state+0x88>)
 8003378:	f005 fb12 	bl	80089a0 <HAL_GPIO_WritePin>
//				}
				zero_commands(&controller);		// Set commands to zero
 800337c:	4807      	ldr	r0, [pc, #28]	; (800339c <fsm_exit_state+0x84>)
 800337e:	f7ff fe6f 	bl	8003060 <zero_commands>
//				printf("Exiting Motor Mode\r\n");

				break;
 8003382:	e006      	b.n	8003392 <fsm_exit_state+0x7a>
			case CALIBRATION_MODE:
//				printf("Exiting Calibration Mode\r\n");
//				drv_disable_gd(drv);
				disable_gd(&controller);
 8003384:	4805      	ldr	r0, [pc, #20]	; (800339c <fsm_exit_state+0x84>)
 8003386:	f000 fd5d 	bl	8003e44 <disable_gd>
				//free(error_array);
				//free(lut_array);
				fsmstate->ready = 1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	70da      	strb	r2, [r3, #3]
				break;
 8003390:	bf00      	nop
		}

 }
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000468 	.word	0x20000468
 80033a0:	48000800 	.word	0x48000800

080033a4 <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
//	 printf("%i %i %i\r\n",fsmstate->state, fsm_input, fsmstate->next_state);
	if(fsm_input == MENU_CMD){	// escape to exit do rest mode
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	2b1b      	cmp	r3, #27
 80033b4:	d106      	bne.n	80033c4 <update_fsm+0x20>
		fsmstate->next_state = MENU_MODE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	70da      	strb	r2, [r3, #3]
		return;
 80033c2:	e0ad      	b.n	8003520 <update_fsm+0x17c>
	}
	switch(fsmstate->state){
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b05      	cmp	r3, #5
 80033ca:	f200 80a9 	bhi.w	8003520 <update_fsm+0x17c>
 80033ce:	a201      	add	r2, pc, #4	; (adr r2, 80033d4 <update_fsm+0x30>)
 80033d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d4:	080033ed 	.word	0x080033ed
 80033d8:	08003521 	.word	0x08003521
 80033dc:	08003521 	.word	0x08003521
 80033e0:	08003521 	.word	0x08003521
 80033e4:	080034e5 	.word	0x080034e5
 80033e8:	08003521 	.word	0x08003521
		case MENU_MODE:
			switch (fsm_input){
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	3b63      	subs	r3, #99	; 0x63
 80033f0:	2b17      	cmp	r3, #23
 80033f2:	f200 8094 	bhi.w	800351e <update_fsm+0x17a>
 80033f6:	a201      	add	r2, pc, #4	; (adr r2, 80033fc <update_fsm+0x58>)
 80033f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fc:	0800345d 	.word	0x0800345d
 8003400:	0800351f 	.word	0x0800351f
 8003404:	08003479 	.word	0x08003479
 8003408:	0800351f 	.word	0x0800351f
 800340c:	0800351f 	.word	0x0800351f
 8003410:	0800351f 	.word	0x0800351f
 8003414:	0800351f 	.word	0x0800351f
 8003418:	0800351f 	.word	0x0800351f
 800341c:	0800351f 	.word	0x0800351f
 8003420:	0800351f 	.word	0x0800351f
 8003424:	0800346b 	.word	0x0800346b
 8003428:	0800351f 	.word	0x0800351f
 800342c:	0800351f 	.word	0x0800351f
 8003430:	0800351f 	.word	0x0800351f
 8003434:	0800351f 	.word	0x0800351f
 8003438:	0800351f 	.word	0x0800351f
 800343c:	08003487 	.word	0x08003487
 8003440:	0800351f 	.word	0x0800351f
 8003444:	0800351f 	.word	0x0800351f
 8003448:	0800351f 	.word	0x0800351f
 800344c:	0800351f 	.word	0x0800351f
 8003450:	0800351f 	.word	0x0800351f
 8003454:	0800351f 	.word	0x0800351f
 8003458:	08003495 	.word	0x08003495
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	70da      	strb	r2, [r3, #3]
					break;
 8003468:	e03b      	b.n	80034e2 <update_fsm+0x13e>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2202      	movs	r2, #2
 800346e:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	70da      	strb	r2, [r3, #3]
					break;
 8003476:	e034      	b.n	80034e2 <update_fsm+0x13e>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2205      	movs	r2, #5
 800347c:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	70da      	strb	r2, [r3, #3]
					break;
 8003484:	e02d      	b.n	80034e2 <update_fsm+0x13e>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2204      	movs	r2, #4
 800348a:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	70da      	strb	r2, [r3, #3]
					break;
 8003492:	e026      	b.n	80034e2 <update_fsm+0x13e>
				case ZERO_CMD:
					comm_encoder.m_zero = 0;
 8003494:	4b24      	ldr	r3, [pc, #144]	; (8003528 <update_fsm+0x184>)
 8003496:	2200      	movs	r2, #0
 8003498:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
					comm_encoder.mech_zero = 0.0f;
 800349c:	4b22      	ldr	r3, [pc, #136]	; (8003528 <update_fsm+0x184>)
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
					ps_sample(&comm_encoder, DT);
 80034a6:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800352c <update_fsm+0x188>
 80034aa:	481f      	ldr	r0, [pc, #124]	; (8003528 <update_fsm+0x184>)
 80034ac:	f001 fcaa 	bl	8004e04 <ps_sample>
//					int zero_count = comm_encoder.count;
//					M_ZERO = zero_count;
					MECH_ZERO = comm_encoder.angle_multiturn[0];
 80034b0:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <update_fsm+0x184>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4a1e      	ldr	r2, [pc, #120]	; (8003530 <update_fsm+0x18c>)
 80034b6:	65d3      	str	r3, [r2, #92]	; 0x5c
					comm_encoder.mech_zero = MECH_ZERO;
 80034b8:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <update_fsm+0x18c>)
 80034ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034bc:	4a1a      	ldr	r2, [pc, #104]	; (8003528 <update_fsm+0x184>)
 80034be:	f8c2 31e0 	str.w	r3, [r2, #480]	; 0x1e0
					store_eeprom_regs();
 80034c2:	f002 fb37 	bl	8005b34 <store_eeprom_regs>
					load_eeprom_regs();
 80034c6:	f002 fb43 	bl	8005b50 <load_eeprom_regs>
					printf("\n\r  Saved new zero position:  %.3f\n\r\n\r", comm_encoder.mech_zero);
 80034ca:	4b17      	ldr	r3, [pc, #92]	; (8003528 <update_fsm+0x184>)
 80034cc:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fd f861 	bl	8000598 <__aeabi_f2d>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4816      	ldr	r0, [pc, #88]	; (8003534 <update_fsm+0x190>)
 80034dc:	f00b f828 	bl	800e530 <iprintf>
					break;
 80034e0:	bf00      	nop
				}
			break;
 80034e2:	e01c      	b.n	800351e <update_fsm+0x17a>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	2b0d      	cmp	r3, #13
 80034e8:	d103      	bne.n	80034f2 <update_fsm+0x14e>
				process_user_input(fsmstate);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f9c4 	bl	8003878 <process_user_input>
				break;
 80034f0:	e016      	b.n	8003520 <update_fsm+0x17c>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	7b1b      	ldrb	r3, [r3, #12]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d103      	bne.n	8003502 <update_fsm+0x15e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	735a      	strb	r2, [r3, #13]
 8003500:	e006      	b.n	8003510 <update_fsm+0x16c>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	7b1b      	ldrb	r3, [r3, #12]
 8003506:	3b01      	subs	r3, #1
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	4413      	add	r3, r2
 800350c:	78fa      	ldrb	r2, [r7, #3]
 800350e:	711a      	strb	r2, [r3, #4]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	7b1b      	ldrb	r3, [r3, #12]
 8003514:	3301      	adds	r3, #1
 8003516:	b2da      	uxtb	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	731a      	strb	r2, [r3, #12]
			/* If enter is typed, process user input */

			break;
 800351c:	e000      	b.n	8003520 <update_fsm+0x17c>
			break;
 800351e:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000778 	.word	0x20000778
 800352c:	388bcf64 	.word	0x388bcf64
 8003530:	20004cec 	.word	0x20004cec
 8003534:	08012654 	.word	0x08012654

08003538 <enter_menu_state>:


 void enter_menu_state(void){
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 800353c:	480c      	ldr	r0, [pc, #48]	; (8003570 <enter_menu_state+0x38>)
 800353e:	f00a fff7 	bl	800e530 <iprintf>
	    printf(" Commands:\n\r");
 8003542:	480c      	ldr	r0, [pc, #48]	; (8003574 <enter_menu_state+0x3c>)
 8003544:	f00a fff4 	bl	800e530 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003548:	480b      	ldr	r0, [pc, #44]	; (8003578 <enter_menu_state+0x40>)
 800354a:	f00a fff1 	bl	800e530 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 800354e:	480b      	ldr	r0, [pc, #44]	; (800357c <enter_menu_state+0x44>)
 8003550:	f00a ffee 	bl	800e530 <iprintf>
	    printf(" s - Setup\n\r");
 8003554:	480a      	ldr	r0, [pc, #40]	; (8003580 <enter_menu_state+0x48>)
 8003556:	f00a ffeb 	bl	800e530 <iprintf>
	    printf(" e - Display Encoder\n\r");
 800355a:	480a      	ldr	r0, [pc, #40]	; (8003584 <enter_menu_state+0x4c>)
 800355c:	f00a ffe8 	bl	800e530 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8003560:	4809      	ldr	r0, [pc, #36]	; (8003588 <enter_menu_state+0x50>)
 8003562:	f00a ffe5 	bl	800e530 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 8003566:	4809      	ldr	r0, [pc, #36]	; (800358c <enter_menu_state+0x54>)
 8003568:	f00a ffe2 	bl	800e530 <iprintf>

	    //gpio.led->write(0);
 }
 800356c:	bf00      	nop
 800356e:	bd80      	pop	{r7, pc}
 8003570:	0801267c 	.word	0x0801267c
 8003574:	08012684 	.word	0x08012684
 8003578:	08012694 	.word	0x08012694
 800357c:	080126a8 	.word	0x080126a8
 8003580:	080126c4 	.word	0x080126c4
 8003584:	080126d4 	.word	0x080126d4
 8003588:	080126ec 	.word	0x080126ec
 800358c:	08012708 	.word	0x08012708

08003590 <enter_setup_state>:

 void enter_setup_state(void){
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 8003596:	487d      	ldr	r0, [pc, #500]	; (800378c <enter_setup_state+0x1fc>)
 8003598:	f00a ffca 	bl	800e530 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 800359c:	4b7c      	ldr	r3, [pc, #496]	; (8003790 <enter_setup_state+0x200>)
 800359e:	9301      	str	r3, [sp, #4]
 80035a0:	4b7c      	ldr	r3, [pc, #496]	; (8003794 <enter_setup_state+0x204>)
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	4b7c      	ldr	r3, [pc, #496]	; (8003798 <enter_setup_state+0x208>)
 80035a6:	4a7d      	ldr	r2, [pc, #500]	; (800379c <enter_setup_state+0x20c>)
 80035a8:	497d      	ldr	r1, [pc, #500]	; (80037a0 <enter_setup_state+0x210>)
 80035aa:	487e      	ldr	r0, [pc, #504]	; (80037a4 <enter_setup_state+0x214>)
 80035ac:	f00a ffc0 	bl	800e530 <iprintf>
	    printf("\r\n Motor:\r\n");
 80035b0:	487d      	ldr	r0, [pc, #500]	; (80037a8 <enter_setup_state+0x218>)
 80035b2:	f00b f843 	bl	800e63c <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 80035b6:	4b7d      	ldr	r3, [pc, #500]	; (80037ac <enter_setup_state+0x21c>)
 80035b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fc ffec 	bl	8000598 <__aeabi_f2d>
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035c8:	4b79      	ldr	r3, [pc, #484]	; (80037b0 <enter_setup_state+0x220>)
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	4b79      	ldr	r3, [pc, #484]	; (80037b4 <enter_setup_state+0x224>)
 80035ce:	4a7a      	ldr	r2, [pc, #488]	; (80037b8 <enter_setup_state+0x228>)
 80035d0:	497a      	ldr	r1, [pc, #488]	; (80037bc <enter_setup_state+0x22c>)
 80035d2:	487b      	ldr	r0, [pc, #492]	; (80037c0 <enter_setup_state+0x230>)
 80035d4:	f00a ffac 	bl	800e530 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 80035d8:	4b74      	ldr	r3, [pc, #464]	; (80037ac <enter_setup_state+0x21c>)
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fc ffdb 	bl	8000598 <__aeabi_f2d>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035ea:	4b71      	ldr	r3, [pc, #452]	; (80037b0 <enter_setup_state+0x220>)
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	4b71      	ldr	r3, [pc, #452]	; (80037b4 <enter_setup_state+0x224>)
 80035f0:	4a74      	ldr	r2, [pc, #464]	; (80037c4 <enter_setup_state+0x234>)
 80035f2:	4975      	ldr	r1, [pc, #468]	; (80037c8 <enter_setup_state+0x238>)
 80035f4:	4875      	ldr	r0, [pc, #468]	; (80037cc <enter_setup_state+0x23c>)
 80035f6:	f00a ff9b 	bl	800e530 <iprintf>
	    printf("\r\n Control:\r\n");
 80035fa:	4875      	ldr	r0, [pc, #468]	; (80037d0 <enter_setup_state+0x240>)
 80035fc:	f00b f81e 	bl	800e63c <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8003600:	4b6a      	ldr	r3, [pc, #424]	; (80037ac <enter_setup_state+0x21c>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	4618      	mov	r0, r3
 8003606:	f7fc ffc7 	bl	8000598 <__aeabi_f2d>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003612:	4b70      	ldr	r3, [pc, #448]	; (80037d4 <enter_setup_state+0x244>)
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	4b70      	ldr	r3, [pc, #448]	; (80037d8 <enter_setup_state+0x248>)
 8003618:	4a70      	ldr	r2, [pc, #448]	; (80037dc <enter_setup_state+0x24c>)
 800361a:	4971      	ldr	r1, [pc, #452]	; (80037e0 <enter_setup_state+0x250>)
 800361c:	4871      	ldr	r0, [pc, #452]	; (80037e4 <enter_setup_state+0x254>)
 800361e:	f00a ff87 	bl	800e530 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "60.0", I_MAX);
 8003622:	4b62      	ldr	r3, [pc, #392]	; (80037ac <enter_setup_state+0x21c>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	4618      	mov	r0, r3
 8003628:	f7fc ffb6 	bl	8000598 <__aeabi_f2d>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003634:	4b6c      	ldr	r3, [pc, #432]	; (80037e8 <enter_setup_state+0x258>)
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	4b6c      	ldr	r3, [pc, #432]	; (80037ec <enter_setup_state+0x25c>)
 800363a:	4a6d      	ldr	r2, [pc, #436]	; (80037f0 <enter_setup_state+0x260>)
 800363c:	496d      	ldr	r1, [pc, #436]	; (80037f4 <enter_setup_state+0x264>)
 800363e:	4869      	ldr	r0, [pc, #420]	; (80037e4 <enter_setup_state+0x254>)
 8003640:	f00a ff76 	bl	800e530 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 8003644:	4b59      	ldr	r3, [pc, #356]	; (80037ac <enter_setup_state+0x21c>)
 8003646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003648:	4618      	mov	r0, r3
 800364a:	f7fc ffa5 	bl	8000598 <__aeabi_f2d>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003656:	4b56      	ldr	r3, [pc, #344]	; (80037b0 <enter_setup_state+0x220>)
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	4b55      	ldr	r3, [pc, #340]	; (80037b0 <enter_setup_state+0x220>)
 800365c:	4a66      	ldr	r2, [pc, #408]	; (80037f8 <enter_setup_state+0x268>)
 800365e:	4967      	ldr	r1, [pc, #412]	; (80037fc <enter_setup_state+0x26c>)
 8003660:	4860      	ldr	r0, [pc, #384]	; (80037e4 <enter_setup_state+0x254>)
 8003662:	f00a ff65 	bl	800e530 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 8003666:	4b51      	ldr	r3, [pc, #324]	; (80037ac <enter_setup_state+0x21c>)
 8003668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366a:	4618      	mov	r0, r3
 800366c:	f7fc ff94 	bl	8000598 <__aeabi_f2d>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003678:	4b4d      	ldr	r3, [pc, #308]	; (80037b0 <enter_setup_state+0x220>)
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	4b4c      	ldr	r3, [pc, #304]	; (80037b0 <enter_setup_state+0x220>)
 800367e:	4a60      	ldr	r2, [pc, #384]	; (8003800 <enter_setup_state+0x270>)
 8003680:	4960      	ldr	r1, [pc, #384]	; (8003804 <enter_setup_state+0x274>)
 8003682:	4858      	ldr	r0, [pc, #352]	; (80037e4 <enter_setup_state+0x254>)
 8003684:	f00a ff54 	bl	800e530 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 8003688:	4b48      	ldr	r3, [pc, #288]	; (80037ac <enter_setup_state+0x21c>)
 800368a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368c:	4618      	mov	r0, r3
 800368e:	f7fc ff83 	bl	8000598 <__aeabi_f2d>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800369a:	4b5b      	ldr	r3, [pc, #364]	; (8003808 <enter_setup_state+0x278>)
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	4b53      	ldr	r3, [pc, #332]	; (80037ec <enter_setup_state+0x25c>)
 80036a0:	4a5a      	ldr	r2, [pc, #360]	; (800380c <enter_setup_state+0x27c>)
 80036a2:	495b      	ldr	r1, [pc, #364]	; (8003810 <enter_setup_state+0x280>)
 80036a4:	484f      	ldr	r0, [pc, #316]	; (80037e4 <enter_setup_state+0x254>)
 80036a6:	f00a ff43 	bl	800e530 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 80036aa:	4b40      	ldr	r3, [pc, #256]	; (80037ac <enter_setup_state+0x21c>)
 80036ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fc ff72 	bl	8000598 <__aeabi_f2d>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036bc:	4b55      	ldr	r3, [pc, #340]	; (8003814 <enter_setup_state+0x284>)
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	4b4a      	ldr	r3, [pc, #296]	; (80037ec <enter_setup_state+0x25c>)
 80036c2:	4a55      	ldr	r2, [pc, #340]	; (8003818 <enter_setup_state+0x288>)
 80036c4:	4955      	ldr	r1, [pc, #340]	; (800381c <enter_setup_state+0x28c>)
 80036c6:	4847      	ldr	r0, [pc, #284]	; (80037e4 <enter_setup_state+0x254>)
 80036c8:	f00a ff32 	bl	800e530 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 80036cc:	4b37      	ldr	r3, [pc, #220]	; (80037ac <enter_setup_state+0x21c>)
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fc ff61 	bl	8000598 <__aeabi_f2d>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036de:	4b50      	ldr	r3, [pc, #320]	; (8003820 <enter_setup_state+0x290>)
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	4b42      	ldr	r3, [pc, #264]	; (80037ec <enter_setup_state+0x25c>)
 80036e4:	4a4f      	ldr	r2, [pc, #316]	; (8003824 <enter_setup_state+0x294>)
 80036e6:	4950      	ldr	r1, [pc, #320]	; (8003828 <enter_setup_state+0x298>)
 80036e8:	483e      	ldr	r0, [pc, #248]	; (80037e4 <enter_setup_state+0x254>)
 80036ea:	f00a ff21 	bl	800e530 <iprintf>
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
//	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 80036ee:	4b2f      	ldr	r3, [pc, #188]	; (80037ac <enter_setup_state+0x21c>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fc ff50 	bl	8000598 <__aeabi_f2d>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003700:	4b4a      	ldr	r3, [pc, #296]	; (800382c <enter_setup_state+0x29c>)
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	4b39      	ldr	r3, [pc, #228]	; (80037ec <enter_setup_state+0x25c>)
 8003706:	4a4a      	ldr	r2, [pc, #296]	; (8003830 <enter_setup_state+0x2a0>)
 8003708:	494a      	ldr	r1, [pc, #296]	; (8003834 <enter_setup_state+0x2a4>)
 800370a:	4836      	ldr	r0, [pc, #216]	; (80037e4 <enter_setup_state+0x254>)
 800370c:	f00a ff10 	bl	800e530 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "o", "Max Torque Setpoint (N-m)", "0.0", "-", T_MAX);
 8003710:	4b26      	ldr	r3, [pc, #152]	; (80037ac <enter_setup_state+0x21c>)
 8003712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003714:	4618      	mov	r0, r3
 8003716:	f7fc ff3f 	bl	8000598 <__aeabi_f2d>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003722:	4b23      	ldr	r3, [pc, #140]	; (80037b0 <enter_setup_state+0x220>)
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	4b31      	ldr	r3, [pc, #196]	; (80037ec <enter_setup_state+0x25c>)
 8003728:	4a43      	ldr	r2, [pc, #268]	; (8003838 <enter_setup_state+0x2a8>)
 800372a:	4944      	ldr	r1, [pc, #272]	; (800383c <enter_setup_state+0x2ac>)
 800372c:	482d      	ldr	r0, [pc, #180]	; (80037e4 <enter_setup_state+0x254>)
 800372e:	f00a feff 	bl	800e530 <iprintf>
	    printf("\r\n CAN:\r\n");
 8003732:	4843      	ldr	r0, [pc, #268]	; (8003840 <enter_setup_state+0x2b0>)
 8003734:	f00a ff82 	bl	800e63c <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8003738:	4b42      	ldr	r3, [pc, #264]	; (8003844 <enter_setup_state+0x2b4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	9301      	str	r3, [sp, #4]
 800373e:	4b42      	ldr	r3, [pc, #264]	; (8003848 <enter_setup_state+0x2b8>)
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	4b1c      	ldr	r3, [pc, #112]	; (80037b4 <enter_setup_state+0x224>)
 8003744:	4a41      	ldr	r2, [pc, #260]	; (800384c <enter_setup_state+0x2bc>)
 8003746:	4942      	ldr	r1, [pc, #264]	; (8003850 <enter_setup_state+0x2c0>)
 8003748:	4842      	ldr	r0, [pc, #264]	; (8003854 <enter_setup_state+0x2c4>)
 800374a:	f00a fef1 	bl	800e530 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN Master ID", "0", "127", CAN_MASTER);
 800374e:	4b3d      	ldr	r3, [pc, #244]	; (8003844 <enter_setup_state+0x2b4>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	4b3c      	ldr	r3, [pc, #240]	; (8003848 <enter_setup_state+0x2b8>)
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	4b16      	ldr	r3, [pc, #88]	; (80037b4 <enter_setup_state+0x224>)
 800375a:	4a3f      	ldr	r2, [pc, #252]	; (8003858 <enter_setup_state+0x2c8>)
 800375c:	493f      	ldr	r1, [pc, #252]	; (800385c <enter_setup_state+0x2cc>)
 800375e:	483d      	ldr	r0, [pc, #244]	; (8003854 <enter_setup_state+0x2c4>)
 8003760:	f00a fee6 	bl	800e530 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 8003764:	4b37      	ldr	r3, [pc, #220]	; (8003844 <enter_setup_state+0x2b4>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	9301      	str	r3, [sp, #4]
 800376a:	4b3d      	ldr	r3, [pc, #244]	; (8003860 <enter_setup_state+0x2d0>)
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <enter_setup_state+0x224>)
 8003770:	4a3c      	ldr	r2, [pc, #240]	; (8003864 <enter_setup_state+0x2d4>)
 8003772:	493d      	ldr	r1, [pc, #244]	; (8003868 <enter_setup_state+0x2d8>)
 8003774:	483d      	ldr	r0, [pc, #244]	; (800386c <enter_setup_state+0x2dc>)
 8003776:	f00a fedb 	bl	800e530 <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 800377a:	483d      	ldr	r0, [pc, #244]	; (8003870 <enter_setup_state+0x2e0>)
 800377c:	f00a fed8 	bl	800e530 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8003780:	483c      	ldr	r0, [pc, #240]	; (8003874 <enter_setup_state+0x2e4>)
 8003782:	f00a fed5 	bl	800e530 <iprintf>
 }
 8003786:	bf00      	nop
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	08012720 	.word	0x08012720
 8003790:	08012774 	.word	0x08012774
 8003794:	08012784 	.word	0x08012784
 8003798:	0801273c 	.word	0x0801273c
 800379c:	08012740 	.word	0x08012740
 80037a0:	0801274c 	.word	0x0801274c
 80037a4:	08012754 	.word	0x08012754
 80037a8:	08012788 	.word	0x08012788
 80037ac:	20004cec 	.word	0x20004cec
 80037b0:	080127c8 	.word	0x080127c8
 80037b4:	08012794 	.word	0x08012794
 80037b8:	08012798 	.word	0x08012798
 80037bc:	080127a4 	.word	0x080127a4
 80037c0:	080127a8 	.word	0x080127a8
 80037c4:	080127cc 	.word	0x080127cc
 80037c8:	080127e4 	.word	0x080127e4
 80037cc:	080127e8 	.word	0x080127e8
 80037d0:	08012808 	.word	0x08012808
 80037d4:	08012858 	.word	0x08012858
 80037d8:	08012818 	.word	0x08012818
 80037dc:	0801281c 	.word	0x0801281c
 80037e0:	08012834 	.word	0x08012834
 80037e4:	08012838 	.word	0x08012838
 80037e8:	0801287c 	.word	0x0801287c
 80037ec:	08012860 	.word	0x08012860
 80037f0:	08012864 	.word	0x08012864
 80037f4:	08012878 	.word	0x08012878
 80037f8:	08012884 	.word	0x08012884
 80037fc:	080128a0 	.word	0x080128a0
 8003800:	080128a4 	.word	0x080128a4
 8003804:	080128c4 	.word	0x080128c4
 8003808:	080128e8 	.word	0x080128e8
 800380c:	080128c8 	.word	0x080128c8
 8003810:	080128e4 	.word	0x080128e4
 8003814:	08012914 	.word	0x08012914
 8003818:	080128f0 	.word	0x080128f0
 800381c:	08012910 	.word	0x08012910
 8003820:	08012934 	.word	0x08012934
 8003824:	08012918 	.word	0x08012918
 8003828:	08012930 	.word	0x08012930
 800382c:	08012958 	.word	0x08012958
 8003830:	0801293c 	.word	0x0801293c
 8003834:	08012954 	.word	0x08012954
 8003838:	08012960 	.word	0x08012960
 800383c:	0801297c 	.word	0x0801297c
 8003840:	08012980 	.word	0x08012980
 8003844:	20004dec 	.word	0x20004dec
 8003848:	080129b8 	.word	0x080129b8
 800384c:	0801298c 	.word	0x0801298c
 8003850:	08012994 	.word	0x08012994
 8003854:	08012998 	.word	0x08012998
 8003858:	080129bc 	.word	0x080129bc
 800385c:	080129cc 	.word	0x080129cc
 8003860:	08012a10 	.word	0x08012a10
 8003864:	080129d0 	.word	0x080129d0
 8003868:	080129f0 	.word	0x080129f0
 800386c:	080129f4 	.word	0x080129f4
 8003870:	08012a18 	.word	0x08012a18
 8003874:	08012a64 	.word	0x08012a64

08003878 <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	7b5b      	ldrb	r3, [r3, #13]
 8003884:	3b61      	subs	r3, #97	; 0x61
 8003886:	2b17      	cmp	r3, #23
 8003888:	f200 828a 	bhi.w	8003da0 <process_user_input+0x528>
 800388c:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <process_user_input+0x1c>)
 800388e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003892:	bf00      	nop
 8003894:	08003af3 	.word	0x08003af3
 8003898:	080038f5 	.word	0x080038f5
 800389c:	08003a9f 	.word	0x08003a9f
 80038a0:	08003c71 	.word	0x08003c71
 80038a4:	08003da1 	.word	0x08003da1
 80038a8:	080039d9 	.word	0x080039d9
 80038ac:	08003b47 	.word	0x08003b47
 80038b0:	08003a4b 	.word	0x08003a4b
 80038b4:	08003949 	.word	0x08003949
 80038b8:	08003da1 	.word	0x08003da1
 80038bc:	08003b8b 	.word	0x08003b8b
 80038c0:	08003985 	.word	0x08003985
 80038c4:	08003967 	.word	0x08003967
 80038c8:	08003da1 	.word	0x08003da1
 80038cc:	08003d5d 	.word	0x08003d5d
 80038d0:	08003cb5 	.word	0x08003cb5
 80038d4:	08003da1 	.word	0x08003da1
 80038d8:	08003da1 	.word	0x08003da1
 80038dc:	08003da1 	.word	0x08003da1
 80038e0:	08003a2d 	.word	0x08003a2d
 80038e4:	08003da1 	.word	0x08003da1
 80038e8:	08003d09 	.word	0x08003d09
 80038ec:	08003da1 	.word	0x08003da1
 80038f0:	08003bcf 	.word	0x08003bcf
		 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3304      	adds	r3, #4
 80038f8:	4618      	mov	r0, r3
 80038fa:	f00a f967 	bl	800dbcc <atof>
 80038fe:	ec53 2b10 	vmov	r2, r3, d0
 8003902:	4610      	mov	r0, r2
 8003904:	4619      	mov	r1, r3
 8003906:	f7fd f997 	bl	8000c38 <__aeabi_d2f>
 800390a:	4603      	mov	r3, r0
 800390c:	eddf 0ac1 	vldr	s1, [pc, #772]	; 8003c14 <process_user_input+0x39c>
 8003910:	ee00 3a10 	vmov	s0, r3
 8003914:	f00e fb1d 	bl	8011f52 <fminf>
 8003918:	eef0 7a40 	vmov.f32	s15, s0
 800391c:	eddf 0abe 	vldr	s1, [pc, #760]	; 8003c18 <process_user_input+0x3a0>
 8003920:	eeb0 0a67 	vmov.f32	s0, s15
 8003924:	f00e fafa 	bl	8011f1c <fmaxf>
 8003928:	eef0 7a40 	vmov.f32	s15, s0
 800392c:	4bbb      	ldr	r3, [pc, #748]	; (8003c1c <process_user_input+0x3a4>)
 800392e:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 8003932:	4bba      	ldr	r3, [pc, #744]	; (8003c1c <process_user_input+0x3a4>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fc fe2e 	bl	8000598 <__aeabi_f2d>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	48b7      	ldr	r0, [pc, #732]	; (8003c20 <process_user_input+0x3a8>)
 8003942:	f00a fdf5 	bl	800e530 <iprintf>
			 break;
 8003946:	e232      	b.n	8003dae <process_user_input+0x536>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3304      	adds	r3, #4
 800394c:	4618      	mov	r0, r3
 800394e:	f00a f940 	bl	800dbd2 <atoi>
 8003952:	4603      	mov	r3, r0
 8003954:	4ab3      	ldr	r2, [pc, #716]	; (8003c24 <process_user_input+0x3ac>)
 8003956:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 8003958:	4bb2      	ldr	r3, [pc, #712]	; (8003c24 <process_user_input+0x3ac>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	4619      	mov	r1, r3
 800395e:	48b2      	ldr	r0, [pc, #712]	; (8003c28 <process_user_input+0x3b0>)
 8003960:	f00a fde6 	bl	800e530 <iprintf>
			 break;
 8003964:	e223      	b.n	8003dae <process_user_input+0x536>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3304      	adds	r3, #4
 800396a:	4618      	mov	r0, r3
 800396c:	f00a f931 	bl	800dbd2 <atoi>
 8003970:	4603      	mov	r3, r0
 8003972:	4aac      	ldr	r2, [pc, #688]	; (8003c24 <process_user_input+0x3ac>)
 8003974:	6093      	str	r3, [r2, #8]
			 printf("CAN_MASTER set to %d\r\n", CAN_MASTER);
 8003976:	4bab      	ldr	r3, [pc, #684]	; (8003c24 <process_user_input+0x3ac>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	4619      	mov	r1, r3
 800397c:	48ab      	ldr	r0, [pc, #684]	; (8003c2c <process_user_input+0x3b4>)
 800397e:	f00a fdd7 	bl	800e530 <iprintf>
			 break;
 8003982:	e214      	b.n	8003dae <process_user_input+0x536>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 60.0f), 0.0f);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3304      	adds	r3, #4
 8003988:	4618      	mov	r0, r3
 800398a:	f00a f91f 	bl	800dbcc <atof>
 800398e:	ec53 2b10 	vmov	r2, r3, d0
 8003992:	4610      	mov	r0, r2
 8003994:	4619      	mov	r1, r3
 8003996:	f7fd f94f 	bl	8000c38 <__aeabi_d2f>
 800399a:	4603      	mov	r3, r0
 800399c:	eddf 0aa4 	vldr	s1, [pc, #656]	; 8003c30 <process_user_input+0x3b8>
 80039a0:	ee00 3a10 	vmov	s0, r3
 80039a4:	f00e fad5 	bl	8011f52 <fminf>
 80039a8:	eef0 7a40 	vmov.f32	s15, s0
 80039ac:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8003c6c <process_user_input+0x3f4>
 80039b0:	eeb0 0a67 	vmov.f32	s0, s15
 80039b4:	f00e fab2 	bl	8011f1c <fmaxf>
 80039b8:	eef0 7a40 	vmov.f32	s15, s0
 80039bc:	4b97      	ldr	r3, [pc, #604]	; (8003c1c <process_user_input+0x3a4>)
 80039be:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 80039c2:	4b96      	ldr	r3, [pc, #600]	; (8003c1c <process_user_input+0x3a4>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fc fde6 	bl	8000598 <__aeabi_f2d>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4898      	ldr	r0, [pc, #608]	; (8003c34 <process_user_input+0x3bc>)
 80039d2:	f00a fdad 	bl	800e530 <iprintf>
			 break;
 80039d6:	e1ea      	b.n	8003dae <process_user_input+0x536>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3304      	adds	r3, #4
 80039dc:	4618      	mov	r0, r3
 80039de:	f00a f8f5 	bl	800dbcc <atof>
 80039e2:	ec53 2b10 	vmov	r2, r3, d0
 80039e6:	4610      	mov	r0, r2
 80039e8:	4619      	mov	r1, r3
 80039ea:	f7fd f925 	bl	8000c38 <__aeabi_d2f>
 80039ee:	4603      	mov	r3, r0
 80039f0:	eddf 0a91 	vldr	s1, [pc, #580]	; 8003c38 <process_user_input+0x3c0>
 80039f4:	ee00 3a10 	vmov	s0, r3
 80039f8:	f00e faab 	bl	8011f52 <fminf>
 80039fc:	eef0 7a40 	vmov.f32	s15, s0
 8003a00:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8003c6c <process_user_input+0x3f4>
 8003a04:	eeb0 0a67 	vmov.f32	s0, s15
 8003a08:	f00e fa88 	bl	8011f1c <fmaxf>
 8003a0c:	eef0 7a40 	vmov.f32	s15, s0
 8003a10:	4b82      	ldr	r3, [pc, #520]	; (8003c1c <process_user_input+0x3a4>)
 8003a12:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 8003a16:	4b81      	ldr	r3, [pc, #516]	; (8003c1c <process_user_input+0x3a4>)
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fc fdbc 	bl	8000598 <__aeabi_f2d>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4885      	ldr	r0, [pc, #532]	; (8003c3c <process_user_input+0x3c4>)
 8003a26:	f00a fd83 	bl	800e530 <iprintf>
			 break;
 8003a2a:	e1c0      	b.n	8003dae <process_user_input+0x536>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4618      	mov	r0, r3
 8003a32:	f00a f8ce 	bl	800dbd2 <atoi>
 8003a36:	4603      	mov	r3, r0
 8003a38:	4a7a      	ldr	r2, [pc, #488]	; (8003c24 <process_user_input+0x3ac>)
 8003a3a:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 8003a3c:	4b79      	ldr	r3, [pc, #484]	; (8003c24 <process_user_input+0x3ac>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	4619      	mov	r1, r3
 8003a42:	487f      	ldr	r0, [pc, #508]	; (8003c40 <process_user_input+0x3c8>)
 8003a44:	f00a fd74 	bl	800e530 <iprintf>
			 break;
 8003a48:	e1b1      	b.n	8003dae <process_user_input+0x536>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f00a f8bc 	bl	800dbcc <atof>
 8003a54:	ec53 2b10 	vmov	r2, r3, d0
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	f7fd f8ec 	bl	8000c38 <__aeabi_d2f>
 8003a60:	4603      	mov	r3, r0
 8003a62:	eddf 0a78 	vldr	s1, [pc, #480]	; 8003c44 <process_user_input+0x3cc>
 8003a66:	ee00 3a10 	vmov	s0, r3
 8003a6a:	f00e fa72 	bl	8011f52 <fminf>
 8003a6e:	eef0 7a40 	vmov.f32	s15, s0
 8003a72:	eddf 0a7e 	vldr	s1, [pc, #504]	; 8003c6c <process_user_input+0x3f4>
 8003a76:	eeb0 0a67 	vmov.f32	s0, s15
 8003a7a:	f00e fa4f 	bl	8011f1c <fmaxf>
 8003a7e:	eef0 7a40 	vmov.f32	s15, s0
 8003a82:	4b66      	ldr	r3, [pc, #408]	; (8003c1c <process_user_input+0x3a4>)
 8003a84:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 8003a88:	4b64      	ldr	r3, [pc, #400]	; (8003c1c <process_user_input+0x3a4>)
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fc fd83 	bl	8000598 <__aeabi_f2d>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	486c      	ldr	r0, [pc, #432]	; (8003c48 <process_user_input+0x3d0>)
 8003a98:	f00a fd4a 	bl	800e530 <iprintf>
			 break;
 8003a9c:	e187      	b.n	8003dae <process_user_input+0x536>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f00a f892 	bl	800dbcc <atof>
 8003aa8:	ec53 2b10 	vmov	r2, r3, d0
 8003aac:	4610      	mov	r0, r2
 8003aae:	4619      	mov	r1, r3
 8003ab0:	f7fd f8c2 	bl	8000c38 <__aeabi_d2f>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	eddf 0a65 	vldr	s1, [pc, #404]	; 8003c4c <process_user_input+0x3d4>
 8003aba:	ee00 3a10 	vmov	s0, r3
 8003abe:	f00e fa48 	bl	8011f52 <fminf>
 8003ac2:	eef0 7a40 	vmov.f32	s15, s0
 8003ac6:	eddf 0a69 	vldr	s1, [pc, #420]	; 8003c6c <process_user_input+0x3f4>
 8003aca:	eeb0 0a67 	vmov.f32	s0, s15
 8003ace:	f00e fa25 	bl	8011f1c <fmaxf>
 8003ad2:	eef0 7a40 	vmov.f32	s15, s0
 8003ad6:	4b51      	ldr	r3, [pc, #324]	; (8003c1c <process_user_input+0x3a4>)
 8003ad8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 8003adc:	4b4f      	ldr	r3, [pc, #316]	; (8003c1c <process_user_input+0x3a4>)
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fc fd59 	bl	8000598 <__aeabi_f2d>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4859      	ldr	r0, [pc, #356]	; (8003c50 <process_user_input+0x3d8>)
 8003aec:	f00a fd20 	bl	800e530 <iprintf>
			 break;
 8003af0:	e15d      	b.n	8003dae <process_user_input+0x536>
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3304      	adds	r3, #4
 8003af6:	4618      	mov	r0, r3
 8003af8:	f00a f868 	bl	800dbcc <atof>
 8003afc:	ec53 2b10 	vmov	r2, r3, d0
 8003b00:	4610      	mov	r0, r2
 8003b02:	4619      	mov	r1, r3
 8003b04:	f7fd f898 	bl	8000c38 <__aeabi_d2f>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8003b0e:	ee00 3a10 	vmov	s0, r3
 8003b12:	f00e fa1e 	bl	8011f52 <fminf>
 8003b16:	eef0 7a40 	vmov.f32	s15, s0
 8003b1a:	eddf 0a54 	vldr	s1, [pc, #336]	; 8003c6c <process_user_input+0x3f4>
 8003b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b22:	f00e f9fb 	bl	8011f1c <fmaxf>
 8003b26:	eef0 7a40 	vmov.f32	s15, s0
 8003b2a:	4b3c      	ldr	r3, [pc, #240]	; (8003c1c <process_user_input+0x3a4>)
 8003b2c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			 printf("I_CAL set to %f\r\n", I_CAL);
 8003b30:	4b3a      	ldr	r3, [pc, #232]	; (8003c1c <process_user_input+0x3a4>)
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fc fd2f 	bl	8000598 <__aeabi_f2d>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4845      	ldr	r0, [pc, #276]	; (8003c54 <process_user_input+0x3dc>)
 8003b40:	f00a fcf6 	bl	800e530 <iprintf>
			 break;
 8003b44:	e133      	b.n	8003dae <process_user_input+0x536>
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f00a f83e 	bl	800dbcc <atof>
 8003b50:	ec53 2b10 	vmov	r2, r3, d0
 8003b54:	4610      	mov	r0, r2
 8003b56:	4619      	mov	r1, r3
 8003b58:	f7fd f86e 	bl	8000c38 <__aeabi_d2f>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8003c58 <process_user_input+0x3e0>
 8003b62:	ee00 3a10 	vmov	s0, r3
 8003b66:	f00e f9d9 	bl	8011f1c <fmaxf>
 8003b6a:	eef0 7a40 	vmov.f32	s15, s0
 8003b6e:	4b2b      	ldr	r3, [pc, #172]	; (8003c1c <process_user_input+0x3a4>)
 8003b70:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			 printf("GR set to %f\r\n", GR);
 8003b74:	4b29      	ldr	r3, [pc, #164]	; (8003c1c <process_user_input+0x3a4>)
 8003b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fc fd0d 	bl	8000598 <__aeabi_f2d>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4836      	ldr	r0, [pc, #216]	; (8003c5c <process_user_input+0x3e4>)
 8003b84:	f00a fcd4 	bl	800e530 <iprintf>
			 break;
 8003b88:	e111      	b.n	8003dae <process_user_input+0x536>
		 case 'k':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f00a f81c 	bl	800dbcc <atof>
 8003b94:	ec53 2b10 	vmov	r2, r3, d0
 8003b98:	4610      	mov	r0, r2
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	f7fd f84c 	bl	8000c38 <__aeabi_d2f>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8003c60 <process_user_input+0x3e8>
 8003ba6:	ee00 3a10 	vmov	s0, r3
 8003baa:	f00e f9b7 	bl	8011f1c <fmaxf>
 8003bae:	eef0 7a40 	vmov.f32	s15, s0
 8003bb2:	4b1a      	ldr	r3, [pc, #104]	; (8003c1c <process_user_input+0x3a4>)
 8003bb4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			 printf("KT set to %f\r\n", KT);
 8003bb8:	4b18      	ldr	r3, [pc, #96]	; (8003c1c <process_user_input+0x3a4>)
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fc fceb 	bl	8000598 <__aeabi_f2d>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	4827      	ldr	r0, [pc, #156]	; (8003c64 <process_user_input+0x3ec>)
 8003bc8:	f00a fcb2 	bl	800e530 <iprintf>
			 break;
 8003bcc:	e0ef      	b.n	8003dae <process_user_input+0x536>
		 case 'x':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f009 fffa 	bl	800dbcc <atof>
 8003bd8:	ec53 2b10 	vmov	r2, r3, d0
 8003bdc:	4610      	mov	r0, r2
 8003bde:	4619      	mov	r1, r3
 8003be0:	f7fd f82a 	bl	8000c38 <__aeabi_d2f>
 8003be4:	4603      	mov	r3, r0
 8003be6:	eddf 0a21 	vldr	s1, [pc, #132]	; 8003c6c <process_user_input+0x3f4>
 8003bea:	ee00 3a10 	vmov	s0, r3
 8003bee:	f00e f995 	bl	8011f1c <fmaxf>
 8003bf2:	eef0 7a40 	vmov.f32	s15, s0
 8003bf6:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <process_user_input+0x3a4>)
 8003bf8:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 8003bfc:	4b07      	ldr	r3, [pc, #28]	; (8003c1c <process_user_input+0x3a4>)
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fc fcc9 	bl	8000598 <__aeabi_f2d>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4817      	ldr	r0, [pc, #92]	; (8003c68 <process_user_input+0x3f0>)
 8003c0c:	f00a fc90 	bl	800e530 <iprintf>
			 break;
 8003c10:	e0cd      	b.n	8003dae <process_user_input+0x536>
 8003c12:	bf00      	nop
 8003c14:	44fa0000 	.word	0x44fa0000
 8003c18:	42c80000 	.word	0x42c80000
 8003c1c:	20004cec 	.word	0x20004cec
 8003c20:	08012a90 	.word	0x08012a90
 8003c24:	20004dec 	.word	0x20004dec
 8003c28:	08012aa4 	.word	0x08012aa4
 8003c2c:	08012ab8 	.word	0x08012ab8
 8003c30:	42700000 	.word	0x42700000
 8003c34:	08012ad0 	.word	0x08012ad0
 8003c38:	42040000 	.word	0x42040000
 8003c3c:	08012ae4 	.word	0x08012ae4
 8003c40:	08012afc 	.word	0x08012afc
 8003c44:	43160000 	.word	0x43160000
 8003c48:	08012b14 	.word	0x08012b14
 8003c4c:	42200000 	.word	0x42200000
 8003c50:	08012b2c 	.word	0x08012b2c
 8003c54:	08012b44 	.word	0x08012b44
 8003c58:	3a83126f 	.word	0x3a83126f
 8003c5c:	08012b58 	.word	0x08012b58
 8003c60:	38d1b717 	.word	0x38d1b717
 8003c64:	08012b68 	.word	0x08012b68
 8003c68:	08012b78 	.word	0x08012b78
 8003c6c:	00000000 	.word	0x00000000
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4618      	mov	r0, r3
 8003c76:	f009 ffa9 	bl	800dbcc <atof>
 8003c7a:	ec53 2b10 	vmov	r2, r3, d0
 8003c7e:	4610      	mov	r0, r2
 8003c80:	4619      	mov	r1, r3
 8003c82:	f7fc ffd9 	bl	8000c38 <__aeabi_d2f>
 8003c86:	4603      	mov	r3, r0
 8003c88:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 8003c6c <process_user_input+0x3f4>
 8003c8c:	ee00 3a10 	vmov	s0, r3
 8003c90:	f00e f944 	bl	8011f1c <fmaxf>
 8003c94:	eef0 7a40 	vmov.f32	s15, s0
 8003c98:	4b50      	ldr	r3, [pc, #320]	; (8003ddc <process_user_input+0x564>)
 8003c9a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 8003c9e:	4b4f      	ldr	r3, [pc, #316]	; (8003ddc <process_user_input+0x564>)
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fc fc78 	bl	8000598 <__aeabi_f2d>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	484c      	ldr	r0, [pc, #304]	; (8003de0 <process_user_input+0x568>)
 8003cae:	f00a fc3f 	bl	800e530 <iprintf>
			 break;
 8003cb2:	e07c      	b.n	8003dae <process_user_input+0x536>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f009 ff87 	bl	800dbcc <atof>
 8003cbe:	ec53 2b10 	vmov	r2, r3, d0
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	f7fc ffb7 	bl	8000c38 <__aeabi_d2f>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	eddf 0a45 	vldr	s1, [pc, #276]	; 8003de4 <process_user_input+0x56c>
 8003cd0:	ee00 3a10 	vmov	s0, r3
 8003cd4:	f00e f922 	bl	8011f1c <fmaxf>
 8003cd8:	eef0 7a40 	vmov.f32	s15, s0
 8003cdc:	4b3f      	ldr	r3, [pc, #252]	; (8003ddc <process_user_input+0x564>)
 8003cde:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 P_MIN = -P_MAX;
 8003ce2:	4b3e      	ldr	r3, [pc, #248]	; (8003ddc <process_user_input+0x564>)
 8003ce4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003ce8:	eef1 7a67 	vneg.f32	s15, s15
 8003cec:	4b3b      	ldr	r3, [pc, #236]	; (8003ddc <process_user_input+0x564>)
 8003cee:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("P_MAX set to %f\r\n", P_MAX);
 8003cf2:	4b3a      	ldr	r3, [pc, #232]	; (8003ddc <process_user_input+0x564>)
 8003cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fc fc4e 	bl	8000598 <__aeabi_f2d>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4839      	ldr	r0, [pc, #228]	; (8003de8 <process_user_input+0x570>)
 8003d02:	f00a fc15 	bl	800e530 <iprintf>
			 break;
 8003d06:	e052      	b.n	8003dae <process_user_input+0x536>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f009 ff5d 	bl	800dbcc <atof>
 8003d12:	ec53 2b10 	vmov	r2, r3, d0
 8003d16:	4610      	mov	r0, r2
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f7fc ff8d 	bl	8000c38 <__aeabi_d2f>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	eddf 0a30 	vldr	s1, [pc, #192]	; 8003de4 <process_user_input+0x56c>
 8003d24:	ee00 3a10 	vmov	s0, r3
 8003d28:	f00e f8f8 	bl	8011f1c <fmaxf>
 8003d2c:	eef0 7a40 	vmov.f32	s15, s0
 8003d30:	4b2a      	ldr	r3, [pc, #168]	; (8003ddc <process_user_input+0x564>)
 8003d32:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 V_MIN = -V_MAX;
 8003d36:	4b29      	ldr	r3, [pc, #164]	; (8003ddc <process_user_input+0x564>)
 8003d38:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003d3c:	eef1 7a67 	vneg.f32	s15, s15
 8003d40:	4b26      	ldr	r3, [pc, #152]	; (8003ddc <process_user_input+0x564>)
 8003d42:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			 printf("V_MAX set to %f\r\n", V_MAX);
 8003d46:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <process_user_input+0x564>)
 8003d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fc fc24 	bl	8000598 <__aeabi_f2d>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4825      	ldr	r0, [pc, #148]	; (8003dec <process_user_input+0x574>)
 8003d56:	f00a fbeb 	bl	800e530 <iprintf>
			 break;
 8003d5a:	e028      	b.n	8003dae <process_user_input+0x536>
		 case 'o':
			 T_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	4618      	mov	r0, r3
 8003d62:	f009 ff33 	bl	800dbcc <atof>
 8003d66:	ec53 2b10 	vmov	r2, r3, d0
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	f7fc ff63 	bl	8000c38 <__aeabi_d2f>
 8003d72:	4603      	mov	r3, r0
 8003d74:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8003de4 <process_user_input+0x56c>
 8003d78:	ee00 3a10 	vmov	s0, r3
 8003d7c:	f00e f8ce 	bl	8011f1c <fmaxf>
 8003d80:	eef0 7a40 	vmov.f32	s15, s0
 8003d84:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <process_user_input+0x564>)
 8003d86:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("T_MAX set to %f\r\n", T_MAX);
 8003d8a:	4b14      	ldr	r3, [pc, #80]	; (8003ddc <process_user_input+0x564>)
 8003d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fc fc02 	bl	8000598 <__aeabi_f2d>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4815      	ldr	r0, [pc, #84]	; (8003df0 <process_user_input+0x578>)
 8003d9a:	f00a fbc9 	bl	800e530 <iprintf>
			 break;
 8003d9e:	e006      	b.n	8003dae <process_user_input+0x536>
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3304      	adds	r3, #4
 8003da4:	4619      	mov	r1, r3
 8003da6:	4813      	ldr	r0, [pc, #76]	; (8003df4 <process_user_input+0x57c>)
 8003da8:	f00a fbc2 	bl	800e530 <iprintf>
			 break;
 8003dac:	bf00      	nop

		 }

	 /* Write new settings to flash */
	 store_eeprom_regs();
 8003dae:	f001 fec1 	bl	8005b34 <store_eeprom_regs>
	 load_eeprom_regs();
 8003db2:	f001 fecd 	bl	8005b50 <load_eeprom_regs>

	 enter_setup_state();
 8003db6:	f7ff fbeb 	bl	8003590 <enter_setup_state>

	 fsmstate->bytecount = 0;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	731a      	strb	r2, [r3, #12]
	 fsmstate->cmd_id = 0;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	735a      	strb	r2, [r3, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	2208      	movs	r2, #8
 8003dcc:	2100      	movs	r1, #0
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f009 ff3c 	bl	800dc4c <memset>
 }
 8003dd4:	bf00      	nop
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	20004cec 	.word	0x20004cec
 8003de0:	08012b8c 	.word	0x08012b8c
 8003de4:	00000000 	.word	0x00000000
 8003de8:	08012ba0 	.word	0x08012ba0
 8003dec:	08012bb4 	.word	0x08012bb4
 8003df0:	08012bc8 	.word	0x08012bc8
 8003df4:	08012bdc 	.word	0x08012bdc

08003df8 <enable_gd>:
 */
#include "gatedrive.h"
#include <stdio.h>


void enable_gd(ControllerStruct *controller){
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
	//Restart PWM
	controller->isEnabled = 1;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
    HAL_TIM_PWM_Start(&TIM_PWM, TIM_CHANNEL_1);
 8003e08:	2100      	movs	r1, #0
 8003e0a:	480d      	ldr	r0, [pc, #52]	; (8003e40 <enable_gd+0x48>)
 8003e0c:	f006 feb2 	bl	800ab74 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&TIM_PWM, TIM_CHANNEL_2);
 8003e10:	2104      	movs	r1, #4
 8003e12:	480b      	ldr	r0, [pc, #44]	; (8003e40 <enable_gd+0x48>)
 8003e14:	f006 feae 	bl	800ab74 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&TIM_PWM, TIM_CHANNEL_3);
 8003e18:	2108      	movs	r1, #8
 8003e1a:	4809      	ldr	r0, [pc, #36]	; (8003e40 <enable_gd+0x48>)
 8003e1c:	f006 feaa 	bl	800ab74 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&TIM_PWM, TIM_CHANNEL_1);
 8003e20:	2100      	movs	r1, #0
 8003e22:	4807      	ldr	r0, [pc, #28]	; (8003e40 <enable_gd+0x48>)
 8003e24:	f007 ffa6 	bl	800bd74 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&TIM_PWM, TIM_CHANNEL_2);
 8003e28:	2104      	movs	r1, #4
 8003e2a:	4805      	ldr	r0, [pc, #20]	; (8003e40 <enable_gd+0x48>)
 8003e2c:	f007 ffa2 	bl	800bd74 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&TIM_PWM, TIM_CHANNEL_3);
 8003e30:	2108      	movs	r1, #8
 8003e32:	4803      	ldr	r0, [pc, #12]	; (8003e40 <enable_gd+0x48>)
 8003e34:	f007 ff9e 	bl	800bd74 <HAL_TIMEx_PWMN_Start>
//    printf("enabled\r\n");
}
 8003e38:	bf00      	nop
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	200050a4 	.word	0x200050a4

08003e44 <disable_gd>:
void disable_gd(ControllerStruct *controller){
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	//Drive all gates low
	controller->isEnabled = 0;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.0f);
 8003e54:	4b30      	ldr	r3, [pc, #192]	; (8003f18 <disable_gd+0xd4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5a:	ee07 3a90 	vmov	s15, r3
 8003e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e62:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003f1c <disable_gd+0xd8>
 8003e66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e6a:	4b2b      	ldr	r3, [pc, #172]	; (8003f18 <disable_gd+0xd4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e72:	ee17 2a90 	vmov	r2, s15
 8003e76:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.0f);
 8003e78:	4b27      	ldr	r3, [pc, #156]	; (8003f18 <disable_gd+0xd4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7e:	ee07 3a90 	vmov	s15, r3
 8003e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e86:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003f1c <disable_gd+0xd8>
 8003e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e8e:	4b22      	ldr	r3, [pc, #136]	; (8003f18 <disable_gd+0xd4>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e96:	ee17 2a90 	vmov	r2, s15
 8003e9a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.0f);
 8003e9c:	4b1e      	ldr	r3, [pc, #120]	; (8003f18 <disable_gd+0xd4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eaa:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003f1c <disable_gd+0xd8>
 8003eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003eb2:	4b19      	ldr	r3, [pc, #100]	; (8003f18 <disable_gd+0xd4>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eba:	ee17 2a90 	vmov	r2, s15
 8003ebe:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(DRV_HA, GPIO_PIN_RESET );
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eca:	f004 fd69 	bl	80089a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_HB, GPIO_PIN_RESET );
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ed8:	f004 fd62 	bl	80089a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_HC, GPIO_PIN_RESET );
 8003edc:	2200      	movs	r2, #0
 8003ede:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ee6:	f004 fd5b 	bl	80089a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_LA, GPIO_PIN_RESET );
 8003eea:	2200      	movs	r2, #0
 8003eec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ef0:	480b      	ldr	r0, [pc, #44]	; (8003f20 <disable_gd+0xdc>)
 8003ef2:	f004 fd55 	bl	80089a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_LB, GPIO_PIN_RESET );
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f00:	f004 fd4e 	bl	80089a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_LC, GPIO_PIN_RESET );
 8003f04:	2200      	movs	r2, #0
 8003f06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f0a:	4806      	ldr	r0, [pc, #24]	; (8003f24 <disable_gd+0xe0>)
 8003f0c:	f004 fd48 	bl	80089a0 <HAL_GPIO_WritePin>

}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	200050a4 	.word	0x200050a4
 8003f1c:	00000000 	.word	0x00000000
 8003f20:	48000800 	.word	0x48000800
 8003f24:	48000400 	.word	0x48000400

08003f28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08a      	sub	sp, #40	; 0x28
 8003f2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f2e:	f107 0314 	add.w	r3, r7, #20
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	605a      	str	r2, [r3, #4]
 8003f38:	609a      	str	r2, [r3, #8]
 8003f3a:	60da      	str	r2, [r3, #12]
 8003f3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f3e:	4b30      	ldr	r3, [pc, #192]	; (8004000 <MX_GPIO_Init+0xd8>)
 8003f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f42:	4a2f      	ldr	r2, [pc, #188]	; (8004000 <MX_GPIO_Init+0xd8>)
 8003f44:	f043 0304 	orr.w	r3, r3, #4
 8003f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f4a:	4b2d      	ldr	r3, [pc, #180]	; (8004000 <MX_GPIO_Init+0xd8>)
 8003f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f56:	4b2a      	ldr	r3, [pc, #168]	; (8004000 <MX_GPIO_Init+0xd8>)
 8003f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5a:	4a29      	ldr	r2, [pc, #164]	; (8004000 <MX_GPIO_Init+0xd8>)
 8003f5c:	f043 0320 	orr.w	r3, r3, #32
 8003f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f62:	4b27      	ldr	r3, [pc, #156]	; (8004000 <MX_GPIO_Init+0xd8>)
 8003f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f6e:	4b24      	ldr	r3, [pc, #144]	; (8004000 <MX_GPIO_Init+0xd8>)
 8003f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f72:	4a23      	ldr	r2, [pc, #140]	; (8004000 <MX_GPIO_Init+0xd8>)
 8003f74:	f043 0301 	orr.w	r3, r3, #1
 8003f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f7a:	4b21      	ldr	r3, [pc, #132]	; (8004000 <MX_GPIO_Init+0xd8>)
 8003f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	60bb      	str	r3, [r7, #8]
 8003f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f86:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <MX_GPIO_Init+0xd8>)
 8003f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8a:	4a1d      	ldr	r2, [pc, #116]	; (8004000 <MX_GPIO_Init+0xd8>)
 8003f8c:	f043 0302 	orr.w	r3, r3, #2
 8003f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f92:	4b1b      	ldr	r3, [pc, #108]	; (8004000 <MX_GPIO_Init+0xd8>)
 8003f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	607b      	str	r3, [r7, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_11, GPIO_PIN_RESET);
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f644 0140 	movw	r1, #18496	; 0x4840
 8003fa4:	4817      	ldr	r0, [pc, #92]	; (8004004 <MX_GPIO_Init+0xdc>)
 8003fa6:	f004 fcfb 	bl	80089a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8003faa:	2200      	movs	r2, #0
 8003fac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fb4:	f004 fcf4 	bl	80089a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC6 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_11;
 8003fb8:	f644 0340 	movw	r3, #18496	; 0x4840
 8003fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fca:	f107 0314 	add.w	r3, r7, #20
 8003fce:	4619      	mov	r1, r3
 8003fd0:	480c      	ldr	r0, [pc, #48]	; (8004004 <MX_GPIO_Init+0xdc>)
 8003fd2:	f004 fb63 	bl	800869c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe8:	f107 0314 	add.w	r3, r7, #20
 8003fec:	4619      	mov	r1, r3
 8003fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ff2:	f004 fb53 	bl	800869c <HAL_GPIO_Init>

}
 8003ff6:	bf00      	nop
 8003ff8:	3728      	adds	r7, #40	; 0x28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40021000 	.word	0x40021000
 8004004:	48000800 	.word	0x48000800

08004008 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800400c:	4b1e      	ldr	r3, [pc, #120]	; (8004088 <MX_I2C1_Init+0x80>)
 800400e:	4a1f      	ldr	r2, [pc, #124]	; (800408c <MX_I2C1_Init+0x84>)
 8004010:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00802F62;
 8004012:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <MX_I2C1_Init+0x80>)
 8004014:	4a1e      	ldr	r2, [pc, #120]	; (8004090 <MX_I2C1_Init+0x88>)
 8004016:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004018:	4b1b      	ldr	r3, [pc, #108]	; (8004088 <MX_I2C1_Init+0x80>)
 800401a:	2200      	movs	r2, #0
 800401c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800401e:	4b1a      	ldr	r3, [pc, #104]	; (8004088 <MX_I2C1_Init+0x80>)
 8004020:	2201      	movs	r2, #1
 8004022:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004024:	4b18      	ldr	r3, [pc, #96]	; (8004088 <MX_I2C1_Init+0x80>)
 8004026:	2200      	movs	r2, #0
 8004028:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800402a:	4b17      	ldr	r3, [pc, #92]	; (8004088 <MX_I2C1_Init+0x80>)
 800402c:	2200      	movs	r2, #0
 800402e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004030:	4b15      	ldr	r3, [pc, #84]	; (8004088 <MX_I2C1_Init+0x80>)
 8004032:	2200      	movs	r2, #0
 8004034:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004036:	4b14      	ldr	r3, [pc, #80]	; (8004088 <MX_I2C1_Init+0x80>)
 8004038:	2200      	movs	r2, #0
 800403a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800403c:	4b12      	ldr	r3, [pc, #72]	; (8004088 <MX_I2C1_Init+0x80>)
 800403e:	2200      	movs	r2, #0
 8004040:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004042:	4811      	ldr	r0, [pc, #68]	; (8004088 <MX_I2C1_Init+0x80>)
 8004044:	f004 fcc4 	bl	80089d0 <HAL_I2C_Init>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800404e:	f000 fbdc 	bl	800480a <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004052:	2100      	movs	r1, #0
 8004054:	480c      	ldr	r0, [pc, #48]	; (8004088 <MX_I2C1_Init+0x80>)
 8004056:	f005 faf7 	bl	8009648 <HAL_I2CEx_ConfigAnalogFilter>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004060:	f000 fbd3 	bl	800480a <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004064:	2100      	movs	r1, #0
 8004066:	4808      	ldr	r0, [pc, #32]	; (8004088 <MX_I2C1_Init+0x80>)
 8004068:	f005 fb39 	bl	80096de <HAL_I2CEx_ConfigDigitalFilter>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004072:	f000 fbca 	bl	800480a <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 8004076:	4b07      	ldr	r3, [pc, #28]	; (8004094 <MX_I2C1_Init+0x8c>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	4a06      	ldr	r2, [pc, #24]	; (8004094 <MX_I2C1_Init+0x8c>)
 800407c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004080:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	2000041c 	.word	0x2000041c
 800408c:	40005400 	.word	0x40005400
 8004090:	00802f62 	.word	0x00802f62
 8004094:	40010000 	.word	0x40010000

08004098 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	; 0x28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a0:	f107 0314 	add.w	r3, r7, #20
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	605a      	str	r2, [r3, #4]
 80040aa:	609a      	str	r2, [r3, #8]
 80040ac:	60da      	str	r2, [r3, #12]
 80040ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a17      	ldr	r2, [pc, #92]	; (8004114 <HAL_I2C_MspInit+0x7c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d128      	bne.n	800410c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ba:	4b17      	ldr	r3, [pc, #92]	; (8004118 <HAL_I2C_MspInit+0x80>)
 80040bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040be:	4a16      	ldr	r2, [pc, #88]	; (8004118 <HAL_I2C_MspInit+0x80>)
 80040c0:	f043 0302 	orr.w	r3, r3, #2
 80040c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040c6:	4b14      	ldr	r3, [pc, #80]	; (8004118 <HAL_I2C_MspInit+0x80>)
 80040c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80040d2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80040d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040d8:	2312      	movs	r3, #18
 80040da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040dc:	2301      	movs	r3, #1
 80040de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e0:	2300      	movs	r3, #0
 80040e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80040e4:	2304      	movs	r3, #4
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040e8:	f107 0314 	add.w	r3, r7, #20
 80040ec:	4619      	mov	r1, r3
 80040ee:	480b      	ldr	r0, [pc, #44]	; (800411c <HAL_I2C_MspInit+0x84>)
 80040f0:	f004 fad4 	bl	800869c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040f4:	4b08      	ldr	r3, [pc, #32]	; (8004118 <HAL_I2C_MspInit+0x80>)
 80040f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f8:	4a07      	ldr	r2, [pc, #28]	; (8004118 <HAL_I2C_MspInit+0x80>)
 80040fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004100:	4b05      	ldr	r3, [pc, #20]	; (8004118 <HAL_I2C_MspInit+0x80>)
 8004102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800410c:	bf00      	nop
 800410e:	3728      	adds	r7, #40	; 0x28
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40005400 	.word	0x40005400
 8004118:	40021000 	.word	0x40021000
 800411c:	48000400 	.word	0x48000400

08004120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	4603      	mov	r3, r0
 8004128:	6039      	str	r1, [r7, #0]
 800412a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800412c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004130:	2b00      	cmp	r3, #0
 8004132:	db0a      	blt.n	800414a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	b2da      	uxtb	r2, r3
 8004138:	490c      	ldr	r1, [pc, #48]	; (800416c <__NVIC_SetPriority+0x4c>)
 800413a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413e:	0112      	lsls	r2, r2, #4
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	440b      	add	r3, r1
 8004144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004148:	e00a      	b.n	8004160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	b2da      	uxtb	r2, r3
 800414e:	4908      	ldr	r1, [pc, #32]	; (8004170 <__NVIC_SetPriority+0x50>)
 8004150:	79fb      	ldrb	r3, [r7, #7]
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	3b04      	subs	r3, #4
 8004158:	0112      	lsls	r2, r2, #4
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	440b      	add	r3, r1
 800415e:	761a      	strb	r2, [r3, #24]
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	e000e100 	.word	0xe000e100
 8004170:	e000ed00 	.word	0xe000ed00

08004174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004178:	f001 fd21 	bl	8005bbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800417c:	f000 fada 	bl	8004734 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(100);
 8004180:	2064      	movs	r0, #100	; 0x64
 8004182:	f001 fd8d 	bl	8005ca0 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004186:	f7ff fecf 	bl	8003f28 <MX_GPIO_Init>
  MX_DMA_Init();
 800418a:	f7fd fcf7 	bl	8001b7c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800418e:	f001 fc15 	bl	80059bc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8004192:	f001 faa9 	bl	80056e8 <MX_TIM1_Init>
  MX_I2C1_Init();
 8004196:	f7ff ff37 	bl	8004008 <MX_I2C1_Init>
  MX_OPAMP1_Init();
 800419a:	f000 fcdb 	bl	8004b54 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 800419e:	f000 fd07 	bl	8004bb0 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 80041a2:	f000 fd33 	bl	8004c0c <MX_OPAMP3_Init>
  MX_ADC1_Init();
 80041a6:	f7fc ff4f 	bl	8001048 <MX_ADC1_Init>
  MX_ADC2_Init();
 80041aa:	f7fc ffd5 	bl	8001158 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 80041ae:	f7fd fe8d 	bl	8001ecc <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  load_eeprom_regs();
 80041b2:	f001 fccd 	bl	8005b50 <load_eeprom_regs>
  /* Sanitize configs in case flash is empty*/
  if(E_ZERO==-1){E_ZERO = 0;}
 80041b6:	4bae      	ldr	r3, [pc, #696]	; (8004470 <main+0x2fc>)
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041be:	d102      	bne.n	80041c6 <main+0x52>
 80041c0:	4bab      	ldr	r3, [pc, #684]	; (8004470 <main+0x2fc>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	615a      	str	r2, [r3, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 80041c6:	4baa      	ldr	r3, [pc, #680]	; (8004470 <main+0x2fc>)
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ce:	d102      	bne.n	80041d6 <main+0x62>
 80041d0:	4ba7      	ldr	r3, [pc, #668]	; (8004470 <main+0x2fc>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	611a      	str	r2, [r3, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 80041d6:	4ba7      	ldr	r3, [pc, #668]	; (8004474 <main+0x300>)
 80041d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80041dc:	eef4 7a67 	vcmp.f32	s15, s15
 80041e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e4:	d609      	bvs.n	80041fa <main+0x86>
 80041e6:	4ba3      	ldr	r3, [pc, #652]	; (8004474 <main+0x300>)
 80041e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80041ec:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80041f0:	eef4 7a47 	vcmp.f32	s15, s14
 80041f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f8:	d102      	bne.n	8004200 <main+0x8c>
 80041fa:	4b9e      	ldr	r3, [pc, #632]	; (8004474 <main+0x300>)
 80041fc:	4a9e      	ldr	r2, [pc, #632]	; (8004478 <main+0x304>)
 80041fe:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8004200:	4b9c      	ldr	r3, [pc, #624]	; (8004474 <main+0x300>)
 8004202:	edd3 7a03 	vldr	s15, [r3, #12]
 8004206:	eef4 7a67 	vcmp.f32	s15, s15
 800420a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420e:	d609      	bvs.n	8004224 <main+0xb0>
 8004210:	4b98      	ldr	r3, [pc, #608]	; (8004474 <main+0x300>)
 8004212:	edd3 7a03 	vldr	s15, [r3, #12]
 8004216:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800421a:	eef4 7a47 	vcmp.f32	s15, s14
 800421e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004222:	d102      	bne.n	800422a <main+0xb6>
 8004224:	4b93      	ldr	r3, [pc, #588]	; (8004474 <main+0x300>)
 8004226:	4a95      	ldr	r2, [pc, #596]	; (800447c <main+0x308>)
 8004228:	60da      	str	r2, [r3, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 800422a:	4b92      	ldr	r3, [pc, #584]	; (8004474 <main+0x300>)
 800422c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004230:	eef4 7a67 	vcmp.f32	s15, s15
 8004234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004238:	d609      	bvs.n	800424e <main+0xda>
 800423a:	4b8e      	ldr	r3, [pc, #568]	; (8004474 <main+0x300>)
 800423c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004240:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004244:	eef4 7a47 	vcmp.f32	s15, s14
 8004248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800424c:	d103      	bne.n	8004256 <main+0xe2>
 800424e:	4b89      	ldr	r3, [pc, #548]	; (8004474 <main+0x300>)
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	619a      	str	r2, [r3, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 8004256:	4b86      	ldr	r3, [pc, #536]	; (8004470 <main+0x2fc>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425e:	d102      	bne.n	8004266 <main+0xf2>
 8004260:	4b83      	ldr	r3, [pc, #524]	; (8004470 <main+0x2fc>)
 8004262:	2201      	movs	r2, #1
 8004264:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 8004266:	4b82      	ldr	r3, [pc, #520]	; (8004470 <main+0x2fc>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426e:	d102      	bne.n	8004276 <main+0x102>
 8004270:	4b7f      	ldr	r3, [pc, #508]	; (8004470 <main+0x2fc>)
 8004272:	2200      	movs	r2, #0
 8004274:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 0;}
 8004276:	4b7e      	ldr	r3, [pc, #504]	; (8004470 <main+0x2fc>)
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427e:	d102      	bne.n	8004286 <main+0x112>
 8004280:	4b7b      	ldr	r3, [pc, #492]	; (8004470 <main+0x2fc>)
 8004282:	2200      	movs	r2, #0
 8004284:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8004286:	4b7b      	ldr	r3, [pc, #492]	; (8004474 <main+0x300>)
 8004288:	edd3 7a07 	vldr	s15, [r3, #28]
 800428c:	eef4 7a67 	vcmp.f32	s15, s15
 8004290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004294:	d609      	bvs.n	80042aa <main+0x136>
 8004296:	4b77      	ldr	r3, [pc, #476]	; (8004474 <main+0x300>)
 8004298:	edd3 7a07 	vldr	s15, [r3, #28]
 800429c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80042a0:	eef4 7a47 	vcmp.f32	s15, s14
 80042a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a8:	d103      	bne.n	80042b2 <main+0x13e>
 80042aa:	4b72      	ldr	r3, [pc, #456]	; (8004474 <main+0x300>)
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 80042b2:	4b70      	ldr	r3, [pc, #448]	; (8004474 <main+0x300>)
 80042b4:	edd3 7a08 	vldr	s15, [r3, #32]
 80042b8:	eef4 7a67 	vcmp.f32	s15, s15
 80042bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c0:	d609      	bvs.n	80042d6 <main+0x162>
 80042c2:	4b6c      	ldr	r3, [pc, #432]	; (8004474 <main+0x300>)
 80042c4:	edd3 7a08 	vldr	s15, [r3, #32]
 80042c8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80042cc:	eef4 7a47 	vcmp.f32	s15, s14
 80042d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d4:	d102      	bne.n	80042dc <main+0x168>
 80042d6:	4b67      	ldr	r3, [pc, #412]	; (8004474 <main+0x300>)
 80042d8:	4a69      	ldr	r2, [pc, #420]	; (8004480 <main+0x30c>)
 80042da:	621a      	str	r2, [r3, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 80042dc:	4b65      	ldr	r3, [pc, #404]	; (8004474 <main+0x300>)
 80042de:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80042e2:	eef4 7a67 	vcmp.f32	s15, s15
 80042e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ea:	d609      	bvs.n	8004300 <main+0x18c>
 80042ec:	4b61      	ldr	r3, [pc, #388]	; (8004474 <main+0x300>)
 80042ee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80042f2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80042f6:	eef4 7a47 	vcmp.f32	s15, s14
 80042fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fe:	d102      	bne.n	8004306 <main+0x192>
 8004300:	4b5c      	ldr	r3, [pc, #368]	; (8004474 <main+0x300>)
 8004302:	4a60      	ldr	r2, [pc, #384]	; (8004484 <main+0x310>)
 8004304:	625a      	str	r2, [r3, #36]	; 0x24
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8004306:	4b5b      	ldr	r3, [pc, #364]	; (8004474 <main+0x300>)
 8004308:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800430c:	eef4 7a67 	vcmp.f32	s15, s15
 8004310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004314:	d609      	bvs.n	800432a <main+0x1b6>
 8004316:	4b57      	ldr	r3, [pc, #348]	; (8004474 <main+0x300>)
 8004318:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800431c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004320:	eef4 7a47 	vcmp.f32	s15, s14
 8004324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004328:	d102      	bne.n	8004330 <main+0x1bc>
 800432a:	4b52      	ldr	r3, [pc, #328]	; (8004474 <main+0x300>)
 800432c:	4a56      	ldr	r2, [pc, #344]	; (8004488 <main+0x314>)
 800432e:	641a      	str	r2, [r3, #64]	; 0x40
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 8004330:	4b50      	ldr	r3, [pc, #320]	; (8004474 <main+0x300>)
 8004332:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004336:	eef4 7a67 	vcmp.f32	s15, s15
 800433a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433e:	d609      	bvs.n	8004354 <main+0x1e0>
 8004340:	4b4c      	ldr	r3, [pc, #304]	; (8004474 <main+0x300>)
 8004342:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004346:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800434a:	eef4 7a47 	vcmp.f32	s15, s14
 800434e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004352:	d102      	bne.n	800435a <main+0x1e6>
 8004354:	4b47      	ldr	r3, [pc, #284]	; (8004474 <main+0x300>)
 8004356:	4a4d      	ldr	r2, [pc, #308]	; (800448c <main+0x318>)
 8004358:	629a      	str	r2, [r3, #40]	; 0x28
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 800435a:	4b46      	ldr	r3, [pc, #280]	; (8004474 <main+0x300>)
 800435c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004360:	eef4 7a67 	vcmp.f32	s15, s15
 8004364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004368:	d609      	bvs.n	800437e <main+0x20a>
 800436a:	4b42      	ldr	r3, [pc, #264]	; (8004474 <main+0x300>)
 800436c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004370:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004374:	eef4 7a47 	vcmp.f32	s15, s14
 8004378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437c:	d103      	bne.n	8004386 <main+0x212>
 800437e:	4b3d      	ldr	r3, [pc, #244]	; (8004474 <main+0x300>)
 8004380:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004384:	63da      	str	r2, [r3, #60]	; 0x3c
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8004386:	4b3b      	ldr	r3, [pc, #236]	; (8004474 <main+0x300>)
 8004388:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800438c:	eef4 7a67 	vcmp.f32	s15, s15
 8004390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004394:	d609      	bvs.n	80043aa <main+0x236>
 8004396:	4b37      	ldr	r3, [pc, #220]	; (8004474 <main+0x300>)
 8004398:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800439c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80043a0:	eef4 7a47 	vcmp.f32	s15, s14
 80043a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a8:	d103      	bne.n	80043b2 <main+0x23e>
 80043aa:	4b32      	ldr	r3, [pc, #200]	; (8004474 <main+0x300>)
 80043ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80043b0:	631a      	str	r2, [r3, #48]	; 0x30
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 80043b2:	4b30      	ldr	r3, [pc, #192]	; (8004474 <main+0x300>)
 80043b4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80043b8:	eef4 7a67 	vcmp.f32	s15, s15
 80043bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c0:	d609      	bvs.n	80043d6 <main+0x262>
 80043c2:	4b2c      	ldr	r3, [pc, #176]	; (8004474 <main+0x300>)
 80043c4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80043c8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80043cc:	eef4 7a47 	vcmp.f32	s15, s14
 80043d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d4:	d102      	bne.n	80043dc <main+0x268>
 80043d6:	4b27      	ldr	r3, [pc, #156]	; (8004474 <main+0x300>)
 80043d8:	4a2d      	ldr	r2, [pc, #180]	; (8004490 <main+0x31c>)
 80043da:	655a      	str	r2, [r3, #84]	; 0x54
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 80043dc:	4b25      	ldr	r3, [pc, #148]	; (8004474 <main+0x300>)
 80043de:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80043e2:	eef4 7a67 	vcmp.f32	s15, s15
 80043e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ea:	d609      	bvs.n	8004400 <main+0x28c>
 80043ec:	4b21      	ldr	r3, [pc, #132]	; (8004474 <main+0x300>)
 80043ee:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80043f2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80043f6:	eef4 7a47 	vcmp.f32	s15, s14
 80043fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043fe:	d102      	bne.n	8004406 <main+0x292>
 8004400:	4b1c      	ldr	r3, [pc, #112]	; (8004474 <main+0x300>)
 8004402:	4a21      	ldr	r2, [pc, #132]	; (8004488 <main+0x314>)
 8004404:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(P_MAX)){P_MAX = 12.5f;}
 8004406:	4b1b      	ldr	r3, [pc, #108]	; (8004474 <main+0x300>)
 8004408:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800440c:	eef4 7a67 	vcmp.f32	s15, s15
 8004410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004414:	d702      	bvc.n	800441c <main+0x2a8>
 8004416:	4b17      	ldr	r3, [pc, #92]	; (8004474 <main+0x300>)
 8004418:	4a1e      	ldr	r2, [pc, #120]	; (8004494 <main+0x320>)
 800441a:	649a      	str	r2, [r3, #72]	; 0x48
  if(isnan(P_MIN)){P_MIN = -12.5f;}
 800441c:	4b15      	ldr	r3, [pc, #84]	; (8004474 <main+0x300>)
 800441e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004422:	eef4 7a67 	vcmp.f32	s15, s15
 8004426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800442a:	d702      	bvc.n	8004432 <main+0x2be>
 800442c:	4b11      	ldr	r3, [pc, #68]	; (8004474 <main+0x300>)
 800442e:	4a1a      	ldr	r2, [pc, #104]	; (8004498 <main+0x324>)
 8004430:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(V_MAX)){V_MAX = 200.0f;}
 8004432:	4b10      	ldr	r3, [pc, #64]	; (8004474 <main+0x300>)
 8004434:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004438:	eef4 7a67 	vcmp.f32	s15, s15
 800443c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004440:	d702      	bvc.n	8004448 <main+0x2d4>
 8004442:	4b0c      	ldr	r3, [pc, #48]	; (8004474 <main+0x300>)
 8004444:	4a15      	ldr	r2, [pc, #84]	; (800449c <main+0x328>)
 8004446:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(V_MIN)){V_MIN = -200.0f;}
 8004448:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <main+0x300>)
 800444a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800444e:	eef4 7a67 	vcmp.f32	s15, s15
 8004452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004456:	d702      	bvc.n	800445e <main+0x2ea>
 8004458:	4b06      	ldr	r3, [pc, #24]	; (8004474 <main+0x300>)
 800445a:	4a11      	ldr	r2, [pc, #68]	; (80044a0 <main+0x32c>)
 800445c:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(MECH_ZERO)){MECH_ZERO = 0.0f;}
 800445e:	4b05      	ldr	r3, [pc, #20]	; (8004474 <main+0x300>)
 8004460:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004464:	eef4 7a67 	vcmp.f32	s15, s15
 8004468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446c:	e01a      	b.n	80044a4 <main+0x330>
 800446e:	bf00      	nop
 8004470:	20004dec 	.word	0x20004dec
 8004474:	20004cec 	.word	0x20004cec
 8004478:	447a0000 	.word	0x447a0000
 800447c:	42200000 	.word	0x42200000
 8004480:	42fa0000 	.word	0x42fa0000
 8004484:	41600000 	.word	0x41600000
 8004488:	40a00000 	.word	0x40a00000
 800448c:	41a80000 	.word	0x41a80000
 8004490:	43fa0000 	.word	0x43fa0000
 8004494:	41480000 	.word	0x41480000
 8004498:	c1480000 	.word	0xc1480000
 800449c:	43480000 	.word	0x43480000
 80044a0:	c3480000 	.word	0xc3480000
 80044a4:	d703      	bvc.n	80044ae <main+0x33a>
 80044a6:	4b84      	ldr	r3, [pc, #528]	; (80046b8 <main+0x544>)
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	65da      	str	r2, [r3, #92]	; 0x5c
  if(isnan(T_MAX)){T_MAX = 10.0f;}
 80044ae:	4b82      	ldr	r3, [pc, #520]	; (80046b8 <main+0x544>)
 80044b0:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80044b4:	eef4 7a67 	vcmp.f32	s15, s15
 80044b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044bc:	d702      	bvc.n	80044c4 <main+0x350>
 80044be:	4b7e      	ldr	r3, [pc, #504]	; (80046b8 <main+0x544>)
 80044c0:	4a7e      	ldr	r2, [pc, #504]	; (80046bc <main+0x548>)
 80044c2:	661a      	str	r2, [r3, #96]	; 0x60

  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	4b7d      	ldr	r3, [pc, #500]	; (80046c0 <main+0x54c>)
 80044ca:	487e      	ldr	r0, [pc, #504]	; (80046c4 <main+0x550>)
 80044cc:	f00a f830 	bl	800e530 <iprintf>
/* Controller Setup */
init_controller_params(&controller);
 80044d0:	487d      	ldr	r0, [pc, #500]	; (80046c8 <main+0x554>)
 80044d2:	f7fe fa55 	bl	8002980 <init_controller_params>

/* calibration "encoder" zeroing */
memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 80044d6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80044da:	2100      	movs	r1, #0
 80044dc:	487b      	ldr	r0, [pc, #492]	; (80046cc <main+0x558>)
 80044de:	f009 fbb5 	bl	800dc4c <memset>

/* commutation encoder setup */
comm_encoder.m_zero = M_ZERO;
 80044e2:	4b7b      	ldr	r3, [pc, #492]	; (80046d0 <main+0x55c>)
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	4a7b      	ldr	r2, [pc, #492]	; (80046d4 <main+0x560>)
 80044e8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
comm_encoder.e_zero = E_ZERO;
 80044ec:	4b78      	ldr	r3, [pc, #480]	; (80046d0 <main+0x55c>)
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	4a78      	ldr	r2, [pc, #480]	; (80046d4 <main+0x560>)
 80044f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
comm_encoder.ppairs = PPAIRS;
 80044f6:	4b70      	ldr	r3, [pc, #448]	; (80046b8 <main+0x544>)
 80044f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fa:	4a76      	ldr	r2, [pc, #472]	; (80046d4 <main+0x560>)
 80044fc:	6693      	str	r3, [r2, #104]	; 0x68
comm_encoder.mech_zero = MECH_ZERO;
 80044fe:	4b6e      	ldr	r3, [pc, #440]	; (80046b8 <main+0x544>)
 8004500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004502:	4a74      	ldr	r2, [pc, #464]	; (80046d4 <main+0x560>)
 8004504:	f8c2 31e0 	str.w	r3, [r2, #480]	; 0x1e0
ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 8004508:	2164      	movs	r1, #100	; 0x64
 800450a:	4872      	ldr	r0, [pc, #456]	; (80046d4 <main+0x560>)
 800450c:	f000 fc22 	bl	8004d54 <ps_warmup>
ps_sample(&comm_encoder, DT);
 8004510:	ed9f 0a71 	vldr	s0, [pc, #452]	; 80046d8 <main+0x564>
 8004514:	486f      	ldr	r0, [pc, #444]	; (80046d4 <main+0x560>)
 8004516:	f000 fc75 	bl	8004e04 <ps_sample>
ps_sample(&comm_encoder, DT);
 800451a:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 80046d8 <main+0x564>
 800451e:	486d      	ldr	r0, [pc, #436]	; (80046d4 <main+0x560>)
 8004520:	f000 fc70 	bl	8004e04 <ps_sample>
ps_sample(&comm_encoder, DT);
 8004524:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 80046d8 <main+0x564>
 8004528:	486a      	ldr	r0, [pc, #424]	; (80046d4 <main+0x560>)
 800452a:	f000 fc6b 	bl	8004e04 <ps_sample>
if(comm_encoder.angle_multiturn[0]>PI_F){
 800452e:	4b69      	ldr	r3, [pc, #420]	; (80046d4 <main+0x560>)
 8004530:	edd3 7a03 	vldr	s15, [r3, #12]
 8004534:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80046dc <main+0x568>
 8004538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800453c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004540:	dd14      	ble.n	800456c <main+0x3f8>
  comm_encoder.angle_multiturn[0]-=TWO_PI_F;
 8004542:	4b64      	ldr	r3, [pc, #400]	; (80046d4 <main+0x560>)
 8004544:	edd3 7a03 	vldr	s15, [r3, #12]
 8004548:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80046e0 <main+0x56c>
 800454c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004550:	4b60      	ldr	r3, [pc, #384]	; (80046d4 <main+0x560>)
 8004552:	edc3 7a03 	vstr	s15, [r3, #12]
  comm_encoder.turns--;
 8004556:	4b5f      	ldr	r3, [pc, #380]	; (80046d4 <main+0x560>)
 8004558:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800455c:	3b01      	subs	r3, #1
 800455e:	4a5d      	ldr	r2, [pc, #372]	; (80046d4 <main+0x560>)
 8004560:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  printf("Added\r\n");
 8004564:	485f      	ldr	r0, [pc, #380]	; (80046e4 <main+0x570>)
 8004566:	f00a f869 	bl	800e63c <puts>
 800456a:	e01d      	b.n	80045a8 <main+0x434>
}
else if(comm_encoder.angle_multiturn[0]<-PI_F){
 800456c:	4b59      	ldr	r3, [pc, #356]	; (80046d4 <main+0x560>)
 800456e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004572:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80046e8 <main+0x574>
 8004576:	eef4 7ac7 	vcmpe.f32	s15, s14
 800457a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800457e:	d513      	bpl.n	80045a8 <main+0x434>
  comm_encoder.angle_multiturn[0] += TWO_PI_F;
 8004580:	4b54      	ldr	r3, [pc, #336]	; (80046d4 <main+0x560>)
 8004582:	edd3 7a03 	vldr	s15, [r3, #12]
 8004586:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80046e0 <main+0x56c>
 800458a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800458e:	4b51      	ldr	r3, [pc, #324]	; (80046d4 <main+0x560>)
 8004590:	edc3 7a03 	vstr	s15, [r3, #12]
  comm_encoder.turns++;
 8004594:	4b4f      	ldr	r3, [pc, #316]	; (80046d4 <main+0x560>)
 8004596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800459a:	3301      	adds	r3, #1
 800459c:	4a4d      	ldr	r2, [pc, #308]	; (80046d4 <main+0x560>)
 800459e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  printf("Subtracted\r\n");
 80045a2:	4852      	ldr	r0, [pc, #328]	; (80046ec <main+0x578>)
 80045a4:	f00a f84a 	bl	800e63c <puts>
}


if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 80045a8:	4b4a      	ldr	r3, [pc, #296]	; (80046d4 <main+0x560>)
 80045aa:	4a49      	ldr	r2, [pc, #292]	; (80046d0 <main+0x55c>)
 80045ac:	33dc      	adds	r3, #220	; 0xdc
 80045ae:	f102 011c 	add.w	r1, r2, #28
 80045b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045b6:	4618      	mov	r0, r3
 80045b8:	f009 fb3a 	bl	800dc30 <memcpy>
else{memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));}

/* Turn on ADCs */
	HAL_OPAMP_Start(&hopamp1);
 80045bc:	484c      	ldr	r0, [pc, #304]	; (80046f0 <main+0x57c>)
 80045be:	f005 f9ab 	bl	8009918 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp2);
 80045c2:	484c      	ldr	r0, [pc, #304]	; (80046f4 <main+0x580>)
 80045c4:	f005 f9a8 	bl	8009918 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 80045c8:	484b      	ldr	r0, [pc, #300]	; (80046f8 <main+0x584>)
 80045ca:	f005 f9a5 	bl	8009918 <HAL_OPAMP_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)controller.ADC1_Val, 2);
 80045ce:	2202      	movs	r2, #2
 80045d0:	494a      	ldr	r1, [pc, #296]	; (80046fc <main+0x588>)
 80045d2:	484b      	ldr	r0, [pc, #300]	; (8004700 <main+0x58c>)
 80045d4:	f001 ff2e 	bl	8006434 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)controller.ADC2_Val, 2);
 80045d8:	2202      	movs	r2, #2
 80045da:	494a      	ldr	r1, [pc, #296]	; (8004704 <main+0x590>)
 80045dc:	484a      	ldr	r0, [pc, #296]	; (8004708 <main+0x594>)
 80045de:	f001 ff29 	bl	8006434 <HAL_ADC_Start_DMA>

   disable_gd(&controller);
 80045e2:	4839      	ldr	r0, [pc, #228]	; (80046c8 <main+0x554>)
 80045e4:	f7ff fc2e 	bl	8003e44 <disable_gd>
   HAL_Delay(10);
 80045e8:	200a      	movs	r0, #10
 80045ea:	f001 fb59 	bl	8005ca0 <HAL_Delay>

   zero_current(&controller);
 80045ee:	4836      	ldr	r0, [pc, #216]	; (80046c8 <main+0x554>)
 80045f0:	f7fe f974 	bl	80028dc <zero_current>
   HAL_Delay(100);
 80045f4:	2064      	movs	r0, #100	; 0x64
 80045f6:	f001 fb53 	bl	8005ca0 <HAL_Delay>
   printf("ADC A OFFSET: %d     ADC B OFFSET: %d     ADC C OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset, controller.adc_c_offset);
 80045fa:	4b33      	ldr	r3, [pc, #204]	; (80046c8 <main+0x554>)
 80045fc:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004600:	4b31      	ldr	r3, [pc, #196]	; (80046c8 <main+0x554>)
 8004602:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004606:	4b30      	ldr	r3, [pc, #192]	; (80046c8 <main+0x554>)
 8004608:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800460c:	483f      	ldr	r0, [pc, #252]	; (800470c <main+0x598>)
 800460e:	f009 ff8f 	bl	800e530 <iprintf>
   printf("Vbus: %f\r\n",controller.v_bus);
 8004612:	4b2d      	ldr	r3, [pc, #180]	; (80046c8 <main+0x554>)
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	4618      	mov	r0, r3
 8004618:	f7fb ffbe 	bl	8000598 <__aeabi_f2d>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	483b      	ldr	r0, [pc, #236]	; (8004710 <main+0x59c>)
 8004622:	f009 ff85 	bl	800e530 <iprintf>
   /* Turn on PWM */
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004626:	2100      	movs	r1, #0
 8004628:	483a      	ldr	r0, [pc, #232]	; (8004714 <main+0x5a0>)
 800462a:	f006 faa3 	bl	800ab74 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800462e:	2104      	movs	r1, #4
 8004630:	4838      	ldr	r0, [pc, #224]	; (8004714 <main+0x5a0>)
 8004632:	f006 fa9f 	bl	800ab74 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8004636:	2108      	movs	r1, #8
 8004638:	4836      	ldr	r0, [pc, #216]	; (8004714 <main+0x5a0>)
 800463a:	f006 fa9b 	bl	800ab74 <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800463e:	2100      	movs	r1, #0
 8004640:	4834      	ldr	r0, [pc, #208]	; (8004714 <main+0x5a0>)
 8004642:	f007 fb97 	bl	800bd74 <HAL_TIMEx_PWMN_Start>
      HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8004646:	2104      	movs	r1, #4
 8004648:	4832      	ldr	r0, [pc, #200]	; (8004714 <main+0x5a0>)
 800464a:	f007 fb93 	bl	800bd74 <HAL_TIMEx_PWMN_Start>
      HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800464e:	2108      	movs	r1, #8
 8004650:	4830      	ldr	r0, [pc, #192]	; (8004714 <main+0x5a0>)
 8004652:	f007 fb8f 	bl	800bd74 <HAL_TIMEx_PWMN_Start>

      disable_gd(&controller);
 8004656:	481c      	ldr	r0, [pc, #112]	; (80046c8 <main+0x554>)
 8004658:	f7ff fbf4 	bl	8003e44 <disable_gd>

	  /* CAN setup */
      HAL_GPIO_WritePin(CAN_SHDWN, GPIO_PIN_RESET); //Enable CAN
 800465c:	2200      	movs	r2, #0
 800465e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004662:	482d      	ldr	r0, [pc, #180]	; (8004718 <main+0x5a4>)
 8004664:	f004 f99c 	bl	80089a0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(CAN_TERM, GPIO_PIN_RESET ); //Disable CAN termination resistor
 8004668:	2200      	movs	r2, #0
 800466a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800466e:	482a      	ldr	r0, [pc, #168]	; (8004718 <main+0x5a4>)
 8004670:	f004 f996 	bl	80089a0 <HAL_GPIO_WritePin>


	  can_rx_init(&can_rx);
 8004674:	4829      	ldr	r0, [pc, #164]	; (800471c <main+0x5a8>)
 8004676:	f7fd fcd1 	bl	800201c <can_rx_init>
	  can_tx_init(&can_tx);
 800467a:	4829      	ldr	r0, [pc, #164]	; (8004720 <main+0x5ac>)
 800467c:	f7fd fcfe 	bl	800207c <can_tx_init>

	  HAL_FDCAN_Start(&CAN_H); //start CAN
 8004680:	4828      	ldr	r0, [pc, #160]	; (8004724 <main+0x5b0>)
 8004682:	f003 fb80 	bl	8007d86 <HAL_FDCAN_Start>
//	  HAL_FDCAN_ActivateNotification(&CAN_H,FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0);

	  /* Set Interrupt Priorities */
	  NVIC_SetPriority(PWM_ISR, 1); // commutation > communication
 8004686:	2101      	movs	r1, #1
 8004688:	2019      	movs	r0, #25
 800468a:	f7ff fd49 	bl	8004120 <__NVIC_SetPriority>
//	  NVIC_SetPriority(CAN_ISR, 3);

	  /* Start the FSM */
	  state.state = MENU_MODE;
 800468e:	4b26      	ldr	r3, [pc, #152]	; (8004728 <main+0x5b4>)
 8004690:	2200      	movs	r2, #0
 8004692:	701a      	strb	r2, [r3, #0]
	  state.next_state = MENU_MODE;
 8004694:	4b24      	ldr	r3, [pc, #144]	; (8004728 <main+0x5b4>)
 8004696:	2200      	movs	r2, #0
 8004698:	705a      	strb	r2, [r3, #1]
	  state.ready = 1;
 800469a:	4b23      	ldr	r3, [pc, #140]	; (8004728 <main+0x5b4>)
 800469c:	2201      	movs	r2, #1
 800469e:	70da      	strb	r2, [r3, #3]


  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 80046a0:	2201      	movs	r2, #1
 80046a2:	4922      	ldr	r1, [pc, #136]	; (800472c <main+0x5b8>)
 80046a4:	4822      	ldr	r0, [pc, #136]	; (8004730 <main+0x5bc>)
 80046a6:	f007 fe9f 	bl	800c3e8 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 80046aa:	481a      	ldr	r0, [pc, #104]	; (8004714 <main+0x5a0>)
 80046ac:	f006 f996 	bl	800a9dc <HAL_TIM_Base_Start_IT>

    /* USER CODE BEGIN 3 */
//	printf("A:%f B:%f C:%f V:%f \r\n",controller.i_a, controller.i_b, controller.i_c, controller.v_bus);
//	  printf("%f %f\r\n",controller.i_q, controller.i_q_des);

	HAL_Delay(100);
 80046b0:	2064      	movs	r0, #100	; 0x64
 80046b2:	f001 faf5 	bl	8005ca0 <HAL_Delay>
 80046b6:	e7fb      	b.n	80046b0 <main+0x53c>
 80046b8:	20004cec 	.word	0x20004cec
 80046bc:	41200000 	.word	0x41200000
 80046c0:	3ff00000 	.word	0x3ff00000
 80046c4:	08012c04 	.word	0x08012c04
 80046c8:	20000468 	.word	0x20000468
 80046cc:	20004a88 	.word	0x20004a88
 80046d0:	20004dec 	.word	0x20004dec
 80046d4:	20000778 	.word	0x20000778
 80046d8:	388bcf64 	.word	0x388bcf64
 80046dc:	40490fdb 	.word	0x40490fdb
 80046e0:	40c90fdb 	.word	0x40c90fdb
 80046e4:	08012c28 	.word	0x08012c28
 80046e8:	c0490fdb 	.word	0xc0490fdb
 80046ec:	08012c30 	.word	0x08012c30
 80046f0:	20004fec 	.word	0x20004fec
 80046f4:	20005028 	.word	0x20005028
 80046f8:	20005064 	.word	0x20005064
 80046fc:	20000760 	.word	0x20000760
 8004700:	2000021c 	.word	0x2000021c
 8004704:	20000764 	.word	0x20000764
 8004708:	20000288 	.word	0x20000288
 800470c:	08012c3c 	.word	0x08012c3c
 8004710:	08012c7c 	.word	0x08012c7c
 8004714:	200050a4 	.word	0x200050a4
 8004718:	48000800 	.word	0x48000800
 800471c:	20004c9c 	.word	0x20004c9c
 8004720:	20004c70 	.word	0x20004c70
 8004724:	200003b8 	.word	0x200003b8
 8004728:	20000768 	.word	0x20000768
 800472c:	20004ce8 	.word	0x20004ce8
 8004730:	200050f0 	.word	0x200050f0

08004734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b0a4      	sub	sp, #144	; 0x90
 8004738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800473a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800473e:	2238      	movs	r2, #56	; 0x38
 8004740:	2100      	movs	r1, #0
 8004742:	4618      	mov	r0, r3
 8004744:	f009 fa82 	bl	800dc4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004748:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	605a      	str	r2, [r3, #4]
 8004752:	609a      	str	r2, [r3, #8]
 8004754:	60da      	str	r2, [r3, #12]
 8004756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004758:	463b      	mov	r3, r7
 800475a:	2244      	movs	r2, #68	; 0x44
 800475c:	2100      	movs	r1, #0
 800475e:	4618      	mov	r0, r3
 8004760:	f009 fa74 	bl	800dc4c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004764:	2000      	movs	r0, #0
 8004766:	f005 f909 	bl	800997c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800476a:	2301      	movs	r3, #1
 800476c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800476e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004772:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004774:	2302      	movs	r3, #2
 8004776:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004778:	2303      	movs	r3, #3
 800477a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800477c:	2302      	movs	r3, #2
 800477e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8004780:	2354      	movs	r3, #84	; 0x54
 8004782:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004786:	2302      	movs	r3, #2
 8004788:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800478c:	2302      	movs	r3, #2
 800478e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004792:	2302      	movs	r3, #2
 8004794:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004798:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800479c:	4618      	mov	r0, r3
 800479e:	f005 f9a1 	bl	8009ae4 <HAL_RCC_OscConfig>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <SystemClock_Config+0x78>
  {
    Error_Handler();
 80047a8:	f000 f82f 	bl	800480a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047ac:	230f      	movs	r3, #15
 80047ae:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047b0:	2303      	movs	r3, #3
 80047b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047b4:	2300      	movs	r3, #0
 80047b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80047b8:	2300      	movs	r3, #0
 80047ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80047bc:	2300      	movs	r3, #0
 80047be:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80047c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80047c4:	2104      	movs	r1, #4
 80047c6:	4618      	mov	r0, r3
 80047c8:	f005 fca4 	bl	800a114 <HAL_RCC_ClockConfig>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80047d2:	f000 f81a 	bl	800480a <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80047d6:	f249 0342 	movw	r3, #36930	; 0x9042
 80047da:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80047dc:	2300      	movs	r3, #0
 80047de:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80047e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047e8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80047ea:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80047ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047f0:	463b      	mov	r3, r7
 80047f2:	4618      	mov	r0, r3
 80047f4:	f005 feaa 	bl	800a54c <HAL_RCCEx_PeriphCLKConfig>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80047fe:	f000 f804 	bl	800480a <Error_Handler>
  }
}
 8004802:	bf00      	nop
 8004804:	3790      	adds	r7, #144	; 0x90
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800480a:	b480      	push	{r7}
 800480c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800480e:	b672      	cpsid	i
}
 8004810:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004812:	e7fe      	b.n	8004812 <Error_Handler+0x8>

08004814 <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	ed87 0a01 	vstr	s0, [r7, #4]
 800481e:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8004822:	ed97 7a01 	vldr	s14, [r7, #4]
 8004826:	edd7 7a00 	vldr	s15, [r7]
 800482a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800482e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004832:	dd01      	ble.n	8004838 <fast_fmaxf+0x24>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	e000      	b.n	800483a <fast_fmaxf+0x26>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	ee07 3a90 	vmov	s15, r3
    }
 800483e:	eeb0 0a67 	vmov.f32	s0, s15
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <fast_fminf>:

float fast_fminf(float x, float y){
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	ed87 0a01 	vstr	s0, [r7, #4]
 8004856:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 800485a:	ed97 7a01 	vldr	s14, [r7, #4]
 800485e:	edd7 7a00 	vldr	s15, [r7]
 8004862:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800486a:	d501      	bpl.n	8004870 <fast_fminf+0x24>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	e000      	b.n	8004872 <fast_fminf+0x26>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	ee07 3a90 	vmov	s15, r3
    }
 8004876:	eeb0 0a67 	vmov.f32	s0, s15
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <fmaxf3>:

float fmaxf3(float x, float y, float z){
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	ed87 0a03 	vstr	s0, [r7, #12]
 800488e:	edc7 0a02 	vstr	s1, [r7, #8]
 8004892:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 8004896:	ed97 7a03 	vldr	s14, [r7, #12]
 800489a:	edd7 7a02 	vldr	s15, [r7, #8]
 800489e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a6:	dd0c      	ble.n	80048c2 <fmaxf3+0x3e>
 80048a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80048ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80048b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b8:	dd01      	ble.n	80048be <fmaxf3+0x3a>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	e00d      	b.n	80048da <fmaxf3+0x56>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	e00b      	b.n	80048da <fmaxf3+0x56>
 80048c2:	ed97 7a02 	vldr	s14, [r7, #8]
 80048c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80048ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d2:	dd01      	ble.n	80048d8 <fmaxf3+0x54>
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	e000      	b.n	80048da <fmaxf3+0x56>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	ee07 3a90 	vmov	s15, r3
    }
 80048de:	eeb0 0a67 	vmov.f32	s0, s15
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <fminf3>:

float fminf3(float x, float y, float z){
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	ed87 0a03 	vstr	s0, [r7, #12]
 80048f6:	edc7 0a02 	vstr	s1, [r7, #8]
 80048fa:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 80048fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8004902:	edd7 7a02 	vldr	s15, [r7, #8]
 8004906:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800490a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490e:	d50c      	bpl.n	800492a <fminf3+0x3e>
 8004910:	ed97 7a03 	vldr	s14, [r7, #12]
 8004914:	edd7 7a01 	vldr	s15, [r7, #4]
 8004918:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800491c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004920:	d501      	bpl.n	8004926 <fminf3+0x3a>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	e00d      	b.n	8004942 <fminf3+0x56>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	e00b      	b.n	8004942 <fminf3+0x56>
 800492a:	ed97 7a02 	vldr	s14, [r7, #8]
 800492e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004932:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493a:	d501      	bpl.n	8004940 <fminf3+0x54>
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	e000      	b.n	8004942 <fminf3+0x56>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	ee07 3a90 	vmov	s15, r3
    }
 8004946:	eeb0 0a67 	vmov.f32	s0, s15
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	ed93 7a00 	vldr	s14, [r3]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	edd3 7a00 	vldr	s15, [r3]
 800496e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	edd3 6a00 	vldr	s13, [r3]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	edd3 7a00 	vldr	s15, [r3]
 800497e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004986:	eeb0 0a67 	vmov.f32	s0, s15
 800498a:	f00d fb81 	bl	8012090 <sqrtf>
 800498e:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 8004992:	ed97 7a05 	vldr	s14, [r7, #20]
 8004996:	edd7 7a01 	vldr	s15, [r7, #4]
 800499a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800499e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a2:	dc00      	bgt.n	80049a6 <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 80049a4:	e01b      	b.n	80049de <limit_norm+0x8a>
        *x = *x * limit/norm;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	ed93 7a00 	vldr	s14, [r3]
 80049ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80049b0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80049b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80049b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	ed93 7a00 	vldr	s14, [r3]
 80049c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80049cc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80049d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80049d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	edc3 7a00 	vstr	s15, [r3]
    }
 80049de:	bf00      	nop
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <float_to_uint>:
    
void limit(float *x, float min, float max){
    *x = fast_fmaxf(fast_fminf(*x, max), min);
    }

int float_to_uint(float x, float x_min, float x_max, int bits){
 80049e6:	b480      	push	{r7}
 80049e8:	b087      	sub	sp, #28
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	ed87 0a03 	vstr	s0, [r7, #12]
 80049f0:	edc7 0a02 	vstr	s1, [r7, #8]
 80049f4:	ed87 1a01 	vstr	s2, [r7, #4]
 80049f8:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 80049fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80049fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a06:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 8004a0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004a12:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a22:	3b01      	subs	r3, #1
 8004a24:	ee07 3a90 	vmov	s15, r3
 8004a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a2c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004a30:	ed97 7a05 	vldr	s14, [r7, #20]
 8004a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a3c:	ee17 3a90 	vmov	r3, s15
    }
 8004a40:	4618      	mov	r0, r3
 8004a42:	371c      	adds	r7, #28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <uint_to_float>:
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a58:	edc7 0a01 	vstr	s1, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8004a5e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a62:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a6a:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	ee07 3a90 	vmov	s15, r3
 8004a78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a80:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004a84:	2201      	movs	r2, #1
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	ee07 3a90 	vmov	s15, r3
 8004a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8004aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8004aa6:	371c      	adds	r7, #28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <sin_lut>:

float sin_lut(float theta){
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 8004aba:	eddf 0a17 	vldr	s1, [pc, #92]	; 8004b18 <sin_lut+0x68>
 8004abe:	ed97 0a01 	vldr	s0, [r7, #4]
 8004ac2:	f00d fac5 	bl	8012050 <fmodf>
 8004ac6:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8004aca:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ace:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad6:	d506      	bpl.n	8004ae6 <sin_lut+0x36>
 8004ad8:	edd7 7a01 	vldr	s15, [r7, #4]
 8004adc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004b18 <sin_lut+0x68>
 8004ae0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ae4:	e001      	b.n	8004aea <sin_lut+0x3a>
 8004ae6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004aea:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 8004aee:	edd7 7a01 	vldr	s15, [r7, #4]
 8004af2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004b1c <sin_lut+0x6c>
 8004af6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004afa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004afe:	ee17 3a90 	vmov	r3, s15
 8004b02:	4a07      	ldr	r2, [pc, #28]	; (8004b20 <sin_lut+0x70>)
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	ee07 3a90 	vmov	s15, r3
}
 8004b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40c90fdb 	.word	0x40c90fdb
 8004b1c:	42a2f983 	.word	0x42a2f983
 8004b20:	08012d04 	.word	0x08012d04

08004b24 <cos_lut>:

float cos_lut(float theta){
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 8004b2e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004b50 <cos_lut+0x2c>
 8004b32:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b3e:	f7ff ffb7 	bl	8004ab0 <sin_lut>
 8004b42:	eef0 7a40 	vmov.f32	s15, s0
}
 8004b46:	eeb0 0a67 	vmov.f32	s0, s15
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	3fc90fdb 	.word	0x3fc90fdb

08004b54 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8004b58:	4b13      	ldr	r3, [pc, #76]	; (8004ba8 <MX_OPAMP1_Init+0x54>)
 8004b5a:	4a14      	ldr	r2, [pc, #80]	; (8004bac <MX_OPAMP1_Init+0x58>)
 8004b5c:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8004b5e:	4b12      	ldr	r3, [pc, #72]	; (8004ba8 <MX_OPAMP1_Init+0x54>)
 8004b60:	2280      	movs	r2, #128	; 0x80
 8004b62:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8004b64:	4b10      	ldr	r3, [pc, #64]	; (8004ba8 <MX_OPAMP1_Init+0x54>)
 8004b66:	2240      	movs	r2, #64	; 0x40
 8004b68:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004b6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ba8 <MX_OPAMP1_Init+0x54>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8004b70:	4b0d      	ldr	r3, [pc, #52]	; (8004ba8 <MX_OPAMP1_Init+0x54>)
 8004b72:	2201      	movs	r2, #1
 8004b74:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004b76:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <MX_OPAMP1_Init+0x54>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <MX_OPAMP1_Init+0x54>)
 8004b7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b82:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8004b84:	4b08      	ldr	r3, [pc, #32]	; (8004ba8 <MX_OPAMP1_Init+0x54>)
 8004b86:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004b8a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004b8c:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <MX_OPAMP1_Init+0x54>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8004b92:	4805      	ldr	r0, [pc, #20]	; (8004ba8 <MX_OPAMP1_Init+0x54>)
 8004b94:	f004 fdf0 	bl	8009778 <HAL_OPAMP_Init>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8004b9e:	f7ff fe34 	bl	800480a <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8004ba2:	bf00      	nop
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20004fec 	.word	0x20004fec
 8004bac:	40010300 	.word	0x40010300

08004bb0 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8004bb4:	4b13      	ldr	r3, [pc, #76]	; (8004c04 <MX_OPAMP2_Init+0x54>)
 8004bb6:	4a14      	ldr	r2, [pc, #80]	; (8004c08 <MX_OPAMP2_Init+0x58>)
 8004bb8:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8004bba:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <MX_OPAMP2_Init+0x54>)
 8004bbc:	2280      	movs	r2, #128	; 0x80
 8004bbe:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8004bc0:	4b10      	ldr	r3, [pc, #64]	; (8004c04 <MX_OPAMP2_Init+0x54>)
 8004bc2:	2240      	movs	r2, #64	; 0x40
 8004bc4:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004bc6:	4b0f      	ldr	r3, [pc, #60]	; (8004c04 <MX_OPAMP2_Init+0x54>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 8004bcc:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <MX_OPAMP2_Init+0x54>)
 8004bce:	2201      	movs	r2, #1
 8004bd0:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004bd2:	4b0c      	ldr	r3, [pc, #48]	; (8004c04 <MX_OPAMP2_Init+0x54>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <MX_OPAMP2_Init+0x54>)
 8004bda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004bde:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8004be0:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <MX_OPAMP2_Init+0x54>)
 8004be2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004be6:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004be8:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <MX_OPAMP2_Init+0x54>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8004bee:	4805      	ldr	r0, [pc, #20]	; (8004c04 <MX_OPAMP2_Init+0x54>)
 8004bf0:	f004 fdc2 	bl	8009778 <HAL_OPAMP_Init>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8004bfa:	f7ff fe06 	bl	800480a <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8004bfe:	bf00      	nop
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20005028 	.word	0x20005028
 8004c08:	40010304 	.word	0x40010304

08004c0c <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8004c10:	4b13      	ldr	r3, [pc, #76]	; (8004c60 <MX_OPAMP3_Init+0x54>)
 8004c12:	4a14      	ldr	r2, [pc, #80]	; (8004c64 <MX_OPAMP3_Init+0x58>)
 8004c14:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8004c16:	4b12      	ldr	r3, [pc, #72]	; (8004c60 <MX_OPAMP3_Init+0x54>)
 8004c18:	2280      	movs	r2, #128	; 0x80
 8004c1a:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8004c1c:	4b10      	ldr	r3, [pc, #64]	; (8004c60 <MX_OPAMP3_Init+0x54>)
 8004c1e:	2240      	movs	r2, #64	; 0x40
 8004c20:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004c22:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <MX_OPAMP3_Init+0x54>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8004c28:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <MX_OPAMP3_Init+0x54>)
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004c2e:	4b0c      	ldr	r3, [pc, #48]	; (8004c60 <MX_OPAMP3_Init+0x54>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004c34:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <MX_OPAMP3_Init+0x54>)
 8004c36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c3a:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8004c3c:	4b08      	ldr	r3, [pc, #32]	; (8004c60 <MX_OPAMP3_Init+0x54>)
 8004c3e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004c42:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004c44:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <MX_OPAMP3_Init+0x54>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8004c4a:	4805      	ldr	r0, [pc, #20]	; (8004c60 <MX_OPAMP3_Init+0x54>)
 8004c4c:	f004 fd94 	bl	8009778 <HAL_OPAMP_Init>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8004c56:	f7ff fdd8 	bl	800480a <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8004c5a:	bf00      	nop
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20005064 	.word	0x20005064
 8004c64:	40010308 	.word	0x40010308

08004c68 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08a      	sub	sp, #40	; 0x28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c70:	f107 0314 	add.w	r3, r7, #20
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	605a      	str	r2, [r3, #4]
 8004c7a:	609a      	str	r2, [r3, #8]
 8004c7c:	60da      	str	r2, [r3, #12]
 8004c7e:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a2e      	ldr	r2, [pc, #184]	; (8004d40 <HAL_OPAMP_MspInit+0xd8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d119      	bne.n	8004cbe <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c8a:	4b2e      	ldr	r3, [pc, #184]	; (8004d44 <HAL_OPAMP_MspInit+0xdc>)
 8004c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8e:	4a2d      	ldr	r2, [pc, #180]	; (8004d44 <HAL_OPAMP_MspInit+0xdc>)
 8004c90:	f043 0301 	orr.w	r3, r3, #1
 8004c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c96:	4b2b      	ldr	r3, [pc, #172]	; (8004d44 <HAL_OPAMP_MspInit+0xdc>)
 8004c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8004ca2:	230a      	movs	r3, #10
 8004ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cae:	f107 0314 	add.w	r3, r7, #20
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cb8:	f003 fcf0 	bl	800869c <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8004cbc:	e03b      	b.n	8004d36 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a21      	ldr	r2, [pc, #132]	; (8004d48 <HAL_OPAMP_MspInit+0xe0>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d119      	bne.n	8004cfc <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cc8:	4b1e      	ldr	r3, [pc, #120]	; (8004d44 <HAL_OPAMP_MspInit+0xdc>)
 8004cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ccc:	4a1d      	ldr	r2, [pc, #116]	; (8004d44 <HAL_OPAMP_MspInit+0xdc>)
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cd4:	4b1b      	ldr	r3, [pc, #108]	; (8004d44 <HAL_OPAMP_MspInit+0xdc>)
 8004cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004ce0:	23a0      	movs	r3, #160	; 0xa0
 8004ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cec:	f107 0314 	add.w	r3, r7, #20
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cf6:	f003 fcd1 	bl	800869c <HAL_GPIO_Init>
}
 8004cfa:	e01c      	b.n	8004d36 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a12      	ldr	r2, [pc, #72]	; (8004d4c <HAL_OPAMP_MspInit+0xe4>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d117      	bne.n	8004d36 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d06:	4b0f      	ldr	r3, [pc, #60]	; (8004d44 <HAL_OPAMP_MspInit+0xdc>)
 8004d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d0a:	4a0e      	ldr	r2, [pc, #56]	; (8004d44 <HAL_OPAMP_MspInit+0xdc>)
 8004d0c:	f043 0302 	orr.w	r3, r3, #2
 8004d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d12:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <HAL_OPAMP_MspInit+0xdc>)
 8004d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	60bb      	str	r3, [r7, #8]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8004d1e:	2305      	movs	r3, #5
 8004d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d22:	2303      	movs	r3, #3
 8004d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d26:	2300      	movs	r3, #0
 8004d28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d2a:	f107 0314 	add.w	r3, r7, #20
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4807      	ldr	r0, [pc, #28]	; (8004d50 <HAL_OPAMP_MspInit+0xe8>)
 8004d32:	f003 fcb3 	bl	800869c <HAL_GPIO_Init>
}
 8004d36:	bf00      	nop
 8004d38:	3728      	adds	r7, #40	; 0x28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40010300 	.word	0x40010300
 8004d44:	40021000 	.word	0x40021000
 8004d48:	40010304 	.word	0x40010304
 8004d4c:	40010308 	.word	0x40010308
 8004d50:	48000400 	.word	0x48000400

08004d54 <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af04      	add	r7, sp, #16
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
	encoder->config.raw = 0;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	801a      	strh	r2, [r3, #0]
	encoder->config.bit.PM = 0;
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	8813      	ldrh	r3, [r2, #0]
 8004d68:	f36f 2309 	bfc	r3, #8, #2
 8004d6c:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.HYST = 0;
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	8813      	ldrh	r3, [r2, #0]
 8004d72:	f36f 238b 	bfc	r3, #10, #2
 8004d76:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.OUTS = 0;
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	8813      	ldrh	r3, [r2, #0]
 8004d7c:	f36f 330d 	bfc	r3, #12, #2
 8004d80:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.PWMF = 0;
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	8813      	ldrh	r3, [r2, #0]
 8004d86:	f36f 338f 	bfc	r3, #14, #2
 8004d8a:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.SF = 3;
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	8813      	ldrh	r3, [r2, #0]
 8004d90:	f043 0303 	orr.w	r3, r3, #3
 8004d94:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.FTH = 7;
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	8813      	ldrh	r3, [r2, #0]
 8004d9a:	f043 031c 	orr.w	r3, r3, #28
 8004d9e:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.WD = 0;
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	8813      	ldrh	r3, [r2, #0]
 8004da4:	f36f 1345 	bfc	r3, #5, #1
 8004da8:	8013      	strh	r3, [r2, #0]
	HAL_I2C_Mem_Write(&ENC_I2C, ENC_ADDRESS,0x01,I2C_MEMADD_SIZE_8BIT, (uint8_t*)&encoder->config.raw, 2,2);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2202      	movs	r2, #2
 8004dae:	9202      	str	r2, [sp, #8]
 8004db0:	2202      	movs	r2, #2
 8004db2:	9201      	str	r2, [sp, #4]
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	2301      	movs	r3, #1
 8004db8:	2201      	movs	r2, #1
 8004dba:	216c      	movs	r1, #108	; 0x6c
 8004dbc:	4810      	ldr	r0, [pc, #64]	; (8004e00 <ps_warmup+0xac>)
 8004dbe:	f003 ff8d 	bl	8008cdc <HAL_I2C_Mem_Write>
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	e012      	b.n	8004dee <ps_warmup+0x9a>
		encoder->data.raw = 0;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	805a      	strh	r2, [r3, #2]
		HAL_I2C_Mem_Read(&ENC_I2C, ENC_ADDRESS,0x0C,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&encoder->data.raw, 2,2);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3302      	adds	r3, #2
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	9202      	str	r2, [sp, #8]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	9201      	str	r2, [sp, #4]
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	2301      	movs	r3, #1
 8004dde:	220c      	movs	r2, #12
 8004de0:	216c      	movs	r1, #108	; 0x6c
 8004de2:	4807      	ldr	r0, [pc, #28]	; (8004e00 <ps_warmup+0xac>)
 8004de4:	f004 f88e 	bl	8008f04 <HAL_I2C_Mem_Read>
	for(int i = 0; i<n; i++){
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	3301      	adds	r3, #1
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	dbe8      	blt.n	8004dc8 <ps_warmup+0x74>
	}
}
 8004df6:	bf00      	nop
 8004df8:	bf00      	nop
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	2000041c 	.word	0x2000041c

08004e04 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08c      	sub	sp, #48	; 0x30
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	609a      	str	r2, [r3, #8]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 8004e18:	2313      	movs	r3, #19
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1c:	e011      	b.n	8004e42 <ps_sample+0x3e>
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	3b01      	subs	r3, #1
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	3302      	adds	r3, #2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	3302      	adds	r3, #2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	440b      	add	r3, r1
 8004e38:	3304      	adds	r3, #4
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	dcea      	bgt.n	8004e1e <ps_sample+0x1a>
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->data.raw = 0;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	805a      	strh	r2, [r3, #2]
	HAL_I2C_Master_Receive(&ENC_I2C, ENC_ADDRESS,(uint8_t*)&encoder->data.raw, 2,2);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	1c9a      	adds	r2, r3, #2
 8004e52:	2302      	movs	r3, #2
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	2302      	movs	r3, #2
 8004e58:	216c      	movs	r1, #108	; 0x6c
 8004e5a:	489c      	ldr	r0, [pc, #624]	; (80050cc <ps_sample+0x2c8>)
 8004e5c:	f003 fe48 	bl	8008af0 <HAL_I2C_Master_Receive>
	uint16_t angle = ((encoder->data.bit.angle8_12<<8)&0xF00)|encoder->data.bit.angle0_7;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	885b      	ldrh	r3, [r3, #2]
 8004e64:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	021b      	lsls	r3, r3, #8
 8004e6c:	b21b      	sxth	r3, r3
 8004e6e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e72:	b21a      	sxth	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	885b      	ldrh	r3, [r3, #2]
 8004e78:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	b21b      	sxth	r3, r3
 8004e80:	4313      	orrs	r3, r2
 8004e82:	b21b      	sxth	r3, r3
 8004e84:	83fb      	strh	r3, [r7, #30]
	encoder->raw = angle;
 8004e86:	8bfa      	ldrh	r2, [r7, #30]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	675a      	str	r2, [r3, #116]	; 0x74

	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>7];				// lookup table lower entry
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e90:	11db      	asrs	r3, r3, #7
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	3336      	adds	r3, #54	; 0x36
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	61bb      	str	r3, [r7, #24]
	int off_2 = encoder->offset_lut[((encoder->raw>>7)+1)%128];		// lookup table higher entry
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea2:	11db      	asrs	r3, r3, #7
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	425a      	negs	r2, r3
 8004ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004eb0:	bf58      	it	pl
 8004eb2:	4253      	negpl	r3, r2
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	3336      	adds	r3, #54	; 0x36
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	617b      	str	r3, [r7, #20]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>7)<<7))>>7);     // Interpolate between lookup table entries
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004eca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ece:	fb02 f303 	mul.w	r3, r2, r3
 8004ed2:	11db      	asrs	r3, r3, #7
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]
	encoder->count = encoder->raw - off_interp;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad2      	subs	r2, r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	679a      	str	r2, [r3, #120]	; 0x78


	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count))/((float)ENC_CPR);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ef2:	eddf 6a77 	vldr	s13, [pc, #476]	; 80050d0 <ps_sample+0x2cc>
 8004ef6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	edc3 7a01 	vstr	s15, [r3, #4]
	int int_angle = encoder->angle_singleturn;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f0a:	ee17 3a90 	vmov	r3, s15
 8004f0e:	60fb      	str	r3, [r7, #12]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	ee07 3a90 	vmov	s15, r3
 8004f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f24:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80050d4 <ps_sample+0x2d0>
 8004f28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	edc3 7a01 	vstr	s15, [r3, #4]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f40:	d507      	bpl.n	8004f52 <ps_sample+0x14e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f48:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80050d4 <ps_sample+0x2d0>
 8004f4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f50:	e002      	b.n	8004f58 <ps_sample+0x154>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004f68:	4b5b      	ldr	r3, [pc, #364]	; (80050d8 <ps_sample+0x2d4>)
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f7a:	eddf 6a55 	vldr	s13, [pc, #340]	; 80050d0 <ps_sample+0x2cc>
 8004f7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	int_angle = (int)encoder->elec_angle;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004f8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f92:	ee17 3a90 	vmov	r3, s15
 8004f96:	60fb      	str	r3, [r7, #12]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	ee07 3a90 	vmov	s15, r3
 8004fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fac:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80050d4 <ps_sample+0x2d0>
 8004fb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004fc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc8:	d507      	bpl.n	8004fda <ps_sample+0x1d6>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004fd0:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80050d4 <ps_sample+0x2d0>
 8004fd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fd8:	e002      	b.n	8004fe0 <ps_sample+0x1dc>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	/* Rollover */
	int rollover = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	623b      	str	r3, [r7, #32]
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ffa:	edc7 7a02 	vstr	s15, [r7, #8]
	if(angle_diff > PI_F){rollover = -1;}
 8004ffe:	edd7 7a02 	vldr	s15, [r7, #8]
 8005002:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80050dc <ps_sample+0x2d8>
 8005006:	eef4 7ac7 	vcmpe.f32	s15, s14
 800500a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800500e:	dd03      	ble.n	8005018 <ps_sample+0x214>
 8005010:	f04f 33ff 	mov.w	r3, #4294967295
 8005014:	623b      	str	r3, [r7, #32]
 8005016:	e00a      	b.n	800502e <ps_sample+0x22a>
	else if(angle_diff < -PI_F){rollover = 1;}
 8005018:	edd7 7a02 	vldr	s15, [r7, #8]
 800501c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80050e0 <ps_sample+0x2dc>
 8005020:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005028:	d501      	bpl.n	800502e <ps_sample+0x22a>
 800502a:	2301      	movs	r3, #1
 800502c:	623b      	str	r3, [r7, #32]
	encoder->turns += rollover;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	441a      	add	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if(!encoder->first_sample){
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 31dc 	ldrb.w	r3, [r3, #476]	; 0x1dc
 8005044:	2b00      	cmp	r3, #0
 8005046:	d107      	bne.n	8005058 <ps_sample+0x254>
		encoder->turns = 0;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		encoder->first_sample = 1;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
	}

	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns-encoder->mech_zero;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	ed93 7a01 	vldr	s14, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005064:	ee07 3a90 	vmov	s15, r3
 8005068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800506c:	eddf 6a19 	vldr	s13, [pc, #100]	; 80050d4 <ps_sample+0x2d0>
 8005070:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005074:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 800507e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	edc3 7a03 	vstr	s15, [r3, #12]

	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	ed93 7a03 	vldr	s14, [r3, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8005094:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005098:	edd7 7a00 	vldr	s15, [r7]
 800509c:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80050a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80050a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80050ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

}
 80050c4:	bf00      	nop
 80050c6:	3728      	adds	r7, #40	; 0x28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	2000041c 	.word	0x2000041c
 80050d0:	45800000 	.word	0x45800000
 80050d4:	40c90fdb 	.word	0x40c90fdb
 80050d8:	20004dec 	.word	0x20004dec
 80050dc:	40490fdb 	.word	0x40490fdb
 80050e0:	c0490fdb 	.word	0xc0490fdb

080050e4 <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
//	printf("Raw: %d\r\n", encoder->raw);
	printf("Raw: %d", encoder->raw);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050f2:	4619      	mov	r1, r3
 80050f4:	481d      	ldr	r0, [pc, #116]	; (800516c <ps_print+0x88>)
 80050f6:	f009 fa1b 	bl	800e530 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050fe:	4619      	mov	r1, r3
 8005100:	481b      	ldr	r0, [pc, #108]	; (8005170 <ps_print+0x8c>)
 8005102:	f009 fa15 	bl	800e530 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	4618      	mov	r0, r3
 800510c:	f7fb fa44 	bl	8000598 <__aeabi_f2d>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4817      	ldr	r0, [pc, #92]	; (8005174 <ps_print+0x90>)
 8005116:	f009 fa0b 	bl	800e530 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	4618      	mov	r0, r3
 8005120:	f7fb fa3a 	bl	8000598 <__aeabi_f2d>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4813      	ldr	r0, [pc, #76]	; (8005178 <ps_print+0x94>)
 800512a:	f009 fa01 	bl	800e530 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005132:	4618      	mov	r0, r3
 8005134:	f7fb fa30 	bl	8000598 <__aeabi_f2d>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	480f      	ldr	r0, [pc, #60]	; (800517c <ps_print+0x98>)
 800513e:	f009 f9f7 	bl	800e530 <iprintf>
	printf("   Turns:  %d", encoder->turns);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005148:	4619      	mov	r1, r3
 800514a:	480d      	ldr	r0, [pc, #52]	; (8005180 <ps_print+0x9c>)
 800514c:	f009 f9f0 	bl	800e530 <iprintf>
	printf("   CAN:   %f\r\n", encoder->angle_multiturn[0]);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4618      	mov	r0, r3
 8005156:	f7fb fa1f 	bl	8000598 <__aeabi_f2d>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	4809      	ldr	r0, [pc, #36]	; (8005184 <ps_print+0xa0>)
 8005160:	f009 f9e6 	bl	800e530 <iprintf>
	//HAL_Delay(dt_ms);
}
 8005164:	bf00      	nop
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	08012c88 	.word	0x08012c88
 8005170:	08012c90 	.word	0x08012c90
 8005174:	08012ca8 	.word	0x08012ca8
 8005178:	08012cbc 	.word	0x08012cbc
 800517c:	08012cd0 	.word	0x08012cd0
 8005180:	08012ce4 	.word	0x08012ce4
 8005184:	08012cf4 	.word	0x08012cf4

08005188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800518e:	4b0f      	ldr	r3, [pc, #60]	; (80051cc <HAL_MspInit+0x44>)
 8005190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005192:	4a0e      	ldr	r2, [pc, #56]	; (80051cc <HAL_MspInit+0x44>)
 8005194:	f043 0301 	orr.w	r3, r3, #1
 8005198:	6613      	str	r3, [r2, #96]	; 0x60
 800519a:	4b0c      	ldr	r3, [pc, #48]	; (80051cc <HAL_MspInit+0x44>)
 800519c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	607b      	str	r3, [r7, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80051a6:	4b09      	ldr	r3, [pc, #36]	; (80051cc <HAL_MspInit+0x44>)
 80051a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051aa:	4a08      	ldr	r2, [pc, #32]	; (80051cc <HAL_MspInit+0x44>)
 80051ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b0:	6593      	str	r3, [r2, #88]	; 0x58
 80051b2:	4b06      	ldr	r3, [pc, #24]	; (80051cc <HAL_MspInit+0x44>)
 80051b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ba:	603b      	str	r3, [r7, #0]
 80051bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80051be:	f004 fc81 	bl	8009ac4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051c2:	bf00      	nop
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40021000 	.word	0x40021000

080051d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80051d4:	e7fe      	b.n	80051d4 <NMI_Handler+0x4>

080051d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051d6:	b480      	push	{r7}
 80051d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051da:	e7fe      	b.n	80051da <HardFault_Handler+0x4>

080051dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051e0:	e7fe      	b.n	80051e0 <MemManage_Handler+0x4>

080051e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051e2:	b480      	push	{r7}
 80051e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051e6:	e7fe      	b.n	80051e6 <BusFault_Handler+0x4>

080051e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051ec:	e7fe      	b.n	80051ec <UsageFault_Handler+0x4>

080051ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051ee:	b480      	push	{r7}
 80051f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051f2:	bf00      	nop
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005200:	bf00      	nop
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800520a:	b480      	push	{r7}
 800520c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800520e:	bf00      	nop
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800521c:	f000 fd22 	bl	8005c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005220:	bf00      	nop
 8005222:	bd80      	pop	{r7, pc}

08005224 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005228:	4802      	ldr	r0, [pc, #8]	; (8005234 <DMA1_Channel1_IRQHandler+0x10>)
 800522a:	f002 fa78 	bl	800771e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800522e:	bf00      	nop
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	200002f4 	.word	0x200002f4

08005238 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800523c:	4802      	ldr	r0, [pc, #8]	; (8005248 <DMA1_Channel2_IRQHandler+0x10>)
 800523e:	f002 fa6e 	bl	800771e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005242:	bf00      	nop
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000354 	.word	0x20000354

0800524c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	HAL_GPIO_WritePin(PWM_PIN, GPIO_PIN_SET );	// Useful for timing
 8005250:	2201      	movs	r2, #1
 8005252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800525a:	f003 fba1 	bl	80089a0 <HAL_GPIO_WritePin>
	analog_sample(&controller);
 800525e:	4810      	ldr	r0, [pc, #64]	; (80052a0 <TIM1_UP_TIM16_IRQHandler+0x54>)
 8005260:	f7fd f8de 	bl	8002420 <analog_sample>
	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 8005264:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80052a4 <TIM1_UP_TIM16_IRQHandler+0x58>
 8005268:	480f      	ldr	r0, [pc, #60]	; (80052a8 <TIM1_UP_TIM16_IRQHandler+0x5c>)
 800526a:	f7ff fdcb 	bl	8004e04 <ps_sample>
//	  HAL_GPIO_WritePin(LoopTime, GPIO_PIN_SET );

	/* Run Finite State Machine */
	run_fsm(&state);
 800526e:	480f      	ldr	r0, [pc, #60]	; (80052ac <TIM1_UP_TIM16_IRQHandler+0x60>)
 8005270:	f7fd ff1e 	bl	80030b0 <run_fsm>

	can_tx_rx();
 8005274:	f000 f83a 	bl	80052ec <can_tx_rx>

	/* increment loop count */
	controller.loop_count++;
 8005278:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <TIM1_UP_TIM16_IRQHandler+0x54>)
 800527a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800527e:	3301      	adds	r3, #1
 8005280:	4a07      	ldr	r2, [pc, #28]	; (80052a0 <TIM1_UP_TIM16_IRQHandler+0x54>)
 8005282:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005286:	480a      	ldr	r0, [pc, #40]	; (80052b0 <TIM1_UP_TIM16_IRQHandler+0x64>)
 8005288:	f005 fd74 	bl	800ad74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
	HAL_GPIO_WritePin(PWM_PIN, GPIO_PIN_RESET );	// Useful for timing
 800528c:	2200      	movs	r2, #0
 800528e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005296:	f003 fb83 	bl	80089a0 <HAL_GPIO_WritePin>
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800529a:	bf00      	nop
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20000468 	.word	0x20000468
 80052a4:	388bcf64 	.word	0x388bcf64
 80052a8:	20000778 	.word	0x20000778
 80052ac:	20000768 	.word	0x20000768
 80052b0:	200050a4 	.word	0x200050a4

080052b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80052ba:	4809      	ldr	r0, [pc, #36]	; (80052e0 <USART2_IRQHandler+0x2c>)
 80052bc:	f007 f8da 	bl	800c474 <HAL_UART_IRQHandler>

  char c = Serial2RxBuffer[0];
 80052c0:	4b08      	ldr	r3, [pc, #32]	; (80052e4 <USART2_IRQHandler+0x30>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	71fb      	strb	r3, [r7, #7]
  update_fsm(&state, c);
 80052c6:	79fb      	ldrb	r3, [r7, #7]
 80052c8:	4619      	mov	r1, r3
 80052ca:	4807      	ldr	r0, [pc, #28]	; (80052e8 <USART2_IRQHandler+0x34>)
 80052cc:	f7fe f86a 	bl	80033a4 <update_fsm>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80052d0:	4803      	ldr	r0, [pc, #12]	; (80052e0 <USART2_IRQHandler+0x2c>)
 80052d2:	f007 f8cf 	bl	800c474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80052d6:	bf00      	nop
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	200050f0 	.word	0x200050f0
 80052e4:	20004ce8 	.word	0x20004ce8
 80052e8:	20000768 	.word	0x20000768

080052ec <can_tx_rx>:

/* USER CODE BEGIN 1 */
void can_tx_rx(void){
 80052ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ee:	b093      	sub	sp, #76	; 0x4c
 80052f0:	af10      	add	r7, sp, #64	; 0x40
	int no_message = HAL_FDCAN_GetRxMessage(&CAN_H, FDCAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);
 80052f2:	4b84      	ldr	r3, [pc, #528]	; (8005504 <can_tx_rx+0x218>)
 80052f4:	4a84      	ldr	r2, [pc, #528]	; (8005508 <can_tx_rx+0x21c>)
 80052f6:	2140      	movs	r1, #64	; 0x40
 80052f8:	4884      	ldr	r0, [pc, #528]	; (800550c <can_tx_rx+0x220>)
 80052fa:	f002 fdb1 	bl	8007e60 <HAL_FDCAN_GetRxMessage>
 80052fe:	4603      	mov	r3, r0
 8005300:	607b      	str	r3, [r7, #4]
	if(!no_message){
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	f040 80f8 	bne.w	80054fa <can_tx_rx+0x20e>
//		printf("%d\r\n",can_rx.rx_header.Identifier);
		pack_reply(&can_tx, CAN_ID,  comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR);	// Pack response
 800530a:	4b81      	ldr	r3, [pc, #516]	; (8005510 <can_tx_rx+0x224>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	b2db      	uxtb	r3, r3
 8005310:	4a80      	ldr	r2, [pc, #512]	; (8005514 <can_tx_rx+0x228>)
 8005312:	ed92 7a03 	vldr	s14, [r2, #12]
 8005316:	4a80      	ldr	r2, [pc, #512]	; (8005518 <can_tx_rx+0x22c>)
 8005318:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 800531c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005320:	4a7c      	ldr	r2, [pc, #496]	; (8005514 <can_tx_rx+0x228>)
 8005322:	ed92 7a18 	vldr	s14, [r2, #96]	; 0x60
 8005326:	4a7c      	ldr	r2, [pc, #496]	; (8005518 <can_tx_rx+0x22c>)
 8005328:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 800532c:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8005330:	4a7a      	ldr	r2, [pc, #488]	; (800551c <can_tx_rx+0x230>)
 8005332:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 8005336:	4a78      	ldr	r2, [pc, #480]	; (8005518 <can_tx_rx+0x22c>)
 8005338:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800533c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005340:	4a75      	ldr	r2, [pc, #468]	; (8005518 <can_tx_rx+0x22c>)
 8005342:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 8005346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800534a:	eeb0 1a67 	vmov.f32	s2, s15
 800534e:	eef0 0a46 	vmov.f32	s1, s12
 8005352:	eeb0 0a66 	vmov.f32	s0, s13
 8005356:	4619      	mov	r1, r3
 8005358:	4871      	ldr	r0, [pc, #452]	; (8005520 <can_tx_rx+0x234>)
 800535a:	f7fc feb9 	bl	80020d0 <pack_reply>
		HAL_FDCAN_AddMessageToTxFifoQ(&CAN_H, &can_tx.tx_header, can_tx.data);	// Send response
 800535e:	4a71      	ldr	r2, [pc, #452]	; (8005524 <can_tx_rx+0x238>)
 8005360:	4971      	ldr	r1, [pc, #452]	; (8005528 <can_tx_rx+0x23c>)
 8005362:	486a      	ldr	r0, [pc, #424]	; (800550c <can_tx_rx+0x220>)
 8005364:	f002 fd37 	bl	8007dd6 <HAL_FDCAN_AddMessageToTxFifoQ>
	  if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 8005368:	4b70      	ldr	r3, [pc, #448]	; (800552c <can_tx_rx+0x240>)
 800536a:	785a      	ldrb	r2, [r3, #1]
 800536c:	4b6f      	ldr	r3, [pc, #444]	; (800552c <can_tx_rx+0x240>)
 800536e:	789b      	ldrb	r3, [r3, #2]
 8005370:	4013      	ands	r3, r2
 8005372:	b2da      	uxtb	r2, r3
 8005374:	4b6d      	ldr	r3, [pc, #436]	; (800552c <can_tx_rx+0x240>)
 8005376:	78db      	ldrb	r3, [r3, #3]
 8005378:	4013      	ands	r3, r2
 800537a:	b2da      	uxtb	r2, r3
 800537c:	4b6b      	ldr	r3, [pc, #428]	; (800552c <can_tx_rx+0x240>)
 800537e:	791b      	ldrb	r3, [r3, #4]
 8005380:	4013      	ands	r3, r2
 8005382:	b2da      	uxtb	r2, r3
 8005384:	4b69      	ldr	r3, [pc, #420]	; (800552c <can_tx_rx+0x240>)
 8005386:	795b      	ldrb	r3, [r3, #5]
 8005388:	4013      	ands	r3, r2
 800538a:	b2da      	uxtb	r2, r3
 800538c:	4b67      	ldr	r3, [pc, #412]	; (800552c <can_tx_rx+0x240>)
 800538e:	799b      	ldrb	r3, [r3, #6]
 8005390:	4013      	ands	r3, r2
 8005392:	b2da      	uxtb	r2, r3
 8005394:	4b65      	ldr	r3, [pc, #404]	; (800552c <can_tx_rx+0x240>)
 8005396:	79db      	ldrb	r3, [r3, #7]
 8005398:	4013      	ands	r3, r2
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2bff      	cmp	r3, #255	; 0xff
 800539e:	bf0c      	ite	eq
 80053a0:	2301      	moveq	r3, #1
 80053a2:	2300      	movne	r3, #0
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	4b61      	ldr	r3, [pc, #388]	; (800552c <can_tx_rx+0x240>)
 80053a8:	7a1b      	ldrb	r3, [r3, #8]
 80053aa:	2bfc      	cmp	r3, #252	; 0xfc
 80053ac:	bf0c      	ite	eq
 80053ae:	2301      	moveq	r3, #1
 80053b0:	2300      	movne	r3, #0
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	4013      	ands	r3, r2
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d004      	beq.n	80053c6 <can_tx_rx+0xda>
		  update_fsm(&state, MOTOR_CMD);
 80053bc:	216d      	movs	r1, #109	; 0x6d
 80053be:	485c      	ldr	r0, [pc, #368]	; (8005530 <can_tx_rx+0x244>)
 80053c0:	f7fd fff0 	bl	80033a4 <update_fsm>
	  else{
		  unpack_cmd(can_rx, controller.commands);	// Unpack commands
		  controller.timeout = 0;					// Reset timeout counter
	  }
	}
}
 80053c4:	e099      	b.n	80054fa <can_tx_rx+0x20e>
	  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 80053c6:	4b59      	ldr	r3, [pc, #356]	; (800552c <can_tx_rx+0x240>)
 80053c8:	785a      	ldrb	r2, [r3, #1]
 80053ca:	4b58      	ldr	r3, [pc, #352]	; (800552c <can_tx_rx+0x240>)
 80053cc:	789b      	ldrb	r3, [r3, #2]
 80053ce:	4013      	ands	r3, r2
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	4b56      	ldr	r3, [pc, #344]	; (800552c <can_tx_rx+0x240>)
 80053d4:	78db      	ldrb	r3, [r3, #3]
 80053d6:	4013      	ands	r3, r2
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2bff      	cmp	r3, #255	; 0xff
 80053dc:	bf0c      	ite	eq
 80053de:	2301      	moveq	r3, #1
 80053e0:	2300      	movne	r3, #0
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	461a      	mov	r2, r3
 80053e6:	4b51      	ldr	r3, [pc, #324]	; (800552c <can_tx_rx+0x240>)
 80053e8:	791b      	ldrb	r3, [r3, #4]
 80053ea:	2bff      	cmp	r3, #255	; 0xff
 80053ec:	bf0c      	ite	eq
 80053ee:	2301      	moveq	r3, #1
 80053f0:	2300      	movne	r3, #0
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	4619      	mov	r1, r3
 80053f6:	4b4d      	ldr	r3, [pc, #308]	; (800552c <can_tx_rx+0x240>)
 80053f8:	795b      	ldrb	r3, [r3, #5]
 80053fa:	2bff      	cmp	r3, #255	; 0xff
 80053fc:	bf0c      	ite	eq
 80053fe:	2301      	moveq	r3, #1
 8005400:	2300      	movne	r3, #0
 8005402:	b2db      	uxtb	r3, r3
 8005404:	fb01 f303 	mul.w	r3, r1, r3
 8005408:	4013      	ands	r3, r2
 800540a:	4a48      	ldr	r2, [pc, #288]	; (800552c <can_tx_rx+0x240>)
 800540c:	7992      	ldrb	r2, [r2, #6]
 800540e:	2aff      	cmp	r2, #255	; 0xff
 8005410:	bf0c      	ite	eq
 8005412:	2201      	moveq	r2, #1
 8005414:	2200      	movne	r2, #0
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	4013      	ands	r3, r2
 800541a:	4a44      	ldr	r2, [pc, #272]	; (800552c <can_tx_rx+0x240>)
 800541c:	79d2      	ldrb	r2, [r2, #7]
 800541e:	2aff      	cmp	r2, #255	; 0xff
 8005420:	bf0c      	ite	eq
 8005422:	2201      	moveq	r2, #1
 8005424:	2200      	movne	r2, #0
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	4013      	ands	r3, r2
 800542a:	4a40      	ldr	r2, [pc, #256]	; (800552c <can_tx_rx+0x240>)
 800542c:	7a12      	ldrb	r2, [r2, #8]
 800542e:	2afd      	cmp	r2, #253	; 0xfd
 8005430:	bf0c      	ite	eq
 8005432:	2201      	moveq	r2, #1
 8005434:	2200      	movne	r2, #0
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	4013      	ands	r3, r2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d004      	beq.n	8005448 <can_tx_rx+0x15c>
		  update_fsm(&state, MENU_CMD);
 800543e:	211b      	movs	r1, #27
 8005440:	483b      	ldr	r0, [pc, #236]	; (8005530 <can_tx_rx+0x244>)
 8005442:	f7fd ffaf 	bl	80033a4 <update_fsm>
}
 8005446:	e058      	b.n	80054fa <can_tx_rx+0x20e>
	  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 8005448:	4b38      	ldr	r3, [pc, #224]	; (800552c <can_tx_rx+0x240>)
 800544a:	785a      	ldrb	r2, [r3, #1]
 800544c:	4b37      	ldr	r3, [pc, #220]	; (800552c <can_tx_rx+0x240>)
 800544e:	789b      	ldrb	r3, [r3, #2]
 8005450:	4013      	ands	r3, r2
 8005452:	b2da      	uxtb	r2, r3
 8005454:	4b35      	ldr	r3, [pc, #212]	; (800552c <can_tx_rx+0x240>)
 8005456:	78db      	ldrb	r3, [r3, #3]
 8005458:	4013      	ands	r3, r2
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2bff      	cmp	r3, #255	; 0xff
 800545e:	bf0c      	ite	eq
 8005460:	2301      	moveq	r3, #1
 8005462:	2300      	movne	r3, #0
 8005464:	b2db      	uxtb	r3, r3
 8005466:	461a      	mov	r2, r3
 8005468:	4b30      	ldr	r3, [pc, #192]	; (800552c <can_tx_rx+0x240>)
 800546a:	791b      	ldrb	r3, [r3, #4]
 800546c:	2bff      	cmp	r3, #255	; 0xff
 800546e:	bf0c      	ite	eq
 8005470:	2301      	moveq	r3, #1
 8005472:	2300      	movne	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	4619      	mov	r1, r3
 8005478:	4b2c      	ldr	r3, [pc, #176]	; (800552c <can_tx_rx+0x240>)
 800547a:	795b      	ldrb	r3, [r3, #5]
 800547c:	2bff      	cmp	r3, #255	; 0xff
 800547e:	bf0c      	ite	eq
 8005480:	2301      	moveq	r3, #1
 8005482:	2300      	movne	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	fb01 f303 	mul.w	r3, r1, r3
 800548a:	4013      	ands	r3, r2
 800548c:	4a27      	ldr	r2, [pc, #156]	; (800552c <can_tx_rx+0x240>)
 800548e:	7992      	ldrb	r2, [r2, #6]
 8005490:	2aff      	cmp	r2, #255	; 0xff
 8005492:	bf0c      	ite	eq
 8005494:	2201      	moveq	r2, #1
 8005496:	2200      	movne	r2, #0
 8005498:	b2d2      	uxtb	r2, r2
 800549a:	4013      	ands	r3, r2
 800549c:	4a23      	ldr	r2, [pc, #140]	; (800552c <can_tx_rx+0x240>)
 800549e:	79d2      	ldrb	r2, [r2, #7]
 80054a0:	2aff      	cmp	r2, #255	; 0xff
 80054a2:	bf0c      	ite	eq
 80054a4:	2201      	moveq	r2, #1
 80054a6:	2200      	movne	r2, #0
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	4013      	ands	r3, r2
 80054ac:	4a1f      	ldr	r2, [pc, #124]	; (800552c <can_tx_rx+0x240>)
 80054ae:	7a12      	ldrb	r2, [r2, #8]
 80054b0:	2afe      	cmp	r2, #254	; 0xfe
 80054b2:	bf0c      	ite	eq
 80054b4:	2201      	moveq	r2, #1
 80054b6:	2200      	movne	r2, #0
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d004      	beq.n	80054ca <can_tx_rx+0x1de>
		  update_fsm(&state, ZERO_CMD);
 80054c0:	217a      	movs	r1, #122	; 0x7a
 80054c2:	481b      	ldr	r0, [pc, #108]	; (8005530 <can_tx_rx+0x244>)
 80054c4:	f7fd ff6e 	bl	80033a4 <update_fsm>
}
 80054c8:	e017      	b.n	80054fa <can_tx_rx+0x20e>
		  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 80054ca:	4e18      	ldr	r6, [pc, #96]	; (800552c <can_tx_rx+0x240>)
 80054cc:	4b19      	ldr	r3, [pc, #100]	; (8005534 <can_tx_rx+0x248>)
 80054ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80054d0:	466d      	mov	r5, sp
 80054d2:	f106 0410 	add.w	r4, r6, #16
 80054d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80054e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80054ea:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80054ee:	f7fc fe53 	bl	8002198 <unpack_cmd>
		  controller.timeout = 0;					// Reset timeout counter
 80054f2:	4b0a      	ldr	r3, [pc, #40]	; (800551c <can_tx_rx+0x230>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005502:	bf00      	nop
 8005504:	20004c9d 	.word	0x20004c9d
 8005508:	20004ca8 	.word	0x20004ca8
 800550c:	200003b8 	.word	0x200003b8
 8005510:	20004dec 	.word	0x20004dec
 8005514:	20000778 	.word	0x20000778
 8005518:	20004cec 	.word	0x20004cec
 800551c:	20000468 	.word	0x20000468
 8005520:	20004c70 	.word	0x20004c70
 8005524:	20004c71 	.word	0x20004c71
 8005528:	20004c78 	.word	0x20004c78
 800552c:	20004c9c 	.word	0x20004c9c
 8005530:	20000768 	.word	0x20000768
 8005534:	20000530 	.word	0x20000530

08005538 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005538:	b480      	push	{r7}
 800553a:	af00      	add	r7, sp, #0
	return 1;
 800553c:	2301      	movs	r3, #1
}
 800553e:	4618      	mov	r0, r3
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <_kill>:

int _kill(int pid, int sig)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005552:	f008 fb43 	bl	800dbdc <__errno>
 8005556:	4603      	mov	r3, r0
 8005558:	2216      	movs	r2, #22
 800555a:	601a      	str	r2, [r3, #0]
	return -1;
 800555c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005560:	4618      	mov	r0, r3
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <_exit>:

void _exit (int status)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005570:	f04f 31ff 	mov.w	r1, #4294967295
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7ff ffe7 	bl	8005548 <_kill>
	while (1) {}		/* Make sure we hang here */
 800557a:	e7fe      	b.n	800557a <_exit+0x12>

0800557c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005588:	2300      	movs	r3, #0
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	e00a      	b.n	80055a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800558e:	f3af 8000 	nop.w
 8005592:	4601      	mov	r1, r0
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	60ba      	str	r2, [r7, #8]
 800559a:	b2ca      	uxtb	r2, r1
 800559c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	3301      	adds	r3, #1
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	dbf0      	blt.n	800558e <_read+0x12>
	}

return len;
 80055ac:	687b      	ldr	r3, [r7, #4]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b086      	sub	sp, #24
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055c2:	2300      	movs	r3, #0
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	e009      	b.n	80055dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	60ba      	str	r2, [r7, #8]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 fa8b 	bl	8005aec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	3301      	adds	r3, #1
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	dbf1      	blt.n	80055c8 <_write+0x12>
	}
	return len;
 80055e4:	687b      	ldr	r3, [r7, #4]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <_close>:

int _close(int file)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
	return -1;
 80055f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005616:	605a      	str	r2, [r3, #4]
	return 0;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <_isatty>:

int _isatty(int file)
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
	return 1;
 800562e:	2301      	movs	r3, #1
}
 8005630:	4618      	mov	r0, r3
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
	return 0;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
	...

08005658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005660:	4a14      	ldr	r2, [pc, #80]	; (80056b4 <_sbrk+0x5c>)
 8005662:	4b15      	ldr	r3, [pc, #84]	; (80056b8 <_sbrk+0x60>)
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800566c:	4b13      	ldr	r3, [pc, #76]	; (80056bc <_sbrk+0x64>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d102      	bne.n	800567a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005674:	4b11      	ldr	r3, [pc, #68]	; (80056bc <_sbrk+0x64>)
 8005676:	4a12      	ldr	r2, [pc, #72]	; (80056c0 <_sbrk+0x68>)
 8005678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800567a:	4b10      	ldr	r3, [pc, #64]	; (80056bc <_sbrk+0x64>)
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4413      	add	r3, r2
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	429a      	cmp	r2, r3
 8005686:	d207      	bcs.n	8005698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005688:	f008 faa8 	bl	800dbdc <__errno>
 800568c:	4603      	mov	r3, r0
 800568e:	220c      	movs	r2, #12
 8005690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005692:	f04f 33ff 	mov.w	r3, #4294967295
 8005696:	e009      	b.n	80056ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005698:	4b08      	ldr	r3, [pc, #32]	; (80056bc <_sbrk+0x64>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800569e:	4b07      	ldr	r3, [pc, #28]	; (80056bc <_sbrk+0x64>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4413      	add	r3, r2
 80056a6:	4a05      	ldr	r2, [pc, #20]	; (80056bc <_sbrk+0x64>)
 80056a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80056aa:	68fb      	ldr	r3, [r7, #12]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	20008000 	.word	0x20008000
 80056b8:	00000400 	.word	0x00000400
 80056bc:	200050a0 	.word	0x200050a0
 80056c0:	20005198 	.word	0x20005198

080056c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80056c8:	4b06      	ldr	r3, [pc, #24]	; (80056e4 <SystemInit+0x20>)
 80056ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ce:	4a05      	ldr	r2, [pc, #20]	; (80056e4 <SystemInit+0x20>)
 80056d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056d8:	bf00      	nop
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	e000ed00 	.word	0xe000ed00

080056e8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b09c      	sub	sp, #112	; 0x70
 80056ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	605a      	str	r2, [r3, #4]
 80056f8:	609a      	str	r2, [r3, #8]
 80056fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	605a      	str	r2, [r3, #4]
 8005706:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005708:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	605a      	str	r2, [r3, #4]
 8005712:	609a      	str	r2, [r3, #8]
 8005714:	60da      	str	r2, [r3, #12]
 8005716:	611a      	str	r2, [r3, #16]
 8005718:	615a      	str	r2, [r3, #20]
 800571a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800571c:	1d3b      	adds	r3, r7, #4
 800571e:	2234      	movs	r2, #52	; 0x34
 8005720:	2100      	movs	r1, #0
 8005722:	4618      	mov	r0, r3
 8005724:	f008 fa92 	bl	800dc4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005728:	4b54      	ldr	r3, [pc, #336]	; (800587c <MX_TIM1_Init+0x194>)
 800572a:	4a55      	ldr	r2, [pc, #340]	; (8005880 <MX_TIM1_Init+0x198>)
 800572c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800572e:	4b53      	ldr	r3, [pc, #332]	; (800587c <MX_TIM1_Init+0x194>)
 8005730:	2200      	movs	r2, #0
 8005732:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8005734:	4b51      	ldr	r3, [pc, #324]	; (800587c <MX_TIM1_Init+0x194>)
 8005736:	2220      	movs	r2, #32
 8005738:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5600;
 800573a:	4b50      	ldr	r3, [pc, #320]	; (800587c <MX_TIM1_Init+0x194>)
 800573c:	f44f 52af 	mov.w	r2, #5600	; 0x15e0
 8005740:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005742:	4b4e      	ldr	r3, [pc, #312]	; (800587c <MX_TIM1_Init+0x194>)
 8005744:	2200      	movs	r2, #0
 8005746:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8005748:	4b4c      	ldr	r3, [pc, #304]	; (800587c <MX_TIM1_Init+0x194>)
 800574a:	2201      	movs	r2, #1
 800574c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800574e:	4b4b      	ldr	r3, [pc, #300]	; (800587c <MX_TIM1_Init+0x194>)
 8005750:	2280      	movs	r2, #128	; 0x80
 8005752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005754:	4849      	ldr	r0, [pc, #292]	; (800587c <MX_TIM1_Init+0x194>)
 8005756:	f005 f8e9 	bl	800a92c <HAL_TIM_Base_Init>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005760:	f7ff f853 	bl	800480a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005768:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800576a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800576e:	4619      	mov	r1, r3
 8005770:	4842      	ldr	r0, [pc, #264]	; (800587c <MX_TIM1_Init+0x194>)
 8005772:	f005 fd8f 	bl	800b294 <HAL_TIM_ConfigClockSource>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800577c:	f7ff f845 	bl	800480a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005780:	483e      	ldr	r0, [pc, #248]	; (800587c <MX_TIM1_Init+0x194>)
 8005782:	f005 f995 	bl	800aab0 <HAL_TIM_PWM_Init>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800578c:	f7ff f83d 	bl	800480a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005790:	2300      	movs	r3, #0
 8005792:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005794:	2300      	movs	r3, #0
 8005796:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005798:	2300      	movs	r3, #0
 800579a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800579c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80057a0:	4619      	mov	r1, r3
 80057a2:	4836      	ldr	r0, [pc, #216]	; (800587c <MX_TIM1_Init+0x194>)
 80057a4:	f006 fb9a 	bl	800bedc <HAL_TIMEx_MasterConfigSynchronization>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80057ae:	f7ff f82c 	bl	800480a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80057b2:	2360      	movs	r3, #96	; 0x60
 80057b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80057ba:	2302      	movs	r3, #2
 80057bc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80057be:	2308      	movs	r3, #8
 80057c0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80057c2:	2304      	movs	r3, #4
 80057c4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80057c6:	2300      	movs	r3, #0
 80057c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80057ca:	2300      	movs	r3, #0
 80057cc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80057ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80057d2:	2200      	movs	r2, #0
 80057d4:	4619      	mov	r1, r3
 80057d6:	4829      	ldr	r0, [pc, #164]	; (800587c <MX_TIM1_Init+0x194>)
 80057d8:	f005 fc4c 	bl	800b074 <HAL_TIM_PWM_ConfigChannel>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80057e2:	f7ff f812 	bl	800480a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80057e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80057ea:	2204      	movs	r2, #4
 80057ec:	4619      	mov	r1, r3
 80057ee:	4823      	ldr	r0, [pc, #140]	; (800587c <MX_TIM1_Init+0x194>)
 80057f0:	f005 fc40 	bl	800b074 <HAL_TIM_PWM_ConfigChannel>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80057fa:	f7ff f806 	bl	800480a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80057fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005802:	2208      	movs	r2, #8
 8005804:	4619      	mov	r1, r3
 8005806:	481d      	ldr	r0, [pc, #116]	; (800587c <MX_TIM1_Init+0x194>)
 8005808:	f005 fc34 	bl	800b074 <HAL_TIM_PWM_ConfigChannel>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8005812:	f7fe fffa 	bl	800480a <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8005816:	4819      	ldr	r0, [pc, #100]	; (800587c <MX_TIM1_Init+0x194>)
 8005818:	f006 fc82 	bl	800c120 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800581c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005820:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8005822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005826:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005828:	2300      	movs	r3, #0
 800582a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 800582c:	2364      	movs	r3, #100	; 0x64
 800582e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005830:	2300      	movs	r3, #0
 8005832:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005838:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800583a:	2300      	movs	r3, #0
 800583c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800583e:	2300      	movs	r3, #0
 8005840:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005842:	2300      	movs	r3, #0
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005846:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800584a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800584c:	2300      	movs	r3, #0
 800584e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005850:	2300      	movs	r3, #0
 8005852:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005854:	2300      	movs	r3, #0
 8005856:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005858:	1d3b      	adds	r3, r7, #4
 800585a:	4619      	mov	r1, r3
 800585c:	4807      	ldr	r0, [pc, #28]	; (800587c <MX_TIM1_Init+0x194>)
 800585e:	f006 fbbf 	bl	800bfe0 <HAL_TIMEx_ConfigBreakDeadTime>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8005868:	f7fe ffcf 	bl	800480a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800586c:	4803      	ldr	r0, [pc, #12]	; (800587c <MX_TIM1_Init+0x194>)
 800586e:	f000 f82f 	bl	80058d0 <HAL_TIM_MspPostInit>

}
 8005872:	bf00      	nop
 8005874:	3770      	adds	r7, #112	; 0x70
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	200050a4 	.word	0x200050a4
 8005880:	40012c00 	.word	0x40012c00

08005884 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a0d      	ldr	r2, [pc, #52]	; (80058c8 <HAL_TIM_Base_MspInit+0x44>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d113      	bne.n	80058be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005896:	4b0d      	ldr	r3, [pc, #52]	; (80058cc <HAL_TIM_Base_MspInit+0x48>)
 8005898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800589a:	4a0c      	ldr	r2, [pc, #48]	; (80058cc <HAL_TIM_Base_MspInit+0x48>)
 800589c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80058a0:	6613      	str	r3, [r2, #96]	; 0x60
 80058a2:	4b0a      	ldr	r3, [pc, #40]	; (80058cc <HAL_TIM_Base_MspInit+0x48>)
 80058a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80058ae:	2200      	movs	r2, #0
 80058b0:	2100      	movs	r1, #0
 80058b2:	2019      	movs	r0, #25
 80058b4:	f001 fd1b 	bl	80072ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80058b8:	2019      	movs	r0, #25
 80058ba:	f001 fd32 	bl	8007322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80058be:	bf00      	nop
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	40012c00 	.word	0x40012c00
 80058cc:	40021000 	.word	0x40021000

080058d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08a      	sub	sp, #40	; 0x28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058d8:	f107 0314 	add.w	r3, r7, #20
 80058dc:	2200      	movs	r2, #0
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	605a      	str	r2, [r3, #4]
 80058e2:	609a      	str	r2, [r3, #8]
 80058e4:	60da      	str	r2, [r3, #12]
 80058e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a2f      	ldr	r2, [pc, #188]	; (80059ac <HAL_TIM_MspPostInit+0xdc>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d157      	bne.n	80059a2 <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058f2:	4b2f      	ldr	r3, [pc, #188]	; (80059b0 <HAL_TIM_MspPostInit+0xe0>)
 80058f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f6:	4a2e      	ldr	r2, [pc, #184]	; (80059b0 <HAL_TIM_MspPostInit+0xe0>)
 80058f8:	f043 0304 	orr.w	r3, r3, #4
 80058fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058fe:	4b2c      	ldr	r3, [pc, #176]	; (80059b0 <HAL_TIM_MspPostInit+0xe0>)
 8005900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800590a:	4b29      	ldr	r3, [pc, #164]	; (80059b0 <HAL_TIM_MspPostInit+0xe0>)
 800590c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590e:	4a28      	ldr	r2, [pc, #160]	; (80059b0 <HAL_TIM_MspPostInit+0xe0>)
 8005910:	f043 0302 	orr.w	r3, r3, #2
 8005914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005916:	4b26      	ldr	r3, [pc, #152]	; (80059b0 <HAL_TIM_MspPostInit+0xe0>)
 8005918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005922:	4b23      	ldr	r3, [pc, #140]	; (80059b0 <HAL_TIM_MspPostInit+0xe0>)
 8005924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005926:	4a22      	ldr	r2, [pc, #136]	; (80059b0 <HAL_TIM_MspPostInit+0xe0>)
 8005928:	f043 0301 	orr.w	r3, r3, #1
 800592c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800592e:	4b20      	ldr	r3, [pc, #128]	; (80059b0 <HAL_TIM_MspPostInit+0xe0>)
 8005930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	60bb      	str	r3, [r7, #8]
 8005938:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800593a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800593e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005940:	2302      	movs	r3, #2
 8005942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005944:	2300      	movs	r3, #0
 8005946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005948:	2300      	movs	r3, #0
 800594a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800594c:	2304      	movs	r3, #4
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005950:	f107 0314 	add.w	r3, r7, #20
 8005954:	4619      	mov	r1, r3
 8005956:	4817      	ldr	r0, [pc, #92]	; (80059b4 <HAL_TIM_MspPostInit+0xe4>)
 8005958:	f002 fea0 	bl	800869c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800595c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005962:	2302      	movs	r3, #2
 8005964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005966:	2300      	movs	r3, #0
 8005968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800596a:	2300      	movs	r3, #0
 800596c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800596e:	2304      	movs	r3, #4
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005972:	f107 0314 	add.w	r3, r7, #20
 8005976:	4619      	mov	r1, r3
 8005978:	480f      	ldr	r0, [pc, #60]	; (80059b8 <HAL_TIM_MspPostInit+0xe8>)
 800597a:	f002 fe8f 	bl	800869c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 800597e:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8005982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005984:	2302      	movs	r3, #2
 8005986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005988:	2300      	movs	r3, #0
 800598a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800598c:	2300      	movs	r3, #0
 800598e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005990:	2306      	movs	r3, #6
 8005992:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005994:	f107 0314 	add.w	r3, r7, #20
 8005998:	4619      	mov	r1, r3
 800599a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800599e:	f002 fe7d 	bl	800869c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80059a2:	bf00      	nop
 80059a4:	3728      	adds	r7, #40	; 0x28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	40012c00 	.word	0x40012c00
 80059b0:	40021000 	.word	0x40021000
 80059b4:	48000800 	.word	0x48000800
 80059b8:	48000400 	.word	0x48000400

080059bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80059c0:	4b22      	ldr	r3, [pc, #136]	; (8005a4c <MX_USART2_UART_Init+0x90>)
 80059c2:	4a23      	ldr	r2, [pc, #140]	; (8005a50 <MX_USART2_UART_Init+0x94>)
 80059c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80059c6:	4b21      	ldr	r3, [pc, #132]	; (8005a4c <MX_USART2_UART_Init+0x90>)
 80059c8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80059cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80059ce:	4b1f      	ldr	r3, [pc, #124]	; (8005a4c <MX_USART2_UART_Init+0x90>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80059d4:	4b1d      	ldr	r3, [pc, #116]	; (8005a4c <MX_USART2_UART_Init+0x90>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80059da:	4b1c      	ldr	r3, [pc, #112]	; (8005a4c <MX_USART2_UART_Init+0x90>)
 80059dc:	2200      	movs	r2, #0
 80059de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80059e0:	4b1a      	ldr	r3, [pc, #104]	; (8005a4c <MX_USART2_UART_Init+0x90>)
 80059e2:	220c      	movs	r2, #12
 80059e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059e6:	4b19      	ldr	r3, [pc, #100]	; (8005a4c <MX_USART2_UART_Init+0x90>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80059ec:	4b17      	ldr	r3, [pc, #92]	; (8005a4c <MX_USART2_UART_Init+0x90>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059f2:	4b16      	ldr	r3, [pc, #88]	; (8005a4c <MX_USART2_UART_Init+0x90>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80059f8:	4b14      	ldr	r3, [pc, #80]	; (8005a4c <MX_USART2_UART_Init+0x90>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059fe:	4b13      	ldr	r3, [pc, #76]	; (8005a4c <MX_USART2_UART_Init+0x90>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005a04:	4811      	ldr	r0, [pc, #68]	; (8005a4c <MX_USART2_UART_Init+0x90>)
 8005a06:	f006 fc09 	bl	800c21c <HAL_UART_Init>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005a10:	f7fe fefb 	bl	800480a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005a14:	2100      	movs	r1, #0
 8005a16:	480d      	ldr	r0, [pc, #52]	; (8005a4c <MX_USART2_UART_Init+0x90>)
 8005a18:	f008 f80d 	bl	800da36 <HAL_UARTEx_SetTxFifoThreshold>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005a22:	f7fe fef2 	bl	800480a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005a26:	2100      	movs	r1, #0
 8005a28:	4808      	ldr	r0, [pc, #32]	; (8005a4c <MX_USART2_UART_Init+0x90>)
 8005a2a:	f008 f842 	bl	800dab2 <HAL_UARTEx_SetRxFifoThreshold>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005a34:	f7fe fee9 	bl	800480a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005a38:	4804      	ldr	r0, [pc, #16]	; (8005a4c <MX_USART2_UART_Init+0x90>)
 8005a3a:	f007 ffc3 	bl	800d9c4 <HAL_UARTEx_DisableFifoMode>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005a44:	f7fe fee1 	bl	800480a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005a48:	bf00      	nop
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	200050f0 	.word	0x200050f0
 8005a50:	40004400 	.word	0x40004400

08005a54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b08a      	sub	sp, #40	; 0x28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a5c:	f107 0314 	add.w	r3, r7, #20
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	605a      	str	r2, [r3, #4]
 8005a66:	609a      	str	r2, [r3, #8]
 8005a68:	60da      	str	r2, [r3, #12]
 8005a6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a1b      	ldr	r2, [pc, #108]	; (8005ae0 <HAL_UART_MspInit+0x8c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d12f      	bne.n	8005ad6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005a76:	4b1b      	ldr	r3, [pc, #108]	; (8005ae4 <HAL_UART_MspInit+0x90>)
 8005a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7a:	4a1a      	ldr	r2, [pc, #104]	; (8005ae4 <HAL_UART_MspInit+0x90>)
 8005a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a80:	6593      	str	r3, [r2, #88]	; 0x58
 8005a82:	4b18      	ldr	r3, [pc, #96]	; (8005ae4 <HAL_UART_MspInit+0x90>)
 8005a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a8a:	613b      	str	r3, [r7, #16]
 8005a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a8e:	4b15      	ldr	r3, [pc, #84]	; (8005ae4 <HAL_UART_MspInit+0x90>)
 8005a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a92:	4a14      	ldr	r2, [pc, #80]	; (8005ae4 <HAL_UART_MspInit+0x90>)
 8005a94:	f043 0302 	orr.w	r3, r3, #2
 8005a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a9a:	4b12      	ldr	r3, [pc, #72]	; (8005ae4 <HAL_UART_MspInit+0x90>)
 8005a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8005aa6:	2318      	movs	r3, #24
 8005aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aaa:	2302      	movs	r3, #2
 8005aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005ab6:	2307      	movs	r3, #7
 8005ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005aba:	f107 0314 	add.w	r3, r7, #20
 8005abe:	4619      	mov	r1, r3
 8005ac0:	4809      	ldr	r0, [pc, #36]	; (8005ae8 <HAL_UART_MspInit+0x94>)
 8005ac2:	f002 fdeb 	bl	800869c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	2100      	movs	r1, #0
 8005aca:	2026      	movs	r0, #38	; 0x26
 8005acc:	f001 fc0f 	bl	80072ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005ad0:	2026      	movs	r0, #38	; 0x26
 8005ad2:	f001 fc26 	bl	8007322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005ad6:	bf00      	nop
 8005ad8:	3728      	adds	r7, #40	; 0x28
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	40004400 	.word	0x40004400
 8005ae4:	40021000 	.word	0x40021000
 8005ae8:	48000400 	.word	0x48000400

08005aec <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8005af4:	1d39      	adds	r1, r7, #4
 8005af6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005afa:	2201      	movs	r2, #1
 8005afc:	4803      	ldr	r0, [pc, #12]	; (8005b0c <__io_putchar+0x20>)
 8005afe:	f006 fbdd 	bl	800c2bc <HAL_UART_Transmit>
return 0;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	200050f0 	.word	0x200050f0

08005b10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8005b18:	2201      	movs	r2, #1
 8005b1a:	4904      	ldr	r1, [pc, #16]	; (8005b2c <HAL_UART_RxCpltCallback+0x1c>)
 8005b1c:	4804      	ldr	r0, [pc, #16]	; (8005b30 <HAL_UART_RxCpltCallback+0x20>)
 8005b1e:	f006 fc63 	bl	800c3e8 <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b22:	bf00      	nop
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	20004ce8 	.word	0x20004ce8
 8005b30:	200050f0 	.word	0x200050f0

08005b34 <store_eeprom_regs>:

#include "user_config.h"
#include "eeprom.h"

void store_eeprom_regs()
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
	eeprom_store(__float_reg, FLOAT_REG_LEN, __int_reg, INT_REG_LEN);
 8005b38:	2380      	movs	r3, #128	; 0x80
 8005b3a:	4a03      	ldr	r2, [pc, #12]	; (8005b48 <store_eeprom_regs+0x14>)
 8005b3c:	2140      	movs	r1, #64	; 0x40
 8005b3e:	4803      	ldr	r0, [pc, #12]	; (8005b4c <store_eeprom_regs+0x18>)
 8005b40:	f7fc f8d2 	bl	8001ce8 <eeprom_store>
}
 8005b44:	bf00      	nop
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	20004dec 	.word	0x20004dec
 8005b4c:	20004cec 	.word	0x20004cec

08005b50 <load_eeprom_regs>:

void load_eeprom_regs()
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
	eeprom_restore(__float_reg, FLOAT_REG_LEN, __int_reg, INT_REG_LEN);
 8005b54:	2380      	movs	r3, #128	; 0x80
 8005b56:	4a03      	ldr	r2, [pc, #12]	; (8005b64 <load_eeprom_regs+0x14>)
 8005b58:	2140      	movs	r1, #64	; 0x40
 8005b5a:	4803      	ldr	r0, [pc, #12]	; (8005b68 <load_eeprom_regs+0x18>)
 8005b5c:	f7fc f840 	bl	8001be0 <eeprom_restore>
}
 8005b60:	bf00      	nop
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	20004dec 	.word	0x20004dec
 8005b68:	20004cec 	.word	0x20004cec

08005b6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005b6c:	480d      	ldr	r0, [pc, #52]	; (8005ba4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005b6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005b70:	480d      	ldr	r0, [pc, #52]	; (8005ba8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005b72:	490e      	ldr	r1, [pc, #56]	; (8005bac <LoopForever+0xa>)
  ldr r2, =_sidata
 8005b74:	4a0e      	ldr	r2, [pc, #56]	; (8005bb0 <LoopForever+0xe>)
  movs r3, #0
 8005b76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005b78:	e002      	b.n	8005b80 <LoopCopyDataInit>

08005b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b7e:	3304      	adds	r3, #4

08005b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b84:	d3f9      	bcc.n	8005b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b86:	4a0b      	ldr	r2, [pc, #44]	; (8005bb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005b88:	4c0b      	ldr	r4, [pc, #44]	; (8005bb8 <LoopForever+0x16>)
  movs r3, #0
 8005b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b8c:	e001      	b.n	8005b92 <LoopFillZerobss>

08005b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b90:	3204      	adds	r2, #4

08005b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b94:	d3fb      	bcc.n	8005b8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005b96:	f7ff fd95 	bl	80056c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b9a:	f008 f825 	bl	800dbe8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005b9e:	f7fe fae9 	bl	8004174 <main>

08005ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8005ba2:	e7fe      	b.n	8005ba2 <LoopForever>
  ldr   r0, =_estack
 8005ba4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005bac:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8005bb0:	08013a48 	.word	0x08013a48
  ldr r2, =_sbss
 8005bb4:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8005bb8:	20005194 	.word	0x20005194

08005bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005bbc:	e7fe      	b.n	8005bbc <ADC1_2_IRQHandler>

08005bbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b082      	sub	sp, #8
 8005bc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005bc8:	2003      	movs	r0, #3
 8005bca:	f001 fb85 	bl	80072d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005bce:	2000      	movs	r0, #0
 8005bd0:	f000 f80e 	bl	8005bf0 <HAL_InitTick>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	71fb      	strb	r3, [r7, #7]
 8005bde:	e001      	b.n	8005be4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005be0:	f7ff fad2 	bl	8005188 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005be4:	79fb      	ldrb	r3, [r7, #7]

}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005bfc:	4b16      	ldr	r3, [pc, #88]	; (8005c58 <HAL_InitTick+0x68>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d022      	beq.n	8005c4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005c04:	4b15      	ldr	r3, [pc, #84]	; (8005c5c <HAL_InitTick+0x6c>)
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	4b13      	ldr	r3, [pc, #76]	; (8005c58 <HAL_InitTick+0x68>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c10:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f001 fb90 	bl	800733e <HAL_SYSTICK_Config>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10f      	bne.n	8005c44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b0f      	cmp	r3, #15
 8005c28:	d809      	bhi.n	8005c3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	6879      	ldr	r1, [r7, #4]
 8005c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c32:	f001 fb5c 	bl	80072ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005c36:	4a0a      	ldr	r2, [pc, #40]	; (8005c60 <HAL_InitTick+0x70>)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6013      	str	r3, [r2, #0]
 8005c3c:	e007      	b.n	8005c4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	73fb      	strb	r3, [r7, #15]
 8005c42:	e004      	b.n	8005c4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	73fb      	strb	r3, [r7, #15]
 8005c48:	e001      	b.n	8005c4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	20000008 	.word	0x20000008
 8005c5c:	20000000 	.word	0x20000000
 8005c60:	20000004 	.word	0x20000004

08005c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c68:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <HAL_IncTick+0x1c>)
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <HAL_IncTick+0x20>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4413      	add	r3, r2
 8005c72:	4a03      	ldr	r2, [pc, #12]	; (8005c80 <HAL_IncTick+0x1c>)
 8005c74:	6013      	str	r3, [r2, #0]
}
 8005c76:	bf00      	nop
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	20005180 	.word	0x20005180
 8005c84:	20000008 	.word	0x20000008

08005c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8005c8c:	4b03      	ldr	r3, [pc, #12]	; (8005c9c <HAL_GetTick+0x14>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	20005180 	.word	0x20005180

08005ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ca8:	f7ff ffee 	bl	8005c88 <HAL_GetTick>
 8005cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb8:	d004      	beq.n	8005cc4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005cba:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <HAL_Delay+0x40>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005cc4:	bf00      	nop
 8005cc6:	f7ff ffdf 	bl	8005c88 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d8f7      	bhi.n	8005cc6 <HAL_Delay+0x26>
  {
  }
}
 8005cd6:	bf00      	nop
 8005cd8:	bf00      	nop
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	20000008 	.word	0x20000008

08005ce4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	609a      	str	r2, [r3, #8]
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	609a      	str	r2, [r3, #8]
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3360      	adds	r3, #96	; 0x60
 8005d5e:	461a      	mov	r2, r3
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	4b08      	ldr	r3, [pc, #32]	; (8005d90 <LL_ADC_SetOffset+0x44>)
 8005d6e:	4013      	ands	r3, r2
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005d84:	bf00      	nop
 8005d86:	371c      	adds	r7, #28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	03fff000 	.word	0x03fff000

08005d94 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3360      	adds	r3, #96	; 0x60
 8005da2:	461a      	mov	r2, r3
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3360      	adds	r3, #96	; 0x60
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	431a      	orrs	r2, r3
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b087      	sub	sp, #28
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	60f8      	str	r0, [r7, #12]
 8005dfe:	60b9      	str	r1, [r7, #8]
 8005e00:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	3360      	adds	r3, #96	; 0x60
 8005e06:	461a      	mov	r2, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005e20:	bf00      	nop
 8005e22:	371c      	adds	r7, #28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	3360      	adds	r3, #96	; 0x60
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	431a      	orrs	r2, r3
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005e56:	bf00      	nop
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	615a      	str	r2, [r3, #20]
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e000      	b.n	8005ea2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b087      	sub	sp, #28
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	60f8      	str	r0, [r7, #12]
 8005eb6:	60b9      	str	r1, [r7, #8]
 8005eb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	3330      	adds	r3, #48	; 0x30
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	0a1b      	lsrs	r3, r3, #8
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	f003 030c 	and.w	r3, r3, #12
 8005eca:	4413      	add	r3, r2
 8005ecc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	f003 031f 	and.w	r3, r3, #31
 8005ed8:	211f      	movs	r1, #31
 8005eda:	fa01 f303 	lsl.w	r3, r1, r3
 8005ede:	43db      	mvns	r3, r3
 8005ee0:	401a      	ands	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	0e9b      	lsrs	r3, r3, #26
 8005ee6:	f003 011f 	and.w	r1, r3, #31
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f003 031f 	and.w	r3, r3, #31
 8005ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005efa:	bf00      	nop
 8005efc:	371c      	adds	r7, #28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b087      	sub	sp, #28
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	3314      	adds	r3, #20
 8005f16:	461a      	mov	r2, r3
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	0e5b      	lsrs	r3, r3, #25
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	f003 0304 	and.w	r3, r3, #4
 8005f22:	4413      	add	r3, r2
 8005f24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	0d1b      	lsrs	r3, r3, #20
 8005f2e:	f003 031f 	and.w	r3, r3, #31
 8005f32:	2107      	movs	r1, #7
 8005f34:	fa01 f303 	lsl.w	r3, r1, r3
 8005f38:	43db      	mvns	r3, r3
 8005f3a:	401a      	ands	r2, r3
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	0d1b      	lsrs	r3, r3, #20
 8005f40:	f003 031f 	and.w	r3, r3, #31
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005f50:	bf00      	nop
 8005f52:	371c      	adds	r7, #28
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f74:	43db      	mvns	r3, r3
 8005f76:	401a      	ands	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f003 0318 	and.w	r3, r3, #24
 8005f7e:	4908      	ldr	r1, [pc, #32]	; (8005fa0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005f80:	40d9      	lsrs	r1, r3
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	400b      	ands	r3, r1
 8005f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005f92:	bf00      	nop
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	0007ffff 	.word	0x0007ffff

08005fa4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f003 031f 	and.w	r3, r3, #31
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005fd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6093      	str	r3, [r2, #8]
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ff8:	d101      	bne.n	8005ffe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e000      	b.n	8006000 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800601c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006020:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006044:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006048:	d101      	bne.n	800604e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800604a:	2301      	movs	r3, #1
 800604c:	e000      	b.n	8006050 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800606c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006070:	f043 0201 	orr.w	r2, r3, #1
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b01      	cmp	r3, #1
 8006096:	d101      	bne.n	800609c <LL_ADC_IsEnabled+0x18>
 8006098:	2301      	movs	r3, #1
 800609a:	e000      	b.n	800609e <LL_ADC_IsEnabled+0x1a>
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060be:	f043 0204 	orr.w	r2, r3, #4
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80060c6:	bf00      	nop
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f003 0304 	and.w	r3, r3, #4
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d101      	bne.n	80060ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80060e6:	2301      	movs	r3, #1
 80060e8:	e000      	b.n	80060ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f003 0308 	and.w	r3, r3, #8
 8006108:	2b08      	cmp	r3, #8
 800610a:	d101      	bne.n	8006110 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800610c:	2301      	movs	r3, #1
 800610e:	e000      	b.n	8006112 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
	...

08006120 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006120:	b590      	push	{r4, r7, lr}
 8006122:	b089      	sub	sp, #36	; 0x24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800612c:	2300      	movs	r3, #0
 800612e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e177      	b.n	800642a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006144:	2b00      	cmp	r3, #0
 8006146:	d109      	bne.n	800615c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7fb f87b 	bl	8001244 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4618      	mov	r0, r3
 8006162:	f7ff ff3f 	bl	8005fe4 <LL_ADC_IsDeepPowerDownEnabled>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d004      	beq.n	8006176 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4618      	mov	r0, r3
 8006172:	f7ff ff25 	bl	8005fc0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff ff5a 	bl	8006034 <LL_ADC_IsInternalRegulatorEnabled>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d115      	bne.n	80061b2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4618      	mov	r0, r3
 800618c:	f7ff ff3e 	bl	800600c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006190:	4b9c      	ldr	r3, [pc, #624]	; (8006404 <HAL_ADC_Init+0x2e4>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	099b      	lsrs	r3, r3, #6
 8006196:	4a9c      	ldr	r2, [pc, #624]	; (8006408 <HAL_ADC_Init+0x2e8>)
 8006198:	fba2 2303 	umull	r2, r3, r2, r3
 800619c:	099b      	lsrs	r3, r3, #6
 800619e:	3301      	adds	r3, #1
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80061a4:	e002      	b.n	80061ac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	3b01      	subs	r3, #1
 80061aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1f9      	bne.n	80061a6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7ff ff3c 	bl	8006034 <LL_ADC_IsInternalRegulatorEnabled>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10d      	bne.n	80061de <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c6:	f043 0210 	orr.w	r2, r3, #16
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061d2:	f043 0201 	orr.w	r2, r3, #1
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff ff75 	bl	80060d2 <LL_ADC_REG_IsConversionOngoing>
 80061e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f040 8110 	bne.w	8006418 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f040 810c 	bne.w	8006418 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006204:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006208:	f043 0202 	orr.w	r2, r3, #2
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff ff35 	bl	8006084 <LL_ADC_IsEnabled>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d111      	bne.n	8006244 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006220:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006224:	f7ff ff2e 	bl	8006084 <LL_ADC_IsEnabled>
 8006228:	4604      	mov	r4, r0
 800622a:	4878      	ldr	r0, [pc, #480]	; (800640c <HAL_ADC_Init+0x2ec>)
 800622c:	f7ff ff2a 	bl	8006084 <LL_ADC_IsEnabled>
 8006230:	4603      	mov	r3, r0
 8006232:	4323      	orrs	r3, r4
 8006234:	2b00      	cmp	r3, #0
 8006236:	d105      	bne.n	8006244 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	4619      	mov	r1, r3
 800623e:	4874      	ldr	r0, [pc, #464]	; (8006410 <HAL_ADC_Init+0x2f0>)
 8006240:	f7ff fd50 	bl	8005ce4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	7f5b      	ldrb	r3, [r3, #29]
 8006248:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800624e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006254:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800625a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006262:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006264:	4313      	orrs	r3, r2
 8006266:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800626e:	2b01      	cmp	r3, #1
 8006270:	d106      	bne.n	8006280 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006276:	3b01      	subs	r3, #1
 8006278:	045b      	lsls	r3, r3, #17
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	4313      	orrs	r3, r2
 800627e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006284:	2b00      	cmp	r3, #0
 8006286:	d009      	beq.n	800629c <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006294:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	4313      	orrs	r3, r2
 800629a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	4b5c      	ldr	r3, [pc, #368]	; (8006414 <HAL_ADC_Init+0x2f4>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	6812      	ldr	r2, [r2, #0]
 80062aa:	69b9      	ldr	r1, [r7, #24]
 80062ac:	430b      	orrs	r3, r1
 80062ae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff ff01 	bl	80060d2 <LL_ADC_REG_IsConversionOngoing>
 80062d0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7ff ff0e 	bl	80060f8 <LL_ADC_INJ_IsConversionOngoing>
 80062dc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d16d      	bne.n	80063c0 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d16a      	bne.n	80063c0 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80062ee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80062f6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80062f8:	4313      	orrs	r3, r2
 80062fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006306:	f023 0302 	bic.w	r3, r3, #2
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6812      	ldr	r2, [r2, #0]
 800630e:	69b9      	ldr	r1, [r7, #24]
 8006310:	430b      	orrs	r3, r1
 8006312:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d017      	beq.n	800634c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	691a      	ldr	r2, [r3, #16]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800632a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006334:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006338:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	6911      	ldr	r1, [r2, #16]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	6812      	ldr	r2, [r2, #0]
 8006344:	430b      	orrs	r3, r1
 8006346:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800634a:	e013      	b.n	8006374 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691a      	ldr	r2, [r3, #16]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800635a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	6812      	ldr	r2, [r2, #0]
 8006368:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800636c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006370:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800637a:	2b01      	cmp	r3, #1
 800637c:	d118      	bne.n	80063b0 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006388:	f023 0304 	bic.w	r3, r3, #4
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006394:	4311      	orrs	r1, r2
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800639a:	4311      	orrs	r1, r2
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80063a0:	430a      	orrs	r2, r1
 80063a2:	431a      	orrs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f042 0201 	orr.w	r2, r2, #1
 80063ac:	611a      	str	r2, [r3, #16]
 80063ae:	e007      	b.n	80063c0 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	691a      	ldr	r2, [r3, #16]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f022 0201 	bic.w	r2, r2, #1
 80063be:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d10c      	bne.n	80063e2 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ce:	f023 010f 	bic.w	r1, r3, #15
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	1e5a      	subs	r2, r3, #1
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	631a      	str	r2, [r3, #48]	; 0x30
 80063e0:	e007      	b.n	80063f2 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 020f 	bic.w	r2, r2, #15
 80063f0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f6:	f023 0303 	bic.w	r3, r3, #3
 80063fa:	f043 0201 	orr.w	r2, r3, #1
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	65da      	str	r2, [r3, #92]	; 0x5c
 8006402:	e011      	b.n	8006428 <HAL_ADC_Init+0x308>
 8006404:	20000000 	.word	0x20000000
 8006408:	053e2d63 	.word	0x053e2d63
 800640c:	50000100 	.word	0x50000100
 8006410:	50000300 	.word	0x50000300
 8006414:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800641c:	f043 0210 	orr.w	r2, r3, #16
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006428:	7ffb      	ldrb	r3, [r7, #31]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3724      	adds	r7, #36	; 0x24
 800642e:	46bd      	mov	sp, r7
 8006430:	bd90      	pop	{r4, r7, pc}
 8006432:	bf00      	nop

08006434 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006440:	4851      	ldr	r0, [pc, #324]	; (8006588 <HAL_ADC_Start_DMA+0x154>)
 8006442:	f7ff fdaf 	bl	8005fa4 <LL_ADC_GetMultimode>
 8006446:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4618      	mov	r0, r3
 800644e:	f7ff fe40 	bl	80060d2 <LL_ADC_REG_IsConversionOngoing>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	f040 808f 	bne.w	8006578 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_ADC_Start_DMA+0x34>
 8006464:	2302      	movs	r3, #2
 8006466:	e08a      	b.n	800657e <HAL_ADC_Start_DMA+0x14a>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d005      	beq.n	8006482 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	2b05      	cmp	r3, #5
 800647a:	d002      	beq.n	8006482 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	2b09      	cmp	r3, #9
 8006480:	d173      	bne.n	800656a <HAL_ADC_Start_DMA+0x136>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 fc98 	bl	8006db8 <ADC_Enable>
 8006488:	4603      	mov	r3, r0
 800648a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800648c:	7dfb      	ldrb	r3, [r7, #23]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d166      	bne.n	8006560 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006496:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800649a:	f023 0301 	bic.w	r3, r3, #1
 800649e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a38      	ldr	r2, [pc, #224]	; (800658c <HAL_ADC_Start_DMA+0x158>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d002      	beq.n	80064b6 <HAL_ADC_Start_DMA+0x82>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	e001      	b.n	80064ba <HAL_ADC_Start_DMA+0x86>
 80064b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	6812      	ldr	r2, [r2, #0]
 80064be:	4293      	cmp	r3, r2
 80064c0:	d002      	beq.n	80064c8 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d105      	bne.n	80064d4 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064cc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d006      	beq.n	80064ee <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e4:	f023 0206 	bic.w	r2, r3, #6
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	661a      	str	r2, [r3, #96]	; 0x60
 80064ec:	e002      	b.n	80064f4 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f8:	4a25      	ldr	r2, [pc, #148]	; (8006590 <HAL_ADC_Start_DMA+0x15c>)
 80064fa:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006500:	4a24      	ldr	r2, [pc, #144]	; (8006594 <HAL_ADC_Start_DMA+0x160>)
 8006502:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006508:	4a23      	ldr	r2, [pc, #140]	; (8006598 <HAL_ADC_Start_DMA+0x164>)
 800650a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	221c      	movs	r2, #28
 8006512:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f042 0210 	orr.w	r2, r2, #16
 800652a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0201 	orr.w	r2, r2, #1
 800653a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3340      	adds	r3, #64	; 0x40
 8006546:	4619      	mov	r1, r3
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f000 ffac 	bl	80074a8 <HAL_DMA_Start_IT>
 8006550:	4603      	mov	r3, r0
 8006552:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff fda6 	bl	80060aa <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800655e:	e00d      	b.n	800657c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8006568:	e008      	b.n	800657c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006576:	e001      	b.n	800657c <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006578:	2302      	movs	r3, #2
 800657a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800657c:	7dfb      	ldrb	r3, [r7, #23]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	50000300 	.word	0x50000300
 800658c:	50000100 	.word	0x50000100
 8006590:	08006e7d 	.word	0x08006e7d
 8006594:	08006f55 	.word	0x08006f55
 8006598:	08006f71 	.word	0x08006f71

0800659c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b0b6      	sub	sp, #216	; 0xd8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80065e8:	2300      	movs	r3, #0
 80065ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d101      	bne.n	80065fa <HAL_ADC_ConfigChannel+0x22>
 80065f6:	2302      	movs	r3, #2
 80065f8:	e3c8      	b.n	8006d8c <HAL_ADC_ConfigChannel+0x7b4>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f7ff fd63 	bl	80060d2 <LL_ADC_REG_IsConversionOngoing>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	f040 83ad 	bne.w	8006d6e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6818      	ldr	r0, [r3, #0]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	6859      	ldr	r1, [r3, #4]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	f7ff fc44 	bl	8005eae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4618      	mov	r0, r3
 800662c:	f7ff fd51 	bl	80060d2 <LL_ADC_REG_IsConversionOngoing>
 8006630:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff fd5d 	bl	80060f8 <LL_ADC_INJ_IsConversionOngoing>
 800663e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006642:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006646:	2b00      	cmp	r3, #0
 8006648:	f040 81d9 	bne.w	80069fe <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800664c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006650:	2b00      	cmp	r3, #0
 8006652:	f040 81d4 	bne.w	80069fe <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800665e:	d10f      	bne.n	8006680 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6818      	ldr	r0, [r3, #0]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2200      	movs	r2, #0
 800666a:	4619      	mov	r1, r3
 800666c:	f7ff fc4b 	bl	8005f06 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006678:	4618      	mov	r0, r3
 800667a:	f7ff fbf2 	bl	8005e62 <LL_ADC_SetSamplingTimeCommonConfig>
 800667e:	e00e      	b.n	800669e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	6819      	ldr	r1, [r3, #0]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	461a      	mov	r2, r3
 800668e:	f7ff fc3a 	bl	8005f06 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2100      	movs	r1, #0
 8006698:	4618      	mov	r0, r3
 800669a:	f7ff fbe2 	bl	8005e62 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	695a      	ldr	r2, [r3, #20]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	08db      	lsrs	r3, r3, #3
 80066aa:	f003 0303 	and.w	r3, r3, #3
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	fa02 f303 	lsl.w	r3, r2, r3
 80066b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	2b04      	cmp	r3, #4
 80066be:	d022      	beq.n	8006706 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	6919      	ldr	r1, [r3, #16]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066d0:	f7ff fb3c 	bl	8005d4c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6818      	ldr	r0, [r3, #0]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	6919      	ldr	r1, [r3, #16]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	461a      	mov	r2, r3
 80066e2:	f7ff fb88 	bl	8005df6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6818      	ldr	r0, [r3, #0]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	6919      	ldr	r1, [r3, #16]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	7f1b      	ldrb	r3, [r3, #28]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d102      	bne.n	80066fc <HAL_ADC_ConfigChannel+0x124>
 80066f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066fa:	e000      	b.n	80066fe <HAL_ADC_ConfigChannel+0x126>
 80066fc:	2300      	movs	r3, #0
 80066fe:	461a      	mov	r2, r3
 8006700:	f7ff fb94 	bl	8005e2c <LL_ADC_SetOffsetSaturation>
 8006704:	e17b      	b.n	80069fe <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2100      	movs	r1, #0
 800670c:	4618      	mov	r0, r3
 800670e:	f7ff fb41 	bl	8005d94 <LL_ADC_GetOffsetChannel>
 8006712:	4603      	mov	r3, r0
 8006714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10a      	bne.n	8006732 <HAL_ADC_ConfigChannel+0x15a>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2100      	movs	r1, #0
 8006722:	4618      	mov	r0, r3
 8006724:	f7ff fb36 	bl	8005d94 <LL_ADC_GetOffsetChannel>
 8006728:	4603      	mov	r3, r0
 800672a:	0e9b      	lsrs	r3, r3, #26
 800672c:	f003 021f 	and.w	r2, r3, #31
 8006730:	e01e      	b.n	8006770 <HAL_ADC_ConfigChannel+0x198>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2100      	movs	r1, #0
 8006738:	4618      	mov	r0, r3
 800673a:	f7ff fb2b 	bl	8005d94 <LL_ADC_GetOffsetChannel>
 800673e:	4603      	mov	r3, r0
 8006740:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006744:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006748:	fa93 f3a3 	rbit	r3, r3
 800674c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006750:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006754:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006758:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8006760:	2320      	movs	r3, #32
 8006762:	e004      	b.n	800676e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8006764:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006768:	fab3 f383 	clz	r3, r3
 800676c:	b2db      	uxtb	r3, r3
 800676e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006778:	2b00      	cmp	r3, #0
 800677a:	d105      	bne.n	8006788 <HAL_ADC_ConfigChannel+0x1b0>
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	0e9b      	lsrs	r3, r3, #26
 8006782:	f003 031f 	and.w	r3, r3, #31
 8006786:	e018      	b.n	80067ba <HAL_ADC_ConfigChannel+0x1e2>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006790:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006794:	fa93 f3a3 	rbit	r3, r3
 8006798:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800679c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80067a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80067ac:	2320      	movs	r3, #32
 80067ae:	e004      	b.n	80067ba <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80067b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80067b4:	fab3 f383 	clz	r3, r3
 80067b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d106      	bne.n	80067cc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2200      	movs	r2, #0
 80067c4:	2100      	movs	r1, #0
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7ff fafa 	bl	8005dc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2101      	movs	r1, #1
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7ff fade 	bl	8005d94 <LL_ADC_GetOffsetChannel>
 80067d8:	4603      	mov	r3, r0
 80067da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10a      	bne.n	80067f8 <HAL_ADC_ConfigChannel+0x220>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2101      	movs	r1, #1
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7ff fad3 	bl	8005d94 <LL_ADC_GetOffsetChannel>
 80067ee:	4603      	mov	r3, r0
 80067f0:	0e9b      	lsrs	r3, r3, #26
 80067f2:	f003 021f 	and.w	r2, r3, #31
 80067f6:	e01e      	b.n	8006836 <HAL_ADC_ConfigChannel+0x25e>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2101      	movs	r1, #1
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff fac8 	bl	8005d94 <LL_ADC_GetOffsetChannel>
 8006804:	4603      	mov	r3, r0
 8006806:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800680a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800680e:	fa93 f3a3 	rbit	r3, r3
 8006812:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006816:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800681a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800681e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8006826:	2320      	movs	r3, #32
 8006828:	e004      	b.n	8006834 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800682a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800682e:	fab3 f383 	clz	r3, r3
 8006832:	b2db      	uxtb	r3, r3
 8006834:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800683e:	2b00      	cmp	r3, #0
 8006840:	d105      	bne.n	800684e <HAL_ADC_ConfigChannel+0x276>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	0e9b      	lsrs	r3, r3, #26
 8006848:	f003 031f 	and.w	r3, r3, #31
 800684c:	e018      	b.n	8006880 <HAL_ADC_ConfigChannel+0x2a8>
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006856:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800685a:	fa93 f3a3 	rbit	r3, r3
 800685e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006862:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006866:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800686a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8006872:	2320      	movs	r3, #32
 8006874:	e004      	b.n	8006880 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8006876:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800687a:	fab3 f383 	clz	r3, r3
 800687e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006880:	429a      	cmp	r2, r3
 8006882:	d106      	bne.n	8006892 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2200      	movs	r2, #0
 800688a:	2101      	movs	r1, #1
 800688c:	4618      	mov	r0, r3
 800688e:	f7ff fa97 	bl	8005dc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2102      	movs	r1, #2
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff fa7b 	bl	8005d94 <LL_ADC_GetOffsetChannel>
 800689e:	4603      	mov	r3, r0
 80068a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10a      	bne.n	80068be <HAL_ADC_ConfigChannel+0x2e6>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2102      	movs	r1, #2
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7ff fa70 	bl	8005d94 <LL_ADC_GetOffsetChannel>
 80068b4:	4603      	mov	r3, r0
 80068b6:	0e9b      	lsrs	r3, r3, #26
 80068b8:	f003 021f 	and.w	r2, r3, #31
 80068bc:	e01e      	b.n	80068fc <HAL_ADC_ConfigChannel+0x324>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2102      	movs	r1, #2
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff fa65 	bl	8005d94 <LL_ADC_GetOffsetChannel>
 80068ca:	4603      	mov	r3, r0
 80068cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068d4:	fa93 f3a3 	rbit	r3, r3
 80068d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80068dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80068e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80068ec:	2320      	movs	r3, #32
 80068ee:	e004      	b.n	80068fa <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80068f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068f4:	fab3 f383 	clz	r3, r3
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006904:	2b00      	cmp	r3, #0
 8006906:	d105      	bne.n	8006914 <HAL_ADC_ConfigChannel+0x33c>
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	0e9b      	lsrs	r3, r3, #26
 800690e:	f003 031f 	and.w	r3, r3, #31
 8006912:	e016      	b.n	8006942 <HAL_ADC_ConfigChannel+0x36a>
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800691c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006920:	fa93 f3a3 	rbit	r3, r3
 8006924:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006926:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800692c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8006934:	2320      	movs	r3, #32
 8006936:	e004      	b.n	8006942 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8006938:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800693c:	fab3 f383 	clz	r3, r3
 8006940:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006942:	429a      	cmp	r2, r3
 8006944:	d106      	bne.n	8006954 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2200      	movs	r2, #0
 800694c:	2102      	movs	r1, #2
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff fa36 	bl	8005dc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2103      	movs	r1, #3
 800695a:	4618      	mov	r0, r3
 800695c:	f7ff fa1a 	bl	8005d94 <LL_ADC_GetOffsetChannel>
 8006960:	4603      	mov	r3, r0
 8006962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10a      	bne.n	8006980 <HAL_ADC_ConfigChannel+0x3a8>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2103      	movs	r1, #3
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff fa0f 	bl	8005d94 <LL_ADC_GetOffsetChannel>
 8006976:	4603      	mov	r3, r0
 8006978:	0e9b      	lsrs	r3, r3, #26
 800697a:	f003 021f 	and.w	r2, r3, #31
 800697e:	e017      	b.n	80069b0 <HAL_ADC_ConfigChannel+0x3d8>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2103      	movs	r1, #3
 8006986:	4618      	mov	r0, r3
 8006988:	f7ff fa04 	bl	8005d94 <LL_ADC_GetOffsetChannel>
 800698c:	4603      	mov	r3, r0
 800698e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006990:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006992:	fa93 f3a3 	rbit	r3, r3
 8006996:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006998:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800699a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800699c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80069a2:	2320      	movs	r3, #32
 80069a4:	e003      	b.n	80069ae <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80069a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069a8:	fab3 f383 	clz	r3, r3
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d105      	bne.n	80069c8 <HAL_ADC_ConfigChannel+0x3f0>
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	0e9b      	lsrs	r3, r3, #26
 80069c2:	f003 031f 	and.w	r3, r3, #31
 80069c6:	e011      	b.n	80069ec <HAL_ADC_ConfigChannel+0x414>
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069d0:	fa93 f3a3 	rbit	r3, r3
 80069d4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80069d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80069da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80069e0:	2320      	movs	r3, #32
 80069e2:	e003      	b.n	80069ec <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80069e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069e6:	fab3 f383 	clz	r3, r3
 80069ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d106      	bne.n	80069fe <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2200      	movs	r2, #0
 80069f6:	2103      	movs	r1, #3
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7ff f9e1 	bl	8005dc0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff fb3e 	bl	8006084 <LL_ADC_IsEnabled>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f040 8140 	bne.w	8006c90 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6818      	ldr	r0, [r3, #0]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	6819      	ldr	r1, [r3, #0]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	f7ff fa9d 	bl	8005f5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	4a8f      	ldr	r2, [pc, #572]	; (8006c64 <HAL_ADC_ConfigChannel+0x68c>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	f040 8131 	bne.w	8006c90 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10b      	bne.n	8006a56 <HAL_ADC_ConfigChannel+0x47e>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	0e9b      	lsrs	r3, r3, #26
 8006a44:	3301      	adds	r3, #1
 8006a46:	f003 031f 	and.w	r3, r3, #31
 8006a4a:	2b09      	cmp	r3, #9
 8006a4c:	bf94      	ite	ls
 8006a4e:	2301      	movls	r3, #1
 8006a50:	2300      	movhi	r3, #0
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	e019      	b.n	8006a8a <HAL_ADC_ConfigChannel+0x4b2>
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a5e:	fa93 f3a3 	rbit	r3, r3
 8006a62:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006a64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a66:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006a68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8006a6e:	2320      	movs	r3, #32
 8006a70:	e003      	b.n	8006a7a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8006a72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a74:	fab3 f383 	clz	r3, r3
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	f003 031f 	and.w	r3, r3, #31
 8006a80:	2b09      	cmp	r3, #9
 8006a82:	bf94      	ite	ls
 8006a84:	2301      	movls	r3, #1
 8006a86:	2300      	movhi	r3, #0
 8006a88:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d079      	beq.n	8006b82 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d107      	bne.n	8006aaa <HAL_ADC_ConfigChannel+0x4d2>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	0e9b      	lsrs	r3, r3, #26
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	069b      	lsls	r3, r3, #26
 8006aa4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006aa8:	e015      	b.n	8006ad6 <HAL_ADC_ConfigChannel+0x4fe>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ab2:	fa93 f3a3 	rbit	r3, r3
 8006ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aba:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8006ac2:	2320      	movs	r3, #32
 8006ac4:	e003      	b.n	8006ace <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8006ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ac8:	fab3 f383 	clz	r3, r3
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	3301      	adds	r3, #1
 8006ad0:	069b      	lsls	r3, r3, #26
 8006ad2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d109      	bne.n	8006af6 <HAL_ADC_ConfigChannel+0x51e>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	0e9b      	lsrs	r3, r3, #26
 8006ae8:	3301      	adds	r3, #1
 8006aea:	f003 031f 	and.w	r3, r3, #31
 8006aee:	2101      	movs	r1, #1
 8006af0:	fa01 f303 	lsl.w	r3, r1, r3
 8006af4:	e017      	b.n	8006b26 <HAL_ADC_ConfigChannel+0x54e>
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006afe:	fa93 f3a3 	rbit	r3, r3
 8006b02:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b06:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8006b0e:	2320      	movs	r3, #32
 8006b10:	e003      	b.n	8006b1a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8006b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b14:	fab3 f383 	clz	r3, r3
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	f003 031f 	and.w	r3, r3, #31
 8006b20:	2101      	movs	r1, #1
 8006b22:	fa01 f303 	lsl.w	r3, r1, r3
 8006b26:	ea42 0103 	orr.w	r1, r2, r3
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10a      	bne.n	8006b4c <HAL_ADC_ConfigChannel+0x574>
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	0e9b      	lsrs	r3, r3, #26
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	f003 021f 	and.w	r2, r3, #31
 8006b42:	4613      	mov	r3, r2
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	4413      	add	r3, r2
 8006b48:	051b      	lsls	r3, r3, #20
 8006b4a:	e018      	b.n	8006b7e <HAL_ADC_ConfigChannel+0x5a6>
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	fa93 f3a3 	rbit	r3, r3
 8006b58:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8006b64:	2320      	movs	r3, #32
 8006b66:	e003      	b.n	8006b70 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8006b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b6a:	fab3 f383 	clz	r3, r3
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	3301      	adds	r3, #1
 8006b72:	f003 021f 	and.w	r2, r3, #31
 8006b76:	4613      	mov	r3, r2
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	4413      	add	r3, r2
 8006b7c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b7e:	430b      	orrs	r3, r1
 8006b80:	e081      	b.n	8006c86 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d107      	bne.n	8006b9e <HAL_ADC_ConfigChannel+0x5c6>
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	0e9b      	lsrs	r3, r3, #26
 8006b94:	3301      	adds	r3, #1
 8006b96:	069b      	lsls	r3, r3, #26
 8006b98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b9c:	e015      	b.n	8006bca <HAL_ADC_ConfigChannel+0x5f2>
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba6:	fa93 f3a3 	rbit	r3, r3
 8006baa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8006bb6:	2320      	movs	r3, #32
 8006bb8:	e003      	b.n	8006bc2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8006bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbc:	fab3 f383 	clz	r3, r3
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	069b      	lsls	r3, r3, #26
 8006bc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d109      	bne.n	8006bea <HAL_ADC_ConfigChannel+0x612>
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	0e9b      	lsrs	r3, r3, #26
 8006bdc:	3301      	adds	r3, #1
 8006bde:	f003 031f 	and.w	r3, r3, #31
 8006be2:	2101      	movs	r1, #1
 8006be4:	fa01 f303 	lsl.w	r3, r1, r3
 8006be8:	e017      	b.n	8006c1a <HAL_ADC_ConfigChannel+0x642>
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	fa93 f3a3 	rbit	r3, r3
 8006bf6:	61fb      	str	r3, [r7, #28]
  return result;
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8006c02:	2320      	movs	r3, #32
 8006c04:	e003      	b.n	8006c0e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	fab3 f383 	clz	r3, r3
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	3301      	adds	r3, #1
 8006c10:	f003 031f 	and.w	r3, r3, #31
 8006c14:	2101      	movs	r1, #1
 8006c16:	fa01 f303 	lsl.w	r3, r1, r3
 8006c1a:	ea42 0103 	orr.w	r1, r2, r3
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10d      	bne.n	8006c46 <HAL_ADC_ConfigChannel+0x66e>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	0e9b      	lsrs	r3, r3, #26
 8006c30:	3301      	adds	r3, #1
 8006c32:	f003 021f 	and.w	r2, r3, #31
 8006c36:	4613      	mov	r3, r2
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	4413      	add	r3, r2
 8006c3c:	3b1e      	subs	r3, #30
 8006c3e:	051b      	lsls	r3, r3, #20
 8006c40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c44:	e01e      	b.n	8006c84 <HAL_ADC_ConfigChannel+0x6ac>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	fa93 f3a3 	rbit	r3, r3
 8006c52:	613b      	str	r3, [r7, #16]
  return result;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d104      	bne.n	8006c68 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8006c5e:	2320      	movs	r3, #32
 8006c60:	e006      	b.n	8006c70 <HAL_ADC_ConfigChannel+0x698>
 8006c62:	bf00      	nop
 8006c64:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	fab3 f383 	clz	r3, r3
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	3301      	adds	r3, #1
 8006c72:	f003 021f 	and.w	r2, r3, #31
 8006c76:	4613      	mov	r3, r2
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	4413      	add	r3, r2
 8006c7c:	3b1e      	subs	r3, #30
 8006c7e:	051b      	lsls	r3, r3, #20
 8006c80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c84:	430b      	orrs	r3, r1
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	6892      	ldr	r2, [r2, #8]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	f7ff f93b 	bl	8005f06 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	4b3f      	ldr	r3, [pc, #252]	; (8006d94 <HAL_ADC_ConfigChannel+0x7bc>)
 8006c96:	4013      	ands	r3, r2
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d071      	beq.n	8006d80 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006c9c:	483e      	ldr	r0, [pc, #248]	; (8006d98 <HAL_ADC_ConfigChannel+0x7c0>)
 8006c9e:	f7ff f847 	bl	8005d30 <LL_ADC_GetCommonPathInternalCh>
 8006ca2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a3c      	ldr	r2, [pc, #240]	; (8006d9c <HAL_ADC_ConfigChannel+0x7c4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d004      	beq.n	8006cba <HAL_ADC_ConfigChannel+0x6e2>
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a3a      	ldr	r2, [pc, #232]	; (8006da0 <HAL_ADC_ConfigChannel+0x7c8>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d127      	bne.n	8006d0a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006cba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006cbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d121      	bne.n	8006d0a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cce:	d157      	bne.n	8006d80 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006cd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006cd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006cd8:	4619      	mov	r1, r3
 8006cda:	482f      	ldr	r0, [pc, #188]	; (8006d98 <HAL_ADC_ConfigChannel+0x7c0>)
 8006cdc:	f7ff f815 	bl	8005d0a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006ce0:	4b30      	ldr	r3, [pc, #192]	; (8006da4 <HAL_ADC_ConfigChannel+0x7cc>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	099b      	lsrs	r3, r3, #6
 8006ce6:	4a30      	ldr	r2, [pc, #192]	; (8006da8 <HAL_ADC_ConfigChannel+0x7d0>)
 8006ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cec:	099b      	lsrs	r3, r3, #6
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	005b      	lsls	r3, r3, #1
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006cfa:	e002      	b.n	8006d02 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1f9      	bne.n	8006cfc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d08:	e03a      	b.n	8006d80 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a27      	ldr	r2, [pc, #156]	; (8006dac <HAL_ADC_ConfigChannel+0x7d4>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d113      	bne.n	8006d3c <HAL_ADC_ConfigChannel+0x764>
 8006d14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10d      	bne.n	8006d3c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a22      	ldr	r2, [pc, #136]	; (8006db0 <HAL_ADC_ConfigChannel+0x7d8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d02a      	beq.n	8006d80 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d32:	4619      	mov	r1, r3
 8006d34:	4818      	ldr	r0, [pc, #96]	; (8006d98 <HAL_ADC_ConfigChannel+0x7c0>)
 8006d36:	f7fe ffe8 	bl	8005d0a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006d3a:	e021      	b.n	8006d80 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a1c      	ldr	r2, [pc, #112]	; (8006db4 <HAL_ADC_ConfigChannel+0x7dc>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d11c      	bne.n	8006d80 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006d46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d116      	bne.n	8006d80 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a16      	ldr	r2, [pc, #88]	; (8006db0 <HAL_ADC_ConfigChannel+0x7d8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d011      	beq.n	8006d80 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d64:	4619      	mov	r1, r3
 8006d66:	480c      	ldr	r0, [pc, #48]	; (8006d98 <HAL_ADC_ConfigChannel+0x7c0>)
 8006d68:	f7fe ffcf 	bl	8005d0a <LL_ADC_SetCommonPathInternalCh>
 8006d6c:	e008      	b.n	8006d80 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d72:	f043 0220 	orr.w	r2, r3, #32
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006d88:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	37d8      	adds	r7, #216	; 0xd8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	80080000 	.word	0x80080000
 8006d98:	50000300 	.word	0x50000300
 8006d9c:	c3210000 	.word	0xc3210000
 8006da0:	90c00010 	.word	0x90c00010
 8006da4:	20000000 	.word	0x20000000
 8006da8:	053e2d63 	.word	0x053e2d63
 8006dac:	c7520000 	.word	0xc7520000
 8006db0:	50000100 	.word	0x50000100
 8006db4:	cb840000 	.word	0xcb840000

08006db8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7ff f95d 	bl	8006084 <LL_ADC_IsEnabled>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d14d      	bne.n	8006e6c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689a      	ldr	r2, [r3, #8]
 8006dd6:	4b28      	ldr	r3, [pc, #160]	; (8006e78 <ADC_Enable+0xc0>)
 8006dd8:	4013      	ands	r3, r2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00d      	beq.n	8006dfa <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de2:	f043 0210 	orr.w	r2, r3, #16
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dee:	f043 0201 	orr.w	r2, r3, #1
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e039      	b.n	8006e6e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7ff f92c 	bl	800605c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006e04:	f7fe ff40 	bl	8005c88 <HAL_GetTick>
 8006e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006e0a:	e028      	b.n	8006e5e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7ff f937 	bl	8006084 <LL_ADC_IsEnabled>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d104      	bne.n	8006e26 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff f91b 	bl	800605c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006e26:	f7fe ff2f 	bl	8005c88 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d914      	bls.n	8006e5e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d00d      	beq.n	8006e5e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e46:	f043 0210 	orr.w	r2, r3, #16
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e52:	f043 0201 	orr.w	r2, r3, #1
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e007      	b.n	8006e6e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d1cf      	bne.n	8006e0c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	8000003f 	.word	0x8000003f

08006e7c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e88:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e8e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d14b      	bne.n	8006f2e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0308 	and.w	r3, r3, #8
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d021      	beq.n	8006ef4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fe ffe7 	bl	8005e88 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d032      	beq.n	8006f26 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d12b      	bne.n	8006f26 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d11f      	bne.n	8006f26 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eea:	f043 0201 	orr.w	r2, r3, #1
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ef2:	e018      	b.n	8006f26 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f003 0302 	and.w	r3, r3, #2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d111      	bne.n	8006f26 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d105      	bne.n	8006f26 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f1e:	f043 0201 	orr.w	r2, r3, #1
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f7ff fb38 	bl	800659c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006f2c:	e00e      	b.n	8006f4c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f32:	f003 0310 	and.w	r3, r3, #16
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f7ff fb42 	bl	80065c4 <HAL_ADC_ErrorCallback>
}
 8006f40:	e004      	b.n	8006f4c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	4798      	blx	r3
}
 8006f4c:	bf00      	nop
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f60:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f7ff fb24 	bl	80065b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f68:	bf00      	nop
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f8e:	f043 0204 	orr.w	r2, r3, #4
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f7ff fb14 	bl	80065c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f9c:	bf00      	nop
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <LL_ADC_IsEnabled>:
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d101      	bne.n	8006fbc <LL_ADC_IsEnabled+0x18>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e000      	b.n	8006fbe <LL_ADC_IsEnabled+0x1a>
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <LL_ADC_REG_IsConversionOngoing>:
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f003 0304 	and.w	r3, r3, #4
 8006fda:	2b04      	cmp	r3, #4
 8006fdc:	d101      	bne.n	8006fe2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e000      	b.n	8006fe4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006ff0:	b590      	push	{r4, r7, lr}
 8006ff2:	b0a1      	sub	sp, #132	; 0x84
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007006:	2b01      	cmp	r3, #1
 8007008:	d101      	bne.n	800700e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800700a:	2302      	movs	r3, #2
 800700c:	e08b      	b.n	8007126 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8007016:	2300      	movs	r3, #0
 8007018:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800701a:	2300      	movs	r3, #0
 800701c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007026:	d102      	bne.n	800702e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007028:	4b41      	ldr	r3, [pc, #260]	; (8007130 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800702a:	60bb      	str	r3, [r7, #8]
 800702c:	e001      	b.n	8007032 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800702e:	2300      	movs	r3, #0
 8007030:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10b      	bne.n	8007050 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800703c:	f043 0220 	orr.w	r2, r3, #32
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e06a      	b.n	8007126 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	4618      	mov	r0, r3
 8007054:	f7ff ffb9 	bl	8006fca <LL_ADC_REG_IsConversionOngoing>
 8007058:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4618      	mov	r0, r3
 8007060:	f7ff ffb3 	bl	8006fca <LL_ADC_REG_IsConversionOngoing>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d14c      	bne.n	8007104 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800706a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800706c:	2b00      	cmp	r3, #0
 800706e:	d149      	bne.n	8007104 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007070:	4b30      	ldr	r3, [pc, #192]	; (8007134 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8007072:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d028      	beq.n	80070ce <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800707c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	6859      	ldr	r1, [r3, #4]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800708e:	035b      	lsls	r3, r3, #13
 8007090:	430b      	orrs	r3, r1
 8007092:	431a      	orrs	r2, r3
 8007094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007096:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007098:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800709c:	f7ff ff82 	bl	8006fa4 <LL_ADC_IsEnabled>
 80070a0:	4604      	mov	r4, r0
 80070a2:	4823      	ldr	r0, [pc, #140]	; (8007130 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80070a4:	f7ff ff7e 	bl	8006fa4 <LL_ADC_IsEnabled>
 80070a8:	4603      	mov	r3, r0
 80070aa:	4323      	orrs	r3, r4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d133      	bne.n	8007118 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80070b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80070b8:	f023 030f 	bic.w	r3, r3, #15
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	6811      	ldr	r1, [r2, #0]
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	6892      	ldr	r2, [r2, #8]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	431a      	orrs	r2, r3
 80070c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070ca:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80070cc:	e024      	b.n	8007118 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80070ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070d8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80070da:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80070de:	f7ff ff61 	bl	8006fa4 <LL_ADC_IsEnabled>
 80070e2:	4604      	mov	r4, r0
 80070e4:	4812      	ldr	r0, [pc, #72]	; (8007130 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80070e6:	f7ff ff5d 	bl	8006fa4 <LL_ADC_IsEnabled>
 80070ea:	4603      	mov	r3, r0
 80070ec:	4323      	orrs	r3, r4
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d112      	bne.n	8007118 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80070f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80070fa:	f023 030f 	bic.w	r3, r3, #15
 80070fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007100:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007102:	e009      	b.n	8007118 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007108:	f043 0220 	orr.w	r2, r3, #32
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007116:	e000      	b.n	800711a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007118:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007122:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007126:	4618      	mov	r0, r3
 8007128:	3784      	adds	r7, #132	; 0x84
 800712a:	46bd      	mov	sp, r7
 800712c:	bd90      	pop	{r4, r7, pc}
 800712e:	bf00      	nop
 8007130:	50000100 	.word	0x50000100
 8007134:	50000300 	.word	0x50000300

08007138 <__NVIC_SetPriorityGrouping>:
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007148:	4b0c      	ldr	r3, [pc, #48]	; (800717c <__NVIC_SetPriorityGrouping+0x44>)
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007154:	4013      	ands	r3, r2
 8007156:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800716a:	4a04      	ldr	r2, [pc, #16]	; (800717c <__NVIC_SetPriorityGrouping+0x44>)
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	60d3      	str	r3, [r2, #12]
}
 8007170:	bf00      	nop
 8007172:	3714      	adds	r7, #20
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	e000ed00 	.word	0xe000ed00

08007180 <__NVIC_GetPriorityGrouping>:
{
 8007180:	b480      	push	{r7}
 8007182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007184:	4b04      	ldr	r3, [pc, #16]	; (8007198 <__NVIC_GetPriorityGrouping+0x18>)
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	0a1b      	lsrs	r3, r3, #8
 800718a:	f003 0307 	and.w	r3, r3, #7
}
 800718e:	4618      	mov	r0, r3
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	e000ed00 	.word	0xe000ed00

0800719c <__NVIC_EnableIRQ>:
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	4603      	mov	r3, r0
 80071a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	db0b      	blt.n	80071c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071ae:	79fb      	ldrb	r3, [r7, #7]
 80071b0:	f003 021f 	and.w	r2, r3, #31
 80071b4:	4907      	ldr	r1, [pc, #28]	; (80071d4 <__NVIC_EnableIRQ+0x38>)
 80071b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ba:	095b      	lsrs	r3, r3, #5
 80071bc:	2001      	movs	r0, #1
 80071be:	fa00 f202 	lsl.w	r2, r0, r2
 80071c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80071c6:	bf00      	nop
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	e000e100 	.word	0xe000e100

080071d8 <__NVIC_SetPriority>:
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	4603      	mov	r3, r0
 80071e0:	6039      	str	r1, [r7, #0]
 80071e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	db0a      	blt.n	8007202 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	490c      	ldr	r1, [pc, #48]	; (8007224 <__NVIC_SetPriority+0x4c>)
 80071f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071f6:	0112      	lsls	r2, r2, #4
 80071f8:	b2d2      	uxtb	r2, r2
 80071fa:	440b      	add	r3, r1
 80071fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007200:	e00a      	b.n	8007218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	b2da      	uxtb	r2, r3
 8007206:	4908      	ldr	r1, [pc, #32]	; (8007228 <__NVIC_SetPriority+0x50>)
 8007208:	79fb      	ldrb	r3, [r7, #7]
 800720a:	f003 030f 	and.w	r3, r3, #15
 800720e:	3b04      	subs	r3, #4
 8007210:	0112      	lsls	r2, r2, #4
 8007212:	b2d2      	uxtb	r2, r2
 8007214:	440b      	add	r3, r1
 8007216:	761a      	strb	r2, [r3, #24]
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	e000e100 	.word	0xe000e100
 8007228:	e000ed00 	.word	0xe000ed00

0800722c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800722c:	b480      	push	{r7}
 800722e:	b089      	sub	sp, #36	; 0x24
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f003 0307 	and.w	r3, r3, #7
 800723e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	f1c3 0307 	rsb	r3, r3, #7
 8007246:	2b04      	cmp	r3, #4
 8007248:	bf28      	it	cs
 800724a:	2304      	movcs	r3, #4
 800724c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	3304      	adds	r3, #4
 8007252:	2b06      	cmp	r3, #6
 8007254:	d902      	bls.n	800725c <NVIC_EncodePriority+0x30>
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	3b03      	subs	r3, #3
 800725a:	e000      	b.n	800725e <NVIC_EncodePriority+0x32>
 800725c:	2300      	movs	r3, #0
 800725e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007260:	f04f 32ff 	mov.w	r2, #4294967295
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	fa02 f303 	lsl.w	r3, r2, r3
 800726a:	43da      	mvns	r2, r3
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	401a      	ands	r2, r3
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007274:	f04f 31ff 	mov.w	r1, #4294967295
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	fa01 f303 	lsl.w	r3, r1, r3
 800727e:	43d9      	mvns	r1, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007284:	4313      	orrs	r3, r2
         );
}
 8007286:	4618      	mov	r0, r3
 8007288:	3724      	adds	r7, #36	; 0x24
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
	...

08007294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	3b01      	subs	r3, #1
 80072a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072a4:	d301      	bcc.n	80072aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80072a6:	2301      	movs	r3, #1
 80072a8:	e00f      	b.n	80072ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072aa:	4a0a      	ldr	r2, [pc, #40]	; (80072d4 <SysTick_Config+0x40>)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3b01      	subs	r3, #1
 80072b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80072b2:	210f      	movs	r1, #15
 80072b4:	f04f 30ff 	mov.w	r0, #4294967295
 80072b8:	f7ff ff8e 	bl	80071d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072bc:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <SysTick_Config+0x40>)
 80072be:	2200      	movs	r2, #0
 80072c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072c2:	4b04      	ldr	r3, [pc, #16]	; (80072d4 <SysTick_Config+0x40>)
 80072c4:	2207      	movs	r2, #7
 80072c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	e000e010 	.word	0xe000e010

080072d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f7ff ff29 	bl	8007138 <__NVIC_SetPriorityGrouping>
}
 80072e6:	bf00      	nop
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b086      	sub	sp, #24
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	4603      	mov	r3, r0
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	607a      	str	r2, [r7, #4]
 80072fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80072fc:	f7ff ff40 	bl	8007180 <__NVIC_GetPriorityGrouping>
 8007300:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	68b9      	ldr	r1, [r7, #8]
 8007306:	6978      	ldr	r0, [r7, #20]
 8007308:	f7ff ff90 	bl	800722c <NVIC_EncodePriority>
 800730c:	4602      	mov	r2, r0
 800730e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007312:	4611      	mov	r1, r2
 8007314:	4618      	mov	r0, r3
 8007316:	f7ff ff5f 	bl	80071d8 <__NVIC_SetPriority>
}
 800731a:	bf00      	nop
 800731c:	3718      	adds	r7, #24
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b082      	sub	sp, #8
 8007326:	af00      	add	r7, sp, #0
 8007328:	4603      	mov	r3, r0
 800732a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800732c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff ff33 	bl	800719c <__NVIC_EnableIRQ>
}
 8007336:	bf00      	nop
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b082      	sub	sp, #8
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7ff ffa4 	bl	8007294 <SysTick_Config>
 800734c:	4603      	mov	r3, r0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
	...

08007358 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e08d      	b.n	8007486 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	4b47      	ldr	r3, [pc, #284]	; (8007490 <HAL_DMA_Init+0x138>)
 8007372:	429a      	cmp	r2, r3
 8007374:	d80f      	bhi.n	8007396 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	4b45      	ldr	r3, [pc, #276]	; (8007494 <HAL_DMA_Init+0x13c>)
 800737e:	4413      	add	r3, r2
 8007380:	4a45      	ldr	r2, [pc, #276]	; (8007498 <HAL_DMA_Init+0x140>)
 8007382:	fba2 2303 	umull	r2, r3, r2, r3
 8007386:	091b      	lsrs	r3, r3, #4
 8007388:	009a      	lsls	r2, r3, #2
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a42      	ldr	r2, [pc, #264]	; (800749c <HAL_DMA_Init+0x144>)
 8007392:	641a      	str	r2, [r3, #64]	; 0x40
 8007394:	e00e      	b.n	80073b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	4b40      	ldr	r3, [pc, #256]	; (80074a0 <HAL_DMA_Init+0x148>)
 800739e:	4413      	add	r3, r2
 80073a0:	4a3d      	ldr	r2, [pc, #244]	; (8007498 <HAL_DMA_Init+0x140>)
 80073a2:	fba2 2303 	umull	r2, r3, r2, r3
 80073a6:	091b      	lsrs	r3, r3, #4
 80073a8:	009a      	lsls	r2, r3, #2
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a3c      	ldr	r2, [pc, #240]	; (80074a4 <HAL_DMA_Init+0x14c>)
 80073b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2202      	movs	r2, #2
 80073b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80073ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80073d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fa76 	bl	80078f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007414:	d102      	bne.n	800741c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685a      	ldr	r2, [r3, #4]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007424:	b2d2      	uxtb	r2, r2
 8007426:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007430:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d010      	beq.n	800745c <HAL_DMA_Init+0x104>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	2b04      	cmp	r3, #4
 8007440:	d80c      	bhi.n	800745c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fa96 	bl	8007974 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744c:	2200      	movs	r2, #0
 800744e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007458:	605a      	str	r2, [r3, #4]
 800745a:	e008      	b.n	800746e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	40020407 	.word	0x40020407
 8007494:	bffdfff8 	.word	0xbffdfff8
 8007498:	cccccccd 	.word	0xcccccccd
 800749c:	40020000 	.word	0x40020000
 80074a0:	bffdfbf8 	.word	0xbffdfbf8
 80074a4:	40020400 	.word	0x40020400

080074a8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
 80074b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d101      	bne.n	80074c8 <HAL_DMA_Start_IT+0x20>
 80074c4:	2302      	movs	r3, #2
 80074c6:	e066      	b.n	8007596 <HAL_DMA_Start_IT+0xee>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d155      	bne.n	8007588 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0201 	bic.w	r2, r2, #1
 80074f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	68b9      	ldr	r1, [r7, #8]
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f000 f9bb 	bl	800787c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750a:	2b00      	cmp	r3, #0
 800750c:	d008      	beq.n	8007520 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f042 020e 	orr.w	r2, r2, #14
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	e00f      	b.n	8007540 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 0204 	bic.w	r2, r2, #4
 800752e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f042 020a 	orr.w	r2, r2, #10
 800753e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d007      	beq.n	800755e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800755c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007562:	2b00      	cmp	r3, #0
 8007564:	d007      	beq.n	8007576 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007574:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f042 0201 	orr.w	r2, r2, #1
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	e005      	b.n	8007594 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007590:	2302      	movs	r3, #2
 8007592:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007594:	7dfb      	ldrb	r3, [r7, #23]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800759e:	b480      	push	{r7}
 80075a0:	b085      	sub	sp, #20
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d005      	beq.n	80075c2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2204      	movs	r2, #4
 80075ba:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	73fb      	strb	r3, [r7, #15]
 80075c0:	e037      	b.n	8007632 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 020e 	bic.w	r2, r2, #14
 80075d0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075e0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f022 0201 	bic.w	r2, r2, #1
 80075f0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f6:	f003 021f 	and.w	r2, r3, #31
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fe:	2101      	movs	r1, #1
 8007600:	fa01 f202 	lsl.w	r2, r1, r2
 8007604:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800760e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00c      	beq.n	8007632 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007622:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007626:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007630:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8007642:	7bfb      	ldrb	r3, [r7, #15]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007658:	2300      	movs	r3, #0
 800765a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b02      	cmp	r3, #2
 8007666:	d00d      	beq.n	8007684 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2204      	movs	r2, #4
 800766c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	73fb      	strb	r3, [r7, #15]
 8007682:	e047      	b.n	8007714 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f022 020e 	bic.w	r2, r2, #14
 8007692:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f022 0201 	bic.w	r2, r2, #1
 80076a2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b8:	f003 021f 	and.w	r2, r3, #31
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c0:	2101      	movs	r1, #1
 80076c2:	fa01 f202 	lsl.w	r2, r1, r2
 80076c6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80076d0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00c      	beq.n	80076f4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80076f2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	4798      	blx	r3
    }
  }
  return status;
 8007714:	7bfb      	ldrb	r3, [r7, #15]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800773a:	f003 031f 	and.w	r3, r3, #31
 800773e:	2204      	movs	r2, #4
 8007740:	409a      	lsls	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	4013      	ands	r3, r2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d026      	beq.n	8007798 <HAL_DMA_IRQHandler+0x7a>
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	f003 0304 	and.w	r3, r3, #4
 8007750:	2b00      	cmp	r3, #0
 8007752:	d021      	beq.n	8007798 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0320 	and.w	r3, r3, #32
 800775e:	2b00      	cmp	r3, #0
 8007760:	d107      	bne.n	8007772 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f022 0204 	bic.w	r2, r2, #4
 8007770:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007776:	f003 021f 	and.w	r2, r3, #31
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777e:	2104      	movs	r1, #4
 8007780:	fa01 f202 	lsl.w	r2, r1, r2
 8007784:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778a:	2b00      	cmp	r3, #0
 800778c:	d071      	beq.n	8007872 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007796:	e06c      	b.n	8007872 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779c:	f003 031f 	and.w	r3, r3, #31
 80077a0:	2202      	movs	r2, #2
 80077a2:	409a      	lsls	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	4013      	ands	r3, r2
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d02e      	beq.n	800780a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	f003 0302 	and.w	r3, r3, #2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d029      	beq.n	800780a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0320 	and.w	r3, r3, #32
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10b      	bne.n	80077dc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 020a 	bic.w	r2, r2, #10
 80077d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e0:	f003 021f 	and.w	r2, r3, #31
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e8:	2102      	movs	r1, #2
 80077ea:	fa01 f202 	lsl.w	r2, r1, r2
 80077ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d038      	beq.n	8007872 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007808:	e033      	b.n	8007872 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800780e:	f003 031f 	and.w	r3, r3, #31
 8007812:	2208      	movs	r2, #8
 8007814:	409a      	lsls	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	4013      	ands	r3, r2
 800781a:	2b00      	cmp	r3, #0
 800781c:	d02a      	beq.n	8007874 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	f003 0308 	and.w	r3, r3, #8
 8007824:	2b00      	cmp	r3, #0
 8007826:	d025      	beq.n	8007874 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 020e 	bic.w	r2, r2, #14
 8007836:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783c:	f003 021f 	and.w	r2, r3, #31
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007844:	2101      	movs	r1, #1
 8007846:	fa01 f202 	lsl.w	r2, r1, r2
 800784a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007866:	2b00      	cmp	r3, #0
 8007868:	d004      	beq.n	8007874 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007872:	bf00      	nop
 8007874:	bf00      	nop
}
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
 8007888:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007892:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007898:	2b00      	cmp	r3, #0
 800789a:	d004      	beq.n	80078a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80078a4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078aa:	f003 021f 	and.w	r2, r3, #31
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b2:	2101      	movs	r1, #1
 80078b4:	fa01 f202 	lsl.w	r2, r1, r2
 80078b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	2b10      	cmp	r3, #16
 80078c8:	d108      	bne.n	80078dc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80078da:	e007      	b.n	80078ec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	60da      	str	r2, [r3, #12]
}
 80078ec:	bf00      	nop
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	461a      	mov	r2, r3
 8007906:	4b16      	ldr	r3, [pc, #88]	; (8007960 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007908:	429a      	cmp	r2, r3
 800790a:	d802      	bhi.n	8007912 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800790c:	4b15      	ldr	r3, [pc, #84]	; (8007964 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800790e:	617b      	str	r3, [r7, #20]
 8007910:	e001      	b.n	8007916 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8007912:	4b15      	ldr	r3, [pc, #84]	; (8007968 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007914:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	b2db      	uxtb	r3, r3
 8007920:	3b08      	subs	r3, #8
 8007922:	4a12      	ldr	r2, [pc, #72]	; (800796c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007924:	fba2 2303 	umull	r2, r3, r2, r3
 8007928:	091b      	lsrs	r3, r3, #4
 800792a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007930:	089b      	lsrs	r3, r3, #2
 8007932:	009a      	lsls	r2, r3, #2
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	4413      	add	r3, r2
 8007938:	461a      	mov	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a0b      	ldr	r2, [pc, #44]	; (8007970 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007942:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f003 031f 	and.w	r3, r3, #31
 800794a:	2201      	movs	r2, #1
 800794c:	409a      	lsls	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007952:	bf00      	nop
 8007954:	371c      	adds	r7, #28
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	40020407 	.word	0x40020407
 8007964:	40020800 	.word	0x40020800
 8007968:	40020820 	.word	0x40020820
 800796c:	cccccccd 	.word	0xcccccccd
 8007970:	40020880 	.word	0x40020880

08007974 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	b2db      	uxtb	r3, r3
 8007982:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	4b0b      	ldr	r3, [pc, #44]	; (80079b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007988:	4413      	add	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	461a      	mov	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a08      	ldr	r2, [pc, #32]	; (80079b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007996:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	3b01      	subs	r3, #1
 800799c:	f003 031f 	and.w	r3, r3, #31
 80079a0:	2201      	movs	r2, #1
 80079a2:	409a      	lsls	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80079a8:	bf00      	nop
 80079aa:	3714      	adds	r7, #20
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr
 80079b4:	1000823f 	.word	0x1000823f
 80079b8:	40020940 	.word	0x40020940

080079bc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d101      	bne.n	80079ce <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e147      	b.n	8007c5e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d106      	bne.n	80079e8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7fa fab8 	bl	8001f58 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	699a      	ldr	r2, [r3, #24]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f022 0210 	bic.w	r2, r2, #16
 80079f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80079f8:	f7fe f946 	bl	8005c88 <HAL_GetTick>
 80079fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80079fe:	e012      	b.n	8007a26 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007a00:	f7fe f942 	bl	8005c88 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	2b0a      	cmp	r3, #10
 8007a0c:	d90b      	bls.n	8007a26 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a12:	f043 0201 	orr.w	r2, r3, #1
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2203      	movs	r2, #3
 8007a1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e11b      	b.n	8007c5e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	f003 0308 	and.w	r3, r3, #8
 8007a30:	2b08      	cmp	r3, #8
 8007a32:	d0e5      	beq.n	8007a00 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	699a      	ldr	r2, [r3, #24]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f042 0201 	orr.w	r2, r2, #1
 8007a42:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a44:	f7fe f920 	bl	8005c88 <HAL_GetTick>
 8007a48:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007a4a:	e012      	b.n	8007a72 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007a4c:	f7fe f91c 	bl	8005c88 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	2b0a      	cmp	r3, #10
 8007a58:	d90b      	bls.n	8007a72 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a5e:	f043 0201 	orr.w	r2, r3, #1
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2203      	movs	r2, #3
 8007a6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e0f5      	b.n	8007c5e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d0e5      	beq.n	8007a4c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	699a      	ldr	r2, [r3, #24]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f042 0202 	orr.w	r2, r2, #2
 8007a8e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a74      	ldr	r2, [pc, #464]	; (8007c68 <HAL_FDCAN_Init+0x2ac>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d103      	bne.n	8007aa2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007a9a:	4a74      	ldr	r2, [pc, #464]	; (8007c6c <HAL_FDCAN_Init+0x2b0>)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	7c1b      	ldrb	r3, [r3, #16]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d108      	bne.n	8007abc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	699a      	ldr	r2, [r3, #24]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ab8:	619a      	str	r2, [r3, #24]
 8007aba:	e007      	b.n	8007acc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	699a      	ldr	r2, [r3, #24]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aca:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	7c5b      	ldrb	r3, [r3, #17]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d108      	bne.n	8007ae6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	699a      	ldr	r2, [r3, #24]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ae2:	619a      	str	r2, [r3, #24]
 8007ae4:	e007      	b.n	8007af6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	699a      	ldr	r2, [r3, #24]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007af4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	7c9b      	ldrb	r3, [r3, #18]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d108      	bne.n	8007b10 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	699a      	ldr	r2, [r3, #24]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b0c:	619a      	str	r2, [r3, #24]
 8007b0e:	e007      	b.n	8007b20 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	699a      	ldr	r2, [r3, #24]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b1e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	689a      	ldr	r2, [r3, #8]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	699a      	ldr	r2, [r3, #24]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007b44:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	691a      	ldr	r2, [r3, #16]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 0210 	bic.w	r2, r2, #16
 8007b54:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d108      	bne.n	8007b70 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	699a      	ldr	r2, [r3, #24]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f042 0204 	orr.w	r2, r2, #4
 8007b6c:	619a      	str	r2, [r3, #24]
 8007b6e:	e02c      	b.n	8007bca <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d028      	beq.n	8007bca <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d01c      	beq.n	8007bba <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	699a      	ldr	r2, [r3, #24]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b8e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	691a      	ldr	r2, [r3, #16]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f042 0210 	orr.w	r2, r2, #16
 8007b9e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d110      	bne.n	8007bca <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	699a      	ldr	r2, [r3, #24]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f042 0220 	orr.w	r2, r2, #32
 8007bb6:	619a      	str	r2, [r3, #24]
 8007bb8:	e007      	b.n	8007bca <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	699a      	ldr	r2, [r3, #24]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f042 0220 	orr.w	r2, r2, #32
 8007bc8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007bda:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a1b      	ldr	r3, [r3, #32]
 8007be0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007be2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	3b01      	subs	r3, #1
 8007bec:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007bf2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007bf4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bfe:	d115      	bne.n	8007c2c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c04:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007c0e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c14:	3b01      	subs	r3, #1
 8007c16:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007c18:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c20:	3b01      	subs	r3, #1
 8007c22:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007c28:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007c2a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f9e6 	bl	8008014 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	40006400 	.word	0x40006400
 8007c6c:	40006500 	.word	0x40006500

08007c70 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c80:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007c82:	7dfb      	ldrb	r3, [r7, #23]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d002      	beq.n	8007c8e <HAL_FDCAN_ConfigFilter+0x1e>
 8007c88:	7dfb      	ldrb	r3, [r7, #23]
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d13d      	bne.n	8007d0a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d119      	bne.n	8007cca <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007ca2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8007caa:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4413      	add	r3, r2
 8007cc0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	601a      	str	r2, [r3, #0]
 8007cc8:	e01d      	b.n	8007d06 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	075a      	lsls	r2, r3, #29
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	079a      	lsls	r2, r3, #30
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	00db      	lsls	r3, r3, #3
 8007cf0:	4413      	add	r3, r2
 8007cf2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	e006      	b.n	8007d18 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d0e:	f043 0202 	orr.w	r2, r3, #2
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
  }
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	371c      	adds	r7, #28
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
 8007d30:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d116      	bne.n	8007d6c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d46:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	011a      	lsls	r2, r3, #4
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	431a      	orrs	r2, r3
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	431a      	orrs	r2, r3
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	431a      	orrs	r2, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	430a      	orrs	r2, r1
 8007d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	e006      	b.n	8007d7a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d70:	f043 0204 	orr.w	r2, r3, #4
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
  }
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d110      	bne.n	8007dbc <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	699a      	ldr	r2, [r3, #24]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f022 0201 	bic.w	r2, r2, #1
 8007db0:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8007db8:	2300      	movs	r3, #0
 8007dba:	e006      	b.n	8007dca <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dc0:	f043 0204 	orr.w	r2, r3, #4
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
  }
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b086      	sub	sp, #24
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	60f8      	str	r0, [r7, #12]
 8007dde:	60b9      	str	r1, [r7, #8]
 8007de0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d12c      	bne.n	8007e48 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d007      	beq.n	8007e0e <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e02:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e023      	b.n	8007e56 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007e16:	0c1b      	lsrs	r3, r3, #16
 8007e18:	f003 0303 	and.w	r3, r3, #3
 8007e1c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	68b9      	ldr	r1, [r7, #8]
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 f94b 	bl	80080c0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2101      	movs	r1, #1
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	fa01 f202 	lsl.w	r2, r1, r2
 8007e36:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	409a      	lsls	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	e006      	b.n	8007e56 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e4c:	f043 0208 	orr.w	r2, r3, #8
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
  }
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3718      	adds	r7, #24
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
	...

08007e60 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b08b      	sub	sp, #44	; 0x2c
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007e74:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8007e76:	7efb      	ldrb	r3, [r7, #27]
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	f040 80bc 	bne.w	8007ff6 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2b40      	cmp	r3, #64	; 0x40
 8007e82:	d121      	bne.n	8007ec8 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e8c:	f003 030f 	and.w	r3, r3, #15
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d107      	bne.n	8007ea4 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e0af      	b.n	8008004 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eac:	0a1b      	lsrs	r3, r3, #8
 8007eae:	f003 0303 	and.w	r3, r3, #3
 8007eb2:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007eb8:	69fa      	ldr	r2, [r7, #28]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	00db      	lsls	r3, r3, #3
 8007ebe:	4413      	add	r3, r2
 8007ec0:	00db      	lsls	r3, r3, #3
 8007ec2:	440b      	add	r3, r1
 8007ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ec6:	e020      	b.n	8007f0a <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ed0:	f003 030f 	and.w	r3, r3, #15
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d107      	bne.n	8007ee8 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007edc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e08d      	b.n	8008004 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ef0:	0a1b      	lsrs	r3, r3, #8
 8007ef2:	f003 0303 	and.w	r3, r3, #3
 8007ef6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007efc:	69fa      	ldr	r2, [r7, #28]
 8007efe:	4613      	mov	r3, r2
 8007f00:	00db      	lsls	r3, r3, #3
 8007f02:	4413      	add	r3, r2
 8007f04:	00db      	lsls	r3, r3, #3
 8007f06:	440b      	add	r3, r1
 8007f08:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d107      	bne.n	8007f2e <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	0c9b      	lsrs	r3, r3, #18
 8007f24:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	601a      	str	r2, [r3, #0]
 8007f2c:	e005      	b.n	8007f3a <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	3304      	adds	r3, #4
 8007f56:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8007f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	0e1b      	lsrs	r3, r3, #24
 8007f8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	0fda      	lsrs	r2, r3, #31
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007fa8:	2300      	movs	r3, #0
 8007faa:	623b      	str	r3, [r7, #32]
 8007fac:	e00a      	b.n	8007fc4 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	6a3b      	ldr	r3, [r7, #32]
 8007fb2:	441a      	add	r2, r3
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	440b      	add	r3, r1
 8007fba:	7812      	ldrb	r2, [r2, #0]
 8007fbc:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007fbe:	6a3b      	ldr	r3, [r7, #32]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	623b      	str	r3, [r7, #32]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	0c1b      	lsrs	r3, r3, #16
 8007fca:	4a11      	ldr	r2, [pc, #68]	; (8008010 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8007fcc:	5cd3      	ldrb	r3, [r2, r3]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d3eb      	bcc.n	8007fae <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2b40      	cmp	r3, #64	; 0x40
 8007fda:	d105      	bne.n	8007fe8 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	69fa      	ldr	r2, [r7, #28]
 8007fe2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007fe6:	e004      	b.n	8007ff2 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	69fa      	ldr	r2, [r7, #28]
 8007fee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	e006      	b.n	8008004 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ffa:	f043 0208 	orr.w	r2, r3, #8
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
  }
}
 8008004:	4618      	mov	r0, r3
 8008006:	372c      	adds	r7, #44	; 0x2c
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	0801351c 	.word	0x0801351c

08008014 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800801c:	4b27      	ldr	r3, [pc, #156]	; (80080bc <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800801e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800802e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008036:	041a      	lsls	r2, r3, #16
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	430a      	orrs	r2, r1
 800803e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008054:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805c:	061a      	lsls	r2, r3, #24
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	430a      	orrs	r2, r1
 8008064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	60fb      	str	r3, [r7, #12]
 8008094:	e005      	b.n	80080a2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	3304      	adds	r3, #4
 80080a0:	60fb      	str	r3, [r7, #12]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d3f3      	bcc.n	8008096 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80080ae:	bf00      	nop
 80080b0:	bf00      	nop
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	4000a400 	.word	0x4000a400

080080c0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b089      	sub	sp, #36	; 0x24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
 80080cc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d10a      	bne.n	80080ec <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80080de:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80080e6:	4313      	orrs	r3, r2
 80080e8:	61fb      	str	r3, [r7, #28]
 80080ea:	e00a      	b.n	8008102 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80080f4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80080fa:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80080fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008100:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800810c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8008112:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8008118:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800811e:	4313      	orrs	r3, r2
 8008120:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	4613      	mov	r3, r2
 800812a:	00db      	lsls	r3, r3, #3
 800812c:	4413      	add	r3, r2
 800812e:	00db      	lsls	r3, r3, #3
 8008130:	440b      	add	r3, r1
 8008132:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	69fa      	ldr	r2, [r7, #28]
 8008138:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	3304      	adds	r3, #4
 800813e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	693a      	ldr	r2, [r7, #16]
 8008144:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	3304      	adds	r3, #4
 800814a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800814c:	2300      	movs	r3, #0
 800814e:	617b      	str	r3, [r7, #20]
 8008150:	e020      	b.n	8008194 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	3303      	adds	r3, #3
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	4413      	add	r3, r2
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	3302      	adds	r3, #2
 8008162:	6879      	ldr	r1, [r7, #4]
 8008164:	440b      	add	r3, r1
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800816a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	3301      	adds	r3, #1
 8008170:	6879      	ldr	r1, [r7, #4]
 8008172:	440b      	add	r3, r1
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008178:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800817a:	6879      	ldr	r1, [r7, #4]
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	440a      	add	r2, r1
 8008180:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008182:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	3304      	adds	r3, #4
 800818c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	3304      	adds	r3, #4
 8008192:	617b      	str	r3, [r7, #20]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	0c1b      	lsrs	r3, r3, #16
 800819a:	4a06      	ldr	r2, [pc, #24]	; (80081b4 <FDCAN_CopyMessageToRAM+0xf4>)
 800819c:	5cd3      	ldrb	r3, [r2, r3]
 800819e:	461a      	mov	r2, r3
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d3d5      	bcc.n	8008152 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80081a6:	bf00      	nop
 80081a8:	bf00      	nop
 80081aa:	3724      	adds	r7, #36	; 0x24
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr
 80081b4:	0801351c 	.word	0x0801351c

080081b8 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80081c6:	2300      	movs	r3, #0
 80081c8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80081ca:	4b24      	ldr	r3, [pc, #144]	; (800825c <HAL_FLASH_Program+0xa4>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d101      	bne.n	80081d6 <HAL_FLASH_Program+0x1e>
 80081d2:	2302      	movs	r3, #2
 80081d4:	e03e      	b.n	8008254 <HAL_FLASH_Program+0x9c>
 80081d6:	4b21      	ldr	r3, [pc, #132]	; (800825c <HAL_FLASH_Program+0xa4>)
 80081d8:	2201      	movs	r2, #1
 80081da:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80081dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80081e0:	f000 f888 	bl	80082f4 <FLASH_WaitForLastOperation>
 80081e4:	4603      	mov	r3, r0
 80081e6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80081e8:	7dfb      	ldrb	r3, [r7, #23]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d12e      	bne.n	800824c <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80081ee:	4b1b      	ldr	r3, [pc, #108]	; (800825c <HAL_FLASH_Program+0xa4>)
 80081f0:	2200      	movs	r2, #0
 80081f2:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d107      	bne.n	800820a <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80081fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081fe:	68b8      	ldr	r0, [r7, #8]
 8008200:	f000 f8cc 	bl	800839c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8008204:	2301      	movs	r3, #1
 8008206:	613b      	str	r3, [r7, #16]
 8008208:	e010      	b.n	800822c <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d002      	beq.n	8008216 <HAL_FLASH_Program+0x5e>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2b02      	cmp	r3, #2
 8008214:	d10a      	bne.n	800822c <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	4619      	mov	r1, r3
 800821a:	68b8      	ldr	r0, [r7, #8]
 800821c:	f000 f8e4 	bl	80083e8 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2b02      	cmp	r3, #2
 8008224:	d102      	bne.n	800822c <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8008226:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800822a:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800822c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008230:	f000 f860 	bl	80082f4 <FLASH_WaitForLastOperation>
 8008234:	4603      	mov	r3, r0
 8008236:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d006      	beq.n	800824c <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800823e:	4b08      	ldr	r3, [pc, #32]	; (8008260 <HAL_FLASH_Program+0xa8>)
 8008240:	695a      	ldr	r2, [r3, #20]
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	43db      	mvns	r3, r3
 8008246:	4906      	ldr	r1, [pc, #24]	; (8008260 <HAL_FLASH_Program+0xa8>)
 8008248:	4013      	ands	r3, r2
 800824a:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800824c:	4b03      	ldr	r3, [pc, #12]	; (800825c <HAL_FLASH_Program+0xa4>)
 800824e:	2200      	movs	r2, #0
 8008250:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8008252:	7dfb      	ldrb	r3, [r7, #23]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3718      	adds	r7, #24
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	2000000c 	.word	0x2000000c
 8008260:	40022000 	.word	0x40022000

08008264 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800826e:	4b0b      	ldr	r3, [pc, #44]	; (800829c <HAL_FLASH_Unlock+0x38>)
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	2b00      	cmp	r3, #0
 8008274:	da0b      	bge.n	800828e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008276:	4b09      	ldr	r3, [pc, #36]	; (800829c <HAL_FLASH_Unlock+0x38>)
 8008278:	4a09      	ldr	r2, [pc, #36]	; (80082a0 <HAL_FLASH_Unlock+0x3c>)
 800827a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800827c:	4b07      	ldr	r3, [pc, #28]	; (800829c <HAL_FLASH_Unlock+0x38>)
 800827e:	4a09      	ldr	r2, [pc, #36]	; (80082a4 <HAL_FLASH_Unlock+0x40>)
 8008280:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8008282:	4b06      	ldr	r3, [pc, #24]	; (800829c <HAL_FLASH_Unlock+0x38>)
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	2b00      	cmp	r3, #0
 8008288:	da01      	bge.n	800828e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800828e:	79fb      	ldrb	r3, [r7, #7]
}
 8008290:	4618      	mov	r0, r3
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	40022000 	.word	0x40022000
 80082a0:	45670123 	.word	0x45670123
 80082a4:	cdef89ab 	.word	0xcdef89ab

080082a8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80082b2:	4b09      	ldr	r3, [pc, #36]	; (80082d8 <HAL_FLASH_Lock+0x30>)
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	4a08      	ldr	r2, [pc, #32]	; (80082d8 <HAL_FLASH_Lock+0x30>)
 80082b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082bc:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80082be:	4b06      	ldr	r3, [pc, #24]	; (80082d8 <HAL_FLASH_Lock+0x30>)
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	da01      	bge.n	80082ca <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80082c6:	2300      	movs	r3, #0
 80082c8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80082ca:	79fb      	ldrb	r3, [r7, #7]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	40022000 	.word	0x40022000

080082dc <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 80082dc:	b480      	push	{r7}
 80082de:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 80082e0:	4b03      	ldr	r3, [pc, #12]	; (80082f0 <HAL_FLASH_GetError+0x14>)
 80082e2:	685b      	ldr	r3, [r3, #4]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	2000000c 	.word	0x2000000c

080082f4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80082fc:	f7fd fcc4 	bl	8005c88 <HAL_GetTick>
 8008300:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8008302:	e009      	b.n	8008318 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8008304:	f7fd fcc0 	bl	8005c88 <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	429a      	cmp	r2, r3
 8008312:	d201      	bcs.n	8008318 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e038      	b.n	800838a <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8008318:	4b1e      	ldr	r3, [pc, #120]	; (8008394 <FLASH_WaitForLastOperation+0xa0>)
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008324:	d0ee      	beq.n	8008304 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8008326:	4b1b      	ldr	r3, [pc, #108]	; (8008394 <FLASH_WaitForLastOperation+0xa0>)
 8008328:	691a      	ldr	r2, [r3, #16]
 800832a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800832e:	4013      	ands	r3, r2
 8008330:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d01e      	beq.n	8008376 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8008338:	4b17      	ldr	r3, [pc, #92]	; (8008398 <FLASH_WaitForLastOperation+0xa4>)
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	4313      	orrs	r3, r2
 8008340:	4a15      	ldr	r2, [pc, #84]	; (8008398 <FLASH_WaitForLastOperation+0xa4>)
 8008342:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800834a:	2b00      	cmp	r3, #0
 800834c:	d007      	beq.n	800835e <FLASH_WaitForLastOperation+0x6a>
 800834e:	4b11      	ldr	r3, [pc, #68]	; (8008394 <FLASH_WaitForLastOperation+0xa0>)
 8008350:	699a      	ldr	r2, [r3, #24]
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008358:	490e      	ldr	r1, [pc, #56]	; (8008394 <FLASH_WaitForLastOperation+0xa0>)
 800835a:	4313      	orrs	r3, r2
 800835c:	618b      	str	r3, [r1, #24]
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d004      	beq.n	8008372 <FLASH_WaitForLastOperation+0x7e>
 8008368:	4a0a      	ldr	r2, [pc, #40]	; (8008394 <FLASH_WaitForLastOperation+0xa0>)
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008370:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e009      	b.n	800838a <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8008376:	4b07      	ldr	r3, [pc, #28]	; (8008394 <FLASH_WaitForLastOperation+0xa0>)
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b01      	cmp	r3, #1
 8008380:	d102      	bne.n	8008388 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008382:	4b04      	ldr	r3, [pc, #16]	; (8008394 <FLASH_WaitForLastOperation+0xa0>)
 8008384:	2201      	movs	r2, #1
 8008386:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	40022000 	.word	0x40022000
 8008398:	2000000c 	.word	0x2000000c

0800839c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80083a8:	4b0e      	ldr	r3, [pc, #56]	; (80083e4 <FLASH_Program_DoubleWord+0x48>)
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	4a0d      	ldr	r2, [pc, #52]	; (80083e4 <FLASH_Program_DoubleWord+0x48>)
 80083ae:	f043 0301 	orr.w	r3, r3, #1
 80083b2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80083ba:	f3bf 8f6f 	isb	sy
}
 80083be:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80083c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083c4:	f04f 0200 	mov.w	r2, #0
 80083c8:	f04f 0300 	mov.w	r3, #0
 80083cc:	000a      	movs	r2, r1
 80083ce:	2300      	movs	r3, #0
 80083d0:	68f9      	ldr	r1, [r7, #12]
 80083d2:	3104      	adds	r1, #4
 80083d4:	4613      	mov	r3, r2
 80083d6:	600b      	str	r3, [r1, #0]
}
 80083d8:	bf00      	nop
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	40022000 	.word	0x40022000

080083e8 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b089      	sub	sp, #36	; 0x24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80083f2:	2340      	movs	r3, #64	; 0x40
 80083f4:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80083fe:	4b14      	ldr	r3, [pc, #80]	; (8008450 <FLASH_Program_Fast+0x68>)
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	4a13      	ldr	r2, [pc, #76]	; (8008450 <FLASH_Program_Fast+0x68>)
 8008404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008408:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800840a:	f3ef 8310 	mrs	r3, PRIMASK
 800840e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008410:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8008412:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008414:	b672      	cpsid	i
}
 8008416:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	3304      	adds	r3, #4
 8008424:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	3304      	adds	r3, #4
 800842a:	617b      	str	r3, [r7, #20]
    row_index--;
 800842c:	7ffb      	ldrb	r3, [r7, #31]
 800842e:	3b01      	subs	r3, #1
 8008430:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8008432:	7ffb      	ldrb	r3, [r7, #31]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1ef      	bne.n	8008418 <FLASH_Program_Fast+0x30>
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	f383 8810 	msr	PRIMASK, r3
}
 8008442:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8008444:	bf00      	nop
 8008446:	3724      	adds	r7, #36	; 0x24
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr
 8008450:	40022000 	.word	0x40022000

08008454 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800845e:	4b4a      	ldr	r3, [pc, #296]	; (8008588 <HAL_FLASHEx_Erase+0x134>)
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d101      	bne.n	800846a <HAL_FLASHEx_Erase+0x16>
 8008466:	2302      	movs	r3, #2
 8008468:	e089      	b.n	800857e <HAL_FLASHEx_Erase+0x12a>
 800846a:	4b47      	ldr	r3, [pc, #284]	; (8008588 <HAL_FLASHEx_Erase+0x134>)
 800846c:	2201      	movs	r2, #1
 800846e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008470:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008474:	f7ff ff3e 	bl	80082f4 <FLASH_WaitForLastOperation>
 8008478:	4603      	mov	r3, r0
 800847a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800847c:	7bfb      	ldrb	r3, [r7, #15]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d179      	bne.n	8008576 <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008482:	4b41      	ldr	r3, [pc, #260]	; (8008588 <HAL_FLASHEx_Erase+0x134>)
 8008484:	2200      	movs	r2, #0
 8008486:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8008488:	4b40      	ldr	r3, [pc, #256]	; (800858c <HAL_FLASHEx_Erase+0x138>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008490:	2b00      	cmp	r3, #0
 8008492:	d019      	beq.n	80084c8 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008494:	4b3d      	ldr	r3, [pc, #244]	; (800858c <HAL_FLASHEx_Erase+0x138>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a3c      	ldr	r2, [pc, #240]	; (800858c <HAL_FLASHEx_Erase+0x138>)
 800849a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800849e:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80084a0:	4b3a      	ldr	r3, [pc, #232]	; (800858c <HAL_FLASHEx_Erase+0x138>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d009      	beq.n	80084c0 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80084ac:	4b37      	ldr	r3, [pc, #220]	; (800858c <HAL_FLASHEx_Erase+0x138>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a36      	ldr	r2, [pc, #216]	; (800858c <HAL_FLASHEx_Erase+0x138>)
 80084b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084b6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80084b8:	4b33      	ldr	r3, [pc, #204]	; (8008588 <HAL_FLASHEx_Erase+0x134>)
 80084ba:	2203      	movs	r2, #3
 80084bc:	771a      	strb	r2, [r3, #28]
 80084be:	e016      	b.n	80084ee <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80084c0:	4b31      	ldr	r3, [pc, #196]	; (8008588 <HAL_FLASHEx_Erase+0x134>)
 80084c2:	2201      	movs	r2, #1
 80084c4:	771a      	strb	r2, [r3, #28]
 80084c6:	e012      	b.n	80084ee <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80084c8:	4b30      	ldr	r3, [pc, #192]	; (800858c <HAL_FLASHEx_Erase+0x138>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d009      	beq.n	80084e8 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80084d4:	4b2d      	ldr	r3, [pc, #180]	; (800858c <HAL_FLASHEx_Erase+0x138>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a2c      	ldr	r2, [pc, #176]	; (800858c <HAL_FLASHEx_Erase+0x138>)
 80084da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084de:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80084e0:	4b29      	ldr	r3, [pc, #164]	; (8008588 <HAL_FLASHEx_Erase+0x134>)
 80084e2:	2202      	movs	r2, #2
 80084e4:	771a      	strb	r2, [r3, #28]
 80084e6:	e002      	b.n	80084ee <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80084e8:	4b27      	ldr	r3, [pc, #156]	; (8008588 <HAL_FLASHEx_Erase+0x134>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d111      	bne.n	800851a <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 f848 	bl	8008590 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008504:	f7ff fef6 	bl	80082f4 <FLASH_WaitForLastOperation>
 8008508:	4603      	mov	r3, r0
 800850a:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800850c:	4b1f      	ldr	r3, [pc, #124]	; (800858c <HAL_FLASHEx_Erase+0x138>)
 800850e:	695b      	ldr	r3, [r3, #20]
 8008510:	4a1e      	ldr	r2, [pc, #120]	; (800858c <HAL_FLASHEx_Erase+0x138>)
 8008512:	f023 0304 	bic.w	r3, r3, #4
 8008516:	6153      	str	r3, [r2, #20]
 8008518:	e02b      	b.n	8008572 <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	f04f 32ff 	mov.w	r2, #4294967295
 8008520:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	60bb      	str	r3, [r7, #8]
 8008528:	e01b      	b.n	8008562 <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	4619      	mov	r1, r3
 8008530:	68b8      	ldr	r0, [r7, #8]
 8008532:	f000 f84b 	bl	80085cc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008536:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800853a:	f7ff fedb 	bl	80082f4 <FLASH_WaitForLastOperation>
 800853e:	4603      	mov	r3, r0
 8008540:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8008542:	4b12      	ldr	r3, [pc, #72]	; (800858c <HAL_FLASHEx_Erase+0x138>)
 8008544:	695b      	ldr	r3, [r3, #20]
 8008546:	4a11      	ldr	r2, [pc, #68]	; (800858c <HAL_FLASHEx_Erase+0x138>)
 8008548:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 800854c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800854e:	7bfb      	ldrb	r3, [r7, #15]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d003      	beq.n	800855c <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	601a      	str	r2, [r3, #0]
          break;
 800855a:	e00a      	b.n	8008572 <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	3301      	adds	r3, #1
 8008560:	60bb      	str	r3, [r7, #8]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	689a      	ldr	r2, [r3, #8]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	4413      	add	r3, r2
 800856c:	68ba      	ldr	r2, [r7, #8]
 800856e:	429a      	cmp	r2, r3
 8008570:	d3db      	bcc.n	800852a <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8008572:	f000 f84f 	bl	8008614 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008576:	4b04      	ldr	r3, [pc, #16]	; (8008588 <HAL_FLASHEx_Erase+0x134>)
 8008578:	2200      	movs	r2, #0
 800857a:	701a      	strb	r2, [r3, #0]

  return status;
 800857c:	7bfb      	ldrb	r3, [r7, #15]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	2000000c 	.word	0x2000000c
 800858c:	40022000 	.word	0x40022000

08008590 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d005      	beq.n	80085ae <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80085a2:	4b09      	ldr	r3, [pc, #36]	; (80085c8 <FLASH_MassErase+0x38>)
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	4a08      	ldr	r2, [pc, #32]	; (80085c8 <FLASH_MassErase+0x38>)
 80085a8:	f043 0304 	orr.w	r3, r3, #4
 80085ac:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80085ae:	4b06      	ldr	r3, [pc, #24]	; (80085c8 <FLASH_MassErase+0x38>)
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	4a05      	ldr	r2, [pc, #20]	; (80085c8 <FLASH_MassErase+0x38>)
 80085b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085b8:	6153      	str	r3, [r2, #20]
}
 80085ba:	bf00      	nop
 80085bc:	370c      	adds	r7, #12
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	40022000 	.word	0x40022000

080085cc <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80085d6:	4b0e      	ldr	r3, [pc, #56]	; (8008610 <FLASH_PageErase+0x44>)
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	00db      	lsls	r3, r3, #3
 80085e2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80085e6:	490a      	ldr	r1, [pc, #40]	; (8008610 <FLASH_PageErase+0x44>)
 80085e8:	4313      	orrs	r3, r2
 80085ea:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80085ec:	4b08      	ldr	r3, [pc, #32]	; (8008610 <FLASH_PageErase+0x44>)
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	4a07      	ldr	r2, [pc, #28]	; (8008610 <FLASH_PageErase+0x44>)
 80085f2:	f043 0302 	orr.w	r3, r3, #2
 80085f6:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80085f8:	4b05      	ldr	r3, [pc, #20]	; (8008610 <FLASH_PageErase+0x44>)
 80085fa:	695b      	ldr	r3, [r3, #20]
 80085fc:	4a04      	ldr	r2, [pc, #16]	; (8008610 <FLASH_PageErase+0x44>)
 80085fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008602:	6153      	str	r3, [r2, #20]
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	40022000 	.word	0x40022000

08008614 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800861a:	4b1e      	ldr	r3, [pc, #120]	; (8008694 <FLASH_FlushCaches+0x80>)
 800861c:	7f1b      	ldrb	r3, [r3, #28]
 800861e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8008620:	79fb      	ldrb	r3, [r7, #7]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d002      	beq.n	800862c <FLASH_FlushCaches+0x18>
 8008626:	79fb      	ldrb	r3, [r7, #7]
 8008628:	2b03      	cmp	r3, #3
 800862a:	d111      	bne.n	8008650 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800862c:	4b1a      	ldr	r3, [pc, #104]	; (8008698 <FLASH_FlushCaches+0x84>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a19      	ldr	r2, [pc, #100]	; (8008698 <FLASH_FlushCaches+0x84>)
 8008632:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008636:	6013      	str	r3, [r2, #0]
 8008638:	4b17      	ldr	r3, [pc, #92]	; (8008698 <FLASH_FlushCaches+0x84>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a16      	ldr	r2, [pc, #88]	; (8008698 <FLASH_FlushCaches+0x84>)
 800863e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008642:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008644:	4b14      	ldr	r3, [pc, #80]	; (8008698 <FLASH_FlushCaches+0x84>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a13      	ldr	r2, [pc, #76]	; (8008698 <FLASH_FlushCaches+0x84>)
 800864a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800864e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8008650:	79fb      	ldrb	r3, [r7, #7]
 8008652:	2b02      	cmp	r3, #2
 8008654:	d002      	beq.n	800865c <FLASH_FlushCaches+0x48>
 8008656:	79fb      	ldrb	r3, [r7, #7]
 8008658:	2b03      	cmp	r3, #3
 800865a:	d111      	bne.n	8008680 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800865c:	4b0e      	ldr	r3, [pc, #56]	; (8008698 <FLASH_FlushCaches+0x84>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a0d      	ldr	r2, [pc, #52]	; (8008698 <FLASH_FlushCaches+0x84>)
 8008662:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008666:	6013      	str	r3, [r2, #0]
 8008668:	4b0b      	ldr	r3, [pc, #44]	; (8008698 <FLASH_FlushCaches+0x84>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a0a      	ldr	r2, [pc, #40]	; (8008698 <FLASH_FlushCaches+0x84>)
 800866e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008672:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008674:	4b08      	ldr	r3, [pc, #32]	; (8008698 <FLASH_FlushCaches+0x84>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a07      	ldr	r2, [pc, #28]	; (8008698 <FLASH_FlushCaches+0x84>)
 800867a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800867e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008680:	4b04      	ldr	r3, [pc, #16]	; (8008694 <FLASH_FlushCaches+0x80>)
 8008682:	2200      	movs	r2, #0
 8008684:	771a      	strb	r2, [r3, #28]
}
 8008686:	bf00      	nop
 8008688:	370c      	adds	r7, #12
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	2000000c 	.word	0x2000000c
 8008698:	40022000 	.word	0x40022000

0800869c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800869c:	b480      	push	{r7}
 800869e:	b087      	sub	sp, #28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80086aa:	e15a      	b.n	8008962 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	2101      	movs	r1, #1
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	fa01 f303 	lsl.w	r3, r1, r3
 80086b8:	4013      	ands	r3, r2
 80086ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f000 814c 	beq.w	800895c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d00b      	beq.n	80086e4 <HAL_GPIO_Init+0x48>
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d007      	beq.n	80086e4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80086d8:	2b11      	cmp	r3, #17
 80086da:	d003      	beq.n	80086e4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	2b12      	cmp	r3, #18
 80086e2:	d130      	bne.n	8008746 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	005b      	lsls	r3, r3, #1
 80086ee:	2203      	movs	r2, #3
 80086f0:	fa02 f303 	lsl.w	r3, r2, r3
 80086f4:	43db      	mvns	r3, r3
 80086f6:	693a      	ldr	r2, [r7, #16]
 80086f8:	4013      	ands	r3, r2
 80086fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	68da      	ldr	r2, [r3, #12]
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	005b      	lsls	r3, r3, #1
 8008704:	fa02 f303 	lsl.w	r3, r2, r3
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	4313      	orrs	r3, r2
 800870c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800871a:	2201      	movs	r2, #1
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	fa02 f303 	lsl.w	r3, r2, r3
 8008722:	43db      	mvns	r3, r3
 8008724:	693a      	ldr	r2, [r7, #16]
 8008726:	4013      	ands	r3, r2
 8008728:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	091b      	lsrs	r3, r3, #4
 8008730:	f003 0201 	and.w	r2, r3, #1
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	fa02 f303 	lsl.w	r3, r2, r3
 800873a:	693a      	ldr	r2, [r7, #16]
 800873c:	4313      	orrs	r3, r2
 800873e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	693a      	ldr	r2, [r7, #16]
 8008744:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	005b      	lsls	r3, r3, #1
 8008750:	2203      	movs	r2, #3
 8008752:	fa02 f303 	lsl.w	r3, r2, r3
 8008756:	43db      	mvns	r3, r3
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	4013      	ands	r3, r2
 800875c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	689a      	ldr	r2, [r3, #8]
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	fa02 f303 	lsl.w	r3, r2, r3
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	4313      	orrs	r3, r2
 800876e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	2b02      	cmp	r3, #2
 800877c:	d003      	beq.n	8008786 <HAL_GPIO_Init+0xea>
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	2b12      	cmp	r3, #18
 8008784:	d123      	bne.n	80087ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	08da      	lsrs	r2, r3, #3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	3208      	adds	r2, #8
 800878e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008792:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	f003 0307 	and.w	r3, r3, #7
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	220f      	movs	r2, #15
 800879e:	fa02 f303 	lsl.w	r3, r2, r3
 80087a2:	43db      	mvns	r3, r3
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	4013      	ands	r3, r2
 80087a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	691a      	ldr	r2, [r3, #16]
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	f003 0307 	and.w	r3, r3, #7
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	fa02 f303 	lsl.w	r3, r2, r3
 80087ba:	693a      	ldr	r2, [r7, #16]
 80087bc:	4313      	orrs	r3, r2
 80087be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	08da      	lsrs	r2, r3, #3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	3208      	adds	r2, #8
 80087c8:	6939      	ldr	r1, [r7, #16]
 80087ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	2203      	movs	r2, #3
 80087da:	fa02 f303 	lsl.w	r3, r2, r3
 80087de:	43db      	mvns	r3, r3
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	4013      	ands	r3, r2
 80087e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f003 0203 	and.w	r2, r3, #3
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	fa02 f303 	lsl.w	r3, r2, r3
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800880a:	2b00      	cmp	r3, #0
 800880c:	f000 80a6 	beq.w	800895c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008810:	4b5b      	ldr	r3, [pc, #364]	; (8008980 <HAL_GPIO_Init+0x2e4>)
 8008812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008814:	4a5a      	ldr	r2, [pc, #360]	; (8008980 <HAL_GPIO_Init+0x2e4>)
 8008816:	f043 0301 	orr.w	r3, r3, #1
 800881a:	6613      	str	r3, [r2, #96]	; 0x60
 800881c:	4b58      	ldr	r3, [pc, #352]	; (8008980 <HAL_GPIO_Init+0x2e4>)
 800881e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	60bb      	str	r3, [r7, #8]
 8008826:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008828:	4a56      	ldr	r2, [pc, #344]	; (8008984 <HAL_GPIO_Init+0x2e8>)
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	089b      	lsrs	r3, r3, #2
 800882e:	3302      	adds	r3, #2
 8008830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008834:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	f003 0303 	and.w	r3, r3, #3
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	220f      	movs	r2, #15
 8008840:	fa02 f303 	lsl.w	r3, r2, r3
 8008844:	43db      	mvns	r3, r3
 8008846:	693a      	ldr	r2, [r7, #16]
 8008848:	4013      	ands	r3, r2
 800884a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008852:	d01f      	beq.n	8008894 <HAL_GPIO_Init+0x1f8>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a4c      	ldr	r2, [pc, #304]	; (8008988 <HAL_GPIO_Init+0x2ec>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d019      	beq.n	8008890 <HAL_GPIO_Init+0x1f4>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a4b      	ldr	r2, [pc, #300]	; (800898c <HAL_GPIO_Init+0x2f0>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d013      	beq.n	800888c <HAL_GPIO_Init+0x1f0>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a4a      	ldr	r2, [pc, #296]	; (8008990 <HAL_GPIO_Init+0x2f4>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d00d      	beq.n	8008888 <HAL_GPIO_Init+0x1ec>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a49      	ldr	r2, [pc, #292]	; (8008994 <HAL_GPIO_Init+0x2f8>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d007      	beq.n	8008884 <HAL_GPIO_Init+0x1e8>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a48      	ldr	r2, [pc, #288]	; (8008998 <HAL_GPIO_Init+0x2fc>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d101      	bne.n	8008880 <HAL_GPIO_Init+0x1e4>
 800887c:	2305      	movs	r3, #5
 800887e:	e00a      	b.n	8008896 <HAL_GPIO_Init+0x1fa>
 8008880:	2306      	movs	r3, #6
 8008882:	e008      	b.n	8008896 <HAL_GPIO_Init+0x1fa>
 8008884:	2304      	movs	r3, #4
 8008886:	e006      	b.n	8008896 <HAL_GPIO_Init+0x1fa>
 8008888:	2303      	movs	r3, #3
 800888a:	e004      	b.n	8008896 <HAL_GPIO_Init+0x1fa>
 800888c:	2302      	movs	r3, #2
 800888e:	e002      	b.n	8008896 <HAL_GPIO_Init+0x1fa>
 8008890:	2301      	movs	r3, #1
 8008892:	e000      	b.n	8008896 <HAL_GPIO_Init+0x1fa>
 8008894:	2300      	movs	r3, #0
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	f002 0203 	and.w	r2, r2, #3
 800889c:	0092      	lsls	r2, r2, #2
 800889e:	4093      	lsls	r3, r2
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80088a6:	4937      	ldr	r1, [pc, #220]	; (8008984 <HAL_GPIO_Init+0x2e8>)
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	089b      	lsrs	r3, r3, #2
 80088ac:	3302      	adds	r3, #2
 80088ae:	693a      	ldr	r2, [r7, #16]
 80088b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80088b4:	4b39      	ldr	r3, [pc, #228]	; (800899c <HAL_GPIO_Init+0x300>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	43db      	mvns	r3, r3
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	4013      	ands	r3, r2
 80088c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d003      	beq.n	80088d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80088d8:	4a30      	ldr	r2, [pc, #192]	; (800899c <HAL_GPIO_Init+0x300>)
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80088de:	4b2f      	ldr	r3, [pc, #188]	; (800899c <HAL_GPIO_Init+0x300>)
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	43db      	mvns	r3, r3
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	4013      	ands	r3, r2
 80088ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d003      	beq.n	8008902 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	4313      	orrs	r3, r2
 8008900:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008902:	4a26      	ldr	r2, [pc, #152]	; (800899c <HAL_GPIO_Init+0x300>)
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008908:	4b24      	ldr	r3, [pc, #144]	; (800899c <HAL_GPIO_Init+0x300>)
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	43db      	mvns	r3, r3
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	4013      	ands	r3, r2
 8008916:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d003      	beq.n	800892c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	4313      	orrs	r3, r2
 800892a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800892c:	4a1b      	ldr	r2, [pc, #108]	; (800899c <HAL_GPIO_Init+0x300>)
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008932:	4b1a      	ldr	r3, [pc, #104]	; (800899c <HAL_GPIO_Init+0x300>)
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	43db      	mvns	r3, r3
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	4013      	ands	r3, r2
 8008940:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d003      	beq.n	8008956 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4313      	orrs	r3, r2
 8008954:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008956:	4a11      	ldr	r2, [pc, #68]	; (800899c <HAL_GPIO_Init+0x300>)
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	3301      	adds	r3, #1
 8008960:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	fa22 f303 	lsr.w	r3, r2, r3
 800896c:	2b00      	cmp	r3, #0
 800896e:	f47f ae9d 	bne.w	80086ac <HAL_GPIO_Init+0x10>
  }
}
 8008972:	bf00      	nop
 8008974:	bf00      	nop
 8008976:	371c      	adds	r7, #28
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	40021000 	.word	0x40021000
 8008984:	40010000 	.word	0x40010000
 8008988:	48000400 	.word	0x48000400
 800898c:	48000800 	.word	0x48000800
 8008990:	48000c00 	.word	0x48000c00
 8008994:	48001000 	.word	0x48001000
 8008998:	48001400 	.word	0x48001400
 800899c:	40010400 	.word	0x40010400

080089a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	460b      	mov	r3, r1
 80089aa:	807b      	strh	r3, [r7, #2]
 80089ac:	4613      	mov	r3, r2
 80089ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80089b0:	787b      	ldrb	r3, [r7, #1]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d003      	beq.n	80089be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80089b6:	887a      	ldrh	r2, [r7, #2]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80089bc:	e002      	b.n	80089c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80089be:	887a      	ldrh	r2, [r7, #2]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d101      	bne.n	80089e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e081      	b.n	8008ae6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d106      	bne.n	80089fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7fb fb4e 	bl	8004098 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2224      	movs	r2, #36	; 0x24
 8008a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f022 0201 	bic.w	r2, r2, #1
 8008a12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008a20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	689a      	ldr	r2, [r3, #8]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d107      	bne.n	8008a4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	689a      	ldr	r2, [r3, #8]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a46:	609a      	str	r2, [r3, #8]
 8008a48:	e006      	b.n	8008a58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689a      	ldr	r2, [r3, #8]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008a56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d104      	bne.n	8008a6a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	6812      	ldr	r2, [r2, #0]
 8008a74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008a78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68da      	ldr	r2, [r3, #12]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	691a      	ldr	r2, [r3, #16]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	ea42 0103 	orr.w	r1, r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	021a      	lsls	r2, r3, #8
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	430a      	orrs	r2, r1
 8008aa6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	69d9      	ldr	r1, [r3, #28]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a1a      	ldr	r2, [r3, #32]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f042 0201 	orr.w	r2, r2, #1
 8008ac6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
	...

08008af0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b088      	sub	sp, #32
 8008af4:	af02      	add	r7, sp, #8
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	607a      	str	r2, [r7, #4]
 8008afa:	461a      	mov	r2, r3
 8008afc:	460b      	mov	r3, r1
 8008afe:	817b      	strh	r3, [r7, #10]
 8008b00:	4613      	mov	r3, r2
 8008b02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b20      	cmp	r3, #32
 8008b0e:	f040 80db 	bne.w	8008cc8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d101      	bne.n	8008b20 <HAL_I2C_Master_Receive+0x30>
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	e0d4      	b.n	8008cca <HAL_I2C_Master_Receive+0x1da>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008b28:	f7fd f8ae 	bl	8005c88 <HAL_GetTick>
 8008b2c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	9300      	str	r3, [sp, #0]
 8008b32:	2319      	movs	r3, #25
 8008b34:	2201      	movs	r2, #1
 8008b36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f000 fbc8 	bl	80092d0 <I2C_WaitOnFlagUntilTimeout>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d001      	beq.n	8008b4a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e0bf      	b.n	8008cca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2222      	movs	r2, #34	; 0x22
 8008b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2210      	movs	r2, #16
 8008b56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	893a      	ldrh	r2, [r7, #8]
 8008b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	2bff      	cmp	r3, #255	; 0xff
 8008b7a:	d90e      	bls.n	8008b9a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	22ff      	movs	r2, #255	; 0xff
 8008b80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b86:	b2da      	uxtb	r2, r3
 8008b88:	8979      	ldrh	r1, [r7, #10]
 8008b8a:	4b52      	ldr	r3, [pc, #328]	; (8008cd4 <HAL_I2C_Master_Receive+0x1e4>)
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f000 fd2a 	bl	80095ec <I2C_TransferConfig>
 8008b98:	e06d      	b.n	8008c76 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ba8:	b2da      	uxtb	r2, r3
 8008baa:	8979      	ldrh	r1, [r7, #10]
 8008bac:	4b49      	ldr	r3, [pc, #292]	; (8008cd4 <HAL_I2C_Master_Receive+0x1e4>)
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f000 fd19 	bl	80095ec <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8008bba:	e05c      	b.n	8008c76 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bbc:	697a      	ldr	r2, [r7, #20]
 8008bbe:	6a39      	ldr	r1, [r7, #32]
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f000 fc41 	bl	8009448 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d001      	beq.n	8008bd0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e07c      	b.n	8008cca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bda:	b2d2      	uxtb	r2, r2
 8008bdc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be2:	1c5a      	adds	r2, r3, #1
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bec:	3b01      	subs	r3, #1
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d034      	beq.n	8008c76 <HAL_I2C_Master_Receive+0x186>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d130      	bne.n	8008c76 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	2180      	movs	r1, #128	; 0x80
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f000 fb56 	bl	80092d0 <I2C_WaitOnFlagUntilTimeout>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e04d      	b.n	8008cca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	2bff      	cmp	r3, #255	; 0xff
 8008c36:	d90e      	bls.n	8008c56 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	22ff      	movs	r2, #255	; 0xff
 8008c3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	8979      	ldrh	r1, [r7, #10]
 8008c46:	2300      	movs	r3, #0
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f000 fccc 	bl	80095ec <I2C_TransferConfig>
 8008c54:	e00f      	b.n	8008c76 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	8979      	ldrh	r1, [r7, #10]
 8008c68:	2300      	movs	r3, #0
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f000 fcbb 	bl	80095ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d19d      	bne.n	8008bbc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	6a39      	ldr	r1, [r7, #32]
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f000 fba3 	bl	80093d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d001      	beq.n	8008c94 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e01a      	b.n	8008cca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2220      	movs	r2, #32
 8008c9a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6859      	ldr	r1, [r3, #4]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	4b0c      	ldr	r3, [pc, #48]	; (8008cd8 <HAL_I2C_Master_Receive+0x1e8>)
 8008ca8:	400b      	ands	r3, r1
 8008caa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2220      	movs	r2, #32
 8008cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	e000      	b.n	8008cca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008cc8:	2302      	movs	r3, #2
  }
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3718      	adds	r7, #24
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	80002400 	.word	0x80002400
 8008cd8:	fe00e800 	.word	0xfe00e800

08008cdc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b088      	sub	sp, #32
 8008ce0:	af02      	add	r7, sp, #8
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	4608      	mov	r0, r1
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	461a      	mov	r2, r3
 8008cea:	4603      	mov	r3, r0
 8008cec:	817b      	strh	r3, [r7, #10]
 8008cee:	460b      	mov	r3, r1
 8008cf0:	813b      	strh	r3, [r7, #8]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b20      	cmp	r3, #32
 8008d00:	f040 80f9 	bne.w	8008ef6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d04:	6a3b      	ldr	r3, [r7, #32]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d002      	beq.n	8008d10 <HAL_I2C_Mem_Write+0x34>
 8008d0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d105      	bne.n	8008d1c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d16:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e0ed      	b.n	8008ef8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d101      	bne.n	8008d2a <HAL_I2C_Mem_Write+0x4e>
 8008d26:	2302      	movs	r3, #2
 8008d28:	e0e6      	b.n	8008ef8 <HAL_I2C_Mem_Write+0x21c>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008d32:	f7fc ffa9 	bl	8005c88 <HAL_GetTick>
 8008d36:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	2319      	movs	r3, #25
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f000 fac3 	bl	80092d0 <I2C_WaitOnFlagUntilTimeout>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d001      	beq.n	8008d54 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e0d1      	b.n	8008ef8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2221      	movs	r2, #33	; 0x21
 8008d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2240      	movs	r2, #64	; 0x40
 8008d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6a3a      	ldr	r2, [r7, #32]
 8008d6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008d74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008d7c:	88f8      	ldrh	r0, [r7, #6]
 8008d7e:	893a      	ldrh	r2, [r7, #8]
 8008d80:	8979      	ldrh	r1, [r7, #10]
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	9301      	str	r3, [sp, #4]
 8008d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f000 f9d3 	bl	8009138 <I2C_RequestMemoryWrite>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d005      	beq.n	8008da4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	e0a9      	b.n	8008ef8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	2bff      	cmp	r3, #255	; 0xff
 8008dac:	d90e      	bls.n	8008dcc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	22ff      	movs	r2, #255	; 0xff
 8008db2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008db8:	b2da      	uxtb	r2, r3
 8008dba:	8979      	ldrh	r1, [r7, #10]
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f000 fc11 	bl	80095ec <I2C_TransferConfig>
 8008dca:	e00f      	b.n	8008dec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	8979      	ldrh	r1, [r7, #10]
 8008dde:	2300      	movs	r3, #0
 8008de0:	9300      	str	r3, [sp, #0]
 8008de2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f000 fc00 	bl	80095ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008dec:	697a      	ldr	r2, [r7, #20]
 8008dee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f000 faad 	bl	8009350 <I2C_WaitOnTXISFlagUntilTimeout>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e07b      	b.n	8008ef8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e04:	781a      	ldrb	r2, [r3, #0]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e10:	1c5a      	adds	r2, r3, #1
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d034      	beq.n	8008ea4 <HAL_I2C_Mem_Write+0x1c8>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d130      	bne.n	8008ea4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	9300      	str	r3, [sp, #0]
 8008e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e48:	2200      	movs	r2, #0
 8008e4a:	2180      	movs	r1, #128	; 0x80
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f000 fa3f 	bl	80092d0 <I2C_WaitOnFlagUntilTimeout>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d001      	beq.n	8008e5c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e04d      	b.n	8008ef8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	2bff      	cmp	r3, #255	; 0xff
 8008e64:	d90e      	bls.n	8008e84 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	22ff      	movs	r2, #255	; 0xff
 8008e6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e70:	b2da      	uxtb	r2, r3
 8008e72:	8979      	ldrh	r1, [r7, #10]
 8008e74:	2300      	movs	r3, #0
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f000 fbb5 	bl	80095ec <I2C_TransferConfig>
 8008e82:	e00f      	b.n	8008ea4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e92:	b2da      	uxtb	r2, r3
 8008e94:	8979      	ldrh	r1, [r7, #10]
 8008e96:	2300      	movs	r3, #0
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f000 fba4 	bl	80095ec <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d19e      	bne.n	8008dec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f000 fa8c 	bl	80093d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d001      	beq.n	8008ec2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e01a      	b.n	8008ef8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2220      	movs	r2, #32
 8008ec8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	6859      	ldr	r1, [r3, #4]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	4b0a      	ldr	r3, [pc, #40]	; (8008f00 <HAL_I2C_Mem_Write+0x224>)
 8008ed6:	400b      	ands	r3, r1
 8008ed8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2220      	movs	r2, #32
 8008ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	e000      	b.n	8008ef8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008ef6:	2302      	movs	r3, #2
  }
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	fe00e800 	.word	0xfe00e800

08008f04 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b088      	sub	sp, #32
 8008f08:	af02      	add	r7, sp, #8
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	4608      	mov	r0, r1
 8008f0e:	4611      	mov	r1, r2
 8008f10:	461a      	mov	r2, r3
 8008f12:	4603      	mov	r3, r0
 8008f14:	817b      	strh	r3, [r7, #10]
 8008f16:	460b      	mov	r3, r1
 8008f18:	813b      	strh	r3, [r7, #8]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b20      	cmp	r3, #32
 8008f28:	f040 80fd 	bne.w	8009126 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f2c:	6a3b      	ldr	r3, [r7, #32]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d002      	beq.n	8008f38 <HAL_I2C_Mem_Read+0x34>
 8008f32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d105      	bne.n	8008f44 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f3e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e0f1      	b.n	8009128 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d101      	bne.n	8008f52 <HAL_I2C_Mem_Read+0x4e>
 8008f4e:	2302      	movs	r3, #2
 8008f50:	e0ea      	b.n	8009128 <HAL_I2C_Mem_Read+0x224>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2201      	movs	r2, #1
 8008f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008f5a:	f7fc fe95 	bl	8005c88 <HAL_GetTick>
 8008f5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	2319      	movs	r3, #25
 8008f66:	2201      	movs	r2, #1
 8008f68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f000 f9af 	bl	80092d0 <I2C_WaitOnFlagUntilTimeout>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d001      	beq.n	8008f7c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e0d5      	b.n	8009128 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2222      	movs	r2, #34	; 0x22
 8008f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2240      	movs	r2, #64	; 0x40
 8008f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6a3a      	ldr	r2, [r7, #32]
 8008f96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008fa4:	88f8      	ldrh	r0, [r7, #6]
 8008fa6:	893a      	ldrh	r2, [r7, #8]
 8008fa8:	8979      	ldrh	r1, [r7, #10]
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	9301      	str	r3, [sp, #4]
 8008fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f000 f913 	bl	80091e0 <I2C_RequestMemoryRead>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d005      	beq.n	8008fcc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e0ad      	b.n	8009128 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	2bff      	cmp	r3, #255	; 0xff
 8008fd4:	d90e      	bls.n	8008ff4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	22ff      	movs	r2, #255	; 0xff
 8008fda:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	8979      	ldrh	r1, [r7, #10]
 8008fe4:	4b52      	ldr	r3, [pc, #328]	; (8009130 <HAL_I2C_Mem_Read+0x22c>)
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f000 fafd 	bl	80095ec <I2C_TransferConfig>
 8008ff2:	e00f      	b.n	8009014 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009002:	b2da      	uxtb	r2, r3
 8009004:	8979      	ldrh	r1, [r7, #10]
 8009006:	4b4a      	ldr	r3, [pc, #296]	; (8009130 <HAL_I2C_Mem_Read+0x22c>)
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f000 faec 	bl	80095ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901a:	2200      	movs	r2, #0
 800901c:	2104      	movs	r1, #4
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f000 f956 	bl	80092d0 <I2C_WaitOnFlagUntilTimeout>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d001      	beq.n	800902e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	e07c      	b.n	8009128 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009038:	b2d2      	uxtb	r2, r2
 800903a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009040:	1c5a      	adds	r2, r3, #1
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800904a:	3b01      	subs	r3, #1
 800904c:	b29a      	uxth	r2, r3
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009056:	b29b      	uxth	r3, r3
 8009058:	3b01      	subs	r3, #1
 800905a:	b29a      	uxth	r2, r3
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009064:	b29b      	uxth	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d034      	beq.n	80090d4 <HAL_I2C_Mem_Read+0x1d0>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800906e:	2b00      	cmp	r3, #0
 8009070:	d130      	bne.n	80090d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009078:	2200      	movs	r2, #0
 800907a:	2180      	movs	r1, #128	; 0x80
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f000 f927 	bl	80092d0 <I2C_WaitOnFlagUntilTimeout>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d001      	beq.n	800908c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	e04d      	b.n	8009128 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009090:	b29b      	uxth	r3, r3
 8009092:	2bff      	cmp	r3, #255	; 0xff
 8009094:	d90e      	bls.n	80090b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	22ff      	movs	r2, #255	; 0xff
 800909a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	8979      	ldrh	r1, [r7, #10]
 80090a4:	2300      	movs	r3, #0
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 fa9d 	bl	80095ec <I2C_TransferConfig>
 80090b2:	e00f      	b.n	80090d4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b8:	b29a      	uxth	r2, r3
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	8979      	ldrh	r1, [r7, #10]
 80090c6:	2300      	movs	r3, #0
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f000 fa8c 	bl	80095ec <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090d8:	b29b      	uxth	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d19a      	bne.n	8009014 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090de:	697a      	ldr	r2, [r7, #20]
 80090e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f000 f974 	bl	80093d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e01a      	b.n	8009128 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2220      	movs	r2, #32
 80090f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	6859      	ldr	r1, [r3, #4]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	4b0b      	ldr	r3, [pc, #44]	; (8009134 <HAL_I2C_Mem_Read+0x230>)
 8009106:	400b      	ands	r3, r1
 8009108:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2220      	movs	r2, #32
 800910e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009122:	2300      	movs	r3, #0
 8009124:	e000      	b.n	8009128 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009126:	2302      	movs	r3, #2
  }
}
 8009128:	4618      	mov	r0, r3
 800912a:	3718      	adds	r7, #24
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	80002400 	.word	0x80002400
 8009134:	fe00e800 	.word	0xfe00e800

08009138 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b086      	sub	sp, #24
 800913c:	af02      	add	r7, sp, #8
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	4608      	mov	r0, r1
 8009142:	4611      	mov	r1, r2
 8009144:	461a      	mov	r2, r3
 8009146:	4603      	mov	r3, r0
 8009148:	817b      	strh	r3, [r7, #10]
 800914a:	460b      	mov	r3, r1
 800914c:	813b      	strh	r3, [r7, #8]
 800914e:	4613      	mov	r3, r2
 8009150:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009152:	88fb      	ldrh	r3, [r7, #6]
 8009154:	b2da      	uxtb	r2, r3
 8009156:	8979      	ldrh	r1, [r7, #10]
 8009158:	4b20      	ldr	r3, [pc, #128]	; (80091dc <I2C_RequestMemoryWrite+0xa4>)
 800915a:	9300      	str	r3, [sp, #0]
 800915c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	f000 fa43 	bl	80095ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009166:	69fa      	ldr	r2, [r7, #28]
 8009168:	69b9      	ldr	r1, [r7, #24]
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f000 f8f0 	bl	8009350 <I2C_WaitOnTXISFlagUntilTimeout>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d001      	beq.n	800917a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e02c      	b.n	80091d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800917a:	88fb      	ldrh	r3, [r7, #6]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d105      	bne.n	800918c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009180:	893b      	ldrh	r3, [r7, #8]
 8009182:	b2da      	uxtb	r2, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	629a      	str	r2, [r3, #40]	; 0x28
 800918a:	e015      	b.n	80091b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800918c:	893b      	ldrh	r3, [r7, #8]
 800918e:	0a1b      	lsrs	r3, r3, #8
 8009190:	b29b      	uxth	r3, r3
 8009192:	b2da      	uxtb	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800919a:	69fa      	ldr	r2, [r7, #28]
 800919c:	69b9      	ldr	r1, [r7, #24]
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f000 f8d6 	bl	8009350 <I2C_WaitOnTXISFlagUntilTimeout>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d001      	beq.n	80091ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e012      	b.n	80091d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80091ae:	893b      	ldrh	r3, [r7, #8]
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	2200      	movs	r2, #0
 80091c0:	2180      	movs	r1, #128	; 0x80
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f000 f884 	bl	80092d0 <I2C_WaitOnFlagUntilTimeout>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d001      	beq.n	80091d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e000      	b.n	80091d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	80002000 	.word	0x80002000

080091e0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b086      	sub	sp, #24
 80091e4:	af02      	add	r7, sp, #8
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	4608      	mov	r0, r1
 80091ea:	4611      	mov	r1, r2
 80091ec:	461a      	mov	r2, r3
 80091ee:	4603      	mov	r3, r0
 80091f0:	817b      	strh	r3, [r7, #10]
 80091f2:	460b      	mov	r3, r1
 80091f4:	813b      	strh	r3, [r7, #8]
 80091f6:	4613      	mov	r3, r2
 80091f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80091fa:	88fb      	ldrh	r3, [r7, #6]
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	8979      	ldrh	r1, [r7, #10]
 8009200:	4b20      	ldr	r3, [pc, #128]	; (8009284 <I2C_RequestMemoryRead+0xa4>)
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	2300      	movs	r3, #0
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f000 f9f0 	bl	80095ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800920c:	69fa      	ldr	r2, [r7, #28]
 800920e:	69b9      	ldr	r1, [r7, #24]
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f000 f89d 	bl	8009350 <I2C_WaitOnTXISFlagUntilTimeout>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d001      	beq.n	8009220 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e02c      	b.n	800927a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009220:	88fb      	ldrh	r3, [r7, #6]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d105      	bne.n	8009232 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009226:	893b      	ldrh	r3, [r7, #8]
 8009228:	b2da      	uxtb	r2, r3
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	629a      	str	r2, [r3, #40]	; 0x28
 8009230:	e015      	b.n	800925e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009232:	893b      	ldrh	r3, [r7, #8]
 8009234:	0a1b      	lsrs	r3, r3, #8
 8009236:	b29b      	uxth	r3, r3
 8009238:	b2da      	uxtb	r2, r3
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009240:	69fa      	ldr	r2, [r7, #28]
 8009242:	69b9      	ldr	r1, [r7, #24]
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 f883 	bl	8009350 <I2C_WaitOnTXISFlagUntilTimeout>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d001      	beq.n	8009254 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	e012      	b.n	800927a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009254:	893b      	ldrh	r3, [r7, #8]
 8009256:	b2da      	uxtb	r2, r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	2200      	movs	r2, #0
 8009266:	2140      	movs	r1, #64	; 0x40
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f000 f831 	bl	80092d0 <I2C_WaitOnFlagUntilTimeout>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d001      	beq.n	8009278 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	e000      	b.n	800927a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	80002000 	.word	0x80002000

08009288 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	699b      	ldr	r3, [r3, #24]
 8009296:	f003 0302 	and.w	r3, r3, #2
 800929a:	2b02      	cmp	r3, #2
 800929c:	d103      	bne.n	80092a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2200      	movs	r2, #0
 80092a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	699b      	ldr	r3, [r3, #24]
 80092ac:	f003 0301 	and.w	r3, r3, #1
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d007      	beq.n	80092c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	699a      	ldr	r2, [r3, #24]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f042 0201 	orr.w	r2, r2, #1
 80092c2:	619a      	str	r2, [r3, #24]
  }
}
 80092c4:	bf00      	nop
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	603b      	str	r3, [r7, #0]
 80092dc:	4613      	mov	r3, r2
 80092de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092e0:	e022      	b.n	8009328 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e8:	d01e      	beq.n	8009328 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092ea:	f7fc fccd 	bl	8005c88 <HAL_GetTick>
 80092ee:	4602      	mov	r2, r0
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	683a      	ldr	r2, [r7, #0]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d302      	bcc.n	8009300 <I2C_WaitOnFlagUntilTimeout+0x30>
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d113      	bne.n	8009328 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009304:	f043 0220 	orr.w	r2, r3, #32
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2220      	movs	r2, #32
 8009310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e00f      	b.n	8009348 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	699a      	ldr	r2, [r3, #24]
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	4013      	ands	r3, r2
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	429a      	cmp	r2, r3
 8009336:	bf0c      	ite	eq
 8009338:	2301      	moveq	r3, #1
 800933a:	2300      	movne	r3, #0
 800933c:	b2db      	uxtb	r3, r3
 800933e:	461a      	mov	r2, r3
 8009340:	79fb      	ldrb	r3, [r7, #7]
 8009342:	429a      	cmp	r2, r3
 8009344:	d0cd      	beq.n	80092e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800935c:	e02c      	b.n	80093b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	68b9      	ldr	r1, [r7, #8]
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f000 f8dc 	bl	8009520 <I2C_IsAcknowledgeFailed>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d001      	beq.n	8009372 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	e02a      	b.n	80093c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009378:	d01e      	beq.n	80093b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800937a:	f7fc fc85 	bl	8005c88 <HAL_GetTick>
 800937e:	4602      	mov	r2, r0
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	1ad3      	subs	r3, r2, r3
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	429a      	cmp	r2, r3
 8009388:	d302      	bcc.n	8009390 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d113      	bne.n	80093b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009394:	f043 0220 	orr.w	r2, r3, #32
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2220      	movs	r2, #32
 80093a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e007      	b.n	80093c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	699b      	ldr	r3, [r3, #24]
 80093be:	f003 0302 	and.w	r3, r3, #2
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d1cb      	bne.n	800935e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093dc:	e028      	b.n	8009430 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	68b9      	ldr	r1, [r7, #8]
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f000 f89c 	bl	8009520 <I2C_IsAcknowledgeFailed>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e026      	b.n	8009440 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093f2:	f7fc fc49 	bl	8005c88 <HAL_GetTick>
 80093f6:	4602      	mov	r2, r0
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d302      	bcc.n	8009408 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d113      	bne.n	8009430 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800940c:	f043 0220 	orr.w	r2, r3, #32
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2220      	movs	r2, #32
 8009418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2200      	movs	r2, #0
 8009428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	e007      	b.n	8009440 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	699b      	ldr	r3, [r3, #24]
 8009436:	f003 0320 	and.w	r3, r3, #32
 800943a:	2b20      	cmp	r3, #32
 800943c:	d1cf      	bne.n	80093de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009454:	e055      	b.n	8009502 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	68b9      	ldr	r1, [r7, #8]
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f000 f860 	bl	8009520 <I2C_IsAcknowledgeFailed>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e053      	b.n	8009512 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	699b      	ldr	r3, [r3, #24]
 8009470:	f003 0320 	and.w	r3, r3, #32
 8009474:	2b20      	cmp	r3, #32
 8009476:	d129      	bne.n	80094cc <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	f003 0304 	and.w	r3, r3, #4
 8009482:	2b04      	cmp	r3, #4
 8009484:	d105      	bne.n	8009492 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800948e:	2300      	movs	r3, #0
 8009490:	e03f      	b.n	8009512 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2220      	movs	r2, #32
 8009498:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	6859      	ldr	r1, [r3, #4]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	4b1d      	ldr	r3, [pc, #116]	; (800951c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80094a6:	400b      	ands	r3, r1
 80094a8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2220      	movs	r2, #32
 80094b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e022      	b.n	8009512 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094cc:	f7fc fbdc 	bl	8005c88 <HAL_GetTick>
 80094d0:	4602      	mov	r2, r0
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	1ad3      	subs	r3, r2, r3
 80094d6:	68ba      	ldr	r2, [r7, #8]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d302      	bcc.n	80094e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d10f      	bne.n	8009502 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e6:	f043 0220 	orr.w	r2, r3, #32
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2220      	movs	r2, #32
 80094f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	e007      	b.n	8009512 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	f003 0304 	and.w	r3, r3, #4
 800950c:	2b04      	cmp	r3, #4
 800950e:	d1a2      	bne.n	8009456 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	fe00e800 	.word	0xfe00e800

08009520 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	699b      	ldr	r3, [r3, #24]
 8009532:	f003 0310 	and.w	r3, r3, #16
 8009536:	2b10      	cmp	r3, #16
 8009538:	d151      	bne.n	80095de <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800953a:	e022      	b.n	8009582 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009542:	d01e      	beq.n	8009582 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009544:	f7fc fba0 	bl	8005c88 <HAL_GetTick>
 8009548:	4602      	mov	r2, r0
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	68ba      	ldr	r2, [r7, #8]
 8009550:	429a      	cmp	r2, r3
 8009552:	d302      	bcc.n	800955a <I2C_IsAcknowledgeFailed+0x3a>
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d113      	bne.n	8009582 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800955e:	f043 0220 	orr.w	r2, r3, #32
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2220      	movs	r2, #32
 800956a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2200      	movs	r2, #0
 800957a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	e02e      	b.n	80095e0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	f003 0320 	and.w	r3, r3, #32
 800958c:	2b20      	cmp	r3, #32
 800958e:	d1d5      	bne.n	800953c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2210      	movs	r2, #16
 8009596:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2220      	movs	r2, #32
 800959e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f7ff fe71 	bl	8009288 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	6859      	ldr	r1, [r3, #4]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	4b0d      	ldr	r3, [pc, #52]	; (80095e8 <I2C_IsAcknowledgeFailed+0xc8>)
 80095b2:	400b      	ands	r3, r1
 80095b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ba:	f043 0204 	orr.w	r2, r3, #4
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2220      	movs	r2, #32
 80095c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	e000      	b.n	80095e0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	fe00e800 	.word	0xfe00e800

080095ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	607b      	str	r3, [r7, #4]
 80095f6:	460b      	mov	r3, r1
 80095f8:	817b      	strh	r3, [r7, #10]
 80095fa:	4613      	mov	r3, r2
 80095fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	685a      	ldr	r2, [r3, #4]
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	0d5b      	lsrs	r3, r3, #21
 8009608:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800960c:	4b0d      	ldr	r3, [pc, #52]	; (8009644 <I2C_TransferConfig+0x58>)
 800960e:	430b      	orrs	r3, r1
 8009610:	43db      	mvns	r3, r3
 8009612:	ea02 0103 	and.w	r1, r2, r3
 8009616:	897b      	ldrh	r3, [r7, #10]
 8009618:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800961c:	7a7b      	ldrb	r3, [r7, #9]
 800961e:	041b      	lsls	r3, r3, #16
 8009620:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009624:	431a      	orrs	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	431a      	orrs	r2, r3
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	431a      	orrs	r2, r3
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	430a      	orrs	r2, r1
 8009634:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8009636:	bf00      	nop
 8009638:	3714      	adds	r7, #20
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	03ff63ff 	.word	0x03ff63ff

08009648 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009658:	b2db      	uxtb	r3, r3
 800965a:	2b20      	cmp	r3, #32
 800965c:	d138      	bne.n	80096d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009664:	2b01      	cmp	r3, #1
 8009666:	d101      	bne.n	800966c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009668:	2302      	movs	r3, #2
 800966a:	e032      	b.n	80096d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2224      	movs	r2, #36	; 0x24
 8009678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f022 0201 	bic.w	r2, r2, #1
 800968a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800969a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	6819      	ldr	r1, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	683a      	ldr	r2, [r7, #0]
 80096a8:	430a      	orrs	r2, r1
 80096aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f042 0201 	orr.w	r2, r2, #1
 80096ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2220      	movs	r2, #32
 80096c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80096cc:	2300      	movs	r3, #0
 80096ce:	e000      	b.n	80096d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80096d0:	2302      	movs	r3, #2
  }
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr

080096de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80096de:	b480      	push	{r7}
 80096e0:	b085      	sub	sp, #20
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b20      	cmp	r3, #32
 80096f2:	d139      	bne.n	8009768 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d101      	bne.n	8009702 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80096fe:	2302      	movs	r3, #2
 8009700:	e033      	b.n	800976a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2224      	movs	r2, #36	; 0x24
 800970e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f022 0201 	bic.w	r2, r2, #1
 8009720:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009730:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	021b      	lsls	r3, r3, #8
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	4313      	orrs	r3, r2
 800973a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f042 0201 	orr.w	r2, r2, #1
 8009752:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2220      	movs	r2, #32
 8009758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009764:	2300      	movs	r3, #0
 8009766:	e000      	b.n	800976a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009768:	2302      	movs	r3, #2
  }
}
 800976a:	4618      	mov	r0, r3
 800976c:	3714      	adds	r7, #20
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
	...

08009778 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009780:	2300      	movs	r3, #0
 8009782:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e0bb      	b.n	8009906 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009794:	b2db      	uxtb	r3, r3
 8009796:	2b05      	cmp	r3, #5
 8009798:	d101      	bne.n	800979e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e0b3      	b.n	8009906 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d101      	bne.n	80097ae <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	e0ab      	b.n	8009906 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097ae:	4b58      	ldr	r3, [pc, #352]	; (8009910 <HAL_OPAMP_Init+0x198>)
 80097b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097b2:	4a57      	ldr	r2, [pc, #348]	; (8009910 <HAL_OPAMP_Init+0x198>)
 80097b4:	f043 0301 	orr.w	r3, r3, #1
 80097b8:	6613      	str	r3, [r2, #96]	; 0x60
 80097ba:	4b55      	ldr	r3, [pc, #340]	; (8009910 <HAL_OPAMP_Init+0x198>)
 80097bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097be:	f003 0301 	and.w	r3, r3, #1
 80097c2:	60bb      	str	r3, [r7, #8]
 80097c4:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d103      	bne.n	80097da <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f7fb fa44 	bl	8004c68 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	2b40      	cmp	r3, #64	; 0x40
 80097e6:	d003      	beq.n	80097f0 <HAL_OPAMP_Init+0x78>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	2b60      	cmp	r3, #96	; 0x60
 80097ee:	d133      	bne.n	8009858 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f023 0110 	bic.w	r1, r3, #16
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	430a      	orrs	r2, r1
 8009804:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	4b41      	ldr	r3, [pc, #260]	; (8009914 <HAL_OPAMP_Init+0x19c>)
 800980e:	4013      	ands	r3, r2
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	6851      	ldr	r1, [r2, #4]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	6892      	ldr	r2, [r2, #8]
 8009818:	4311      	orrs	r1, r2
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	6912      	ldr	r2, [r2, #16]
 800981e:	430a      	orrs	r2, r1
 8009820:	6879      	ldr	r1, [r7, #4]
 8009822:	7d09      	ldrb	r1, [r1, #20]
 8009824:	2901      	cmp	r1, #1
 8009826:	d102      	bne.n	800982e <HAL_OPAMP_Init+0xb6>
 8009828:	f44f 7180 	mov.w	r1, #256	; 0x100
 800982c:	e000      	b.n	8009830 <HAL_OPAMP_Init+0xb8>
 800982e:	2100      	movs	r1, #0
 8009830:	4311      	orrs	r1, r2
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009836:	4311      	orrs	r1, r2
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800983c:	4311      	orrs	r1, r2
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009842:	04d2      	lsls	r2, r2, #19
 8009844:	4311      	orrs	r1, r2
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800984a:	0612      	lsls	r2, r2, #24
 800984c:	4311      	orrs	r1, r2
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	6812      	ldr	r2, [r2, #0]
 8009852:	430b      	orrs	r3, r1
 8009854:	6013      	str	r3, [r2, #0]
 8009856:	e035      	b.n	80098c4 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f023 0110 	bic.w	r1, r3, #16
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	430a      	orrs	r2, r1
 800986c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	4b27      	ldr	r3, [pc, #156]	; (8009914 <HAL_OPAMP_Init+0x19c>)
 8009876:	4013      	ands	r3, r2
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	6851      	ldr	r1, [r2, #4]
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	6892      	ldr	r2, [r2, #8]
 8009880:	4311      	orrs	r1, r2
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	68d2      	ldr	r2, [r2, #12]
 8009886:	4311      	orrs	r1, r2
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	6912      	ldr	r2, [r2, #16]
 800988c:	430a      	orrs	r2, r1
 800988e:	6879      	ldr	r1, [r7, #4]
 8009890:	7d09      	ldrb	r1, [r1, #20]
 8009892:	2901      	cmp	r1, #1
 8009894:	d102      	bne.n	800989c <HAL_OPAMP_Init+0x124>
 8009896:	f44f 7180 	mov.w	r1, #256	; 0x100
 800989a:	e000      	b.n	800989e <HAL_OPAMP_Init+0x126>
 800989c:	2100      	movs	r1, #0
 800989e:	4311      	orrs	r1, r2
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80098a4:	4311      	orrs	r1, r2
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80098aa:	4311      	orrs	r1, r2
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80098b0:	04d2      	lsls	r2, r2, #19
 80098b2:	4311      	orrs	r1, r2
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80098b8:	0612      	lsls	r2, r2, #24
 80098ba:	4311      	orrs	r1, r2
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	6812      	ldr	r2, [r2, #0]
 80098c0:	430b      	orrs	r3, r1
 80098c2:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	699b      	ldr	r3, [r3, #24]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	db10      	blt.n	80098f0 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	699b      	ldr	r3, [r3, #24]
 80098d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	699a      	ldr	r2, [r3, #24]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	69db      	ldr	r3, [r3, #28]
 80098e0:	431a      	orrs	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	431a      	orrs	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	430a      	orrs	r2, r1
 80098ee:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d103      	bne.n	8009904 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8009904:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	40021000 	.word	0x40021000
 8009914:	e0003e11 	.word	0xe0003e11

08009918 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009920:	2300      	movs	r3, #0
 8009922:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d102      	bne.n	8009930 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	73fb      	strb	r3, [r7, #15]
 800992e:	e01d      	b.n	800996c <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009936:	b2db      	uxtb	r3, r3
 8009938:	2b05      	cmp	r3, #5
 800993a:	d102      	bne.n	8009942 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	73fb      	strb	r3, [r7, #15]
 8009940:	e014      	b.n	800996c <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b01      	cmp	r3, #1
 800994c:	d10c      	bne.n	8009968 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f042 0201 	orr.w	r2, r2, #1
 800995c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2204      	movs	r2, #4
 8009962:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8009966:	e001      	b.n	800996c <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 800996c:	7bfb      	ldrb	r3, [r7, #15]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3714      	adds	r7, #20
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
	...

0800997c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d141      	bne.n	8009a0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800998a:	4b4b      	ldr	r3, [pc, #300]	; (8009ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009996:	d131      	bne.n	80099fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009998:	4b47      	ldr	r3, [pc, #284]	; (8009ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800999a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800999e:	4a46      	ldr	r2, [pc, #280]	; (8009ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80099a8:	4b43      	ldr	r3, [pc, #268]	; (8009ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80099b0:	4a41      	ldr	r2, [pc, #260]	; (8009ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80099b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80099b8:	4b40      	ldr	r3, [pc, #256]	; (8009abc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2232      	movs	r2, #50	; 0x32
 80099be:	fb02 f303 	mul.w	r3, r2, r3
 80099c2:	4a3f      	ldr	r2, [pc, #252]	; (8009ac0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80099c4:	fba2 2303 	umull	r2, r3, r2, r3
 80099c8:	0c9b      	lsrs	r3, r3, #18
 80099ca:	3301      	adds	r3, #1
 80099cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80099ce:	e002      	b.n	80099d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	3b01      	subs	r3, #1
 80099d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80099d6:	4b38      	ldr	r3, [pc, #224]	; (8009ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099e2:	d102      	bne.n	80099ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1f2      	bne.n	80099d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80099ea:	4b33      	ldr	r3, [pc, #204]	; (8009ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099ec:	695b      	ldr	r3, [r3, #20]
 80099ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099f6:	d158      	bne.n	8009aaa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80099f8:	2303      	movs	r3, #3
 80099fa:	e057      	b.n	8009aac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80099fc:	4b2e      	ldr	r3, [pc, #184]	; (8009ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a02:	4a2d      	ldr	r2, [pc, #180]	; (8009ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009a0c:	e04d      	b.n	8009aaa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a14:	d141      	bne.n	8009a9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009a16:	4b28      	ldr	r3, [pc, #160]	; (8009ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a22:	d131      	bne.n	8009a88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009a24:	4b24      	ldr	r3, [pc, #144]	; (8009ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a2a:	4a23      	ldr	r2, [pc, #140]	; (8009ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009a34:	4b20      	ldr	r3, [pc, #128]	; (8009ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009a3c:	4a1e      	ldr	r2, [pc, #120]	; (8009ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009a42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009a44:	4b1d      	ldr	r3, [pc, #116]	; (8009abc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2232      	movs	r2, #50	; 0x32
 8009a4a:	fb02 f303 	mul.w	r3, r2, r3
 8009a4e:	4a1c      	ldr	r2, [pc, #112]	; (8009ac0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009a50:	fba2 2303 	umull	r2, r3, r2, r3
 8009a54:	0c9b      	lsrs	r3, r3, #18
 8009a56:	3301      	adds	r3, #1
 8009a58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009a5a:	e002      	b.n	8009a62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009a62:	4b15      	ldr	r3, [pc, #84]	; (8009ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a6e:	d102      	bne.n	8009a76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1f2      	bne.n	8009a5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009a76:	4b10      	ldr	r3, [pc, #64]	; (8009ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a78:	695b      	ldr	r3, [r3, #20]
 8009a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a82:	d112      	bne.n	8009aaa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009a84:	2303      	movs	r3, #3
 8009a86:	e011      	b.n	8009aac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009a88:	4b0b      	ldr	r3, [pc, #44]	; (8009ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a8e:	4a0a      	ldr	r2, [pc, #40]	; (8009ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009a98:	e007      	b.n	8009aaa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009a9a:	4b07      	ldr	r3, [pc, #28]	; (8009ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009aa2:	4a05      	ldr	r2, [pc, #20]	; (8009ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009aa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009aa8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3714      	adds	r7, #20
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr
 8009ab8:	40007000 	.word	0x40007000
 8009abc:	20000000 	.word	0x20000000
 8009ac0:	431bde83 	.word	0x431bde83

08009ac4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009ac8:	4b05      	ldr	r3, [pc, #20]	; (8009ae0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	4a04      	ldr	r2, [pc, #16]	; (8009ae0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ad2:	6093      	str	r3, [r2, #8]
}
 8009ad4:	bf00      	nop
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr
 8009ade:	bf00      	nop
 8009ae0:	40007000 	.word	0x40007000

08009ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b088      	sub	sp, #32
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d101      	bne.n	8009af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	e306      	b.n	800a104 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f003 0301 	and.w	r3, r3, #1
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d075      	beq.n	8009bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b02:	4b97      	ldr	r3, [pc, #604]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	f003 030c 	and.w	r3, r3, #12
 8009b0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009b0c:	4b94      	ldr	r3, [pc, #592]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	f003 0303 	and.w	r3, r3, #3
 8009b14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	2b0c      	cmp	r3, #12
 8009b1a:	d102      	bne.n	8009b22 <HAL_RCC_OscConfig+0x3e>
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	2b03      	cmp	r3, #3
 8009b20:	d002      	beq.n	8009b28 <HAL_RCC_OscConfig+0x44>
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	2b08      	cmp	r3, #8
 8009b26:	d10b      	bne.n	8009b40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b28:	4b8d      	ldr	r3, [pc, #564]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d05b      	beq.n	8009bec <HAL_RCC_OscConfig+0x108>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d157      	bne.n	8009bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e2e1      	b.n	800a104 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b48:	d106      	bne.n	8009b58 <HAL_RCC_OscConfig+0x74>
 8009b4a:	4b85      	ldr	r3, [pc, #532]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a84      	ldr	r2, [pc, #528]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b54:	6013      	str	r3, [r2, #0]
 8009b56:	e01d      	b.n	8009b94 <HAL_RCC_OscConfig+0xb0>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b60:	d10c      	bne.n	8009b7c <HAL_RCC_OscConfig+0x98>
 8009b62:	4b7f      	ldr	r3, [pc, #508]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a7e      	ldr	r2, [pc, #504]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b6c:	6013      	str	r3, [r2, #0]
 8009b6e:	4b7c      	ldr	r3, [pc, #496]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a7b      	ldr	r2, [pc, #492]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b78:	6013      	str	r3, [r2, #0]
 8009b7a:	e00b      	b.n	8009b94 <HAL_RCC_OscConfig+0xb0>
 8009b7c:	4b78      	ldr	r3, [pc, #480]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a77      	ldr	r2, [pc, #476]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b86:	6013      	str	r3, [r2, #0]
 8009b88:	4b75      	ldr	r3, [pc, #468]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a74      	ldr	r2, [pc, #464]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d013      	beq.n	8009bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b9c:	f7fc f874 	bl	8005c88 <HAL_GetTick>
 8009ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ba2:	e008      	b.n	8009bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ba4:	f7fc f870 	bl	8005c88 <HAL_GetTick>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	1ad3      	subs	r3, r2, r3
 8009bae:	2b64      	cmp	r3, #100	; 0x64
 8009bb0:	d901      	bls.n	8009bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	e2a6      	b.n	800a104 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009bb6:	4b6a      	ldr	r3, [pc, #424]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d0f0      	beq.n	8009ba4 <HAL_RCC_OscConfig+0xc0>
 8009bc2:	e014      	b.n	8009bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bc4:	f7fc f860 	bl	8005c88 <HAL_GetTick>
 8009bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009bca:	e008      	b.n	8009bde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009bcc:	f7fc f85c 	bl	8005c88 <HAL_GetTick>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	2b64      	cmp	r3, #100	; 0x64
 8009bd8:	d901      	bls.n	8009bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009bda:	2303      	movs	r3, #3
 8009bdc:	e292      	b.n	800a104 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009bde:	4b60      	ldr	r3, [pc, #384]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d1f0      	bne.n	8009bcc <HAL_RCC_OscConfig+0xe8>
 8009bea:	e000      	b.n	8009bee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 0302 	and.w	r3, r3, #2
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d075      	beq.n	8009ce6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009bfa:	4b59      	ldr	r3, [pc, #356]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	f003 030c 	and.w	r3, r3, #12
 8009c02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009c04:	4b56      	ldr	r3, [pc, #344]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	f003 0303 	and.w	r3, r3, #3
 8009c0c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	2b0c      	cmp	r3, #12
 8009c12:	d102      	bne.n	8009c1a <HAL_RCC_OscConfig+0x136>
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	d002      	beq.n	8009c20 <HAL_RCC_OscConfig+0x13c>
 8009c1a:	69bb      	ldr	r3, [r7, #24]
 8009c1c:	2b04      	cmp	r3, #4
 8009c1e:	d11f      	bne.n	8009c60 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c20:	4b4f      	ldr	r3, [pc, #316]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d005      	beq.n	8009c38 <HAL_RCC_OscConfig+0x154>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	e265      	b.n	800a104 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c38:	4b49      	ldr	r3, [pc, #292]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	061b      	lsls	r3, r3, #24
 8009c46:	4946      	ldr	r1, [pc, #280]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009c4c:	4b45      	ldr	r3, [pc, #276]	; (8009d64 <HAL_RCC_OscConfig+0x280>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fb ffcd 	bl	8005bf0 <HAL_InitTick>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d043      	beq.n	8009ce4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e251      	b.n	800a104 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d023      	beq.n	8009cb0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009c68:	4b3d      	ldr	r3, [pc, #244]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a3c      	ldr	r2, [pc, #240]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c74:	f7fc f808 	bl	8005c88 <HAL_GetTick>
 8009c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009c7a:	e008      	b.n	8009c8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c7c:	f7fc f804 	bl	8005c88 <HAL_GetTick>
 8009c80:	4602      	mov	r2, r0
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	1ad3      	subs	r3, r2, r3
 8009c86:	2b02      	cmp	r3, #2
 8009c88:	d901      	bls.n	8009c8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	e23a      	b.n	800a104 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009c8e:	4b34      	ldr	r3, [pc, #208]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d0f0      	beq.n	8009c7c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c9a:	4b31      	ldr	r3, [pc, #196]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	061b      	lsls	r3, r3, #24
 8009ca8:	492d      	ldr	r1, [pc, #180]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009caa:	4313      	orrs	r3, r2
 8009cac:	604b      	str	r3, [r1, #4]
 8009cae:	e01a      	b.n	8009ce6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009cb0:	4b2b      	ldr	r3, [pc, #172]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a2a      	ldr	r2, [pc, #168]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009cb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cbc:	f7fb ffe4 	bl	8005c88 <HAL_GetTick>
 8009cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009cc2:	e008      	b.n	8009cd6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009cc4:	f7fb ffe0 	bl	8005c88 <HAL_GetTick>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d901      	bls.n	8009cd6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	e216      	b.n	800a104 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009cd6:	4b22      	ldr	r3, [pc, #136]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d1f0      	bne.n	8009cc4 <HAL_RCC_OscConfig+0x1e0>
 8009ce2:	e000      	b.n	8009ce6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ce4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f003 0308 	and.w	r3, r3, #8
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d041      	beq.n	8009d76 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	695b      	ldr	r3, [r3, #20]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d01c      	beq.n	8009d34 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009cfa:	4b19      	ldr	r3, [pc, #100]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d00:	4a17      	ldr	r2, [pc, #92]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009d02:	f043 0301 	orr.w	r3, r3, #1
 8009d06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d0a:	f7fb ffbd 	bl	8005c88 <HAL_GetTick>
 8009d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009d10:	e008      	b.n	8009d24 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d12:	f7fb ffb9 	bl	8005c88 <HAL_GetTick>
 8009d16:	4602      	mov	r2, r0
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d901      	bls.n	8009d24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e1ef      	b.n	800a104 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009d24:	4b0e      	ldr	r3, [pc, #56]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d2a:	f003 0302 	and.w	r3, r3, #2
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d0ef      	beq.n	8009d12 <HAL_RCC_OscConfig+0x22e>
 8009d32:	e020      	b.n	8009d76 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d34:	4b0a      	ldr	r3, [pc, #40]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d3a:	4a09      	ldr	r2, [pc, #36]	; (8009d60 <HAL_RCC_OscConfig+0x27c>)
 8009d3c:	f023 0301 	bic.w	r3, r3, #1
 8009d40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d44:	f7fb ffa0 	bl	8005c88 <HAL_GetTick>
 8009d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009d4a:	e00d      	b.n	8009d68 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d4c:	f7fb ff9c 	bl	8005c88 <HAL_GetTick>
 8009d50:	4602      	mov	r2, r0
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	2b02      	cmp	r3, #2
 8009d58:	d906      	bls.n	8009d68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	e1d2      	b.n	800a104 <HAL_RCC_OscConfig+0x620>
 8009d5e:	bf00      	nop
 8009d60:	40021000 	.word	0x40021000
 8009d64:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009d68:	4b8c      	ldr	r3, [pc, #560]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d6e:	f003 0302 	and.w	r3, r3, #2
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1ea      	bne.n	8009d4c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f003 0304 	and.w	r3, r3, #4
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f000 80a6 	beq.w	8009ed0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d84:	2300      	movs	r3, #0
 8009d86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009d88:	4b84      	ldr	r3, [pc, #528]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d101      	bne.n	8009d98 <HAL_RCC_OscConfig+0x2b4>
 8009d94:	2301      	movs	r3, #1
 8009d96:	e000      	b.n	8009d9a <HAL_RCC_OscConfig+0x2b6>
 8009d98:	2300      	movs	r3, #0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00d      	beq.n	8009dba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d9e:	4b7f      	ldr	r3, [pc, #508]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009da2:	4a7e      	ldr	r2, [pc, #504]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009da8:	6593      	str	r3, [r2, #88]	; 0x58
 8009daa:	4b7c      	ldr	r3, [pc, #496]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009db2:	60fb      	str	r3, [r7, #12]
 8009db4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009db6:	2301      	movs	r3, #1
 8009db8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009dba:	4b79      	ldr	r3, [pc, #484]	; (8009fa0 <HAL_RCC_OscConfig+0x4bc>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d118      	bne.n	8009df8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009dc6:	4b76      	ldr	r3, [pc, #472]	; (8009fa0 <HAL_RCC_OscConfig+0x4bc>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a75      	ldr	r2, [pc, #468]	; (8009fa0 <HAL_RCC_OscConfig+0x4bc>)
 8009dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009dd2:	f7fb ff59 	bl	8005c88 <HAL_GetTick>
 8009dd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009dd8:	e008      	b.n	8009dec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009dda:	f7fb ff55 	bl	8005c88 <HAL_GetTick>
 8009dde:	4602      	mov	r2, r0
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	1ad3      	subs	r3, r2, r3
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d901      	bls.n	8009dec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009de8:	2303      	movs	r3, #3
 8009dea:	e18b      	b.n	800a104 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009dec:	4b6c      	ldr	r3, [pc, #432]	; (8009fa0 <HAL_RCC_OscConfig+0x4bc>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d0f0      	beq.n	8009dda <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d108      	bne.n	8009e12 <HAL_RCC_OscConfig+0x32e>
 8009e00:	4b66      	ldr	r3, [pc, #408]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e06:	4a65      	ldr	r2, [pc, #404]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009e08:	f043 0301 	orr.w	r3, r3, #1
 8009e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009e10:	e024      	b.n	8009e5c <HAL_RCC_OscConfig+0x378>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	2b05      	cmp	r3, #5
 8009e18:	d110      	bne.n	8009e3c <HAL_RCC_OscConfig+0x358>
 8009e1a:	4b60      	ldr	r3, [pc, #384]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e20:	4a5e      	ldr	r2, [pc, #376]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009e22:	f043 0304 	orr.w	r3, r3, #4
 8009e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009e2a:	4b5c      	ldr	r3, [pc, #368]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e30:	4a5a      	ldr	r2, [pc, #360]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009e32:	f043 0301 	orr.w	r3, r3, #1
 8009e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009e3a:	e00f      	b.n	8009e5c <HAL_RCC_OscConfig+0x378>
 8009e3c:	4b57      	ldr	r3, [pc, #348]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e42:	4a56      	ldr	r2, [pc, #344]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009e44:	f023 0301 	bic.w	r3, r3, #1
 8009e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009e4c:	4b53      	ldr	r3, [pc, #332]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e52:	4a52      	ldr	r2, [pc, #328]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009e54:	f023 0304 	bic.w	r3, r3, #4
 8009e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d016      	beq.n	8009e92 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e64:	f7fb ff10 	bl	8005c88 <HAL_GetTick>
 8009e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e6a:	e00a      	b.n	8009e82 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e6c:	f7fb ff0c 	bl	8005c88 <HAL_GetTick>
 8009e70:	4602      	mov	r2, r0
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d901      	bls.n	8009e82 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009e7e:	2303      	movs	r3, #3
 8009e80:	e140      	b.n	800a104 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e82:	4b46      	ldr	r3, [pc, #280]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e88:	f003 0302 	and.w	r3, r3, #2
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d0ed      	beq.n	8009e6c <HAL_RCC_OscConfig+0x388>
 8009e90:	e015      	b.n	8009ebe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e92:	f7fb fef9 	bl	8005c88 <HAL_GetTick>
 8009e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009e98:	e00a      	b.n	8009eb0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e9a:	f7fb fef5 	bl	8005c88 <HAL_GetTick>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d901      	bls.n	8009eb0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009eac:	2303      	movs	r3, #3
 8009eae:	e129      	b.n	800a104 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009eb0:	4b3a      	ldr	r3, [pc, #232]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eb6:	f003 0302 	and.w	r3, r3, #2
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1ed      	bne.n	8009e9a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009ebe:	7ffb      	ldrb	r3, [r7, #31]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d105      	bne.n	8009ed0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ec4:	4b35      	ldr	r3, [pc, #212]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ec8:	4a34      	ldr	r2, [pc, #208]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ece:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 0320 	and.w	r3, r3, #32
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d03c      	beq.n	8009f56 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d01c      	beq.n	8009f1e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009ee4:	4b2d      	ldr	r3, [pc, #180]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009eea:	4a2c      	ldr	r2, [pc, #176]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009eec:	f043 0301 	orr.w	r3, r3, #1
 8009ef0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ef4:	f7fb fec8 	bl	8005c88 <HAL_GetTick>
 8009ef8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009efa:	e008      	b.n	8009f0e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009efc:	f7fb fec4 	bl	8005c88 <HAL_GetTick>
 8009f00:	4602      	mov	r2, r0
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	1ad3      	subs	r3, r2, r3
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	d901      	bls.n	8009f0e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009f0a:	2303      	movs	r3, #3
 8009f0c:	e0fa      	b.n	800a104 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009f0e:	4b23      	ldr	r3, [pc, #140]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f14:	f003 0302 	and.w	r3, r3, #2
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d0ef      	beq.n	8009efc <HAL_RCC_OscConfig+0x418>
 8009f1c:	e01b      	b.n	8009f56 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009f1e:	4b1f      	ldr	r3, [pc, #124]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009f20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f24:	4a1d      	ldr	r2, [pc, #116]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009f26:	f023 0301 	bic.w	r3, r3, #1
 8009f2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f2e:	f7fb feab 	bl	8005c88 <HAL_GetTick>
 8009f32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009f34:	e008      	b.n	8009f48 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f36:	f7fb fea7 	bl	8005c88 <HAL_GetTick>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d901      	bls.n	8009f48 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e0dd      	b.n	800a104 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009f48:	4b14      	ldr	r3, [pc, #80]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f4e:	f003 0302 	and.w	r3, r3, #2
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d1ef      	bne.n	8009f36 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	69db      	ldr	r3, [r3, #28]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f000 80d1 	beq.w	800a102 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009f60:	4b0e      	ldr	r3, [pc, #56]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	f003 030c 	and.w	r3, r3, #12
 8009f68:	2b0c      	cmp	r3, #12
 8009f6a:	f000 808b 	beq.w	800a084 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	69db      	ldr	r3, [r3, #28]
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d15e      	bne.n	800a034 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f76:	4b09      	ldr	r3, [pc, #36]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a08      	ldr	r2, [pc, #32]	; (8009f9c <HAL_RCC_OscConfig+0x4b8>)
 8009f7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f82:	f7fb fe81 	bl	8005c88 <HAL_GetTick>
 8009f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f88:	e00c      	b.n	8009fa4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f8a:	f7fb fe7d 	bl	8005c88 <HAL_GetTick>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	1ad3      	subs	r3, r2, r3
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d905      	bls.n	8009fa4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	e0b3      	b.n	800a104 <HAL_RCC_OscConfig+0x620>
 8009f9c:	40021000 	.word	0x40021000
 8009fa0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009fa4:	4b59      	ldr	r3, [pc, #356]	; (800a10c <HAL_RCC_OscConfig+0x628>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d1ec      	bne.n	8009f8a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009fb0:	4b56      	ldr	r3, [pc, #344]	; (800a10c <HAL_RCC_OscConfig+0x628>)
 8009fb2:	68da      	ldr	r2, [r3, #12]
 8009fb4:	4b56      	ldr	r3, [pc, #344]	; (800a110 <HAL_RCC_OscConfig+0x62c>)
 8009fb6:	4013      	ands	r3, r2
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	6a11      	ldr	r1, [r2, #32]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009fc0:	3a01      	subs	r2, #1
 8009fc2:	0112      	lsls	r2, r2, #4
 8009fc4:	4311      	orrs	r1, r2
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009fca:	0212      	lsls	r2, r2, #8
 8009fcc:	4311      	orrs	r1, r2
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009fd2:	0852      	lsrs	r2, r2, #1
 8009fd4:	3a01      	subs	r2, #1
 8009fd6:	0552      	lsls	r2, r2, #21
 8009fd8:	4311      	orrs	r1, r2
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009fde:	0852      	lsrs	r2, r2, #1
 8009fe0:	3a01      	subs	r2, #1
 8009fe2:	0652      	lsls	r2, r2, #25
 8009fe4:	4311      	orrs	r1, r2
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009fea:	06d2      	lsls	r2, r2, #27
 8009fec:	430a      	orrs	r2, r1
 8009fee:	4947      	ldr	r1, [pc, #284]	; (800a10c <HAL_RCC_OscConfig+0x628>)
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ff4:	4b45      	ldr	r3, [pc, #276]	; (800a10c <HAL_RCC_OscConfig+0x628>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a44      	ldr	r2, [pc, #272]	; (800a10c <HAL_RCC_OscConfig+0x628>)
 8009ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ffe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a000:	4b42      	ldr	r3, [pc, #264]	; (800a10c <HAL_RCC_OscConfig+0x628>)
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	4a41      	ldr	r2, [pc, #260]	; (800a10c <HAL_RCC_OscConfig+0x628>)
 800a006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a00a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a00c:	f7fb fe3c 	bl	8005c88 <HAL_GetTick>
 800a010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a012:	e008      	b.n	800a026 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a014:	f7fb fe38 	bl	8005c88 <HAL_GetTick>
 800a018:	4602      	mov	r2, r0
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	1ad3      	subs	r3, r2, r3
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d901      	bls.n	800a026 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a022:	2303      	movs	r3, #3
 800a024:	e06e      	b.n	800a104 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a026:	4b39      	ldr	r3, [pc, #228]	; (800a10c <HAL_RCC_OscConfig+0x628>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0f0      	beq.n	800a014 <HAL_RCC_OscConfig+0x530>
 800a032:	e066      	b.n	800a102 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a034:	4b35      	ldr	r3, [pc, #212]	; (800a10c <HAL_RCC_OscConfig+0x628>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a34      	ldr	r2, [pc, #208]	; (800a10c <HAL_RCC_OscConfig+0x628>)
 800a03a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a03e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a040:	4b32      	ldr	r3, [pc, #200]	; (800a10c <HAL_RCC_OscConfig+0x628>)
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	4a31      	ldr	r2, [pc, #196]	; (800a10c <HAL_RCC_OscConfig+0x628>)
 800a046:	f023 0303 	bic.w	r3, r3, #3
 800a04a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a04c:	4b2f      	ldr	r3, [pc, #188]	; (800a10c <HAL_RCC_OscConfig+0x628>)
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	4a2e      	ldr	r2, [pc, #184]	; (800a10c <HAL_RCC_OscConfig+0x628>)
 800a052:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a05a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a05c:	f7fb fe14 	bl	8005c88 <HAL_GetTick>
 800a060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a062:	e008      	b.n	800a076 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a064:	f7fb fe10 	bl	8005c88 <HAL_GetTick>
 800a068:	4602      	mov	r2, r0
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	1ad3      	subs	r3, r2, r3
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d901      	bls.n	800a076 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800a072:	2303      	movs	r3, #3
 800a074:	e046      	b.n	800a104 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a076:	4b25      	ldr	r3, [pc, #148]	; (800a10c <HAL_RCC_OscConfig+0x628>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d1f0      	bne.n	800a064 <HAL_RCC_OscConfig+0x580>
 800a082:	e03e      	b.n	800a102 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	69db      	ldr	r3, [r3, #28]
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d101      	bne.n	800a090 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800a08c:	2301      	movs	r3, #1
 800a08e:	e039      	b.n	800a104 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a090:	4b1e      	ldr	r3, [pc, #120]	; (800a10c <HAL_RCC_OscConfig+0x628>)
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	f003 0203 	and.w	r2, r3, #3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a1b      	ldr	r3, [r3, #32]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d12c      	bne.n	800a0fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d123      	bne.n	800a0fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d11b      	bne.n	800a0fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d113      	bne.n	800a0fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e0:	085b      	lsrs	r3, r3, #1
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d109      	bne.n	800a0fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f4:	085b      	lsrs	r3, r3, #1
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d001      	beq.n	800a102 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	e000      	b.n	800a104 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	3720      	adds	r7, #32
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	40021000 	.word	0x40021000
 800a110:	019f800c 	.word	0x019f800c

0800a114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b086      	sub	sp, #24
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a11e:	2300      	movs	r3, #0
 800a120:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	e11e      	b.n	800a36a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a12c:	4b91      	ldr	r3, [pc, #580]	; (800a374 <HAL_RCC_ClockConfig+0x260>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f003 030f 	and.w	r3, r3, #15
 800a134:	683a      	ldr	r2, [r7, #0]
 800a136:	429a      	cmp	r2, r3
 800a138:	d910      	bls.n	800a15c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a13a:	4b8e      	ldr	r3, [pc, #568]	; (800a374 <HAL_RCC_ClockConfig+0x260>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f023 020f 	bic.w	r2, r3, #15
 800a142:	498c      	ldr	r1, [pc, #560]	; (800a374 <HAL_RCC_ClockConfig+0x260>)
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	4313      	orrs	r3, r2
 800a148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a14a:	4b8a      	ldr	r3, [pc, #552]	; (800a374 <HAL_RCC_ClockConfig+0x260>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 030f 	and.w	r3, r3, #15
 800a152:	683a      	ldr	r2, [r7, #0]
 800a154:	429a      	cmp	r2, r3
 800a156:	d001      	beq.n	800a15c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	e106      	b.n	800a36a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f003 0301 	and.w	r3, r3, #1
 800a164:	2b00      	cmp	r3, #0
 800a166:	d073      	beq.n	800a250 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	2b03      	cmp	r3, #3
 800a16e:	d129      	bne.n	800a1c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a170:	4b81      	ldr	r3, [pc, #516]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d101      	bne.n	800a180 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	e0f4      	b.n	800a36a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a180:	f000 f99e 	bl	800a4c0 <RCC_GetSysClockFreqFromPLLSource>
 800a184:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	4a7c      	ldr	r2, [pc, #496]	; (800a37c <HAL_RCC_ClockConfig+0x268>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d93f      	bls.n	800a20e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a18e:	4b7a      	ldr	r3, [pc, #488]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d009      	beq.n	800a1ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d033      	beq.n	800a20e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d12f      	bne.n	800a20e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a1ae:	4b72      	ldr	r3, [pc, #456]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1b6:	4a70      	ldr	r2, [pc, #448]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a1b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a1be:	2380      	movs	r3, #128	; 0x80
 800a1c0:	617b      	str	r3, [r7, #20]
 800a1c2:	e024      	b.n	800a20e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	d107      	bne.n	800a1dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a1cc:	4b6a      	ldr	r3, [pc, #424]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d109      	bne.n	800a1ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e0c6      	b.n	800a36a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a1dc:	4b66      	ldr	r3, [pc, #408]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d101      	bne.n	800a1ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e0be      	b.n	800a36a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a1ec:	f000 f8ce 	bl	800a38c <HAL_RCC_GetSysClockFreq>
 800a1f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	4a61      	ldr	r2, [pc, #388]	; (800a37c <HAL_RCC_ClockConfig+0x268>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d909      	bls.n	800a20e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a1fa:	4b5f      	ldr	r3, [pc, #380]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a202:	4a5d      	ldr	r2, [pc, #372]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a208:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a20a:	2380      	movs	r3, #128	; 0x80
 800a20c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a20e:	4b5a      	ldr	r3, [pc, #360]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	f023 0203 	bic.w	r2, r3, #3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	4957      	ldr	r1, [pc, #348]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a21c:	4313      	orrs	r3, r2
 800a21e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a220:	f7fb fd32 	bl	8005c88 <HAL_GetTick>
 800a224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a226:	e00a      	b.n	800a23e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a228:	f7fb fd2e 	bl	8005c88 <HAL_GetTick>
 800a22c:	4602      	mov	r2, r0
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	1ad3      	subs	r3, r2, r3
 800a232:	f241 3288 	movw	r2, #5000	; 0x1388
 800a236:	4293      	cmp	r3, r2
 800a238:	d901      	bls.n	800a23e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a23a:	2303      	movs	r3, #3
 800a23c:	e095      	b.n	800a36a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a23e:	4b4e      	ldr	r3, [pc, #312]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	f003 020c 	and.w	r2, r3, #12
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d1eb      	bne.n	800a228 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f003 0302 	and.w	r3, r3, #2
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d023      	beq.n	800a2a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 0304 	and.w	r3, r3, #4
 800a264:	2b00      	cmp	r3, #0
 800a266:	d005      	beq.n	800a274 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a268:	4b43      	ldr	r3, [pc, #268]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	4a42      	ldr	r2, [pc, #264]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a26e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a272:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f003 0308 	and.w	r3, r3, #8
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d007      	beq.n	800a290 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a280:	4b3d      	ldr	r3, [pc, #244]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a288:	4a3b      	ldr	r2, [pc, #236]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a28a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a28e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a290:	4b39      	ldr	r3, [pc, #228]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	4936      	ldr	r1, [pc, #216]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	608b      	str	r3, [r1, #8]
 800a2a2:	e008      	b.n	800a2b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	2b80      	cmp	r3, #128	; 0x80
 800a2a8:	d105      	bne.n	800a2b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a2aa:	4b33      	ldr	r3, [pc, #204]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	4a32      	ldr	r2, [pc, #200]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a2b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a2b6:	4b2f      	ldr	r3, [pc, #188]	; (800a374 <HAL_RCC_ClockConfig+0x260>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 030f 	and.w	r3, r3, #15
 800a2be:	683a      	ldr	r2, [r7, #0]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d21d      	bcs.n	800a300 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2c4:	4b2b      	ldr	r3, [pc, #172]	; (800a374 <HAL_RCC_ClockConfig+0x260>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f023 020f 	bic.w	r2, r3, #15
 800a2cc:	4929      	ldr	r1, [pc, #164]	; (800a374 <HAL_RCC_ClockConfig+0x260>)
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a2d4:	f7fb fcd8 	bl	8005c88 <HAL_GetTick>
 800a2d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2da:	e00a      	b.n	800a2f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a2dc:	f7fb fcd4 	bl	8005c88 <HAL_GetTick>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	1ad3      	subs	r3, r2, r3
 800a2e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d901      	bls.n	800a2f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a2ee:	2303      	movs	r3, #3
 800a2f0:	e03b      	b.n	800a36a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2f2:	4b20      	ldr	r3, [pc, #128]	; (800a374 <HAL_RCC_ClockConfig+0x260>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f003 030f 	and.w	r3, r3, #15
 800a2fa:	683a      	ldr	r2, [r7, #0]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d1ed      	bne.n	800a2dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 0304 	and.w	r3, r3, #4
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d008      	beq.n	800a31e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a30c:	4b1a      	ldr	r3, [pc, #104]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	4917      	ldr	r1, [pc, #92]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a31a:	4313      	orrs	r3, r2
 800a31c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f003 0308 	and.w	r3, r3, #8
 800a326:	2b00      	cmp	r3, #0
 800a328:	d009      	beq.n	800a33e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a32a:	4b13      	ldr	r3, [pc, #76]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	00db      	lsls	r3, r3, #3
 800a338:	490f      	ldr	r1, [pc, #60]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a33a:	4313      	orrs	r3, r2
 800a33c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a33e:	f000 f825 	bl	800a38c <HAL_RCC_GetSysClockFreq>
 800a342:	4602      	mov	r2, r0
 800a344:	4b0c      	ldr	r3, [pc, #48]	; (800a378 <HAL_RCC_ClockConfig+0x264>)
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	091b      	lsrs	r3, r3, #4
 800a34a:	f003 030f 	and.w	r3, r3, #15
 800a34e:	490c      	ldr	r1, [pc, #48]	; (800a380 <HAL_RCC_ClockConfig+0x26c>)
 800a350:	5ccb      	ldrb	r3, [r1, r3]
 800a352:	f003 031f 	and.w	r3, r3, #31
 800a356:	fa22 f303 	lsr.w	r3, r2, r3
 800a35a:	4a0a      	ldr	r2, [pc, #40]	; (800a384 <HAL_RCC_ClockConfig+0x270>)
 800a35c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a35e:	4b0a      	ldr	r3, [pc, #40]	; (800a388 <HAL_RCC_ClockConfig+0x274>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4618      	mov	r0, r3
 800a364:	f7fb fc44 	bl	8005bf0 <HAL_InitTick>
 800a368:	4603      	mov	r3, r0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3718      	adds	r7, #24
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	40022000 	.word	0x40022000
 800a378:	40021000 	.word	0x40021000
 800a37c:	04c4b400 	.word	0x04c4b400
 800a380:	08013504 	.word	0x08013504
 800a384:	20000000 	.word	0x20000000
 800a388:	20000004 	.word	0x20000004

0800a38c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b087      	sub	sp, #28
 800a390:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a392:	4b2c      	ldr	r3, [pc, #176]	; (800a444 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	f003 030c 	and.w	r3, r3, #12
 800a39a:	2b04      	cmp	r3, #4
 800a39c:	d102      	bne.n	800a3a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a39e:	4b2a      	ldr	r3, [pc, #168]	; (800a448 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a3a0:	613b      	str	r3, [r7, #16]
 800a3a2:	e047      	b.n	800a434 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a3a4:	4b27      	ldr	r3, [pc, #156]	; (800a444 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	f003 030c 	and.w	r3, r3, #12
 800a3ac:	2b08      	cmp	r3, #8
 800a3ae:	d102      	bne.n	800a3b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a3b0:	4b26      	ldr	r3, [pc, #152]	; (800a44c <HAL_RCC_GetSysClockFreq+0xc0>)
 800a3b2:	613b      	str	r3, [r7, #16]
 800a3b4:	e03e      	b.n	800a434 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a3b6:	4b23      	ldr	r3, [pc, #140]	; (800a444 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	f003 030c 	and.w	r3, r3, #12
 800a3be:	2b0c      	cmp	r3, #12
 800a3c0:	d136      	bne.n	800a430 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a3c2:	4b20      	ldr	r3, [pc, #128]	; (800a444 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	f003 0303 	and.w	r3, r3, #3
 800a3ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a3cc:	4b1d      	ldr	r3, [pc, #116]	; (800a444 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	091b      	lsrs	r3, r3, #4
 800a3d2:	f003 030f 	and.w	r3, r3, #15
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2b03      	cmp	r3, #3
 800a3de:	d10c      	bne.n	800a3fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a3e0:	4a1a      	ldr	r2, [pc, #104]	; (800a44c <HAL_RCC_GetSysClockFreq+0xc0>)
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3e8:	4a16      	ldr	r2, [pc, #88]	; (800a444 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a3ea:	68d2      	ldr	r2, [r2, #12]
 800a3ec:	0a12      	lsrs	r2, r2, #8
 800a3ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a3f2:	fb02 f303 	mul.w	r3, r2, r3
 800a3f6:	617b      	str	r3, [r7, #20]
      break;
 800a3f8:	e00c      	b.n	800a414 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a3fa:	4a13      	ldr	r2, [pc, #76]	; (800a448 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a402:	4a10      	ldr	r2, [pc, #64]	; (800a444 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a404:	68d2      	ldr	r2, [r2, #12]
 800a406:	0a12      	lsrs	r2, r2, #8
 800a408:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a40c:	fb02 f303 	mul.w	r3, r2, r3
 800a410:	617b      	str	r3, [r7, #20]
      break;
 800a412:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a414:	4b0b      	ldr	r3, [pc, #44]	; (800a444 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	0e5b      	lsrs	r3, r3, #25
 800a41a:	f003 0303 	and.w	r3, r3, #3
 800a41e:	3301      	adds	r3, #1
 800a420:	005b      	lsls	r3, r3, #1
 800a422:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a424:	697a      	ldr	r2, [r7, #20]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	fbb2 f3f3 	udiv	r3, r2, r3
 800a42c:	613b      	str	r3, [r7, #16]
 800a42e:	e001      	b.n	800a434 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a430:	2300      	movs	r3, #0
 800a432:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a434:	693b      	ldr	r3, [r7, #16]
}
 800a436:	4618      	mov	r0, r3
 800a438:	371c      	adds	r7, #28
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	40021000 	.word	0x40021000
 800a448:	00f42400 	.word	0x00f42400
 800a44c:	007a1200 	.word	0x007a1200

0800a450 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a450:	b480      	push	{r7}
 800a452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a454:	4b03      	ldr	r3, [pc, #12]	; (800a464 <HAL_RCC_GetHCLKFreq+0x14>)
 800a456:	681b      	ldr	r3, [r3, #0]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr
 800a462:	bf00      	nop
 800a464:	20000000 	.word	0x20000000

0800a468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a46c:	f7ff fff0 	bl	800a450 <HAL_RCC_GetHCLKFreq>
 800a470:	4602      	mov	r2, r0
 800a472:	4b06      	ldr	r3, [pc, #24]	; (800a48c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	0a1b      	lsrs	r3, r3, #8
 800a478:	f003 0307 	and.w	r3, r3, #7
 800a47c:	4904      	ldr	r1, [pc, #16]	; (800a490 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a47e:	5ccb      	ldrb	r3, [r1, r3]
 800a480:	f003 031f 	and.w	r3, r3, #31
 800a484:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a488:	4618      	mov	r0, r3
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	40021000 	.word	0x40021000
 800a490:	08013514 	.word	0x08013514

0800a494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a498:	f7ff ffda 	bl	800a450 <HAL_RCC_GetHCLKFreq>
 800a49c:	4602      	mov	r2, r0
 800a49e:	4b06      	ldr	r3, [pc, #24]	; (800a4b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	0adb      	lsrs	r3, r3, #11
 800a4a4:	f003 0307 	and.w	r3, r3, #7
 800a4a8:	4904      	ldr	r1, [pc, #16]	; (800a4bc <HAL_RCC_GetPCLK2Freq+0x28>)
 800a4aa:	5ccb      	ldrb	r3, [r1, r3]
 800a4ac:	f003 031f 	and.w	r3, r3, #31
 800a4b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	40021000 	.word	0x40021000
 800a4bc:	08013514 	.word	0x08013514

0800a4c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b087      	sub	sp, #28
 800a4c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a4c6:	4b1e      	ldr	r3, [pc, #120]	; (800a540 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	f003 0303 	and.w	r3, r3, #3
 800a4ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a4d0:	4b1b      	ldr	r3, [pc, #108]	; (800a540 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	091b      	lsrs	r3, r3, #4
 800a4d6:	f003 030f 	and.w	r3, r3, #15
 800a4da:	3301      	adds	r3, #1
 800a4dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	2b03      	cmp	r3, #3
 800a4e2:	d10c      	bne.n	800a4fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a4e4:	4a17      	ldr	r2, [pc, #92]	; (800a544 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ec:	4a14      	ldr	r2, [pc, #80]	; (800a540 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a4ee:	68d2      	ldr	r2, [r2, #12]
 800a4f0:	0a12      	lsrs	r2, r2, #8
 800a4f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a4f6:	fb02 f303 	mul.w	r3, r2, r3
 800a4fa:	617b      	str	r3, [r7, #20]
    break;
 800a4fc:	e00c      	b.n	800a518 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a4fe:	4a12      	ldr	r2, [pc, #72]	; (800a548 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	fbb2 f3f3 	udiv	r3, r2, r3
 800a506:	4a0e      	ldr	r2, [pc, #56]	; (800a540 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a508:	68d2      	ldr	r2, [r2, #12]
 800a50a:	0a12      	lsrs	r2, r2, #8
 800a50c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a510:	fb02 f303 	mul.w	r3, r2, r3
 800a514:	617b      	str	r3, [r7, #20]
    break;
 800a516:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a518:	4b09      	ldr	r3, [pc, #36]	; (800a540 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	0e5b      	lsrs	r3, r3, #25
 800a51e:	f003 0303 	and.w	r3, r3, #3
 800a522:	3301      	adds	r3, #1
 800a524:	005b      	lsls	r3, r3, #1
 800a526:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a528:	697a      	ldr	r2, [r7, #20]
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a530:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a532:	687b      	ldr	r3, [r7, #4]
}
 800a534:	4618      	mov	r0, r3
 800a536:	371c      	adds	r7, #28
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	40021000 	.word	0x40021000
 800a544:	007a1200 	.word	0x007a1200
 800a548:	00f42400 	.word	0x00f42400

0800a54c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a554:	2300      	movs	r3, #0
 800a556:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a558:	2300      	movs	r3, #0
 800a55a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a564:	2b00      	cmp	r3, #0
 800a566:	f000 8098 	beq.w	800a69a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a56a:	2300      	movs	r3, #0
 800a56c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a56e:	4b43      	ldr	r3, [pc, #268]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a576:	2b00      	cmp	r3, #0
 800a578:	d10d      	bne.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a57a:	4b40      	ldr	r3, [pc, #256]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a57c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a57e:	4a3f      	ldr	r2, [pc, #252]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a584:	6593      	str	r3, [r2, #88]	; 0x58
 800a586:	4b3d      	ldr	r3, [pc, #244]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a58a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a58e:	60bb      	str	r3, [r7, #8]
 800a590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a592:	2301      	movs	r3, #1
 800a594:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a596:	4b3a      	ldr	r3, [pc, #232]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a39      	ldr	r2, [pc, #228]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a59c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a5a2:	f7fb fb71 	bl	8005c88 <HAL_GetTick>
 800a5a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5a8:	e009      	b.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5aa:	f7fb fb6d 	bl	8005c88 <HAL_GetTick>
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	1ad3      	subs	r3, r2, r3
 800a5b4:	2b02      	cmp	r3, #2
 800a5b6:	d902      	bls.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a5b8:	2303      	movs	r3, #3
 800a5ba:	74fb      	strb	r3, [r7, #19]
        break;
 800a5bc:	e005      	b.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5be:	4b30      	ldr	r3, [pc, #192]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d0ef      	beq.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a5ca:	7cfb      	ldrb	r3, [r7, #19]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d159      	bne.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a5d0:	4b2a      	ldr	r3, [pc, #168]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d01e      	beq.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e6:	697a      	ldr	r2, [r7, #20]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d019      	beq.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a5ec:	4b23      	ldr	r3, [pc, #140]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a5f8:	4b20      	ldr	r3, [pc, #128]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5fe:	4a1f      	ldr	r2, [pc, #124]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a608:	4b1c      	ldr	r3, [pc, #112]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a60a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a60e:	4a1b      	ldr	r2, [pc, #108]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a618:	4a18      	ldr	r2, [pc, #96]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	f003 0301 	and.w	r3, r3, #1
 800a626:	2b00      	cmp	r3, #0
 800a628:	d016      	beq.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a62a:	f7fb fb2d 	bl	8005c88 <HAL_GetTick>
 800a62e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a630:	e00b      	b.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a632:	f7fb fb29 	bl	8005c88 <HAL_GetTick>
 800a636:	4602      	mov	r2, r0
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	1ad3      	subs	r3, r2, r3
 800a63c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a640:	4293      	cmp	r3, r2
 800a642:	d902      	bls.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a644:	2303      	movs	r3, #3
 800a646:	74fb      	strb	r3, [r7, #19]
            break;
 800a648:	e006      	b.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a64a:	4b0c      	ldr	r3, [pc, #48]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a64c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a650:	f003 0302 	and.w	r3, r3, #2
 800a654:	2b00      	cmp	r3, #0
 800a656:	d0ec      	beq.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a658:	7cfb      	ldrb	r3, [r7, #19]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d10b      	bne.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a65e:	4b07      	ldr	r3, [pc, #28]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a664:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66c:	4903      	ldr	r1, [pc, #12]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a66e:	4313      	orrs	r3, r2
 800a670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a674:	e008      	b.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a676:	7cfb      	ldrb	r3, [r7, #19]
 800a678:	74bb      	strb	r3, [r7, #18]
 800a67a:	e005      	b.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a67c:	40021000 	.word	0x40021000
 800a680:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a684:	7cfb      	ldrb	r3, [r7, #19]
 800a686:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a688:	7c7b      	ldrb	r3, [r7, #17]
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d105      	bne.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a68e:	4ba6      	ldr	r3, [pc, #664]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a692:	4aa5      	ldr	r2, [pc, #660]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a698:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f003 0301 	and.w	r3, r3, #1
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00a      	beq.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a6a6:	4ba0      	ldr	r3, [pc, #640]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ac:	f023 0203 	bic.w	r2, r3, #3
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	499c      	ldr	r1, [pc, #624]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f003 0302 	and.w	r3, r3, #2
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d00a      	beq.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a6c8:	4b97      	ldr	r3, [pc, #604]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ce:	f023 020c 	bic.w	r2, r3, #12
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	689b      	ldr	r3, [r3, #8]
 800a6d6:	4994      	ldr	r1, [pc, #592]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f003 0304 	and.w	r3, r3, #4
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d00a      	beq.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a6ea:	4b8f      	ldr	r3, [pc, #572]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	498b      	ldr	r1, [pc, #556]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f003 0308 	and.w	r3, r3, #8
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00a      	beq.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a70c:	4b86      	ldr	r3, [pc, #536]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a70e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a712:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	4983      	ldr	r1, [pc, #524]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a71c:	4313      	orrs	r3, r2
 800a71e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f003 0320 	and.w	r3, r3, #32
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00a      	beq.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a72e:	4b7e      	ldr	r3, [pc, #504]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a734:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	695b      	ldr	r3, [r3, #20]
 800a73c:	497a      	ldr	r1, [pc, #488]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a73e:	4313      	orrs	r3, r2
 800a740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d00a      	beq.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a750:	4b75      	ldr	r3, [pc, #468]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a756:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	4972      	ldr	r1, [pc, #456]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a760:	4313      	orrs	r3, r2
 800a762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00a      	beq.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a772:	4b6d      	ldr	r3, [pc, #436]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a778:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	69db      	ldr	r3, [r3, #28]
 800a780:	4969      	ldr	r1, [pc, #420]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a782:	4313      	orrs	r3, r2
 800a784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00a      	beq.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a794:	4b64      	ldr	r3, [pc, #400]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a79a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a1b      	ldr	r3, [r3, #32]
 800a7a2:	4961      	ldr	r1, [pc, #388]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00a      	beq.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a7b6:	4b5c      	ldr	r3, [pc, #368]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c4:	4958      	ldr	r1, [pc, #352]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d015      	beq.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a7d8:	4b53      	ldr	r3, [pc, #332]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7e6:	4950      	ldr	r1, [pc, #320]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7f6:	d105      	bne.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a7f8:	4b4b      	ldr	r3, [pc, #300]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	4a4a      	ldr	r2, [pc, #296]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a802:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d015      	beq.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a810:	4b45      	ldr	r3, [pc, #276]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a816:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a81e:	4942      	ldr	r1, [pc, #264]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a820:	4313      	orrs	r3, r2
 800a822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a82a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a82e:	d105      	bne.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a830:	4b3d      	ldr	r3, [pc, #244]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	4a3c      	ldr	r2, [pc, #240]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a83a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a844:	2b00      	cmp	r3, #0
 800a846:	d015      	beq.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a848:	4b37      	ldr	r3, [pc, #220]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a84a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a84e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a856:	4934      	ldr	r1, [pc, #208]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a858:	4313      	orrs	r3, r2
 800a85a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a862:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a866:	d105      	bne.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a868:	4b2f      	ldr	r3, [pc, #188]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	4a2e      	ldr	r2, [pc, #184]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a86e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a872:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d015      	beq.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a880:	4b29      	ldr	r3, [pc, #164]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a886:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a88e:	4926      	ldr	r1, [pc, #152]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a890:	4313      	orrs	r3, r2
 800a892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a89a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a89e:	d105      	bne.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a8a0:	4b21      	ldr	r3, [pc, #132]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	4a20      	ldr	r2, [pc, #128]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d015      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a8b8:	4b1b      	ldr	r3, [pc, #108]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c6:	4918      	ldr	r1, [pc, #96]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8d6:	d105      	bne.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a8d8:	4b13      	ldr	r3, [pc, #76]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	4a12      	ldr	r2, [pc, #72]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d015      	beq.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a8f0:	4b0d      	ldr	r3, [pc, #52]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8fe:	490a      	ldr	r1, [pc, #40]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a900:	4313      	orrs	r3, r2
 800a902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a90a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a90e:	d105      	bne.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a910:	4b05      	ldr	r3, [pc, #20]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a912:	68db      	ldr	r3, [r3, #12]
 800a914:	4a04      	ldr	r2, [pc, #16]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a91a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a91c:	7cbb      	ldrb	r3, [r7, #18]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3718      	adds	r7, #24
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	40021000 	.word	0x40021000

0800a92c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d101      	bne.n	800a93e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	e049      	b.n	800a9d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a944:	b2db      	uxtb	r3, r3
 800a946:	2b00      	cmp	r3, #0
 800a948:	d106      	bne.n	800a958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7fa ff96 	bl	8005884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2202      	movs	r2, #2
 800a95c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	3304      	adds	r3, #4
 800a968:	4619      	mov	r1, r3
 800a96a:	4610      	mov	r0, r2
 800a96c:	f000 fdba 	bl	800b4e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2201      	movs	r2, #1
 800a98c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2201      	movs	r2, #1
 800a994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2201      	movs	r2, #1
 800a99c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3708      	adds	r7, #8
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
	...

0800a9dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d001      	beq.n	800a9f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	e04a      	b.n	800aa8a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2202      	movs	r2, #2
 800a9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68da      	ldr	r2, [r3, #12]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f042 0201 	orr.w	r2, r2, #1
 800aa0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a21      	ldr	r2, [pc, #132]	; (800aa98 <HAL_TIM_Base_Start_IT+0xbc>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d018      	beq.n	800aa48 <HAL_TIM_Base_Start_IT+0x6c>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa1e:	d013      	beq.n	800aa48 <HAL_TIM_Base_Start_IT+0x6c>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4a1d      	ldr	r2, [pc, #116]	; (800aa9c <HAL_TIM_Base_Start_IT+0xc0>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d00e      	beq.n	800aa48 <HAL_TIM_Base_Start_IT+0x6c>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a1c      	ldr	r2, [pc, #112]	; (800aaa0 <HAL_TIM_Base_Start_IT+0xc4>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d009      	beq.n	800aa48 <HAL_TIM_Base_Start_IT+0x6c>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4a1a      	ldr	r2, [pc, #104]	; (800aaa4 <HAL_TIM_Base_Start_IT+0xc8>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d004      	beq.n	800aa48 <HAL_TIM_Base_Start_IT+0x6c>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a19      	ldr	r2, [pc, #100]	; (800aaa8 <HAL_TIM_Base_Start_IT+0xcc>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d115      	bne.n	800aa74 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	689a      	ldr	r2, [r3, #8]
 800aa4e:	4b17      	ldr	r3, [pc, #92]	; (800aaac <HAL_TIM_Base_Start_IT+0xd0>)
 800aa50:	4013      	ands	r3, r2
 800aa52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2b06      	cmp	r3, #6
 800aa58:	d015      	beq.n	800aa86 <HAL_TIM_Base_Start_IT+0xaa>
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa60:	d011      	beq.n	800aa86 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f042 0201 	orr.w	r2, r2, #1
 800aa70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa72:	e008      	b.n	800aa86 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f042 0201 	orr.w	r2, r2, #1
 800aa82:	601a      	str	r2, [r3, #0]
 800aa84:	e000      	b.n	800aa88 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3714      	adds	r7, #20
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	40012c00 	.word	0x40012c00
 800aa9c:	40000400 	.word	0x40000400
 800aaa0:	40000800 	.word	0x40000800
 800aaa4:	40013400 	.word	0x40013400
 800aaa8:	40014000 	.word	0x40014000
 800aaac:	00010007 	.word	0x00010007

0800aab0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d101      	bne.n	800aac2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	e049      	b.n	800ab56 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d106      	bne.n	800aadc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 f841 	bl	800ab5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2202      	movs	r2, #2
 800aae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	3304      	adds	r3, #4
 800aaec:	4619      	mov	r1, r3
 800aaee:	4610      	mov	r0, r2
 800aaf0:	f000 fcf8 	bl	800b4e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2201      	movs	r2, #1
 800ab00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2201      	movs	r2, #1
 800ab08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ab5e:	b480      	push	{r7}
 800ab60:	b083      	sub	sp, #12
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ab66:	bf00      	nop
 800ab68:	370c      	adds	r7, #12
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr
	...

0800ab74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d109      	bne.n	800ab98 <HAL_TIM_PWM_Start+0x24>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	bf14      	ite	ne
 800ab90:	2301      	movne	r3, #1
 800ab92:	2300      	moveq	r3, #0
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	e03c      	b.n	800ac12 <HAL_TIM_PWM_Start+0x9e>
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	2b04      	cmp	r3, #4
 800ab9c:	d109      	bne.n	800abb2 <HAL_TIM_PWM_Start+0x3e>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	bf14      	ite	ne
 800abaa:	2301      	movne	r3, #1
 800abac:	2300      	moveq	r3, #0
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	e02f      	b.n	800ac12 <HAL_TIM_PWM_Start+0x9e>
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	2b08      	cmp	r3, #8
 800abb6:	d109      	bne.n	800abcc <HAL_TIM_PWM_Start+0x58>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	bf14      	ite	ne
 800abc4:	2301      	movne	r3, #1
 800abc6:	2300      	moveq	r3, #0
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	e022      	b.n	800ac12 <HAL_TIM_PWM_Start+0x9e>
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	2b0c      	cmp	r3, #12
 800abd0:	d109      	bne.n	800abe6 <HAL_TIM_PWM_Start+0x72>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	2b01      	cmp	r3, #1
 800abdc:	bf14      	ite	ne
 800abde:	2301      	movne	r3, #1
 800abe0:	2300      	moveq	r3, #0
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	e015      	b.n	800ac12 <HAL_TIM_PWM_Start+0x9e>
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	2b10      	cmp	r3, #16
 800abea:	d109      	bne.n	800ac00 <HAL_TIM_PWM_Start+0x8c>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	bf14      	ite	ne
 800abf8:	2301      	movne	r3, #1
 800abfa:	2300      	moveq	r3, #0
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	e008      	b.n	800ac12 <HAL_TIM_PWM_Start+0x9e>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	bf14      	ite	ne
 800ac0c:	2301      	movne	r3, #1
 800ac0e:	2300      	moveq	r3, #0
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d001      	beq.n	800ac1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e097      	b.n	800ad4a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d104      	bne.n	800ac2a <HAL_TIM_PWM_Start+0xb6>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2202      	movs	r2, #2
 800ac24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac28:	e023      	b.n	800ac72 <HAL_TIM_PWM_Start+0xfe>
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	2b04      	cmp	r3, #4
 800ac2e:	d104      	bne.n	800ac3a <HAL_TIM_PWM_Start+0xc6>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2202      	movs	r2, #2
 800ac34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac38:	e01b      	b.n	800ac72 <HAL_TIM_PWM_Start+0xfe>
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	2b08      	cmp	r3, #8
 800ac3e:	d104      	bne.n	800ac4a <HAL_TIM_PWM_Start+0xd6>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2202      	movs	r2, #2
 800ac44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac48:	e013      	b.n	800ac72 <HAL_TIM_PWM_Start+0xfe>
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	2b0c      	cmp	r3, #12
 800ac4e:	d104      	bne.n	800ac5a <HAL_TIM_PWM_Start+0xe6>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2202      	movs	r2, #2
 800ac54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac58:	e00b      	b.n	800ac72 <HAL_TIM_PWM_Start+0xfe>
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	2b10      	cmp	r3, #16
 800ac5e:	d104      	bne.n	800ac6a <HAL_TIM_PWM_Start+0xf6>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2202      	movs	r2, #2
 800ac64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac68:	e003      	b.n	800ac72 <HAL_TIM_PWM_Start+0xfe>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2202      	movs	r2, #2
 800ac6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2201      	movs	r2, #1
 800ac78:	6839      	ldr	r1, [r7, #0]
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f001 f854 	bl	800bd28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a33      	ldr	r2, [pc, #204]	; (800ad54 <HAL_TIM_PWM_Start+0x1e0>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d013      	beq.n	800acb2 <HAL_TIM_PWM_Start+0x13e>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a32      	ldr	r2, [pc, #200]	; (800ad58 <HAL_TIM_PWM_Start+0x1e4>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d00e      	beq.n	800acb2 <HAL_TIM_PWM_Start+0x13e>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a30      	ldr	r2, [pc, #192]	; (800ad5c <HAL_TIM_PWM_Start+0x1e8>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d009      	beq.n	800acb2 <HAL_TIM_PWM_Start+0x13e>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a2f      	ldr	r2, [pc, #188]	; (800ad60 <HAL_TIM_PWM_Start+0x1ec>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d004      	beq.n	800acb2 <HAL_TIM_PWM_Start+0x13e>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a2d      	ldr	r2, [pc, #180]	; (800ad64 <HAL_TIM_PWM_Start+0x1f0>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d101      	bne.n	800acb6 <HAL_TIM_PWM_Start+0x142>
 800acb2:	2301      	movs	r3, #1
 800acb4:	e000      	b.n	800acb8 <HAL_TIM_PWM_Start+0x144>
 800acb6:	2300      	movs	r3, #0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d007      	beq.n	800accc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800acca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a20      	ldr	r2, [pc, #128]	; (800ad54 <HAL_TIM_PWM_Start+0x1e0>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d018      	beq.n	800ad08 <HAL_TIM_PWM_Start+0x194>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acde:	d013      	beq.n	800ad08 <HAL_TIM_PWM_Start+0x194>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a20      	ldr	r2, [pc, #128]	; (800ad68 <HAL_TIM_PWM_Start+0x1f4>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d00e      	beq.n	800ad08 <HAL_TIM_PWM_Start+0x194>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a1f      	ldr	r2, [pc, #124]	; (800ad6c <HAL_TIM_PWM_Start+0x1f8>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d009      	beq.n	800ad08 <HAL_TIM_PWM_Start+0x194>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a17      	ldr	r2, [pc, #92]	; (800ad58 <HAL_TIM_PWM_Start+0x1e4>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d004      	beq.n	800ad08 <HAL_TIM_PWM_Start+0x194>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4a16      	ldr	r2, [pc, #88]	; (800ad5c <HAL_TIM_PWM_Start+0x1e8>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d115      	bne.n	800ad34 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	689a      	ldr	r2, [r3, #8]
 800ad0e:	4b18      	ldr	r3, [pc, #96]	; (800ad70 <HAL_TIM_PWM_Start+0x1fc>)
 800ad10:	4013      	ands	r3, r2
 800ad12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2b06      	cmp	r3, #6
 800ad18:	d015      	beq.n	800ad46 <HAL_TIM_PWM_Start+0x1d2>
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad20:	d011      	beq.n	800ad46 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f042 0201 	orr.w	r2, r2, #1
 800ad30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad32:	e008      	b.n	800ad46 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f042 0201 	orr.w	r2, r2, #1
 800ad42:	601a      	str	r2, [r3, #0]
 800ad44:	e000      	b.n	800ad48 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad48:	2300      	movs	r3, #0
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	40012c00 	.word	0x40012c00
 800ad58:	40013400 	.word	0x40013400
 800ad5c:	40014000 	.word	0x40014000
 800ad60:	40014400 	.word	0x40014400
 800ad64:	40014800 	.word	0x40014800
 800ad68:	40000400 	.word	0x40000400
 800ad6c:	40000800 	.word	0x40000800
 800ad70:	00010007 	.word	0x00010007

0800ad74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	691b      	ldr	r3, [r3, #16]
 800ad82:	f003 0302 	and.w	r3, r3, #2
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	d122      	bne.n	800add0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	f003 0302 	and.w	r3, r3, #2
 800ad94:	2b02      	cmp	r3, #2
 800ad96:	d11b      	bne.n	800add0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f06f 0202 	mvn.w	r2, #2
 800ada0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2201      	movs	r2, #1
 800ada6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	699b      	ldr	r3, [r3, #24]
 800adae:	f003 0303 	and.w	r3, r3, #3
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d003      	beq.n	800adbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 fb76 	bl	800b4a8 <HAL_TIM_IC_CaptureCallback>
 800adbc:	e005      	b.n	800adca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 fb68 	bl	800b494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 fb79 	bl	800b4bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	f003 0304 	and.w	r3, r3, #4
 800adda:	2b04      	cmp	r3, #4
 800addc:	d122      	bne.n	800ae24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	f003 0304 	and.w	r3, r3, #4
 800ade8:	2b04      	cmp	r3, #4
 800adea:	d11b      	bne.n	800ae24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f06f 0204 	mvn.w	r2, #4
 800adf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2202      	movs	r2, #2
 800adfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	699b      	ldr	r3, [r3, #24]
 800ae02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d003      	beq.n	800ae12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 fb4c 	bl	800b4a8 <HAL_TIM_IC_CaptureCallback>
 800ae10:	e005      	b.n	800ae1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 fb3e 	bl	800b494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 fb4f 	bl	800b4bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2200      	movs	r2, #0
 800ae22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	691b      	ldr	r3, [r3, #16]
 800ae2a:	f003 0308 	and.w	r3, r3, #8
 800ae2e:	2b08      	cmp	r3, #8
 800ae30:	d122      	bne.n	800ae78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	f003 0308 	and.w	r3, r3, #8
 800ae3c:	2b08      	cmp	r3, #8
 800ae3e:	d11b      	bne.n	800ae78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f06f 0208 	mvn.w	r2, #8
 800ae48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2204      	movs	r2, #4
 800ae4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	69db      	ldr	r3, [r3, #28]
 800ae56:	f003 0303 	and.w	r3, r3, #3
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d003      	beq.n	800ae66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 fb22 	bl	800b4a8 <HAL_TIM_IC_CaptureCallback>
 800ae64:	e005      	b.n	800ae72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 fb14 	bl	800b494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 fb25 	bl	800b4bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	f003 0310 	and.w	r3, r3, #16
 800ae82:	2b10      	cmp	r3, #16
 800ae84:	d122      	bne.n	800aecc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	f003 0310 	and.w	r3, r3, #16
 800ae90:	2b10      	cmp	r3, #16
 800ae92:	d11b      	bne.n	800aecc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f06f 0210 	mvn.w	r2, #16
 800ae9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2208      	movs	r2, #8
 800aea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	69db      	ldr	r3, [r3, #28]
 800aeaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d003      	beq.n	800aeba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 faf8 	bl	800b4a8 <HAL_TIM_IC_CaptureCallback>
 800aeb8:	e005      	b.n	800aec6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 faea 	bl	800b494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fafb 	bl	800b4bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	691b      	ldr	r3, [r3, #16]
 800aed2:	f003 0301 	and.w	r3, r3, #1
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d10e      	bne.n	800aef8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	f003 0301 	and.w	r3, r3, #1
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d107      	bne.n	800aef8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f06f 0201 	mvn.w	r2, #1
 800aef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 fac4 	bl	800b480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	691b      	ldr	r3, [r3, #16]
 800aefe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af02:	2b80      	cmp	r3, #128	; 0x80
 800af04:	d10e      	bne.n	800af24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af10:	2b80      	cmp	r3, #128	; 0x80
 800af12:	d107      	bne.n	800af24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800af1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f001 f91b 	bl	800c15a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af32:	d10e      	bne.n	800af52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af3e:	2b80      	cmp	r3, #128	; 0x80
 800af40:	d107      	bne.n	800af52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800af4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f001 f90e 	bl	800c16e <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	691b      	ldr	r3, [r3, #16]
 800af58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af5c:	2b40      	cmp	r3, #64	; 0x40
 800af5e:	d10e      	bne.n	800af7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af6a:	2b40      	cmp	r3, #64	; 0x40
 800af6c:	d107      	bne.n	800af7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 faa9 	bl	800b4d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	f003 0320 	and.w	r3, r3, #32
 800af88:	2b20      	cmp	r3, #32
 800af8a:	d10e      	bne.n	800afaa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	f003 0320 	and.w	r3, r3, #32
 800af96:	2b20      	cmp	r3, #32
 800af98:	d107      	bne.n	800afaa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f06f 0220 	mvn.w	r2, #32
 800afa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f001 f8ce 	bl	800c146 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	691b      	ldr	r3, [r3, #16]
 800afb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800afb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afb8:	d10f      	bne.n	800afda <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800afc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afc8:	d107      	bne.n	800afda <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800afd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f001 f8d4 	bl	800c182 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	691b      	ldr	r3, [r3, #16]
 800afe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800afe4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afe8:	d10f      	bne.n	800b00a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aff4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aff8:	d107      	bne.n	800b00a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800b002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f001 f8c6 	bl	800c196 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	691b      	ldr	r3, [r3, #16]
 800b010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b018:	d10f      	bne.n	800b03a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b028:	d107      	bne.n	800b03a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800b032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f001 f8b8 	bl	800c1aa <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	691b      	ldr	r3, [r3, #16]
 800b040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b044:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b048:	d10f      	bne.n	800b06a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	68db      	ldr	r3, [r3, #12]
 800b050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b054:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b058:	d107      	bne.n	800b06a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800b062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f001 f8aa 	bl	800c1be <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b06a:	bf00      	nop
 800b06c:	3708      	adds	r7, #8
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
	...

0800b074 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b086:	2b01      	cmp	r3, #1
 800b088:	d101      	bne.n	800b08e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b08a:	2302      	movs	r3, #2
 800b08c:	e0fd      	b.n	800b28a <HAL_TIM_PWM_ConfigChannel+0x216>
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2201      	movs	r2, #1
 800b092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2b14      	cmp	r3, #20
 800b09a:	f200 80f0 	bhi.w	800b27e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b09e:	a201      	add	r2, pc, #4	; (adr r2, 800b0a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a4:	0800b0f9 	.word	0x0800b0f9
 800b0a8:	0800b27f 	.word	0x0800b27f
 800b0ac:	0800b27f 	.word	0x0800b27f
 800b0b0:	0800b27f 	.word	0x0800b27f
 800b0b4:	0800b139 	.word	0x0800b139
 800b0b8:	0800b27f 	.word	0x0800b27f
 800b0bc:	0800b27f 	.word	0x0800b27f
 800b0c0:	0800b27f 	.word	0x0800b27f
 800b0c4:	0800b17b 	.word	0x0800b17b
 800b0c8:	0800b27f 	.word	0x0800b27f
 800b0cc:	0800b27f 	.word	0x0800b27f
 800b0d0:	0800b27f 	.word	0x0800b27f
 800b0d4:	0800b1bb 	.word	0x0800b1bb
 800b0d8:	0800b27f 	.word	0x0800b27f
 800b0dc:	0800b27f 	.word	0x0800b27f
 800b0e0:	0800b27f 	.word	0x0800b27f
 800b0e4:	0800b1fd 	.word	0x0800b1fd
 800b0e8:	0800b27f 	.word	0x0800b27f
 800b0ec:	0800b27f 	.word	0x0800b27f
 800b0f0:	0800b27f 	.word	0x0800b27f
 800b0f4:	0800b23d 	.word	0x0800b23d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	68b9      	ldr	r1, [r7, #8]
 800b0fe:	4618      	mov	r0, r3
 800b100:	f000 fa80 	bl	800b604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	699a      	ldr	r2, [r3, #24]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f042 0208 	orr.w	r2, r2, #8
 800b112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	699a      	ldr	r2, [r3, #24]
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f022 0204 	bic.w	r2, r2, #4
 800b122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	6999      	ldr	r1, [r3, #24]
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	691a      	ldr	r2, [r3, #16]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	430a      	orrs	r2, r1
 800b134:	619a      	str	r2, [r3, #24]
      break;
 800b136:	e0a3      	b.n	800b280 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	68b9      	ldr	r1, [r7, #8]
 800b13e:	4618      	mov	r0, r3
 800b140:	f000 faf0 	bl	800b724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	699a      	ldr	r2, [r3, #24]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	699a      	ldr	r2, [r3, #24]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	6999      	ldr	r1, [r3, #24]
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	021a      	lsls	r2, r3, #8
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	430a      	orrs	r2, r1
 800b176:	619a      	str	r2, [r3, #24]
      break;
 800b178:	e082      	b.n	800b280 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	68b9      	ldr	r1, [r7, #8]
 800b180:	4618      	mov	r0, r3
 800b182:	f000 fb59 	bl	800b838 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	69da      	ldr	r2, [r3, #28]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f042 0208 	orr.w	r2, r2, #8
 800b194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	69da      	ldr	r2, [r3, #28]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f022 0204 	bic.w	r2, r2, #4
 800b1a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	69d9      	ldr	r1, [r3, #28]
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	691a      	ldr	r2, [r3, #16]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	430a      	orrs	r2, r1
 800b1b6:	61da      	str	r2, [r3, #28]
      break;
 800b1b8:	e062      	b.n	800b280 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	68b9      	ldr	r1, [r7, #8]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f000 fbc1 	bl	800b948 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	69da      	ldr	r2, [r3, #28]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	69da      	ldr	r2, [r3, #28]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	69d9      	ldr	r1, [r3, #28]
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	691b      	ldr	r3, [r3, #16]
 800b1f0:	021a      	lsls	r2, r3, #8
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	430a      	orrs	r2, r1
 800b1f8:	61da      	str	r2, [r3, #28]
      break;
 800b1fa:	e041      	b.n	800b280 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	68b9      	ldr	r1, [r7, #8]
 800b202:	4618      	mov	r0, r3
 800b204:	f000 fc2a 	bl	800ba5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f042 0208 	orr.w	r2, r2, #8
 800b216:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f022 0204 	bic.w	r2, r2, #4
 800b226:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	691a      	ldr	r2, [r3, #16]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	430a      	orrs	r2, r1
 800b238:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b23a:	e021      	b.n	800b280 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	68b9      	ldr	r1, [r7, #8]
 800b242:	4618      	mov	r0, r3
 800b244:	f000 fc6e 	bl	800bb24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b256:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b266:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	021a      	lsls	r2, r3, #8
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	430a      	orrs	r2, r1
 800b27a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b27c:	e000      	b.n	800b280 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b27e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2200      	movs	r2, #0
 800b284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b288:	2300      	movs	r3, #0
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3710      	adds	r7, #16
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop

0800b294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d101      	bne.n	800b2ac <HAL_TIM_ConfigClockSource+0x18>
 800b2a8:	2302      	movs	r3, #2
 800b2aa:	e0dd      	b.n	800b468 <HAL_TIM_ConfigClockSource+0x1d4>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2202      	movs	r2, #2
 800b2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800b2ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b2ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b2d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	68fa      	ldr	r2, [r7, #12]
 800b2de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a62      	ldr	r2, [pc, #392]	; (800b470 <HAL_TIM_ConfigClockSource+0x1dc>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	f000 80a9 	beq.w	800b43e <HAL_TIM_ConfigClockSource+0x1aa>
 800b2ec:	4a60      	ldr	r2, [pc, #384]	; (800b470 <HAL_TIM_ConfigClockSource+0x1dc>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	f200 80ae 	bhi.w	800b450 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2f4:	4a5f      	ldr	r2, [pc, #380]	; (800b474 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	f000 80a1 	beq.w	800b43e <HAL_TIM_ConfigClockSource+0x1aa>
 800b2fc:	4a5d      	ldr	r2, [pc, #372]	; (800b474 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	f200 80a6 	bhi.w	800b450 <HAL_TIM_ConfigClockSource+0x1bc>
 800b304:	4a5c      	ldr	r2, [pc, #368]	; (800b478 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b306:	4293      	cmp	r3, r2
 800b308:	f000 8099 	beq.w	800b43e <HAL_TIM_ConfigClockSource+0x1aa>
 800b30c:	4a5a      	ldr	r2, [pc, #360]	; (800b478 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	f200 809e 	bhi.w	800b450 <HAL_TIM_ConfigClockSource+0x1bc>
 800b314:	4a59      	ldr	r2, [pc, #356]	; (800b47c <HAL_TIM_ConfigClockSource+0x1e8>)
 800b316:	4293      	cmp	r3, r2
 800b318:	f000 8091 	beq.w	800b43e <HAL_TIM_ConfigClockSource+0x1aa>
 800b31c:	4a57      	ldr	r2, [pc, #348]	; (800b47c <HAL_TIM_ConfigClockSource+0x1e8>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	f200 8096 	bhi.w	800b450 <HAL_TIM_ConfigClockSource+0x1bc>
 800b324:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b328:	f000 8089 	beq.w	800b43e <HAL_TIM_ConfigClockSource+0x1aa>
 800b32c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b330:	f200 808e 	bhi.w	800b450 <HAL_TIM_ConfigClockSource+0x1bc>
 800b334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b338:	d03e      	beq.n	800b3b8 <HAL_TIM_ConfigClockSource+0x124>
 800b33a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b33e:	f200 8087 	bhi.w	800b450 <HAL_TIM_ConfigClockSource+0x1bc>
 800b342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b346:	f000 8085 	beq.w	800b454 <HAL_TIM_ConfigClockSource+0x1c0>
 800b34a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b34e:	d87f      	bhi.n	800b450 <HAL_TIM_ConfigClockSource+0x1bc>
 800b350:	2b70      	cmp	r3, #112	; 0x70
 800b352:	d01a      	beq.n	800b38a <HAL_TIM_ConfigClockSource+0xf6>
 800b354:	2b70      	cmp	r3, #112	; 0x70
 800b356:	d87b      	bhi.n	800b450 <HAL_TIM_ConfigClockSource+0x1bc>
 800b358:	2b60      	cmp	r3, #96	; 0x60
 800b35a:	d050      	beq.n	800b3fe <HAL_TIM_ConfigClockSource+0x16a>
 800b35c:	2b60      	cmp	r3, #96	; 0x60
 800b35e:	d877      	bhi.n	800b450 <HAL_TIM_ConfigClockSource+0x1bc>
 800b360:	2b50      	cmp	r3, #80	; 0x50
 800b362:	d03c      	beq.n	800b3de <HAL_TIM_ConfigClockSource+0x14a>
 800b364:	2b50      	cmp	r3, #80	; 0x50
 800b366:	d873      	bhi.n	800b450 <HAL_TIM_ConfigClockSource+0x1bc>
 800b368:	2b40      	cmp	r3, #64	; 0x40
 800b36a:	d058      	beq.n	800b41e <HAL_TIM_ConfigClockSource+0x18a>
 800b36c:	2b40      	cmp	r3, #64	; 0x40
 800b36e:	d86f      	bhi.n	800b450 <HAL_TIM_ConfigClockSource+0x1bc>
 800b370:	2b30      	cmp	r3, #48	; 0x30
 800b372:	d064      	beq.n	800b43e <HAL_TIM_ConfigClockSource+0x1aa>
 800b374:	2b30      	cmp	r3, #48	; 0x30
 800b376:	d86b      	bhi.n	800b450 <HAL_TIM_ConfigClockSource+0x1bc>
 800b378:	2b20      	cmp	r3, #32
 800b37a:	d060      	beq.n	800b43e <HAL_TIM_ConfigClockSource+0x1aa>
 800b37c:	2b20      	cmp	r3, #32
 800b37e:	d867      	bhi.n	800b450 <HAL_TIM_ConfigClockSource+0x1bc>
 800b380:	2b00      	cmp	r3, #0
 800b382:	d05c      	beq.n	800b43e <HAL_TIM_ConfigClockSource+0x1aa>
 800b384:	2b10      	cmp	r3, #16
 800b386:	d05a      	beq.n	800b43e <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b388:	e062      	b.n	800b450 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6818      	ldr	r0, [r3, #0]
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	6899      	ldr	r1, [r3, #8]
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	685a      	ldr	r2, [r3, #4]
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	68db      	ldr	r3, [r3, #12]
 800b39a:	f000 fca5 	bl	800bce8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b3ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	68fa      	ldr	r2, [r7, #12]
 800b3b4:	609a      	str	r2, [r3, #8]
      break;
 800b3b6:	e04e      	b.n	800b456 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6818      	ldr	r0, [r3, #0]
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	6899      	ldr	r1, [r3, #8]
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	685a      	ldr	r2, [r3, #4]
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	f000 fc8e 	bl	800bce8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	689a      	ldr	r2, [r3, #8]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b3da:	609a      	str	r2, [r3, #8]
      break;
 800b3dc:	e03b      	b.n	800b456 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6818      	ldr	r0, [r3, #0]
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	6859      	ldr	r1, [r3, #4]
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	68db      	ldr	r3, [r3, #12]
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	f000 fc00 	bl	800bbf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2150      	movs	r1, #80	; 0x50
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f000 fc59 	bl	800bcae <TIM_ITRx_SetConfig>
      break;
 800b3fc:	e02b      	b.n	800b456 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6818      	ldr	r0, [r3, #0]
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	6859      	ldr	r1, [r3, #4]
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	461a      	mov	r2, r3
 800b40c:	f000 fc1f 	bl	800bc4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2160      	movs	r1, #96	; 0x60
 800b416:	4618      	mov	r0, r3
 800b418:	f000 fc49 	bl	800bcae <TIM_ITRx_SetConfig>
      break;
 800b41c:	e01b      	b.n	800b456 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6818      	ldr	r0, [r3, #0]
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	6859      	ldr	r1, [r3, #4]
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	461a      	mov	r2, r3
 800b42c:	f000 fbe0 	bl	800bbf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2140      	movs	r1, #64	; 0x40
 800b436:	4618      	mov	r0, r3
 800b438:	f000 fc39 	bl	800bcae <TIM_ITRx_SetConfig>
      break;
 800b43c:	e00b      	b.n	800b456 <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4619      	mov	r1, r3
 800b448:	4610      	mov	r0, r2
 800b44a:	f000 fc30 	bl	800bcae <TIM_ITRx_SetConfig>
        break;
 800b44e:	e002      	b.n	800b456 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800b450:	bf00      	nop
 800b452:	e000      	b.n	800b456 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800b454:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2201      	movs	r2, #1
 800b45a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3710      	adds	r7, #16
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	00100070 	.word	0x00100070
 800b474:	00100040 	.word	0x00100040
 800b478:	00100030 	.word	0x00100030
 800b47c:	00100020 	.word	0x00100020

0800b480 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b488:	bf00      	nop
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b49c:	bf00      	nop
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b083      	sub	sp, #12
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b4b0:	bf00      	nop
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b4c4:	bf00      	nop
 800b4c6:	370c      	adds	r7, #12
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr

0800b4d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b4d8:	bf00      	nop
 800b4da:	370c      	adds	r7, #12
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	4a3c      	ldr	r2, [pc, #240]	; (800b5e8 <TIM_Base_SetConfig+0x104>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d00f      	beq.n	800b51c <TIM_Base_SetConfig+0x38>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b502:	d00b      	beq.n	800b51c <TIM_Base_SetConfig+0x38>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	4a39      	ldr	r2, [pc, #228]	; (800b5ec <TIM_Base_SetConfig+0x108>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d007      	beq.n	800b51c <TIM_Base_SetConfig+0x38>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	4a38      	ldr	r2, [pc, #224]	; (800b5f0 <TIM_Base_SetConfig+0x10c>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d003      	beq.n	800b51c <TIM_Base_SetConfig+0x38>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	4a37      	ldr	r2, [pc, #220]	; (800b5f4 <TIM_Base_SetConfig+0x110>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d108      	bne.n	800b52e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	68fa      	ldr	r2, [r7, #12]
 800b52a:	4313      	orrs	r3, r2
 800b52c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4a2d      	ldr	r2, [pc, #180]	; (800b5e8 <TIM_Base_SetConfig+0x104>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d01b      	beq.n	800b56e <TIM_Base_SetConfig+0x8a>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b53c:	d017      	beq.n	800b56e <TIM_Base_SetConfig+0x8a>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	4a2a      	ldr	r2, [pc, #168]	; (800b5ec <TIM_Base_SetConfig+0x108>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d013      	beq.n	800b56e <TIM_Base_SetConfig+0x8a>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	4a29      	ldr	r2, [pc, #164]	; (800b5f0 <TIM_Base_SetConfig+0x10c>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d00f      	beq.n	800b56e <TIM_Base_SetConfig+0x8a>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	4a28      	ldr	r2, [pc, #160]	; (800b5f4 <TIM_Base_SetConfig+0x110>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d00b      	beq.n	800b56e <TIM_Base_SetConfig+0x8a>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	4a27      	ldr	r2, [pc, #156]	; (800b5f8 <TIM_Base_SetConfig+0x114>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d007      	beq.n	800b56e <TIM_Base_SetConfig+0x8a>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	4a26      	ldr	r2, [pc, #152]	; (800b5fc <TIM_Base_SetConfig+0x118>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d003      	beq.n	800b56e <TIM_Base_SetConfig+0x8a>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4a25      	ldr	r2, [pc, #148]	; (800b600 <TIM_Base_SetConfig+0x11c>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d108      	bne.n	800b580 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	68fa      	ldr	r2, [r7, #12]
 800b57c:	4313      	orrs	r3, r2
 800b57e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	695b      	ldr	r3, [r3, #20]
 800b58a:	4313      	orrs	r3, r2
 800b58c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	68fa      	ldr	r2, [r7, #12]
 800b592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	689a      	ldr	r2, [r3, #8]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	4a10      	ldr	r2, [pc, #64]	; (800b5e8 <TIM_Base_SetConfig+0x104>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d00f      	beq.n	800b5cc <TIM_Base_SetConfig+0xe8>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	4a11      	ldr	r2, [pc, #68]	; (800b5f4 <TIM_Base_SetConfig+0x110>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d00b      	beq.n	800b5cc <TIM_Base_SetConfig+0xe8>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	4a10      	ldr	r2, [pc, #64]	; (800b5f8 <TIM_Base_SetConfig+0x114>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d007      	beq.n	800b5cc <TIM_Base_SetConfig+0xe8>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	4a0f      	ldr	r2, [pc, #60]	; (800b5fc <TIM_Base_SetConfig+0x118>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d003      	beq.n	800b5cc <TIM_Base_SetConfig+0xe8>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	4a0e      	ldr	r2, [pc, #56]	; (800b600 <TIM_Base_SetConfig+0x11c>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d103      	bne.n	800b5d4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	691a      	ldr	r2, [r3, #16]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	615a      	str	r2, [r3, #20]
}
 800b5da:	bf00      	nop
 800b5dc:	3714      	adds	r7, #20
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr
 800b5e6:	bf00      	nop
 800b5e8:	40012c00 	.word	0x40012c00
 800b5ec:	40000400 	.word	0x40000400
 800b5f0:	40000800 	.word	0x40000800
 800b5f4:	40013400 	.word	0x40013400
 800b5f8:	40014000 	.word	0x40014000
 800b5fc:	40014400 	.word	0x40014400
 800b600:	40014800 	.word	0x40014800

0800b604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b604:	b480      	push	{r7}
 800b606:	b087      	sub	sp, #28
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6a1b      	ldr	r3, [r3, #32]
 800b612:	f023 0201 	bic.w	r2, r3, #1
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a1b      	ldr	r3, [r3, #32]
 800b61e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f023 0303 	bic.w	r3, r3, #3
 800b63e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	68fa      	ldr	r2, [r7, #12]
 800b646:	4313      	orrs	r3, r2
 800b648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	f023 0302 	bic.w	r3, r3, #2
 800b650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	697a      	ldr	r2, [r7, #20]
 800b658:	4313      	orrs	r3, r2
 800b65a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4a2c      	ldr	r2, [pc, #176]	; (800b710 <TIM_OC1_SetConfig+0x10c>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d00f      	beq.n	800b684 <TIM_OC1_SetConfig+0x80>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4a2b      	ldr	r2, [pc, #172]	; (800b714 <TIM_OC1_SetConfig+0x110>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d00b      	beq.n	800b684 <TIM_OC1_SetConfig+0x80>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4a2a      	ldr	r2, [pc, #168]	; (800b718 <TIM_OC1_SetConfig+0x114>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d007      	beq.n	800b684 <TIM_OC1_SetConfig+0x80>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a29      	ldr	r2, [pc, #164]	; (800b71c <TIM_OC1_SetConfig+0x118>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d003      	beq.n	800b684 <TIM_OC1_SetConfig+0x80>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	4a28      	ldr	r2, [pc, #160]	; (800b720 <TIM_OC1_SetConfig+0x11c>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d10c      	bne.n	800b69e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	f023 0308 	bic.w	r3, r3, #8
 800b68a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	697a      	ldr	r2, [r7, #20]
 800b692:	4313      	orrs	r3, r2
 800b694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	f023 0304 	bic.w	r3, r3, #4
 800b69c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	4a1b      	ldr	r2, [pc, #108]	; (800b710 <TIM_OC1_SetConfig+0x10c>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d00f      	beq.n	800b6c6 <TIM_OC1_SetConfig+0xc2>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	4a1a      	ldr	r2, [pc, #104]	; (800b714 <TIM_OC1_SetConfig+0x110>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d00b      	beq.n	800b6c6 <TIM_OC1_SetConfig+0xc2>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	4a19      	ldr	r2, [pc, #100]	; (800b718 <TIM_OC1_SetConfig+0x114>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d007      	beq.n	800b6c6 <TIM_OC1_SetConfig+0xc2>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4a18      	ldr	r2, [pc, #96]	; (800b71c <TIM_OC1_SetConfig+0x118>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d003      	beq.n	800b6c6 <TIM_OC1_SetConfig+0xc2>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	4a17      	ldr	r2, [pc, #92]	; (800b720 <TIM_OC1_SetConfig+0x11c>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d111      	bne.n	800b6ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b6d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	695b      	ldr	r3, [r3, #20]
 800b6da:	693a      	ldr	r2, [r7, #16]
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	699b      	ldr	r3, [r3, #24]
 800b6e4:	693a      	ldr	r2, [r7, #16]
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	693a      	ldr	r2, [r7, #16]
 800b6ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	68fa      	ldr	r2, [r7, #12]
 800b6f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	685a      	ldr	r2, [r3, #4]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	697a      	ldr	r2, [r7, #20]
 800b702:	621a      	str	r2, [r3, #32]
}
 800b704:	bf00      	nop
 800b706:	371c      	adds	r7, #28
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr
 800b710:	40012c00 	.word	0x40012c00
 800b714:	40013400 	.word	0x40013400
 800b718:	40014000 	.word	0x40014000
 800b71c:	40014400 	.word	0x40014400
 800b720:	40014800 	.word	0x40014800

0800b724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b724:	b480      	push	{r7}
 800b726:	b087      	sub	sp, #28
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	f023 0210 	bic.w	r2, r3, #16
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6a1b      	ldr	r3, [r3, #32]
 800b73e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	699b      	ldr	r3, [r3, #24]
 800b74a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b75e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	021b      	lsls	r3, r3, #8
 800b766:	68fa      	ldr	r2, [r7, #12]
 800b768:	4313      	orrs	r3, r2
 800b76a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	f023 0320 	bic.w	r3, r3, #32
 800b772:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	011b      	lsls	r3, r3, #4
 800b77a:	697a      	ldr	r2, [r7, #20]
 800b77c:	4313      	orrs	r3, r2
 800b77e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a28      	ldr	r2, [pc, #160]	; (800b824 <TIM_OC2_SetConfig+0x100>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d003      	beq.n	800b790 <TIM_OC2_SetConfig+0x6c>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4a27      	ldr	r2, [pc, #156]	; (800b828 <TIM_OC2_SetConfig+0x104>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d10d      	bne.n	800b7ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	011b      	lsls	r3, r3, #4
 800b79e:	697a      	ldr	r2, [r7, #20]
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	4a1d      	ldr	r2, [pc, #116]	; (800b824 <TIM_OC2_SetConfig+0x100>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d00f      	beq.n	800b7d4 <TIM_OC2_SetConfig+0xb0>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	4a1c      	ldr	r2, [pc, #112]	; (800b828 <TIM_OC2_SetConfig+0x104>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d00b      	beq.n	800b7d4 <TIM_OC2_SetConfig+0xb0>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	4a1b      	ldr	r2, [pc, #108]	; (800b82c <TIM_OC2_SetConfig+0x108>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d007      	beq.n	800b7d4 <TIM_OC2_SetConfig+0xb0>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	4a1a      	ldr	r2, [pc, #104]	; (800b830 <TIM_OC2_SetConfig+0x10c>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d003      	beq.n	800b7d4 <TIM_OC2_SetConfig+0xb0>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	4a19      	ldr	r2, [pc, #100]	; (800b834 <TIM_OC2_SetConfig+0x110>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d113      	bne.n	800b7fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b7da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b7e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	695b      	ldr	r3, [r3, #20]
 800b7e8:	009b      	lsls	r3, r3, #2
 800b7ea:	693a      	ldr	r2, [r7, #16]
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	699b      	ldr	r3, [r3, #24]
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	693a      	ldr	r2, [r7, #16]
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	693a      	ldr	r2, [r7, #16]
 800b800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	68fa      	ldr	r2, [r7, #12]
 800b806:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	697a      	ldr	r2, [r7, #20]
 800b814:	621a      	str	r2, [r3, #32]
}
 800b816:	bf00      	nop
 800b818:	371c      	adds	r7, #28
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr
 800b822:	bf00      	nop
 800b824:	40012c00 	.word	0x40012c00
 800b828:	40013400 	.word	0x40013400
 800b82c:	40014000 	.word	0x40014000
 800b830:	40014400 	.word	0x40014400
 800b834:	40014800 	.word	0x40014800

0800b838 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b838:	b480      	push	{r7}
 800b83a:	b087      	sub	sp, #28
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6a1b      	ldr	r3, [r3, #32]
 800b846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6a1b      	ldr	r3, [r3, #32]
 800b852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	69db      	ldr	r3, [r3, #28]
 800b85e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b86a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f023 0303 	bic.w	r3, r3, #3
 800b872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	4313      	orrs	r3, r2
 800b87c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	021b      	lsls	r3, r3, #8
 800b88c:	697a      	ldr	r2, [r7, #20]
 800b88e:	4313      	orrs	r3, r2
 800b890:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	4a27      	ldr	r2, [pc, #156]	; (800b934 <TIM_OC3_SetConfig+0xfc>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d003      	beq.n	800b8a2 <TIM_OC3_SetConfig+0x6a>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	4a26      	ldr	r2, [pc, #152]	; (800b938 <TIM_OC3_SetConfig+0x100>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d10d      	bne.n	800b8be <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b8a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	021b      	lsls	r3, r3, #8
 800b8b0:	697a      	ldr	r2, [r7, #20]
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b8bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	4a1c      	ldr	r2, [pc, #112]	; (800b934 <TIM_OC3_SetConfig+0xfc>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d00f      	beq.n	800b8e6 <TIM_OC3_SetConfig+0xae>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	4a1b      	ldr	r2, [pc, #108]	; (800b938 <TIM_OC3_SetConfig+0x100>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d00b      	beq.n	800b8e6 <TIM_OC3_SetConfig+0xae>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	4a1a      	ldr	r2, [pc, #104]	; (800b93c <TIM_OC3_SetConfig+0x104>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d007      	beq.n	800b8e6 <TIM_OC3_SetConfig+0xae>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	4a19      	ldr	r2, [pc, #100]	; (800b940 <TIM_OC3_SetConfig+0x108>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d003      	beq.n	800b8e6 <TIM_OC3_SetConfig+0xae>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	4a18      	ldr	r2, [pc, #96]	; (800b944 <TIM_OC3_SetConfig+0x10c>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d113      	bne.n	800b90e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b8f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	695b      	ldr	r3, [r3, #20]
 800b8fa:	011b      	lsls	r3, r3, #4
 800b8fc:	693a      	ldr	r2, [r7, #16]
 800b8fe:	4313      	orrs	r3, r2
 800b900:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	699b      	ldr	r3, [r3, #24]
 800b906:	011b      	lsls	r3, r3, #4
 800b908:	693a      	ldr	r2, [r7, #16]
 800b90a:	4313      	orrs	r3, r2
 800b90c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	693a      	ldr	r2, [r7, #16]
 800b912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	68fa      	ldr	r2, [r7, #12]
 800b918:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	685a      	ldr	r2, [r3, #4]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	697a      	ldr	r2, [r7, #20]
 800b926:	621a      	str	r2, [r3, #32]
}
 800b928:	bf00      	nop
 800b92a:	371c      	adds	r7, #28
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr
 800b934:	40012c00 	.word	0x40012c00
 800b938:	40013400 	.word	0x40013400
 800b93c:	40014000 	.word	0x40014000
 800b940:	40014400 	.word	0x40014400
 800b944:	40014800 	.word	0x40014800

0800b948 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b948:	b480      	push	{r7}
 800b94a:	b087      	sub	sp, #28
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6a1b      	ldr	r3, [r3, #32]
 800b956:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6a1b      	ldr	r3, [r3, #32]
 800b962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	69db      	ldr	r3, [r3, #28]
 800b96e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b97a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	021b      	lsls	r3, r3, #8
 800b98a:	68fa      	ldr	r2, [r7, #12]
 800b98c:	4313      	orrs	r3, r2
 800b98e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b996:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	031b      	lsls	r3, r3, #12
 800b99e:	697a      	ldr	r2, [r7, #20]
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4a28      	ldr	r2, [pc, #160]	; (800ba48 <TIM_OC4_SetConfig+0x100>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d003      	beq.n	800b9b4 <TIM_OC4_SetConfig+0x6c>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	4a27      	ldr	r2, [pc, #156]	; (800ba4c <TIM_OC4_SetConfig+0x104>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d10d      	bne.n	800b9d0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b9ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	031b      	lsls	r3, r3, #12
 800b9c2:	697a      	ldr	r2, [r7, #20]
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b9ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	4a1d      	ldr	r2, [pc, #116]	; (800ba48 <TIM_OC4_SetConfig+0x100>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d00f      	beq.n	800b9f8 <TIM_OC4_SetConfig+0xb0>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	4a1c      	ldr	r2, [pc, #112]	; (800ba4c <TIM_OC4_SetConfig+0x104>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d00b      	beq.n	800b9f8 <TIM_OC4_SetConfig+0xb0>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	4a1b      	ldr	r2, [pc, #108]	; (800ba50 <TIM_OC4_SetConfig+0x108>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d007      	beq.n	800b9f8 <TIM_OC4_SetConfig+0xb0>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	4a1a      	ldr	r2, [pc, #104]	; (800ba54 <TIM_OC4_SetConfig+0x10c>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d003      	beq.n	800b9f8 <TIM_OC4_SetConfig+0xb0>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	4a19      	ldr	r2, [pc, #100]	; (800ba58 <TIM_OC4_SetConfig+0x110>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d113      	bne.n	800ba20 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b9fe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ba06:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	695b      	ldr	r3, [r3, #20]
 800ba0c:	019b      	lsls	r3, r3, #6
 800ba0e:	693a      	ldr	r2, [r7, #16]
 800ba10:	4313      	orrs	r3, r2
 800ba12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	699b      	ldr	r3, [r3, #24]
 800ba18:	019b      	lsls	r3, r3, #6
 800ba1a:	693a      	ldr	r2, [r7, #16]
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	693a      	ldr	r2, [r7, #16]
 800ba24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	685a      	ldr	r2, [r3, #4]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	697a      	ldr	r2, [r7, #20]
 800ba38:	621a      	str	r2, [r3, #32]
}
 800ba3a:	bf00      	nop
 800ba3c:	371c      	adds	r7, #28
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr
 800ba46:	bf00      	nop
 800ba48:	40012c00 	.word	0x40012c00
 800ba4c:	40013400 	.word	0x40013400
 800ba50:	40014000 	.word	0x40014000
 800ba54:	40014400 	.word	0x40014400
 800ba58:	40014800 	.word	0x40014800

0800ba5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b087      	sub	sp, #28
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a1b      	ldr	r3, [r3, #32]
 800ba6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6a1b      	ldr	r3, [r3, #32]
 800ba76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	68fa      	ldr	r2, [r7, #12]
 800ba96:	4313      	orrs	r3, r2
 800ba98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800baa0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	041b      	lsls	r3, r3, #16
 800baa8:	693a      	ldr	r2, [r7, #16]
 800baaa:	4313      	orrs	r3, r2
 800baac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	4a17      	ldr	r2, [pc, #92]	; (800bb10 <TIM_OC5_SetConfig+0xb4>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d00f      	beq.n	800bad6 <TIM_OC5_SetConfig+0x7a>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	4a16      	ldr	r2, [pc, #88]	; (800bb14 <TIM_OC5_SetConfig+0xb8>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d00b      	beq.n	800bad6 <TIM_OC5_SetConfig+0x7a>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	4a15      	ldr	r2, [pc, #84]	; (800bb18 <TIM_OC5_SetConfig+0xbc>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d007      	beq.n	800bad6 <TIM_OC5_SetConfig+0x7a>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	4a14      	ldr	r2, [pc, #80]	; (800bb1c <TIM_OC5_SetConfig+0xc0>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d003      	beq.n	800bad6 <TIM_OC5_SetConfig+0x7a>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	4a13      	ldr	r2, [pc, #76]	; (800bb20 <TIM_OC5_SetConfig+0xc4>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d109      	bne.n	800baea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800badc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	695b      	ldr	r3, [r3, #20]
 800bae2:	021b      	lsls	r3, r3, #8
 800bae4:	697a      	ldr	r2, [r7, #20]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	697a      	ldr	r2, [r7, #20]
 800baee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	68fa      	ldr	r2, [r7, #12]
 800baf4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	685a      	ldr	r2, [r3, #4]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	693a      	ldr	r2, [r7, #16]
 800bb02:	621a      	str	r2, [r3, #32]
}
 800bb04:	bf00      	nop
 800bb06:	371c      	adds	r7, #28
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr
 800bb10:	40012c00 	.word	0x40012c00
 800bb14:	40013400 	.word	0x40013400
 800bb18:	40014000 	.word	0x40014000
 800bb1c:	40014400 	.word	0x40014400
 800bb20:	40014800 	.word	0x40014800

0800bb24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b087      	sub	sp, #28
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6a1b      	ldr	r3, [r3, #32]
 800bb32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6a1b      	ldr	r3, [r3, #32]
 800bb3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bb52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	021b      	lsls	r3, r3, #8
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	4313      	orrs	r3, r2
 800bb62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bb6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	051b      	lsls	r3, r3, #20
 800bb72:	693a      	ldr	r2, [r7, #16]
 800bb74:	4313      	orrs	r3, r2
 800bb76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4a18      	ldr	r2, [pc, #96]	; (800bbdc <TIM_OC6_SetConfig+0xb8>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d00f      	beq.n	800bba0 <TIM_OC6_SetConfig+0x7c>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	4a17      	ldr	r2, [pc, #92]	; (800bbe0 <TIM_OC6_SetConfig+0xbc>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d00b      	beq.n	800bba0 <TIM_OC6_SetConfig+0x7c>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	4a16      	ldr	r2, [pc, #88]	; (800bbe4 <TIM_OC6_SetConfig+0xc0>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d007      	beq.n	800bba0 <TIM_OC6_SetConfig+0x7c>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	4a15      	ldr	r2, [pc, #84]	; (800bbe8 <TIM_OC6_SetConfig+0xc4>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d003      	beq.n	800bba0 <TIM_OC6_SetConfig+0x7c>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	4a14      	ldr	r2, [pc, #80]	; (800bbec <TIM_OC6_SetConfig+0xc8>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d109      	bne.n	800bbb4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bba6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	695b      	ldr	r3, [r3, #20]
 800bbac:	029b      	lsls	r3, r3, #10
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	697a      	ldr	r2, [r7, #20]
 800bbb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	685a      	ldr	r2, [r3, #4]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	693a      	ldr	r2, [r7, #16]
 800bbcc:	621a      	str	r2, [r3, #32]
}
 800bbce:	bf00      	nop
 800bbd0:	371c      	adds	r7, #28
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop
 800bbdc:	40012c00 	.word	0x40012c00
 800bbe0:	40013400 	.word	0x40013400
 800bbe4:	40014000 	.word	0x40014000
 800bbe8:	40014400 	.word	0x40014400
 800bbec:	40014800 	.word	0x40014800

0800bbf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b087      	sub	sp, #28
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	6a1b      	ldr	r3, [r3, #32]
 800bc00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6a1b      	ldr	r3, [r3, #32]
 800bc06:	f023 0201 	bic.w	r2, r3, #1
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	699b      	ldr	r3, [r3, #24]
 800bc12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	011b      	lsls	r3, r3, #4
 800bc20:	693a      	ldr	r2, [r7, #16]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f023 030a 	bic.w	r3, r3, #10
 800bc2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bc2e:	697a      	ldr	r2, [r7, #20]
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	693a      	ldr	r2, [r7, #16]
 800bc3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	697a      	ldr	r2, [r7, #20]
 800bc40:	621a      	str	r2, [r3, #32]
}
 800bc42:	bf00      	nop
 800bc44:	371c      	adds	r7, #28
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr

0800bc4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc4e:	b480      	push	{r7}
 800bc50:	b087      	sub	sp, #28
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	60f8      	str	r0, [r7, #12]
 800bc56:	60b9      	str	r1, [r7, #8]
 800bc58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	6a1b      	ldr	r3, [r3, #32]
 800bc5e:	f023 0210 	bic.w	r2, r3, #16
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	699b      	ldr	r3, [r3, #24]
 800bc6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	6a1b      	ldr	r3, [r3, #32]
 800bc70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bc78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	031b      	lsls	r3, r3, #12
 800bc7e:	697a      	ldr	r2, [r7, #20]
 800bc80:	4313      	orrs	r3, r2
 800bc82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bc8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	011b      	lsls	r3, r3, #4
 800bc90:	693a      	ldr	r2, [r7, #16]
 800bc92:	4313      	orrs	r3, r2
 800bc94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	697a      	ldr	r2, [r7, #20]
 800bc9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	693a      	ldr	r2, [r7, #16]
 800bca0:	621a      	str	r2, [r3, #32]
}
 800bca2:	bf00      	nop
 800bca4:	371c      	adds	r7, #28
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bcae:	b480      	push	{r7}
 800bcb0:	b085      	sub	sp, #20
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
 800bcb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	689b      	ldr	r3, [r3, #8]
 800bcbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800bcc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bcca:	683a      	ldr	r2, [r7, #0]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	f043 0307 	orr.w	r3, r3, #7
 800bcd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	609a      	str	r2, [r3, #8]
}
 800bcdc:	bf00      	nop
 800bcde:	3714      	adds	r7, #20
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b087      	sub	sp, #28
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	607a      	str	r2, [r7, #4]
 800bcf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	021a      	lsls	r2, r3, #8
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	431a      	orrs	r2, r3
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	697a      	ldr	r2, [r7, #20]
 800bd12:	4313      	orrs	r3, r2
 800bd14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	697a      	ldr	r2, [r7, #20]
 800bd1a:	609a      	str	r2, [r3, #8]
}
 800bd1c:	bf00      	nop
 800bd1e:	371c      	adds	r7, #28
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr

0800bd28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b087      	sub	sp, #28
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	f003 031f 	and.w	r3, r3, #31
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	6a1a      	ldr	r2, [r3, #32]
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	43db      	mvns	r3, r3
 800bd4a:	401a      	ands	r2, r3
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6a1a      	ldr	r2, [r3, #32]
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	f003 031f 	and.w	r3, r3, #31
 800bd5a:	6879      	ldr	r1, [r7, #4]
 800bd5c:	fa01 f303 	lsl.w	r3, r1, r3
 800bd60:	431a      	orrs	r2, r3
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	621a      	str	r2, [r3, #32]
}
 800bd66:	bf00      	nop
 800bd68:	371c      	adds	r7, #28
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr
	...

0800bd74 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d109      	bne.n	800bd98 <HAL_TIMEx_PWMN_Start+0x24>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	bf14      	ite	ne
 800bd90:	2301      	movne	r3, #1
 800bd92:	2300      	moveq	r3, #0
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	e022      	b.n	800bdde <HAL_TIMEx_PWMN_Start+0x6a>
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	2b04      	cmp	r3, #4
 800bd9c:	d109      	bne.n	800bdb2 <HAL_TIMEx_PWMN_Start+0x3e>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	bf14      	ite	ne
 800bdaa:	2301      	movne	r3, #1
 800bdac:	2300      	moveq	r3, #0
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	e015      	b.n	800bdde <HAL_TIMEx_PWMN_Start+0x6a>
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	2b08      	cmp	r3, #8
 800bdb6:	d109      	bne.n	800bdcc <HAL_TIMEx_PWMN_Start+0x58>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	bf14      	ite	ne
 800bdc4:	2301      	movne	r3, #1
 800bdc6:	2300      	moveq	r3, #0
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	e008      	b.n	800bdde <HAL_TIMEx_PWMN_Start+0x6a>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	bf14      	ite	ne
 800bdd8:	2301      	movne	r3, #1
 800bdda:	2300      	moveq	r3, #0
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d001      	beq.n	800bde6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800bde2:	2301      	movs	r3, #1
 800bde4:	e069      	b.n	800beba <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d104      	bne.n	800bdf6 <HAL_TIMEx_PWMN_Start+0x82>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2202      	movs	r2, #2
 800bdf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdf4:	e013      	b.n	800be1e <HAL_TIMEx_PWMN_Start+0xaa>
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	2b04      	cmp	r3, #4
 800bdfa:	d104      	bne.n	800be06 <HAL_TIMEx_PWMN_Start+0x92>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2202      	movs	r2, #2
 800be00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be04:	e00b      	b.n	800be1e <HAL_TIMEx_PWMN_Start+0xaa>
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	2b08      	cmp	r3, #8
 800be0a:	d104      	bne.n	800be16 <HAL_TIMEx_PWMN_Start+0xa2>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2202      	movs	r2, #2
 800be10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800be14:	e003      	b.n	800be1e <HAL_TIMEx_PWMN_Start+0xaa>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2202      	movs	r2, #2
 800be1a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	2204      	movs	r2, #4
 800be24:	6839      	ldr	r1, [r7, #0]
 800be26:	4618      	mov	r0, r3
 800be28:	f000 f9d3 	bl	800c1d2 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be3a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a20      	ldr	r2, [pc, #128]	; (800bec4 <HAL_TIMEx_PWMN_Start+0x150>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d018      	beq.n	800be78 <HAL_TIMEx_PWMN_Start+0x104>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be4e:	d013      	beq.n	800be78 <HAL_TIMEx_PWMN_Start+0x104>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a1c      	ldr	r2, [pc, #112]	; (800bec8 <HAL_TIMEx_PWMN_Start+0x154>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d00e      	beq.n	800be78 <HAL_TIMEx_PWMN_Start+0x104>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4a1b      	ldr	r2, [pc, #108]	; (800becc <HAL_TIMEx_PWMN_Start+0x158>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d009      	beq.n	800be78 <HAL_TIMEx_PWMN_Start+0x104>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a19      	ldr	r2, [pc, #100]	; (800bed0 <HAL_TIMEx_PWMN_Start+0x15c>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d004      	beq.n	800be78 <HAL_TIMEx_PWMN_Start+0x104>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a18      	ldr	r2, [pc, #96]	; (800bed4 <HAL_TIMEx_PWMN_Start+0x160>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d115      	bne.n	800bea4 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	689a      	ldr	r2, [r3, #8]
 800be7e:	4b16      	ldr	r3, [pc, #88]	; (800bed8 <HAL_TIMEx_PWMN_Start+0x164>)
 800be80:	4013      	ands	r3, r2
 800be82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2b06      	cmp	r3, #6
 800be88:	d015      	beq.n	800beb6 <HAL_TIMEx_PWMN_Start+0x142>
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be90:	d011      	beq.n	800beb6 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	681a      	ldr	r2, [r3, #0]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f042 0201 	orr.w	r2, r2, #1
 800bea0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bea2:	e008      	b.n	800beb6 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f042 0201 	orr.w	r2, r2, #1
 800beb2:	601a      	str	r2, [r3, #0]
 800beb4:	e000      	b.n	800beb8 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800beb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800beb8:	2300      	movs	r3, #0
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	40012c00 	.word	0x40012c00
 800bec8:	40000400 	.word	0x40000400
 800becc:	40000800 	.word	0x40000800
 800bed0:	40013400 	.word	0x40013400
 800bed4:	40014000 	.word	0x40014000
 800bed8:	00010007 	.word	0x00010007

0800bedc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bedc:	b480      	push	{r7}
 800bede:	b085      	sub	sp, #20
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800beec:	2b01      	cmp	r3, #1
 800beee:	d101      	bne.n	800bef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bef0:	2302      	movs	r3, #2
 800bef2:	e065      	b.n	800bfc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2201      	movs	r2, #1
 800bef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2202      	movs	r2, #2
 800bf00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a2c      	ldr	r2, [pc, #176]	; (800bfcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d004      	beq.n	800bf28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a2b      	ldr	r2, [pc, #172]	; (800bfd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d108      	bne.n	800bf3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bf2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	68fa      	ldr	r2, [r7, #12]
 800bf36:	4313      	orrs	r3, r2
 800bf38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800bf40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	68fa      	ldr	r2, [r7, #12]
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	68fa      	ldr	r2, [r7, #12]
 800bf56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a1b      	ldr	r2, [pc, #108]	; (800bfcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d018      	beq.n	800bf94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf6a:	d013      	beq.n	800bf94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a18      	ldr	r2, [pc, #96]	; (800bfd4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d00e      	beq.n	800bf94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4a17      	ldr	r2, [pc, #92]	; (800bfd8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d009      	beq.n	800bf94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a12      	ldr	r2, [pc, #72]	; (800bfd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d004      	beq.n	800bf94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4a13      	ldr	r2, [pc, #76]	; (800bfdc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d10c      	bne.n	800bfae <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	68ba      	ldr	r2, [r7, #8]
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bfbe:	2300      	movs	r3, #0
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3714      	adds	r7, #20
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr
 800bfcc:	40012c00 	.word	0x40012c00
 800bfd0:	40013400 	.word	0x40013400
 800bfd4:	40000400 	.word	0x40000400
 800bfd8:	40000800 	.word	0x40000800
 800bfdc:	40014000 	.word	0x40014000

0800bfe0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b085      	sub	sp, #20
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bfea:	2300      	movs	r3, #0
 800bfec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d101      	bne.n	800bffc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bff8:	2302      	movs	r3, #2
 800bffa:	e087      	b.n	800c10c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	68db      	ldr	r3, [r3, #12]
 800c00e:	4313      	orrs	r3, r2
 800c010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	4313      	orrs	r3, r2
 800c01e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4313      	orrs	r3, r2
 800c03a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	691b      	ldr	r3, [r3, #16]
 800c046:	4313      	orrs	r3, r2
 800c048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	695b      	ldr	r3, [r3, #20]
 800c054:	4313      	orrs	r3, r2
 800c056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c062:	4313      	orrs	r3, r2
 800c064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	699b      	ldr	r3, [r3, #24]
 800c070:	041b      	lsls	r3, r3, #16
 800c072:	4313      	orrs	r3, r2
 800c074:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4a27      	ldr	r2, [pc, #156]	; (800c118 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d004      	beq.n	800c08a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4a25      	ldr	r2, [pc, #148]	; (800c11c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d106      	bne.n	800c098 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	69db      	ldr	r3, [r3, #28]
 800c094:	4313      	orrs	r3, r2
 800c096:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4a1e      	ldr	r2, [pc, #120]	; (800c118 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d004      	beq.n	800c0ac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4a1d      	ldr	r2, [pc, #116]	; (800c11c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d126      	bne.n	800c0fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b6:	051b      	lsls	r3, r3, #20
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	6a1b      	ldr	r3, [r3, #32]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a0e      	ldr	r2, [pc, #56]	; (800c118 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d004      	beq.n	800c0ec <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a0d      	ldr	r2, [pc, #52]	; (800c11c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d106      	bne.n	800c0fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	68fa      	ldr	r2, [r7, #12]
 800c100:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c10a:	2300      	movs	r3, #0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3714      	adds	r7, #20
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr
 800c118:	40012c00 	.word	0x40012c00
 800c11c:	40013400 	.word	0x40013400

0800c120 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c136:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 800c138:	2300      	movs	r3, #0
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	370c      	adds	r7, #12
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr

0800c146 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c146:	b480      	push	{r7}
 800c148:	b083      	sub	sp, #12
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c14e:	bf00      	nop
 800c150:	370c      	adds	r7, #12
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr

0800c15a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c15a:	b480      	push	{r7}
 800c15c:	b083      	sub	sp, #12
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c162:	bf00      	nop
 800c164:	370c      	adds	r7, #12
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr

0800c16e <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c16e:	b480      	push	{r7}
 800c170:	b083      	sub	sp, #12
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c176:	bf00      	nop
 800c178:	370c      	adds	r7, #12
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr

0800c182 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c182:	b480      	push	{r7}
 800c184:	b083      	sub	sp, #12
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c18a:	bf00      	nop
 800c18c:	370c      	adds	r7, #12
 800c18e:	46bd      	mov	sp, r7
 800c190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c194:	4770      	bx	lr

0800c196 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c196:	b480      	push	{r7}
 800c198:	b083      	sub	sp, #12
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c19e:	bf00      	nop
 800c1a0:	370c      	adds	r7, #12
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr

0800c1aa <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c1aa:	b480      	push	{r7}
 800c1ac:	b083      	sub	sp, #12
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c1b2:	bf00      	nop
 800c1b4:	370c      	adds	r7, #12
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr

0800c1be <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c1be:	b480      	push	{r7}
 800c1c0:	b083      	sub	sp, #12
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c1c6:	bf00      	nop
 800c1c8:	370c      	adds	r7, #12
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr

0800c1d2 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800c1d2:	b480      	push	{r7}
 800c1d4:	b087      	sub	sp, #28
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	60f8      	str	r0, [r7, #12]
 800c1da:	60b9      	str	r1, [r7, #8]
 800c1dc:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	f003 031f 	and.w	r3, r3, #31
 800c1e4:	2204      	movs	r2, #4
 800c1e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c1ea:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	6a1a      	ldr	r2, [r3, #32]
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	43db      	mvns	r3, r3
 800c1f4:	401a      	ands	r2, r3
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	6a1a      	ldr	r2, [r3, #32]
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	f003 031f 	and.w	r3, r3, #31
 800c204:	6879      	ldr	r1, [r7, #4]
 800c206:	fa01 f303 	lsl.w	r3, r1, r3
 800c20a:	431a      	orrs	r2, r3
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	621a      	str	r2, [r3, #32]
}
 800c210:	bf00      	nop
 800c212:	371c      	adds	r7, #28
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d101      	bne.n	800c22e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c22a:	2301      	movs	r3, #1
 800c22c:	e042      	b.n	800c2b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c234:	2b00      	cmp	r3, #0
 800c236:	d106      	bne.n	800c246 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f7f9 fc07 	bl	8005a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2224      	movs	r2, #36	; 0x24
 800c24a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f022 0201 	bic.w	r2, r2, #1
 800c25c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 fb5c 	bl	800c91c <UART_SetConfig>
 800c264:	4603      	mov	r3, r0
 800c266:	2b01      	cmp	r3, #1
 800c268:	d101      	bne.n	800c26e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c26a:	2301      	movs	r3, #1
 800c26c:	e022      	b.n	800c2b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c272:	2b00      	cmp	r3, #0
 800c274:	d002      	beq.n	800c27c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 fe1c 	bl	800ceb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	685a      	ldr	r2, [r3, #4]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c28a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	689a      	ldr	r2, [r3, #8]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c29a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f042 0201 	orr.w	r2, r2, #1
 800c2aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f000 fea3 	bl	800cff8 <UART_CheckIdleState>
 800c2b2:	4603      	mov	r3, r0
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3708      	adds	r7, #8
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b08a      	sub	sp, #40	; 0x28
 800c2c0:	af02      	add	r7, sp, #8
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	603b      	str	r3, [r7, #0]
 800c2c8:	4613      	mov	r3, r2
 800c2ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2d2:	2b20      	cmp	r3, #32
 800c2d4:	f040 8083 	bne.w	800c3de <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d002      	beq.n	800c2e4 <HAL_UART_Transmit+0x28>
 800c2de:	88fb      	ldrh	r3, [r7, #6]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d101      	bne.n	800c2e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	e07b      	b.n	800c3e0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d101      	bne.n	800c2f6 <HAL_UART_Transmit+0x3a>
 800c2f2:	2302      	movs	r3, #2
 800c2f4:	e074      	b.n	800c3e0 <HAL_UART_Transmit+0x124>
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2200      	movs	r2, #0
 800c302:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2221      	movs	r2, #33	; 0x21
 800c30a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c30e:	f7f9 fcbb 	bl	8005c88 <HAL_GetTick>
 800c312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	88fa      	ldrh	r2, [r7, #6]
 800c318:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	88fa      	ldrh	r2, [r7, #6]
 800c320:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	689b      	ldr	r3, [r3, #8]
 800c328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c32c:	d108      	bne.n	800c340 <HAL_UART_Transmit+0x84>
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	691b      	ldr	r3, [r3, #16]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d104      	bne.n	800c340 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c336:	2300      	movs	r3, #0
 800c338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	61bb      	str	r3, [r7, #24]
 800c33e:	e003      	b.n	800c348 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c344:	2300      	movs	r3, #0
 800c346:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2200      	movs	r2, #0
 800c34c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c350:	e02c      	b.n	800c3ac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	9300      	str	r3, [sp, #0]
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	2200      	movs	r2, #0
 800c35a:	2180      	movs	r1, #128	; 0x80
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f000 fe96 	bl	800d08e <UART_WaitOnFlagUntilTimeout>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d001      	beq.n	800c36c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c368:	2303      	movs	r3, #3
 800c36a:	e039      	b.n	800c3e0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d10b      	bne.n	800c38a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	881b      	ldrh	r3, [r3, #0]
 800c376:	461a      	mov	r2, r3
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c380:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	3302      	adds	r3, #2
 800c386:	61bb      	str	r3, [r7, #24]
 800c388:	e007      	b.n	800c39a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c38a:	69fb      	ldr	r3, [r7, #28]
 800c38c:	781a      	ldrb	r2, [r3, #0]
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c394:	69fb      	ldr	r3, [r7, #28]
 800c396:	3301      	adds	r3, #1
 800c398:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c3a0:	b29b      	uxth	r3, r3
 800c3a2:	3b01      	subs	r3, #1
 800c3a4:	b29a      	uxth	r2, r3
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d1cc      	bne.n	800c352 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	9300      	str	r3, [sp, #0]
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	2140      	movs	r1, #64	; 0x40
 800c3c2:	68f8      	ldr	r0, [r7, #12]
 800c3c4:	f000 fe63 	bl	800d08e <UART_WaitOnFlagUntilTimeout>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d001      	beq.n	800c3d2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c3ce:	2303      	movs	r3, #3
 800c3d0:	e006      	b.n	800c3e0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2220      	movs	r2, #32
 800c3d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	e000      	b.n	800c3e0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c3de:	2302      	movs	r3, #2
  }
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3720      	adds	r7, #32
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	4613      	mov	r3, r2
 800c3f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3fc:	2b20      	cmp	r3, #32
 800c3fe:	d131      	bne.n	800c464 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d002      	beq.n	800c40c <HAL_UART_Receive_IT+0x24>
 800c406:	88fb      	ldrh	r3, [r7, #6]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d101      	bne.n	800c410 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c40c:	2301      	movs	r3, #1
 800c40e:	e02a      	b.n	800c466 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c416:	2b01      	cmp	r3, #1
 800c418:	d101      	bne.n	800c41e <HAL_UART_Receive_IT+0x36>
 800c41a:	2302      	movs	r3, #2
 800c41c:	e023      	b.n	800c466 <HAL_UART_Receive_IT+0x7e>
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2200      	movs	r2, #0
 800c42a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a0f      	ldr	r2, [pc, #60]	; (800c470 <HAL_UART_Receive_IT+0x88>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d00e      	beq.n	800c454 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c440:	2b00      	cmp	r3, #0
 800c442:	d007      	beq.n	800c454 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c452:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c454:	88fb      	ldrh	r3, [r7, #6]
 800c456:	461a      	mov	r2, r3
 800c458:	68b9      	ldr	r1, [r7, #8]
 800c45a:	68f8      	ldr	r0, [r7, #12]
 800c45c:	f000 fe98 	bl	800d190 <UART_Start_Receive_IT>
 800c460:	4603      	mov	r3, r0
 800c462:	e000      	b.n	800c466 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800c464:	2302      	movs	r3, #2
  }
}
 800c466:	4618      	mov	r0, r3
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	40008000 	.word	0x40008000

0800c474 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b088      	sub	sp, #32
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	69db      	ldr	r3, [r3, #28]
 800c482:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	689b      	ldr	r3, [r3, #8]
 800c492:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c494:	69fa      	ldr	r2, [r7, #28]
 800c496:	f640 030f 	movw	r3, #2063	; 0x80f
 800c49a:	4013      	ands	r3, r2
 800c49c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d118      	bne.n	800c4d6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c4a4:	69fb      	ldr	r3, [r7, #28]
 800c4a6:	f003 0320 	and.w	r3, r3, #32
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d013      	beq.n	800c4d6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c4ae:	69bb      	ldr	r3, [r7, #24]
 800c4b0:	f003 0320 	and.w	r3, r3, #32
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d104      	bne.n	800c4c2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d009      	beq.n	800c4d6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	f000 81fb 	beq.w	800c8c2 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	4798      	blx	r3
      }
      return;
 800c4d4:	e1f5      	b.n	800c8c2 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	f000 80ef 	beq.w	800c6bc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c4de:	697a      	ldr	r2, [r7, #20]
 800c4e0:	4b73      	ldr	r3, [pc, #460]	; (800c6b0 <HAL_UART_IRQHandler+0x23c>)
 800c4e2:	4013      	ands	r3, r2
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d105      	bne.n	800c4f4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c4e8:	69ba      	ldr	r2, [r7, #24]
 800c4ea:	4b72      	ldr	r3, [pc, #456]	; (800c6b4 <HAL_UART_IRQHandler+0x240>)
 800c4ec:	4013      	ands	r3, r2
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	f000 80e4 	beq.w	800c6bc <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	f003 0301 	and.w	r3, r3, #1
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d010      	beq.n	800c520 <HAL_UART_IRQHandler+0xac>
 800c4fe:	69bb      	ldr	r3, [r7, #24]
 800c500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c504:	2b00      	cmp	r3, #0
 800c506:	d00b      	beq.n	800c520 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	2201      	movs	r2, #1
 800c50e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c516:	f043 0201 	orr.w	r2, r3, #1
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c520:	69fb      	ldr	r3, [r7, #28]
 800c522:	f003 0302 	and.w	r3, r3, #2
 800c526:	2b00      	cmp	r3, #0
 800c528:	d010      	beq.n	800c54c <HAL_UART_IRQHandler+0xd8>
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	f003 0301 	and.w	r3, r3, #1
 800c530:	2b00      	cmp	r3, #0
 800c532:	d00b      	beq.n	800c54c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	2202      	movs	r2, #2
 800c53a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c542:	f043 0204 	orr.w	r2, r3, #4
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c54c:	69fb      	ldr	r3, [r7, #28]
 800c54e:	f003 0304 	and.w	r3, r3, #4
 800c552:	2b00      	cmp	r3, #0
 800c554:	d010      	beq.n	800c578 <HAL_UART_IRQHandler+0x104>
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	f003 0301 	and.w	r3, r3, #1
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d00b      	beq.n	800c578 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2204      	movs	r2, #4
 800c566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c56e:	f043 0202 	orr.w	r2, r3, #2
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c578:	69fb      	ldr	r3, [r7, #28]
 800c57a:	f003 0308 	and.w	r3, r3, #8
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d015      	beq.n	800c5ae <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c582:	69bb      	ldr	r3, [r7, #24]
 800c584:	f003 0320 	and.w	r3, r3, #32
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d104      	bne.n	800c596 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c58c:	697a      	ldr	r2, [r7, #20]
 800c58e:	4b48      	ldr	r3, [pc, #288]	; (800c6b0 <HAL_UART_IRQHandler+0x23c>)
 800c590:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c592:	2b00      	cmp	r3, #0
 800c594:	d00b      	beq.n	800c5ae <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2208      	movs	r2, #8
 800c59c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5a4:	f043 0208 	orr.w	r2, r3, #8
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c5ae:	69fb      	ldr	r3, [r7, #28]
 800c5b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d011      	beq.n	800c5dc <HAL_UART_IRQHandler+0x168>
 800c5b8:	69bb      	ldr	r3, [r7, #24]
 800c5ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d00c      	beq.n	800c5dc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c5ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5d2:	f043 0220 	orr.w	r2, r3, #32
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	f000 816f 	beq.w	800c8c6 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	f003 0320 	and.w	r3, r3, #32
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d011      	beq.n	800c616 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c5f2:	69bb      	ldr	r3, [r7, #24]
 800c5f4:	f003 0320 	and.w	r3, r3, #32
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d104      	bne.n	800c606 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c602:	2b00      	cmp	r3, #0
 800c604:	d007      	beq.n	800c616 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d003      	beq.n	800c616 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c61c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c628:	2b40      	cmp	r3, #64	; 0x40
 800c62a:	d004      	beq.n	800c636 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c632:	2b00      	cmp	r3, #0
 800c634:	d031      	beq.n	800c69a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 fe68 	bl	800d30c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	689b      	ldr	r3, [r3, #8]
 800c642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c646:	2b40      	cmp	r3, #64	; 0x40
 800c648:	d123      	bne.n	800c692 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	689a      	ldr	r2, [r3, #8]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c658:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d013      	beq.n	800c68a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c666:	4a14      	ldr	r2, [pc, #80]	; (800c6b8 <HAL_UART_IRQHandler+0x244>)
 800c668:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fa ffee 	bl	8007650 <HAL_DMA_Abort_IT>
 800c674:	4603      	mov	r3, r0
 800c676:	2b00      	cmp	r3, #0
 800c678:	d017      	beq.n	800c6aa <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c67e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c684:	4610      	mov	r0, r2
 800c686:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c688:	e00f      	b.n	800c6aa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 f930 	bl	800c8f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c690:	e00b      	b.n	800c6aa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 f92c 	bl	800c8f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c698:	e007      	b.n	800c6aa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 f928 	bl	800c8f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c6a8:	e10d      	b.n	800c8c6 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6aa:	bf00      	nop
    return;
 800c6ac:	e10b      	b.n	800c8c6 <HAL_UART_IRQHandler+0x452>
 800c6ae:	bf00      	nop
 800c6b0:	10000001 	.word	0x10000001
 800c6b4:	04000120 	.word	0x04000120
 800c6b8:	0800d371 	.word	0x0800d371

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	f040 80ab 	bne.w	800c81c <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	f003 0310 	and.w	r3, r3, #16
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f000 80a5 	beq.w	800c81c <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c6d2:	69bb      	ldr	r3, [r7, #24]
 800c6d4:	f003 0310 	and.w	r3, r3, #16
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	f000 809f 	beq.w	800c81c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2210      	movs	r2, #16
 800c6e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6f0:	2b40      	cmp	r3, #64	; 0x40
 800c6f2:	d155      	bne.n	800c7a0 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800c6fe:	893b      	ldrh	r3, [r7, #8]
 800c700:	2b00      	cmp	r3, #0
 800c702:	f000 80e2 	beq.w	800c8ca <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c70c:	893a      	ldrh	r2, [r7, #8]
 800c70e:	429a      	cmp	r2, r3
 800c710:	f080 80db 	bcs.w	800c8ca <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	893a      	ldrh	r2, [r7, #8]
 800c718:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f003 0320 	and.w	r3, r3, #32
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d12b      	bne.n	800c784 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c73a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	689a      	ldr	r2, [r3, #8]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f022 0201 	bic.w	r2, r2, #1
 800c74a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	689a      	ldr	r2, [r3, #8]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c75a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2220      	movs	r2, #32
 800c760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2200      	movs	r2, #0
 800c768:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f022 0210 	bic.w	r2, r2, #16
 800c778:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c77e:	4618      	mov	r0, r3
 800c780:	f7fa ff0d 	bl	800759e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c790:	b29b      	uxth	r3, r3
 800c792:	1ad3      	subs	r3, r2, r3
 800c794:	b29b      	uxth	r3, r3
 800c796:	4619      	mov	r1, r3
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 f8b3 	bl	800c904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c79e:	e094      	b.n	800c8ca <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	1ad3      	subs	r3, r2, r3
 800c7b0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	f000 8087 	beq.w	800c8ce <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 800c7c0:	897b      	ldrh	r3, [r7, #10]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	f000 8083 	beq.w	800c8ce <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	681a      	ldr	r2, [r3, #0]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c7d6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	689b      	ldr	r3, [r3, #8]
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	6812      	ldr	r2, [r2, #0]
 800c7e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c7e6:	f023 0301 	bic.w	r3, r3, #1
 800c7ea:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2220      	movs	r2, #32
 800c7f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	681a      	ldr	r2, [r3, #0]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f022 0210 	bic.w	r2, r2, #16
 800c80e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c810:	897b      	ldrh	r3, [r7, #10]
 800c812:	4619      	mov	r1, r3
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 f875 	bl	800c904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c81a:	e058      	b.n	800c8ce <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c81c:	69fb      	ldr	r3, [r7, #28]
 800c81e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c822:	2b00      	cmp	r3, #0
 800c824:	d00d      	beq.n	800c842 <HAL_UART_IRQHandler+0x3ce>
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d008      	beq.n	800c842 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c838:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f001 f8a4 	bl	800d988 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c840:	e048      	b.n	800c8d4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c842:	69fb      	ldr	r3, [r7, #28]
 800c844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d012      	beq.n	800c872 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c84c:	69bb      	ldr	r3, [r7, #24]
 800c84e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c852:	2b00      	cmp	r3, #0
 800c854:	d104      	bne.n	800c860 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d008      	beq.n	800c872 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c864:	2b00      	cmp	r3, #0
 800c866:	d034      	beq.n	800c8d2 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	4798      	blx	r3
    }
    return;
 800c870:	e02f      	b.n	800c8d2 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d008      	beq.n	800c88e <HAL_UART_IRQHandler+0x41a>
 800c87c:	69bb      	ldr	r3, [r7, #24]
 800c87e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c882:	2b00      	cmp	r3, #0
 800c884:	d003      	beq.n	800c88e <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f000 fd88 	bl	800d39c <UART_EndTransmit_IT>
    return;
 800c88c:	e022      	b.n	800c8d4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c894:	2b00      	cmp	r3, #0
 800c896:	d008      	beq.n	800c8aa <HAL_UART_IRQHandler+0x436>
 800c898:	69bb      	ldr	r3, [r7, #24]
 800c89a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d003      	beq.n	800c8aa <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f001 f884 	bl	800d9b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c8a8:	e014      	b.n	800c8d4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c8aa:	69fb      	ldr	r3, [r7, #28]
 800c8ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00f      	beq.n	800c8d4 <HAL_UART_IRQHandler+0x460>
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	da0c      	bge.n	800c8d4 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f001 f86e 	bl	800d99c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c8c0:	e008      	b.n	800c8d4 <HAL_UART_IRQHandler+0x460>
      return;
 800c8c2:	bf00      	nop
 800c8c4:	e006      	b.n	800c8d4 <HAL_UART_IRQHandler+0x460>
    return;
 800c8c6:	bf00      	nop
 800c8c8:	e004      	b.n	800c8d4 <HAL_UART_IRQHandler+0x460>
      return;
 800c8ca:	bf00      	nop
 800c8cc:	e002      	b.n	800c8d4 <HAL_UART_IRQHandler+0x460>
      return;
 800c8ce:	bf00      	nop
 800c8d0:	e000      	b.n	800c8d4 <HAL_UART_IRQHandler+0x460>
    return;
 800c8d2:	bf00      	nop
  }
}
 800c8d4:	3720      	adds	r7, #32
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop

0800c8dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c8e4:	bf00      	nop
 800c8e6:	370c      	adds	r7, #12
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c8f8:	bf00      	nop
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c904:	b480      	push	{r7}
 800c906:	b083      	sub	sp, #12
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	460b      	mov	r3, r1
 800c90e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c910:	bf00      	nop
 800c912:	370c      	adds	r7, #12
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr

0800c91c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c91c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c920:	b08c      	sub	sp, #48	; 0x30
 800c922:	af00      	add	r7, sp, #0
 800c924:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c926:	2300      	movs	r3, #0
 800c928:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	689a      	ldr	r2, [r3, #8]
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	691b      	ldr	r3, [r3, #16]
 800c934:	431a      	orrs	r2, r3
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	695b      	ldr	r3, [r3, #20]
 800c93a:	431a      	orrs	r2, r3
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	69db      	ldr	r3, [r3, #28]
 800c940:	4313      	orrs	r3, r2
 800c942:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	681a      	ldr	r2, [r3, #0]
 800c94a:	4bab      	ldr	r3, [pc, #684]	; (800cbf8 <UART_SetConfig+0x2dc>)
 800c94c:	4013      	ands	r3, r2
 800c94e:	697a      	ldr	r2, [r7, #20]
 800c950:	6812      	ldr	r2, [r2, #0]
 800c952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c954:	430b      	orrs	r3, r1
 800c956:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	68da      	ldr	r2, [r3, #12]
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	430a      	orrs	r2, r1
 800c96c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	699b      	ldr	r3, [r3, #24]
 800c972:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4aa0      	ldr	r2, [pc, #640]	; (800cbfc <UART_SetConfig+0x2e0>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d004      	beq.n	800c988 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	6a1b      	ldr	r3, [r3, #32]
 800c982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c984:	4313      	orrs	r3, r2
 800c986:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	689b      	ldr	r3, [r3, #8]
 800c98e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c992:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c996:	697a      	ldr	r2, [r7, #20]
 800c998:	6812      	ldr	r2, [r2, #0]
 800c99a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c99c:	430b      	orrs	r3, r1
 800c99e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a6:	f023 010f 	bic.w	r1, r3, #15
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	430a      	orrs	r2, r1
 800c9b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4a91      	ldr	r2, [pc, #580]	; (800cc00 <UART_SetConfig+0x2e4>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d125      	bne.n	800ca0c <UART_SetConfig+0xf0>
 800c9c0:	4b90      	ldr	r3, [pc, #576]	; (800cc04 <UART_SetConfig+0x2e8>)
 800c9c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9c6:	f003 0303 	and.w	r3, r3, #3
 800c9ca:	2b03      	cmp	r3, #3
 800c9cc:	d81a      	bhi.n	800ca04 <UART_SetConfig+0xe8>
 800c9ce:	a201      	add	r2, pc, #4	; (adr r2, 800c9d4 <UART_SetConfig+0xb8>)
 800c9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d4:	0800c9e5 	.word	0x0800c9e5
 800c9d8:	0800c9f5 	.word	0x0800c9f5
 800c9dc:	0800c9ed 	.word	0x0800c9ed
 800c9e0:	0800c9fd 	.word	0x0800c9fd
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9ea:	e0d6      	b.n	800cb9a <UART_SetConfig+0x27e>
 800c9ec:	2302      	movs	r3, #2
 800c9ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9f2:	e0d2      	b.n	800cb9a <UART_SetConfig+0x27e>
 800c9f4:	2304      	movs	r3, #4
 800c9f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9fa:	e0ce      	b.n	800cb9a <UART_SetConfig+0x27e>
 800c9fc:	2308      	movs	r3, #8
 800c9fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca02:	e0ca      	b.n	800cb9a <UART_SetConfig+0x27e>
 800ca04:	2310      	movs	r3, #16
 800ca06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca0a:	e0c6      	b.n	800cb9a <UART_SetConfig+0x27e>
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a7d      	ldr	r2, [pc, #500]	; (800cc08 <UART_SetConfig+0x2ec>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d138      	bne.n	800ca88 <UART_SetConfig+0x16c>
 800ca16:	4b7b      	ldr	r3, [pc, #492]	; (800cc04 <UART_SetConfig+0x2e8>)
 800ca18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca1c:	f003 030c 	and.w	r3, r3, #12
 800ca20:	2b0c      	cmp	r3, #12
 800ca22:	d82d      	bhi.n	800ca80 <UART_SetConfig+0x164>
 800ca24:	a201      	add	r2, pc, #4	; (adr r2, 800ca2c <UART_SetConfig+0x110>)
 800ca26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca2a:	bf00      	nop
 800ca2c:	0800ca61 	.word	0x0800ca61
 800ca30:	0800ca81 	.word	0x0800ca81
 800ca34:	0800ca81 	.word	0x0800ca81
 800ca38:	0800ca81 	.word	0x0800ca81
 800ca3c:	0800ca71 	.word	0x0800ca71
 800ca40:	0800ca81 	.word	0x0800ca81
 800ca44:	0800ca81 	.word	0x0800ca81
 800ca48:	0800ca81 	.word	0x0800ca81
 800ca4c:	0800ca69 	.word	0x0800ca69
 800ca50:	0800ca81 	.word	0x0800ca81
 800ca54:	0800ca81 	.word	0x0800ca81
 800ca58:	0800ca81 	.word	0x0800ca81
 800ca5c:	0800ca79 	.word	0x0800ca79
 800ca60:	2300      	movs	r3, #0
 800ca62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca66:	e098      	b.n	800cb9a <UART_SetConfig+0x27e>
 800ca68:	2302      	movs	r3, #2
 800ca6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca6e:	e094      	b.n	800cb9a <UART_SetConfig+0x27e>
 800ca70:	2304      	movs	r3, #4
 800ca72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca76:	e090      	b.n	800cb9a <UART_SetConfig+0x27e>
 800ca78:	2308      	movs	r3, #8
 800ca7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca7e:	e08c      	b.n	800cb9a <UART_SetConfig+0x27e>
 800ca80:	2310      	movs	r3, #16
 800ca82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca86:	e088      	b.n	800cb9a <UART_SetConfig+0x27e>
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4a5f      	ldr	r2, [pc, #380]	; (800cc0c <UART_SetConfig+0x2f0>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d125      	bne.n	800cade <UART_SetConfig+0x1c2>
 800ca92:	4b5c      	ldr	r3, [pc, #368]	; (800cc04 <UART_SetConfig+0x2e8>)
 800ca94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ca9c:	2b30      	cmp	r3, #48	; 0x30
 800ca9e:	d016      	beq.n	800cace <UART_SetConfig+0x1b2>
 800caa0:	2b30      	cmp	r3, #48	; 0x30
 800caa2:	d818      	bhi.n	800cad6 <UART_SetConfig+0x1ba>
 800caa4:	2b20      	cmp	r3, #32
 800caa6:	d00a      	beq.n	800cabe <UART_SetConfig+0x1a2>
 800caa8:	2b20      	cmp	r3, #32
 800caaa:	d814      	bhi.n	800cad6 <UART_SetConfig+0x1ba>
 800caac:	2b00      	cmp	r3, #0
 800caae:	d002      	beq.n	800cab6 <UART_SetConfig+0x19a>
 800cab0:	2b10      	cmp	r3, #16
 800cab2:	d008      	beq.n	800cac6 <UART_SetConfig+0x1aa>
 800cab4:	e00f      	b.n	800cad6 <UART_SetConfig+0x1ba>
 800cab6:	2300      	movs	r3, #0
 800cab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cabc:	e06d      	b.n	800cb9a <UART_SetConfig+0x27e>
 800cabe:	2302      	movs	r3, #2
 800cac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cac4:	e069      	b.n	800cb9a <UART_SetConfig+0x27e>
 800cac6:	2304      	movs	r3, #4
 800cac8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cacc:	e065      	b.n	800cb9a <UART_SetConfig+0x27e>
 800cace:	2308      	movs	r3, #8
 800cad0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cad4:	e061      	b.n	800cb9a <UART_SetConfig+0x27e>
 800cad6:	2310      	movs	r3, #16
 800cad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cadc:	e05d      	b.n	800cb9a <UART_SetConfig+0x27e>
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	4a4b      	ldr	r2, [pc, #300]	; (800cc10 <UART_SetConfig+0x2f4>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d125      	bne.n	800cb34 <UART_SetConfig+0x218>
 800cae8:	4b46      	ldr	r3, [pc, #280]	; (800cc04 <UART_SetConfig+0x2e8>)
 800caea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800caee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800caf2:	2bc0      	cmp	r3, #192	; 0xc0
 800caf4:	d016      	beq.n	800cb24 <UART_SetConfig+0x208>
 800caf6:	2bc0      	cmp	r3, #192	; 0xc0
 800caf8:	d818      	bhi.n	800cb2c <UART_SetConfig+0x210>
 800cafa:	2b80      	cmp	r3, #128	; 0x80
 800cafc:	d00a      	beq.n	800cb14 <UART_SetConfig+0x1f8>
 800cafe:	2b80      	cmp	r3, #128	; 0x80
 800cb00:	d814      	bhi.n	800cb2c <UART_SetConfig+0x210>
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d002      	beq.n	800cb0c <UART_SetConfig+0x1f0>
 800cb06:	2b40      	cmp	r3, #64	; 0x40
 800cb08:	d008      	beq.n	800cb1c <UART_SetConfig+0x200>
 800cb0a:	e00f      	b.n	800cb2c <UART_SetConfig+0x210>
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb12:	e042      	b.n	800cb9a <UART_SetConfig+0x27e>
 800cb14:	2302      	movs	r3, #2
 800cb16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb1a:	e03e      	b.n	800cb9a <UART_SetConfig+0x27e>
 800cb1c:	2304      	movs	r3, #4
 800cb1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb22:	e03a      	b.n	800cb9a <UART_SetConfig+0x27e>
 800cb24:	2308      	movs	r3, #8
 800cb26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb2a:	e036      	b.n	800cb9a <UART_SetConfig+0x27e>
 800cb2c:	2310      	movs	r3, #16
 800cb2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb32:	e032      	b.n	800cb9a <UART_SetConfig+0x27e>
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a30      	ldr	r2, [pc, #192]	; (800cbfc <UART_SetConfig+0x2e0>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d12a      	bne.n	800cb94 <UART_SetConfig+0x278>
 800cb3e:	4b31      	ldr	r3, [pc, #196]	; (800cc04 <UART_SetConfig+0x2e8>)
 800cb40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cb48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cb4c:	d01a      	beq.n	800cb84 <UART_SetConfig+0x268>
 800cb4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cb52:	d81b      	bhi.n	800cb8c <UART_SetConfig+0x270>
 800cb54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb58:	d00c      	beq.n	800cb74 <UART_SetConfig+0x258>
 800cb5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb5e:	d815      	bhi.n	800cb8c <UART_SetConfig+0x270>
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d003      	beq.n	800cb6c <UART_SetConfig+0x250>
 800cb64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb68:	d008      	beq.n	800cb7c <UART_SetConfig+0x260>
 800cb6a:	e00f      	b.n	800cb8c <UART_SetConfig+0x270>
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb72:	e012      	b.n	800cb9a <UART_SetConfig+0x27e>
 800cb74:	2302      	movs	r3, #2
 800cb76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb7a:	e00e      	b.n	800cb9a <UART_SetConfig+0x27e>
 800cb7c:	2304      	movs	r3, #4
 800cb7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb82:	e00a      	b.n	800cb9a <UART_SetConfig+0x27e>
 800cb84:	2308      	movs	r3, #8
 800cb86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb8a:	e006      	b.n	800cb9a <UART_SetConfig+0x27e>
 800cb8c:	2310      	movs	r3, #16
 800cb8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb92:	e002      	b.n	800cb9a <UART_SetConfig+0x27e>
 800cb94:	2310      	movs	r3, #16
 800cb96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4a17      	ldr	r2, [pc, #92]	; (800cbfc <UART_SetConfig+0x2e0>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	f040 80a8 	bne.w	800ccf6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cba6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cbaa:	2b08      	cmp	r3, #8
 800cbac:	d834      	bhi.n	800cc18 <UART_SetConfig+0x2fc>
 800cbae:	a201      	add	r2, pc, #4	; (adr r2, 800cbb4 <UART_SetConfig+0x298>)
 800cbb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbb4:	0800cbd9 	.word	0x0800cbd9
 800cbb8:	0800cc19 	.word	0x0800cc19
 800cbbc:	0800cbe1 	.word	0x0800cbe1
 800cbc0:	0800cc19 	.word	0x0800cc19
 800cbc4:	0800cbe7 	.word	0x0800cbe7
 800cbc8:	0800cc19 	.word	0x0800cc19
 800cbcc:	0800cc19 	.word	0x0800cc19
 800cbd0:	0800cc19 	.word	0x0800cc19
 800cbd4:	0800cbef 	.word	0x0800cbef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbd8:	f7fd fc46 	bl	800a468 <HAL_RCC_GetPCLK1Freq>
 800cbdc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cbde:	e021      	b.n	800cc24 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cbe0:	4b0c      	ldr	r3, [pc, #48]	; (800cc14 <UART_SetConfig+0x2f8>)
 800cbe2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cbe4:	e01e      	b.n	800cc24 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cbe6:	f7fd fbd1 	bl	800a38c <HAL_RCC_GetSysClockFreq>
 800cbea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cbec:	e01a      	b.n	800cc24 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbf2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cbf4:	e016      	b.n	800cc24 <UART_SetConfig+0x308>
 800cbf6:	bf00      	nop
 800cbf8:	cfff69f3 	.word	0xcfff69f3
 800cbfc:	40008000 	.word	0x40008000
 800cc00:	40013800 	.word	0x40013800
 800cc04:	40021000 	.word	0x40021000
 800cc08:	40004400 	.word	0x40004400
 800cc0c:	40004800 	.word	0x40004800
 800cc10:	40004c00 	.word	0x40004c00
 800cc14:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cc22:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f000 812a 	beq.w	800ce80 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc30:	4a9e      	ldr	r2, [pc, #632]	; (800ceac <UART_SetConfig+0x590>)
 800cc32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc36:	461a      	mov	r2, r3
 800cc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3a:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc3e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	685a      	ldr	r2, [r3, #4]
 800cc44:	4613      	mov	r3, r2
 800cc46:	005b      	lsls	r3, r3, #1
 800cc48:	4413      	add	r3, r2
 800cc4a:	69ba      	ldr	r2, [r7, #24]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d305      	bcc.n	800cc5c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cc56:	69ba      	ldr	r2, [r7, #24]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d903      	bls.n	800cc64 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cc62:	e10d      	b.n	800ce80 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc66:	2200      	movs	r2, #0
 800cc68:	60bb      	str	r3, [r7, #8]
 800cc6a:	60fa      	str	r2, [r7, #12]
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc70:	4a8e      	ldr	r2, [pc, #568]	; (800ceac <UART_SetConfig+0x590>)
 800cc72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc76:	b29b      	uxth	r3, r3
 800cc78:	2200      	movs	r2, #0
 800cc7a:	603b      	str	r3, [r7, #0]
 800cc7c:	607a      	str	r2, [r7, #4]
 800cc7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cc86:	f7f4 f827 	bl	8000cd8 <__aeabi_uldivmod>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	4610      	mov	r0, r2
 800cc90:	4619      	mov	r1, r3
 800cc92:	f04f 0200 	mov.w	r2, #0
 800cc96:	f04f 0300 	mov.w	r3, #0
 800cc9a:	020b      	lsls	r3, r1, #8
 800cc9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cca0:	0202      	lsls	r2, r0, #8
 800cca2:	6979      	ldr	r1, [r7, #20]
 800cca4:	6849      	ldr	r1, [r1, #4]
 800cca6:	0849      	lsrs	r1, r1, #1
 800cca8:	2000      	movs	r0, #0
 800ccaa:	460c      	mov	r4, r1
 800ccac:	4605      	mov	r5, r0
 800ccae:	eb12 0804 	adds.w	r8, r2, r4
 800ccb2:	eb43 0905 	adc.w	r9, r3, r5
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	469a      	mov	sl, r3
 800ccbe:	4693      	mov	fp, r2
 800ccc0:	4652      	mov	r2, sl
 800ccc2:	465b      	mov	r3, fp
 800ccc4:	4640      	mov	r0, r8
 800ccc6:	4649      	mov	r1, r9
 800ccc8:	f7f4 f806 	bl	8000cd8 <__aeabi_uldivmod>
 800cccc:	4602      	mov	r2, r0
 800ccce:	460b      	mov	r3, r1
 800ccd0:	4613      	mov	r3, r2
 800ccd2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ccd4:	6a3b      	ldr	r3, [r7, #32]
 800ccd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ccda:	d308      	bcc.n	800ccee <UART_SetConfig+0x3d2>
 800ccdc:	6a3b      	ldr	r3, [r7, #32]
 800ccde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cce2:	d204      	bcs.n	800ccee <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	6a3a      	ldr	r2, [r7, #32]
 800ccea:	60da      	str	r2, [r3, #12]
 800ccec:	e0c8      	b.n	800ce80 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800ccee:	2301      	movs	r3, #1
 800ccf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ccf4:	e0c4      	b.n	800ce80 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	69db      	ldr	r3, [r3, #28]
 800ccfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccfe:	d168      	bne.n	800cdd2 <UART_SetConfig+0x4b6>
  {
    switch (clocksource)
 800cd00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cd04:	2b08      	cmp	r3, #8
 800cd06:	d828      	bhi.n	800cd5a <UART_SetConfig+0x43e>
 800cd08:	a201      	add	r2, pc, #4	; (adr r2, 800cd10 <UART_SetConfig+0x3f4>)
 800cd0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd0e:	bf00      	nop
 800cd10:	0800cd35 	.word	0x0800cd35
 800cd14:	0800cd3d 	.word	0x0800cd3d
 800cd18:	0800cd45 	.word	0x0800cd45
 800cd1c:	0800cd5b 	.word	0x0800cd5b
 800cd20:	0800cd4b 	.word	0x0800cd4b
 800cd24:	0800cd5b 	.word	0x0800cd5b
 800cd28:	0800cd5b 	.word	0x0800cd5b
 800cd2c:	0800cd5b 	.word	0x0800cd5b
 800cd30:	0800cd53 	.word	0x0800cd53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd34:	f7fd fb98 	bl	800a468 <HAL_RCC_GetPCLK1Freq>
 800cd38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cd3a:	e014      	b.n	800cd66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd3c:	f7fd fbaa 	bl	800a494 <HAL_RCC_GetPCLK2Freq>
 800cd40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cd42:	e010      	b.n	800cd66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd44:	4b5a      	ldr	r3, [pc, #360]	; (800ceb0 <UART_SetConfig+0x594>)
 800cd46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cd48:	e00d      	b.n	800cd66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd4a:	f7fd fb1f 	bl	800a38c <HAL_RCC_GetSysClockFreq>
 800cd4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cd50:	e009      	b.n	800cd66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cd58:	e005      	b.n	800cd66 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cd64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	f000 8089 	beq.w	800ce80 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd72:	4a4e      	ldr	r2, [pc, #312]	; (800ceac <UART_SetConfig+0x590>)
 800cd74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd78:	461a      	mov	r2, r3
 800cd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd80:	005a      	lsls	r2, r3, #1
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	085b      	lsrs	r3, r3, #1
 800cd88:	441a      	add	r2, r3
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd92:	b29b      	uxth	r3, r3
 800cd94:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd96:	6a3b      	ldr	r3, [r7, #32]
 800cd98:	2b0f      	cmp	r3, #15
 800cd9a:	d916      	bls.n	800cdca <UART_SetConfig+0x4ae>
 800cd9c:	6a3b      	ldr	r3, [r7, #32]
 800cd9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cda2:	d212      	bcs.n	800cdca <UART_SetConfig+0x4ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cda4:	6a3b      	ldr	r3, [r7, #32]
 800cda6:	b29b      	uxth	r3, r3
 800cda8:	f023 030f 	bic.w	r3, r3, #15
 800cdac:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cdae:	6a3b      	ldr	r3, [r7, #32]
 800cdb0:	085b      	lsrs	r3, r3, #1
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	f003 0307 	and.w	r3, r3, #7
 800cdb8:	b29a      	uxth	r2, r3
 800cdba:	8bfb      	ldrh	r3, [r7, #30]
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	8bfa      	ldrh	r2, [r7, #30]
 800cdc6:	60da      	str	r2, [r3, #12]
 800cdc8:	e05a      	b.n	800ce80 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cdd0:	e056      	b.n	800ce80 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cdd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cdd6:	2b08      	cmp	r3, #8
 800cdd8:	d827      	bhi.n	800ce2a <UART_SetConfig+0x50e>
 800cdda:	a201      	add	r2, pc, #4	; (adr r2, 800cde0 <UART_SetConfig+0x4c4>)
 800cddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cde0:	0800ce05 	.word	0x0800ce05
 800cde4:	0800ce0d 	.word	0x0800ce0d
 800cde8:	0800ce15 	.word	0x0800ce15
 800cdec:	0800ce2b 	.word	0x0800ce2b
 800cdf0:	0800ce1b 	.word	0x0800ce1b
 800cdf4:	0800ce2b 	.word	0x0800ce2b
 800cdf8:	0800ce2b 	.word	0x0800ce2b
 800cdfc:	0800ce2b 	.word	0x0800ce2b
 800ce00:	0800ce23 	.word	0x0800ce23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce04:	f7fd fb30 	bl	800a468 <HAL_RCC_GetPCLK1Freq>
 800ce08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ce0a:	e014      	b.n	800ce36 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ce0c:	f7fd fb42 	bl	800a494 <HAL_RCC_GetPCLK2Freq>
 800ce10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ce12:	e010      	b.n	800ce36 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ce14:	4b26      	ldr	r3, [pc, #152]	; (800ceb0 <UART_SetConfig+0x594>)
 800ce16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ce18:	e00d      	b.n	800ce36 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ce1a:	f7fd fab7 	bl	800a38c <HAL_RCC_GetSysClockFreq>
 800ce1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ce20:	e009      	b.n	800ce36 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ce28:	e005      	b.n	800ce36 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ce34:	bf00      	nop
    }

    if (pclk != 0U)
 800ce36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d021      	beq.n	800ce80 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce40:	4a1a      	ldr	r2, [pc, #104]	; (800ceac <UART_SetConfig+0x590>)
 800ce42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce46:	461a      	mov	r2, r3
 800ce48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	085b      	lsrs	r3, r3, #1
 800ce54:	441a      	add	r2, r3
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ce62:	6a3b      	ldr	r3, [r7, #32]
 800ce64:	2b0f      	cmp	r3, #15
 800ce66:	d908      	bls.n	800ce7a <UART_SetConfig+0x55e>
 800ce68:	6a3b      	ldr	r3, [r7, #32]
 800ce6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce6e:	d204      	bcs.n	800ce7a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = usartdiv;
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	6a3a      	ldr	r2, [r7, #32]
 800ce76:	60da      	str	r2, [r3, #12]
 800ce78:	e002      	b.n	800ce80 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	2201      	movs	r2, #1
 800ce84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	2200      	movs	r2, #0
 800ce94:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ce9c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3730      	adds	r7, #48	; 0x30
 800cea4:	46bd      	mov	sp, r7
 800cea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ceaa:	bf00      	nop
 800ceac:	0801352c 	.word	0x0801352c
 800ceb0:	00f42400 	.word	0x00f42400

0800ceb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec0:	f003 0301 	and.w	r3, r3, #1
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d00a      	beq.n	800cede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	430a      	orrs	r2, r1
 800cedc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cee2:	f003 0302 	and.w	r3, r3, #2
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00a      	beq.n	800cf00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	430a      	orrs	r2, r1
 800cefe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf04:	f003 0304 	and.w	r3, r3, #4
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d00a      	beq.n	800cf22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	685b      	ldr	r3, [r3, #4]
 800cf12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	430a      	orrs	r2, r1
 800cf20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf26:	f003 0308 	and.w	r3, r3, #8
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d00a      	beq.n	800cf44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	430a      	orrs	r2, r1
 800cf42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf48:	f003 0310 	and.w	r3, r3, #16
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d00a      	beq.n	800cf66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	689b      	ldr	r3, [r3, #8]
 800cf56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	430a      	orrs	r2, r1
 800cf64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf6a:	f003 0320 	and.w	r3, r3, #32
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d00a      	beq.n	800cf88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	689b      	ldr	r3, [r3, #8]
 800cf78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	430a      	orrs	r2, r1
 800cf86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d01a      	beq.n	800cfca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	430a      	orrs	r2, r1
 800cfa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cfb2:	d10a      	bne.n	800cfca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	430a      	orrs	r2, r1
 800cfc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d00a      	beq.n	800cfec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	430a      	orrs	r2, r1
 800cfea:	605a      	str	r2, [r3, #4]
  }
}
 800cfec:	bf00      	nop
 800cfee:	370c      	adds	r7, #12
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr

0800cff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b086      	sub	sp, #24
 800cffc:	af02      	add	r7, sp, #8
 800cffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d008:	f7f8 fe3e 	bl	8005c88 <HAL_GetTick>
 800d00c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f003 0308 	and.w	r3, r3, #8
 800d018:	2b08      	cmp	r3, #8
 800d01a:	d10e      	bne.n	800d03a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d01c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d020:	9300      	str	r3, [sp, #0]
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2200      	movs	r2, #0
 800d026:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 f82f 	bl	800d08e <UART_WaitOnFlagUntilTimeout>
 800d030:	4603      	mov	r3, r0
 800d032:	2b00      	cmp	r3, #0
 800d034:	d001      	beq.n	800d03a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d036:	2303      	movs	r3, #3
 800d038:	e025      	b.n	800d086 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f003 0304 	and.w	r3, r3, #4
 800d044:	2b04      	cmp	r3, #4
 800d046:	d10e      	bne.n	800d066 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d04c:	9300      	str	r3, [sp, #0]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2200      	movs	r2, #0
 800d052:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 f819 	bl	800d08e <UART_WaitOnFlagUntilTimeout>
 800d05c:	4603      	mov	r3, r0
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d001      	beq.n	800d066 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d062:	2303      	movs	r3, #3
 800d064:	e00f      	b.n	800d086 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2220      	movs	r2, #32
 800d06a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2220      	movs	r2, #32
 800d072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2200      	movs	r2, #0
 800d07a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2200      	movs	r2, #0
 800d080:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d084:	2300      	movs	r3, #0
}
 800d086:	4618      	mov	r0, r3
 800d088:	3710      	adds	r7, #16
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}

0800d08e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d08e:	b580      	push	{r7, lr}
 800d090:	b084      	sub	sp, #16
 800d092:	af00      	add	r7, sp, #0
 800d094:	60f8      	str	r0, [r7, #12]
 800d096:	60b9      	str	r1, [r7, #8]
 800d098:	603b      	str	r3, [r7, #0]
 800d09a:	4613      	mov	r3, r2
 800d09c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d09e:	e062      	b.n	800d166 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d0a0:	69bb      	ldr	r3, [r7, #24]
 800d0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0a6:	d05e      	beq.n	800d166 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0a8:	f7f8 fdee 	bl	8005c88 <HAL_GetTick>
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	1ad3      	subs	r3, r2, r3
 800d0b2:	69ba      	ldr	r2, [r7, #24]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d302      	bcc.n	800d0be <UART_WaitOnFlagUntilTimeout+0x30>
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d11d      	bne.n	800d0fa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d0cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	689a      	ldr	r2, [r3, #8]
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f022 0201 	bic.w	r2, r2, #1
 800d0dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2220      	movs	r2, #32
 800d0e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	2220      	movs	r2, #32
 800d0ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d0f6:	2303      	movs	r3, #3
 800d0f8:	e045      	b.n	800d186 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f003 0304 	and.w	r3, r3, #4
 800d104:	2b00      	cmp	r3, #0
 800d106:	d02e      	beq.n	800d166 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	69db      	ldr	r3, [r3, #28]
 800d10e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d112:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d116:	d126      	bne.n	800d166 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d120:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d130:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	689a      	ldr	r2, [r3, #8]
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f022 0201 	bic.w	r2, r2, #1
 800d140:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2220      	movs	r2, #32
 800d146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2220      	movs	r2, #32
 800d14e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2220      	movs	r2, #32
 800d156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d162:	2303      	movs	r3, #3
 800d164:	e00f      	b.n	800d186 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	69da      	ldr	r2, [r3, #28]
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	4013      	ands	r3, r2
 800d170:	68ba      	ldr	r2, [r7, #8]
 800d172:	429a      	cmp	r2, r3
 800d174:	bf0c      	ite	eq
 800d176:	2301      	moveq	r3, #1
 800d178:	2300      	movne	r3, #0
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	461a      	mov	r2, r3
 800d17e:	79fb      	ldrb	r3, [r7, #7]
 800d180:	429a      	cmp	r2, r3
 800d182:	d08d      	beq.n	800d0a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d184:	2300      	movs	r3, #0
}
 800d186:	4618      	mov	r0, r3
 800d188:	3710      	adds	r7, #16
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
	...

0800d190 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d190:	b480      	push	{r7}
 800d192:	b085      	sub	sp, #20
 800d194:	af00      	add	r7, sp, #0
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	60b9      	str	r1, [r7, #8]
 800d19a:	4613      	mov	r3, r2
 800d19c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	68ba      	ldr	r2, [r7, #8]
 800d1a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	88fa      	ldrh	r2, [r7, #6]
 800d1a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	88fa      	ldrh	r2, [r7, #6]
 800d1b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	689b      	ldr	r3, [r3, #8]
 800d1be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1c2:	d10e      	bne.n	800d1e2 <UART_Start_Receive_IT+0x52>
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	691b      	ldr	r3, [r3, #16]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d105      	bne.n	800d1d8 <UART_Start_Receive_IT+0x48>
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d1d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d1d6:	e02d      	b.n	800d234 <UART_Start_Receive_IT+0xa4>
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	22ff      	movs	r2, #255	; 0xff
 800d1dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d1e0:	e028      	b.n	800d234 <UART_Start_Receive_IT+0xa4>
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d10d      	bne.n	800d206 <UART_Start_Receive_IT+0x76>
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	691b      	ldr	r3, [r3, #16]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d104      	bne.n	800d1fc <UART_Start_Receive_IT+0x6c>
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	22ff      	movs	r2, #255	; 0xff
 800d1f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d1fa:	e01b      	b.n	800d234 <UART_Start_Receive_IT+0xa4>
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	227f      	movs	r2, #127	; 0x7f
 800d200:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d204:	e016      	b.n	800d234 <UART_Start_Receive_IT+0xa4>
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	689b      	ldr	r3, [r3, #8]
 800d20a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d20e:	d10d      	bne.n	800d22c <UART_Start_Receive_IT+0x9c>
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	691b      	ldr	r3, [r3, #16]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d104      	bne.n	800d222 <UART_Start_Receive_IT+0x92>
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	227f      	movs	r2, #127	; 0x7f
 800d21c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d220:	e008      	b.n	800d234 <UART_Start_Receive_IT+0xa4>
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	223f      	movs	r2, #63	; 0x3f
 800d226:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d22a:	e003      	b.n	800d234 <UART_Start_Receive_IT+0xa4>
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2200      	movs	r2, #0
 800d230:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2200      	movs	r2, #0
 800d238:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2222      	movs	r2, #34	; 0x22
 800d240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	689a      	ldr	r2, [r3, #8]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f042 0201 	orr.w	r2, r2, #1
 800d252:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d25c:	d12a      	bne.n	800d2b4 <UART_Start_Receive_IT+0x124>
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d264:	88fa      	ldrh	r2, [r7, #6]
 800d266:	429a      	cmp	r2, r3
 800d268:	d324      	bcc.n	800d2b4 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	689b      	ldr	r3, [r3, #8]
 800d26e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d272:	d107      	bne.n	800d284 <UART_Start_Receive_IT+0xf4>
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	691b      	ldr	r3, [r3, #16]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d103      	bne.n	800d284 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	4a1f      	ldr	r2, [pc, #124]	; (800d2fc <UART_Start_Receive_IT+0x16c>)
 800d280:	671a      	str	r2, [r3, #112]	; 0x70
 800d282:	e002      	b.n	800d28a <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	4a1e      	ldr	r2, [pc, #120]	; (800d300 <UART_Start_Receive_IT+0x170>)
 800d288:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2200      	movs	r2, #0
 800d28e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	681a      	ldr	r2, [r3, #0]
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d2a0:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	689a      	ldr	r2, [r3, #8]
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d2b0:	609a      	str	r2, [r3, #8]
 800d2b2:	e01b      	b.n	800d2ec <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	689b      	ldr	r3, [r3, #8]
 800d2b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2bc:	d107      	bne.n	800d2ce <UART_Start_Receive_IT+0x13e>
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	691b      	ldr	r3, [r3, #16]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d103      	bne.n	800d2ce <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	4a0e      	ldr	r2, [pc, #56]	; (800d304 <UART_Start_Receive_IT+0x174>)
 800d2ca:	671a      	str	r2, [r3, #112]	; 0x70
 800d2cc:	e002      	b.n	800d2d4 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	4a0d      	ldr	r2, [pc, #52]	; (800d308 <UART_Start_Receive_IT+0x178>)
 800d2d2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800d2ea:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800d2ec:	2300      	movs	r3, #0
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3714      	adds	r7, #20
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f8:	4770      	bx	lr
 800d2fa:	bf00      	nop
 800d2fc:	0800d785 	.word	0x0800d785
 800d300:	0800d581 	.word	0x0800d581
 800d304:	0800d4a9 	.word	0x0800d4a9
 800d308:	0800d3d1 	.word	0x0800d3d1

0800d30c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d322:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	689b      	ldr	r3, [r3, #8]
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	6812      	ldr	r2, [r2, #0]
 800d32e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d332:	f023 0301 	bic.w	r3, r3, #1
 800d336:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d33c:	2b01      	cmp	r3, #1
 800d33e:	d107      	bne.n	800d350 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	681a      	ldr	r2, [r3, #0]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f022 0210 	bic.w	r2, r2, #16
 800d34e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2220      	movs	r2, #32
 800d354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2200      	movs	r2, #0
 800d35c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2200      	movs	r2, #0
 800d362:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d364:	bf00      	nop
 800d366:	370c      	adds	r7, #12
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr

0800d370 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d37c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	2200      	movs	r2, #0
 800d382:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2200      	movs	r2, #0
 800d38a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d38e:	68f8      	ldr	r0, [r7, #12]
 800d390:	f7ff faae 	bl	800c8f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d394:	bf00      	nop
 800d396:	3710      	adds	r7, #16
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d3b2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2220      	movs	r2, #32
 800d3b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f7ff fa8a 	bl	800c8dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d3c8:	bf00      	nop
 800d3ca:	3708      	adds	r7, #8
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b084      	sub	sp, #16
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d3de:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3e6:	2b22      	cmp	r3, #34	; 0x22
 800d3e8:	d152      	bne.n	800d490 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d3f2:	89bb      	ldrh	r3, [r7, #12]
 800d3f4:	b2d9      	uxtb	r1, r3
 800d3f6:	89fb      	ldrh	r3, [r7, #14]
 800d3f8:	b2da      	uxtb	r2, r3
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3fe:	400a      	ands	r2, r1
 800d400:	b2d2      	uxtb	r2, r2
 800d402:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d408:	1c5a      	adds	r2, r3, #1
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d414:	b29b      	uxth	r3, r3
 800d416:	3b01      	subs	r3, #1
 800d418:	b29a      	uxth	r2, r3
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d426:	b29b      	uxth	r3, r3
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d139      	bne.n	800d4a0 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d43a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	689a      	ldr	r2, [r3, #8]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f022 0201 	bic.w	r2, r2, #1
 800d44a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2220      	movs	r2, #32
 800d450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2200      	movs	r2, #0
 800d458:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d45e:	2b01      	cmp	r3, #1
 800d460:	d10f      	bne.n	800d482 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f022 0210 	bic.w	r2, r2, #16
 800d470:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d478:	4619      	mov	r1, r3
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f7ff fa42 	bl	800c904 <HAL_UARTEx_RxEventCallback>
 800d480:	e002      	b.n	800d488 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f7f8 fb44 	bl	8005b10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2200      	movs	r2, #0
 800d48c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d48e:	e007      	b.n	800d4a0 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	699a      	ldr	r2, [r3, #24]
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f042 0208 	orr.w	r2, r2, #8
 800d49e:	619a      	str	r2, [r3, #24]
}
 800d4a0:	bf00      	nop
 800d4a2:	3710      	adds	r7, #16
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}

0800d4a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b084      	sub	sp, #16
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d4b6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4be:	2b22      	cmp	r3, #34	; 0x22
 800d4c0:	d152      	bne.n	800d568 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4ce:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800d4d0:	89ba      	ldrh	r2, [r7, #12]
 800d4d2:	89fb      	ldrh	r3, [r7, #14]
 800d4d4:	4013      	ands	r3, r2
 800d4d6:	b29a      	uxth	r2, r3
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4e0:	1c9a      	adds	r2, r3, #2
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d4ec:	b29b      	uxth	r3, r3
 800d4ee:	3b01      	subs	r3, #1
 800d4f0:	b29a      	uxth	r2, r3
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	2b00      	cmp	r3, #0
 800d502:	d139      	bne.n	800d578 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d512:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	689a      	ldr	r2, [r3, #8]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f022 0201 	bic.w	r2, r2, #1
 800d522:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2220      	movs	r2, #32
 800d528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2200      	movs	r2, #0
 800d530:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d536:	2b01      	cmp	r3, #1
 800d538:	d10f      	bne.n	800d55a <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f022 0210 	bic.w	r2, r2, #16
 800d548:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d550:	4619      	mov	r1, r3
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f7ff f9d6 	bl	800c904 <HAL_UARTEx_RxEventCallback>
 800d558:	e002      	b.n	800d560 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f7f8 fad8 	bl	8005b10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2200      	movs	r2, #0
 800d564:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d566:	e007      	b.n	800d578 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	699a      	ldr	r2, [r3, #24]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f042 0208 	orr.w	r2, r2, #8
 800d576:	619a      	str	r2, [r3, #24]
}
 800d578:	bf00      	nop
 800d57a:	3710      	adds	r7, #16
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b088      	sub	sp, #32
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d58e:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	69db      	ldr	r3, [r3, #28]
 800d596:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	689b      	ldr	r3, [r3, #8]
 800d5a6:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5ae:	2b22      	cmp	r3, #34	; 0x22
 800d5b0:	f040 80da 	bne.w	800d768 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d5ba:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d5bc:	e0aa      	b.n	800d714 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c4:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d5c6:	89bb      	ldrh	r3, [r7, #12]
 800d5c8:	b2d9      	uxtb	r1, r3
 800d5ca:	8b7b      	ldrh	r3, [r7, #26]
 800d5cc:	b2da      	uxtb	r2, r3
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5d2:	400a      	ands	r2, r1
 800d5d4:	b2d2      	uxtb	r2, r2
 800d5d6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5dc:	1c5a      	adds	r2, r3, #1
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d5e8:	b29b      	uxth	r3, r3
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	b29a      	uxth	r2, r3
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	69db      	ldr	r3, [r3, #28]
 800d5fa:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	f003 0307 	and.w	r3, r3, #7
 800d602:	2b00      	cmp	r3, #0
 800d604:	d04d      	beq.n	800d6a2 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d606:	69fb      	ldr	r3, [r7, #28]
 800d608:	f003 0301 	and.w	r3, r3, #1
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d010      	beq.n	800d632 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d616:	2b00      	cmp	r3, #0
 800d618:	d00b      	beq.n	800d632 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2201      	movs	r2, #1
 800d620:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d628:	f043 0201 	orr.w	r2, r3, #1
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d632:	69fb      	ldr	r3, [r7, #28]
 800d634:	f003 0302 	and.w	r3, r3, #2
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d010      	beq.n	800d65e <UART_RxISR_8BIT_FIFOEN+0xde>
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	f003 0301 	and.w	r3, r3, #1
 800d642:	2b00      	cmp	r3, #0
 800d644:	d00b      	beq.n	800d65e <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2202      	movs	r2, #2
 800d64c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d654:	f043 0204 	orr.w	r2, r3, #4
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d65e:	69fb      	ldr	r3, [r7, #28]
 800d660:	f003 0304 	and.w	r3, r3, #4
 800d664:	2b00      	cmp	r3, #0
 800d666:	d010      	beq.n	800d68a <UART_RxISR_8BIT_FIFOEN+0x10a>
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	f003 0301 	and.w	r3, r3, #1
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d00b      	beq.n	800d68a <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2204      	movs	r2, #4
 800d678:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d680:	f043 0202 	orr.w	r2, r3, #2
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d690:	2b00      	cmp	r3, #0
 800d692:	d006      	beq.n	800d6a2 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f7ff f92b 	bl	800c8f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2200      	movs	r2, #0
 800d69e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6a8:	b29b      	uxth	r3, r3
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d132      	bne.n	800d714 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d6bc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	689b      	ldr	r3, [r3, #8]
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	6812      	ldr	r2, [r2, #0]
 800d6c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d6cc:	f023 0301 	bic.w	r3, r3, #1
 800d6d0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2220      	movs	r2, #32
 800d6d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d10f      	bne.n	800d708 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	681a      	ldr	r2, [r3, #0]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f022 0210 	bic.w	r2, r2, #16
 800d6f6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d6fe:	4619      	mov	r1, r3
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f7ff f8ff 	bl	800c904 <HAL_UARTEx_RxEventCallback>
 800d706:	e002      	b.n	800d70e <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f7f8 fa01 	bl	8005b10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2200      	movs	r2, #0
 800d712:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d714:	89fb      	ldrh	r3, [r7, #14]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d005      	beq.n	800d726 <UART_RxISR_8BIT_FIFOEN+0x1a6>
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	f003 0320 	and.w	r3, r3, #32
 800d720:	2b00      	cmp	r3, #0
 800d722:	f47f af4c 	bne.w	800d5be <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d72c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d72e:	897b      	ldrh	r3, [r7, #10]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d021      	beq.n	800d778 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d73a:	897a      	ldrh	r2, [r7, #10]
 800d73c:	429a      	cmp	r2, r3
 800d73e:	d21b      	bcs.n	800d778 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	689a      	ldr	r2, [r3, #8]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d74e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	4a0b      	ldr	r2, [pc, #44]	; (800d780 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800d754:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	681a      	ldr	r2, [r3, #0]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f042 0220 	orr.w	r2, r2, #32
 800d764:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d766:	e007      	b.n	800d778 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	699a      	ldr	r2, [r3, #24]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f042 0208 	orr.w	r2, r2, #8
 800d776:	619a      	str	r2, [r3, #24]
}
 800d778:	bf00      	nop
 800d77a:	3720      	adds	r7, #32
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}
 800d780:	0800d3d1 	.word	0x0800d3d1

0800d784 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b08a      	sub	sp, #40	; 0x28
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d792:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	69db      	ldr	r3, [r3, #28]
 800d79a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	689b      	ldr	r3, [r3, #8]
 800d7aa:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7b2:	2b22      	cmp	r3, #34	; 0x22
 800d7b4:	f040 80da 	bne.w	800d96c <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d7be:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d7c0:	e0aa      	b.n	800d918 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7c8:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7ce:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800d7d0:	8aba      	ldrh	r2, [r7, #20]
 800d7d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7d4:	4013      	ands	r3, r2
 800d7d6:	b29a      	uxth	r2, r3
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7e0:	1c9a      	adds	r2, r3, #2
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	3b01      	subs	r3, #1
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	69db      	ldr	r3, [r3, #28]
 800d7fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d802:	f003 0307 	and.w	r3, r3, #7
 800d806:	2b00      	cmp	r3, #0
 800d808:	d04d      	beq.n	800d8a6 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80c:	f003 0301 	and.w	r3, r3, #1
 800d810:	2b00      	cmp	r3, #0
 800d812:	d010      	beq.n	800d836 <UART_RxISR_16BIT_FIFOEN+0xb2>
 800d814:	69fb      	ldr	r3, [r7, #28]
 800d816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d00b      	beq.n	800d836 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	2201      	movs	r2, #1
 800d824:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d82c:	f043 0201 	orr.w	r2, r3, #1
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d838:	f003 0302 	and.w	r3, r3, #2
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d010      	beq.n	800d862 <UART_RxISR_16BIT_FIFOEN+0xde>
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	f003 0301 	and.w	r3, r3, #1
 800d846:	2b00      	cmp	r3, #0
 800d848:	d00b      	beq.n	800d862 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	2202      	movs	r2, #2
 800d850:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d858:	f043 0204 	orr.w	r2, r3, #4
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d864:	f003 0304 	and.w	r3, r3, #4
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d010      	beq.n	800d88e <UART_RxISR_16BIT_FIFOEN+0x10a>
 800d86c:	69bb      	ldr	r3, [r7, #24]
 800d86e:	f003 0301 	and.w	r3, r3, #1
 800d872:	2b00      	cmp	r3, #0
 800d874:	d00b      	beq.n	800d88e <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	2204      	movs	r2, #4
 800d87c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d884:	f043 0202 	orr.w	r2, r3, #2
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d894:	2b00      	cmp	r3, #0
 800d896:	d006      	beq.n	800d8a6 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f7ff f829 	bl	800c8f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d132      	bne.n	800d918 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	681a      	ldr	r2, [r3, #0]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d8c0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	689b      	ldr	r3, [r3, #8]
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	6812      	ldr	r2, [r2, #0]
 800d8cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d8d0:	f023 0301 	bic.w	r3, r3, #1
 800d8d4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2220      	movs	r2, #32
 800d8da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d10f      	bne.n	800d90c <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	681a      	ldr	r2, [r3, #0]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f022 0210 	bic.w	r2, r2, #16
 800d8fa:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d902:	4619      	mov	r1, r3
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f7fe fffd 	bl	800c904 <HAL_UARTEx_RxEventCallback>
 800d90a:	e002      	b.n	800d912 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f7f8 f8ff 	bl	8005b10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2200      	movs	r2, #0
 800d916:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d918:	8afb      	ldrh	r3, [r7, #22]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d005      	beq.n	800d92a <UART_RxISR_16BIT_FIFOEN+0x1a6>
 800d91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d920:	f003 0320 	and.w	r3, r3, #32
 800d924:	2b00      	cmp	r3, #0
 800d926:	f47f af4c 	bne.w	800d7c2 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d930:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d932:	89fb      	ldrh	r3, [r7, #14]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d021      	beq.n	800d97c <UART_RxISR_16BIT_FIFOEN+0x1f8>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d93e:	89fa      	ldrh	r2, [r7, #14]
 800d940:	429a      	cmp	r2, r3
 800d942:	d21b      	bcs.n	800d97c <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	689a      	ldr	r2, [r3, #8]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d952:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	4a0b      	ldr	r2, [pc, #44]	; (800d984 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800d958:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f042 0220 	orr.w	r2, r2, #32
 800d968:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d96a:	e007      	b.n	800d97c <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	699a      	ldr	r2, [r3, #24]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f042 0208 	orr.w	r2, r2, #8
 800d97a:	619a      	str	r2, [r3, #24]
}
 800d97c:	bf00      	nop
 800d97e:	3728      	adds	r7, #40	; 0x28
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	0800d4a9 	.word	0x0800d4a9

0800d988 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d990:	bf00      	nop
 800d992:	370c      	adds	r7, #12
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr

0800d99c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d99c:	b480      	push	{r7}
 800d99e:	b083      	sub	sp, #12
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d9a4:	bf00      	nop
 800d9a6:	370c      	adds	r7, #12
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr

0800d9b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b083      	sub	sp, #12
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d9b8:	bf00      	nop
 800d9ba:	370c      	adds	r7, #12
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr

0800d9c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b085      	sub	sp, #20
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	d101      	bne.n	800d9da <HAL_UARTEx_DisableFifoMode+0x16>
 800d9d6:	2302      	movs	r3, #2
 800d9d8:	e027      	b.n	800da2a <HAL_UARTEx_DisableFifoMode+0x66>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2201      	movs	r2, #1
 800d9de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2224      	movs	r2, #36	; 0x24
 800d9e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	681a      	ldr	r2, [r3, #0]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	f022 0201 	bic.w	r2, r2, #1
 800da00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800da08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2200      	movs	r2, #0
 800da0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	68fa      	ldr	r2, [r7, #12]
 800da16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2220      	movs	r2, #32
 800da1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2200      	movs	r2, #0
 800da24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800da28:	2300      	movs	r3, #0
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3714      	adds	r7, #20
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr

0800da36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da36:	b580      	push	{r7, lr}
 800da38:	b084      	sub	sp, #16
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	6078      	str	r0, [r7, #4]
 800da3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800da46:	2b01      	cmp	r3, #1
 800da48:	d101      	bne.n	800da4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800da4a:	2302      	movs	r3, #2
 800da4c:	e02d      	b.n	800daaa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2201      	movs	r2, #1
 800da52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2224      	movs	r2, #36	; 0x24
 800da5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f022 0201 	bic.w	r2, r2, #1
 800da74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	689b      	ldr	r3, [r3, #8]
 800da7c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	683a      	ldr	r2, [r7, #0]
 800da86:	430a      	orrs	r2, r1
 800da88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f000 f850 	bl	800db30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	68fa      	ldr	r2, [r7, #12]
 800da96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2220      	movs	r2, #32
 800da9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2200      	movs	r2, #0
 800daa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800daa8:	2300      	movs	r3, #0
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3710      	adds	r7, #16
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b084      	sub	sp, #16
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
 800daba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d101      	bne.n	800daca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dac6:	2302      	movs	r3, #2
 800dac8:	e02d      	b.n	800db26 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2201      	movs	r2, #1
 800dace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2224      	movs	r2, #36	; 0x24
 800dad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	681a      	ldr	r2, [r3, #0]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f022 0201 	bic.w	r2, r2, #1
 800daf0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	689b      	ldr	r3, [r3, #8]
 800daf8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	683a      	ldr	r2, [r7, #0]
 800db02:	430a      	orrs	r2, r1
 800db04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f000 f812 	bl	800db30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	68fa      	ldr	r2, [r7, #12]
 800db12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2220      	movs	r2, #32
 800db18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2200      	movs	r2, #0
 800db20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800db24:	2300      	movs	r3, #0
}
 800db26:	4618      	mov	r0, r3
 800db28:	3710      	adds	r7, #16
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
	...

0800db30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800db30:	b480      	push	{r7}
 800db32:	b085      	sub	sp, #20
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d108      	bne.n	800db52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2201      	movs	r2, #1
 800db44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2201      	movs	r2, #1
 800db4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800db50:	e031      	b.n	800dbb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800db52:	2308      	movs	r3, #8
 800db54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800db56:	2308      	movs	r3, #8
 800db58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	689b      	ldr	r3, [r3, #8]
 800db60:	0e5b      	lsrs	r3, r3, #25
 800db62:	b2db      	uxtb	r3, r3
 800db64:	f003 0307 	and.w	r3, r3, #7
 800db68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	689b      	ldr	r3, [r3, #8]
 800db70:	0f5b      	lsrs	r3, r3, #29
 800db72:	b2db      	uxtb	r3, r3
 800db74:	f003 0307 	and.w	r3, r3, #7
 800db78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800db7a:	7bbb      	ldrb	r3, [r7, #14]
 800db7c:	7b3a      	ldrb	r2, [r7, #12]
 800db7e:	4911      	ldr	r1, [pc, #68]	; (800dbc4 <UARTEx_SetNbDataToProcess+0x94>)
 800db80:	5c8a      	ldrb	r2, [r1, r2]
 800db82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800db86:	7b3a      	ldrb	r2, [r7, #12]
 800db88:	490f      	ldr	r1, [pc, #60]	; (800dbc8 <UARTEx_SetNbDataToProcess+0x98>)
 800db8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800db8c:	fb93 f3f2 	sdiv	r3, r3, r2
 800db90:	b29a      	uxth	r2, r3
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800db98:	7bfb      	ldrb	r3, [r7, #15]
 800db9a:	7b7a      	ldrb	r2, [r7, #13]
 800db9c:	4909      	ldr	r1, [pc, #36]	; (800dbc4 <UARTEx_SetNbDataToProcess+0x94>)
 800db9e:	5c8a      	ldrb	r2, [r1, r2]
 800dba0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dba4:	7b7a      	ldrb	r2, [r7, #13]
 800dba6:	4908      	ldr	r1, [pc, #32]	; (800dbc8 <UARTEx_SetNbDataToProcess+0x98>)
 800dba8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dbaa:	fb93 f3f2 	sdiv	r3, r3, r2
 800dbae:	b29a      	uxth	r2, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dbb6:	bf00      	nop
 800dbb8:	3714      	adds	r7, #20
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc0:	4770      	bx	lr
 800dbc2:	bf00      	nop
 800dbc4:	08013544 	.word	0x08013544
 800dbc8:	0801354c 	.word	0x0801354c

0800dbcc <atof>:
 800dbcc:	2100      	movs	r1, #0
 800dbce:	f001 bb61 	b.w	800f294 <strtod>

0800dbd2 <atoi>:
 800dbd2:	220a      	movs	r2, #10
 800dbd4:	2100      	movs	r1, #0
 800dbd6:	f001 bbeb 	b.w	800f3b0 <strtol>
	...

0800dbdc <__errno>:
 800dbdc:	4b01      	ldr	r3, [pc, #4]	; (800dbe4 <__errno+0x8>)
 800dbde:	6818      	ldr	r0, [r3, #0]
 800dbe0:	4770      	bx	lr
 800dbe2:	bf00      	nop
 800dbe4:	2000002c 	.word	0x2000002c

0800dbe8 <__libc_init_array>:
 800dbe8:	b570      	push	{r4, r5, r6, lr}
 800dbea:	4d0d      	ldr	r5, [pc, #52]	; (800dc20 <__libc_init_array+0x38>)
 800dbec:	4c0d      	ldr	r4, [pc, #52]	; (800dc24 <__libc_init_array+0x3c>)
 800dbee:	1b64      	subs	r4, r4, r5
 800dbf0:	10a4      	asrs	r4, r4, #2
 800dbf2:	2600      	movs	r6, #0
 800dbf4:	42a6      	cmp	r6, r4
 800dbf6:	d109      	bne.n	800dc0c <__libc_init_array+0x24>
 800dbf8:	4d0b      	ldr	r5, [pc, #44]	; (800dc28 <__libc_init_array+0x40>)
 800dbfa:	4c0c      	ldr	r4, [pc, #48]	; (800dc2c <__libc_init_array+0x44>)
 800dbfc:	f004 fcaa 	bl	8012554 <_init>
 800dc00:	1b64      	subs	r4, r4, r5
 800dc02:	10a4      	asrs	r4, r4, #2
 800dc04:	2600      	movs	r6, #0
 800dc06:	42a6      	cmp	r6, r4
 800dc08:	d105      	bne.n	800dc16 <__libc_init_array+0x2e>
 800dc0a:	bd70      	pop	{r4, r5, r6, pc}
 800dc0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc10:	4798      	blx	r3
 800dc12:	3601      	adds	r6, #1
 800dc14:	e7ee      	b.n	800dbf4 <__libc_init_array+0xc>
 800dc16:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc1a:	4798      	blx	r3
 800dc1c:	3601      	adds	r6, #1
 800dc1e:	e7f2      	b.n	800dc06 <__libc_init_array+0x1e>
 800dc20:	08013a40 	.word	0x08013a40
 800dc24:	08013a40 	.word	0x08013a40
 800dc28:	08013a40 	.word	0x08013a40
 800dc2c:	08013a44 	.word	0x08013a44

0800dc30 <memcpy>:
 800dc30:	440a      	add	r2, r1
 800dc32:	4291      	cmp	r1, r2
 800dc34:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc38:	d100      	bne.n	800dc3c <memcpy+0xc>
 800dc3a:	4770      	bx	lr
 800dc3c:	b510      	push	{r4, lr}
 800dc3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc46:	4291      	cmp	r1, r2
 800dc48:	d1f9      	bne.n	800dc3e <memcpy+0xe>
 800dc4a:	bd10      	pop	{r4, pc}

0800dc4c <memset>:
 800dc4c:	4402      	add	r2, r0
 800dc4e:	4603      	mov	r3, r0
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d100      	bne.n	800dc56 <memset+0xa>
 800dc54:	4770      	bx	lr
 800dc56:	f803 1b01 	strb.w	r1, [r3], #1
 800dc5a:	e7f9      	b.n	800dc50 <memset+0x4>

0800dc5c <__cvt>:
 800dc5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc60:	ec55 4b10 	vmov	r4, r5, d0
 800dc64:	2d00      	cmp	r5, #0
 800dc66:	460e      	mov	r6, r1
 800dc68:	4619      	mov	r1, r3
 800dc6a:	462b      	mov	r3, r5
 800dc6c:	bfbb      	ittet	lt
 800dc6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800dc72:	461d      	movlt	r5, r3
 800dc74:	2300      	movge	r3, #0
 800dc76:	232d      	movlt	r3, #45	; 0x2d
 800dc78:	700b      	strb	r3, [r1, #0]
 800dc7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dc80:	4691      	mov	r9, r2
 800dc82:	f023 0820 	bic.w	r8, r3, #32
 800dc86:	bfbc      	itt	lt
 800dc88:	4622      	movlt	r2, r4
 800dc8a:	4614      	movlt	r4, r2
 800dc8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dc90:	d005      	beq.n	800dc9e <__cvt+0x42>
 800dc92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dc96:	d100      	bne.n	800dc9a <__cvt+0x3e>
 800dc98:	3601      	adds	r6, #1
 800dc9a:	2102      	movs	r1, #2
 800dc9c:	e000      	b.n	800dca0 <__cvt+0x44>
 800dc9e:	2103      	movs	r1, #3
 800dca0:	ab03      	add	r3, sp, #12
 800dca2:	9301      	str	r3, [sp, #4]
 800dca4:	ab02      	add	r3, sp, #8
 800dca6:	9300      	str	r3, [sp, #0]
 800dca8:	ec45 4b10 	vmov	d0, r4, r5
 800dcac:	4653      	mov	r3, sl
 800dcae:	4632      	mov	r2, r6
 800dcb0:	f001 fcd6 	bl	800f660 <_dtoa_r>
 800dcb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800dcb8:	4607      	mov	r7, r0
 800dcba:	d102      	bne.n	800dcc2 <__cvt+0x66>
 800dcbc:	f019 0f01 	tst.w	r9, #1
 800dcc0:	d022      	beq.n	800dd08 <__cvt+0xac>
 800dcc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dcc6:	eb07 0906 	add.w	r9, r7, r6
 800dcca:	d110      	bne.n	800dcee <__cvt+0x92>
 800dccc:	783b      	ldrb	r3, [r7, #0]
 800dcce:	2b30      	cmp	r3, #48	; 0x30
 800dcd0:	d10a      	bne.n	800dce8 <__cvt+0x8c>
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	4629      	mov	r1, r5
 800dcda:	f7f2 ff1d 	bl	8000b18 <__aeabi_dcmpeq>
 800dcde:	b918      	cbnz	r0, 800dce8 <__cvt+0x8c>
 800dce0:	f1c6 0601 	rsb	r6, r6, #1
 800dce4:	f8ca 6000 	str.w	r6, [sl]
 800dce8:	f8da 3000 	ldr.w	r3, [sl]
 800dcec:	4499      	add	r9, r3
 800dcee:	2200      	movs	r2, #0
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	4629      	mov	r1, r5
 800dcf6:	f7f2 ff0f 	bl	8000b18 <__aeabi_dcmpeq>
 800dcfa:	b108      	cbz	r0, 800dd00 <__cvt+0xa4>
 800dcfc:	f8cd 900c 	str.w	r9, [sp, #12]
 800dd00:	2230      	movs	r2, #48	; 0x30
 800dd02:	9b03      	ldr	r3, [sp, #12]
 800dd04:	454b      	cmp	r3, r9
 800dd06:	d307      	bcc.n	800dd18 <__cvt+0xbc>
 800dd08:	9b03      	ldr	r3, [sp, #12]
 800dd0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd0c:	1bdb      	subs	r3, r3, r7
 800dd0e:	4638      	mov	r0, r7
 800dd10:	6013      	str	r3, [r2, #0]
 800dd12:	b004      	add	sp, #16
 800dd14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd18:	1c59      	adds	r1, r3, #1
 800dd1a:	9103      	str	r1, [sp, #12]
 800dd1c:	701a      	strb	r2, [r3, #0]
 800dd1e:	e7f0      	b.n	800dd02 <__cvt+0xa6>

0800dd20 <__exponent>:
 800dd20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd22:	4603      	mov	r3, r0
 800dd24:	2900      	cmp	r1, #0
 800dd26:	bfb8      	it	lt
 800dd28:	4249      	neglt	r1, r1
 800dd2a:	f803 2b02 	strb.w	r2, [r3], #2
 800dd2e:	bfb4      	ite	lt
 800dd30:	222d      	movlt	r2, #45	; 0x2d
 800dd32:	222b      	movge	r2, #43	; 0x2b
 800dd34:	2909      	cmp	r1, #9
 800dd36:	7042      	strb	r2, [r0, #1]
 800dd38:	dd2a      	ble.n	800dd90 <__exponent+0x70>
 800dd3a:	f10d 0407 	add.w	r4, sp, #7
 800dd3e:	46a4      	mov	ip, r4
 800dd40:	270a      	movs	r7, #10
 800dd42:	46a6      	mov	lr, r4
 800dd44:	460a      	mov	r2, r1
 800dd46:	fb91 f6f7 	sdiv	r6, r1, r7
 800dd4a:	fb07 1516 	mls	r5, r7, r6, r1
 800dd4e:	3530      	adds	r5, #48	; 0x30
 800dd50:	2a63      	cmp	r2, #99	; 0x63
 800dd52:	f104 34ff 	add.w	r4, r4, #4294967295
 800dd56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800dd5a:	4631      	mov	r1, r6
 800dd5c:	dcf1      	bgt.n	800dd42 <__exponent+0x22>
 800dd5e:	3130      	adds	r1, #48	; 0x30
 800dd60:	f1ae 0502 	sub.w	r5, lr, #2
 800dd64:	f804 1c01 	strb.w	r1, [r4, #-1]
 800dd68:	1c44      	adds	r4, r0, #1
 800dd6a:	4629      	mov	r1, r5
 800dd6c:	4561      	cmp	r1, ip
 800dd6e:	d30a      	bcc.n	800dd86 <__exponent+0x66>
 800dd70:	f10d 0209 	add.w	r2, sp, #9
 800dd74:	eba2 020e 	sub.w	r2, r2, lr
 800dd78:	4565      	cmp	r5, ip
 800dd7a:	bf88      	it	hi
 800dd7c:	2200      	movhi	r2, #0
 800dd7e:	4413      	add	r3, r2
 800dd80:	1a18      	subs	r0, r3, r0
 800dd82:	b003      	add	sp, #12
 800dd84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800dd8e:	e7ed      	b.n	800dd6c <__exponent+0x4c>
 800dd90:	2330      	movs	r3, #48	; 0x30
 800dd92:	3130      	adds	r1, #48	; 0x30
 800dd94:	7083      	strb	r3, [r0, #2]
 800dd96:	70c1      	strb	r1, [r0, #3]
 800dd98:	1d03      	adds	r3, r0, #4
 800dd9a:	e7f1      	b.n	800dd80 <__exponent+0x60>

0800dd9c <_printf_float>:
 800dd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dda0:	ed2d 8b02 	vpush	{d8}
 800dda4:	b08d      	sub	sp, #52	; 0x34
 800dda6:	460c      	mov	r4, r1
 800dda8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ddac:	4616      	mov	r6, r2
 800ddae:	461f      	mov	r7, r3
 800ddb0:	4605      	mov	r5, r0
 800ddb2:	f002 ff69 	bl	8010c88 <_localeconv_r>
 800ddb6:	f8d0 a000 	ldr.w	sl, [r0]
 800ddba:	4650      	mov	r0, sl
 800ddbc:	f7f2 fa30 	bl	8000220 <strlen>
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	930a      	str	r3, [sp, #40]	; 0x28
 800ddc4:	6823      	ldr	r3, [r4, #0]
 800ddc6:	9305      	str	r3, [sp, #20]
 800ddc8:	f8d8 3000 	ldr.w	r3, [r8]
 800ddcc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ddd0:	3307      	adds	r3, #7
 800ddd2:	f023 0307 	bic.w	r3, r3, #7
 800ddd6:	f103 0208 	add.w	r2, r3, #8
 800ddda:	f8c8 2000 	str.w	r2, [r8]
 800ddde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dde6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ddea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ddee:	9307      	str	r3, [sp, #28]
 800ddf0:	f8cd 8018 	str.w	r8, [sp, #24]
 800ddf4:	ee08 0a10 	vmov	s16, r0
 800ddf8:	4b9f      	ldr	r3, [pc, #636]	; (800e078 <_printf_float+0x2dc>)
 800ddfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ddfe:	f04f 32ff 	mov.w	r2, #4294967295
 800de02:	f7f2 febb 	bl	8000b7c <__aeabi_dcmpun>
 800de06:	bb88      	cbnz	r0, 800de6c <_printf_float+0xd0>
 800de08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800de0c:	4b9a      	ldr	r3, [pc, #616]	; (800e078 <_printf_float+0x2dc>)
 800de0e:	f04f 32ff 	mov.w	r2, #4294967295
 800de12:	f7f2 fe95 	bl	8000b40 <__aeabi_dcmple>
 800de16:	bb48      	cbnz	r0, 800de6c <_printf_float+0xd0>
 800de18:	2200      	movs	r2, #0
 800de1a:	2300      	movs	r3, #0
 800de1c:	4640      	mov	r0, r8
 800de1e:	4649      	mov	r1, r9
 800de20:	f7f2 fe84 	bl	8000b2c <__aeabi_dcmplt>
 800de24:	b110      	cbz	r0, 800de2c <_printf_float+0x90>
 800de26:	232d      	movs	r3, #45	; 0x2d
 800de28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de2c:	4b93      	ldr	r3, [pc, #588]	; (800e07c <_printf_float+0x2e0>)
 800de2e:	4894      	ldr	r0, [pc, #592]	; (800e080 <_printf_float+0x2e4>)
 800de30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800de34:	bf94      	ite	ls
 800de36:	4698      	movls	r8, r3
 800de38:	4680      	movhi	r8, r0
 800de3a:	2303      	movs	r3, #3
 800de3c:	6123      	str	r3, [r4, #16]
 800de3e:	9b05      	ldr	r3, [sp, #20]
 800de40:	f023 0204 	bic.w	r2, r3, #4
 800de44:	6022      	str	r2, [r4, #0]
 800de46:	f04f 0900 	mov.w	r9, #0
 800de4a:	9700      	str	r7, [sp, #0]
 800de4c:	4633      	mov	r3, r6
 800de4e:	aa0b      	add	r2, sp, #44	; 0x2c
 800de50:	4621      	mov	r1, r4
 800de52:	4628      	mov	r0, r5
 800de54:	f000 f9d8 	bl	800e208 <_printf_common>
 800de58:	3001      	adds	r0, #1
 800de5a:	f040 8090 	bne.w	800df7e <_printf_float+0x1e2>
 800de5e:	f04f 30ff 	mov.w	r0, #4294967295
 800de62:	b00d      	add	sp, #52	; 0x34
 800de64:	ecbd 8b02 	vpop	{d8}
 800de68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de6c:	4642      	mov	r2, r8
 800de6e:	464b      	mov	r3, r9
 800de70:	4640      	mov	r0, r8
 800de72:	4649      	mov	r1, r9
 800de74:	f7f2 fe82 	bl	8000b7c <__aeabi_dcmpun>
 800de78:	b140      	cbz	r0, 800de8c <_printf_float+0xf0>
 800de7a:	464b      	mov	r3, r9
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	bfbc      	itt	lt
 800de80:	232d      	movlt	r3, #45	; 0x2d
 800de82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800de86:	487f      	ldr	r0, [pc, #508]	; (800e084 <_printf_float+0x2e8>)
 800de88:	4b7f      	ldr	r3, [pc, #508]	; (800e088 <_printf_float+0x2ec>)
 800de8a:	e7d1      	b.n	800de30 <_printf_float+0x94>
 800de8c:	6863      	ldr	r3, [r4, #4]
 800de8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800de92:	9206      	str	r2, [sp, #24]
 800de94:	1c5a      	adds	r2, r3, #1
 800de96:	d13f      	bne.n	800df18 <_printf_float+0x17c>
 800de98:	2306      	movs	r3, #6
 800de9a:	6063      	str	r3, [r4, #4]
 800de9c:	9b05      	ldr	r3, [sp, #20]
 800de9e:	6861      	ldr	r1, [r4, #4]
 800dea0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dea4:	2300      	movs	r3, #0
 800dea6:	9303      	str	r3, [sp, #12]
 800dea8:	ab0a      	add	r3, sp, #40	; 0x28
 800deaa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800deae:	ab09      	add	r3, sp, #36	; 0x24
 800deb0:	ec49 8b10 	vmov	d0, r8, r9
 800deb4:	9300      	str	r3, [sp, #0]
 800deb6:	6022      	str	r2, [r4, #0]
 800deb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800debc:	4628      	mov	r0, r5
 800debe:	f7ff fecd 	bl	800dc5c <__cvt>
 800dec2:	9b06      	ldr	r3, [sp, #24]
 800dec4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dec6:	2b47      	cmp	r3, #71	; 0x47
 800dec8:	4680      	mov	r8, r0
 800deca:	d108      	bne.n	800dede <_printf_float+0x142>
 800decc:	1cc8      	adds	r0, r1, #3
 800dece:	db02      	blt.n	800ded6 <_printf_float+0x13a>
 800ded0:	6863      	ldr	r3, [r4, #4]
 800ded2:	4299      	cmp	r1, r3
 800ded4:	dd41      	ble.n	800df5a <_printf_float+0x1be>
 800ded6:	f1ab 0b02 	sub.w	fp, fp, #2
 800deda:	fa5f fb8b 	uxtb.w	fp, fp
 800dede:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dee2:	d820      	bhi.n	800df26 <_printf_float+0x18a>
 800dee4:	3901      	subs	r1, #1
 800dee6:	465a      	mov	r2, fp
 800dee8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800deec:	9109      	str	r1, [sp, #36]	; 0x24
 800deee:	f7ff ff17 	bl	800dd20 <__exponent>
 800def2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800def4:	1813      	adds	r3, r2, r0
 800def6:	2a01      	cmp	r2, #1
 800def8:	4681      	mov	r9, r0
 800defa:	6123      	str	r3, [r4, #16]
 800defc:	dc02      	bgt.n	800df04 <_printf_float+0x168>
 800defe:	6822      	ldr	r2, [r4, #0]
 800df00:	07d2      	lsls	r2, r2, #31
 800df02:	d501      	bpl.n	800df08 <_printf_float+0x16c>
 800df04:	3301      	adds	r3, #1
 800df06:	6123      	str	r3, [r4, #16]
 800df08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d09c      	beq.n	800de4a <_printf_float+0xae>
 800df10:	232d      	movs	r3, #45	; 0x2d
 800df12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df16:	e798      	b.n	800de4a <_printf_float+0xae>
 800df18:	9a06      	ldr	r2, [sp, #24]
 800df1a:	2a47      	cmp	r2, #71	; 0x47
 800df1c:	d1be      	bne.n	800de9c <_printf_float+0x100>
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d1bc      	bne.n	800de9c <_printf_float+0x100>
 800df22:	2301      	movs	r3, #1
 800df24:	e7b9      	b.n	800de9a <_printf_float+0xfe>
 800df26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800df2a:	d118      	bne.n	800df5e <_printf_float+0x1c2>
 800df2c:	2900      	cmp	r1, #0
 800df2e:	6863      	ldr	r3, [r4, #4]
 800df30:	dd0b      	ble.n	800df4a <_printf_float+0x1ae>
 800df32:	6121      	str	r1, [r4, #16]
 800df34:	b913      	cbnz	r3, 800df3c <_printf_float+0x1a0>
 800df36:	6822      	ldr	r2, [r4, #0]
 800df38:	07d0      	lsls	r0, r2, #31
 800df3a:	d502      	bpl.n	800df42 <_printf_float+0x1a6>
 800df3c:	3301      	adds	r3, #1
 800df3e:	440b      	add	r3, r1
 800df40:	6123      	str	r3, [r4, #16]
 800df42:	65a1      	str	r1, [r4, #88]	; 0x58
 800df44:	f04f 0900 	mov.w	r9, #0
 800df48:	e7de      	b.n	800df08 <_printf_float+0x16c>
 800df4a:	b913      	cbnz	r3, 800df52 <_printf_float+0x1b6>
 800df4c:	6822      	ldr	r2, [r4, #0]
 800df4e:	07d2      	lsls	r2, r2, #31
 800df50:	d501      	bpl.n	800df56 <_printf_float+0x1ba>
 800df52:	3302      	adds	r3, #2
 800df54:	e7f4      	b.n	800df40 <_printf_float+0x1a4>
 800df56:	2301      	movs	r3, #1
 800df58:	e7f2      	b.n	800df40 <_printf_float+0x1a4>
 800df5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800df5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df60:	4299      	cmp	r1, r3
 800df62:	db05      	blt.n	800df70 <_printf_float+0x1d4>
 800df64:	6823      	ldr	r3, [r4, #0]
 800df66:	6121      	str	r1, [r4, #16]
 800df68:	07d8      	lsls	r0, r3, #31
 800df6a:	d5ea      	bpl.n	800df42 <_printf_float+0x1a6>
 800df6c:	1c4b      	adds	r3, r1, #1
 800df6e:	e7e7      	b.n	800df40 <_printf_float+0x1a4>
 800df70:	2900      	cmp	r1, #0
 800df72:	bfd4      	ite	le
 800df74:	f1c1 0202 	rsble	r2, r1, #2
 800df78:	2201      	movgt	r2, #1
 800df7a:	4413      	add	r3, r2
 800df7c:	e7e0      	b.n	800df40 <_printf_float+0x1a4>
 800df7e:	6823      	ldr	r3, [r4, #0]
 800df80:	055a      	lsls	r2, r3, #21
 800df82:	d407      	bmi.n	800df94 <_printf_float+0x1f8>
 800df84:	6923      	ldr	r3, [r4, #16]
 800df86:	4642      	mov	r2, r8
 800df88:	4631      	mov	r1, r6
 800df8a:	4628      	mov	r0, r5
 800df8c:	47b8      	blx	r7
 800df8e:	3001      	adds	r0, #1
 800df90:	d12c      	bne.n	800dfec <_printf_float+0x250>
 800df92:	e764      	b.n	800de5e <_printf_float+0xc2>
 800df94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800df98:	f240 80e0 	bls.w	800e15c <_printf_float+0x3c0>
 800df9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	f7f2 fdb8 	bl	8000b18 <__aeabi_dcmpeq>
 800dfa8:	2800      	cmp	r0, #0
 800dfaa:	d034      	beq.n	800e016 <_printf_float+0x27a>
 800dfac:	4a37      	ldr	r2, [pc, #220]	; (800e08c <_printf_float+0x2f0>)
 800dfae:	2301      	movs	r3, #1
 800dfb0:	4631      	mov	r1, r6
 800dfb2:	4628      	mov	r0, r5
 800dfb4:	47b8      	blx	r7
 800dfb6:	3001      	adds	r0, #1
 800dfb8:	f43f af51 	beq.w	800de5e <_printf_float+0xc2>
 800dfbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	db02      	blt.n	800dfca <_printf_float+0x22e>
 800dfc4:	6823      	ldr	r3, [r4, #0]
 800dfc6:	07d8      	lsls	r0, r3, #31
 800dfc8:	d510      	bpl.n	800dfec <_printf_float+0x250>
 800dfca:	ee18 3a10 	vmov	r3, s16
 800dfce:	4652      	mov	r2, sl
 800dfd0:	4631      	mov	r1, r6
 800dfd2:	4628      	mov	r0, r5
 800dfd4:	47b8      	blx	r7
 800dfd6:	3001      	adds	r0, #1
 800dfd8:	f43f af41 	beq.w	800de5e <_printf_float+0xc2>
 800dfdc:	f04f 0800 	mov.w	r8, #0
 800dfe0:	f104 091a 	add.w	r9, r4, #26
 800dfe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfe6:	3b01      	subs	r3, #1
 800dfe8:	4543      	cmp	r3, r8
 800dfea:	dc09      	bgt.n	800e000 <_printf_float+0x264>
 800dfec:	6823      	ldr	r3, [r4, #0]
 800dfee:	079b      	lsls	r3, r3, #30
 800dff0:	f100 8105 	bmi.w	800e1fe <_printf_float+0x462>
 800dff4:	68e0      	ldr	r0, [r4, #12]
 800dff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dff8:	4298      	cmp	r0, r3
 800dffa:	bfb8      	it	lt
 800dffc:	4618      	movlt	r0, r3
 800dffe:	e730      	b.n	800de62 <_printf_float+0xc6>
 800e000:	2301      	movs	r3, #1
 800e002:	464a      	mov	r2, r9
 800e004:	4631      	mov	r1, r6
 800e006:	4628      	mov	r0, r5
 800e008:	47b8      	blx	r7
 800e00a:	3001      	adds	r0, #1
 800e00c:	f43f af27 	beq.w	800de5e <_printf_float+0xc2>
 800e010:	f108 0801 	add.w	r8, r8, #1
 800e014:	e7e6      	b.n	800dfe4 <_printf_float+0x248>
 800e016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e018:	2b00      	cmp	r3, #0
 800e01a:	dc39      	bgt.n	800e090 <_printf_float+0x2f4>
 800e01c:	4a1b      	ldr	r2, [pc, #108]	; (800e08c <_printf_float+0x2f0>)
 800e01e:	2301      	movs	r3, #1
 800e020:	4631      	mov	r1, r6
 800e022:	4628      	mov	r0, r5
 800e024:	47b8      	blx	r7
 800e026:	3001      	adds	r0, #1
 800e028:	f43f af19 	beq.w	800de5e <_printf_float+0xc2>
 800e02c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e030:	4313      	orrs	r3, r2
 800e032:	d102      	bne.n	800e03a <_printf_float+0x29e>
 800e034:	6823      	ldr	r3, [r4, #0]
 800e036:	07d9      	lsls	r1, r3, #31
 800e038:	d5d8      	bpl.n	800dfec <_printf_float+0x250>
 800e03a:	ee18 3a10 	vmov	r3, s16
 800e03e:	4652      	mov	r2, sl
 800e040:	4631      	mov	r1, r6
 800e042:	4628      	mov	r0, r5
 800e044:	47b8      	blx	r7
 800e046:	3001      	adds	r0, #1
 800e048:	f43f af09 	beq.w	800de5e <_printf_float+0xc2>
 800e04c:	f04f 0900 	mov.w	r9, #0
 800e050:	f104 0a1a 	add.w	sl, r4, #26
 800e054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e056:	425b      	negs	r3, r3
 800e058:	454b      	cmp	r3, r9
 800e05a:	dc01      	bgt.n	800e060 <_printf_float+0x2c4>
 800e05c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e05e:	e792      	b.n	800df86 <_printf_float+0x1ea>
 800e060:	2301      	movs	r3, #1
 800e062:	4652      	mov	r2, sl
 800e064:	4631      	mov	r1, r6
 800e066:	4628      	mov	r0, r5
 800e068:	47b8      	blx	r7
 800e06a:	3001      	adds	r0, #1
 800e06c:	f43f aef7 	beq.w	800de5e <_printf_float+0xc2>
 800e070:	f109 0901 	add.w	r9, r9, #1
 800e074:	e7ee      	b.n	800e054 <_printf_float+0x2b8>
 800e076:	bf00      	nop
 800e078:	7fefffff 	.word	0x7fefffff
 800e07c:	08013558 	.word	0x08013558
 800e080:	0801355c 	.word	0x0801355c
 800e084:	08013564 	.word	0x08013564
 800e088:	08013560 	.word	0x08013560
 800e08c:	08013568 	.word	0x08013568
 800e090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e092:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e094:	429a      	cmp	r2, r3
 800e096:	bfa8      	it	ge
 800e098:	461a      	movge	r2, r3
 800e09a:	2a00      	cmp	r2, #0
 800e09c:	4691      	mov	r9, r2
 800e09e:	dc37      	bgt.n	800e110 <_printf_float+0x374>
 800e0a0:	f04f 0b00 	mov.w	fp, #0
 800e0a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e0a8:	f104 021a 	add.w	r2, r4, #26
 800e0ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e0ae:	9305      	str	r3, [sp, #20]
 800e0b0:	eba3 0309 	sub.w	r3, r3, r9
 800e0b4:	455b      	cmp	r3, fp
 800e0b6:	dc33      	bgt.n	800e120 <_printf_float+0x384>
 800e0b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	db3b      	blt.n	800e138 <_printf_float+0x39c>
 800e0c0:	6823      	ldr	r3, [r4, #0]
 800e0c2:	07da      	lsls	r2, r3, #31
 800e0c4:	d438      	bmi.n	800e138 <_printf_float+0x39c>
 800e0c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0c8:	9a05      	ldr	r2, [sp, #20]
 800e0ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0cc:	1a9a      	subs	r2, r3, r2
 800e0ce:	eba3 0901 	sub.w	r9, r3, r1
 800e0d2:	4591      	cmp	r9, r2
 800e0d4:	bfa8      	it	ge
 800e0d6:	4691      	movge	r9, r2
 800e0d8:	f1b9 0f00 	cmp.w	r9, #0
 800e0dc:	dc35      	bgt.n	800e14a <_printf_float+0x3ae>
 800e0de:	f04f 0800 	mov.w	r8, #0
 800e0e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e0e6:	f104 0a1a 	add.w	sl, r4, #26
 800e0ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e0ee:	1a9b      	subs	r3, r3, r2
 800e0f0:	eba3 0309 	sub.w	r3, r3, r9
 800e0f4:	4543      	cmp	r3, r8
 800e0f6:	f77f af79 	ble.w	800dfec <_printf_float+0x250>
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	4652      	mov	r2, sl
 800e0fe:	4631      	mov	r1, r6
 800e100:	4628      	mov	r0, r5
 800e102:	47b8      	blx	r7
 800e104:	3001      	adds	r0, #1
 800e106:	f43f aeaa 	beq.w	800de5e <_printf_float+0xc2>
 800e10a:	f108 0801 	add.w	r8, r8, #1
 800e10e:	e7ec      	b.n	800e0ea <_printf_float+0x34e>
 800e110:	4613      	mov	r3, r2
 800e112:	4631      	mov	r1, r6
 800e114:	4642      	mov	r2, r8
 800e116:	4628      	mov	r0, r5
 800e118:	47b8      	blx	r7
 800e11a:	3001      	adds	r0, #1
 800e11c:	d1c0      	bne.n	800e0a0 <_printf_float+0x304>
 800e11e:	e69e      	b.n	800de5e <_printf_float+0xc2>
 800e120:	2301      	movs	r3, #1
 800e122:	4631      	mov	r1, r6
 800e124:	4628      	mov	r0, r5
 800e126:	9205      	str	r2, [sp, #20]
 800e128:	47b8      	blx	r7
 800e12a:	3001      	adds	r0, #1
 800e12c:	f43f ae97 	beq.w	800de5e <_printf_float+0xc2>
 800e130:	9a05      	ldr	r2, [sp, #20]
 800e132:	f10b 0b01 	add.w	fp, fp, #1
 800e136:	e7b9      	b.n	800e0ac <_printf_float+0x310>
 800e138:	ee18 3a10 	vmov	r3, s16
 800e13c:	4652      	mov	r2, sl
 800e13e:	4631      	mov	r1, r6
 800e140:	4628      	mov	r0, r5
 800e142:	47b8      	blx	r7
 800e144:	3001      	adds	r0, #1
 800e146:	d1be      	bne.n	800e0c6 <_printf_float+0x32a>
 800e148:	e689      	b.n	800de5e <_printf_float+0xc2>
 800e14a:	9a05      	ldr	r2, [sp, #20]
 800e14c:	464b      	mov	r3, r9
 800e14e:	4442      	add	r2, r8
 800e150:	4631      	mov	r1, r6
 800e152:	4628      	mov	r0, r5
 800e154:	47b8      	blx	r7
 800e156:	3001      	adds	r0, #1
 800e158:	d1c1      	bne.n	800e0de <_printf_float+0x342>
 800e15a:	e680      	b.n	800de5e <_printf_float+0xc2>
 800e15c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e15e:	2a01      	cmp	r2, #1
 800e160:	dc01      	bgt.n	800e166 <_printf_float+0x3ca>
 800e162:	07db      	lsls	r3, r3, #31
 800e164:	d538      	bpl.n	800e1d8 <_printf_float+0x43c>
 800e166:	2301      	movs	r3, #1
 800e168:	4642      	mov	r2, r8
 800e16a:	4631      	mov	r1, r6
 800e16c:	4628      	mov	r0, r5
 800e16e:	47b8      	blx	r7
 800e170:	3001      	adds	r0, #1
 800e172:	f43f ae74 	beq.w	800de5e <_printf_float+0xc2>
 800e176:	ee18 3a10 	vmov	r3, s16
 800e17a:	4652      	mov	r2, sl
 800e17c:	4631      	mov	r1, r6
 800e17e:	4628      	mov	r0, r5
 800e180:	47b8      	blx	r7
 800e182:	3001      	adds	r0, #1
 800e184:	f43f ae6b 	beq.w	800de5e <_printf_float+0xc2>
 800e188:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e18c:	2200      	movs	r2, #0
 800e18e:	2300      	movs	r3, #0
 800e190:	f7f2 fcc2 	bl	8000b18 <__aeabi_dcmpeq>
 800e194:	b9d8      	cbnz	r0, 800e1ce <_printf_float+0x432>
 800e196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e198:	f108 0201 	add.w	r2, r8, #1
 800e19c:	3b01      	subs	r3, #1
 800e19e:	4631      	mov	r1, r6
 800e1a0:	4628      	mov	r0, r5
 800e1a2:	47b8      	blx	r7
 800e1a4:	3001      	adds	r0, #1
 800e1a6:	d10e      	bne.n	800e1c6 <_printf_float+0x42a>
 800e1a8:	e659      	b.n	800de5e <_printf_float+0xc2>
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	4652      	mov	r2, sl
 800e1ae:	4631      	mov	r1, r6
 800e1b0:	4628      	mov	r0, r5
 800e1b2:	47b8      	blx	r7
 800e1b4:	3001      	adds	r0, #1
 800e1b6:	f43f ae52 	beq.w	800de5e <_printf_float+0xc2>
 800e1ba:	f108 0801 	add.w	r8, r8, #1
 800e1be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1c0:	3b01      	subs	r3, #1
 800e1c2:	4543      	cmp	r3, r8
 800e1c4:	dcf1      	bgt.n	800e1aa <_printf_float+0x40e>
 800e1c6:	464b      	mov	r3, r9
 800e1c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e1cc:	e6dc      	b.n	800df88 <_printf_float+0x1ec>
 800e1ce:	f04f 0800 	mov.w	r8, #0
 800e1d2:	f104 0a1a 	add.w	sl, r4, #26
 800e1d6:	e7f2      	b.n	800e1be <_printf_float+0x422>
 800e1d8:	2301      	movs	r3, #1
 800e1da:	4642      	mov	r2, r8
 800e1dc:	e7df      	b.n	800e19e <_printf_float+0x402>
 800e1de:	2301      	movs	r3, #1
 800e1e0:	464a      	mov	r2, r9
 800e1e2:	4631      	mov	r1, r6
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	47b8      	blx	r7
 800e1e8:	3001      	adds	r0, #1
 800e1ea:	f43f ae38 	beq.w	800de5e <_printf_float+0xc2>
 800e1ee:	f108 0801 	add.w	r8, r8, #1
 800e1f2:	68e3      	ldr	r3, [r4, #12]
 800e1f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e1f6:	1a5b      	subs	r3, r3, r1
 800e1f8:	4543      	cmp	r3, r8
 800e1fa:	dcf0      	bgt.n	800e1de <_printf_float+0x442>
 800e1fc:	e6fa      	b.n	800dff4 <_printf_float+0x258>
 800e1fe:	f04f 0800 	mov.w	r8, #0
 800e202:	f104 0919 	add.w	r9, r4, #25
 800e206:	e7f4      	b.n	800e1f2 <_printf_float+0x456>

0800e208 <_printf_common>:
 800e208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e20c:	4616      	mov	r6, r2
 800e20e:	4699      	mov	r9, r3
 800e210:	688a      	ldr	r2, [r1, #8]
 800e212:	690b      	ldr	r3, [r1, #16]
 800e214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e218:	4293      	cmp	r3, r2
 800e21a:	bfb8      	it	lt
 800e21c:	4613      	movlt	r3, r2
 800e21e:	6033      	str	r3, [r6, #0]
 800e220:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e224:	4607      	mov	r7, r0
 800e226:	460c      	mov	r4, r1
 800e228:	b10a      	cbz	r2, 800e22e <_printf_common+0x26>
 800e22a:	3301      	adds	r3, #1
 800e22c:	6033      	str	r3, [r6, #0]
 800e22e:	6823      	ldr	r3, [r4, #0]
 800e230:	0699      	lsls	r1, r3, #26
 800e232:	bf42      	ittt	mi
 800e234:	6833      	ldrmi	r3, [r6, #0]
 800e236:	3302      	addmi	r3, #2
 800e238:	6033      	strmi	r3, [r6, #0]
 800e23a:	6825      	ldr	r5, [r4, #0]
 800e23c:	f015 0506 	ands.w	r5, r5, #6
 800e240:	d106      	bne.n	800e250 <_printf_common+0x48>
 800e242:	f104 0a19 	add.w	sl, r4, #25
 800e246:	68e3      	ldr	r3, [r4, #12]
 800e248:	6832      	ldr	r2, [r6, #0]
 800e24a:	1a9b      	subs	r3, r3, r2
 800e24c:	42ab      	cmp	r3, r5
 800e24e:	dc26      	bgt.n	800e29e <_printf_common+0x96>
 800e250:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e254:	1e13      	subs	r3, r2, #0
 800e256:	6822      	ldr	r2, [r4, #0]
 800e258:	bf18      	it	ne
 800e25a:	2301      	movne	r3, #1
 800e25c:	0692      	lsls	r2, r2, #26
 800e25e:	d42b      	bmi.n	800e2b8 <_printf_common+0xb0>
 800e260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e264:	4649      	mov	r1, r9
 800e266:	4638      	mov	r0, r7
 800e268:	47c0      	blx	r8
 800e26a:	3001      	adds	r0, #1
 800e26c:	d01e      	beq.n	800e2ac <_printf_common+0xa4>
 800e26e:	6823      	ldr	r3, [r4, #0]
 800e270:	68e5      	ldr	r5, [r4, #12]
 800e272:	6832      	ldr	r2, [r6, #0]
 800e274:	f003 0306 	and.w	r3, r3, #6
 800e278:	2b04      	cmp	r3, #4
 800e27a:	bf08      	it	eq
 800e27c:	1aad      	subeq	r5, r5, r2
 800e27e:	68a3      	ldr	r3, [r4, #8]
 800e280:	6922      	ldr	r2, [r4, #16]
 800e282:	bf0c      	ite	eq
 800e284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e288:	2500      	movne	r5, #0
 800e28a:	4293      	cmp	r3, r2
 800e28c:	bfc4      	itt	gt
 800e28e:	1a9b      	subgt	r3, r3, r2
 800e290:	18ed      	addgt	r5, r5, r3
 800e292:	2600      	movs	r6, #0
 800e294:	341a      	adds	r4, #26
 800e296:	42b5      	cmp	r5, r6
 800e298:	d11a      	bne.n	800e2d0 <_printf_common+0xc8>
 800e29a:	2000      	movs	r0, #0
 800e29c:	e008      	b.n	800e2b0 <_printf_common+0xa8>
 800e29e:	2301      	movs	r3, #1
 800e2a0:	4652      	mov	r2, sl
 800e2a2:	4649      	mov	r1, r9
 800e2a4:	4638      	mov	r0, r7
 800e2a6:	47c0      	blx	r8
 800e2a8:	3001      	adds	r0, #1
 800e2aa:	d103      	bne.n	800e2b4 <_printf_common+0xac>
 800e2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e2b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2b4:	3501      	adds	r5, #1
 800e2b6:	e7c6      	b.n	800e246 <_printf_common+0x3e>
 800e2b8:	18e1      	adds	r1, r4, r3
 800e2ba:	1c5a      	adds	r2, r3, #1
 800e2bc:	2030      	movs	r0, #48	; 0x30
 800e2be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e2c2:	4422      	add	r2, r4
 800e2c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e2c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e2cc:	3302      	adds	r3, #2
 800e2ce:	e7c7      	b.n	800e260 <_printf_common+0x58>
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	4622      	mov	r2, r4
 800e2d4:	4649      	mov	r1, r9
 800e2d6:	4638      	mov	r0, r7
 800e2d8:	47c0      	blx	r8
 800e2da:	3001      	adds	r0, #1
 800e2dc:	d0e6      	beq.n	800e2ac <_printf_common+0xa4>
 800e2de:	3601      	adds	r6, #1
 800e2e0:	e7d9      	b.n	800e296 <_printf_common+0x8e>
	...

0800e2e4 <_printf_i>:
 800e2e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2e8:	7e0f      	ldrb	r7, [r1, #24]
 800e2ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e2ec:	2f78      	cmp	r7, #120	; 0x78
 800e2ee:	4691      	mov	r9, r2
 800e2f0:	4680      	mov	r8, r0
 800e2f2:	460c      	mov	r4, r1
 800e2f4:	469a      	mov	sl, r3
 800e2f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e2fa:	d807      	bhi.n	800e30c <_printf_i+0x28>
 800e2fc:	2f62      	cmp	r7, #98	; 0x62
 800e2fe:	d80a      	bhi.n	800e316 <_printf_i+0x32>
 800e300:	2f00      	cmp	r7, #0
 800e302:	f000 80d8 	beq.w	800e4b6 <_printf_i+0x1d2>
 800e306:	2f58      	cmp	r7, #88	; 0x58
 800e308:	f000 80a3 	beq.w	800e452 <_printf_i+0x16e>
 800e30c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e310:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e314:	e03a      	b.n	800e38c <_printf_i+0xa8>
 800e316:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e31a:	2b15      	cmp	r3, #21
 800e31c:	d8f6      	bhi.n	800e30c <_printf_i+0x28>
 800e31e:	a101      	add	r1, pc, #4	; (adr r1, 800e324 <_printf_i+0x40>)
 800e320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e324:	0800e37d 	.word	0x0800e37d
 800e328:	0800e391 	.word	0x0800e391
 800e32c:	0800e30d 	.word	0x0800e30d
 800e330:	0800e30d 	.word	0x0800e30d
 800e334:	0800e30d 	.word	0x0800e30d
 800e338:	0800e30d 	.word	0x0800e30d
 800e33c:	0800e391 	.word	0x0800e391
 800e340:	0800e30d 	.word	0x0800e30d
 800e344:	0800e30d 	.word	0x0800e30d
 800e348:	0800e30d 	.word	0x0800e30d
 800e34c:	0800e30d 	.word	0x0800e30d
 800e350:	0800e49d 	.word	0x0800e49d
 800e354:	0800e3c1 	.word	0x0800e3c1
 800e358:	0800e47f 	.word	0x0800e47f
 800e35c:	0800e30d 	.word	0x0800e30d
 800e360:	0800e30d 	.word	0x0800e30d
 800e364:	0800e4bf 	.word	0x0800e4bf
 800e368:	0800e30d 	.word	0x0800e30d
 800e36c:	0800e3c1 	.word	0x0800e3c1
 800e370:	0800e30d 	.word	0x0800e30d
 800e374:	0800e30d 	.word	0x0800e30d
 800e378:	0800e487 	.word	0x0800e487
 800e37c:	682b      	ldr	r3, [r5, #0]
 800e37e:	1d1a      	adds	r2, r3, #4
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	602a      	str	r2, [r5, #0]
 800e384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e38c:	2301      	movs	r3, #1
 800e38e:	e0a3      	b.n	800e4d8 <_printf_i+0x1f4>
 800e390:	6820      	ldr	r0, [r4, #0]
 800e392:	6829      	ldr	r1, [r5, #0]
 800e394:	0606      	lsls	r6, r0, #24
 800e396:	f101 0304 	add.w	r3, r1, #4
 800e39a:	d50a      	bpl.n	800e3b2 <_printf_i+0xce>
 800e39c:	680e      	ldr	r6, [r1, #0]
 800e39e:	602b      	str	r3, [r5, #0]
 800e3a0:	2e00      	cmp	r6, #0
 800e3a2:	da03      	bge.n	800e3ac <_printf_i+0xc8>
 800e3a4:	232d      	movs	r3, #45	; 0x2d
 800e3a6:	4276      	negs	r6, r6
 800e3a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3ac:	485e      	ldr	r0, [pc, #376]	; (800e528 <_printf_i+0x244>)
 800e3ae:	230a      	movs	r3, #10
 800e3b0:	e019      	b.n	800e3e6 <_printf_i+0x102>
 800e3b2:	680e      	ldr	r6, [r1, #0]
 800e3b4:	602b      	str	r3, [r5, #0]
 800e3b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e3ba:	bf18      	it	ne
 800e3bc:	b236      	sxthne	r6, r6
 800e3be:	e7ef      	b.n	800e3a0 <_printf_i+0xbc>
 800e3c0:	682b      	ldr	r3, [r5, #0]
 800e3c2:	6820      	ldr	r0, [r4, #0]
 800e3c4:	1d19      	adds	r1, r3, #4
 800e3c6:	6029      	str	r1, [r5, #0]
 800e3c8:	0601      	lsls	r1, r0, #24
 800e3ca:	d501      	bpl.n	800e3d0 <_printf_i+0xec>
 800e3cc:	681e      	ldr	r6, [r3, #0]
 800e3ce:	e002      	b.n	800e3d6 <_printf_i+0xf2>
 800e3d0:	0646      	lsls	r6, r0, #25
 800e3d2:	d5fb      	bpl.n	800e3cc <_printf_i+0xe8>
 800e3d4:	881e      	ldrh	r6, [r3, #0]
 800e3d6:	4854      	ldr	r0, [pc, #336]	; (800e528 <_printf_i+0x244>)
 800e3d8:	2f6f      	cmp	r7, #111	; 0x6f
 800e3da:	bf0c      	ite	eq
 800e3dc:	2308      	moveq	r3, #8
 800e3de:	230a      	movne	r3, #10
 800e3e0:	2100      	movs	r1, #0
 800e3e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e3e6:	6865      	ldr	r5, [r4, #4]
 800e3e8:	60a5      	str	r5, [r4, #8]
 800e3ea:	2d00      	cmp	r5, #0
 800e3ec:	bfa2      	ittt	ge
 800e3ee:	6821      	ldrge	r1, [r4, #0]
 800e3f0:	f021 0104 	bicge.w	r1, r1, #4
 800e3f4:	6021      	strge	r1, [r4, #0]
 800e3f6:	b90e      	cbnz	r6, 800e3fc <_printf_i+0x118>
 800e3f8:	2d00      	cmp	r5, #0
 800e3fa:	d04d      	beq.n	800e498 <_printf_i+0x1b4>
 800e3fc:	4615      	mov	r5, r2
 800e3fe:	fbb6 f1f3 	udiv	r1, r6, r3
 800e402:	fb03 6711 	mls	r7, r3, r1, r6
 800e406:	5dc7      	ldrb	r7, [r0, r7]
 800e408:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e40c:	4637      	mov	r7, r6
 800e40e:	42bb      	cmp	r3, r7
 800e410:	460e      	mov	r6, r1
 800e412:	d9f4      	bls.n	800e3fe <_printf_i+0x11a>
 800e414:	2b08      	cmp	r3, #8
 800e416:	d10b      	bne.n	800e430 <_printf_i+0x14c>
 800e418:	6823      	ldr	r3, [r4, #0]
 800e41a:	07de      	lsls	r6, r3, #31
 800e41c:	d508      	bpl.n	800e430 <_printf_i+0x14c>
 800e41e:	6923      	ldr	r3, [r4, #16]
 800e420:	6861      	ldr	r1, [r4, #4]
 800e422:	4299      	cmp	r1, r3
 800e424:	bfde      	ittt	le
 800e426:	2330      	movle	r3, #48	; 0x30
 800e428:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e42c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e430:	1b52      	subs	r2, r2, r5
 800e432:	6122      	str	r2, [r4, #16]
 800e434:	f8cd a000 	str.w	sl, [sp]
 800e438:	464b      	mov	r3, r9
 800e43a:	aa03      	add	r2, sp, #12
 800e43c:	4621      	mov	r1, r4
 800e43e:	4640      	mov	r0, r8
 800e440:	f7ff fee2 	bl	800e208 <_printf_common>
 800e444:	3001      	adds	r0, #1
 800e446:	d14c      	bne.n	800e4e2 <_printf_i+0x1fe>
 800e448:	f04f 30ff 	mov.w	r0, #4294967295
 800e44c:	b004      	add	sp, #16
 800e44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e452:	4835      	ldr	r0, [pc, #212]	; (800e528 <_printf_i+0x244>)
 800e454:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e458:	6829      	ldr	r1, [r5, #0]
 800e45a:	6823      	ldr	r3, [r4, #0]
 800e45c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e460:	6029      	str	r1, [r5, #0]
 800e462:	061d      	lsls	r5, r3, #24
 800e464:	d514      	bpl.n	800e490 <_printf_i+0x1ac>
 800e466:	07df      	lsls	r7, r3, #31
 800e468:	bf44      	itt	mi
 800e46a:	f043 0320 	orrmi.w	r3, r3, #32
 800e46e:	6023      	strmi	r3, [r4, #0]
 800e470:	b91e      	cbnz	r6, 800e47a <_printf_i+0x196>
 800e472:	6823      	ldr	r3, [r4, #0]
 800e474:	f023 0320 	bic.w	r3, r3, #32
 800e478:	6023      	str	r3, [r4, #0]
 800e47a:	2310      	movs	r3, #16
 800e47c:	e7b0      	b.n	800e3e0 <_printf_i+0xfc>
 800e47e:	6823      	ldr	r3, [r4, #0]
 800e480:	f043 0320 	orr.w	r3, r3, #32
 800e484:	6023      	str	r3, [r4, #0]
 800e486:	2378      	movs	r3, #120	; 0x78
 800e488:	4828      	ldr	r0, [pc, #160]	; (800e52c <_printf_i+0x248>)
 800e48a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e48e:	e7e3      	b.n	800e458 <_printf_i+0x174>
 800e490:	0659      	lsls	r1, r3, #25
 800e492:	bf48      	it	mi
 800e494:	b2b6      	uxthmi	r6, r6
 800e496:	e7e6      	b.n	800e466 <_printf_i+0x182>
 800e498:	4615      	mov	r5, r2
 800e49a:	e7bb      	b.n	800e414 <_printf_i+0x130>
 800e49c:	682b      	ldr	r3, [r5, #0]
 800e49e:	6826      	ldr	r6, [r4, #0]
 800e4a0:	6961      	ldr	r1, [r4, #20]
 800e4a2:	1d18      	adds	r0, r3, #4
 800e4a4:	6028      	str	r0, [r5, #0]
 800e4a6:	0635      	lsls	r5, r6, #24
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	d501      	bpl.n	800e4b0 <_printf_i+0x1cc>
 800e4ac:	6019      	str	r1, [r3, #0]
 800e4ae:	e002      	b.n	800e4b6 <_printf_i+0x1d2>
 800e4b0:	0670      	lsls	r0, r6, #25
 800e4b2:	d5fb      	bpl.n	800e4ac <_printf_i+0x1c8>
 800e4b4:	8019      	strh	r1, [r3, #0]
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	6123      	str	r3, [r4, #16]
 800e4ba:	4615      	mov	r5, r2
 800e4bc:	e7ba      	b.n	800e434 <_printf_i+0x150>
 800e4be:	682b      	ldr	r3, [r5, #0]
 800e4c0:	1d1a      	adds	r2, r3, #4
 800e4c2:	602a      	str	r2, [r5, #0]
 800e4c4:	681d      	ldr	r5, [r3, #0]
 800e4c6:	6862      	ldr	r2, [r4, #4]
 800e4c8:	2100      	movs	r1, #0
 800e4ca:	4628      	mov	r0, r5
 800e4cc:	f7f1 feb0 	bl	8000230 <memchr>
 800e4d0:	b108      	cbz	r0, 800e4d6 <_printf_i+0x1f2>
 800e4d2:	1b40      	subs	r0, r0, r5
 800e4d4:	6060      	str	r0, [r4, #4]
 800e4d6:	6863      	ldr	r3, [r4, #4]
 800e4d8:	6123      	str	r3, [r4, #16]
 800e4da:	2300      	movs	r3, #0
 800e4dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e4e0:	e7a8      	b.n	800e434 <_printf_i+0x150>
 800e4e2:	6923      	ldr	r3, [r4, #16]
 800e4e4:	462a      	mov	r2, r5
 800e4e6:	4649      	mov	r1, r9
 800e4e8:	4640      	mov	r0, r8
 800e4ea:	47d0      	blx	sl
 800e4ec:	3001      	adds	r0, #1
 800e4ee:	d0ab      	beq.n	800e448 <_printf_i+0x164>
 800e4f0:	6823      	ldr	r3, [r4, #0]
 800e4f2:	079b      	lsls	r3, r3, #30
 800e4f4:	d413      	bmi.n	800e51e <_printf_i+0x23a>
 800e4f6:	68e0      	ldr	r0, [r4, #12]
 800e4f8:	9b03      	ldr	r3, [sp, #12]
 800e4fa:	4298      	cmp	r0, r3
 800e4fc:	bfb8      	it	lt
 800e4fe:	4618      	movlt	r0, r3
 800e500:	e7a4      	b.n	800e44c <_printf_i+0x168>
 800e502:	2301      	movs	r3, #1
 800e504:	4632      	mov	r2, r6
 800e506:	4649      	mov	r1, r9
 800e508:	4640      	mov	r0, r8
 800e50a:	47d0      	blx	sl
 800e50c:	3001      	adds	r0, #1
 800e50e:	d09b      	beq.n	800e448 <_printf_i+0x164>
 800e510:	3501      	adds	r5, #1
 800e512:	68e3      	ldr	r3, [r4, #12]
 800e514:	9903      	ldr	r1, [sp, #12]
 800e516:	1a5b      	subs	r3, r3, r1
 800e518:	42ab      	cmp	r3, r5
 800e51a:	dcf2      	bgt.n	800e502 <_printf_i+0x21e>
 800e51c:	e7eb      	b.n	800e4f6 <_printf_i+0x212>
 800e51e:	2500      	movs	r5, #0
 800e520:	f104 0619 	add.w	r6, r4, #25
 800e524:	e7f5      	b.n	800e512 <_printf_i+0x22e>
 800e526:	bf00      	nop
 800e528:	0801356a 	.word	0x0801356a
 800e52c:	0801357b 	.word	0x0801357b

0800e530 <iprintf>:
 800e530:	b40f      	push	{r0, r1, r2, r3}
 800e532:	4b0a      	ldr	r3, [pc, #40]	; (800e55c <iprintf+0x2c>)
 800e534:	b513      	push	{r0, r1, r4, lr}
 800e536:	681c      	ldr	r4, [r3, #0]
 800e538:	b124      	cbz	r4, 800e544 <iprintf+0x14>
 800e53a:	69a3      	ldr	r3, [r4, #24]
 800e53c:	b913      	cbnz	r3, 800e544 <iprintf+0x14>
 800e53e:	4620      	mov	r0, r4
 800e540:	f001 ff96 	bl	8010470 <__sinit>
 800e544:	ab05      	add	r3, sp, #20
 800e546:	9a04      	ldr	r2, [sp, #16]
 800e548:	68a1      	ldr	r1, [r4, #8]
 800e54a:	9301      	str	r3, [sp, #4]
 800e54c:	4620      	mov	r0, r4
 800e54e:	f003 fa03 	bl	8011958 <_vfiprintf_r>
 800e552:	b002      	add	sp, #8
 800e554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e558:	b004      	add	sp, #16
 800e55a:	4770      	bx	lr
 800e55c:	2000002c 	.word	0x2000002c

0800e560 <_puts_r>:
 800e560:	b570      	push	{r4, r5, r6, lr}
 800e562:	460e      	mov	r6, r1
 800e564:	4605      	mov	r5, r0
 800e566:	b118      	cbz	r0, 800e570 <_puts_r+0x10>
 800e568:	6983      	ldr	r3, [r0, #24]
 800e56a:	b90b      	cbnz	r3, 800e570 <_puts_r+0x10>
 800e56c:	f001 ff80 	bl	8010470 <__sinit>
 800e570:	69ab      	ldr	r3, [r5, #24]
 800e572:	68ac      	ldr	r4, [r5, #8]
 800e574:	b913      	cbnz	r3, 800e57c <_puts_r+0x1c>
 800e576:	4628      	mov	r0, r5
 800e578:	f001 ff7a 	bl	8010470 <__sinit>
 800e57c:	4b2c      	ldr	r3, [pc, #176]	; (800e630 <_puts_r+0xd0>)
 800e57e:	429c      	cmp	r4, r3
 800e580:	d120      	bne.n	800e5c4 <_puts_r+0x64>
 800e582:	686c      	ldr	r4, [r5, #4]
 800e584:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e586:	07db      	lsls	r3, r3, #31
 800e588:	d405      	bmi.n	800e596 <_puts_r+0x36>
 800e58a:	89a3      	ldrh	r3, [r4, #12]
 800e58c:	0598      	lsls	r0, r3, #22
 800e58e:	d402      	bmi.n	800e596 <_puts_r+0x36>
 800e590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e592:	f002 fb7e 	bl	8010c92 <__retarget_lock_acquire_recursive>
 800e596:	89a3      	ldrh	r3, [r4, #12]
 800e598:	0719      	lsls	r1, r3, #28
 800e59a:	d51d      	bpl.n	800e5d8 <_puts_r+0x78>
 800e59c:	6923      	ldr	r3, [r4, #16]
 800e59e:	b1db      	cbz	r3, 800e5d8 <_puts_r+0x78>
 800e5a0:	3e01      	subs	r6, #1
 800e5a2:	68a3      	ldr	r3, [r4, #8]
 800e5a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e5a8:	3b01      	subs	r3, #1
 800e5aa:	60a3      	str	r3, [r4, #8]
 800e5ac:	bb39      	cbnz	r1, 800e5fe <_puts_r+0x9e>
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	da38      	bge.n	800e624 <_puts_r+0xc4>
 800e5b2:	4622      	mov	r2, r4
 800e5b4:	210a      	movs	r1, #10
 800e5b6:	4628      	mov	r0, r5
 800e5b8:	f000 ff04 	bl	800f3c4 <__swbuf_r>
 800e5bc:	3001      	adds	r0, #1
 800e5be:	d011      	beq.n	800e5e4 <_puts_r+0x84>
 800e5c0:	250a      	movs	r5, #10
 800e5c2:	e011      	b.n	800e5e8 <_puts_r+0x88>
 800e5c4:	4b1b      	ldr	r3, [pc, #108]	; (800e634 <_puts_r+0xd4>)
 800e5c6:	429c      	cmp	r4, r3
 800e5c8:	d101      	bne.n	800e5ce <_puts_r+0x6e>
 800e5ca:	68ac      	ldr	r4, [r5, #8]
 800e5cc:	e7da      	b.n	800e584 <_puts_r+0x24>
 800e5ce:	4b1a      	ldr	r3, [pc, #104]	; (800e638 <_puts_r+0xd8>)
 800e5d0:	429c      	cmp	r4, r3
 800e5d2:	bf08      	it	eq
 800e5d4:	68ec      	ldreq	r4, [r5, #12]
 800e5d6:	e7d5      	b.n	800e584 <_puts_r+0x24>
 800e5d8:	4621      	mov	r1, r4
 800e5da:	4628      	mov	r0, r5
 800e5dc:	f000 ff44 	bl	800f468 <__swsetup_r>
 800e5e0:	2800      	cmp	r0, #0
 800e5e2:	d0dd      	beq.n	800e5a0 <_puts_r+0x40>
 800e5e4:	f04f 35ff 	mov.w	r5, #4294967295
 800e5e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5ea:	07da      	lsls	r2, r3, #31
 800e5ec:	d405      	bmi.n	800e5fa <_puts_r+0x9a>
 800e5ee:	89a3      	ldrh	r3, [r4, #12]
 800e5f0:	059b      	lsls	r3, r3, #22
 800e5f2:	d402      	bmi.n	800e5fa <_puts_r+0x9a>
 800e5f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5f6:	f002 fb4d 	bl	8010c94 <__retarget_lock_release_recursive>
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	bd70      	pop	{r4, r5, r6, pc}
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	da04      	bge.n	800e60c <_puts_r+0xac>
 800e602:	69a2      	ldr	r2, [r4, #24]
 800e604:	429a      	cmp	r2, r3
 800e606:	dc06      	bgt.n	800e616 <_puts_r+0xb6>
 800e608:	290a      	cmp	r1, #10
 800e60a:	d004      	beq.n	800e616 <_puts_r+0xb6>
 800e60c:	6823      	ldr	r3, [r4, #0]
 800e60e:	1c5a      	adds	r2, r3, #1
 800e610:	6022      	str	r2, [r4, #0]
 800e612:	7019      	strb	r1, [r3, #0]
 800e614:	e7c5      	b.n	800e5a2 <_puts_r+0x42>
 800e616:	4622      	mov	r2, r4
 800e618:	4628      	mov	r0, r5
 800e61a:	f000 fed3 	bl	800f3c4 <__swbuf_r>
 800e61e:	3001      	adds	r0, #1
 800e620:	d1bf      	bne.n	800e5a2 <_puts_r+0x42>
 800e622:	e7df      	b.n	800e5e4 <_puts_r+0x84>
 800e624:	6823      	ldr	r3, [r4, #0]
 800e626:	250a      	movs	r5, #10
 800e628:	1c5a      	adds	r2, r3, #1
 800e62a:	6022      	str	r2, [r4, #0]
 800e62c:	701d      	strb	r5, [r3, #0]
 800e62e:	e7db      	b.n	800e5e8 <_puts_r+0x88>
 800e630:	08013794 	.word	0x08013794
 800e634:	080137b4 	.word	0x080137b4
 800e638:	08013774 	.word	0x08013774

0800e63c <puts>:
 800e63c:	4b02      	ldr	r3, [pc, #8]	; (800e648 <puts+0xc>)
 800e63e:	4601      	mov	r1, r0
 800e640:	6818      	ldr	r0, [r3, #0]
 800e642:	f7ff bf8d 	b.w	800e560 <_puts_r>
 800e646:	bf00      	nop
 800e648:	2000002c 	.word	0x2000002c

0800e64c <sulp>:
 800e64c:	b570      	push	{r4, r5, r6, lr}
 800e64e:	4604      	mov	r4, r0
 800e650:	460d      	mov	r5, r1
 800e652:	ec45 4b10 	vmov	d0, r4, r5
 800e656:	4616      	mov	r6, r2
 800e658:	f002 ff0e 	bl	8011478 <__ulp>
 800e65c:	ec51 0b10 	vmov	r0, r1, d0
 800e660:	b17e      	cbz	r6, 800e682 <sulp+0x36>
 800e662:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e666:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	dd09      	ble.n	800e682 <sulp+0x36>
 800e66e:	051b      	lsls	r3, r3, #20
 800e670:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e674:	2400      	movs	r4, #0
 800e676:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e67a:	4622      	mov	r2, r4
 800e67c:	462b      	mov	r3, r5
 800e67e:	f7f1 ffe3 	bl	8000648 <__aeabi_dmul>
 800e682:	bd70      	pop	{r4, r5, r6, pc}
 800e684:	0000      	movs	r0, r0
	...

0800e688 <_strtod_l>:
 800e688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e68c:	ed2d 8b02 	vpush	{d8}
 800e690:	b09d      	sub	sp, #116	; 0x74
 800e692:	461f      	mov	r7, r3
 800e694:	2300      	movs	r3, #0
 800e696:	9318      	str	r3, [sp, #96]	; 0x60
 800e698:	4ba2      	ldr	r3, [pc, #648]	; (800e924 <_strtod_l+0x29c>)
 800e69a:	9213      	str	r2, [sp, #76]	; 0x4c
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	9305      	str	r3, [sp, #20]
 800e6a0:	4604      	mov	r4, r0
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	4688      	mov	r8, r1
 800e6a6:	f7f1 fdbb 	bl	8000220 <strlen>
 800e6aa:	f04f 0a00 	mov.w	sl, #0
 800e6ae:	4605      	mov	r5, r0
 800e6b0:	f04f 0b00 	mov.w	fp, #0
 800e6b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e6b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e6ba:	781a      	ldrb	r2, [r3, #0]
 800e6bc:	2a2b      	cmp	r2, #43	; 0x2b
 800e6be:	d04e      	beq.n	800e75e <_strtod_l+0xd6>
 800e6c0:	d83b      	bhi.n	800e73a <_strtod_l+0xb2>
 800e6c2:	2a0d      	cmp	r2, #13
 800e6c4:	d834      	bhi.n	800e730 <_strtod_l+0xa8>
 800e6c6:	2a08      	cmp	r2, #8
 800e6c8:	d834      	bhi.n	800e734 <_strtod_l+0xac>
 800e6ca:	2a00      	cmp	r2, #0
 800e6cc:	d03e      	beq.n	800e74c <_strtod_l+0xc4>
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	930a      	str	r3, [sp, #40]	; 0x28
 800e6d2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e6d4:	7833      	ldrb	r3, [r6, #0]
 800e6d6:	2b30      	cmp	r3, #48	; 0x30
 800e6d8:	f040 80b0 	bne.w	800e83c <_strtod_l+0x1b4>
 800e6dc:	7873      	ldrb	r3, [r6, #1]
 800e6de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e6e2:	2b58      	cmp	r3, #88	; 0x58
 800e6e4:	d168      	bne.n	800e7b8 <_strtod_l+0x130>
 800e6e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6e8:	9301      	str	r3, [sp, #4]
 800e6ea:	ab18      	add	r3, sp, #96	; 0x60
 800e6ec:	9702      	str	r7, [sp, #8]
 800e6ee:	9300      	str	r3, [sp, #0]
 800e6f0:	4a8d      	ldr	r2, [pc, #564]	; (800e928 <_strtod_l+0x2a0>)
 800e6f2:	ab19      	add	r3, sp, #100	; 0x64
 800e6f4:	a917      	add	r1, sp, #92	; 0x5c
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	f001 ffbe 	bl	8010678 <__gethex>
 800e6fc:	f010 0707 	ands.w	r7, r0, #7
 800e700:	4605      	mov	r5, r0
 800e702:	d005      	beq.n	800e710 <_strtod_l+0x88>
 800e704:	2f06      	cmp	r7, #6
 800e706:	d12c      	bne.n	800e762 <_strtod_l+0xda>
 800e708:	3601      	adds	r6, #1
 800e70a:	2300      	movs	r3, #0
 800e70c:	9617      	str	r6, [sp, #92]	; 0x5c
 800e70e:	930a      	str	r3, [sp, #40]	; 0x28
 800e710:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e712:	2b00      	cmp	r3, #0
 800e714:	f040 8590 	bne.w	800f238 <_strtod_l+0xbb0>
 800e718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e71a:	b1eb      	cbz	r3, 800e758 <_strtod_l+0xd0>
 800e71c:	4652      	mov	r2, sl
 800e71e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e722:	ec43 2b10 	vmov	d0, r2, r3
 800e726:	b01d      	add	sp, #116	; 0x74
 800e728:	ecbd 8b02 	vpop	{d8}
 800e72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e730:	2a20      	cmp	r2, #32
 800e732:	d1cc      	bne.n	800e6ce <_strtod_l+0x46>
 800e734:	3301      	adds	r3, #1
 800e736:	9317      	str	r3, [sp, #92]	; 0x5c
 800e738:	e7be      	b.n	800e6b8 <_strtod_l+0x30>
 800e73a:	2a2d      	cmp	r2, #45	; 0x2d
 800e73c:	d1c7      	bne.n	800e6ce <_strtod_l+0x46>
 800e73e:	2201      	movs	r2, #1
 800e740:	920a      	str	r2, [sp, #40]	; 0x28
 800e742:	1c5a      	adds	r2, r3, #1
 800e744:	9217      	str	r2, [sp, #92]	; 0x5c
 800e746:	785b      	ldrb	r3, [r3, #1]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d1c2      	bne.n	800e6d2 <_strtod_l+0x4a>
 800e74c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e74e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e752:	2b00      	cmp	r3, #0
 800e754:	f040 856e 	bne.w	800f234 <_strtod_l+0xbac>
 800e758:	4652      	mov	r2, sl
 800e75a:	465b      	mov	r3, fp
 800e75c:	e7e1      	b.n	800e722 <_strtod_l+0x9a>
 800e75e:	2200      	movs	r2, #0
 800e760:	e7ee      	b.n	800e740 <_strtod_l+0xb8>
 800e762:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e764:	b13a      	cbz	r2, 800e776 <_strtod_l+0xee>
 800e766:	2135      	movs	r1, #53	; 0x35
 800e768:	a81a      	add	r0, sp, #104	; 0x68
 800e76a:	f002 ff90 	bl	801168e <__copybits>
 800e76e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e770:	4620      	mov	r0, r4
 800e772:	f002 fb4f 	bl	8010e14 <_Bfree>
 800e776:	3f01      	subs	r7, #1
 800e778:	2f04      	cmp	r7, #4
 800e77a:	d806      	bhi.n	800e78a <_strtod_l+0x102>
 800e77c:	e8df f007 	tbb	[pc, r7]
 800e780:	1714030a 	.word	0x1714030a
 800e784:	0a          	.byte	0x0a
 800e785:	00          	.byte	0x00
 800e786:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800e78a:	0728      	lsls	r0, r5, #28
 800e78c:	d5c0      	bpl.n	800e710 <_strtod_l+0x88>
 800e78e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e792:	e7bd      	b.n	800e710 <_strtod_l+0x88>
 800e794:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800e798:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e79a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e79e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e7a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e7a6:	e7f0      	b.n	800e78a <_strtod_l+0x102>
 800e7a8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800e92c <_strtod_l+0x2a4>
 800e7ac:	e7ed      	b.n	800e78a <_strtod_l+0x102>
 800e7ae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e7b2:	f04f 3aff 	mov.w	sl, #4294967295
 800e7b6:	e7e8      	b.n	800e78a <_strtod_l+0x102>
 800e7b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e7ba:	1c5a      	adds	r2, r3, #1
 800e7bc:	9217      	str	r2, [sp, #92]	; 0x5c
 800e7be:	785b      	ldrb	r3, [r3, #1]
 800e7c0:	2b30      	cmp	r3, #48	; 0x30
 800e7c2:	d0f9      	beq.n	800e7b8 <_strtod_l+0x130>
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d0a3      	beq.n	800e710 <_strtod_l+0x88>
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	f04f 0900 	mov.w	r9, #0
 800e7ce:	9304      	str	r3, [sp, #16]
 800e7d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e7d2:	9308      	str	r3, [sp, #32]
 800e7d4:	f8cd 901c 	str.w	r9, [sp, #28]
 800e7d8:	464f      	mov	r7, r9
 800e7da:	220a      	movs	r2, #10
 800e7dc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e7de:	7806      	ldrb	r6, [r0, #0]
 800e7e0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e7e4:	b2d9      	uxtb	r1, r3
 800e7e6:	2909      	cmp	r1, #9
 800e7e8:	d92a      	bls.n	800e840 <_strtod_l+0x1b8>
 800e7ea:	9905      	ldr	r1, [sp, #20]
 800e7ec:	462a      	mov	r2, r5
 800e7ee:	f003 fa3e 	bl	8011c6e <strncmp>
 800e7f2:	b398      	cbz	r0, 800e85c <_strtod_l+0x1d4>
 800e7f4:	2000      	movs	r0, #0
 800e7f6:	4632      	mov	r2, r6
 800e7f8:	463d      	mov	r5, r7
 800e7fa:	9005      	str	r0, [sp, #20]
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	2a65      	cmp	r2, #101	; 0x65
 800e800:	d001      	beq.n	800e806 <_strtod_l+0x17e>
 800e802:	2a45      	cmp	r2, #69	; 0x45
 800e804:	d118      	bne.n	800e838 <_strtod_l+0x1b0>
 800e806:	b91d      	cbnz	r5, 800e810 <_strtod_l+0x188>
 800e808:	9a04      	ldr	r2, [sp, #16]
 800e80a:	4302      	orrs	r2, r0
 800e80c:	d09e      	beq.n	800e74c <_strtod_l+0xc4>
 800e80e:	2500      	movs	r5, #0
 800e810:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800e814:	f108 0201 	add.w	r2, r8, #1
 800e818:	9217      	str	r2, [sp, #92]	; 0x5c
 800e81a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e81e:	2a2b      	cmp	r2, #43	; 0x2b
 800e820:	d075      	beq.n	800e90e <_strtod_l+0x286>
 800e822:	2a2d      	cmp	r2, #45	; 0x2d
 800e824:	d07b      	beq.n	800e91e <_strtod_l+0x296>
 800e826:	f04f 0c00 	mov.w	ip, #0
 800e82a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e82e:	2909      	cmp	r1, #9
 800e830:	f240 8082 	bls.w	800e938 <_strtod_l+0x2b0>
 800e834:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e838:	2600      	movs	r6, #0
 800e83a:	e09d      	b.n	800e978 <_strtod_l+0x2f0>
 800e83c:	2300      	movs	r3, #0
 800e83e:	e7c4      	b.n	800e7ca <_strtod_l+0x142>
 800e840:	2f08      	cmp	r7, #8
 800e842:	bfd8      	it	le
 800e844:	9907      	ldrle	r1, [sp, #28]
 800e846:	f100 0001 	add.w	r0, r0, #1
 800e84a:	bfda      	itte	le
 800e84c:	fb02 3301 	mlale	r3, r2, r1, r3
 800e850:	9307      	strle	r3, [sp, #28]
 800e852:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e856:	3701      	adds	r7, #1
 800e858:	9017      	str	r0, [sp, #92]	; 0x5c
 800e85a:	e7bf      	b.n	800e7dc <_strtod_l+0x154>
 800e85c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e85e:	195a      	adds	r2, r3, r5
 800e860:	9217      	str	r2, [sp, #92]	; 0x5c
 800e862:	5d5a      	ldrb	r2, [r3, r5]
 800e864:	2f00      	cmp	r7, #0
 800e866:	d037      	beq.n	800e8d8 <_strtod_l+0x250>
 800e868:	9005      	str	r0, [sp, #20]
 800e86a:	463d      	mov	r5, r7
 800e86c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e870:	2b09      	cmp	r3, #9
 800e872:	d912      	bls.n	800e89a <_strtod_l+0x212>
 800e874:	2301      	movs	r3, #1
 800e876:	e7c2      	b.n	800e7fe <_strtod_l+0x176>
 800e878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e87a:	1c5a      	adds	r2, r3, #1
 800e87c:	9217      	str	r2, [sp, #92]	; 0x5c
 800e87e:	785a      	ldrb	r2, [r3, #1]
 800e880:	3001      	adds	r0, #1
 800e882:	2a30      	cmp	r2, #48	; 0x30
 800e884:	d0f8      	beq.n	800e878 <_strtod_l+0x1f0>
 800e886:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e88a:	2b08      	cmp	r3, #8
 800e88c:	f200 84d9 	bhi.w	800f242 <_strtod_l+0xbba>
 800e890:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e892:	9005      	str	r0, [sp, #20]
 800e894:	2000      	movs	r0, #0
 800e896:	9308      	str	r3, [sp, #32]
 800e898:	4605      	mov	r5, r0
 800e89a:	3a30      	subs	r2, #48	; 0x30
 800e89c:	f100 0301 	add.w	r3, r0, #1
 800e8a0:	d014      	beq.n	800e8cc <_strtod_l+0x244>
 800e8a2:	9905      	ldr	r1, [sp, #20]
 800e8a4:	4419      	add	r1, r3
 800e8a6:	9105      	str	r1, [sp, #20]
 800e8a8:	462b      	mov	r3, r5
 800e8aa:	eb00 0e05 	add.w	lr, r0, r5
 800e8ae:	210a      	movs	r1, #10
 800e8b0:	4573      	cmp	r3, lr
 800e8b2:	d113      	bne.n	800e8dc <_strtod_l+0x254>
 800e8b4:	182b      	adds	r3, r5, r0
 800e8b6:	2b08      	cmp	r3, #8
 800e8b8:	f105 0501 	add.w	r5, r5, #1
 800e8bc:	4405      	add	r5, r0
 800e8be:	dc1c      	bgt.n	800e8fa <_strtod_l+0x272>
 800e8c0:	9907      	ldr	r1, [sp, #28]
 800e8c2:	230a      	movs	r3, #10
 800e8c4:	fb03 2301 	mla	r3, r3, r1, r2
 800e8c8:	9307      	str	r3, [sp, #28]
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e8ce:	1c51      	adds	r1, r2, #1
 800e8d0:	9117      	str	r1, [sp, #92]	; 0x5c
 800e8d2:	7852      	ldrb	r2, [r2, #1]
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	e7c9      	b.n	800e86c <_strtod_l+0x1e4>
 800e8d8:	4638      	mov	r0, r7
 800e8da:	e7d2      	b.n	800e882 <_strtod_l+0x1fa>
 800e8dc:	2b08      	cmp	r3, #8
 800e8de:	dc04      	bgt.n	800e8ea <_strtod_l+0x262>
 800e8e0:	9e07      	ldr	r6, [sp, #28]
 800e8e2:	434e      	muls	r6, r1
 800e8e4:	9607      	str	r6, [sp, #28]
 800e8e6:	3301      	adds	r3, #1
 800e8e8:	e7e2      	b.n	800e8b0 <_strtod_l+0x228>
 800e8ea:	f103 0c01 	add.w	ip, r3, #1
 800e8ee:	f1bc 0f10 	cmp.w	ip, #16
 800e8f2:	bfd8      	it	le
 800e8f4:	fb01 f909 	mulle.w	r9, r1, r9
 800e8f8:	e7f5      	b.n	800e8e6 <_strtod_l+0x25e>
 800e8fa:	2d10      	cmp	r5, #16
 800e8fc:	bfdc      	itt	le
 800e8fe:	230a      	movle	r3, #10
 800e900:	fb03 2909 	mlale	r9, r3, r9, r2
 800e904:	e7e1      	b.n	800e8ca <_strtod_l+0x242>
 800e906:	2300      	movs	r3, #0
 800e908:	9305      	str	r3, [sp, #20]
 800e90a:	2301      	movs	r3, #1
 800e90c:	e77c      	b.n	800e808 <_strtod_l+0x180>
 800e90e:	f04f 0c00 	mov.w	ip, #0
 800e912:	f108 0202 	add.w	r2, r8, #2
 800e916:	9217      	str	r2, [sp, #92]	; 0x5c
 800e918:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e91c:	e785      	b.n	800e82a <_strtod_l+0x1a2>
 800e91e:	f04f 0c01 	mov.w	ip, #1
 800e922:	e7f6      	b.n	800e912 <_strtod_l+0x28a>
 800e924:	0801383c 	.word	0x0801383c
 800e928:	0801358c 	.word	0x0801358c
 800e92c:	7ff00000 	.word	0x7ff00000
 800e930:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e932:	1c51      	adds	r1, r2, #1
 800e934:	9117      	str	r1, [sp, #92]	; 0x5c
 800e936:	7852      	ldrb	r2, [r2, #1]
 800e938:	2a30      	cmp	r2, #48	; 0x30
 800e93a:	d0f9      	beq.n	800e930 <_strtod_l+0x2a8>
 800e93c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e940:	2908      	cmp	r1, #8
 800e942:	f63f af79 	bhi.w	800e838 <_strtod_l+0x1b0>
 800e946:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e94a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e94c:	9206      	str	r2, [sp, #24]
 800e94e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e950:	1c51      	adds	r1, r2, #1
 800e952:	9117      	str	r1, [sp, #92]	; 0x5c
 800e954:	7852      	ldrb	r2, [r2, #1]
 800e956:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800e95a:	2e09      	cmp	r6, #9
 800e95c:	d937      	bls.n	800e9ce <_strtod_l+0x346>
 800e95e:	9e06      	ldr	r6, [sp, #24]
 800e960:	1b89      	subs	r1, r1, r6
 800e962:	2908      	cmp	r1, #8
 800e964:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e968:	dc02      	bgt.n	800e970 <_strtod_l+0x2e8>
 800e96a:	4576      	cmp	r6, lr
 800e96c:	bfa8      	it	ge
 800e96e:	4676      	movge	r6, lr
 800e970:	f1bc 0f00 	cmp.w	ip, #0
 800e974:	d000      	beq.n	800e978 <_strtod_l+0x2f0>
 800e976:	4276      	negs	r6, r6
 800e978:	2d00      	cmp	r5, #0
 800e97a:	d14d      	bne.n	800ea18 <_strtod_l+0x390>
 800e97c:	9904      	ldr	r1, [sp, #16]
 800e97e:	4301      	orrs	r1, r0
 800e980:	f47f aec6 	bne.w	800e710 <_strtod_l+0x88>
 800e984:	2b00      	cmp	r3, #0
 800e986:	f47f aee1 	bne.w	800e74c <_strtod_l+0xc4>
 800e98a:	2a69      	cmp	r2, #105	; 0x69
 800e98c:	d027      	beq.n	800e9de <_strtod_l+0x356>
 800e98e:	dc24      	bgt.n	800e9da <_strtod_l+0x352>
 800e990:	2a49      	cmp	r2, #73	; 0x49
 800e992:	d024      	beq.n	800e9de <_strtod_l+0x356>
 800e994:	2a4e      	cmp	r2, #78	; 0x4e
 800e996:	f47f aed9 	bne.w	800e74c <_strtod_l+0xc4>
 800e99a:	499f      	ldr	r1, [pc, #636]	; (800ec18 <_strtod_l+0x590>)
 800e99c:	a817      	add	r0, sp, #92	; 0x5c
 800e99e:	f002 f8c3 	bl	8010b28 <__match>
 800e9a2:	2800      	cmp	r0, #0
 800e9a4:	f43f aed2 	beq.w	800e74c <_strtod_l+0xc4>
 800e9a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e9aa:	781b      	ldrb	r3, [r3, #0]
 800e9ac:	2b28      	cmp	r3, #40	; 0x28
 800e9ae:	d12d      	bne.n	800ea0c <_strtod_l+0x384>
 800e9b0:	499a      	ldr	r1, [pc, #616]	; (800ec1c <_strtod_l+0x594>)
 800e9b2:	aa1a      	add	r2, sp, #104	; 0x68
 800e9b4:	a817      	add	r0, sp, #92	; 0x5c
 800e9b6:	f002 f8cb 	bl	8010b50 <__hexnan>
 800e9ba:	2805      	cmp	r0, #5
 800e9bc:	d126      	bne.n	800ea0c <_strtod_l+0x384>
 800e9be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e9c0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800e9c4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e9c8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e9cc:	e6a0      	b.n	800e710 <_strtod_l+0x88>
 800e9ce:	210a      	movs	r1, #10
 800e9d0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800e9d4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e9d8:	e7b9      	b.n	800e94e <_strtod_l+0x2c6>
 800e9da:	2a6e      	cmp	r2, #110	; 0x6e
 800e9dc:	e7db      	b.n	800e996 <_strtod_l+0x30e>
 800e9de:	4990      	ldr	r1, [pc, #576]	; (800ec20 <_strtod_l+0x598>)
 800e9e0:	a817      	add	r0, sp, #92	; 0x5c
 800e9e2:	f002 f8a1 	bl	8010b28 <__match>
 800e9e6:	2800      	cmp	r0, #0
 800e9e8:	f43f aeb0 	beq.w	800e74c <_strtod_l+0xc4>
 800e9ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e9ee:	498d      	ldr	r1, [pc, #564]	; (800ec24 <_strtod_l+0x59c>)
 800e9f0:	3b01      	subs	r3, #1
 800e9f2:	a817      	add	r0, sp, #92	; 0x5c
 800e9f4:	9317      	str	r3, [sp, #92]	; 0x5c
 800e9f6:	f002 f897 	bl	8010b28 <__match>
 800e9fa:	b910      	cbnz	r0, 800ea02 <_strtod_l+0x37a>
 800e9fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e9fe:	3301      	adds	r3, #1
 800ea00:	9317      	str	r3, [sp, #92]	; 0x5c
 800ea02:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ec34 <_strtod_l+0x5ac>
 800ea06:	f04f 0a00 	mov.w	sl, #0
 800ea0a:	e681      	b.n	800e710 <_strtod_l+0x88>
 800ea0c:	4886      	ldr	r0, [pc, #536]	; (800ec28 <_strtod_l+0x5a0>)
 800ea0e:	f003 f8d3 	bl	8011bb8 <nan>
 800ea12:	ec5b ab10 	vmov	sl, fp, d0
 800ea16:	e67b      	b.n	800e710 <_strtod_l+0x88>
 800ea18:	9b05      	ldr	r3, [sp, #20]
 800ea1a:	9807      	ldr	r0, [sp, #28]
 800ea1c:	1af3      	subs	r3, r6, r3
 800ea1e:	2f00      	cmp	r7, #0
 800ea20:	bf08      	it	eq
 800ea22:	462f      	moveq	r7, r5
 800ea24:	2d10      	cmp	r5, #16
 800ea26:	9306      	str	r3, [sp, #24]
 800ea28:	46a8      	mov	r8, r5
 800ea2a:	bfa8      	it	ge
 800ea2c:	f04f 0810 	movge.w	r8, #16
 800ea30:	f7f1 fd90 	bl	8000554 <__aeabi_ui2d>
 800ea34:	2d09      	cmp	r5, #9
 800ea36:	4682      	mov	sl, r0
 800ea38:	468b      	mov	fp, r1
 800ea3a:	dd13      	ble.n	800ea64 <_strtod_l+0x3dc>
 800ea3c:	4b7b      	ldr	r3, [pc, #492]	; (800ec2c <_strtod_l+0x5a4>)
 800ea3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ea42:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ea46:	f7f1 fdff 	bl	8000648 <__aeabi_dmul>
 800ea4a:	4682      	mov	sl, r0
 800ea4c:	4648      	mov	r0, r9
 800ea4e:	468b      	mov	fp, r1
 800ea50:	f7f1 fd80 	bl	8000554 <__aeabi_ui2d>
 800ea54:	4602      	mov	r2, r0
 800ea56:	460b      	mov	r3, r1
 800ea58:	4650      	mov	r0, sl
 800ea5a:	4659      	mov	r1, fp
 800ea5c:	f7f1 fc3e 	bl	80002dc <__adddf3>
 800ea60:	4682      	mov	sl, r0
 800ea62:	468b      	mov	fp, r1
 800ea64:	2d0f      	cmp	r5, #15
 800ea66:	dc38      	bgt.n	800eada <_strtod_l+0x452>
 800ea68:	9b06      	ldr	r3, [sp, #24]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	f43f ae50 	beq.w	800e710 <_strtod_l+0x88>
 800ea70:	dd24      	ble.n	800eabc <_strtod_l+0x434>
 800ea72:	2b16      	cmp	r3, #22
 800ea74:	dc0b      	bgt.n	800ea8e <_strtod_l+0x406>
 800ea76:	496d      	ldr	r1, [pc, #436]	; (800ec2c <_strtod_l+0x5a4>)
 800ea78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ea7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea80:	4652      	mov	r2, sl
 800ea82:	465b      	mov	r3, fp
 800ea84:	f7f1 fde0 	bl	8000648 <__aeabi_dmul>
 800ea88:	4682      	mov	sl, r0
 800ea8a:	468b      	mov	fp, r1
 800ea8c:	e640      	b.n	800e710 <_strtod_l+0x88>
 800ea8e:	9a06      	ldr	r2, [sp, #24]
 800ea90:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ea94:	4293      	cmp	r3, r2
 800ea96:	db20      	blt.n	800eada <_strtod_l+0x452>
 800ea98:	4c64      	ldr	r4, [pc, #400]	; (800ec2c <_strtod_l+0x5a4>)
 800ea9a:	f1c5 050f 	rsb	r5, r5, #15
 800ea9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800eaa2:	4652      	mov	r2, sl
 800eaa4:	465b      	mov	r3, fp
 800eaa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eaaa:	f7f1 fdcd 	bl	8000648 <__aeabi_dmul>
 800eaae:	9b06      	ldr	r3, [sp, #24]
 800eab0:	1b5d      	subs	r5, r3, r5
 800eab2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800eab6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800eaba:	e7e3      	b.n	800ea84 <_strtod_l+0x3fc>
 800eabc:	9b06      	ldr	r3, [sp, #24]
 800eabe:	3316      	adds	r3, #22
 800eac0:	db0b      	blt.n	800eada <_strtod_l+0x452>
 800eac2:	9b05      	ldr	r3, [sp, #20]
 800eac4:	1b9e      	subs	r6, r3, r6
 800eac6:	4b59      	ldr	r3, [pc, #356]	; (800ec2c <_strtod_l+0x5a4>)
 800eac8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800eacc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ead0:	4650      	mov	r0, sl
 800ead2:	4659      	mov	r1, fp
 800ead4:	f7f1 fee2 	bl	800089c <__aeabi_ddiv>
 800ead8:	e7d6      	b.n	800ea88 <_strtod_l+0x400>
 800eada:	9b06      	ldr	r3, [sp, #24]
 800eadc:	eba5 0808 	sub.w	r8, r5, r8
 800eae0:	4498      	add	r8, r3
 800eae2:	f1b8 0f00 	cmp.w	r8, #0
 800eae6:	dd74      	ble.n	800ebd2 <_strtod_l+0x54a>
 800eae8:	f018 030f 	ands.w	r3, r8, #15
 800eaec:	d00a      	beq.n	800eb04 <_strtod_l+0x47c>
 800eaee:	494f      	ldr	r1, [pc, #316]	; (800ec2c <_strtod_l+0x5a4>)
 800eaf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800eaf4:	4652      	mov	r2, sl
 800eaf6:	465b      	mov	r3, fp
 800eaf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eafc:	f7f1 fda4 	bl	8000648 <__aeabi_dmul>
 800eb00:	4682      	mov	sl, r0
 800eb02:	468b      	mov	fp, r1
 800eb04:	f038 080f 	bics.w	r8, r8, #15
 800eb08:	d04f      	beq.n	800ebaa <_strtod_l+0x522>
 800eb0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800eb0e:	dd22      	ble.n	800eb56 <_strtod_l+0x4ce>
 800eb10:	2500      	movs	r5, #0
 800eb12:	462e      	mov	r6, r5
 800eb14:	9507      	str	r5, [sp, #28]
 800eb16:	9505      	str	r5, [sp, #20]
 800eb18:	2322      	movs	r3, #34	; 0x22
 800eb1a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ec34 <_strtod_l+0x5ac>
 800eb1e:	6023      	str	r3, [r4, #0]
 800eb20:	f04f 0a00 	mov.w	sl, #0
 800eb24:	9b07      	ldr	r3, [sp, #28]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	f43f adf2 	beq.w	800e710 <_strtod_l+0x88>
 800eb2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800eb2e:	4620      	mov	r0, r4
 800eb30:	f002 f970 	bl	8010e14 <_Bfree>
 800eb34:	9905      	ldr	r1, [sp, #20]
 800eb36:	4620      	mov	r0, r4
 800eb38:	f002 f96c 	bl	8010e14 <_Bfree>
 800eb3c:	4631      	mov	r1, r6
 800eb3e:	4620      	mov	r0, r4
 800eb40:	f002 f968 	bl	8010e14 <_Bfree>
 800eb44:	9907      	ldr	r1, [sp, #28]
 800eb46:	4620      	mov	r0, r4
 800eb48:	f002 f964 	bl	8010e14 <_Bfree>
 800eb4c:	4629      	mov	r1, r5
 800eb4e:	4620      	mov	r0, r4
 800eb50:	f002 f960 	bl	8010e14 <_Bfree>
 800eb54:	e5dc      	b.n	800e710 <_strtod_l+0x88>
 800eb56:	4b36      	ldr	r3, [pc, #216]	; (800ec30 <_strtod_l+0x5a8>)
 800eb58:	9304      	str	r3, [sp, #16]
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800eb60:	4650      	mov	r0, sl
 800eb62:	4659      	mov	r1, fp
 800eb64:	4699      	mov	r9, r3
 800eb66:	f1b8 0f01 	cmp.w	r8, #1
 800eb6a:	dc21      	bgt.n	800ebb0 <_strtod_l+0x528>
 800eb6c:	b10b      	cbz	r3, 800eb72 <_strtod_l+0x4ea>
 800eb6e:	4682      	mov	sl, r0
 800eb70:	468b      	mov	fp, r1
 800eb72:	4b2f      	ldr	r3, [pc, #188]	; (800ec30 <_strtod_l+0x5a8>)
 800eb74:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800eb78:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800eb7c:	4652      	mov	r2, sl
 800eb7e:	465b      	mov	r3, fp
 800eb80:	e9d9 0100 	ldrd	r0, r1, [r9]
 800eb84:	f7f1 fd60 	bl	8000648 <__aeabi_dmul>
 800eb88:	4b2a      	ldr	r3, [pc, #168]	; (800ec34 <_strtod_l+0x5ac>)
 800eb8a:	460a      	mov	r2, r1
 800eb8c:	400b      	ands	r3, r1
 800eb8e:	492a      	ldr	r1, [pc, #168]	; (800ec38 <_strtod_l+0x5b0>)
 800eb90:	428b      	cmp	r3, r1
 800eb92:	4682      	mov	sl, r0
 800eb94:	d8bc      	bhi.n	800eb10 <_strtod_l+0x488>
 800eb96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800eb9a:	428b      	cmp	r3, r1
 800eb9c:	bf86      	itte	hi
 800eb9e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ec3c <_strtod_l+0x5b4>
 800eba2:	f04f 3aff 	movhi.w	sl, #4294967295
 800eba6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ebaa:	2300      	movs	r3, #0
 800ebac:	9304      	str	r3, [sp, #16]
 800ebae:	e084      	b.n	800ecba <_strtod_l+0x632>
 800ebb0:	f018 0f01 	tst.w	r8, #1
 800ebb4:	d005      	beq.n	800ebc2 <_strtod_l+0x53a>
 800ebb6:	9b04      	ldr	r3, [sp, #16]
 800ebb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebbc:	f7f1 fd44 	bl	8000648 <__aeabi_dmul>
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	9a04      	ldr	r2, [sp, #16]
 800ebc4:	3208      	adds	r2, #8
 800ebc6:	f109 0901 	add.w	r9, r9, #1
 800ebca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ebce:	9204      	str	r2, [sp, #16]
 800ebd0:	e7c9      	b.n	800eb66 <_strtod_l+0x4de>
 800ebd2:	d0ea      	beq.n	800ebaa <_strtod_l+0x522>
 800ebd4:	f1c8 0800 	rsb	r8, r8, #0
 800ebd8:	f018 020f 	ands.w	r2, r8, #15
 800ebdc:	d00a      	beq.n	800ebf4 <_strtod_l+0x56c>
 800ebde:	4b13      	ldr	r3, [pc, #76]	; (800ec2c <_strtod_l+0x5a4>)
 800ebe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ebe4:	4650      	mov	r0, sl
 800ebe6:	4659      	mov	r1, fp
 800ebe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebec:	f7f1 fe56 	bl	800089c <__aeabi_ddiv>
 800ebf0:	4682      	mov	sl, r0
 800ebf2:	468b      	mov	fp, r1
 800ebf4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ebf8:	d0d7      	beq.n	800ebaa <_strtod_l+0x522>
 800ebfa:	f1b8 0f1f 	cmp.w	r8, #31
 800ebfe:	dd1f      	ble.n	800ec40 <_strtod_l+0x5b8>
 800ec00:	2500      	movs	r5, #0
 800ec02:	462e      	mov	r6, r5
 800ec04:	9507      	str	r5, [sp, #28]
 800ec06:	9505      	str	r5, [sp, #20]
 800ec08:	2322      	movs	r3, #34	; 0x22
 800ec0a:	f04f 0a00 	mov.w	sl, #0
 800ec0e:	f04f 0b00 	mov.w	fp, #0
 800ec12:	6023      	str	r3, [r4, #0]
 800ec14:	e786      	b.n	800eb24 <_strtod_l+0x49c>
 800ec16:	bf00      	nop
 800ec18:	08013565 	.word	0x08013565
 800ec1c:	080135a0 	.word	0x080135a0
 800ec20:	0801355d 	.word	0x0801355d
 800ec24:	080136e4 	.word	0x080136e4
 800ec28:	080139f8 	.word	0x080139f8
 800ec2c:	080138d8 	.word	0x080138d8
 800ec30:	080138b0 	.word	0x080138b0
 800ec34:	7ff00000 	.word	0x7ff00000
 800ec38:	7ca00000 	.word	0x7ca00000
 800ec3c:	7fefffff 	.word	0x7fefffff
 800ec40:	f018 0310 	ands.w	r3, r8, #16
 800ec44:	bf18      	it	ne
 800ec46:	236a      	movne	r3, #106	; 0x6a
 800ec48:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800eff8 <_strtod_l+0x970>
 800ec4c:	9304      	str	r3, [sp, #16]
 800ec4e:	4650      	mov	r0, sl
 800ec50:	4659      	mov	r1, fp
 800ec52:	2300      	movs	r3, #0
 800ec54:	f018 0f01 	tst.w	r8, #1
 800ec58:	d004      	beq.n	800ec64 <_strtod_l+0x5dc>
 800ec5a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ec5e:	f7f1 fcf3 	bl	8000648 <__aeabi_dmul>
 800ec62:	2301      	movs	r3, #1
 800ec64:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ec68:	f109 0908 	add.w	r9, r9, #8
 800ec6c:	d1f2      	bne.n	800ec54 <_strtod_l+0x5cc>
 800ec6e:	b10b      	cbz	r3, 800ec74 <_strtod_l+0x5ec>
 800ec70:	4682      	mov	sl, r0
 800ec72:	468b      	mov	fp, r1
 800ec74:	9b04      	ldr	r3, [sp, #16]
 800ec76:	b1c3      	cbz	r3, 800ecaa <_strtod_l+0x622>
 800ec78:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ec7c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	4659      	mov	r1, fp
 800ec84:	dd11      	ble.n	800ecaa <_strtod_l+0x622>
 800ec86:	2b1f      	cmp	r3, #31
 800ec88:	f340 8124 	ble.w	800eed4 <_strtod_l+0x84c>
 800ec8c:	2b34      	cmp	r3, #52	; 0x34
 800ec8e:	bfde      	ittt	le
 800ec90:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ec94:	f04f 33ff 	movle.w	r3, #4294967295
 800ec98:	fa03 f202 	lslle.w	r2, r3, r2
 800ec9c:	f04f 0a00 	mov.w	sl, #0
 800eca0:	bfcc      	ite	gt
 800eca2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800eca6:	ea02 0b01 	andle.w	fp, r2, r1
 800ecaa:	2200      	movs	r2, #0
 800ecac:	2300      	movs	r3, #0
 800ecae:	4650      	mov	r0, sl
 800ecb0:	4659      	mov	r1, fp
 800ecb2:	f7f1 ff31 	bl	8000b18 <__aeabi_dcmpeq>
 800ecb6:	2800      	cmp	r0, #0
 800ecb8:	d1a2      	bne.n	800ec00 <_strtod_l+0x578>
 800ecba:	9b07      	ldr	r3, [sp, #28]
 800ecbc:	9300      	str	r3, [sp, #0]
 800ecbe:	9908      	ldr	r1, [sp, #32]
 800ecc0:	462b      	mov	r3, r5
 800ecc2:	463a      	mov	r2, r7
 800ecc4:	4620      	mov	r0, r4
 800ecc6:	f002 f90d 	bl	8010ee4 <__s2b>
 800ecca:	9007      	str	r0, [sp, #28]
 800eccc:	2800      	cmp	r0, #0
 800ecce:	f43f af1f 	beq.w	800eb10 <_strtod_l+0x488>
 800ecd2:	9b05      	ldr	r3, [sp, #20]
 800ecd4:	1b9e      	subs	r6, r3, r6
 800ecd6:	9b06      	ldr	r3, [sp, #24]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	bfb4      	ite	lt
 800ecdc:	4633      	movlt	r3, r6
 800ecde:	2300      	movge	r3, #0
 800ece0:	930c      	str	r3, [sp, #48]	; 0x30
 800ece2:	9b06      	ldr	r3, [sp, #24]
 800ece4:	2500      	movs	r5, #0
 800ece6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ecea:	9312      	str	r3, [sp, #72]	; 0x48
 800ecec:	462e      	mov	r6, r5
 800ecee:	9b07      	ldr	r3, [sp, #28]
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	6859      	ldr	r1, [r3, #4]
 800ecf4:	f002 f84e 	bl	8010d94 <_Balloc>
 800ecf8:	9005      	str	r0, [sp, #20]
 800ecfa:	2800      	cmp	r0, #0
 800ecfc:	f43f af0c 	beq.w	800eb18 <_strtod_l+0x490>
 800ed00:	9b07      	ldr	r3, [sp, #28]
 800ed02:	691a      	ldr	r2, [r3, #16]
 800ed04:	3202      	adds	r2, #2
 800ed06:	f103 010c 	add.w	r1, r3, #12
 800ed0a:	0092      	lsls	r2, r2, #2
 800ed0c:	300c      	adds	r0, #12
 800ed0e:	f7fe ff8f 	bl	800dc30 <memcpy>
 800ed12:	ec4b ab10 	vmov	d0, sl, fp
 800ed16:	aa1a      	add	r2, sp, #104	; 0x68
 800ed18:	a919      	add	r1, sp, #100	; 0x64
 800ed1a:	4620      	mov	r0, r4
 800ed1c:	f002 fc28 	bl	8011570 <__d2b>
 800ed20:	ec4b ab18 	vmov	d8, sl, fp
 800ed24:	9018      	str	r0, [sp, #96]	; 0x60
 800ed26:	2800      	cmp	r0, #0
 800ed28:	f43f aef6 	beq.w	800eb18 <_strtod_l+0x490>
 800ed2c:	2101      	movs	r1, #1
 800ed2e:	4620      	mov	r0, r4
 800ed30:	f002 f972 	bl	8011018 <__i2b>
 800ed34:	4606      	mov	r6, r0
 800ed36:	2800      	cmp	r0, #0
 800ed38:	f43f aeee 	beq.w	800eb18 <_strtod_l+0x490>
 800ed3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ed3e:	9904      	ldr	r1, [sp, #16]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	bfab      	itete	ge
 800ed44:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ed46:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ed48:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ed4a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ed4e:	bfac      	ite	ge
 800ed50:	eb03 0902 	addge.w	r9, r3, r2
 800ed54:	1ad7      	sublt	r7, r2, r3
 800ed56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ed58:	eba3 0801 	sub.w	r8, r3, r1
 800ed5c:	4490      	add	r8, r2
 800ed5e:	4ba1      	ldr	r3, [pc, #644]	; (800efe4 <_strtod_l+0x95c>)
 800ed60:	f108 38ff 	add.w	r8, r8, #4294967295
 800ed64:	4598      	cmp	r8, r3
 800ed66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ed6a:	f280 80c7 	bge.w	800eefc <_strtod_l+0x874>
 800ed6e:	eba3 0308 	sub.w	r3, r3, r8
 800ed72:	2b1f      	cmp	r3, #31
 800ed74:	eba2 0203 	sub.w	r2, r2, r3
 800ed78:	f04f 0101 	mov.w	r1, #1
 800ed7c:	f300 80b1 	bgt.w	800eee2 <_strtod_l+0x85a>
 800ed80:	fa01 f303 	lsl.w	r3, r1, r3
 800ed84:	930d      	str	r3, [sp, #52]	; 0x34
 800ed86:	2300      	movs	r3, #0
 800ed88:	9308      	str	r3, [sp, #32]
 800ed8a:	eb09 0802 	add.w	r8, r9, r2
 800ed8e:	9b04      	ldr	r3, [sp, #16]
 800ed90:	45c1      	cmp	r9, r8
 800ed92:	4417      	add	r7, r2
 800ed94:	441f      	add	r7, r3
 800ed96:	464b      	mov	r3, r9
 800ed98:	bfa8      	it	ge
 800ed9a:	4643      	movge	r3, r8
 800ed9c:	42bb      	cmp	r3, r7
 800ed9e:	bfa8      	it	ge
 800eda0:	463b      	movge	r3, r7
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	bfc2      	ittt	gt
 800eda6:	eba8 0803 	subgt.w	r8, r8, r3
 800edaa:	1aff      	subgt	r7, r7, r3
 800edac:	eba9 0903 	subgt.w	r9, r9, r3
 800edb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	dd17      	ble.n	800ede6 <_strtod_l+0x75e>
 800edb6:	4631      	mov	r1, r6
 800edb8:	461a      	mov	r2, r3
 800edba:	4620      	mov	r0, r4
 800edbc:	f002 f9ec 	bl	8011198 <__pow5mult>
 800edc0:	4606      	mov	r6, r0
 800edc2:	2800      	cmp	r0, #0
 800edc4:	f43f aea8 	beq.w	800eb18 <_strtod_l+0x490>
 800edc8:	4601      	mov	r1, r0
 800edca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800edcc:	4620      	mov	r0, r4
 800edce:	f002 f939 	bl	8011044 <__multiply>
 800edd2:	900b      	str	r0, [sp, #44]	; 0x2c
 800edd4:	2800      	cmp	r0, #0
 800edd6:	f43f ae9f 	beq.w	800eb18 <_strtod_l+0x490>
 800edda:	9918      	ldr	r1, [sp, #96]	; 0x60
 800eddc:	4620      	mov	r0, r4
 800edde:	f002 f819 	bl	8010e14 <_Bfree>
 800ede2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ede4:	9318      	str	r3, [sp, #96]	; 0x60
 800ede6:	f1b8 0f00 	cmp.w	r8, #0
 800edea:	f300 808c 	bgt.w	800ef06 <_strtod_l+0x87e>
 800edee:	9b06      	ldr	r3, [sp, #24]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	dd08      	ble.n	800ee06 <_strtod_l+0x77e>
 800edf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800edf6:	9905      	ldr	r1, [sp, #20]
 800edf8:	4620      	mov	r0, r4
 800edfa:	f002 f9cd 	bl	8011198 <__pow5mult>
 800edfe:	9005      	str	r0, [sp, #20]
 800ee00:	2800      	cmp	r0, #0
 800ee02:	f43f ae89 	beq.w	800eb18 <_strtod_l+0x490>
 800ee06:	2f00      	cmp	r7, #0
 800ee08:	dd08      	ble.n	800ee1c <_strtod_l+0x794>
 800ee0a:	9905      	ldr	r1, [sp, #20]
 800ee0c:	463a      	mov	r2, r7
 800ee0e:	4620      	mov	r0, r4
 800ee10:	f002 fa1c 	bl	801124c <__lshift>
 800ee14:	9005      	str	r0, [sp, #20]
 800ee16:	2800      	cmp	r0, #0
 800ee18:	f43f ae7e 	beq.w	800eb18 <_strtod_l+0x490>
 800ee1c:	f1b9 0f00 	cmp.w	r9, #0
 800ee20:	dd08      	ble.n	800ee34 <_strtod_l+0x7ac>
 800ee22:	4631      	mov	r1, r6
 800ee24:	464a      	mov	r2, r9
 800ee26:	4620      	mov	r0, r4
 800ee28:	f002 fa10 	bl	801124c <__lshift>
 800ee2c:	4606      	mov	r6, r0
 800ee2e:	2800      	cmp	r0, #0
 800ee30:	f43f ae72 	beq.w	800eb18 <_strtod_l+0x490>
 800ee34:	9a05      	ldr	r2, [sp, #20]
 800ee36:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ee38:	4620      	mov	r0, r4
 800ee3a:	f002 fa93 	bl	8011364 <__mdiff>
 800ee3e:	4605      	mov	r5, r0
 800ee40:	2800      	cmp	r0, #0
 800ee42:	f43f ae69 	beq.w	800eb18 <_strtod_l+0x490>
 800ee46:	68c3      	ldr	r3, [r0, #12]
 800ee48:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	60c3      	str	r3, [r0, #12]
 800ee4e:	4631      	mov	r1, r6
 800ee50:	f002 fa6c 	bl	801132c <__mcmp>
 800ee54:	2800      	cmp	r0, #0
 800ee56:	da60      	bge.n	800ef1a <_strtod_l+0x892>
 800ee58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee5a:	ea53 030a 	orrs.w	r3, r3, sl
 800ee5e:	f040 8082 	bne.w	800ef66 <_strtod_l+0x8de>
 800ee62:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d17d      	bne.n	800ef66 <_strtod_l+0x8de>
 800ee6a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ee6e:	0d1b      	lsrs	r3, r3, #20
 800ee70:	051b      	lsls	r3, r3, #20
 800ee72:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ee76:	d976      	bls.n	800ef66 <_strtod_l+0x8de>
 800ee78:	696b      	ldr	r3, [r5, #20]
 800ee7a:	b913      	cbnz	r3, 800ee82 <_strtod_l+0x7fa>
 800ee7c:	692b      	ldr	r3, [r5, #16]
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	dd71      	ble.n	800ef66 <_strtod_l+0x8de>
 800ee82:	4629      	mov	r1, r5
 800ee84:	2201      	movs	r2, #1
 800ee86:	4620      	mov	r0, r4
 800ee88:	f002 f9e0 	bl	801124c <__lshift>
 800ee8c:	4631      	mov	r1, r6
 800ee8e:	4605      	mov	r5, r0
 800ee90:	f002 fa4c 	bl	801132c <__mcmp>
 800ee94:	2800      	cmp	r0, #0
 800ee96:	dd66      	ble.n	800ef66 <_strtod_l+0x8de>
 800ee98:	9904      	ldr	r1, [sp, #16]
 800ee9a:	4a53      	ldr	r2, [pc, #332]	; (800efe8 <_strtod_l+0x960>)
 800ee9c:	465b      	mov	r3, fp
 800ee9e:	2900      	cmp	r1, #0
 800eea0:	f000 8081 	beq.w	800efa6 <_strtod_l+0x91e>
 800eea4:	ea02 010b 	and.w	r1, r2, fp
 800eea8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800eeac:	dc7b      	bgt.n	800efa6 <_strtod_l+0x91e>
 800eeae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800eeb2:	f77f aea9 	ble.w	800ec08 <_strtod_l+0x580>
 800eeb6:	4b4d      	ldr	r3, [pc, #308]	; (800efec <_strtod_l+0x964>)
 800eeb8:	4650      	mov	r0, sl
 800eeba:	4659      	mov	r1, fp
 800eebc:	2200      	movs	r2, #0
 800eebe:	f7f1 fbc3 	bl	8000648 <__aeabi_dmul>
 800eec2:	460b      	mov	r3, r1
 800eec4:	4303      	orrs	r3, r0
 800eec6:	bf08      	it	eq
 800eec8:	2322      	moveq	r3, #34	; 0x22
 800eeca:	4682      	mov	sl, r0
 800eecc:	468b      	mov	fp, r1
 800eece:	bf08      	it	eq
 800eed0:	6023      	streq	r3, [r4, #0]
 800eed2:	e62b      	b.n	800eb2c <_strtod_l+0x4a4>
 800eed4:	f04f 32ff 	mov.w	r2, #4294967295
 800eed8:	fa02 f303 	lsl.w	r3, r2, r3
 800eedc:	ea03 0a0a 	and.w	sl, r3, sl
 800eee0:	e6e3      	b.n	800ecaa <_strtod_l+0x622>
 800eee2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800eee6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800eeea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800eeee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800eef2:	fa01 f308 	lsl.w	r3, r1, r8
 800eef6:	9308      	str	r3, [sp, #32]
 800eef8:	910d      	str	r1, [sp, #52]	; 0x34
 800eefa:	e746      	b.n	800ed8a <_strtod_l+0x702>
 800eefc:	2300      	movs	r3, #0
 800eefe:	9308      	str	r3, [sp, #32]
 800ef00:	2301      	movs	r3, #1
 800ef02:	930d      	str	r3, [sp, #52]	; 0x34
 800ef04:	e741      	b.n	800ed8a <_strtod_l+0x702>
 800ef06:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ef08:	4642      	mov	r2, r8
 800ef0a:	4620      	mov	r0, r4
 800ef0c:	f002 f99e 	bl	801124c <__lshift>
 800ef10:	9018      	str	r0, [sp, #96]	; 0x60
 800ef12:	2800      	cmp	r0, #0
 800ef14:	f47f af6b 	bne.w	800edee <_strtod_l+0x766>
 800ef18:	e5fe      	b.n	800eb18 <_strtod_l+0x490>
 800ef1a:	465f      	mov	r7, fp
 800ef1c:	d16e      	bne.n	800effc <_strtod_l+0x974>
 800ef1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ef20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef24:	b342      	cbz	r2, 800ef78 <_strtod_l+0x8f0>
 800ef26:	4a32      	ldr	r2, [pc, #200]	; (800eff0 <_strtod_l+0x968>)
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	d128      	bne.n	800ef7e <_strtod_l+0x8f6>
 800ef2c:	9b04      	ldr	r3, [sp, #16]
 800ef2e:	4651      	mov	r1, sl
 800ef30:	b1eb      	cbz	r3, 800ef6e <_strtod_l+0x8e6>
 800ef32:	4b2d      	ldr	r3, [pc, #180]	; (800efe8 <_strtod_l+0x960>)
 800ef34:	403b      	ands	r3, r7
 800ef36:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ef3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef3e:	d819      	bhi.n	800ef74 <_strtod_l+0x8ec>
 800ef40:	0d1b      	lsrs	r3, r3, #20
 800ef42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ef46:	fa02 f303 	lsl.w	r3, r2, r3
 800ef4a:	4299      	cmp	r1, r3
 800ef4c:	d117      	bne.n	800ef7e <_strtod_l+0x8f6>
 800ef4e:	4b29      	ldr	r3, [pc, #164]	; (800eff4 <_strtod_l+0x96c>)
 800ef50:	429f      	cmp	r7, r3
 800ef52:	d102      	bne.n	800ef5a <_strtod_l+0x8d2>
 800ef54:	3101      	adds	r1, #1
 800ef56:	f43f addf 	beq.w	800eb18 <_strtod_l+0x490>
 800ef5a:	4b23      	ldr	r3, [pc, #140]	; (800efe8 <_strtod_l+0x960>)
 800ef5c:	403b      	ands	r3, r7
 800ef5e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ef62:	f04f 0a00 	mov.w	sl, #0
 800ef66:	9b04      	ldr	r3, [sp, #16]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d1a4      	bne.n	800eeb6 <_strtod_l+0x82e>
 800ef6c:	e5de      	b.n	800eb2c <_strtod_l+0x4a4>
 800ef6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ef72:	e7ea      	b.n	800ef4a <_strtod_l+0x8c2>
 800ef74:	4613      	mov	r3, r2
 800ef76:	e7e8      	b.n	800ef4a <_strtod_l+0x8c2>
 800ef78:	ea53 030a 	orrs.w	r3, r3, sl
 800ef7c:	d08c      	beq.n	800ee98 <_strtod_l+0x810>
 800ef7e:	9b08      	ldr	r3, [sp, #32]
 800ef80:	b1db      	cbz	r3, 800efba <_strtod_l+0x932>
 800ef82:	423b      	tst	r3, r7
 800ef84:	d0ef      	beq.n	800ef66 <_strtod_l+0x8de>
 800ef86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef88:	9a04      	ldr	r2, [sp, #16]
 800ef8a:	4650      	mov	r0, sl
 800ef8c:	4659      	mov	r1, fp
 800ef8e:	b1c3      	cbz	r3, 800efc2 <_strtod_l+0x93a>
 800ef90:	f7ff fb5c 	bl	800e64c <sulp>
 800ef94:	4602      	mov	r2, r0
 800ef96:	460b      	mov	r3, r1
 800ef98:	ec51 0b18 	vmov	r0, r1, d8
 800ef9c:	f7f1 f99e 	bl	80002dc <__adddf3>
 800efa0:	4682      	mov	sl, r0
 800efa2:	468b      	mov	fp, r1
 800efa4:	e7df      	b.n	800ef66 <_strtod_l+0x8de>
 800efa6:	4013      	ands	r3, r2
 800efa8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800efac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800efb0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800efb4:	f04f 3aff 	mov.w	sl, #4294967295
 800efb8:	e7d5      	b.n	800ef66 <_strtod_l+0x8de>
 800efba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efbc:	ea13 0f0a 	tst.w	r3, sl
 800efc0:	e7e0      	b.n	800ef84 <_strtod_l+0x8fc>
 800efc2:	f7ff fb43 	bl	800e64c <sulp>
 800efc6:	4602      	mov	r2, r0
 800efc8:	460b      	mov	r3, r1
 800efca:	ec51 0b18 	vmov	r0, r1, d8
 800efce:	f7f1 f983 	bl	80002d8 <__aeabi_dsub>
 800efd2:	2200      	movs	r2, #0
 800efd4:	2300      	movs	r3, #0
 800efd6:	4682      	mov	sl, r0
 800efd8:	468b      	mov	fp, r1
 800efda:	f7f1 fd9d 	bl	8000b18 <__aeabi_dcmpeq>
 800efde:	2800      	cmp	r0, #0
 800efe0:	d0c1      	beq.n	800ef66 <_strtod_l+0x8de>
 800efe2:	e611      	b.n	800ec08 <_strtod_l+0x580>
 800efe4:	fffffc02 	.word	0xfffffc02
 800efe8:	7ff00000 	.word	0x7ff00000
 800efec:	39500000 	.word	0x39500000
 800eff0:	000fffff 	.word	0x000fffff
 800eff4:	7fefffff 	.word	0x7fefffff
 800eff8:	080135b8 	.word	0x080135b8
 800effc:	4631      	mov	r1, r6
 800effe:	4628      	mov	r0, r5
 800f000:	f002 fb12 	bl	8011628 <__ratio>
 800f004:	ec59 8b10 	vmov	r8, r9, d0
 800f008:	ee10 0a10 	vmov	r0, s0
 800f00c:	2200      	movs	r2, #0
 800f00e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f012:	4649      	mov	r1, r9
 800f014:	f7f1 fd94 	bl	8000b40 <__aeabi_dcmple>
 800f018:	2800      	cmp	r0, #0
 800f01a:	d07a      	beq.n	800f112 <_strtod_l+0xa8a>
 800f01c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d04a      	beq.n	800f0b8 <_strtod_l+0xa30>
 800f022:	4b95      	ldr	r3, [pc, #596]	; (800f278 <_strtod_l+0xbf0>)
 800f024:	2200      	movs	r2, #0
 800f026:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f02a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f278 <_strtod_l+0xbf0>
 800f02e:	f04f 0800 	mov.w	r8, #0
 800f032:	4b92      	ldr	r3, [pc, #584]	; (800f27c <_strtod_l+0xbf4>)
 800f034:	403b      	ands	r3, r7
 800f036:	930d      	str	r3, [sp, #52]	; 0x34
 800f038:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f03a:	4b91      	ldr	r3, [pc, #580]	; (800f280 <_strtod_l+0xbf8>)
 800f03c:	429a      	cmp	r2, r3
 800f03e:	f040 80b0 	bne.w	800f1a2 <_strtod_l+0xb1a>
 800f042:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f046:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f04a:	ec4b ab10 	vmov	d0, sl, fp
 800f04e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f052:	f002 fa11 	bl	8011478 <__ulp>
 800f056:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f05a:	ec53 2b10 	vmov	r2, r3, d0
 800f05e:	f7f1 faf3 	bl	8000648 <__aeabi_dmul>
 800f062:	4652      	mov	r2, sl
 800f064:	465b      	mov	r3, fp
 800f066:	f7f1 f939 	bl	80002dc <__adddf3>
 800f06a:	460b      	mov	r3, r1
 800f06c:	4983      	ldr	r1, [pc, #524]	; (800f27c <_strtod_l+0xbf4>)
 800f06e:	4a85      	ldr	r2, [pc, #532]	; (800f284 <_strtod_l+0xbfc>)
 800f070:	4019      	ands	r1, r3
 800f072:	4291      	cmp	r1, r2
 800f074:	4682      	mov	sl, r0
 800f076:	d960      	bls.n	800f13a <_strtod_l+0xab2>
 800f078:	ee18 3a90 	vmov	r3, s17
 800f07c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f080:	4293      	cmp	r3, r2
 800f082:	d104      	bne.n	800f08e <_strtod_l+0xa06>
 800f084:	ee18 3a10 	vmov	r3, s16
 800f088:	3301      	adds	r3, #1
 800f08a:	f43f ad45 	beq.w	800eb18 <_strtod_l+0x490>
 800f08e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800f290 <_strtod_l+0xc08>
 800f092:	f04f 3aff 	mov.w	sl, #4294967295
 800f096:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f098:	4620      	mov	r0, r4
 800f09a:	f001 febb 	bl	8010e14 <_Bfree>
 800f09e:	9905      	ldr	r1, [sp, #20]
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	f001 feb7 	bl	8010e14 <_Bfree>
 800f0a6:	4631      	mov	r1, r6
 800f0a8:	4620      	mov	r0, r4
 800f0aa:	f001 feb3 	bl	8010e14 <_Bfree>
 800f0ae:	4629      	mov	r1, r5
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	f001 feaf 	bl	8010e14 <_Bfree>
 800f0b6:	e61a      	b.n	800ecee <_strtod_l+0x666>
 800f0b8:	f1ba 0f00 	cmp.w	sl, #0
 800f0bc:	d11b      	bne.n	800f0f6 <_strtod_l+0xa6e>
 800f0be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f0c2:	b9f3      	cbnz	r3, 800f102 <_strtod_l+0xa7a>
 800f0c4:	4b6c      	ldr	r3, [pc, #432]	; (800f278 <_strtod_l+0xbf0>)
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	4640      	mov	r0, r8
 800f0ca:	4649      	mov	r1, r9
 800f0cc:	f7f1 fd2e 	bl	8000b2c <__aeabi_dcmplt>
 800f0d0:	b9d0      	cbnz	r0, 800f108 <_strtod_l+0xa80>
 800f0d2:	4640      	mov	r0, r8
 800f0d4:	4649      	mov	r1, r9
 800f0d6:	4b6c      	ldr	r3, [pc, #432]	; (800f288 <_strtod_l+0xc00>)
 800f0d8:	2200      	movs	r2, #0
 800f0da:	f7f1 fab5 	bl	8000648 <__aeabi_dmul>
 800f0de:	4680      	mov	r8, r0
 800f0e0:	4689      	mov	r9, r1
 800f0e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f0e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800f0ea:	9315      	str	r3, [sp, #84]	; 0x54
 800f0ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f0f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f0f4:	e79d      	b.n	800f032 <_strtod_l+0x9aa>
 800f0f6:	f1ba 0f01 	cmp.w	sl, #1
 800f0fa:	d102      	bne.n	800f102 <_strtod_l+0xa7a>
 800f0fc:	2f00      	cmp	r7, #0
 800f0fe:	f43f ad83 	beq.w	800ec08 <_strtod_l+0x580>
 800f102:	4b62      	ldr	r3, [pc, #392]	; (800f28c <_strtod_l+0xc04>)
 800f104:	2200      	movs	r2, #0
 800f106:	e78e      	b.n	800f026 <_strtod_l+0x99e>
 800f108:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800f288 <_strtod_l+0xc00>
 800f10c:	f04f 0800 	mov.w	r8, #0
 800f110:	e7e7      	b.n	800f0e2 <_strtod_l+0xa5a>
 800f112:	4b5d      	ldr	r3, [pc, #372]	; (800f288 <_strtod_l+0xc00>)
 800f114:	4640      	mov	r0, r8
 800f116:	4649      	mov	r1, r9
 800f118:	2200      	movs	r2, #0
 800f11a:	f7f1 fa95 	bl	8000648 <__aeabi_dmul>
 800f11e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f120:	4680      	mov	r8, r0
 800f122:	4689      	mov	r9, r1
 800f124:	b933      	cbnz	r3, 800f134 <_strtod_l+0xaac>
 800f126:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f12a:	900e      	str	r0, [sp, #56]	; 0x38
 800f12c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f12e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f132:	e7dd      	b.n	800f0f0 <_strtod_l+0xa68>
 800f134:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800f138:	e7f9      	b.n	800f12e <_strtod_l+0xaa6>
 800f13a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f13e:	9b04      	ldr	r3, [sp, #16]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d1a8      	bne.n	800f096 <_strtod_l+0xa0e>
 800f144:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f148:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f14a:	0d1b      	lsrs	r3, r3, #20
 800f14c:	051b      	lsls	r3, r3, #20
 800f14e:	429a      	cmp	r2, r3
 800f150:	d1a1      	bne.n	800f096 <_strtod_l+0xa0e>
 800f152:	4640      	mov	r0, r8
 800f154:	4649      	mov	r1, r9
 800f156:	f7f1 fdd7 	bl	8000d08 <__aeabi_d2lz>
 800f15a:	f7f1 fa47 	bl	80005ec <__aeabi_l2d>
 800f15e:	4602      	mov	r2, r0
 800f160:	460b      	mov	r3, r1
 800f162:	4640      	mov	r0, r8
 800f164:	4649      	mov	r1, r9
 800f166:	f7f1 f8b7 	bl	80002d8 <__aeabi_dsub>
 800f16a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f16c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f170:	ea43 030a 	orr.w	r3, r3, sl
 800f174:	4313      	orrs	r3, r2
 800f176:	4680      	mov	r8, r0
 800f178:	4689      	mov	r9, r1
 800f17a:	d055      	beq.n	800f228 <_strtod_l+0xba0>
 800f17c:	a336      	add	r3, pc, #216	; (adr r3, 800f258 <_strtod_l+0xbd0>)
 800f17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f182:	f7f1 fcd3 	bl	8000b2c <__aeabi_dcmplt>
 800f186:	2800      	cmp	r0, #0
 800f188:	f47f acd0 	bne.w	800eb2c <_strtod_l+0x4a4>
 800f18c:	a334      	add	r3, pc, #208	; (adr r3, 800f260 <_strtod_l+0xbd8>)
 800f18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f192:	4640      	mov	r0, r8
 800f194:	4649      	mov	r1, r9
 800f196:	f7f1 fce7 	bl	8000b68 <__aeabi_dcmpgt>
 800f19a:	2800      	cmp	r0, #0
 800f19c:	f43f af7b 	beq.w	800f096 <_strtod_l+0xa0e>
 800f1a0:	e4c4      	b.n	800eb2c <_strtod_l+0x4a4>
 800f1a2:	9b04      	ldr	r3, [sp, #16]
 800f1a4:	b333      	cbz	r3, 800f1f4 <_strtod_l+0xb6c>
 800f1a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f1a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f1ac:	d822      	bhi.n	800f1f4 <_strtod_l+0xb6c>
 800f1ae:	a32e      	add	r3, pc, #184	; (adr r3, 800f268 <_strtod_l+0xbe0>)
 800f1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b4:	4640      	mov	r0, r8
 800f1b6:	4649      	mov	r1, r9
 800f1b8:	f7f1 fcc2 	bl	8000b40 <__aeabi_dcmple>
 800f1bc:	b1a0      	cbz	r0, 800f1e8 <_strtod_l+0xb60>
 800f1be:	4649      	mov	r1, r9
 800f1c0:	4640      	mov	r0, r8
 800f1c2:	f7f1 fd19 	bl	8000bf8 <__aeabi_d2uiz>
 800f1c6:	2801      	cmp	r0, #1
 800f1c8:	bf38      	it	cc
 800f1ca:	2001      	movcc	r0, #1
 800f1cc:	f7f1 f9c2 	bl	8000554 <__aeabi_ui2d>
 800f1d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1d2:	4680      	mov	r8, r0
 800f1d4:	4689      	mov	r9, r1
 800f1d6:	bb23      	cbnz	r3, 800f222 <_strtod_l+0xb9a>
 800f1d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1dc:	9010      	str	r0, [sp, #64]	; 0x40
 800f1de:	9311      	str	r3, [sp, #68]	; 0x44
 800f1e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f1e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f1ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f1f0:	1a9b      	subs	r3, r3, r2
 800f1f2:	9309      	str	r3, [sp, #36]	; 0x24
 800f1f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f1f8:	eeb0 0a48 	vmov.f32	s0, s16
 800f1fc:	eef0 0a68 	vmov.f32	s1, s17
 800f200:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f204:	f002 f938 	bl	8011478 <__ulp>
 800f208:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f20c:	ec53 2b10 	vmov	r2, r3, d0
 800f210:	f7f1 fa1a 	bl	8000648 <__aeabi_dmul>
 800f214:	ec53 2b18 	vmov	r2, r3, d8
 800f218:	f7f1 f860 	bl	80002dc <__adddf3>
 800f21c:	4682      	mov	sl, r0
 800f21e:	468b      	mov	fp, r1
 800f220:	e78d      	b.n	800f13e <_strtod_l+0xab6>
 800f222:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800f226:	e7db      	b.n	800f1e0 <_strtod_l+0xb58>
 800f228:	a311      	add	r3, pc, #68	; (adr r3, 800f270 <_strtod_l+0xbe8>)
 800f22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22e:	f7f1 fc7d 	bl	8000b2c <__aeabi_dcmplt>
 800f232:	e7b2      	b.n	800f19a <_strtod_l+0xb12>
 800f234:	2300      	movs	r3, #0
 800f236:	930a      	str	r3, [sp, #40]	; 0x28
 800f238:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f23a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f23c:	6013      	str	r3, [r2, #0]
 800f23e:	f7ff ba6b 	b.w	800e718 <_strtod_l+0x90>
 800f242:	2a65      	cmp	r2, #101	; 0x65
 800f244:	f43f ab5f 	beq.w	800e906 <_strtod_l+0x27e>
 800f248:	2a45      	cmp	r2, #69	; 0x45
 800f24a:	f43f ab5c 	beq.w	800e906 <_strtod_l+0x27e>
 800f24e:	2301      	movs	r3, #1
 800f250:	f7ff bb94 	b.w	800e97c <_strtod_l+0x2f4>
 800f254:	f3af 8000 	nop.w
 800f258:	94a03595 	.word	0x94a03595
 800f25c:	3fdfffff 	.word	0x3fdfffff
 800f260:	35afe535 	.word	0x35afe535
 800f264:	3fe00000 	.word	0x3fe00000
 800f268:	ffc00000 	.word	0xffc00000
 800f26c:	41dfffff 	.word	0x41dfffff
 800f270:	94a03595 	.word	0x94a03595
 800f274:	3fcfffff 	.word	0x3fcfffff
 800f278:	3ff00000 	.word	0x3ff00000
 800f27c:	7ff00000 	.word	0x7ff00000
 800f280:	7fe00000 	.word	0x7fe00000
 800f284:	7c9fffff 	.word	0x7c9fffff
 800f288:	3fe00000 	.word	0x3fe00000
 800f28c:	bff00000 	.word	0xbff00000
 800f290:	7fefffff 	.word	0x7fefffff

0800f294 <strtod>:
 800f294:	460a      	mov	r2, r1
 800f296:	4601      	mov	r1, r0
 800f298:	4802      	ldr	r0, [pc, #8]	; (800f2a4 <strtod+0x10>)
 800f29a:	4b03      	ldr	r3, [pc, #12]	; (800f2a8 <strtod+0x14>)
 800f29c:	6800      	ldr	r0, [r0, #0]
 800f29e:	f7ff b9f3 	b.w	800e688 <_strtod_l>
 800f2a2:	bf00      	nop
 800f2a4:	2000002c 	.word	0x2000002c
 800f2a8:	20000094 	.word	0x20000094

0800f2ac <_strtol_l.constprop.0>:
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2b2:	d001      	beq.n	800f2b8 <_strtol_l.constprop.0+0xc>
 800f2b4:	2b24      	cmp	r3, #36	; 0x24
 800f2b6:	d906      	bls.n	800f2c6 <_strtol_l.constprop.0+0x1a>
 800f2b8:	f7fe fc90 	bl	800dbdc <__errno>
 800f2bc:	2316      	movs	r3, #22
 800f2be:	6003      	str	r3, [r0, #0]
 800f2c0:	2000      	movs	r0, #0
 800f2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f3ac <_strtol_l.constprop.0+0x100>
 800f2ca:	460d      	mov	r5, r1
 800f2cc:	462e      	mov	r6, r5
 800f2ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f2d2:	f814 700c 	ldrb.w	r7, [r4, ip]
 800f2d6:	f017 0708 	ands.w	r7, r7, #8
 800f2da:	d1f7      	bne.n	800f2cc <_strtol_l.constprop.0+0x20>
 800f2dc:	2c2d      	cmp	r4, #45	; 0x2d
 800f2de:	d132      	bne.n	800f346 <_strtol_l.constprop.0+0x9a>
 800f2e0:	782c      	ldrb	r4, [r5, #0]
 800f2e2:	2701      	movs	r7, #1
 800f2e4:	1cb5      	adds	r5, r6, #2
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d05b      	beq.n	800f3a2 <_strtol_l.constprop.0+0xf6>
 800f2ea:	2b10      	cmp	r3, #16
 800f2ec:	d109      	bne.n	800f302 <_strtol_l.constprop.0+0x56>
 800f2ee:	2c30      	cmp	r4, #48	; 0x30
 800f2f0:	d107      	bne.n	800f302 <_strtol_l.constprop.0+0x56>
 800f2f2:	782c      	ldrb	r4, [r5, #0]
 800f2f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f2f8:	2c58      	cmp	r4, #88	; 0x58
 800f2fa:	d14d      	bne.n	800f398 <_strtol_l.constprop.0+0xec>
 800f2fc:	786c      	ldrb	r4, [r5, #1]
 800f2fe:	2310      	movs	r3, #16
 800f300:	3502      	adds	r5, #2
 800f302:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f306:	f108 38ff 	add.w	r8, r8, #4294967295
 800f30a:	f04f 0c00 	mov.w	ip, #0
 800f30e:	fbb8 f9f3 	udiv	r9, r8, r3
 800f312:	4666      	mov	r6, ip
 800f314:	fb03 8a19 	mls	sl, r3, r9, r8
 800f318:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800f31c:	f1be 0f09 	cmp.w	lr, #9
 800f320:	d816      	bhi.n	800f350 <_strtol_l.constprop.0+0xa4>
 800f322:	4674      	mov	r4, lr
 800f324:	42a3      	cmp	r3, r4
 800f326:	dd24      	ble.n	800f372 <_strtol_l.constprop.0+0xc6>
 800f328:	f1bc 0f00 	cmp.w	ip, #0
 800f32c:	db1e      	blt.n	800f36c <_strtol_l.constprop.0+0xc0>
 800f32e:	45b1      	cmp	r9, r6
 800f330:	d31c      	bcc.n	800f36c <_strtol_l.constprop.0+0xc0>
 800f332:	d101      	bne.n	800f338 <_strtol_l.constprop.0+0x8c>
 800f334:	45a2      	cmp	sl, r4
 800f336:	db19      	blt.n	800f36c <_strtol_l.constprop.0+0xc0>
 800f338:	fb06 4603 	mla	r6, r6, r3, r4
 800f33c:	f04f 0c01 	mov.w	ip, #1
 800f340:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f344:	e7e8      	b.n	800f318 <_strtol_l.constprop.0+0x6c>
 800f346:	2c2b      	cmp	r4, #43	; 0x2b
 800f348:	bf04      	itt	eq
 800f34a:	782c      	ldrbeq	r4, [r5, #0]
 800f34c:	1cb5      	addeq	r5, r6, #2
 800f34e:	e7ca      	b.n	800f2e6 <_strtol_l.constprop.0+0x3a>
 800f350:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800f354:	f1be 0f19 	cmp.w	lr, #25
 800f358:	d801      	bhi.n	800f35e <_strtol_l.constprop.0+0xb2>
 800f35a:	3c37      	subs	r4, #55	; 0x37
 800f35c:	e7e2      	b.n	800f324 <_strtol_l.constprop.0+0x78>
 800f35e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800f362:	f1be 0f19 	cmp.w	lr, #25
 800f366:	d804      	bhi.n	800f372 <_strtol_l.constprop.0+0xc6>
 800f368:	3c57      	subs	r4, #87	; 0x57
 800f36a:	e7db      	b.n	800f324 <_strtol_l.constprop.0+0x78>
 800f36c:	f04f 3cff 	mov.w	ip, #4294967295
 800f370:	e7e6      	b.n	800f340 <_strtol_l.constprop.0+0x94>
 800f372:	f1bc 0f00 	cmp.w	ip, #0
 800f376:	da05      	bge.n	800f384 <_strtol_l.constprop.0+0xd8>
 800f378:	2322      	movs	r3, #34	; 0x22
 800f37a:	6003      	str	r3, [r0, #0]
 800f37c:	4646      	mov	r6, r8
 800f37e:	b942      	cbnz	r2, 800f392 <_strtol_l.constprop.0+0xe6>
 800f380:	4630      	mov	r0, r6
 800f382:	e79e      	b.n	800f2c2 <_strtol_l.constprop.0+0x16>
 800f384:	b107      	cbz	r7, 800f388 <_strtol_l.constprop.0+0xdc>
 800f386:	4276      	negs	r6, r6
 800f388:	2a00      	cmp	r2, #0
 800f38a:	d0f9      	beq.n	800f380 <_strtol_l.constprop.0+0xd4>
 800f38c:	f1bc 0f00 	cmp.w	ip, #0
 800f390:	d000      	beq.n	800f394 <_strtol_l.constprop.0+0xe8>
 800f392:	1e69      	subs	r1, r5, #1
 800f394:	6011      	str	r1, [r2, #0]
 800f396:	e7f3      	b.n	800f380 <_strtol_l.constprop.0+0xd4>
 800f398:	2430      	movs	r4, #48	; 0x30
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d1b1      	bne.n	800f302 <_strtol_l.constprop.0+0x56>
 800f39e:	2308      	movs	r3, #8
 800f3a0:	e7af      	b.n	800f302 <_strtol_l.constprop.0+0x56>
 800f3a2:	2c30      	cmp	r4, #48	; 0x30
 800f3a4:	d0a5      	beq.n	800f2f2 <_strtol_l.constprop.0+0x46>
 800f3a6:	230a      	movs	r3, #10
 800f3a8:	e7ab      	b.n	800f302 <_strtol_l.constprop.0+0x56>
 800f3aa:	bf00      	nop
 800f3ac:	080135e1 	.word	0x080135e1

0800f3b0 <strtol>:
 800f3b0:	4613      	mov	r3, r2
 800f3b2:	460a      	mov	r2, r1
 800f3b4:	4601      	mov	r1, r0
 800f3b6:	4802      	ldr	r0, [pc, #8]	; (800f3c0 <strtol+0x10>)
 800f3b8:	6800      	ldr	r0, [r0, #0]
 800f3ba:	f7ff bf77 	b.w	800f2ac <_strtol_l.constprop.0>
 800f3be:	bf00      	nop
 800f3c0:	2000002c 	.word	0x2000002c

0800f3c4 <__swbuf_r>:
 800f3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3c6:	460e      	mov	r6, r1
 800f3c8:	4614      	mov	r4, r2
 800f3ca:	4605      	mov	r5, r0
 800f3cc:	b118      	cbz	r0, 800f3d6 <__swbuf_r+0x12>
 800f3ce:	6983      	ldr	r3, [r0, #24]
 800f3d0:	b90b      	cbnz	r3, 800f3d6 <__swbuf_r+0x12>
 800f3d2:	f001 f84d 	bl	8010470 <__sinit>
 800f3d6:	4b21      	ldr	r3, [pc, #132]	; (800f45c <__swbuf_r+0x98>)
 800f3d8:	429c      	cmp	r4, r3
 800f3da:	d12b      	bne.n	800f434 <__swbuf_r+0x70>
 800f3dc:	686c      	ldr	r4, [r5, #4]
 800f3de:	69a3      	ldr	r3, [r4, #24]
 800f3e0:	60a3      	str	r3, [r4, #8]
 800f3e2:	89a3      	ldrh	r3, [r4, #12]
 800f3e4:	071a      	lsls	r2, r3, #28
 800f3e6:	d52f      	bpl.n	800f448 <__swbuf_r+0x84>
 800f3e8:	6923      	ldr	r3, [r4, #16]
 800f3ea:	b36b      	cbz	r3, 800f448 <__swbuf_r+0x84>
 800f3ec:	6923      	ldr	r3, [r4, #16]
 800f3ee:	6820      	ldr	r0, [r4, #0]
 800f3f0:	1ac0      	subs	r0, r0, r3
 800f3f2:	6963      	ldr	r3, [r4, #20]
 800f3f4:	b2f6      	uxtb	r6, r6
 800f3f6:	4283      	cmp	r3, r0
 800f3f8:	4637      	mov	r7, r6
 800f3fa:	dc04      	bgt.n	800f406 <__swbuf_r+0x42>
 800f3fc:	4621      	mov	r1, r4
 800f3fe:	4628      	mov	r0, r5
 800f400:	f000 ffa2 	bl	8010348 <_fflush_r>
 800f404:	bb30      	cbnz	r0, 800f454 <__swbuf_r+0x90>
 800f406:	68a3      	ldr	r3, [r4, #8]
 800f408:	3b01      	subs	r3, #1
 800f40a:	60a3      	str	r3, [r4, #8]
 800f40c:	6823      	ldr	r3, [r4, #0]
 800f40e:	1c5a      	adds	r2, r3, #1
 800f410:	6022      	str	r2, [r4, #0]
 800f412:	701e      	strb	r6, [r3, #0]
 800f414:	6963      	ldr	r3, [r4, #20]
 800f416:	3001      	adds	r0, #1
 800f418:	4283      	cmp	r3, r0
 800f41a:	d004      	beq.n	800f426 <__swbuf_r+0x62>
 800f41c:	89a3      	ldrh	r3, [r4, #12]
 800f41e:	07db      	lsls	r3, r3, #31
 800f420:	d506      	bpl.n	800f430 <__swbuf_r+0x6c>
 800f422:	2e0a      	cmp	r6, #10
 800f424:	d104      	bne.n	800f430 <__swbuf_r+0x6c>
 800f426:	4621      	mov	r1, r4
 800f428:	4628      	mov	r0, r5
 800f42a:	f000 ff8d 	bl	8010348 <_fflush_r>
 800f42e:	b988      	cbnz	r0, 800f454 <__swbuf_r+0x90>
 800f430:	4638      	mov	r0, r7
 800f432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f434:	4b0a      	ldr	r3, [pc, #40]	; (800f460 <__swbuf_r+0x9c>)
 800f436:	429c      	cmp	r4, r3
 800f438:	d101      	bne.n	800f43e <__swbuf_r+0x7a>
 800f43a:	68ac      	ldr	r4, [r5, #8]
 800f43c:	e7cf      	b.n	800f3de <__swbuf_r+0x1a>
 800f43e:	4b09      	ldr	r3, [pc, #36]	; (800f464 <__swbuf_r+0xa0>)
 800f440:	429c      	cmp	r4, r3
 800f442:	bf08      	it	eq
 800f444:	68ec      	ldreq	r4, [r5, #12]
 800f446:	e7ca      	b.n	800f3de <__swbuf_r+0x1a>
 800f448:	4621      	mov	r1, r4
 800f44a:	4628      	mov	r0, r5
 800f44c:	f000 f80c 	bl	800f468 <__swsetup_r>
 800f450:	2800      	cmp	r0, #0
 800f452:	d0cb      	beq.n	800f3ec <__swbuf_r+0x28>
 800f454:	f04f 37ff 	mov.w	r7, #4294967295
 800f458:	e7ea      	b.n	800f430 <__swbuf_r+0x6c>
 800f45a:	bf00      	nop
 800f45c:	08013794 	.word	0x08013794
 800f460:	080137b4 	.word	0x080137b4
 800f464:	08013774 	.word	0x08013774

0800f468 <__swsetup_r>:
 800f468:	4b32      	ldr	r3, [pc, #200]	; (800f534 <__swsetup_r+0xcc>)
 800f46a:	b570      	push	{r4, r5, r6, lr}
 800f46c:	681d      	ldr	r5, [r3, #0]
 800f46e:	4606      	mov	r6, r0
 800f470:	460c      	mov	r4, r1
 800f472:	b125      	cbz	r5, 800f47e <__swsetup_r+0x16>
 800f474:	69ab      	ldr	r3, [r5, #24]
 800f476:	b913      	cbnz	r3, 800f47e <__swsetup_r+0x16>
 800f478:	4628      	mov	r0, r5
 800f47a:	f000 fff9 	bl	8010470 <__sinit>
 800f47e:	4b2e      	ldr	r3, [pc, #184]	; (800f538 <__swsetup_r+0xd0>)
 800f480:	429c      	cmp	r4, r3
 800f482:	d10f      	bne.n	800f4a4 <__swsetup_r+0x3c>
 800f484:	686c      	ldr	r4, [r5, #4]
 800f486:	89a3      	ldrh	r3, [r4, #12]
 800f488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f48c:	0719      	lsls	r1, r3, #28
 800f48e:	d42c      	bmi.n	800f4ea <__swsetup_r+0x82>
 800f490:	06dd      	lsls	r5, r3, #27
 800f492:	d411      	bmi.n	800f4b8 <__swsetup_r+0x50>
 800f494:	2309      	movs	r3, #9
 800f496:	6033      	str	r3, [r6, #0]
 800f498:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f49c:	81a3      	strh	r3, [r4, #12]
 800f49e:	f04f 30ff 	mov.w	r0, #4294967295
 800f4a2:	e03e      	b.n	800f522 <__swsetup_r+0xba>
 800f4a4:	4b25      	ldr	r3, [pc, #148]	; (800f53c <__swsetup_r+0xd4>)
 800f4a6:	429c      	cmp	r4, r3
 800f4a8:	d101      	bne.n	800f4ae <__swsetup_r+0x46>
 800f4aa:	68ac      	ldr	r4, [r5, #8]
 800f4ac:	e7eb      	b.n	800f486 <__swsetup_r+0x1e>
 800f4ae:	4b24      	ldr	r3, [pc, #144]	; (800f540 <__swsetup_r+0xd8>)
 800f4b0:	429c      	cmp	r4, r3
 800f4b2:	bf08      	it	eq
 800f4b4:	68ec      	ldreq	r4, [r5, #12]
 800f4b6:	e7e6      	b.n	800f486 <__swsetup_r+0x1e>
 800f4b8:	0758      	lsls	r0, r3, #29
 800f4ba:	d512      	bpl.n	800f4e2 <__swsetup_r+0x7a>
 800f4bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f4be:	b141      	cbz	r1, 800f4d2 <__swsetup_r+0x6a>
 800f4c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f4c4:	4299      	cmp	r1, r3
 800f4c6:	d002      	beq.n	800f4ce <__swsetup_r+0x66>
 800f4c8:	4630      	mov	r0, r6
 800f4ca:	f002 f93b 	bl	8011744 <_free_r>
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	6363      	str	r3, [r4, #52]	; 0x34
 800f4d2:	89a3      	ldrh	r3, [r4, #12]
 800f4d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f4d8:	81a3      	strh	r3, [r4, #12]
 800f4da:	2300      	movs	r3, #0
 800f4dc:	6063      	str	r3, [r4, #4]
 800f4de:	6923      	ldr	r3, [r4, #16]
 800f4e0:	6023      	str	r3, [r4, #0]
 800f4e2:	89a3      	ldrh	r3, [r4, #12]
 800f4e4:	f043 0308 	orr.w	r3, r3, #8
 800f4e8:	81a3      	strh	r3, [r4, #12]
 800f4ea:	6923      	ldr	r3, [r4, #16]
 800f4ec:	b94b      	cbnz	r3, 800f502 <__swsetup_r+0x9a>
 800f4ee:	89a3      	ldrh	r3, [r4, #12]
 800f4f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f4f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4f8:	d003      	beq.n	800f502 <__swsetup_r+0x9a>
 800f4fa:	4621      	mov	r1, r4
 800f4fc:	4630      	mov	r0, r6
 800f4fe:	f001 fbef 	bl	8010ce0 <__smakebuf_r>
 800f502:	89a0      	ldrh	r0, [r4, #12]
 800f504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f508:	f010 0301 	ands.w	r3, r0, #1
 800f50c:	d00a      	beq.n	800f524 <__swsetup_r+0xbc>
 800f50e:	2300      	movs	r3, #0
 800f510:	60a3      	str	r3, [r4, #8]
 800f512:	6963      	ldr	r3, [r4, #20]
 800f514:	425b      	negs	r3, r3
 800f516:	61a3      	str	r3, [r4, #24]
 800f518:	6923      	ldr	r3, [r4, #16]
 800f51a:	b943      	cbnz	r3, 800f52e <__swsetup_r+0xc6>
 800f51c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f520:	d1ba      	bne.n	800f498 <__swsetup_r+0x30>
 800f522:	bd70      	pop	{r4, r5, r6, pc}
 800f524:	0781      	lsls	r1, r0, #30
 800f526:	bf58      	it	pl
 800f528:	6963      	ldrpl	r3, [r4, #20]
 800f52a:	60a3      	str	r3, [r4, #8]
 800f52c:	e7f4      	b.n	800f518 <__swsetup_r+0xb0>
 800f52e:	2000      	movs	r0, #0
 800f530:	e7f7      	b.n	800f522 <__swsetup_r+0xba>
 800f532:	bf00      	nop
 800f534:	2000002c 	.word	0x2000002c
 800f538:	08013794 	.word	0x08013794
 800f53c:	080137b4 	.word	0x080137b4
 800f540:	08013774 	.word	0x08013774

0800f544 <quorem>:
 800f544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f548:	6903      	ldr	r3, [r0, #16]
 800f54a:	690c      	ldr	r4, [r1, #16]
 800f54c:	42a3      	cmp	r3, r4
 800f54e:	4607      	mov	r7, r0
 800f550:	f2c0 8081 	blt.w	800f656 <quorem+0x112>
 800f554:	3c01      	subs	r4, #1
 800f556:	f101 0814 	add.w	r8, r1, #20
 800f55a:	f100 0514 	add.w	r5, r0, #20
 800f55e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f562:	9301      	str	r3, [sp, #4]
 800f564:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f568:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f56c:	3301      	adds	r3, #1
 800f56e:	429a      	cmp	r2, r3
 800f570:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f574:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f578:	fbb2 f6f3 	udiv	r6, r2, r3
 800f57c:	d331      	bcc.n	800f5e2 <quorem+0x9e>
 800f57e:	f04f 0e00 	mov.w	lr, #0
 800f582:	4640      	mov	r0, r8
 800f584:	46ac      	mov	ip, r5
 800f586:	46f2      	mov	sl, lr
 800f588:	f850 2b04 	ldr.w	r2, [r0], #4
 800f58c:	b293      	uxth	r3, r2
 800f58e:	fb06 e303 	mla	r3, r6, r3, lr
 800f592:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f596:	b29b      	uxth	r3, r3
 800f598:	ebaa 0303 	sub.w	r3, sl, r3
 800f59c:	f8dc a000 	ldr.w	sl, [ip]
 800f5a0:	0c12      	lsrs	r2, r2, #16
 800f5a2:	fa13 f38a 	uxtah	r3, r3, sl
 800f5a6:	fb06 e202 	mla	r2, r6, r2, lr
 800f5aa:	9300      	str	r3, [sp, #0]
 800f5ac:	9b00      	ldr	r3, [sp, #0]
 800f5ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f5b2:	b292      	uxth	r2, r2
 800f5b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f5b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f5bc:	f8bd 3000 	ldrh.w	r3, [sp]
 800f5c0:	4581      	cmp	r9, r0
 800f5c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f5c6:	f84c 3b04 	str.w	r3, [ip], #4
 800f5ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f5ce:	d2db      	bcs.n	800f588 <quorem+0x44>
 800f5d0:	f855 300b 	ldr.w	r3, [r5, fp]
 800f5d4:	b92b      	cbnz	r3, 800f5e2 <quorem+0x9e>
 800f5d6:	9b01      	ldr	r3, [sp, #4]
 800f5d8:	3b04      	subs	r3, #4
 800f5da:	429d      	cmp	r5, r3
 800f5dc:	461a      	mov	r2, r3
 800f5de:	d32e      	bcc.n	800f63e <quorem+0xfa>
 800f5e0:	613c      	str	r4, [r7, #16]
 800f5e2:	4638      	mov	r0, r7
 800f5e4:	f001 fea2 	bl	801132c <__mcmp>
 800f5e8:	2800      	cmp	r0, #0
 800f5ea:	db24      	blt.n	800f636 <quorem+0xf2>
 800f5ec:	3601      	adds	r6, #1
 800f5ee:	4628      	mov	r0, r5
 800f5f0:	f04f 0c00 	mov.w	ip, #0
 800f5f4:	f858 2b04 	ldr.w	r2, [r8], #4
 800f5f8:	f8d0 e000 	ldr.w	lr, [r0]
 800f5fc:	b293      	uxth	r3, r2
 800f5fe:	ebac 0303 	sub.w	r3, ip, r3
 800f602:	0c12      	lsrs	r2, r2, #16
 800f604:	fa13 f38e 	uxtah	r3, r3, lr
 800f608:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f60c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f610:	b29b      	uxth	r3, r3
 800f612:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f616:	45c1      	cmp	r9, r8
 800f618:	f840 3b04 	str.w	r3, [r0], #4
 800f61c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f620:	d2e8      	bcs.n	800f5f4 <quorem+0xb0>
 800f622:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f626:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f62a:	b922      	cbnz	r2, 800f636 <quorem+0xf2>
 800f62c:	3b04      	subs	r3, #4
 800f62e:	429d      	cmp	r5, r3
 800f630:	461a      	mov	r2, r3
 800f632:	d30a      	bcc.n	800f64a <quorem+0x106>
 800f634:	613c      	str	r4, [r7, #16]
 800f636:	4630      	mov	r0, r6
 800f638:	b003      	add	sp, #12
 800f63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f63e:	6812      	ldr	r2, [r2, #0]
 800f640:	3b04      	subs	r3, #4
 800f642:	2a00      	cmp	r2, #0
 800f644:	d1cc      	bne.n	800f5e0 <quorem+0x9c>
 800f646:	3c01      	subs	r4, #1
 800f648:	e7c7      	b.n	800f5da <quorem+0x96>
 800f64a:	6812      	ldr	r2, [r2, #0]
 800f64c:	3b04      	subs	r3, #4
 800f64e:	2a00      	cmp	r2, #0
 800f650:	d1f0      	bne.n	800f634 <quorem+0xf0>
 800f652:	3c01      	subs	r4, #1
 800f654:	e7eb      	b.n	800f62e <quorem+0xea>
 800f656:	2000      	movs	r0, #0
 800f658:	e7ee      	b.n	800f638 <quorem+0xf4>
 800f65a:	0000      	movs	r0, r0
 800f65c:	0000      	movs	r0, r0
	...

0800f660 <_dtoa_r>:
 800f660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f664:	ed2d 8b04 	vpush	{d8-d9}
 800f668:	ec57 6b10 	vmov	r6, r7, d0
 800f66c:	b093      	sub	sp, #76	; 0x4c
 800f66e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f670:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f674:	9106      	str	r1, [sp, #24]
 800f676:	ee10 aa10 	vmov	sl, s0
 800f67a:	4604      	mov	r4, r0
 800f67c:	9209      	str	r2, [sp, #36]	; 0x24
 800f67e:	930c      	str	r3, [sp, #48]	; 0x30
 800f680:	46bb      	mov	fp, r7
 800f682:	b975      	cbnz	r5, 800f6a2 <_dtoa_r+0x42>
 800f684:	2010      	movs	r0, #16
 800f686:	f001 fb6b 	bl	8010d60 <malloc>
 800f68a:	4602      	mov	r2, r0
 800f68c:	6260      	str	r0, [r4, #36]	; 0x24
 800f68e:	b920      	cbnz	r0, 800f69a <_dtoa_r+0x3a>
 800f690:	4ba7      	ldr	r3, [pc, #668]	; (800f930 <_dtoa_r+0x2d0>)
 800f692:	21ea      	movs	r1, #234	; 0xea
 800f694:	48a7      	ldr	r0, [pc, #668]	; (800f934 <_dtoa_r+0x2d4>)
 800f696:	f002 fb1d 	bl	8011cd4 <__assert_func>
 800f69a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f69e:	6005      	str	r5, [r0, #0]
 800f6a0:	60c5      	str	r5, [r0, #12]
 800f6a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6a4:	6819      	ldr	r1, [r3, #0]
 800f6a6:	b151      	cbz	r1, 800f6be <_dtoa_r+0x5e>
 800f6a8:	685a      	ldr	r2, [r3, #4]
 800f6aa:	604a      	str	r2, [r1, #4]
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	4093      	lsls	r3, r2
 800f6b0:	608b      	str	r3, [r1, #8]
 800f6b2:	4620      	mov	r0, r4
 800f6b4:	f001 fbae 	bl	8010e14 <_Bfree>
 800f6b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	601a      	str	r2, [r3, #0]
 800f6be:	1e3b      	subs	r3, r7, #0
 800f6c0:	bfaa      	itet	ge
 800f6c2:	2300      	movge	r3, #0
 800f6c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f6c8:	f8c8 3000 	strge.w	r3, [r8]
 800f6cc:	4b9a      	ldr	r3, [pc, #616]	; (800f938 <_dtoa_r+0x2d8>)
 800f6ce:	bfbc      	itt	lt
 800f6d0:	2201      	movlt	r2, #1
 800f6d2:	f8c8 2000 	strlt.w	r2, [r8]
 800f6d6:	ea33 030b 	bics.w	r3, r3, fp
 800f6da:	d11b      	bne.n	800f714 <_dtoa_r+0xb4>
 800f6dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f6de:	f242 730f 	movw	r3, #9999	; 0x270f
 800f6e2:	6013      	str	r3, [r2, #0]
 800f6e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f6e8:	4333      	orrs	r3, r6
 800f6ea:	f000 8592 	beq.w	8010212 <_dtoa_r+0xbb2>
 800f6ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f6f0:	b963      	cbnz	r3, 800f70c <_dtoa_r+0xac>
 800f6f2:	4b92      	ldr	r3, [pc, #584]	; (800f93c <_dtoa_r+0x2dc>)
 800f6f4:	e022      	b.n	800f73c <_dtoa_r+0xdc>
 800f6f6:	4b92      	ldr	r3, [pc, #584]	; (800f940 <_dtoa_r+0x2e0>)
 800f6f8:	9301      	str	r3, [sp, #4]
 800f6fa:	3308      	adds	r3, #8
 800f6fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f6fe:	6013      	str	r3, [r2, #0]
 800f700:	9801      	ldr	r0, [sp, #4]
 800f702:	b013      	add	sp, #76	; 0x4c
 800f704:	ecbd 8b04 	vpop	{d8-d9}
 800f708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f70c:	4b8b      	ldr	r3, [pc, #556]	; (800f93c <_dtoa_r+0x2dc>)
 800f70e:	9301      	str	r3, [sp, #4]
 800f710:	3303      	adds	r3, #3
 800f712:	e7f3      	b.n	800f6fc <_dtoa_r+0x9c>
 800f714:	2200      	movs	r2, #0
 800f716:	2300      	movs	r3, #0
 800f718:	4650      	mov	r0, sl
 800f71a:	4659      	mov	r1, fp
 800f71c:	f7f1 f9fc 	bl	8000b18 <__aeabi_dcmpeq>
 800f720:	ec4b ab19 	vmov	d9, sl, fp
 800f724:	4680      	mov	r8, r0
 800f726:	b158      	cbz	r0, 800f740 <_dtoa_r+0xe0>
 800f728:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f72a:	2301      	movs	r3, #1
 800f72c:	6013      	str	r3, [r2, #0]
 800f72e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f730:	2b00      	cmp	r3, #0
 800f732:	f000 856b 	beq.w	801020c <_dtoa_r+0xbac>
 800f736:	4883      	ldr	r0, [pc, #524]	; (800f944 <_dtoa_r+0x2e4>)
 800f738:	6018      	str	r0, [r3, #0]
 800f73a:	1e43      	subs	r3, r0, #1
 800f73c:	9301      	str	r3, [sp, #4]
 800f73e:	e7df      	b.n	800f700 <_dtoa_r+0xa0>
 800f740:	ec4b ab10 	vmov	d0, sl, fp
 800f744:	aa10      	add	r2, sp, #64	; 0x40
 800f746:	a911      	add	r1, sp, #68	; 0x44
 800f748:	4620      	mov	r0, r4
 800f74a:	f001 ff11 	bl	8011570 <__d2b>
 800f74e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f752:	ee08 0a10 	vmov	s16, r0
 800f756:	2d00      	cmp	r5, #0
 800f758:	f000 8084 	beq.w	800f864 <_dtoa_r+0x204>
 800f75c:	ee19 3a90 	vmov	r3, s19
 800f760:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f764:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f768:	4656      	mov	r6, sl
 800f76a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f76e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f772:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f776:	4b74      	ldr	r3, [pc, #464]	; (800f948 <_dtoa_r+0x2e8>)
 800f778:	2200      	movs	r2, #0
 800f77a:	4630      	mov	r0, r6
 800f77c:	4639      	mov	r1, r7
 800f77e:	f7f0 fdab 	bl	80002d8 <__aeabi_dsub>
 800f782:	a365      	add	r3, pc, #404	; (adr r3, 800f918 <_dtoa_r+0x2b8>)
 800f784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f788:	f7f0 ff5e 	bl	8000648 <__aeabi_dmul>
 800f78c:	a364      	add	r3, pc, #400	; (adr r3, 800f920 <_dtoa_r+0x2c0>)
 800f78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f792:	f7f0 fda3 	bl	80002dc <__adddf3>
 800f796:	4606      	mov	r6, r0
 800f798:	4628      	mov	r0, r5
 800f79a:	460f      	mov	r7, r1
 800f79c:	f7f0 feea 	bl	8000574 <__aeabi_i2d>
 800f7a0:	a361      	add	r3, pc, #388	; (adr r3, 800f928 <_dtoa_r+0x2c8>)
 800f7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a6:	f7f0 ff4f 	bl	8000648 <__aeabi_dmul>
 800f7aa:	4602      	mov	r2, r0
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	4630      	mov	r0, r6
 800f7b0:	4639      	mov	r1, r7
 800f7b2:	f7f0 fd93 	bl	80002dc <__adddf3>
 800f7b6:	4606      	mov	r6, r0
 800f7b8:	460f      	mov	r7, r1
 800f7ba:	f7f1 f9f5 	bl	8000ba8 <__aeabi_d2iz>
 800f7be:	2200      	movs	r2, #0
 800f7c0:	9000      	str	r0, [sp, #0]
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	4630      	mov	r0, r6
 800f7c6:	4639      	mov	r1, r7
 800f7c8:	f7f1 f9b0 	bl	8000b2c <__aeabi_dcmplt>
 800f7cc:	b150      	cbz	r0, 800f7e4 <_dtoa_r+0x184>
 800f7ce:	9800      	ldr	r0, [sp, #0]
 800f7d0:	f7f0 fed0 	bl	8000574 <__aeabi_i2d>
 800f7d4:	4632      	mov	r2, r6
 800f7d6:	463b      	mov	r3, r7
 800f7d8:	f7f1 f99e 	bl	8000b18 <__aeabi_dcmpeq>
 800f7dc:	b910      	cbnz	r0, 800f7e4 <_dtoa_r+0x184>
 800f7de:	9b00      	ldr	r3, [sp, #0]
 800f7e0:	3b01      	subs	r3, #1
 800f7e2:	9300      	str	r3, [sp, #0]
 800f7e4:	9b00      	ldr	r3, [sp, #0]
 800f7e6:	2b16      	cmp	r3, #22
 800f7e8:	d85a      	bhi.n	800f8a0 <_dtoa_r+0x240>
 800f7ea:	9a00      	ldr	r2, [sp, #0]
 800f7ec:	4b57      	ldr	r3, [pc, #348]	; (800f94c <_dtoa_r+0x2ec>)
 800f7ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f6:	ec51 0b19 	vmov	r0, r1, d9
 800f7fa:	f7f1 f997 	bl	8000b2c <__aeabi_dcmplt>
 800f7fe:	2800      	cmp	r0, #0
 800f800:	d050      	beq.n	800f8a4 <_dtoa_r+0x244>
 800f802:	9b00      	ldr	r3, [sp, #0]
 800f804:	3b01      	subs	r3, #1
 800f806:	9300      	str	r3, [sp, #0]
 800f808:	2300      	movs	r3, #0
 800f80a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f80c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f80e:	1b5d      	subs	r5, r3, r5
 800f810:	1e6b      	subs	r3, r5, #1
 800f812:	9305      	str	r3, [sp, #20]
 800f814:	bf45      	ittet	mi
 800f816:	f1c5 0301 	rsbmi	r3, r5, #1
 800f81a:	9304      	strmi	r3, [sp, #16]
 800f81c:	2300      	movpl	r3, #0
 800f81e:	2300      	movmi	r3, #0
 800f820:	bf4c      	ite	mi
 800f822:	9305      	strmi	r3, [sp, #20]
 800f824:	9304      	strpl	r3, [sp, #16]
 800f826:	9b00      	ldr	r3, [sp, #0]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	db3d      	blt.n	800f8a8 <_dtoa_r+0x248>
 800f82c:	9b05      	ldr	r3, [sp, #20]
 800f82e:	9a00      	ldr	r2, [sp, #0]
 800f830:	920a      	str	r2, [sp, #40]	; 0x28
 800f832:	4413      	add	r3, r2
 800f834:	9305      	str	r3, [sp, #20]
 800f836:	2300      	movs	r3, #0
 800f838:	9307      	str	r3, [sp, #28]
 800f83a:	9b06      	ldr	r3, [sp, #24]
 800f83c:	2b09      	cmp	r3, #9
 800f83e:	f200 8089 	bhi.w	800f954 <_dtoa_r+0x2f4>
 800f842:	2b05      	cmp	r3, #5
 800f844:	bfc4      	itt	gt
 800f846:	3b04      	subgt	r3, #4
 800f848:	9306      	strgt	r3, [sp, #24]
 800f84a:	9b06      	ldr	r3, [sp, #24]
 800f84c:	f1a3 0302 	sub.w	r3, r3, #2
 800f850:	bfcc      	ite	gt
 800f852:	2500      	movgt	r5, #0
 800f854:	2501      	movle	r5, #1
 800f856:	2b03      	cmp	r3, #3
 800f858:	f200 8087 	bhi.w	800f96a <_dtoa_r+0x30a>
 800f85c:	e8df f003 	tbb	[pc, r3]
 800f860:	59383a2d 	.word	0x59383a2d
 800f864:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f868:	441d      	add	r5, r3
 800f86a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f86e:	2b20      	cmp	r3, #32
 800f870:	bfc1      	itttt	gt
 800f872:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f876:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f87a:	fa0b f303 	lslgt.w	r3, fp, r3
 800f87e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f882:	bfda      	itte	le
 800f884:	f1c3 0320 	rsble	r3, r3, #32
 800f888:	fa06 f003 	lslle.w	r0, r6, r3
 800f88c:	4318      	orrgt	r0, r3
 800f88e:	f7f0 fe61 	bl	8000554 <__aeabi_ui2d>
 800f892:	2301      	movs	r3, #1
 800f894:	4606      	mov	r6, r0
 800f896:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f89a:	3d01      	subs	r5, #1
 800f89c:	930e      	str	r3, [sp, #56]	; 0x38
 800f89e:	e76a      	b.n	800f776 <_dtoa_r+0x116>
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	e7b2      	b.n	800f80a <_dtoa_r+0x1aa>
 800f8a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800f8a6:	e7b1      	b.n	800f80c <_dtoa_r+0x1ac>
 800f8a8:	9b04      	ldr	r3, [sp, #16]
 800f8aa:	9a00      	ldr	r2, [sp, #0]
 800f8ac:	1a9b      	subs	r3, r3, r2
 800f8ae:	9304      	str	r3, [sp, #16]
 800f8b0:	4253      	negs	r3, r2
 800f8b2:	9307      	str	r3, [sp, #28]
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	930a      	str	r3, [sp, #40]	; 0x28
 800f8b8:	e7bf      	b.n	800f83a <_dtoa_r+0x1da>
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	9308      	str	r3, [sp, #32]
 800f8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	dc55      	bgt.n	800f970 <_dtoa_r+0x310>
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	9209      	str	r2, [sp, #36]	; 0x24
 800f8ce:	e00c      	b.n	800f8ea <_dtoa_r+0x28a>
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	e7f3      	b.n	800f8bc <_dtoa_r+0x25c>
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8d8:	9308      	str	r3, [sp, #32]
 800f8da:	9b00      	ldr	r3, [sp, #0]
 800f8dc:	4413      	add	r3, r2
 800f8de:	9302      	str	r3, [sp, #8]
 800f8e0:	3301      	adds	r3, #1
 800f8e2:	2b01      	cmp	r3, #1
 800f8e4:	9303      	str	r3, [sp, #12]
 800f8e6:	bfb8      	it	lt
 800f8e8:	2301      	movlt	r3, #1
 800f8ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	6042      	str	r2, [r0, #4]
 800f8f0:	2204      	movs	r2, #4
 800f8f2:	f102 0614 	add.w	r6, r2, #20
 800f8f6:	429e      	cmp	r6, r3
 800f8f8:	6841      	ldr	r1, [r0, #4]
 800f8fa:	d93d      	bls.n	800f978 <_dtoa_r+0x318>
 800f8fc:	4620      	mov	r0, r4
 800f8fe:	f001 fa49 	bl	8010d94 <_Balloc>
 800f902:	9001      	str	r0, [sp, #4]
 800f904:	2800      	cmp	r0, #0
 800f906:	d13b      	bne.n	800f980 <_dtoa_r+0x320>
 800f908:	4b11      	ldr	r3, [pc, #68]	; (800f950 <_dtoa_r+0x2f0>)
 800f90a:	4602      	mov	r2, r0
 800f90c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f910:	e6c0      	b.n	800f694 <_dtoa_r+0x34>
 800f912:	2301      	movs	r3, #1
 800f914:	e7df      	b.n	800f8d6 <_dtoa_r+0x276>
 800f916:	bf00      	nop
 800f918:	636f4361 	.word	0x636f4361
 800f91c:	3fd287a7 	.word	0x3fd287a7
 800f920:	8b60c8b3 	.word	0x8b60c8b3
 800f924:	3fc68a28 	.word	0x3fc68a28
 800f928:	509f79fb 	.word	0x509f79fb
 800f92c:	3fd34413 	.word	0x3fd34413
 800f930:	080136ee 	.word	0x080136ee
 800f934:	08013705 	.word	0x08013705
 800f938:	7ff00000 	.word	0x7ff00000
 800f93c:	080136ea 	.word	0x080136ea
 800f940:	080136e1 	.word	0x080136e1
 800f944:	08013569 	.word	0x08013569
 800f948:	3ff80000 	.word	0x3ff80000
 800f94c:	080138d8 	.word	0x080138d8
 800f950:	08013760 	.word	0x08013760
 800f954:	2501      	movs	r5, #1
 800f956:	2300      	movs	r3, #0
 800f958:	9306      	str	r3, [sp, #24]
 800f95a:	9508      	str	r5, [sp, #32]
 800f95c:	f04f 33ff 	mov.w	r3, #4294967295
 800f960:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f964:	2200      	movs	r2, #0
 800f966:	2312      	movs	r3, #18
 800f968:	e7b0      	b.n	800f8cc <_dtoa_r+0x26c>
 800f96a:	2301      	movs	r3, #1
 800f96c:	9308      	str	r3, [sp, #32]
 800f96e:	e7f5      	b.n	800f95c <_dtoa_r+0x2fc>
 800f970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f972:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f976:	e7b8      	b.n	800f8ea <_dtoa_r+0x28a>
 800f978:	3101      	adds	r1, #1
 800f97a:	6041      	str	r1, [r0, #4]
 800f97c:	0052      	lsls	r2, r2, #1
 800f97e:	e7b8      	b.n	800f8f2 <_dtoa_r+0x292>
 800f980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f982:	9a01      	ldr	r2, [sp, #4]
 800f984:	601a      	str	r2, [r3, #0]
 800f986:	9b03      	ldr	r3, [sp, #12]
 800f988:	2b0e      	cmp	r3, #14
 800f98a:	f200 809d 	bhi.w	800fac8 <_dtoa_r+0x468>
 800f98e:	2d00      	cmp	r5, #0
 800f990:	f000 809a 	beq.w	800fac8 <_dtoa_r+0x468>
 800f994:	9b00      	ldr	r3, [sp, #0]
 800f996:	2b00      	cmp	r3, #0
 800f998:	dd32      	ble.n	800fa00 <_dtoa_r+0x3a0>
 800f99a:	4ab7      	ldr	r2, [pc, #732]	; (800fc78 <_dtoa_r+0x618>)
 800f99c:	f003 030f 	and.w	r3, r3, #15
 800f9a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f9a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f9a8:	9b00      	ldr	r3, [sp, #0]
 800f9aa:	05d8      	lsls	r0, r3, #23
 800f9ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f9b0:	d516      	bpl.n	800f9e0 <_dtoa_r+0x380>
 800f9b2:	4bb2      	ldr	r3, [pc, #712]	; (800fc7c <_dtoa_r+0x61c>)
 800f9b4:	ec51 0b19 	vmov	r0, r1, d9
 800f9b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f9bc:	f7f0 ff6e 	bl	800089c <__aeabi_ddiv>
 800f9c0:	f007 070f 	and.w	r7, r7, #15
 800f9c4:	4682      	mov	sl, r0
 800f9c6:	468b      	mov	fp, r1
 800f9c8:	2503      	movs	r5, #3
 800f9ca:	4eac      	ldr	r6, [pc, #688]	; (800fc7c <_dtoa_r+0x61c>)
 800f9cc:	b957      	cbnz	r7, 800f9e4 <_dtoa_r+0x384>
 800f9ce:	4642      	mov	r2, r8
 800f9d0:	464b      	mov	r3, r9
 800f9d2:	4650      	mov	r0, sl
 800f9d4:	4659      	mov	r1, fp
 800f9d6:	f7f0 ff61 	bl	800089c <__aeabi_ddiv>
 800f9da:	4682      	mov	sl, r0
 800f9dc:	468b      	mov	fp, r1
 800f9de:	e028      	b.n	800fa32 <_dtoa_r+0x3d2>
 800f9e0:	2502      	movs	r5, #2
 800f9e2:	e7f2      	b.n	800f9ca <_dtoa_r+0x36a>
 800f9e4:	07f9      	lsls	r1, r7, #31
 800f9e6:	d508      	bpl.n	800f9fa <_dtoa_r+0x39a>
 800f9e8:	4640      	mov	r0, r8
 800f9ea:	4649      	mov	r1, r9
 800f9ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f9f0:	f7f0 fe2a 	bl	8000648 <__aeabi_dmul>
 800f9f4:	3501      	adds	r5, #1
 800f9f6:	4680      	mov	r8, r0
 800f9f8:	4689      	mov	r9, r1
 800f9fa:	107f      	asrs	r7, r7, #1
 800f9fc:	3608      	adds	r6, #8
 800f9fe:	e7e5      	b.n	800f9cc <_dtoa_r+0x36c>
 800fa00:	f000 809b 	beq.w	800fb3a <_dtoa_r+0x4da>
 800fa04:	9b00      	ldr	r3, [sp, #0]
 800fa06:	4f9d      	ldr	r7, [pc, #628]	; (800fc7c <_dtoa_r+0x61c>)
 800fa08:	425e      	negs	r6, r3
 800fa0a:	4b9b      	ldr	r3, [pc, #620]	; (800fc78 <_dtoa_r+0x618>)
 800fa0c:	f006 020f 	and.w	r2, r6, #15
 800fa10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa18:	ec51 0b19 	vmov	r0, r1, d9
 800fa1c:	f7f0 fe14 	bl	8000648 <__aeabi_dmul>
 800fa20:	1136      	asrs	r6, r6, #4
 800fa22:	4682      	mov	sl, r0
 800fa24:	468b      	mov	fp, r1
 800fa26:	2300      	movs	r3, #0
 800fa28:	2502      	movs	r5, #2
 800fa2a:	2e00      	cmp	r6, #0
 800fa2c:	d17a      	bne.n	800fb24 <_dtoa_r+0x4c4>
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d1d3      	bne.n	800f9da <_dtoa_r+0x37a>
 800fa32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	f000 8082 	beq.w	800fb3e <_dtoa_r+0x4de>
 800fa3a:	4b91      	ldr	r3, [pc, #580]	; (800fc80 <_dtoa_r+0x620>)
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	4650      	mov	r0, sl
 800fa40:	4659      	mov	r1, fp
 800fa42:	f7f1 f873 	bl	8000b2c <__aeabi_dcmplt>
 800fa46:	2800      	cmp	r0, #0
 800fa48:	d079      	beq.n	800fb3e <_dtoa_r+0x4de>
 800fa4a:	9b03      	ldr	r3, [sp, #12]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d076      	beq.n	800fb3e <_dtoa_r+0x4de>
 800fa50:	9b02      	ldr	r3, [sp, #8]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	dd36      	ble.n	800fac4 <_dtoa_r+0x464>
 800fa56:	9b00      	ldr	r3, [sp, #0]
 800fa58:	4650      	mov	r0, sl
 800fa5a:	4659      	mov	r1, fp
 800fa5c:	1e5f      	subs	r7, r3, #1
 800fa5e:	2200      	movs	r2, #0
 800fa60:	4b88      	ldr	r3, [pc, #544]	; (800fc84 <_dtoa_r+0x624>)
 800fa62:	f7f0 fdf1 	bl	8000648 <__aeabi_dmul>
 800fa66:	9e02      	ldr	r6, [sp, #8]
 800fa68:	4682      	mov	sl, r0
 800fa6a:	468b      	mov	fp, r1
 800fa6c:	3501      	adds	r5, #1
 800fa6e:	4628      	mov	r0, r5
 800fa70:	f7f0 fd80 	bl	8000574 <__aeabi_i2d>
 800fa74:	4652      	mov	r2, sl
 800fa76:	465b      	mov	r3, fp
 800fa78:	f7f0 fde6 	bl	8000648 <__aeabi_dmul>
 800fa7c:	4b82      	ldr	r3, [pc, #520]	; (800fc88 <_dtoa_r+0x628>)
 800fa7e:	2200      	movs	r2, #0
 800fa80:	f7f0 fc2c 	bl	80002dc <__adddf3>
 800fa84:	46d0      	mov	r8, sl
 800fa86:	46d9      	mov	r9, fp
 800fa88:	4682      	mov	sl, r0
 800fa8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800fa8e:	2e00      	cmp	r6, #0
 800fa90:	d158      	bne.n	800fb44 <_dtoa_r+0x4e4>
 800fa92:	4b7e      	ldr	r3, [pc, #504]	; (800fc8c <_dtoa_r+0x62c>)
 800fa94:	2200      	movs	r2, #0
 800fa96:	4640      	mov	r0, r8
 800fa98:	4649      	mov	r1, r9
 800fa9a:	f7f0 fc1d 	bl	80002d8 <__aeabi_dsub>
 800fa9e:	4652      	mov	r2, sl
 800faa0:	465b      	mov	r3, fp
 800faa2:	4680      	mov	r8, r0
 800faa4:	4689      	mov	r9, r1
 800faa6:	f7f1 f85f 	bl	8000b68 <__aeabi_dcmpgt>
 800faaa:	2800      	cmp	r0, #0
 800faac:	f040 8295 	bne.w	800ffda <_dtoa_r+0x97a>
 800fab0:	4652      	mov	r2, sl
 800fab2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fab6:	4640      	mov	r0, r8
 800fab8:	4649      	mov	r1, r9
 800faba:	f7f1 f837 	bl	8000b2c <__aeabi_dcmplt>
 800fabe:	2800      	cmp	r0, #0
 800fac0:	f040 8289 	bne.w	800ffd6 <_dtoa_r+0x976>
 800fac4:	ec5b ab19 	vmov	sl, fp, d9
 800fac8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800faca:	2b00      	cmp	r3, #0
 800facc:	f2c0 8148 	blt.w	800fd60 <_dtoa_r+0x700>
 800fad0:	9a00      	ldr	r2, [sp, #0]
 800fad2:	2a0e      	cmp	r2, #14
 800fad4:	f300 8144 	bgt.w	800fd60 <_dtoa_r+0x700>
 800fad8:	4b67      	ldr	r3, [pc, #412]	; (800fc78 <_dtoa_r+0x618>)
 800fada:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fade:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	f280 80d5 	bge.w	800fc94 <_dtoa_r+0x634>
 800faea:	9b03      	ldr	r3, [sp, #12]
 800faec:	2b00      	cmp	r3, #0
 800faee:	f300 80d1 	bgt.w	800fc94 <_dtoa_r+0x634>
 800faf2:	f040 826f 	bne.w	800ffd4 <_dtoa_r+0x974>
 800faf6:	4b65      	ldr	r3, [pc, #404]	; (800fc8c <_dtoa_r+0x62c>)
 800faf8:	2200      	movs	r2, #0
 800fafa:	4640      	mov	r0, r8
 800fafc:	4649      	mov	r1, r9
 800fafe:	f7f0 fda3 	bl	8000648 <__aeabi_dmul>
 800fb02:	4652      	mov	r2, sl
 800fb04:	465b      	mov	r3, fp
 800fb06:	f7f1 f825 	bl	8000b54 <__aeabi_dcmpge>
 800fb0a:	9e03      	ldr	r6, [sp, #12]
 800fb0c:	4637      	mov	r7, r6
 800fb0e:	2800      	cmp	r0, #0
 800fb10:	f040 8245 	bne.w	800ff9e <_dtoa_r+0x93e>
 800fb14:	9d01      	ldr	r5, [sp, #4]
 800fb16:	2331      	movs	r3, #49	; 0x31
 800fb18:	f805 3b01 	strb.w	r3, [r5], #1
 800fb1c:	9b00      	ldr	r3, [sp, #0]
 800fb1e:	3301      	adds	r3, #1
 800fb20:	9300      	str	r3, [sp, #0]
 800fb22:	e240      	b.n	800ffa6 <_dtoa_r+0x946>
 800fb24:	07f2      	lsls	r2, r6, #31
 800fb26:	d505      	bpl.n	800fb34 <_dtoa_r+0x4d4>
 800fb28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb2c:	f7f0 fd8c 	bl	8000648 <__aeabi_dmul>
 800fb30:	3501      	adds	r5, #1
 800fb32:	2301      	movs	r3, #1
 800fb34:	1076      	asrs	r6, r6, #1
 800fb36:	3708      	adds	r7, #8
 800fb38:	e777      	b.n	800fa2a <_dtoa_r+0x3ca>
 800fb3a:	2502      	movs	r5, #2
 800fb3c:	e779      	b.n	800fa32 <_dtoa_r+0x3d2>
 800fb3e:	9f00      	ldr	r7, [sp, #0]
 800fb40:	9e03      	ldr	r6, [sp, #12]
 800fb42:	e794      	b.n	800fa6e <_dtoa_r+0x40e>
 800fb44:	9901      	ldr	r1, [sp, #4]
 800fb46:	4b4c      	ldr	r3, [pc, #304]	; (800fc78 <_dtoa_r+0x618>)
 800fb48:	4431      	add	r1, r6
 800fb4a:	910d      	str	r1, [sp, #52]	; 0x34
 800fb4c:	9908      	ldr	r1, [sp, #32]
 800fb4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fb52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fb56:	2900      	cmp	r1, #0
 800fb58:	d043      	beq.n	800fbe2 <_dtoa_r+0x582>
 800fb5a:	494d      	ldr	r1, [pc, #308]	; (800fc90 <_dtoa_r+0x630>)
 800fb5c:	2000      	movs	r0, #0
 800fb5e:	f7f0 fe9d 	bl	800089c <__aeabi_ddiv>
 800fb62:	4652      	mov	r2, sl
 800fb64:	465b      	mov	r3, fp
 800fb66:	f7f0 fbb7 	bl	80002d8 <__aeabi_dsub>
 800fb6a:	9d01      	ldr	r5, [sp, #4]
 800fb6c:	4682      	mov	sl, r0
 800fb6e:	468b      	mov	fp, r1
 800fb70:	4649      	mov	r1, r9
 800fb72:	4640      	mov	r0, r8
 800fb74:	f7f1 f818 	bl	8000ba8 <__aeabi_d2iz>
 800fb78:	4606      	mov	r6, r0
 800fb7a:	f7f0 fcfb 	bl	8000574 <__aeabi_i2d>
 800fb7e:	4602      	mov	r2, r0
 800fb80:	460b      	mov	r3, r1
 800fb82:	4640      	mov	r0, r8
 800fb84:	4649      	mov	r1, r9
 800fb86:	f7f0 fba7 	bl	80002d8 <__aeabi_dsub>
 800fb8a:	3630      	adds	r6, #48	; 0x30
 800fb8c:	f805 6b01 	strb.w	r6, [r5], #1
 800fb90:	4652      	mov	r2, sl
 800fb92:	465b      	mov	r3, fp
 800fb94:	4680      	mov	r8, r0
 800fb96:	4689      	mov	r9, r1
 800fb98:	f7f0 ffc8 	bl	8000b2c <__aeabi_dcmplt>
 800fb9c:	2800      	cmp	r0, #0
 800fb9e:	d163      	bne.n	800fc68 <_dtoa_r+0x608>
 800fba0:	4642      	mov	r2, r8
 800fba2:	464b      	mov	r3, r9
 800fba4:	4936      	ldr	r1, [pc, #216]	; (800fc80 <_dtoa_r+0x620>)
 800fba6:	2000      	movs	r0, #0
 800fba8:	f7f0 fb96 	bl	80002d8 <__aeabi_dsub>
 800fbac:	4652      	mov	r2, sl
 800fbae:	465b      	mov	r3, fp
 800fbb0:	f7f0 ffbc 	bl	8000b2c <__aeabi_dcmplt>
 800fbb4:	2800      	cmp	r0, #0
 800fbb6:	f040 80b5 	bne.w	800fd24 <_dtoa_r+0x6c4>
 800fbba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fbbc:	429d      	cmp	r5, r3
 800fbbe:	d081      	beq.n	800fac4 <_dtoa_r+0x464>
 800fbc0:	4b30      	ldr	r3, [pc, #192]	; (800fc84 <_dtoa_r+0x624>)
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	4650      	mov	r0, sl
 800fbc6:	4659      	mov	r1, fp
 800fbc8:	f7f0 fd3e 	bl	8000648 <__aeabi_dmul>
 800fbcc:	4b2d      	ldr	r3, [pc, #180]	; (800fc84 <_dtoa_r+0x624>)
 800fbce:	4682      	mov	sl, r0
 800fbd0:	468b      	mov	fp, r1
 800fbd2:	4640      	mov	r0, r8
 800fbd4:	4649      	mov	r1, r9
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	f7f0 fd36 	bl	8000648 <__aeabi_dmul>
 800fbdc:	4680      	mov	r8, r0
 800fbde:	4689      	mov	r9, r1
 800fbe0:	e7c6      	b.n	800fb70 <_dtoa_r+0x510>
 800fbe2:	4650      	mov	r0, sl
 800fbe4:	4659      	mov	r1, fp
 800fbe6:	f7f0 fd2f 	bl	8000648 <__aeabi_dmul>
 800fbea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fbec:	9d01      	ldr	r5, [sp, #4]
 800fbee:	930f      	str	r3, [sp, #60]	; 0x3c
 800fbf0:	4682      	mov	sl, r0
 800fbf2:	468b      	mov	fp, r1
 800fbf4:	4649      	mov	r1, r9
 800fbf6:	4640      	mov	r0, r8
 800fbf8:	f7f0 ffd6 	bl	8000ba8 <__aeabi_d2iz>
 800fbfc:	4606      	mov	r6, r0
 800fbfe:	f7f0 fcb9 	bl	8000574 <__aeabi_i2d>
 800fc02:	3630      	adds	r6, #48	; 0x30
 800fc04:	4602      	mov	r2, r0
 800fc06:	460b      	mov	r3, r1
 800fc08:	4640      	mov	r0, r8
 800fc0a:	4649      	mov	r1, r9
 800fc0c:	f7f0 fb64 	bl	80002d8 <__aeabi_dsub>
 800fc10:	f805 6b01 	strb.w	r6, [r5], #1
 800fc14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc16:	429d      	cmp	r5, r3
 800fc18:	4680      	mov	r8, r0
 800fc1a:	4689      	mov	r9, r1
 800fc1c:	f04f 0200 	mov.w	r2, #0
 800fc20:	d124      	bne.n	800fc6c <_dtoa_r+0x60c>
 800fc22:	4b1b      	ldr	r3, [pc, #108]	; (800fc90 <_dtoa_r+0x630>)
 800fc24:	4650      	mov	r0, sl
 800fc26:	4659      	mov	r1, fp
 800fc28:	f7f0 fb58 	bl	80002dc <__adddf3>
 800fc2c:	4602      	mov	r2, r0
 800fc2e:	460b      	mov	r3, r1
 800fc30:	4640      	mov	r0, r8
 800fc32:	4649      	mov	r1, r9
 800fc34:	f7f0 ff98 	bl	8000b68 <__aeabi_dcmpgt>
 800fc38:	2800      	cmp	r0, #0
 800fc3a:	d173      	bne.n	800fd24 <_dtoa_r+0x6c4>
 800fc3c:	4652      	mov	r2, sl
 800fc3e:	465b      	mov	r3, fp
 800fc40:	4913      	ldr	r1, [pc, #76]	; (800fc90 <_dtoa_r+0x630>)
 800fc42:	2000      	movs	r0, #0
 800fc44:	f7f0 fb48 	bl	80002d8 <__aeabi_dsub>
 800fc48:	4602      	mov	r2, r0
 800fc4a:	460b      	mov	r3, r1
 800fc4c:	4640      	mov	r0, r8
 800fc4e:	4649      	mov	r1, r9
 800fc50:	f7f0 ff6c 	bl	8000b2c <__aeabi_dcmplt>
 800fc54:	2800      	cmp	r0, #0
 800fc56:	f43f af35 	beq.w	800fac4 <_dtoa_r+0x464>
 800fc5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fc5c:	1e6b      	subs	r3, r5, #1
 800fc5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fc64:	2b30      	cmp	r3, #48	; 0x30
 800fc66:	d0f8      	beq.n	800fc5a <_dtoa_r+0x5fa>
 800fc68:	9700      	str	r7, [sp, #0]
 800fc6a:	e049      	b.n	800fd00 <_dtoa_r+0x6a0>
 800fc6c:	4b05      	ldr	r3, [pc, #20]	; (800fc84 <_dtoa_r+0x624>)
 800fc6e:	f7f0 fceb 	bl	8000648 <__aeabi_dmul>
 800fc72:	4680      	mov	r8, r0
 800fc74:	4689      	mov	r9, r1
 800fc76:	e7bd      	b.n	800fbf4 <_dtoa_r+0x594>
 800fc78:	080138d8 	.word	0x080138d8
 800fc7c:	080138b0 	.word	0x080138b0
 800fc80:	3ff00000 	.word	0x3ff00000
 800fc84:	40240000 	.word	0x40240000
 800fc88:	401c0000 	.word	0x401c0000
 800fc8c:	40140000 	.word	0x40140000
 800fc90:	3fe00000 	.word	0x3fe00000
 800fc94:	9d01      	ldr	r5, [sp, #4]
 800fc96:	4656      	mov	r6, sl
 800fc98:	465f      	mov	r7, fp
 800fc9a:	4642      	mov	r2, r8
 800fc9c:	464b      	mov	r3, r9
 800fc9e:	4630      	mov	r0, r6
 800fca0:	4639      	mov	r1, r7
 800fca2:	f7f0 fdfb 	bl	800089c <__aeabi_ddiv>
 800fca6:	f7f0 ff7f 	bl	8000ba8 <__aeabi_d2iz>
 800fcaa:	4682      	mov	sl, r0
 800fcac:	f7f0 fc62 	bl	8000574 <__aeabi_i2d>
 800fcb0:	4642      	mov	r2, r8
 800fcb2:	464b      	mov	r3, r9
 800fcb4:	f7f0 fcc8 	bl	8000648 <__aeabi_dmul>
 800fcb8:	4602      	mov	r2, r0
 800fcba:	460b      	mov	r3, r1
 800fcbc:	4630      	mov	r0, r6
 800fcbe:	4639      	mov	r1, r7
 800fcc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800fcc4:	f7f0 fb08 	bl	80002d8 <__aeabi_dsub>
 800fcc8:	f805 6b01 	strb.w	r6, [r5], #1
 800fccc:	9e01      	ldr	r6, [sp, #4]
 800fcce:	9f03      	ldr	r7, [sp, #12]
 800fcd0:	1bae      	subs	r6, r5, r6
 800fcd2:	42b7      	cmp	r7, r6
 800fcd4:	4602      	mov	r2, r0
 800fcd6:	460b      	mov	r3, r1
 800fcd8:	d135      	bne.n	800fd46 <_dtoa_r+0x6e6>
 800fcda:	f7f0 faff 	bl	80002dc <__adddf3>
 800fcde:	4642      	mov	r2, r8
 800fce0:	464b      	mov	r3, r9
 800fce2:	4606      	mov	r6, r0
 800fce4:	460f      	mov	r7, r1
 800fce6:	f7f0 ff3f 	bl	8000b68 <__aeabi_dcmpgt>
 800fcea:	b9d0      	cbnz	r0, 800fd22 <_dtoa_r+0x6c2>
 800fcec:	4642      	mov	r2, r8
 800fcee:	464b      	mov	r3, r9
 800fcf0:	4630      	mov	r0, r6
 800fcf2:	4639      	mov	r1, r7
 800fcf4:	f7f0 ff10 	bl	8000b18 <__aeabi_dcmpeq>
 800fcf8:	b110      	cbz	r0, 800fd00 <_dtoa_r+0x6a0>
 800fcfa:	f01a 0f01 	tst.w	sl, #1
 800fcfe:	d110      	bne.n	800fd22 <_dtoa_r+0x6c2>
 800fd00:	4620      	mov	r0, r4
 800fd02:	ee18 1a10 	vmov	r1, s16
 800fd06:	f001 f885 	bl	8010e14 <_Bfree>
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	9800      	ldr	r0, [sp, #0]
 800fd0e:	702b      	strb	r3, [r5, #0]
 800fd10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd12:	3001      	adds	r0, #1
 800fd14:	6018      	str	r0, [r3, #0]
 800fd16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	f43f acf1 	beq.w	800f700 <_dtoa_r+0xa0>
 800fd1e:	601d      	str	r5, [r3, #0]
 800fd20:	e4ee      	b.n	800f700 <_dtoa_r+0xa0>
 800fd22:	9f00      	ldr	r7, [sp, #0]
 800fd24:	462b      	mov	r3, r5
 800fd26:	461d      	mov	r5, r3
 800fd28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd2c:	2a39      	cmp	r2, #57	; 0x39
 800fd2e:	d106      	bne.n	800fd3e <_dtoa_r+0x6de>
 800fd30:	9a01      	ldr	r2, [sp, #4]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d1f7      	bne.n	800fd26 <_dtoa_r+0x6c6>
 800fd36:	9901      	ldr	r1, [sp, #4]
 800fd38:	2230      	movs	r2, #48	; 0x30
 800fd3a:	3701      	adds	r7, #1
 800fd3c:	700a      	strb	r2, [r1, #0]
 800fd3e:	781a      	ldrb	r2, [r3, #0]
 800fd40:	3201      	adds	r2, #1
 800fd42:	701a      	strb	r2, [r3, #0]
 800fd44:	e790      	b.n	800fc68 <_dtoa_r+0x608>
 800fd46:	4ba6      	ldr	r3, [pc, #664]	; (800ffe0 <_dtoa_r+0x980>)
 800fd48:	2200      	movs	r2, #0
 800fd4a:	f7f0 fc7d 	bl	8000648 <__aeabi_dmul>
 800fd4e:	2200      	movs	r2, #0
 800fd50:	2300      	movs	r3, #0
 800fd52:	4606      	mov	r6, r0
 800fd54:	460f      	mov	r7, r1
 800fd56:	f7f0 fedf 	bl	8000b18 <__aeabi_dcmpeq>
 800fd5a:	2800      	cmp	r0, #0
 800fd5c:	d09d      	beq.n	800fc9a <_dtoa_r+0x63a>
 800fd5e:	e7cf      	b.n	800fd00 <_dtoa_r+0x6a0>
 800fd60:	9a08      	ldr	r2, [sp, #32]
 800fd62:	2a00      	cmp	r2, #0
 800fd64:	f000 80d7 	beq.w	800ff16 <_dtoa_r+0x8b6>
 800fd68:	9a06      	ldr	r2, [sp, #24]
 800fd6a:	2a01      	cmp	r2, #1
 800fd6c:	f300 80ba 	bgt.w	800fee4 <_dtoa_r+0x884>
 800fd70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fd72:	2a00      	cmp	r2, #0
 800fd74:	f000 80b2 	beq.w	800fedc <_dtoa_r+0x87c>
 800fd78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fd7c:	9e07      	ldr	r6, [sp, #28]
 800fd7e:	9d04      	ldr	r5, [sp, #16]
 800fd80:	9a04      	ldr	r2, [sp, #16]
 800fd82:	441a      	add	r2, r3
 800fd84:	9204      	str	r2, [sp, #16]
 800fd86:	9a05      	ldr	r2, [sp, #20]
 800fd88:	2101      	movs	r1, #1
 800fd8a:	441a      	add	r2, r3
 800fd8c:	4620      	mov	r0, r4
 800fd8e:	9205      	str	r2, [sp, #20]
 800fd90:	f001 f942 	bl	8011018 <__i2b>
 800fd94:	4607      	mov	r7, r0
 800fd96:	2d00      	cmp	r5, #0
 800fd98:	dd0c      	ble.n	800fdb4 <_dtoa_r+0x754>
 800fd9a:	9b05      	ldr	r3, [sp, #20]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	dd09      	ble.n	800fdb4 <_dtoa_r+0x754>
 800fda0:	42ab      	cmp	r3, r5
 800fda2:	9a04      	ldr	r2, [sp, #16]
 800fda4:	bfa8      	it	ge
 800fda6:	462b      	movge	r3, r5
 800fda8:	1ad2      	subs	r2, r2, r3
 800fdaa:	9204      	str	r2, [sp, #16]
 800fdac:	9a05      	ldr	r2, [sp, #20]
 800fdae:	1aed      	subs	r5, r5, r3
 800fdb0:	1ad3      	subs	r3, r2, r3
 800fdb2:	9305      	str	r3, [sp, #20]
 800fdb4:	9b07      	ldr	r3, [sp, #28]
 800fdb6:	b31b      	cbz	r3, 800fe00 <_dtoa_r+0x7a0>
 800fdb8:	9b08      	ldr	r3, [sp, #32]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	f000 80af 	beq.w	800ff1e <_dtoa_r+0x8be>
 800fdc0:	2e00      	cmp	r6, #0
 800fdc2:	dd13      	ble.n	800fdec <_dtoa_r+0x78c>
 800fdc4:	4639      	mov	r1, r7
 800fdc6:	4632      	mov	r2, r6
 800fdc8:	4620      	mov	r0, r4
 800fdca:	f001 f9e5 	bl	8011198 <__pow5mult>
 800fdce:	ee18 2a10 	vmov	r2, s16
 800fdd2:	4601      	mov	r1, r0
 800fdd4:	4607      	mov	r7, r0
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	f001 f934 	bl	8011044 <__multiply>
 800fddc:	ee18 1a10 	vmov	r1, s16
 800fde0:	4680      	mov	r8, r0
 800fde2:	4620      	mov	r0, r4
 800fde4:	f001 f816 	bl	8010e14 <_Bfree>
 800fde8:	ee08 8a10 	vmov	s16, r8
 800fdec:	9b07      	ldr	r3, [sp, #28]
 800fdee:	1b9a      	subs	r2, r3, r6
 800fdf0:	d006      	beq.n	800fe00 <_dtoa_r+0x7a0>
 800fdf2:	ee18 1a10 	vmov	r1, s16
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	f001 f9ce 	bl	8011198 <__pow5mult>
 800fdfc:	ee08 0a10 	vmov	s16, r0
 800fe00:	2101      	movs	r1, #1
 800fe02:	4620      	mov	r0, r4
 800fe04:	f001 f908 	bl	8011018 <__i2b>
 800fe08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	4606      	mov	r6, r0
 800fe0e:	f340 8088 	ble.w	800ff22 <_dtoa_r+0x8c2>
 800fe12:	461a      	mov	r2, r3
 800fe14:	4601      	mov	r1, r0
 800fe16:	4620      	mov	r0, r4
 800fe18:	f001 f9be 	bl	8011198 <__pow5mult>
 800fe1c:	9b06      	ldr	r3, [sp, #24]
 800fe1e:	2b01      	cmp	r3, #1
 800fe20:	4606      	mov	r6, r0
 800fe22:	f340 8081 	ble.w	800ff28 <_dtoa_r+0x8c8>
 800fe26:	f04f 0800 	mov.w	r8, #0
 800fe2a:	6933      	ldr	r3, [r6, #16]
 800fe2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fe30:	6918      	ldr	r0, [r3, #16]
 800fe32:	f001 f8a1 	bl	8010f78 <__hi0bits>
 800fe36:	f1c0 0020 	rsb	r0, r0, #32
 800fe3a:	9b05      	ldr	r3, [sp, #20]
 800fe3c:	4418      	add	r0, r3
 800fe3e:	f010 001f 	ands.w	r0, r0, #31
 800fe42:	f000 8092 	beq.w	800ff6a <_dtoa_r+0x90a>
 800fe46:	f1c0 0320 	rsb	r3, r0, #32
 800fe4a:	2b04      	cmp	r3, #4
 800fe4c:	f340 808a 	ble.w	800ff64 <_dtoa_r+0x904>
 800fe50:	f1c0 001c 	rsb	r0, r0, #28
 800fe54:	9b04      	ldr	r3, [sp, #16]
 800fe56:	4403      	add	r3, r0
 800fe58:	9304      	str	r3, [sp, #16]
 800fe5a:	9b05      	ldr	r3, [sp, #20]
 800fe5c:	4403      	add	r3, r0
 800fe5e:	4405      	add	r5, r0
 800fe60:	9305      	str	r3, [sp, #20]
 800fe62:	9b04      	ldr	r3, [sp, #16]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	dd07      	ble.n	800fe78 <_dtoa_r+0x818>
 800fe68:	ee18 1a10 	vmov	r1, s16
 800fe6c:	461a      	mov	r2, r3
 800fe6e:	4620      	mov	r0, r4
 800fe70:	f001 f9ec 	bl	801124c <__lshift>
 800fe74:	ee08 0a10 	vmov	s16, r0
 800fe78:	9b05      	ldr	r3, [sp, #20]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	dd05      	ble.n	800fe8a <_dtoa_r+0x82a>
 800fe7e:	4631      	mov	r1, r6
 800fe80:	461a      	mov	r2, r3
 800fe82:	4620      	mov	r0, r4
 800fe84:	f001 f9e2 	bl	801124c <__lshift>
 800fe88:	4606      	mov	r6, r0
 800fe8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d06e      	beq.n	800ff6e <_dtoa_r+0x90e>
 800fe90:	ee18 0a10 	vmov	r0, s16
 800fe94:	4631      	mov	r1, r6
 800fe96:	f001 fa49 	bl	801132c <__mcmp>
 800fe9a:	2800      	cmp	r0, #0
 800fe9c:	da67      	bge.n	800ff6e <_dtoa_r+0x90e>
 800fe9e:	9b00      	ldr	r3, [sp, #0]
 800fea0:	3b01      	subs	r3, #1
 800fea2:	ee18 1a10 	vmov	r1, s16
 800fea6:	9300      	str	r3, [sp, #0]
 800fea8:	220a      	movs	r2, #10
 800feaa:	2300      	movs	r3, #0
 800feac:	4620      	mov	r0, r4
 800feae:	f000 ffd3 	bl	8010e58 <__multadd>
 800feb2:	9b08      	ldr	r3, [sp, #32]
 800feb4:	ee08 0a10 	vmov	s16, r0
 800feb8:	2b00      	cmp	r3, #0
 800feba:	f000 81b1 	beq.w	8010220 <_dtoa_r+0xbc0>
 800febe:	2300      	movs	r3, #0
 800fec0:	4639      	mov	r1, r7
 800fec2:	220a      	movs	r2, #10
 800fec4:	4620      	mov	r0, r4
 800fec6:	f000 ffc7 	bl	8010e58 <__multadd>
 800feca:	9b02      	ldr	r3, [sp, #8]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	4607      	mov	r7, r0
 800fed0:	f300 808e 	bgt.w	800fff0 <_dtoa_r+0x990>
 800fed4:	9b06      	ldr	r3, [sp, #24]
 800fed6:	2b02      	cmp	r3, #2
 800fed8:	dc51      	bgt.n	800ff7e <_dtoa_r+0x91e>
 800feda:	e089      	b.n	800fff0 <_dtoa_r+0x990>
 800fedc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fede:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fee2:	e74b      	b.n	800fd7c <_dtoa_r+0x71c>
 800fee4:	9b03      	ldr	r3, [sp, #12]
 800fee6:	1e5e      	subs	r6, r3, #1
 800fee8:	9b07      	ldr	r3, [sp, #28]
 800feea:	42b3      	cmp	r3, r6
 800feec:	bfbf      	itttt	lt
 800feee:	9b07      	ldrlt	r3, [sp, #28]
 800fef0:	9607      	strlt	r6, [sp, #28]
 800fef2:	1af2      	sublt	r2, r6, r3
 800fef4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800fef6:	bfb6      	itet	lt
 800fef8:	189b      	addlt	r3, r3, r2
 800fefa:	1b9e      	subge	r6, r3, r6
 800fefc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800fefe:	9b03      	ldr	r3, [sp, #12]
 800ff00:	bfb8      	it	lt
 800ff02:	2600      	movlt	r6, #0
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	bfb7      	itett	lt
 800ff08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ff0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ff10:	1a9d      	sublt	r5, r3, r2
 800ff12:	2300      	movlt	r3, #0
 800ff14:	e734      	b.n	800fd80 <_dtoa_r+0x720>
 800ff16:	9e07      	ldr	r6, [sp, #28]
 800ff18:	9d04      	ldr	r5, [sp, #16]
 800ff1a:	9f08      	ldr	r7, [sp, #32]
 800ff1c:	e73b      	b.n	800fd96 <_dtoa_r+0x736>
 800ff1e:	9a07      	ldr	r2, [sp, #28]
 800ff20:	e767      	b.n	800fdf2 <_dtoa_r+0x792>
 800ff22:	9b06      	ldr	r3, [sp, #24]
 800ff24:	2b01      	cmp	r3, #1
 800ff26:	dc18      	bgt.n	800ff5a <_dtoa_r+0x8fa>
 800ff28:	f1ba 0f00 	cmp.w	sl, #0
 800ff2c:	d115      	bne.n	800ff5a <_dtoa_r+0x8fa>
 800ff2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ff32:	b993      	cbnz	r3, 800ff5a <_dtoa_r+0x8fa>
 800ff34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ff38:	0d1b      	lsrs	r3, r3, #20
 800ff3a:	051b      	lsls	r3, r3, #20
 800ff3c:	b183      	cbz	r3, 800ff60 <_dtoa_r+0x900>
 800ff3e:	9b04      	ldr	r3, [sp, #16]
 800ff40:	3301      	adds	r3, #1
 800ff42:	9304      	str	r3, [sp, #16]
 800ff44:	9b05      	ldr	r3, [sp, #20]
 800ff46:	3301      	adds	r3, #1
 800ff48:	9305      	str	r3, [sp, #20]
 800ff4a:	f04f 0801 	mov.w	r8, #1
 800ff4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	f47f af6a 	bne.w	800fe2a <_dtoa_r+0x7ca>
 800ff56:	2001      	movs	r0, #1
 800ff58:	e76f      	b.n	800fe3a <_dtoa_r+0x7da>
 800ff5a:	f04f 0800 	mov.w	r8, #0
 800ff5e:	e7f6      	b.n	800ff4e <_dtoa_r+0x8ee>
 800ff60:	4698      	mov	r8, r3
 800ff62:	e7f4      	b.n	800ff4e <_dtoa_r+0x8ee>
 800ff64:	f43f af7d 	beq.w	800fe62 <_dtoa_r+0x802>
 800ff68:	4618      	mov	r0, r3
 800ff6a:	301c      	adds	r0, #28
 800ff6c:	e772      	b.n	800fe54 <_dtoa_r+0x7f4>
 800ff6e:	9b03      	ldr	r3, [sp, #12]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	dc37      	bgt.n	800ffe4 <_dtoa_r+0x984>
 800ff74:	9b06      	ldr	r3, [sp, #24]
 800ff76:	2b02      	cmp	r3, #2
 800ff78:	dd34      	ble.n	800ffe4 <_dtoa_r+0x984>
 800ff7a:	9b03      	ldr	r3, [sp, #12]
 800ff7c:	9302      	str	r3, [sp, #8]
 800ff7e:	9b02      	ldr	r3, [sp, #8]
 800ff80:	b96b      	cbnz	r3, 800ff9e <_dtoa_r+0x93e>
 800ff82:	4631      	mov	r1, r6
 800ff84:	2205      	movs	r2, #5
 800ff86:	4620      	mov	r0, r4
 800ff88:	f000 ff66 	bl	8010e58 <__multadd>
 800ff8c:	4601      	mov	r1, r0
 800ff8e:	4606      	mov	r6, r0
 800ff90:	ee18 0a10 	vmov	r0, s16
 800ff94:	f001 f9ca 	bl	801132c <__mcmp>
 800ff98:	2800      	cmp	r0, #0
 800ff9a:	f73f adbb 	bgt.w	800fb14 <_dtoa_r+0x4b4>
 800ff9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffa0:	9d01      	ldr	r5, [sp, #4]
 800ffa2:	43db      	mvns	r3, r3
 800ffa4:	9300      	str	r3, [sp, #0]
 800ffa6:	f04f 0800 	mov.w	r8, #0
 800ffaa:	4631      	mov	r1, r6
 800ffac:	4620      	mov	r0, r4
 800ffae:	f000 ff31 	bl	8010e14 <_Bfree>
 800ffb2:	2f00      	cmp	r7, #0
 800ffb4:	f43f aea4 	beq.w	800fd00 <_dtoa_r+0x6a0>
 800ffb8:	f1b8 0f00 	cmp.w	r8, #0
 800ffbc:	d005      	beq.n	800ffca <_dtoa_r+0x96a>
 800ffbe:	45b8      	cmp	r8, r7
 800ffc0:	d003      	beq.n	800ffca <_dtoa_r+0x96a>
 800ffc2:	4641      	mov	r1, r8
 800ffc4:	4620      	mov	r0, r4
 800ffc6:	f000 ff25 	bl	8010e14 <_Bfree>
 800ffca:	4639      	mov	r1, r7
 800ffcc:	4620      	mov	r0, r4
 800ffce:	f000 ff21 	bl	8010e14 <_Bfree>
 800ffd2:	e695      	b.n	800fd00 <_dtoa_r+0x6a0>
 800ffd4:	2600      	movs	r6, #0
 800ffd6:	4637      	mov	r7, r6
 800ffd8:	e7e1      	b.n	800ff9e <_dtoa_r+0x93e>
 800ffda:	9700      	str	r7, [sp, #0]
 800ffdc:	4637      	mov	r7, r6
 800ffde:	e599      	b.n	800fb14 <_dtoa_r+0x4b4>
 800ffe0:	40240000 	.word	0x40240000
 800ffe4:	9b08      	ldr	r3, [sp, #32]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	f000 80ca 	beq.w	8010180 <_dtoa_r+0xb20>
 800ffec:	9b03      	ldr	r3, [sp, #12]
 800ffee:	9302      	str	r3, [sp, #8]
 800fff0:	2d00      	cmp	r5, #0
 800fff2:	dd05      	ble.n	8010000 <_dtoa_r+0x9a0>
 800fff4:	4639      	mov	r1, r7
 800fff6:	462a      	mov	r2, r5
 800fff8:	4620      	mov	r0, r4
 800fffa:	f001 f927 	bl	801124c <__lshift>
 800fffe:	4607      	mov	r7, r0
 8010000:	f1b8 0f00 	cmp.w	r8, #0
 8010004:	d05b      	beq.n	80100be <_dtoa_r+0xa5e>
 8010006:	6879      	ldr	r1, [r7, #4]
 8010008:	4620      	mov	r0, r4
 801000a:	f000 fec3 	bl	8010d94 <_Balloc>
 801000e:	4605      	mov	r5, r0
 8010010:	b928      	cbnz	r0, 801001e <_dtoa_r+0x9be>
 8010012:	4b87      	ldr	r3, [pc, #540]	; (8010230 <_dtoa_r+0xbd0>)
 8010014:	4602      	mov	r2, r0
 8010016:	f240 21ea 	movw	r1, #746	; 0x2ea
 801001a:	f7ff bb3b 	b.w	800f694 <_dtoa_r+0x34>
 801001e:	693a      	ldr	r2, [r7, #16]
 8010020:	3202      	adds	r2, #2
 8010022:	0092      	lsls	r2, r2, #2
 8010024:	f107 010c 	add.w	r1, r7, #12
 8010028:	300c      	adds	r0, #12
 801002a:	f7fd fe01 	bl	800dc30 <memcpy>
 801002e:	2201      	movs	r2, #1
 8010030:	4629      	mov	r1, r5
 8010032:	4620      	mov	r0, r4
 8010034:	f001 f90a 	bl	801124c <__lshift>
 8010038:	9b01      	ldr	r3, [sp, #4]
 801003a:	f103 0901 	add.w	r9, r3, #1
 801003e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010042:	4413      	add	r3, r2
 8010044:	9305      	str	r3, [sp, #20]
 8010046:	f00a 0301 	and.w	r3, sl, #1
 801004a:	46b8      	mov	r8, r7
 801004c:	9304      	str	r3, [sp, #16]
 801004e:	4607      	mov	r7, r0
 8010050:	4631      	mov	r1, r6
 8010052:	ee18 0a10 	vmov	r0, s16
 8010056:	f7ff fa75 	bl	800f544 <quorem>
 801005a:	4641      	mov	r1, r8
 801005c:	9002      	str	r0, [sp, #8]
 801005e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010062:	ee18 0a10 	vmov	r0, s16
 8010066:	f001 f961 	bl	801132c <__mcmp>
 801006a:	463a      	mov	r2, r7
 801006c:	9003      	str	r0, [sp, #12]
 801006e:	4631      	mov	r1, r6
 8010070:	4620      	mov	r0, r4
 8010072:	f001 f977 	bl	8011364 <__mdiff>
 8010076:	68c2      	ldr	r2, [r0, #12]
 8010078:	f109 3bff 	add.w	fp, r9, #4294967295
 801007c:	4605      	mov	r5, r0
 801007e:	bb02      	cbnz	r2, 80100c2 <_dtoa_r+0xa62>
 8010080:	4601      	mov	r1, r0
 8010082:	ee18 0a10 	vmov	r0, s16
 8010086:	f001 f951 	bl	801132c <__mcmp>
 801008a:	4602      	mov	r2, r0
 801008c:	4629      	mov	r1, r5
 801008e:	4620      	mov	r0, r4
 8010090:	9207      	str	r2, [sp, #28]
 8010092:	f000 febf 	bl	8010e14 <_Bfree>
 8010096:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801009a:	ea43 0102 	orr.w	r1, r3, r2
 801009e:	9b04      	ldr	r3, [sp, #16]
 80100a0:	430b      	orrs	r3, r1
 80100a2:	464d      	mov	r5, r9
 80100a4:	d10f      	bne.n	80100c6 <_dtoa_r+0xa66>
 80100a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80100aa:	d02a      	beq.n	8010102 <_dtoa_r+0xaa2>
 80100ac:	9b03      	ldr	r3, [sp, #12]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	dd02      	ble.n	80100b8 <_dtoa_r+0xa58>
 80100b2:	9b02      	ldr	r3, [sp, #8]
 80100b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80100b8:	f88b a000 	strb.w	sl, [fp]
 80100bc:	e775      	b.n	800ffaa <_dtoa_r+0x94a>
 80100be:	4638      	mov	r0, r7
 80100c0:	e7ba      	b.n	8010038 <_dtoa_r+0x9d8>
 80100c2:	2201      	movs	r2, #1
 80100c4:	e7e2      	b.n	801008c <_dtoa_r+0xa2c>
 80100c6:	9b03      	ldr	r3, [sp, #12]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	db04      	blt.n	80100d6 <_dtoa_r+0xa76>
 80100cc:	9906      	ldr	r1, [sp, #24]
 80100ce:	430b      	orrs	r3, r1
 80100d0:	9904      	ldr	r1, [sp, #16]
 80100d2:	430b      	orrs	r3, r1
 80100d4:	d122      	bne.n	801011c <_dtoa_r+0xabc>
 80100d6:	2a00      	cmp	r2, #0
 80100d8:	ddee      	ble.n	80100b8 <_dtoa_r+0xa58>
 80100da:	ee18 1a10 	vmov	r1, s16
 80100de:	2201      	movs	r2, #1
 80100e0:	4620      	mov	r0, r4
 80100e2:	f001 f8b3 	bl	801124c <__lshift>
 80100e6:	4631      	mov	r1, r6
 80100e8:	ee08 0a10 	vmov	s16, r0
 80100ec:	f001 f91e 	bl	801132c <__mcmp>
 80100f0:	2800      	cmp	r0, #0
 80100f2:	dc03      	bgt.n	80100fc <_dtoa_r+0xa9c>
 80100f4:	d1e0      	bne.n	80100b8 <_dtoa_r+0xa58>
 80100f6:	f01a 0f01 	tst.w	sl, #1
 80100fa:	d0dd      	beq.n	80100b8 <_dtoa_r+0xa58>
 80100fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010100:	d1d7      	bne.n	80100b2 <_dtoa_r+0xa52>
 8010102:	2339      	movs	r3, #57	; 0x39
 8010104:	f88b 3000 	strb.w	r3, [fp]
 8010108:	462b      	mov	r3, r5
 801010a:	461d      	mov	r5, r3
 801010c:	3b01      	subs	r3, #1
 801010e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010112:	2a39      	cmp	r2, #57	; 0x39
 8010114:	d071      	beq.n	80101fa <_dtoa_r+0xb9a>
 8010116:	3201      	adds	r2, #1
 8010118:	701a      	strb	r2, [r3, #0]
 801011a:	e746      	b.n	800ffaa <_dtoa_r+0x94a>
 801011c:	2a00      	cmp	r2, #0
 801011e:	dd07      	ble.n	8010130 <_dtoa_r+0xad0>
 8010120:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010124:	d0ed      	beq.n	8010102 <_dtoa_r+0xaa2>
 8010126:	f10a 0301 	add.w	r3, sl, #1
 801012a:	f88b 3000 	strb.w	r3, [fp]
 801012e:	e73c      	b.n	800ffaa <_dtoa_r+0x94a>
 8010130:	9b05      	ldr	r3, [sp, #20]
 8010132:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010136:	4599      	cmp	r9, r3
 8010138:	d047      	beq.n	80101ca <_dtoa_r+0xb6a>
 801013a:	ee18 1a10 	vmov	r1, s16
 801013e:	2300      	movs	r3, #0
 8010140:	220a      	movs	r2, #10
 8010142:	4620      	mov	r0, r4
 8010144:	f000 fe88 	bl	8010e58 <__multadd>
 8010148:	45b8      	cmp	r8, r7
 801014a:	ee08 0a10 	vmov	s16, r0
 801014e:	f04f 0300 	mov.w	r3, #0
 8010152:	f04f 020a 	mov.w	r2, #10
 8010156:	4641      	mov	r1, r8
 8010158:	4620      	mov	r0, r4
 801015a:	d106      	bne.n	801016a <_dtoa_r+0xb0a>
 801015c:	f000 fe7c 	bl	8010e58 <__multadd>
 8010160:	4680      	mov	r8, r0
 8010162:	4607      	mov	r7, r0
 8010164:	f109 0901 	add.w	r9, r9, #1
 8010168:	e772      	b.n	8010050 <_dtoa_r+0x9f0>
 801016a:	f000 fe75 	bl	8010e58 <__multadd>
 801016e:	4639      	mov	r1, r7
 8010170:	4680      	mov	r8, r0
 8010172:	2300      	movs	r3, #0
 8010174:	220a      	movs	r2, #10
 8010176:	4620      	mov	r0, r4
 8010178:	f000 fe6e 	bl	8010e58 <__multadd>
 801017c:	4607      	mov	r7, r0
 801017e:	e7f1      	b.n	8010164 <_dtoa_r+0xb04>
 8010180:	9b03      	ldr	r3, [sp, #12]
 8010182:	9302      	str	r3, [sp, #8]
 8010184:	9d01      	ldr	r5, [sp, #4]
 8010186:	ee18 0a10 	vmov	r0, s16
 801018a:	4631      	mov	r1, r6
 801018c:	f7ff f9da 	bl	800f544 <quorem>
 8010190:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010194:	9b01      	ldr	r3, [sp, #4]
 8010196:	f805 ab01 	strb.w	sl, [r5], #1
 801019a:	1aea      	subs	r2, r5, r3
 801019c:	9b02      	ldr	r3, [sp, #8]
 801019e:	4293      	cmp	r3, r2
 80101a0:	dd09      	ble.n	80101b6 <_dtoa_r+0xb56>
 80101a2:	ee18 1a10 	vmov	r1, s16
 80101a6:	2300      	movs	r3, #0
 80101a8:	220a      	movs	r2, #10
 80101aa:	4620      	mov	r0, r4
 80101ac:	f000 fe54 	bl	8010e58 <__multadd>
 80101b0:	ee08 0a10 	vmov	s16, r0
 80101b4:	e7e7      	b.n	8010186 <_dtoa_r+0xb26>
 80101b6:	9b02      	ldr	r3, [sp, #8]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	bfc8      	it	gt
 80101bc:	461d      	movgt	r5, r3
 80101be:	9b01      	ldr	r3, [sp, #4]
 80101c0:	bfd8      	it	le
 80101c2:	2501      	movle	r5, #1
 80101c4:	441d      	add	r5, r3
 80101c6:	f04f 0800 	mov.w	r8, #0
 80101ca:	ee18 1a10 	vmov	r1, s16
 80101ce:	2201      	movs	r2, #1
 80101d0:	4620      	mov	r0, r4
 80101d2:	f001 f83b 	bl	801124c <__lshift>
 80101d6:	4631      	mov	r1, r6
 80101d8:	ee08 0a10 	vmov	s16, r0
 80101dc:	f001 f8a6 	bl	801132c <__mcmp>
 80101e0:	2800      	cmp	r0, #0
 80101e2:	dc91      	bgt.n	8010108 <_dtoa_r+0xaa8>
 80101e4:	d102      	bne.n	80101ec <_dtoa_r+0xb8c>
 80101e6:	f01a 0f01 	tst.w	sl, #1
 80101ea:	d18d      	bne.n	8010108 <_dtoa_r+0xaa8>
 80101ec:	462b      	mov	r3, r5
 80101ee:	461d      	mov	r5, r3
 80101f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80101f4:	2a30      	cmp	r2, #48	; 0x30
 80101f6:	d0fa      	beq.n	80101ee <_dtoa_r+0xb8e>
 80101f8:	e6d7      	b.n	800ffaa <_dtoa_r+0x94a>
 80101fa:	9a01      	ldr	r2, [sp, #4]
 80101fc:	429a      	cmp	r2, r3
 80101fe:	d184      	bne.n	801010a <_dtoa_r+0xaaa>
 8010200:	9b00      	ldr	r3, [sp, #0]
 8010202:	3301      	adds	r3, #1
 8010204:	9300      	str	r3, [sp, #0]
 8010206:	2331      	movs	r3, #49	; 0x31
 8010208:	7013      	strb	r3, [r2, #0]
 801020a:	e6ce      	b.n	800ffaa <_dtoa_r+0x94a>
 801020c:	4b09      	ldr	r3, [pc, #36]	; (8010234 <_dtoa_r+0xbd4>)
 801020e:	f7ff ba95 	b.w	800f73c <_dtoa_r+0xdc>
 8010212:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010214:	2b00      	cmp	r3, #0
 8010216:	f47f aa6e 	bne.w	800f6f6 <_dtoa_r+0x96>
 801021a:	4b07      	ldr	r3, [pc, #28]	; (8010238 <_dtoa_r+0xbd8>)
 801021c:	f7ff ba8e 	b.w	800f73c <_dtoa_r+0xdc>
 8010220:	9b02      	ldr	r3, [sp, #8]
 8010222:	2b00      	cmp	r3, #0
 8010224:	dcae      	bgt.n	8010184 <_dtoa_r+0xb24>
 8010226:	9b06      	ldr	r3, [sp, #24]
 8010228:	2b02      	cmp	r3, #2
 801022a:	f73f aea8 	bgt.w	800ff7e <_dtoa_r+0x91e>
 801022e:	e7a9      	b.n	8010184 <_dtoa_r+0xb24>
 8010230:	08013760 	.word	0x08013760
 8010234:	08013568 	.word	0x08013568
 8010238:	080136e1 	.word	0x080136e1

0801023c <__sflush_r>:
 801023c:	898a      	ldrh	r2, [r1, #12]
 801023e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010242:	4605      	mov	r5, r0
 8010244:	0710      	lsls	r0, r2, #28
 8010246:	460c      	mov	r4, r1
 8010248:	d458      	bmi.n	80102fc <__sflush_r+0xc0>
 801024a:	684b      	ldr	r3, [r1, #4]
 801024c:	2b00      	cmp	r3, #0
 801024e:	dc05      	bgt.n	801025c <__sflush_r+0x20>
 8010250:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010252:	2b00      	cmp	r3, #0
 8010254:	dc02      	bgt.n	801025c <__sflush_r+0x20>
 8010256:	2000      	movs	r0, #0
 8010258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801025c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801025e:	2e00      	cmp	r6, #0
 8010260:	d0f9      	beq.n	8010256 <__sflush_r+0x1a>
 8010262:	2300      	movs	r3, #0
 8010264:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010268:	682f      	ldr	r7, [r5, #0]
 801026a:	602b      	str	r3, [r5, #0]
 801026c:	d032      	beq.n	80102d4 <__sflush_r+0x98>
 801026e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010270:	89a3      	ldrh	r3, [r4, #12]
 8010272:	075a      	lsls	r2, r3, #29
 8010274:	d505      	bpl.n	8010282 <__sflush_r+0x46>
 8010276:	6863      	ldr	r3, [r4, #4]
 8010278:	1ac0      	subs	r0, r0, r3
 801027a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801027c:	b10b      	cbz	r3, 8010282 <__sflush_r+0x46>
 801027e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010280:	1ac0      	subs	r0, r0, r3
 8010282:	2300      	movs	r3, #0
 8010284:	4602      	mov	r2, r0
 8010286:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010288:	6a21      	ldr	r1, [r4, #32]
 801028a:	4628      	mov	r0, r5
 801028c:	47b0      	blx	r6
 801028e:	1c43      	adds	r3, r0, #1
 8010290:	89a3      	ldrh	r3, [r4, #12]
 8010292:	d106      	bne.n	80102a2 <__sflush_r+0x66>
 8010294:	6829      	ldr	r1, [r5, #0]
 8010296:	291d      	cmp	r1, #29
 8010298:	d82c      	bhi.n	80102f4 <__sflush_r+0xb8>
 801029a:	4a2a      	ldr	r2, [pc, #168]	; (8010344 <__sflush_r+0x108>)
 801029c:	40ca      	lsrs	r2, r1
 801029e:	07d6      	lsls	r6, r2, #31
 80102a0:	d528      	bpl.n	80102f4 <__sflush_r+0xb8>
 80102a2:	2200      	movs	r2, #0
 80102a4:	6062      	str	r2, [r4, #4]
 80102a6:	04d9      	lsls	r1, r3, #19
 80102a8:	6922      	ldr	r2, [r4, #16]
 80102aa:	6022      	str	r2, [r4, #0]
 80102ac:	d504      	bpl.n	80102b8 <__sflush_r+0x7c>
 80102ae:	1c42      	adds	r2, r0, #1
 80102b0:	d101      	bne.n	80102b6 <__sflush_r+0x7a>
 80102b2:	682b      	ldr	r3, [r5, #0]
 80102b4:	b903      	cbnz	r3, 80102b8 <__sflush_r+0x7c>
 80102b6:	6560      	str	r0, [r4, #84]	; 0x54
 80102b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102ba:	602f      	str	r7, [r5, #0]
 80102bc:	2900      	cmp	r1, #0
 80102be:	d0ca      	beq.n	8010256 <__sflush_r+0x1a>
 80102c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102c4:	4299      	cmp	r1, r3
 80102c6:	d002      	beq.n	80102ce <__sflush_r+0x92>
 80102c8:	4628      	mov	r0, r5
 80102ca:	f001 fa3b 	bl	8011744 <_free_r>
 80102ce:	2000      	movs	r0, #0
 80102d0:	6360      	str	r0, [r4, #52]	; 0x34
 80102d2:	e7c1      	b.n	8010258 <__sflush_r+0x1c>
 80102d4:	6a21      	ldr	r1, [r4, #32]
 80102d6:	2301      	movs	r3, #1
 80102d8:	4628      	mov	r0, r5
 80102da:	47b0      	blx	r6
 80102dc:	1c41      	adds	r1, r0, #1
 80102de:	d1c7      	bne.n	8010270 <__sflush_r+0x34>
 80102e0:	682b      	ldr	r3, [r5, #0]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d0c4      	beq.n	8010270 <__sflush_r+0x34>
 80102e6:	2b1d      	cmp	r3, #29
 80102e8:	d001      	beq.n	80102ee <__sflush_r+0xb2>
 80102ea:	2b16      	cmp	r3, #22
 80102ec:	d101      	bne.n	80102f2 <__sflush_r+0xb6>
 80102ee:	602f      	str	r7, [r5, #0]
 80102f0:	e7b1      	b.n	8010256 <__sflush_r+0x1a>
 80102f2:	89a3      	ldrh	r3, [r4, #12]
 80102f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102f8:	81a3      	strh	r3, [r4, #12]
 80102fa:	e7ad      	b.n	8010258 <__sflush_r+0x1c>
 80102fc:	690f      	ldr	r7, [r1, #16]
 80102fe:	2f00      	cmp	r7, #0
 8010300:	d0a9      	beq.n	8010256 <__sflush_r+0x1a>
 8010302:	0793      	lsls	r3, r2, #30
 8010304:	680e      	ldr	r6, [r1, #0]
 8010306:	bf08      	it	eq
 8010308:	694b      	ldreq	r3, [r1, #20]
 801030a:	600f      	str	r7, [r1, #0]
 801030c:	bf18      	it	ne
 801030e:	2300      	movne	r3, #0
 8010310:	eba6 0807 	sub.w	r8, r6, r7
 8010314:	608b      	str	r3, [r1, #8]
 8010316:	f1b8 0f00 	cmp.w	r8, #0
 801031a:	dd9c      	ble.n	8010256 <__sflush_r+0x1a>
 801031c:	6a21      	ldr	r1, [r4, #32]
 801031e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010320:	4643      	mov	r3, r8
 8010322:	463a      	mov	r2, r7
 8010324:	4628      	mov	r0, r5
 8010326:	47b0      	blx	r6
 8010328:	2800      	cmp	r0, #0
 801032a:	dc06      	bgt.n	801033a <__sflush_r+0xfe>
 801032c:	89a3      	ldrh	r3, [r4, #12]
 801032e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010332:	81a3      	strh	r3, [r4, #12]
 8010334:	f04f 30ff 	mov.w	r0, #4294967295
 8010338:	e78e      	b.n	8010258 <__sflush_r+0x1c>
 801033a:	4407      	add	r7, r0
 801033c:	eba8 0800 	sub.w	r8, r8, r0
 8010340:	e7e9      	b.n	8010316 <__sflush_r+0xda>
 8010342:	bf00      	nop
 8010344:	20400001 	.word	0x20400001

08010348 <_fflush_r>:
 8010348:	b538      	push	{r3, r4, r5, lr}
 801034a:	690b      	ldr	r3, [r1, #16]
 801034c:	4605      	mov	r5, r0
 801034e:	460c      	mov	r4, r1
 8010350:	b913      	cbnz	r3, 8010358 <_fflush_r+0x10>
 8010352:	2500      	movs	r5, #0
 8010354:	4628      	mov	r0, r5
 8010356:	bd38      	pop	{r3, r4, r5, pc}
 8010358:	b118      	cbz	r0, 8010362 <_fflush_r+0x1a>
 801035a:	6983      	ldr	r3, [r0, #24]
 801035c:	b90b      	cbnz	r3, 8010362 <_fflush_r+0x1a>
 801035e:	f000 f887 	bl	8010470 <__sinit>
 8010362:	4b14      	ldr	r3, [pc, #80]	; (80103b4 <_fflush_r+0x6c>)
 8010364:	429c      	cmp	r4, r3
 8010366:	d11b      	bne.n	80103a0 <_fflush_r+0x58>
 8010368:	686c      	ldr	r4, [r5, #4]
 801036a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d0ef      	beq.n	8010352 <_fflush_r+0xa>
 8010372:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010374:	07d0      	lsls	r0, r2, #31
 8010376:	d404      	bmi.n	8010382 <_fflush_r+0x3a>
 8010378:	0599      	lsls	r1, r3, #22
 801037a:	d402      	bmi.n	8010382 <_fflush_r+0x3a>
 801037c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801037e:	f000 fc88 	bl	8010c92 <__retarget_lock_acquire_recursive>
 8010382:	4628      	mov	r0, r5
 8010384:	4621      	mov	r1, r4
 8010386:	f7ff ff59 	bl	801023c <__sflush_r>
 801038a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801038c:	07da      	lsls	r2, r3, #31
 801038e:	4605      	mov	r5, r0
 8010390:	d4e0      	bmi.n	8010354 <_fflush_r+0xc>
 8010392:	89a3      	ldrh	r3, [r4, #12]
 8010394:	059b      	lsls	r3, r3, #22
 8010396:	d4dd      	bmi.n	8010354 <_fflush_r+0xc>
 8010398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801039a:	f000 fc7b 	bl	8010c94 <__retarget_lock_release_recursive>
 801039e:	e7d9      	b.n	8010354 <_fflush_r+0xc>
 80103a0:	4b05      	ldr	r3, [pc, #20]	; (80103b8 <_fflush_r+0x70>)
 80103a2:	429c      	cmp	r4, r3
 80103a4:	d101      	bne.n	80103aa <_fflush_r+0x62>
 80103a6:	68ac      	ldr	r4, [r5, #8]
 80103a8:	e7df      	b.n	801036a <_fflush_r+0x22>
 80103aa:	4b04      	ldr	r3, [pc, #16]	; (80103bc <_fflush_r+0x74>)
 80103ac:	429c      	cmp	r4, r3
 80103ae:	bf08      	it	eq
 80103b0:	68ec      	ldreq	r4, [r5, #12]
 80103b2:	e7da      	b.n	801036a <_fflush_r+0x22>
 80103b4:	08013794 	.word	0x08013794
 80103b8:	080137b4 	.word	0x080137b4
 80103bc:	08013774 	.word	0x08013774

080103c0 <std>:
 80103c0:	2300      	movs	r3, #0
 80103c2:	b510      	push	{r4, lr}
 80103c4:	4604      	mov	r4, r0
 80103c6:	e9c0 3300 	strd	r3, r3, [r0]
 80103ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80103ce:	6083      	str	r3, [r0, #8]
 80103d0:	8181      	strh	r1, [r0, #12]
 80103d2:	6643      	str	r3, [r0, #100]	; 0x64
 80103d4:	81c2      	strh	r2, [r0, #14]
 80103d6:	6183      	str	r3, [r0, #24]
 80103d8:	4619      	mov	r1, r3
 80103da:	2208      	movs	r2, #8
 80103dc:	305c      	adds	r0, #92	; 0x5c
 80103de:	f7fd fc35 	bl	800dc4c <memset>
 80103e2:	4b05      	ldr	r3, [pc, #20]	; (80103f8 <std+0x38>)
 80103e4:	6263      	str	r3, [r4, #36]	; 0x24
 80103e6:	4b05      	ldr	r3, [pc, #20]	; (80103fc <std+0x3c>)
 80103e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80103ea:	4b05      	ldr	r3, [pc, #20]	; (8010400 <std+0x40>)
 80103ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80103ee:	4b05      	ldr	r3, [pc, #20]	; (8010404 <std+0x44>)
 80103f0:	6224      	str	r4, [r4, #32]
 80103f2:	6323      	str	r3, [r4, #48]	; 0x30
 80103f4:	bd10      	pop	{r4, pc}
 80103f6:	bf00      	nop
 80103f8:	08011be9 	.word	0x08011be9
 80103fc:	08011c0b 	.word	0x08011c0b
 8010400:	08011c43 	.word	0x08011c43
 8010404:	08011c67 	.word	0x08011c67

08010408 <_cleanup_r>:
 8010408:	4901      	ldr	r1, [pc, #4]	; (8010410 <_cleanup_r+0x8>)
 801040a:	f000 b8af 	b.w	801056c <_fwalk_reent>
 801040e:	bf00      	nop
 8010410:	08010349 	.word	0x08010349

08010414 <__sfmoreglue>:
 8010414:	b570      	push	{r4, r5, r6, lr}
 8010416:	2268      	movs	r2, #104	; 0x68
 8010418:	1e4d      	subs	r5, r1, #1
 801041a:	4355      	muls	r5, r2
 801041c:	460e      	mov	r6, r1
 801041e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010422:	f001 f9fb 	bl	801181c <_malloc_r>
 8010426:	4604      	mov	r4, r0
 8010428:	b140      	cbz	r0, 801043c <__sfmoreglue+0x28>
 801042a:	2100      	movs	r1, #0
 801042c:	e9c0 1600 	strd	r1, r6, [r0]
 8010430:	300c      	adds	r0, #12
 8010432:	60a0      	str	r0, [r4, #8]
 8010434:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010438:	f7fd fc08 	bl	800dc4c <memset>
 801043c:	4620      	mov	r0, r4
 801043e:	bd70      	pop	{r4, r5, r6, pc}

08010440 <__sfp_lock_acquire>:
 8010440:	4801      	ldr	r0, [pc, #4]	; (8010448 <__sfp_lock_acquire+0x8>)
 8010442:	f000 bc26 	b.w	8010c92 <__retarget_lock_acquire_recursive>
 8010446:	bf00      	nop
 8010448:	20005185 	.word	0x20005185

0801044c <__sfp_lock_release>:
 801044c:	4801      	ldr	r0, [pc, #4]	; (8010454 <__sfp_lock_release+0x8>)
 801044e:	f000 bc21 	b.w	8010c94 <__retarget_lock_release_recursive>
 8010452:	bf00      	nop
 8010454:	20005185 	.word	0x20005185

08010458 <__sinit_lock_acquire>:
 8010458:	4801      	ldr	r0, [pc, #4]	; (8010460 <__sinit_lock_acquire+0x8>)
 801045a:	f000 bc1a 	b.w	8010c92 <__retarget_lock_acquire_recursive>
 801045e:	bf00      	nop
 8010460:	20005186 	.word	0x20005186

08010464 <__sinit_lock_release>:
 8010464:	4801      	ldr	r0, [pc, #4]	; (801046c <__sinit_lock_release+0x8>)
 8010466:	f000 bc15 	b.w	8010c94 <__retarget_lock_release_recursive>
 801046a:	bf00      	nop
 801046c:	20005186 	.word	0x20005186

08010470 <__sinit>:
 8010470:	b510      	push	{r4, lr}
 8010472:	4604      	mov	r4, r0
 8010474:	f7ff fff0 	bl	8010458 <__sinit_lock_acquire>
 8010478:	69a3      	ldr	r3, [r4, #24]
 801047a:	b11b      	cbz	r3, 8010484 <__sinit+0x14>
 801047c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010480:	f7ff bff0 	b.w	8010464 <__sinit_lock_release>
 8010484:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010488:	6523      	str	r3, [r4, #80]	; 0x50
 801048a:	4b13      	ldr	r3, [pc, #76]	; (80104d8 <__sinit+0x68>)
 801048c:	4a13      	ldr	r2, [pc, #76]	; (80104dc <__sinit+0x6c>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	62a2      	str	r2, [r4, #40]	; 0x28
 8010492:	42a3      	cmp	r3, r4
 8010494:	bf04      	itt	eq
 8010496:	2301      	moveq	r3, #1
 8010498:	61a3      	streq	r3, [r4, #24]
 801049a:	4620      	mov	r0, r4
 801049c:	f000 f820 	bl	80104e0 <__sfp>
 80104a0:	6060      	str	r0, [r4, #4]
 80104a2:	4620      	mov	r0, r4
 80104a4:	f000 f81c 	bl	80104e0 <__sfp>
 80104a8:	60a0      	str	r0, [r4, #8]
 80104aa:	4620      	mov	r0, r4
 80104ac:	f000 f818 	bl	80104e0 <__sfp>
 80104b0:	2200      	movs	r2, #0
 80104b2:	60e0      	str	r0, [r4, #12]
 80104b4:	2104      	movs	r1, #4
 80104b6:	6860      	ldr	r0, [r4, #4]
 80104b8:	f7ff ff82 	bl	80103c0 <std>
 80104bc:	68a0      	ldr	r0, [r4, #8]
 80104be:	2201      	movs	r2, #1
 80104c0:	2109      	movs	r1, #9
 80104c2:	f7ff ff7d 	bl	80103c0 <std>
 80104c6:	68e0      	ldr	r0, [r4, #12]
 80104c8:	2202      	movs	r2, #2
 80104ca:	2112      	movs	r1, #18
 80104cc:	f7ff ff78 	bl	80103c0 <std>
 80104d0:	2301      	movs	r3, #1
 80104d2:	61a3      	str	r3, [r4, #24]
 80104d4:	e7d2      	b.n	801047c <__sinit+0xc>
 80104d6:	bf00      	nop
 80104d8:	08013554 	.word	0x08013554
 80104dc:	08010409 	.word	0x08010409

080104e0 <__sfp>:
 80104e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104e2:	4607      	mov	r7, r0
 80104e4:	f7ff ffac 	bl	8010440 <__sfp_lock_acquire>
 80104e8:	4b1e      	ldr	r3, [pc, #120]	; (8010564 <__sfp+0x84>)
 80104ea:	681e      	ldr	r6, [r3, #0]
 80104ec:	69b3      	ldr	r3, [r6, #24]
 80104ee:	b913      	cbnz	r3, 80104f6 <__sfp+0x16>
 80104f0:	4630      	mov	r0, r6
 80104f2:	f7ff ffbd 	bl	8010470 <__sinit>
 80104f6:	3648      	adds	r6, #72	; 0x48
 80104f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80104fc:	3b01      	subs	r3, #1
 80104fe:	d503      	bpl.n	8010508 <__sfp+0x28>
 8010500:	6833      	ldr	r3, [r6, #0]
 8010502:	b30b      	cbz	r3, 8010548 <__sfp+0x68>
 8010504:	6836      	ldr	r6, [r6, #0]
 8010506:	e7f7      	b.n	80104f8 <__sfp+0x18>
 8010508:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801050c:	b9d5      	cbnz	r5, 8010544 <__sfp+0x64>
 801050e:	4b16      	ldr	r3, [pc, #88]	; (8010568 <__sfp+0x88>)
 8010510:	60e3      	str	r3, [r4, #12]
 8010512:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010516:	6665      	str	r5, [r4, #100]	; 0x64
 8010518:	f000 fbba 	bl	8010c90 <__retarget_lock_init_recursive>
 801051c:	f7ff ff96 	bl	801044c <__sfp_lock_release>
 8010520:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010524:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010528:	6025      	str	r5, [r4, #0]
 801052a:	61a5      	str	r5, [r4, #24]
 801052c:	2208      	movs	r2, #8
 801052e:	4629      	mov	r1, r5
 8010530:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010534:	f7fd fb8a 	bl	800dc4c <memset>
 8010538:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801053c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010540:	4620      	mov	r0, r4
 8010542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010544:	3468      	adds	r4, #104	; 0x68
 8010546:	e7d9      	b.n	80104fc <__sfp+0x1c>
 8010548:	2104      	movs	r1, #4
 801054a:	4638      	mov	r0, r7
 801054c:	f7ff ff62 	bl	8010414 <__sfmoreglue>
 8010550:	4604      	mov	r4, r0
 8010552:	6030      	str	r0, [r6, #0]
 8010554:	2800      	cmp	r0, #0
 8010556:	d1d5      	bne.n	8010504 <__sfp+0x24>
 8010558:	f7ff ff78 	bl	801044c <__sfp_lock_release>
 801055c:	230c      	movs	r3, #12
 801055e:	603b      	str	r3, [r7, #0]
 8010560:	e7ee      	b.n	8010540 <__sfp+0x60>
 8010562:	bf00      	nop
 8010564:	08013554 	.word	0x08013554
 8010568:	ffff0001 	.word	0xffff0001

0801056c <_fwalk_reent>:
 801056c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010570:	4606      	mov	r6, r0
 8010572:	4688      	mov	r8, r1
 8010574:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010578:	2700      	movs	r7, #0
 801057a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801057e:	f1b9 0901 	subs.w	r9, r9, #1
 8010582:	d505      	bpl.n	8010590 <_fwalk_reent+0x24>
 8010584:	6824      	ldr	r4, [r4, #0]
 8010586:	2c00      	cmp	r4, #0
 8010588:	d1f7      	bne.n	801057a <_fwalk_reent+0xe>
 801058a:	4638      	mov	r0, r7
 801058c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010590:	89ab      	ldrh	r3, [r5, #12]
 8010592:	2b01      	cmp	r3, #1
 8010594:	d907      	bls.n	80105a6 <_fwalk_reent+0x3a>
 8010596:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801059a:	3301      	adds	r3, #1
 801059c:	d003      	beq.n	80105a6 <_fwalk_reent+0x3a>
 801059e:	4629      	mov	r1, r5
 80105a0:	4630      	mov	r0, r6
 80105a2:	47c0      	blx	r8
 80105a4:	4307      	orrs	r7, r0
 80105a6:	3568      	adds	r5, #104	; 0x68
 80105a8:	e7e9      	b.n	801057e <_fwalk_reent+0x12>

080105aa <rshift>:
 80105aa:	6903      	ldr	r3, [r0, #16]
 80105ac:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80105b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80105b4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80105b8:	f100 0414 	add.w	r4, r0, #20
 80105bc:	dd45      	ble.n	801064a <rshift+0xa0>
 80105be:	f011 011f 	ands.w	r1, r1, #31
 80105c2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80105c6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80105ca:	d10c      	bne.n	80105e6 <rshift+0x3c>
 80105cc:	f100 0710 	add.w	r7, r0, #16
 80105d0:	4629      	mov	r1, r5
 80105d2:	42b1      	cmp	r1, r6
 80105d4:	d334      	bcc.n	8010640 <rshift+0x96>
 80105d6:	1a9b      	subs	r3, r3, r2
 80105d8:	009b      	lsls	r3, r3, #2
 80105da:	1eea      	subs	r2, r5, #3
 80105dc:	4296      	cmp	r6, r2
 80105de:	bf38      	it	cc
 80105e0:	2300      	movcc	r3, #0
 80105e2:	4423      	add	r3, r4
 80105e4:	e015      	b.n	8010612 <rshift+0x68>
 80105e6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80105ea:	f1c1 0820 	rsb	r8, r1, #32
 80105ee:	40cf      	lsrs	r7, r1
 80105f0:	f105 0e04 	add.w	lr, r5, #4
 80105f4:	46a1      	mov	r9, r4
 80105f6:	4576      	cmp	r6, lr
 80105f8:	46f4      	mov	ip, lr
 80105fa:	d815      	bhi.n	8010628 <rshift+0x7e>
 80105fc:	1a9a      	subs	r2, r3, r2
 80105fe:	0092      	lsls	r2, r2, #2
 8010600:	3a04      	subs	r2, #4
 8010602:	3501      	adds	r5, #1
 8010604:	42ae      	cmp	r6, r5
 8010606:	bf38      	it	cc
 8010608:	2200      	movcc	r2, #0
 801060a:	18a3      	adds	r3, r4, r2
 801060c:	50a7      	str	r7, [r4, r2]
 801060e:	b107      	cbz	r7, 8010612 <rshift+0x68>
 8010610:	3304      	adds	r3, #4
 8010612:	1b1a      	subs	r2, r3, r4
 8010614:	42a3      	cmp	r3, r4
 8010616:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801061a:	bf08      	it	eq
 801061c:	2300      	moveq	r3, #0
 801061e:	6102      	str	r2, [r0, #16]
 8010620:	bf08      	it	eq
 8010622:	6143      	streq	r3, [r0, #20]
 8010624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010628:	f8dc c000 	ldr.w	ip, [ip]
 801062c:	fa0c fc08 	lsl.w	ip, ip, r8
 8010630:	ea4c 0707 	orr.w	r7, ip, r7
 8010634:	f849 7b04 	str.w	r7, [r9], #4
 8010638:	f85e 7b04 	ldr.w	r7, [lr], #4
 801063c:	40cf      	lsrs	r7, r1
 801063e:	e7da      	b.n	80105f6 <rshift+0x4c>
 8010640:	f851 cb04 	ldr.w	ip, [r1], #4
 8010644:	f847 cf04 	str.w	ip, [r7, #4]!
 8010648:	e7c3      	b.n	80105d2 <rshift+0x28>
 801064a:	4623      	mov	r3, r4
 801064c:	e7e1      	b.n	8010612 <rshift+0x68>

0801064e <__hexdig_fun>:
 801064e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010652:	2b09      	cmp	r3, #9
 8010654:	d802      	bhi.n	801065c <__hexdig_fun+0xe>
 8010656:	3820      	subs	r0, #32
 8010658:	b2c0      	uxtb	r0, r0
 801065a:	4770      	bx	lr
 801065c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010660:	2b05      	cmp	r3, #5
 8010662:	d801      	bhi.n	8010668 <__hexdig_fun+0x1a>
 8010664:	3847      	subs	r0, #71	; 0x47
 8010666:	e7f7      	b.n	8010658 <__hexdig_fun+0xa>
 8010668:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801066c:	2b05      	cmp	r3, #5
 801066e:	d801      	bhi.n	8010674 <__hexdig_fun+0x26>
 8010670:	3827      	subs	r0, #39	; 0x27
 8010672:	e7f1      	b.n	8010658 <__hexdig_fun+0xa>
 8010674:	2000      	movs	r0, #0
 8010676:	4770      	bx	lr

08010678 <__gethex>:
 8010678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801067c:	ed2d 8b02 	vpush	{d8}
 8010680:	b089      	sub	sp, #36	; 0x24
 8010682:	ee08 0a10 	vmov	s16, r0
 8010686:	9304      	str	r3, [sp, #16]
 8010688:	4bb4      	ldr	r3, [pc, #720]	; (801095c <__gethex+0x2e4>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	9301      	str	r3, [sp, #4]
 801068e:	4618      	mov	r0, r3
 8010690:	468b      	mov	fp, r1
 8010692:	4690      	mov	r8, r2
 8010694:	f7ef fdc4 	bl	8000220 <strlen>
 8010698:	9b01      	ldr	r3, [sp, #4]
 801069a:	f8db 2000 	ldr.w	r2, [fp]
 801069e:	4403      	add	r3, r0
 80106a0:	4682      	mov	sl, r0
 80106a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80106a6:	9305      	str	r3, [sp, #20]
 80106a8:	1c93      	adds	r3, r2, #2
 80106aa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80106ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80106b2:	32fe      	adds	r2, #254	; 0xfe
 80106b4:	18d1      	adds	r1, r2, r3
 80106b6:	461f      	mov	r7, r3
 80106b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80106bc:	9100      	str	r1, [sp, #0]
 80106be:	2830      	cmp	r0, #48	; 0x30
 80106c0:	d0f8      	beq.n	80106b4 <__gethex+0x3c>
 80106c2:	f7ff ffc4 	bl	801064e <__hexdig_fun>
 80106c6:	4604      	mov	r4, r0
 80106c8:	2800      	cmp	r0, #0
 80106ca:	d13a      	bne.n	8010742 <__gethex+0xca>
 80106cc:	9901      	ldr	r1, [sp, #4]
 80106ce:	4652      	mov	r2, sl
 80106d0:	4638      	mov	r0, r7
 80106d2:	f001 facc 	bl	8011c6e <strncmp>
 80106d6:	4605      	mov	r5, r0
 80106d8:	2800      	cmp	r0, #0
 80106da:	d168      	bne.n	80107ae <__gethex+0x136>
 80106dc:	f817 000a 	ldrb.w	r0, [r7, sl]
 80106e0:	eb07 060a 	add.w	r6, r7, sl
 80106e4:	f7ff ffb3 	bl	801064e <__hexdig_fun>
 80106e8:	2800      	cmp	r0, #0
 80106ea:	d062      	beq.n	80107b2 <__gethex+0x13a>
 80106ec:	4633      	mov	r3, r6
 80106ee:	7818      	ldrb	r0, [r3, #0]
 80106f0:	2830      	cmp	r0, #48	; 0x30
 80106f2:	461f      	mov	r7, r3
 80106f4:	f103 0301 	add.w	r3, r3, #1
 80106f8:	d0f9      	beq.n	80106ee <__gethex+0x76>
 80106fa:	f7ff ffa8 	bl	801064e <__hexdig_fun>
 80106fe:	2301      	movs	r3, #1
 8010700:	fab0 f480 	clz	r4, r0
 8010704:	0964      	lsrs	r4, r4, #5
 8010706:	4635      	mov	r5, r6
 8010708:	9300      	str	r3, [sp, #0]
 801070a:	463a      	mov	r2, r7
 801070c:	4616      	mov	r6, r2
 801070e:	3201      	adds	r2, #1
 8010710:	7830      	ldrb	r0, [r6, #0]
 8010712:	f7ff ff9c 	bl	801064e <__hexdig_fun>
 8010716:	2800      	cmp	r0, #0
 8010718:	d1f8      	bne.n	801070c <__gethex+0x94>
 801071a:	9901      	ldr	r1, [sp, #4]
 801071c:	4652      	mov	r2, sl
 801071e:	4630      	mov	r0, r6
 8010720:	f001 faa5 	bl	8011c6e <strncmp>
 8010724:	b980      	cbnz	r0, 8010748 <__gethex+0xd0>
 8010726:	b94d      	cbnz	r5, 801073c <__gethex+0xc4>
 8010728:	eb06 050a 	add.w	r5, r6, sl
 801072c:	462a      	mov	r2, r5
 801072e:	4616      	mov	r6, r2
 8010730:	3201      	adds	r2, #1
 8010732:	7830      	ldrb	r0, [r6, #0]
 8010734:	f7ff ff8b 	bl	801064e <__hexdig_fun>
 8010738:	2800      	cmp	r0, #0
 801073a:	d1f8      	bne.n	801072e <__gethex+0xb6>
 801073c:	1bad      	subs	r5, r5, r6
 801073e:	00ad      	lsls	r5, r5, #2
 8010740:	e004      	b.n	801074c <__gethex+0xd4>
 8010742:	2400      	movs	r4, #0
 8010744:	4625      	mov	r5, r4
 8010746:	e7e0      	b.n	801070a <__gethex+0x92>
 8010748:	2d00      	cmp	r5, #0
 801074a:	d1f7      	bne.n	801073c <__gethex+0xc4>
 801074c:	7833      	ldrb	r3, [r6, #0]
 801074e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010752:	2b50      	cmp	r3, #80	; 0x50
 8010754:	d13b      	bne.n	80107ce <__gethex+0x156>
 8010756:	7873      	ldrb	r3, [r6, #1]
 8010758:	2b2b      	cmp	r3, #43	; 0x2b
 801075a:	d02c      	beq.n	80107b6 <__gethex+0x13e>
 801075c:	2b2d      	cmp	r3, #45	; 0x2d
 801075e:	d02e      	beq.n	80107be <__gethex+0x146>
 8010760:	1c71      	adds	r1, r6, #1
 8010762:	f04f 0900 	mov.w	r9, #0
 8010766:	7808      	ldrb	r0, [r1, #0]
 8010768:	f7ff ff71 	bl	801064e <__hexdig_fun>
 801076c:	1e43      	subs	r3, r0, #1
 801076e:	b2db      	uxtb	r3, r3
 8010770:	2b18      	cmp	r3, #24
 8010772:	d82c      	bhi.n	80107ce <__gethex+0x156>
 8010774:	f1a0 0210 	sub.w	r2, r0, #16
 8010778:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801077c:	f7ff ff67 	bl	801064e <__hexdig_fun>
 8010780:	1e43      	subs	r3, r0, #1
 8010782:	b2db      	uxtb	r3, r3
 8010784:	2b18      	cmp	r3, #24
 8010786:	d91d      	bls.n	80107c4 <__gethex+0x14c>
 8010788:	f1b9 0f00 	cmp.w	r9, #0
 801078c:	d000      	beq.n	8010790 <__gethex+0x118>
 801078e:	4252      	negs	r2, r2
 8010790:	4415      	add	r5, r2
 8010792:	f8cb 1000 	str.w	r1, [fp]
 8010796:	b1e4      	cbz	r4, 80107d2 <__gethex+0x15a>
 8010798:	9b00      	ldr	r3, [sp, #0]
 801079a:	2b00      	cmp	r3, #0
 801079c:	bf14      	ite	ne
 801079e:	2700      	movne	r7, #0
 80107a0:	2706      	moveq	r7, #6
 80107a2:	4638      	mov	r0, r7
 80107a4:	b009      	add	sp, #36	; 0x24
 80107a6:	ecbd 8b02 	vpop	{d8}
 80107aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ae:	463e      	mov	r6, r7
 80107b0:	4625      	mov	r5, r4
 80107b2:	2401      	movs	r4, #1
 80107b4:	e7ca      	b.n	801074c <__gethex+0xd4>
 80107b6:	f04f 0900 	mov.w	r9, #0
 80107ba:	1cb1      	adds	r1, r6, #2
 80107bc:	e7d3      	b.n	8010766 <__gethex+0xee>
 80107be:	f04f 0901 	mov.w	r9, #1
 80107c2:	e7fa      	b.n	80107ba <__gethex+0x142>
 80107c4:	230a      	movs	r3, #10
 80107c6:	fb03 0202 	mla	r2, r3, r2, r0
 80107ca:	3a10      	subs	r2, #16
 80107cc:	e7d4      	b.n	8010778 <__gethex+0x100>
 80107ce:	4631      	mov	r1, r6
 80107d0:	e7df      	b.n	8010792 <__gethex+0x11a>
 80107d2:	1bf3      	subs	r3, r6, r7
 80107d4:	3b01      	subs	r3, #1
 80107d6:	4621      	mov	r1, r4
 80107d8:	2b07      	cmp	r3, #7
 80107da:	dc0b      	bgt.n	80107f4 <__gethex+0x17c>
 80107dc:	ee18 0a10 	vmov	r0, s16
 80107e0:	f000 fad8 	bl	8010d94 <_Balloc>
 80107e4:	4604      	mov	r4, r0
 80107e6:	b940      	cbnz	r0, 80107fa <__gethex+0x182>
 80107e8:	4b5d      	ldr	r3, [pc, #372]	; (8010960 <__gethex+0x2e8>)
 80107ea:	4602      	mov	r2, r0
 80107ec:	21de      	movs	r1, #222	; 0xde
 80107ee:	485d      	ldr	r0, [pc, #372]	; (8010964 <__gethex+0x2ec>)
 80107f0:	f001 fa70 	bl	8011cd4 <__assert_func>
 80107f4:	3101      	adds	r1, #1
 80107f6:	105b      	asrs	r3, r3, #1
 80107f8:	e7ee      	b.n	80107d8 <__gethex+0x160>
 80107fa:	f100 0914 	add.w	r9, r0, #20
 80107fe:	f04f 0b00 	mov.w	fp, #0
 8010802:	f1ca 0301 	rsb	r3, sl, #1
 8010806:	f8cd 9008 	str.w	r9, [sp, #8]
 801080a:	f8cd b000 	str.w	fp, [sp]
 801080e:	9306      	str	r3, [sp, #24]
 8010810:	42b7      	cmp	r7, r6
 8010812:	d340      	bcc.n	8010896 <__gethex+0x21e>
 8010814:	9802      	ldr	r0, [sp, #8]
 8010816:	9b00      	ldr	r3, [sp, #0]
 8010818:	f840 3b04 	str.w	r3, [r0], #4
 801081c:	eba0 0009 	sub.w	r0, r0, r9
 8010820:	1080      	asrs	r0, r0, #2
 8010822:	0146      	lsls	r6, r0, #5
 8010824:	6120      	str	r0, [r4, #16]
 8010826:	4618      	mov	r0, r3
 8010828:	f000 fba6 	bl	8010f78 <__hi0bits>
 801082c:	1a30      	subs	r0, r6, r0
 801082e:	f8d8 6000 	ldr.w	r6, [r8]
 8010832:	42b0      	cmp	r0, r6
 8010834:	dd63      	ble.n	80108fe <__gethex+0x286>
 8010836:	1b87      	subs	r7, r0, r6
 8010838:	4639      	mov	r1, r7
 801083a:	4620      	mov	r0, r4
 801083c:	f000 ff4a 	bl	80116d4 <__any_on>
 8010840:	4682      	mov	sl, r0
 8010842:	b1a8      	cbz	r0, 8010870 <__gethex+0x1f8>
 8010844:	1e7b      	subs	r3, r7, #1
 8010846:	1159      	asrs	r1, r3, #5
 8010848:	f003 021f 	and.w	r2, r3, #31
 801084c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010850:	f04f 0a01 	mov.w	sl, #1
 8010854:	fa0a f202 	lsl.w	r2, sl, r2
 8010858:	420a      	tst	r2, r1
 801085a:	d009      	beq.n	8010870 <__gethex+0x1f8>
 801085c:	4553      	cmp	r3, sl
 801085e:	dd05      	ble.n	801086c <__gethex+0x1f4>
 8010860:	1eb9      	subs	r1, r7, #2
 8010862:	4620      	mov	r0, r4
 8010864:	f000 ff36 	bl	80116d4 <__any_on>
 8010868:	2800      	cmp	r0, #0
 801086a:	d145      	bne.n	80108f8 <__gethex+0x280>
 801086c:	f04f 0a02 	mov.w	sl, #2
 8010870:	4639      	mov	r1, r7
 8010872:	4620      	mov	r0, r4
 8010874:	f7ff fe99 	bl	80105aa <rshift>
 8010878:	443d      	add	r5, r7
 801087a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801087e:	42ab      	cmp	r3, r5
 8010880:	da4c      	bge.n	801091c <__gethex+0x2a4>
 8010882:	ee18 0a10 	vmov	r0, s16
 8010886:	4621      	mov	r1, r4
 8010888:	f000 fac4 	bl	8010e14 <_Bfree>
 801088c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801088e:	2300      	movs	r3, #0
 8010890:	6013      	str	r3, [r2, #0]
 8010892:	27a3      	movs	r7, #163	; 0xa3
 8010894:	e785      	b.n	80107a2 <__gethex+0x12a>
 8010896:	1e73      	subs	r3, r6, #1
 8010898:	9a05      	ldr	r2, [sp, #20]
 801089a:	9303      	str	r3, [sp, #12]
 801089c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80108a0:	4293      	cmp	r3, r2
 80108a2:	d019      	beq.n	80108d8 <__gethex+0x260>
 80108a4:	f1bb 0f20 	cmp.w	fp, #32
 80108a8:	d107      	bne.n	80108ba <__gethex+0x242>
 80108aa:	9b02      	ldr	r3, [sp, #8]
 80108ac:	9a00      	ldr	r2, [sp, #0]
 80108ae:	f843 2b04 	str.w	r2, [r3], #4
 80108b2:	9302      	str	r3, [sp, #8]
 80108b4:	2300      	movs	r3, #0
 80108b6:	9300      	str	r3, [sp, #0]
 80108b8:	469b      	mov	fp, r3
 80108ba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80108be:	f7ff fec6 	bl	801064e <__hexdig_fun>
 80108c2:	9b00      	ldr	r3, [sp, #0]
 80108c4:	f000 000f 	and.w	r0, r0, #15
 80108c8:	fa00 f00b 	lsl.w	r0, r0, fp
 80108cc:	4303      	orrs	r3, r0
 80108ce:	9300      	str	r3, [sp, #0]
 80108d0:	f10b 0b04 	add.w	fp, fp, #4
 80108d4:	9b03      	ldr	r3, [sp, #12]
 80108d6:	e00d      	b.n	80108f4 <__gethex+0x27c>
 80108d8:	9b03      	ldr	r3, [sp, #12]
 80108da:	9a06      	ldr	r2, [sp, #24]
 80108dc:	4413      	add	r3, r2
 80108de:	42bb      	cmp	r3, r7
 80108e0:	d3e0      	bcc.n	80108a4 <__gethex+0x22c>
 80108e2:	4618      	mov	r0, r3
 80108e4:	9901      	ldr	r1, [sp, #4]
 80108e6:	9307      	str	r3, [sp, #28]
 80108e8:	4652      	mov	r2, sl
 80108ea:	f001 f9c0 	bl	8011c6e <strncmp>
 80108ee:	9b07      	ldr	r3, [sp, #28]
 80108f0:	2800      	cmp	r0, #0
 80108f2:	d1d7      	bne.n	80108a4 <__gethex+0x22c>
 80108f4:	461e      	mov	r6, r3
 80108f6:	e78b      	b.n	8010810 <__gethex+0x198>
 80108f8:	f04f 0a03 	mov.w	sl, #3
 80108fc:	e7b8      	b.n	8010870 <__gethex+0x1f8>
 80108fe:	da0a      	bge.n	8010916 <__gethex+0x29e>
 8010900:	1a37      	subs	r7, r6, r0
 8010902:	4621      	mov	r1, r4
 8010904:	ee18 0a10 	vmov	r0, s16
 8010908:	463a      	mov	r2, r7
 801090a:	f000 fc9f 	bl	801124c <__lshift>
 801090e:	1bed      	subs	r5, r5, r7
 8010910:	4604      	mov	r4, r0
 8010912:	f100 0914 	add.w	r9, r0, #20
 8010916:	f04f 0a00 	mov.w	sl, #0
 801091a:	e7ae      	b.n	801087a <__gethex+0x202>
 801091c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010920:	42a8      	cmp	r0, r5
 8010922:	dd72      	ble.n	8010a0a <__gethex+0x392>
 8010924:	1b45      	subs	r5, r0, r5
 8010926:	42ae      	cmp	r6, r5
 8010928:	dc36      	bgt.n	8010998 <__gethex+0x320>
 801092a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801092e:	2b02      	cmp	r3, #2
 8010930:	d02a      	beq.n	8010988 <__gethex+0x310>
 8010932:	2b03      	cmp	r3, #3
 8010934:	d02c      	beq.n	8010990 <__gethex+0x318>
 8010936:	2b01      	cmp	r3, #1
 8010938:	d11c      	bne.n	8010974 <__gethex+0x2fc>
 801093a:	42ae      	cmp	r6, r5
 801093c:	d11a      	bne.n	8010974 <__gethex+0x2fc>
 801093e:	2e01      	cmp	r6, #1
 8010940:	d112      	bne.n	8010968 <__gethex+0x2f0>
 8010942:	9a04      	ldr	r2, [sp, #16]
 8010944:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010948:	6013      	str	r3, [r2, #0]
 801094a:	2301      	movs	r3, #1
 801094c:	6123      	str	r3, [r4, #16]
 801094e:	f8c9 3000 	str.w	r3, [r9]
 8010952:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010954:	2762      	movs	r7, #98	; 0x62
 8010956:	601c      	str	r4, [r3, #0]
 8010958:	e723      	b.n	80107a2 <__gethex+0x12a>
 801095a:	bf00      	nop
 801095c:	0801383c 	.word	0x0801383c
 8010960:	08013760 	.word	0x08013760
 8010964:	080137d4 	.word	0x080137d4
 8010968:	1e71      	subs	r1, r6, #1
 801096a:	4620      	mov	r0, r4
 801096c:	f000 feb2 	bl	80116d4 <__any_on>
 8010970:	2800      	cmp	r0, #0
 8010972:	d1e6      	bne.n	8010942 <__gethex+0x2ca>
 8010974:	ee18 0a10 	vmov	r0, s16
 8010978:	4621      	mov	r1, r4
 801097a:	f000 fa4b 	bl	8010e14 <_Bfree>
 801097e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010980:	2300      	movs	r3, #0
 8010982:	6013      	str	r3, [r2, #0]
 8010984:	2750      	movs	r7, #80	; 0x50
 8010986:	e70c      	b.n	80107a2 <__gethex+0x12a>
 8010988:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801098a:	2b00      	cmp	r3, #0
 801098c:	d1f2      	bne.n	8010974 <__gethex+0x2fc>
 801098e:	e7d8      	b.n	8010942 <__gethex+0x2ca>
 8010990:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010992:	2b00      	cmp	r3, #0
 8010994:	d1d5      	bne.n	8010942 <__gethex+0x2ca>
 8010996:	e7ed      	b.n	8010974 <__gethex+0x2fc>
 8010998:	1e6f      	subs	r7, r5, #1
 801099a:	f1ba 0f00 	cmp.w	sl, #0
 801099e:	d131      	bne.n	8010a04 <__gethex+0x38c>
 80109a0:	b127      	cbz	r7, 80109ac <__gethex+0x334>
 80109a2:	4639      	mov	r1, r7
 80109a4:	4620      	mov	r0, r4
 80109a6:	f000 fe95 	bl	80116d4 <__any_on>
 80109aa:	4682      	mov	sl, r0
 80109ac:	117b      	asrs	r3, r7, #5
 80109ae:	2101      	movs	r1, #1
 80109b0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80109b4:	f007 071f 	and.w	r7, r7, #31
 80109b8:	fa01 f707 	lsl.w	r7, r1, r7
 80109bc:	421f      	tst	r7, r3
 80109be:	4629      	mov	r1, r5
 80109c0:	4620      	mov	r0, r4
 80109c2:	bf18      	it	ne
 80109c4:	f04a 0a02 	orrne.w	sl, sl, #2
 80109c8:	1b76      	subs	r6, r6, r5
 80109ca:	f7ff fdee 	bl	80105aa <rshift>
 80109ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80109d2:	2702      	movs	r7, #2
 80109d4:	f1ba 0f00 	cmp.w	sl, #0
 80109d8:	d048      	beq.n	8010a6c <__gethex+0x3f4>
 80109da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80109de:	2b02      	cmp	r3, #2
 80109e0:	d015      	beq.n	8010a0e <__gethex+0x396>
 80109e2:	2b03      	cmp	r3, #3
 80109e4:	d017      	beq.n	8010a16 <__gethex+0x39e>
 80109e6:	2b01      	cmp	r3, #1
 80109e8:	d109      	bne.n	80109fe <__gethex+0x386>
 80109ea:	f01a 0f02 	tst.w	sl, #2
 80109ee:	d006      	beq.n	80109fe <__gethex+0x386>
 80109f0:	f8d9 0000 	ldr.w	r0, [r9]
 80109f4:	ea4a 0a00 	orr.w	sl, sl, r0
 80109f8:	f01a 0f01 	tst.w	sl, #1
 80109fc:	d10e      	bne.n	8010a1c <__gethex+0x3a4>
 80109fe:	f047 0710 	orr.w	r7, r7, #16
 8010a02:	e033      	b.n	8010a6c <__gethex+0x3f4>
 8010a04:	f04f 0a01 	mov.w	sl, #1
 8010a08:	e7d0      	b.n	80109ac <__gethex+0x334>
 8010a0a:	2701      	movs	r7, #1
 8010a0c:	e7e2      	b.n	80109d4 <__gethex+0x35c>
 8010a0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a10:	f1c3 0301 	rsb	r3, r3, #1
 8010a14:	9315      	str	r3, [sp, #84]	; 0x54
 8010a16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d0f0      	beq.n	80109fe <__gethex+0x386>
 8010a1c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010a20:	f104 0314 	add.w	r3, r4, #20
 8010a24:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010a28:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010a2c:	f04f 0c00 	mov.w	ip, #0
 8010a30:	4618      	mov	r0, r3
 8010a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a36:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010a3a:	d01c      	beq.n	8010a76 <__gethex+0x3fe>
 8010a3c:	3201      	adds	r2, #1
 8010a3e:	6002      	str	r2, [r0, #0]
 8010a40:	2f02      	cmp	r7, #2
 8010a42:	f104 0314 	add.w	r3, r4, #20
 8010a46:	d13f      	bne.n	8010ac8 <__gethex+0x450>
 8010a48:	f8d8 2000 	ldr.w	r2, [r8]
 8010a4c:	3a01      	subs	r2, #1
 8010a4e:	42b2      	cmp	r2, r6
 8010a50:	d10a      	bne.n	8010a68 <__gethex+0x3f0>
 8010a52:	1171      	asrs	r1, r6, #5
 8010a54:	2201      	movs	r2, #1
 8010a56:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010a5a:	f006 061f 	and.w	r6, r6, #31
 8010a5e:	fa02 f606 	lsl.w	r6, r2, r6
 8010a62:	421e      	tst	r6, r3
 8010a64:	bf18      	it	ne
 8010a66:	4617      	movne	r7, r2
 8010a68:	f047 0720 	orr.w	r7, r7, #32
 8010a6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010a6e:	601c      	str	r4, [r3, #0]
 8010a70:	9b04      	ldr	r3, [sp, #16]
 8010a72:	601d      	str	r5, [r3, #0]
 8010a74:	e695      	b.n	80107a2 <__gethex+0x12a>
 8010a76:	4299      	cmp	r1, r3
 8010a78:	f843 cc04 	str.w	ip, [r3, #-4]
 8010a7c:	d8d8      	bhi.n	8010a30 <__gethex+0x3b8>
 8010a7e:	68a3      	ldr	r3, [r4, #8]
 8010a80:	459b      	cmp	fp, r3
 8010a82:	db19      	blt.n	8010ab8 <__gethex+0x440>
 8010a84:	6861      	ldr	r1, [r4, #4]
 8010a86:	ee18 0a10 	vmov	r0, s16
 8010a8a:	3101      	adds	r1, #1
 8010a8c:	f000 f982 	bl	8010d94 <_Balloc>
 8010a90:	4681      	mov	r9, r0
 8010a92:	b918      	cbnz	r0, 8010a9c <__gethex+0x424>
 8010a94:	4b1a      	ldr	r3, [pc, #104]	; (8010b00 <__gethex+0x488>)
 8010a96:	4602      	mov	r2, r0
 8010a98:	2184      	movs	r1, #132	; 0x84
 8010a9a:	e6a8      	b.n	80107ee <__gethex+0x176>
 8010a9c:	6922      	ldr	r2, [r4, #16]
 8010a9e:	3202      	adds	r2, #2
 8010aa0:	f104 010c 	add.w	r1, r4, #12
 8010aa4:	0092      	lsls	r2, r2, #2
 8010aa6:	300c      	adds	r0, #12
 8010aa8:	f7fd f8c2 	bl	800dc30 <memcpy>
 8010aac:	4621      	mov	r1, r4
 8010aae:	ee18 0a10 	vmov	r0, s16
 8010ab2:	f000 f9af 	bl	8010e14 <_Bfree>
 8010ab6:	464c      	mov	r4, r9
 8010ab8:	6923      	ldr	r3, [r4, #16]
 8010aba:	1c5a      	adds	r2, r3, #1
 8010abc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010ac0:	6122      	str	r2, [r4, #16]
 8010ac2:	2201      	movs	r2, #1
 8010ac4:	615a      	str	r2, [r3, #20]
 8010ac6:	e7bb      	b.n	8010a40 <__gethex+0x3c8>
 8010ac8:	6922      	ldr	r2, [r4, #16]
 8010aca:	455a      	cmp	r2, fp
 8010acc:	dd0b      	ble.n	8010ae6 <__gethex+0x46e>
 8010ace:	2101      	movs	r1, #1
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	f7ff fd6a 	bl	80105aa <rshift>
 8010ad6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010ada:	3501      	adds	r5, #1
 8010adc:	42ab      	cmp	r3, r5
 8010ade:	f6ff aed0 	blt.w	8010882 <__gethex+0x20a>
 8010ae2:	2701      	movs	r7, #1
 8010ae4:	e7c0      	b.n	8010a68 <__gethex+0x3f0>
 8010ae6:	f016 061f 	ands.w	r6, r6, #31
 8010aea:	d0fa      	beq.n	8010ae2 <__gethex+0x46a>
 8010aec:	4453      	add	r3, sl
 8010aee:	f1c6 0620 	rsb	r6, r6, #32
 8010af2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010af6:	f000 fa3f 	bl	8010f78 <__hi0bits>
 8010afa:	42b0      	cmp	r0, r6
 8010afc:	dbe7      	blt.n	8010ace <__gethex+0x456>
 8010afe:	e7f0      	b.n	8010ae2 <__gethex+0x46a>
 8010b00:	08013760 	.word	0x08013760

08010b04 <L_shift>:
 8010b04:	f1c2 0208 	rsb	r2, r2, #8
 8010b08:	0092      	lsls	r2, r2, #2
 8010b0a:	b570      	push	{r4, r5, r6, lr}
 8010b0c:	f1c2 0620 	rsb	r6, r2, #32
 8010b10:	6843      	ldr	r3, [r0, #4]
 8010b12:	6804      	ldr	r4, [r0, #0]
 8010b14:	fa03 f506 	lsl.w	r5, r3, r6
 8010b18:	432c      	orrs	r4, r5
 8010b1a:	40d3      	lsrs	r3, r2
 8010b1c:	6004      	str	r4, [r0, #0]
 8010b1e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010b22:	4288      	cmp	r0, r1
 8010b24:	d3f4      	bcc.n	8010b10 <L_shift+0xc>
 8010b26:	bd70      	pop	{r4, r5, r6, pc}

08010b28 <__match>:
 8010b28:	b530      	push	{r4, r5, lr}
 8010b2a:	6803      	ldr	r3, [r0, #0]
 8010b2c:	3301      	adds	r3, #1
 8010b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b32:	b914      	cbnz	r4, 8010b3a <__match+0x12>
 8010b34:	6003      	str	r3, [r0, #0]
 8010b36:	2001      	movs	r0, #1
 8010b38:	bd30      	pop	{r4, r5, pc}
 8010b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b3e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010b42:	2d19      	cmp	r5, #25
 8010b44:	bf98      	it	ls
 8010b46:	3220      	addls	r2, #32
 8010b48:	42a2      	cmp	r2, r4
 8010b4a:	d0f0      	beq.n	8010b2e <__match+0x6>
 8010b4c:	2000      	movs	r0, #0
 8010b4e:	e7f3      	b.n	8010b38 <__match+0x10>

08010b50 <__hexnan>:
 8010b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b54:	680b      	ldr	r3, [r1, #0]
 8010b56:	115e      	asrs	r6, r3, #5
 8010b58:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010b5c:	f013 031f 	ands.w	r3, r3, #31
 8010b60:	b087      	sub	sp, #28
 8010b62:	bf18      	it	ne
 8010b64:	3604      	addne	r6, #4
 8010b66:	2500      	movs	r5, #0
 8010b68:	1f37      	subs	r7, r6, #4
 8010b6a:	4690      	mov	r8, r2
 8010b6c:	6802      	ldr	r2, [r0, #0]
 8010b6e:	9301      	str	r3, [sp, #4]
 8010b70:	4682      	mov	sl, r0
 8010b72:	f846 5c04 	str.w	r5, [r6, #-4]
 8010b76:	46b9      	mov	r9, r7
 8010b78:	463c      	mov	r4, r7
 8010b7a:	9502      	str	r5, [sp, #8]
 8010b7c:	46ab      	mov	fp, r5
 8010b7e:	7851      	ldrb	r1, [r2, #1]
 8010b80:	1c53      	adds	r3, r2, #1
 8010b82:	9303      	str	r3, [sp, #12]
 8010b84:	b341      	cbz	r1, 8010bd8 <__hexnan+0x88>
 8010b86:	4608      	mov	r0, r1
 8010b88:	9205      	str	r2, [sp, #20]
 8010b8a:	9104      	str	r1, [sp, #16]
 8010b8c:	f7ff fd5f 	bl	801064e <__hexdig_fun>
 8010b90:	2800      	cmp	r0, #0
 8010b92:	d14f      	bne.n	8010c34 <__hexnan+0xe4>
 8010b94:	9904      	ldr	r1, [sp, #16]
 8010b96:	9a05      	ldr	r2, [sp, #20]
 8010b98:	2920      	cmp	r1, #32
 8010b9a:	d818      	bhi.n	8010bce <__hexnan+0x7e>
 8010b9c:	9b02      	ldr	r3, [sp, #8]
 8010b9e:	459b      	cmp	fp, r3
 8010ba0:	dd13      	ble.n	8010bca <__hexnan+0x7a>
 8010ba2:	454c      	cmp	r4, r9
 8010ba4:	d206      	bcs.n	8010bb4 <__hexnan+0x64>
 8010ba6:	2d07      	cmp	r5, #7
 8010ba8:	dc04      	bgt.n	8010bb4 <__hexnan+0x64>
 8010baa:	462a      	mov	r2, r5
 8010bac:	4649      	mov	r1, r9
 8010bae:	4620      	mov	r0, r4
 8010bb0:	f7ff ffa8 	bl	8010b04 <L_shift>
 8010bb4:	4544      	cmp	r4, r8
 8010bb6:	d950      	bls.n	8010c5a <__hexnan+0x10a>
 8010bb8:	2300      	movs	r3, #0
 8010bba:	f1a4 0904 	sub.w	r9, r4, #4
 8010bbe:	f844 3c04 	str.w	r3, [r4, #-4]
 8010bc2:	f8cd b008 	str.w	fp, [sp, #8]
 8010bc6:	464c      	mov	r4, r9
 8010bc8:	461d      	mov	r5, r3
 8010bca:	9a03      	ldr	r2, [sp, #12]
 8010bcc:	e7d7      	b.n	8010b7e <__hexnan+0x2e>
 8010bce:	2929      	cmp	r1, #41	; 0x29
 8010bd0:	d156      	bne.n	8010c80 <__hexnan+0x130>
 8010bd2:	3202      	adds	r2, #2
 8010bd4:	f8ca 2000 	str.w	r2, [sl]
 8010bd8:	f1bb 0f00 	cmp.w	fp, #0
 8010bdc:	d050      	beq.n	8010c80 <__hexnan+0x130>
 8010bde:	454c      	cmp	r4, r9
 8010be0:	d206      	bcs.n	8010bf0 <__hexnan+0xa0>
 8010be2:	2d07      	cmp	r5, #7
 8010be4:	dc04      	bgt.n	8010bf0 <__hexnan+0xa0>
 8010be6:	462a      	mov	r2, r5
 8010be8:	4649      	mov	r1, r9
 8010bea:	4620      	mov	r0, r4
 8010bec:	f7ff ff8a 	bl	8010b04 <L_shift>
 8010bf0:	4544      	cmp	r4, r8
 8010bf2:	d934      	bls.n	8010c5e <__hexnan+0x10e>
 8010bf4:	f1a8 0204 	sub.w	r2, r8, #4
 8010bf8:	4623      	mov	r3, r4
 8010bfa:	f853 1b04 	ldr.w	r1, [r3], #4
 8010bfe:	f842 1f04 	str.w	r1, [r2, #4]!
 8010c02:	429f      	cmp	r7, r3
 8010c04:	d2f9      	bcs.n	8010bfa <__hexnan+0xaa>
 8010c06:	1b3b      	subs	r3, r7, r4
 8010c08:	f023 0303 	bic.w	r3, r3, #3
 8010c0c:	3304      	adds	r3, #4
 8010c0e:	3401      	adds	r4, #1
 8010c10:	3e03      	subs	r6, #3
 8010c12:	42b4      	cmp	r4, r6
 8010c14:	bf88      	it	hi
 8010c16:	2304      	movhi	r3, #4
 8010c18:	4443      	add	r3, r8
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	f843 2b04 	str.w	r2, [r3], #4
 8010c20:	429f      	cmp	r7, r3
 8010c22:	d2fb      	bcs.n	8010c1c <__hexnan+0xcc>
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	b91b      	cbnz	r3, 8010c30 <__hexnan+0xe0>
 8010c28:	4547      	cmp	r7, r8
 8010c2a:	d127      	bne.n	8010c7c <__hexnan+0x12c>
 8010c2c:	2301      	movs	r3, #1
 8010c2e:	603b      	str	r3, [r7, #0]
 8010c30:	2005      	movs	r0, #5
 8010c32:	e026      	b.n	8010c82 <__hexnan+0x132>
 8010c34:	3501      	adds	r5, #1
 8010c36:	2d08      	cmp	r5, #8
 8010c38:	f10b 0b01 	add.w	fp, fp, #1
 8010c3c:	dd06      	ble.n	8010c4c <__hexnan+0xfc>
 8010c3e:	4544      	cmp	r4, r8
 8010c40:	d9c3      	bls.n	8010bca <__hexnan+0x7a>
 8010c42:	2300      	movs	r3, #0
 8010c44:	f844 3c04 	str.w	r3, [r4, #-4]
 8010c48:	2501      	movs	r5, #1
 8010c4a:	3c04      	subs	r4, #4
 8010c4c:	6822      	ldr	r2, [r4, #0]
 8010c4e:	f000 000f 	and.w	r0, r0, #15
 8010c52:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010c56:	6022      	str	r2, [r4, #0]
 8010c58:	e7b7      	b.n	8010bca <__hexnan+0x7a>
 8010c5a:	2508      	movs	r5, #8
 8010c5c:	e7b5      	b.n	8010bca <__hexnan+0x7a>
 8010c5e:	9b01      	ldr	r3, [sp, #4]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d0df      	beq.n	8010c24 <__hexnan+0xd4>
 8010c64:	f04f 32ff 	mov.w	r2, #4294967295
 8010c68:	f1c3 0320 	rsb	r3, r3, #32
 8010c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8010c70:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010c74:	401a      	ands	r2, r3
 8010c76:	f846 2c04 	str.w	r2, [r6, #-4]
 8010c7a:	e7d3      	b.n	8010c24 <__hexnan+0xd4>
 8010c7c:	3f04      	subs	r7, #4
 8010c7e:	e7d1      	b.n	8010c24 <__hexnan+0xd4>
 8010c80:	2004      	movs	r0, #4
 8010c82:	b007      	add	sp, #28
 8010c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c88 <_localeconv_r>:
 8010c88:	4800      	ldr	r0, [pc, #0]	; (8010c8c <_localeconv_r+0x4>)
 8010c8a:	4770      	bx	lr
 8010c8c:	20000184 	.word	0x20000184

08010c90 <__retarget_lock_init_recursive>:
 8010c90:	4770      	bx	lr

08010c92 <__retarget_lock_acquire_recursive>:
 8010c92:	4770      	bx	lr

08010c94 <__retarget_lock_release_recursive>:
 8010c94:	4770      	bx	lr

08010c96 <__swhatbuf_r>:
 8010c96:	b570      	push	{r4, r5, r6, lr}
 8010c98:	460e      	mov	r6, r1
 8010c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c9e:	2900      	cmp	r1, #0
 8010ca0:	b096      	sub	sp, #88	; 0x58
 8010ca2:	4614      	mov	r4, r2
 8010ca4:	461d      	mov	r5, r3
 8010ca6:	da08      	bge.n	8010cba <__swhatbuf_r+0x24>
 8010ca8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010cac:	2200      	movs	r2, #0
 8010cae:	602a      	str	r2, [r5, #0]
 8010cb0:	061a      	lsls	r2, r3, #24
 8010cb2:	d410      	bmi.n	8010cd6 <__swhatbuf_r+0x40>
 8010cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010cb8:	e00e      	b.n	8010cd8 <__swhatbuf_r+0x42>
 8010cba:	466a      	mov	r2, sp
 8010cbc:	f001 f84a 	bl	8011d54 <_fstat_r>
 8010cc0:	2800      	cmp	r0, #0
 8010cc2:	dbf1      	blt.n	8010ca8 <__swhatbuf_r+0x12>
 8010cc4:	9a01      	ldr	r2, [sp, #4]
 8010cc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010cca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010cce:	425a      	negs	r2, r3
 8010cd0:	415a      	adcs	r2, r3
 8010cd2:	602a      	str	r2, [r5, #0]
 8010cd4:	e7ee      	b.n	8010cb4 <__swhatbuf_r+0x1e>
 8010cd6:	2340      	movs	r3, #64	; 0x40
 8010cd8:	2000      	movs	r0, #0
 8010cda:	6023      	str	r3, [r4, #0]
 8010cdc:	b016      	add	sp, #88	; 0x58
 8010cde:	bd70      	pop	{r4, r5, r6, pc}

08010ce0 <__smakebuf_r>:
 8010ce0:	898b      	ldrh	r3, [r1, #12]
 8010ce2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ce4:	079d      	lsls	r5, r3, #30
 8010ce6:	4606      	mov	r6, r0
 8010ce8:	460c      	mov	r4, r1
 8010cea:	d507      	bpl.n	8010cfc <__smakebuf_r+0x1c>
 8010cec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010cf0:	6023      	str	r3, [r4, #0]
 8010cf2:	6123      	str	r3, [r4, #16]
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	6163      	str	r3, [r4, #20]
 8010cf8:	b002      	add	sp, #8
 8010cfa:	bd70      	pop	{r4, r5, r6, pc}
 8010cfc:	ab01      	add	r3, sp, #4
 8010cfe:	466a      	mov	r2, sp
 8010d00:	f7ff ffc9 	bl	8010c96 <__swhatbuf_r>
 8010d04:	9900      	ldr	r1, [sp, #0]
 8010d06:	4605      	mov	r5, r0
 8010d08:	4630      	mov	r0, r6
 8010d0a:	f000 fd87 	bl	801181c <_malloc_r>
 8010d0e:	b948      	cbnz	r0, 8010d24 <__smakebuf_r+0x44>
 8010d10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d14:	059a      	lsls	r2, r3, #22
 8010d16:	d4ef      	bmi.n	8010cf8 <__smakebuf_r+0x18>
 8010d18:	f023 0303 	bic.w	r3, r3, #3
 8010d1c:	f043 0302 	orr.w	r3, r3, #2
 8010d20:	81a3      	strh	r3, [r4, #12]
 8010d22:	e7e3      	b.n	8010cec <__smakebuf_r+0xc>
 8010d24:	4b0d      	ldr	r3, [pc, #52]	; (8010d5c <__smakebuf_r+0x7c>)
 8010d26:	62b3      	str	r3, [r6, #40]	; 0x28
 8010d28:	89a3      	ldrh	r3, [r4, #12]
 8010d2a:	6020      	str	r0, [r4, #0]
 8010d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d30:	81a3      	strh	r3, [r4, #12]
 8010d32:	9b00      	ldr	r3, [sp, #0]
 8010d34:	6163      	str	r3, [r4, #20]
 8010d36:	9b01      	ldr	r3, [sp, #4]
 8010d38:	6120      	str	r0, [r4, #16]
 8010d3a:	b15b      	cbz	r3, 8010d54 <__smakebuf_r+0x74>
 8010d3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d40:	4630      	mov	r0, r6
 8010d42:	f001 f819 	bl	8011d78 <_isatty_r>
 8010d46:	b128      	cbz	r0, 8010d54 <__smakebuf_r+0x74>
 8010d48:	89a3      	ldrh	r3, [r4, #12]
 8010d4a:	f023 0303 	bic.w	r3, r3, #3
 8010d4e:	f043 0301 	orr.w	r3, r3, #1
 8010d52:	81a3      	strh	r3, [r4, #12]
 8010d54:	89a0      	ldrh	r0, [r4, #12]
 8010d56:	4305      	orrs	r5, r0
 8010d58:	81a5      	strh	r5, [r4, #12]
 8010d5a:	e7cd      	b.n	8010cf8 <__smakebuf_r+0x18>
 8010d5c:	08010409 	.word	0x08010409

08010d60 <malloc>:
 8010d60:	4b02      	ldr	r3, [pc, #8]	; (8010d6c <malloc+0xc>)
 8010d62:	4601      	mov	r1, r0
 8010d64:	6818      	ldr	r0, [r3, #0]
 8010d66:	f000 bd59 	b.w	801181c <_malloc_r>
 8010d6a:	bf00      	nop
 8010d6c:	2000002c 	.word	0x2000002c

08010d70 <__ascii_mbtowc>:
 8010d70:	b082      	sub	sp, #8
 8010d72:	b901      	cbnz	r1, 8010d76 <__ascii_mbtowc+0x6>
 8010d74:	a901      	add	r1, sp, #4
 8010d76:	b142      	cbz	r2, 8010d8a <__ascii_mbtowc+0x1a>
 8010d78:	b14b      	cbz	r3, 8010d8e <__ascii_mbtowc+0x1e>
 8010d7a:	7813      	ldrb	r3, [r2, #0]
 8010d7c:	600b      	str	r3, [r1, #0]
 8010d7e:	7812      	ldrb	r2, [r2, #0]
 8010d80:	1e10      	subs	r0, r2, #0
 8010d82:	bf18      	it	ne
 8010d84:	2001      	movne	r0, #1
 8010d86:	b002      	add	sp, #8
 8010d88:	4770      	bx	lr
 8010d8a:	4610      	mov	r0, r2
 8010d8c:	e7fb      	b.n	8010d86 <__ascii_mbtowc+0x16>
 8010d8e:	f06f 0001 	mvn.w	r0, #1
 8010d92:	e7f8      	b.n	8010d86 <__ascii_mbtowc+0x16>

08010d94 <_Balloc>:
 8010d94:	b570      	push	{r4, r5, r6, lr}
 8010d96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010d98:	4604      	mov	r4, r0
 8010d9a:	460d      	mov	r5, r1
 8010d9c:	b976      	cbnz	r6, 8010dbc <_Balloc+0x28>
 8010d9e:	2010      	movs	r0, #16
 8010da0:	f7ff ffde 	bl	8010d60 <malloc>
 8010da4:	4602      	mov	r2, r0
 8010da6:	6260      	str	r0, [r4, #36]	; 0x24
 8010da8:	b920      	cbnz	r0, 8010db4 <_Balloc+0x20>
 8010daa:	4b18      	ldr	r3, [pc, #96]	; (8010e0c <_Balloc+0x78>)
 8010dac:	4818      	ldr	r0, [pc, #96]	; (8010e10 <_Balloc+0x7c>)
 8010dae:	2166      	movs	r1, #102	; 0x66
 8010db0:	f000 ff90 	bl	8011cd4 <__assert_func>
 8010db4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010db8:	6006      	str	r6, [r0, #0]
 8010dba:	60c6      	str	r6, [r0, #12]
 8010dbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010dbe:	68f3      	ldr	r3, [r6, #12]
 8010dc0:	b183      	cbz	r3, 8010de4 <_Balloc+0x50>
 8010dc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010dc4:	68db      	ldr	r3, [r3, #12]
 8010dc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010dca:	b9b8      	cbnz	r0, 8010dfc <_Balloc+0x68>
 8010dcc:	2101      	movs	r1, #1
 8010dce:	fa01 f605 	lsl.w	r6, r1, r5
 8010dd2:	1d72      	adds	r2, r6, #5
 8010dd4:	0092      	lsls	r2, r2, #2
 8010dd6:	4620      	mov	r0, r4
 8010dd8:	f000 fc9d 	bl	8011716 <_calloc_r>
 8010ddc:	b160      	cbz	r0, 8010df8 <_Balloc+0x64>
 8010dde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010de2:	e00e      	b.n	8010e02 <_Balloc+0x6e>
 8010de4:	2221      	movs	r2, #33	; 0x21
 8010de6:	2104      	movs	r1, #4
 8010de8:	4620      	mov	r0, r4
 8010dea:	f000 fc94 	bl	8011716 <_calloc_r>
 8010dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010df0:	60f0      	str	r0, [r6, #12]
 8010df2:	68db      	ldr	r3, [r3, #12]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d1e4      	bne.n	8010dc2 <_Balloc+0x2e>
 8010df8:	2000      	movs	r0, #0
 8010dfa:	bd70      	pop	{r4, r5, r6, pc}
 8010dfc:	6802      	ldr	r2, [r0, #0]
 8010dfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e02:	2300      	movs	r3, #0
 8010e04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010e08:	e7f7      	b.n	8010dfa <_Balloc+0x66>
 8010e0a:	bf00      	nop
 8010e0c:	080136ee 	.word	0x080136ee
 8010e10:	08013850 	.word	0x08013850

08010e14 <_Bfree>:
 8010e14:	b570      	push	{r4, r5, r6, lr}
 8010e16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010e18:	4605      	mov	r5, r0
 8010e1a:	460c      	mov	r4, r1
 8010e1c:	b976      	cbnz	r6, 8010e3c <_Bfree+0x28>
 8010e1e:	2010      	movs	r0, #16
 8010e20:	f7ff ff9e 	bl	8010d60 <malloc>
 8010e24:	4602      	mov	r2, r0
 8010e26:	6268      	str	r0, [r5, #36]	; 0x24
 8010e28:	b920      	cbnz	r0, 8010e34 <_Bfree+0x20>
 8010e2a:	4b09      	ldr	r3, [pc, #36]	; (8010e50 <_Bfree+0x3c>)
 8010e2c:	4809      	ldr	r0, [pc, #36]	; (8010e54 <_Bfree+0x40>)
 8010e2e:	218a      	movs	r1, #138	; 0x8a
 8010e30:	f000 ff50 	bl	8011cd4 <__assert_func>
 8010e34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e38:	6006      	str	r6, [r0, #0]
 8010e3a:	60c6      	str	r6, [r0, #12]
 8010e3c:	b13c      	cbz	r4, 8010e4e <_Bfree+0x3a>
 8010e3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010e40:	6862      	ldr	r2, [r4, #4]
 8010e42:	68db      	ldr	r3, [r3, #12]
 8010e44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010e48:	6021      	str	r1, [r4, #0]
 8010e4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010e4e:	bd70      	pop	{r4, r5, r6, pc}
 8010e50:	080136ee 	.word	0x080136ee
 8010e54:	08013850 	.word	0x08013850

08010e58 <__multadd>:
 8010e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e5c:	690d      	ldr	r5, [r1, #16]
 8010e5e:	4607      	mov	r7, r0
 8010e60:	460c      	mov	r4, r1
 8010e62:	461e      	mov	r6, r3
 8010e64:	f101 0c14 	add.w	ip, r1, #20
 8010e68:	2000      	movs	r0, #0
 8010e6a:	f8dc 3000 	ldr.w	r3, [ip]
 8010e6e:	b299      	uxth	r1, r3
 8010e70:	fb02 6101 	mla	r1, r2, r1, r6
 8010e74:	0c1e      	lsrs	r6, r3, #16
 8010e76:	0c0b      	lsrs	r3, r1, #16
 8010e78:	fb02 3306 	mla	r3, r2, r6, r3
 8010e7c:	b289      	uxth	r1, r1
 8010e7e:	3001      	adds	r0, #1
 8010e80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010e84:	4285      	cmp	r5, r0
 8010e86:	f84c 1b04 	str.w	r1, [ip], #4
 8010e8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010e8e:	dcec      	bgt.n	8010e6a <__multadd+0x12>
 8010e90:	b30e      	cbz	r6, 8010ed6 <__multadd+0x7e>
 8010e92:	68a3      	ldr	r3, [r4, #8]
 8010e94:	42ab      	cmp	r3, r5
 8010e96:	dc19      	bgt.n	8010ecc <__multadd+0x74>
 8010e98:	6861      	ldr	r1, [r4, #4]
 8010e9a:	4638      	mov	r0, r7
 8010e9c:	3101      	adds	r1, #1
 8010e9e:	f7ff ff79 	bl	8010d94 <_Balloc>
 8010ea2:	4680      	mov	r8, r0
 8010ea4:	b928      	cbnz	r0, 8010eb2 <__multadd+0x5a>
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	4b0c      	ldr	r3, [pc, #48]	; (8010edc <__multadd+0x84>)
 8010eaa:	480d      	ldr	r0, [pc, #52]	; (8010ee0 <__multadd+0x88>)
 8010eac:	21b5      	movs	r1, #181	; 0xb5
 8010eae:	f000 ff11 	bl	8011cd4 <__assert_func>
 8010eb2:	6922      	ldr	r2, [r4, #16]
 8010eb4:	3202      	adds	r2, #2
 8010eb6:	f104 010c 	add.w	r1, r4, #12
 8010eba:	0092      	lsls	r2, r2, #2
 8010ebc:	300c      	adds	r0, #12
 8010ebe:	f7fc feb7 	bl	800dc30 <memcpy>
 8010ec2:	4621      	mov	r1, r4
 8010ec4:	4638      	mov	r0, r7
 8010ec6:	f7ff ffa5 	bl	8010e14 <_Bfree>
 8010eca:	4644      	mov	r4, r8
 8010ecc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010ed0:	3501      	adds	r5, #1
 8010ed2:	615e      	str	r6, [r3, #20]
 8010ed4:	6125      	str	r5, [r4, #16]
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010edc:	08013760 	.word	0x08013760
 8010ee0:	08013850 	.word	0x08013850

08010ee4 <__s2b>:
 8010ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ee8:	460c      	mov	r4, r1
 8010eea:	4615      	mov	r5, r2
 8010eec:	461f      	mov	r7, r3
 8010eee:	2209      	movs	r2, #9
 8010ef0:	3308      	adds	r3, #8
 8010ef2:	4606      	mov	r6, r0
 8010ef4:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ef8:	2100      	movs	r1, #0
 8010efa:	2201      	movs	r2, #1
 8010efc:	429a      	cmp	r2, r3
 8010efe:	db09      	blt.n	8010f14 <__s2b+0x30>
 8010f00:	4630      	mov	r0, r6
 8010f02:	f7ff ff47 	bl	8010d94 <_Balloc>
 8010f06:	b940      	cbnz	r0, 8010f1a <__s2b+0x36>
 8010f08:	4602      	mov	r2, r0
 8010f0a:	4b19      	ldr	r3, [pc, #100]	; (8010f70 <__s2b+0x8c>)
 8010f0c:	4819      	ldr	r0, [pc, #100]	; (8010f74 <__s2b+0x90>)
 8010f0e:	21ce      	movs	r1, #206	; 0xce
 8010f10:	f000 fee0 	bl	8011cd4 <__assert_func>
 8010f14:	0052      	lsls	r2, r2, #1
 8010f16:	3101      	adds	r1, #1
 8010f18:	e7f0      	b.n	8010efc <__s2b+0x18>
 8010f1a:	9b08      	ldr	r3, [sp, #32]
 8010f1c:	6143      	str	r3, [r0, #20]
 8010f1e:	2d09      	cmp	r5, #9
 8010f20:	f04f 0301 	mov.w	r3, #1
 8010f24:	6103      	str	r3, [r0, #16]
 8010f26:	dd16      	ble.n	8010f56 <__s2b+0x72>
 8010f28:	f104 0909 	add.w	r9, r4, #9
 8010f2c:	46c8      	mov	r8, r9
 8010f2e:	442c      	add	r4, r5
 8010f30:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010f34:	4601      	mov	r1, r0
 8010f36:	3b30      	subs	r3, #48	; 0x30
 8010f38:	220a      	movs	r2, #10
 8010f3a:	4630      	mov	r0, r6
 8010f3c:	f7ff ff8c 	bl	8010e58 <__multadd>
 8010f40:	45a0      	cmp	r8, r4
 8010f42:	d1f5      	bne.n	8010f30 <__s2b+0x4c>
 8010f44:	f1a5 0408 	sub.w	r4, r5, #8
 8010f48:	444c      	add	r4, r9
 8010f4a:	1b2d      	subs	r5, r5, r4
 8010f4c:	1963      	adds	r3, r4, r5
 8010f4e:	42bb      	cmp	r3, r7
 8010f50:	db04      	blt.n	8010f5c <__s2b+0x78>
 8010f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f56:	340a      	adds	r4, #10
 8010f58:	2509      	movs	r5, #9
 8010f5a:	e7f6      	b.n	8010f4a <__s2b+0x66>
 8010f5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010f60:	4601      	mov	r1, r0
 8010f62:	3b30      	subs	r3, #48	; 0x30
 8010f64:	220a      	movs	r2, #10
 8010f66:	4630      	mov	r0, r6
 8010f68:	f7ff ff76 	bl	8010e58 <__multadd>
 8010f6c:	e7ee      	b.n	8010f4c <__s2b+0x68>
 8010f6e:	bf00      	nop
 8010f70:	08013760 	.word	0x08013760
 8010f74:	08013850 	.word	0x08013850

08010f78 <__hi0bits>:
 8010f78:	0c03      	lsrs	r3, r0, #16
 8010f7a:	041b      	lsls	r3, r3, #16
 8010f7c:	b9d3      	cbnz	r3, 8010fb4 <__hi0bits+0x3c>
 8010f7e:	0400      	lsls	r0, r0, #16
 8010f80:	2310      	movs	r3, #16
 8010f82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010f86:	bf04      	itt	eq
 8010f88:	0200      	lsleq	r0, r0, #8
 8010f8a:	3308      	addeq	r3, #8
 8010f8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010f90:	bf04      	itt	eq
 8010f92:	0100      	lsleq	r0, r0, #4
 8010f94:	3304      	addeq	r3, #4
 8010f96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010f9a:	bf04      	itt	eq
 8010f9c:	0080      	lsleq	r0, r0, #2
 8010f9e:	3302      	addeq	r3, #2
 8010fa0:	2800      	cmp	r0, #0
 8010fa2:	db05      	blt.n	8010fb0 <__hi0bits+0x38>
 8010fa4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010fa8:	f103 0301 	add.w	r3, r3, #1
 8010fac:	bf08      	it	eq
 8010fae:	2320      	moveq	r3, #32
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	4770      	bx	lr
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	e7e4      	b.n	8010f82 <__hi0bits+0xa>

08010fb8 <__lo0bits>:
 8010fb8:	6803      	ldr	r3, [r0, #0]
 8010fba:	f013 0207 	ands.w	r2, r3, #7
 8010fbe:	4601      	mov	r1, r0
 8010fc0:	d00b      	beq.n	8010fda <__lo0bits+0x22>
 8010fc2:	07da      	lsls	r2, r3, #31
 8010fc4:	d423      	bmi.n	801100e <__lo0bits+0x56>
 8010fc6:	0798      	lsls	r0, r3, #30
 8010fc8:	bf49      	itett	mi
 8010fca:	085b      	lsrmi	r3, r3, #1
 8010fcc:	089b      	lsrpl	r3, r3, #2
 8010fce:	2001      	movmi	r0, #1
 8010fd0:	600b      	strmi	r3, [r1, #0]
 8010fd2:	bf5c      	itt	pl
 8010fd4:	600b      	strpl	r3, [r1, #0]
 8010fd6:	2002      	movpl	r0, #2
 8010fd8:	4770      	bx	lr
 8010fda:	b298      	uxth	r0, r3
 8010fdc:	b9a8      	cbnz	r0, 801100a <__lo0bits+0x52>
 8010fde:	0c1b      	lsrs	r3, r3, #16
 8010fe0:	2010      	movs	r0, #16
 8010fe2:	b2da      	uxtb	r2, r3
 8010fe4:	b90a      	cbnz	r2, 8010fea <__lo0bits+0x32>
 8010fe6:	3008      	adds	r0, #8
 8010fe8:	0a1b      	lsrs	r3, r3, #8
 8010fea:	071a      	lsls	r2, r3, #28
 8010fec:	bf04      	itt	eq
 8010fee:	091b      	lsreq	r3, r3, #4
 8010ff0:	3004      	addeq	r0, #4
 8010ff2:	079a      	lsls	r2, r3, #30
 8010ff4:	bf04      	itt	eq
 8010ff6:	089b      	lsreq	r3, r3, #2
 8010ff8:	3002      	addeq	r0, #2
 8010ffa:	07da      	lsls	r2, r3, #31
 8010ffc:	d403      	bmi.n	8011006 <__lo0bits+0x4e>
 8010ffe:	085b      	lsrs	r3, r3, #1
 8011000:	f100 0001 	add.w	r0, r0, #1
 8011004:	d005      	beq.n	8011012 <__lo0bits+0x5a>
 8011006:	600b      	str	r3, [r1, #0]
 8011008:	4770      	bx	lr
 801100a:	4610      	mov	r0, r2
 801100c:	e7e9      	b.n	8010fe2 <__lo0bits+0x2a>
 801100e:	2000      	movs	r0, #0
 8011010:	4770      	bx	lr
 8011012:	2020      	movs	r0, #32
 8011014:	4770      	bx	lr
	...

08011018 <__i2b>:
 8011018:	b510      	push	{r4, lr}
 801101a:	460c      	mov	r4, r1
 801101c:	2101      	movs	r1, #1
 801101e:	f7ff feb9 	bl	8010d94 <_Balloc>
 8011022:	4602      	mov	r2, r0
 8011024:	b928      	cbnz	r0, 8011032 <__i2b+0x1a>
 8011026:	4b05      	ldr	r3, [pc, #20]	; (801103c <__i2b+0x24>)
 8011028:	4805      	ldr	r0, [pc, #20]	; (8011040 <__i2b+0x28>)
 801102a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801102e:	f000 fe51 	bl	8011cd4 <__assert_func>
 8011032:	2301      	movs	r3, #1
 8011034:	6144      	str	r4, [r0, #20]
 8011036:	6103      	str	r3, [r0, #16]
 8011038:	bd10      	pop	{r4, pc}
 801103a:	bf00      	nop
 801103c:	08013760 	.word	0x08013760
 8011040:	08013850 	.word	0x08013850

08011044 <__multiply>:
 8011044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011048:	4691      	mov	r9, r2
 801104a:	690a      	ldr	r2, [r1, #16]
 801104c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011050:	429a      	cmp	r2, r3
 8011052:	bfb8      	it	lt
 8011054:	460b      	movlt	r3, r1
 8011056:	460c      	mov	r4, r1
 8011058:	bfbc      	itt	lt
 801105a:	464c      	movlt	r4, r9
 801105c:	4699      	movlt	r9, r3
 801105e:	6927      	ldr	r7, [r4, #16]
 8011060:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011064:	68a3      	ldr	r3, [r4, #8]
 8011066:	6861      	ldr	r1, [r4, #4]
 8011068:	eb07 060a 	add.w	r6, r7, sl
 801106c:	42b3      	cmp	r3, r6
 801106e:	b085      	sub	sp, #20
 8011070:	bfb8      	it	lt
 8011072:	3101      	addlt	r1, #1
 8011074:	f7ff fe8e 	bl	8010d94 <_Balloc>
 8011078:	b930      	cbnz	r0, 8011088 <__multiply+0x44>
 801107a:	4602      	mov	r2, r0
 801107c:	4b44      	ldr	r3, [pc, #272]	; (8011190 <__multiply+0x14c>)
 801107e:	4845      	ldr	r0, [pc, #276]	; (8011194 <__multiply+0x150>)
 8011080:	f240 115d 	movw	r1, #349	; 0x15d
 8011084:	f000 fe26 	bl	8011cd4 <__assert_func>
 8011088:	f100 0514 	add.w	r5, r0, #20
 801108c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011090:	462b      	mov	r3, r5
 8011092:	2200      	movs	r2, #0
 8011094:	4543      	cmp	r3, r8
 8011096:	d321      	bcc.n	80110dc <__multiply+0x98>
 8011098:	f104 0314 	add.w	r3, r4, #20
 801109c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80110a0:	f109 0314 	add.w	r3, r9, #20
 80110a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80110a8:	9202      	str	r2, [sp, #8]
 80110aa:	1b3a      	subs	r2, r7, r4
 80110ac:	3a15      	subs	r2, #21
 80110ae:	f022 0203 	bic.w	r2, r2, #3
 80110b2:	3204      	adds	r2, #4
 80110b4:	f104 0115 	add.w	r1, r4, #21
 80110b8:	428f      	cmp	r7, r1
 80110ba:	bf38      	it	cc
 80110bc:	2204      	movcc	r2, #4
 80110be:	9201      	str	r2, [sp, #4]
 80110c0:	9a02      	ldr	r2, [sp, #8]
 80110c2:	9303      	str	r3, [sp, #12]
 80110c4:	429a      	cmp	r2, r3
 80110c6:	d80c      	bhi.n	80110e2 <__multiply+0x9e>
 80110c8:	2e00      	cmp	r6, #0
 80110ca:	dd03      	ble.n	80110d4 <__multiply+0x90>
 80110cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d05a      	beq.n	801118a <__multiply+0x146>
 80110d4:	6106      	str	r6, [r0, #16]
 80110d6:	b005      	add	sp, #20
 80110d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110dc:	f843 2b04 	str.w	r2, [r3], #4
 80110e0:	e7d8      	b.n	8011094 <__multiply+0x50>
 80110e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80110e6:	f1ba 0f00 	cmp.w	sl, #0
 80110ea:	d024      	beq.n	8011136 <__multiply+0xf2>
 80110ec:	f104 0e14 	add.w	lr, r4, #20
 80110f0:	46a9      	mov	r9, r5
 80110f2:	f04f 0c00 	mov.w	ip, #0
 80110f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80110fa:	f8d9 1000 	ldr.w	r1, [r9]
 80110fe:	fa1f fb82 	uxth.w	fp, r2
 8011102:	b289      	uxth	r1, r1
 8011104:	fb0a 110b 	mla	r1, sl, fp, r1
 8011108:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801110c:	f8d9 2000 	ldr.w	r2, [r9]
 8011110:	4461      	add	r1, ip
 8011112:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011116:	fb0a c20b 	mla	r2, sl, fp, ip
 801111a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801111e:	b289      	uxth	r1, r1
 8011120:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011124:	4577      	cmp	r7, lr
 8011126:	f849 1b04 	str.w	r1, [r9], #4
 801112a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801112e:	d8e2      	bhi.n	80110f6 <__multiply+0xb2>
 8011130:	9a01      	ldr	r2, [sp, #4]
 8011132:	f845 c002 	str.w	ip, [r5, r2]
 8011136:	9a03      	ldr	r2, [sp, #12]
 8011138:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801113c:	3304      	adds	r3, #4
 801113e:	f1b9 0f00 	cmp.w	r9, #0
 8011142:	d020      	beq.n	8011186 <__multiply+0x142>
 8011144:	6829      	ldr	r1, [r5, #0]
 8011146:	f104 0c14 	add.w	ip, r4, #20
 801114a:	46ae      	mov	lr, r5
 801114c:	f04f 0a00 	mov.w	sl, #0
 8011150:	f8bc b000 	ldrh.w	fp, [ip]
 8011154:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011158:	fb09 220b 	mla	r2, r9, fp, r2
 801115c:	4492      	add	sl, r2
 801115e:	b289      	uxth	r1, r1
 8011160:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011164:	f84e 1b04 	str.w	r1, [lr], #4
 8011168:	f85c 2b04 	ldr.w	r2, [ip], #4
 801116c:	f8be 1000 	ldrh.w	r1, [lr]
 8011170:	0c12      	lsrs	r2, r2, #16
 8011172:	fb09 1102 	mla	r1, r9, r2, r1
 8011176:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801117a:	4567      	cmp	r7, ip
 801117c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011180:	d8e6      	bhi.n	8011150 <__multiply+0x10c>
 8011182:	9a01      	ldr	r2, [sp, #4]
 8011184:	50a9      	str	r1, [r5, r2]
 8011186:	3504      	adds	r5, #4
 8011188:	e79a      	b.n	80110c0 <__multiply+0x7c>
 801118a:	3e01      	subs	r6, #1
 801118c:	e79c      	b.n	80110c8 <__multiply+0x84>
 801118e:	bf00      	nop
 8011190:	08013760 	.word	0x08013760
 8011194:	08013850 	.word	0x08013850

08011198 <__pow5mult>:
 8011198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801119c:	4615      	mov	r5, r2
 801119e:	f012 0203 	ands.w	r2, r2, #3
 80111a2:	4606      	mov	r6, r0
 80111a4:	460f      	mov	r7, r1
 80111a6:	d007      	beq.n	80111b8 <__pow5mult+0x20>
 80111a8:	4c25      	ldr	r4, [pc, #148]	; (8011240 <__pow5mult+0xa8>)
 80111aa:	3a01      	subs	r2, #1
 80111ac:	2300      	movs	r3, #0
 80111ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80111b2:	f7ff fe51 	bl	8010e58 <__multadd>
 80111b6:	4607      	mov	r7, r0
 80111b8:	10ad      	asrs	r5, r5, #2
 80111ba:	d03d      	beq.n	8011238 <__pow5mult+0xa0>
 80111bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80111be:	b97c      	cbnz	r4, 80111e0 <__pow5mult+0x48>
 80111c0:	2010      	movs	r0, #16
 80111c2:	f7ff fdcd 	bl	8010d60 <malloc>
 80111c6:	4602      	mov	r2, r0
 80111c8:	6270      	str	r0, [r6, #36]	; 0x24
 80111ca:	b928      	cbnz	r0, 80111d8 <__pow5mult+0x40>
 80111cc:	4b1d      	ldr	r3, [pc, #116]	; (8011244 <__pow5mult+0xac>)
 80111ce:	481e      	ldr	r0, [pc, #120]	; (8011248 <__pow5mult+0xb0>)
 80111d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80111d4:	f000 fd7e 	bl	8011cd4 <__assert_func>
 80111d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80111dc:	6004      	str	r4, [r0, #0]
 80111de:	60c4      	str	r4, [r0, #12]
 80111e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80111e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80111e8:	b94c      	cbnz	r4, 80111fe <__pow5mult+0x66>
 80111ea:	f240 2171 	movw	r1, #625	; 0x271
 80111ee:	4630      	mov	r0, r6
 80111f0:	f7ff ff12 	bl	8011018 <__i2b>
 80111f4:	2300      	movs	r3, #0
 80111f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80111fa:	4604      	mov	r4, r0
 80111fc:	6003      	str	r3, [r0, #0]
 80111fe:	f04f 0900 	mov.w	r9, #0
 8011202:	07eb      	lsls	r3, r5, #31
 8011204:	d50a      	bpl.n	801121c <__pow5mult+0x84>
 8011206:	4639      	mov	r1, r7
 8011208:	4622      	mov	r2, r4
 801120a:	4630      	mov	r0, r6
 801120c:	f7ff ff1a 	bl	8011044 <__multiply>
 8011210:	4639      	mov	r1, r7
 8011212:	4680      	mov	r8, r0
 8011214:	4630      	mov	r0, r6
 8011216:	f7ff fdfd 	bl	8010e14 <_Bfree>
 801121a:	4647      	mov	r7, r8
 801121c:	106d      	asrs	r5, r5, #1
 801121e:	d00b      	beq.n	8011238 <__pow5mult+0xa0>
 8011220:	6820      	ldr	r0, [r4, #0]
 8011222:	b938      	cbnz	r0, 8011234 <__pow5mult+0x9c>
 8011224:	4622      	mov	r2, r4
 8011226:	4621      	mov	r1, r4
 8011228:	4630      	mov	r0, r6
 801122a:	f7ff ff0b 	bl	8011044 <__multiply>
 801122e:	6020      	str	r0, [r4, #0]
 8011230:	f8c0 9000 	str.w	r9, [r0]
 8011234:	4604      	mov	r4, r0
 8011236:	e7e4      	b.n	8011202 <__pow5mult+0x6a>
 8011238:	4638      	mov	r0, r7
 801123a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801123e:	bf00      	nop
 8011240:	080139a0 	.word	0x080139a0
 8011244:	080136ee 	.word	0x080136ee
 8011248:	08013850 	.word	0x08013850

0801124c <__lshift>:
 801124c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011250:	460c      	mov	r4, r1
 8011252:	6849      	ldr	r1, [r1, #4]
 8011254:	6923      	ldr	r3, [r4, #16]
 8011256:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801125a:	68a3      	ldr	r3, [r4, #8]
 801125c:	4607      	mov	r7, r0
 801125e:	4691      	mov	r9, r2
 8011260:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011264:	f108 0601 	add.w	r6, r8, #1
 8011268:	42b3      	cmp	r3, r6
 801126a:	db0b      	blt.n	8011284 <__lshift+0x38>
 801126c:	4638      	mov	r0, r7
 801126e:	f7ff fd91 	bl	8010d94 <_Balloc>
 8011272:	4605      	mov	r5, r0
 8011274:	b948      	cbnz	r0, 801128a <__lshift+0x3e>
 8011276:	4602      	mov	r2, r0
 8011278:	4b2a      	ldr	r3, [pc, #168]	; (8011324 <__lshift+0xd8>)
 801127a:	482b      	ldr	r0, [pc, #172]	; (8011328 <__lshift+0xdc>)
 801127c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011280:	f000 fd28 	bl	8011cd4 <__assert_func>
 8011284:	3101      	adds	r1, #1
 8011286:	005b      	lsls	r3, r3, #1
 8011288:	e7ee      	b.n	8011268 <__lshift+0x1c>
 801128a:	2300      	movs	r3, #0
 801128c:	f100 0114 	add.w	r1, r0, #20
 8011290:	f100 0210 	add.w	r2, r0, #16
 8011294:	4618      	mov	r0, r3
 8011296:	4553      	cmp	r3, sl
 8011298:	db37      	blt.n	801130a <__lshift+0xbe>
 801129a:	6920      	ldr	r0, [r4, #16]
 801129c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80112a0:	f104 0314 	add.w	r3, r4, #20
 80112a4:	f019 091f 	ands.w	r9, r9, #31
 80112a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80112ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80112b0:	d02f      	beq.n	8011312 <__lshift+0xc6>
 80112b2:	f1c9 0e20 	rsb	lr, r9, #32
 80112b6:	468a      	mov	sl, r1
 80112b8:	f04f 0c00 	mov.w	ip, #0
 80112bc:	681a      	ldr	r2, [r3, #0]
 80112be:	fa02 f209 	lsl.w	r2, r2, r9
 80112c2:	ea42 020c 	orr.w	r2, r2, ip
 80112c6:	f84a 2b04 	str.w	r2, [sl], #4
 80112ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80112ce:	4298      	cmp	r0, r3
 80112d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80112d4:	d8f2      	bhi.n	80112bc <__lshift+0x70>
 80112d6:	1b03      	subs	r3, r0, r4
 80112d8:	3b15      	subs	r3, #21
 80112da:	f023 0303 	bic.w	r3, r3, #3
 80112de:	3304      	adds	r3, #4
 80112e0:	f104 0215 	add.w	r2, r4, #21
 80112e4:	4290      	cmp	r0, r2
 80112e6:	bf38      	it	cc
 80112e8:	2304      	movcc	r3, #4
 80112ea:	f841 c003 	str.w	ip, [r1, r3]
 80112ee:	f1bc 0f00 	cmp.w	ip, #0
 80112f2:	d001      	beq.n	80112f8 <__lshift+0xac>
 80112f4:	f108 0602 	add.w	r6, r8, #2
 80112f8:	3e01      	subs	r6, #1
 80112fa:	4638      	mov	r0, r7
 80112fc:	612e      	str	r6, [r5, #16]
 80112fe:	4621      	mov	r1, r4
 8011300:	f7ff fd88 	bl	8010e14 <_Bfree>
 8011304:	4628      	mov	r0, r5
 8011306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801130a:	f842 0f04 	str.w	r0, [r2, #4]!
 801130e:	3301      	adds	r3, #1
 8011310:	e7c1      	b.n	8011296 <__lshift+0x4a>
 8011312:	3904      	subs	r1, #4
 8011314:	f853 2b04 	ldr.w	r2, [r3], #4
 8011318:	f841 2f04 	str.w	r2, [r1, #4]!
 801131c:	4298      	cmp	r0, r3
 801131e:	d8f9      	bhi.n	8011314 <__lshift+0xc8>
 8011320:	e7ea      	b.n	80112f8 <__lshift+0xac>
 8011322:	bf00      	nop
 8011324:	08013760 	.word	0x08013760
 8011328:	08013850 	.word	0x08013850

0801132c <__mcmp>:
 801132c:	b530      	push	{r4, r5, lr}
 801132e:	6902      	ldr	r2, [r0, #16]
 8011330:	690c      	ldr	r4, [r1, #16]
 8011332:	1b12      	subs	r2, r2, r4
 8011334:	d10e      	bne.n	8011354 <__mcmp+0x28>
 8011336:	f100 0314 	add.w	r3, r0, #20
 801133a:	3114      	adds	r1, #20
 801133c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011340:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011344:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011348:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801134c:	42a5      	cmp	r5, r4
 801134e:	d003      	beq.n	8011358 <__mcmp+0x2c>
 8011350:	d305      	bcc.n	801135e <__mcmp+0x32>
 8011352:	2201      	movs	r2, #1
 8011354:	4610      	mov	r0, r2
 8011356:	bd30      	pop	{r4, r5, pc}
 8011358:	4283      	cmp	r3, r0
 801135a:	d3f3      	bcc.n	8011344 <__mcmp+0x18>
 801135c:	e7fa      	b.n	8011354 <__mcmp+0x28>
 801135e:	f04f 32ff 	mov.w	r2, #4294967295
 8011362:	e7f7      	b.n	8011354 <__mcmp+0x28>

08011364 <__mdiff>:
 8011364:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011368:	460c      	mov	r4, r1
 801136a:	4606      	mov	r6, r0
 801136c:	4611      	mov	r1, r2
 801136e:	4620      	mov	r0, r4
 8011370:	4690      	mov	r8, r2
 8011372:	f7ff ffdb 	bl	801132c <__mcmp>
 8011376:	1e05      	subs	r5, r0, #0
 8011378:	d110      	bne.n	801139c <__mdiff+0x38>
 801137a:	4629      	mov	r1, r5
 801137c:	4630      	mov	r0, r6
 801137e:	f7ff fd09 	bl	8010d94 <_Balloc>
 8011382:	b930      	cbnz	r0, 8011392 <__mdiff+0x2e>
 8011384:	4b3a      	ldr	r3, [pc, #232]	; (8011470 <__mdiff+0x10c>)
 8011386:	4602      	mov	r2, r0
 8011388:	f240 2132 	movw	r1, #562	; 0x232
 801138c:	4839      	ldr	r0, [pc, #228]	; (8011474 <__mdiff+0x110>)
 801138e:	f000 fca1 	bl	8011cd4 <__assert_func>
 8011392:	2301      	movs	r3, #1
 8011394:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011398:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801139c:	bfa4      	itt	ge
 801139e:	4643      	movge	r3, r8
 80113a0:	46a0      	movge	r8, r4
 80113a2:	4630      	mov	r0, r6
 80113a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80113a8:	bfa6      	itte	ge
 80113aa:	461c      	movge	r4, r3
 80113ac:	2500      	movge	r5, #0
 80113ae:	2501      	movlt	r5, #1
 80113b0:	f7ff fcf0 	bl	8010d94 <_Balloc>
 80113b4:	b920      	cbnz	r0, 80113c0 <__mdiff+0x5c>
 80113b6:	4b2e      	ldr	r3, [pc, #184]	; (8011470 <__mdiff+0x10c>)
 80113b8:	4602      	mov	r2, r0
 80113ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 80113be:	e7e5      	b.n	801138c <__mdiff+0x28>
 80113c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80113c4:	6926      	ldr	r6, [r4, #16]
 80113c6:	60c5      	str	r5, [r0, #12]
 80113c8:	f104 0914 	add.w	r9, r4, #20
 80113cc:	f108 0514 	add.w	r5, r8, #20
 80113d0:	f100 0e14 	add.w	lr, r0, #20
 80113d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80113d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80113dc:	f108 0210 	add.w	r2, r8, #16
 80113e0:	46f2      	mov	sl, lr
 80113e2:	2100      	movs	r1, #0
 80113e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80113e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80113ec:	fa1f f883 	uxth.w	r8, r3
 80113f0:	fa11 f18b 	uxtah	r1, r1, fp
 80113f4:	0c1b      	lsrs	r3, r3, #16
 80113f6:	eba1 0808 	sub.w	r8, r1, r8
 80113fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80113fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011402:	fa1f f888 	uxth.w	r8, r8
 8011406:	1419      	asrs	r1, r3, #16
 8011408:	454e      	cmp	r6, r9
 801140a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801140e:	f84a 3b04 	str.w	r3, [sl], #4
 8011412:	d8e7      	bhi.n	80113e4 <__mdiff+0x80>
 8011414:	1b33      	subs	r3, r6, r4
 8011416:	3b15      	subs	r3, #21
 8011418:	f023 0303 	bic.w	r3, r3, #3
 801141c:	3304      	adds	r3, #4
 801141e:	3415      	adds	r4, #21
 8011420:	42a6      	cmp	r6, r4
 8011422:	bf38      	it	cc
 8011424:	2304      	movcc	r3, #4
 8011426:	441d      	add	r5, r3
 8011428:	4473      	add	r3, lr
 801142a:	469e      	mov	lr, r3
 801142c:	462e      	mov	r6, r5
 801142e:	4566      	cmp	r6, ip
 8011430:	d30e      	bcc.n	8011450 <__mdiff+0xec>
 8011432:	f10c 0203 	add.w	r2, ip, #3
 8011436:	1b52      	subs	r2, r2, r5
 8011438:	f022 0203 	bic.w	r2, r2, #3
 801143c:	3d03      	subs	r5, #3
 801143e:	45ac      	cmp	ip, r5
 8011440:	bf38      	it	cc
 8011442:	2200      	movcc	r2, #0
 8011444:	441a      	add	r2, r3
 8011446:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801144a:	b17b      	cbz	r3, 801146c <__mdiff+0x108>
 801144c:	6107      	str	r7, [r0, #16]
 801144e:	e7a3      	b.n	8011398 <__mdiff+0x34>
 8011450:	f856 8b04 	ldr.w	r8, [r6], #4
 8011454:	fa11 f288 	uxtah	r2, r1, r8
 8011458:	1414      	asrs	r4, r2, #16
 801145a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801145e:	b292      	uxth	r2, r2
 8011460:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011464:	f84e 2b04 	str.w	r2, [lr], #4
 8011468:	1421      	asrs	r1, r4, #16
 801146a:	e7e0      	b.n	801142e <__mdiff+0xca>
 801146c:	3f01      	subs	r7, #1
 801146e:	e7ea      	b.n	8011446 <__mdiff+0xe2>
 8011470:	08013760 	.word	0x08013760
 8011474:	08013850 	.word	0x08013850

08011478 <__ulp>:
 8011478:	b082      	sub	sp, #8
 801147a:	ed8d 0b00 	vstr	d0, [sp]
 801147e:	9b01      	ldr	r3, [sp, #4]
 8011480:	4912      	ldr	r1, [pc, #72]	; (80114cc <__ulp+0x54>)
 8011482:	4019      	ands	r1, r3
 8011484:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011488:	2900      	cmp	r1, #0
 801148a:	dd05      	ble.n	8011498 <__ulp+0x20>
 801148c:	2200      	movs	r2, #0
 801148e:	460b      	mov	r3, r1
 8011490:	ec43 2b10 	vmov	d0, r2, r3
 8011494:	b002      	add	sp, #8
 8011496:	4770      	bx	lr
 8011498:	4249      	negs	r1, r1
 801149a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801149e:	ea4f 5021 	mov.w	r0, r1, asr #20
 80114a2:	f04f 0200 	mov.w	r2, #0
 80114a6:	f04f 0300 	mov.w	r3, #0
 80114aa:	da04      	bge.n	80114b6 <__ulp+0x3e>
 80114ac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80114b0:	fa41 f300 	asr.w	r3, r1, r0
 80114b4:	e7ec      	b.n	8011490 <__ulp+0x18>
 80114b6:	f1a0 0114 	sub.w	r1, r0, #20
 80114ba:	291e      	cmp	r1, #30
 80114bc:	bfda      	itte	le
 80114be:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80114c2:	fa20 f101 	lsrle.w	r1, r0, r1
 80114c6:	2101      	movgt	r1, #1
 80114c8:	460a      	mov	r2, r1
 80114ca:	e7e1      	b.n	8011490 <__ulp+0x18>
 80114cc:	7ff00000 	.word	0x7ff00000

080114d0 <__b2d>:
 80114d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114d2:	6905      	ldr	r5, [r0, #16]
 80114d4:	f100 0714 	add.w	r7, r0, #20
 80114d8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80114dc:	1f2e      	subs	r6, r5, #4
 80114de:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80114e2:	4620      	mov	r0, r4
 80114e4:	f7ff fd48 	bl	8010f78 <__hi0bits>
 80114e8:	f1c0 0320 	rsb	r3, r0, #32
 80114ec:	280a      	cmp	r0, #10
 80114ee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801156c <__b2d+0x9c>
 80114f2:	600b      	str	r3, [r1, #0]
 80114f4:	dc14      	bgt.n	8011520 <__b2d+0x50>
 80114f6:	f1c0 0e0b 	rsb	lr, r0, #11
 80114fa:	fa24 f10e 	lsr.w	r1, r4, lr
 80114fe:	42b7      	cmp	r7, r6
 8011500:	ea41 030c 	orr.w	r3, r1, ip
 8011504:	bf34      	ite	cc
 8011506:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801150a:	2100      	movcs	r1, #0
 801150c:	3015      	adds	r0, #21
 801150e:	fa04 f000 	lsl.w	r0, r4, r0
 8011512:	fa21 f10e 	lsr.w	r1, r1, lr
 8011516:	ea40 0201 	orr.w	r2, r0, r1
 801151a:	ec43 2b10 	vmov	d0, r2, r3
 801151e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011520:	42b7      	cmp	r7, r6
 8011522:	bf3a      	itte	cc
 8011524:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011528:	f1a5 0608 	subcc.w	r6, r5, #8
 801152c:	2100      	movcs	r1, #0
 801152e:	380b      	subs	r0, #11
 8011530:	d017      	beq.n	8011562 <__b2d+0x92>
 8011532:	f1c0 0c20 	rsb	ip, r0, #32
 8011536:	fa04 f500 	lsl.w	r5, r4, r0
 801153a:	42be      	cmp	r6, r7
 801153c:	fa21 f40c 	lsr.w	r4, r1, ip
 8011540:	ea45 0504 	orr.w	r5, r5, r4
 8011544:	bf8c      	ite	hi
 8011546:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801154a:	2400      	movls	r4, #0
 801154c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011550:	fa01 f000 	lsl.w	r0, r1, r0
 8011554:	fa24 f40c 	lsr.w	r4, r4, ip
 8011558:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801155c:	ea40 0204 	orr.w	r2, r0, r4
 8011560:	e7db      	b.n	801151a <__b2d+0x4a>
 8011562:	ea44 030c 	orr.w	r3, r4, ip
 8011566:	460a      	mov	r2, r1
 8011568:	e7d7      	b.n	801151a <__b2d+0x4a>
 801156a:	bf00      	nop
 801156c:	3ff00000 	.word	0x3ff00000

08011570 <__d2b>:
 8011570:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011574:	4689      	mov	r9, r1
 8011576:	2101      	movs	r1, #1
 8011578:	ec57 6b10 	vmov	r6, r7, d0
 801157c:	4690      	mov	r8, r2
 801157e:	f7ff fc09 	bl	8010d94 <_Balloc>
 8011582:	4604      	mov	r4, r0
 8011584:	b930      	cbnz	r0, 8011594 <__d2b+0x24>
 8011586:	4602      	mov	r2, r0
 8011588:	4b25      	ldr	r3, [pc, #148]	; (8011620 <__d2b+0xb0>)
 801158a:	4826      	ldr	r0, [pc, #152]	; (8011624 <__d2b+0xb4>)
 801158c:	f240 310a 	movw	r1, #778	; 0x30a
 8011590:	f000 fba0 	bl	8011cd4 <__assert_func>
 8011594:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011598:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801159c:	bb35      	cbnz	r5, 80115ec <__d2b+0x7c>
 801159e:	2e00      	cmp	r6, #0
 80115a0:	9301      	str	r3, [sp, #4]
 80115a2:	d028      	beq.n	80115f6 <__d2b+0x86>
 80115a4:	4668      	mov	r0, sp
 80115a6:	9600      	str	r6, [sp, #0]
 80115a8:	f7ff fd06 	bl	8010fb8 <__lo0bits>
 80115ac:	9900      	ldr	r1, [sp, #0]
 80115ae:	b300      	cbz	r0, 80115f2 <__d2b+0x82>
 80115b0:	9a01      	ldr	r2, [sp, #4]
 80115b2:	f1c0 0320 	rsb	r3, r0, #32
 80115b6:	fa02 f303 	lsl.w	r3, r2, r3
 80115ba:	430b      	orrs	r3, r1
 80115bc:	40c2      	lsrs	r2, r0
 80115be:	6163      	str	r3, [r4, #20]
 80115c0:	9201      	str	r2, [sp, #4]
 80115c2:	9b01      	ldr	r3, [sp, #4]
 80115c4:	61a3      	str	r3, [r4, #24]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	bf14      	ite	ne
 80115ca:	2202      	movne	r2, #2
 80115cc:	2201      	moveq	r2, #1
 80115ce:	6122      	str	r2, [r4, #16]
 80115d0:	b1d5      	cbz	r5, 8011608 <__d2b+0x98>
 80115d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80115d6:	4405      	add	r5, r0
 80115d8:	f8c9 5000 	str.w	r5, [r9]
 80115dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80115e0:	f8c8 0000 	str.w	r0, [r8]
 80115e4:	4620      	mov	r0, r4
 80115e6:	b003      	add	sp, #12
 80115e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80115f0:	e7d5      	b.n	801159e <__d2b+0x2e>
 80115f2:	6161      	str	r1, [r4, #20]
 80115f4:	e7e5      	b.n	80115c2 <__d2b+0x52>
 80115f6:	a801      	add	r0, sp, #4
 80115f8:	f7ff fcde 	bl	8010fb8 <__lo0bits>
 80115fc:	9b01      	ldr	r3, [sp, #4]
 80115fe:	6163      	str	r3, [r4, #20]
 8011600:	2201      	movs	r2, #1
 8011602:	6122      	str	r2, [r4, #16]
 8011604:	3020      	adds	r0, #32
 8011606:	e7e3      	b.n	80115d0 <__d2b+0x60>
 8011608:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801160c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011610:	f8c9 0000 	str.w	r0, [r9]
 8011614:	6918      	ldr	r0, [r3, #16]
 8011616:	f7ff fcaf 	bl	8010f78 <__hi0bits>
 801161a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801161e:	e7df      	b.n	80115e0 <__d2b+0x70>
 8011620:	08013760 	.word	0x08013760
 8011624:	08013850 	.word	0x08013850

08011628 <__ratio>:
 8011628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801162c:	4688      	mov	r8, r1
 801162e:	4669      	mov	r1, sp
 8011630:	4681      	mov	r9, r0
 8011632:	f7ff ff4d 	bl	80114d0 <__b2d>
 8011636:	a901      	add	r1, sp, #4
 8011638:	4640      	mov	r0, r8
 801163a:	ec55 4b10 	vmov	r4, r5, d0
 801163e:	f7ff ff47 	bl	80114d0 <__b2d>
 8011642:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011646:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801164a:	eba3 0c02 	sub.w	ip, r3, r2
 801164e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011652:	1a9b      	subs	r3, r3, r2
 8011654:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011658:	ec51 0b10 	vmov	r0, r1, d0
 801165c:	2b00      	cmp	r3, #0
 801165e:	bfd6      	itet	le
 8011660:	460a      	movle	r2, r1
 8011662:	462a      	movgt	r2, r5
 8011664:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011668:	468b      	mov	fp, r1
 801166a:	462f      	mov	r7, r5
 801166c:	bfd4      	ite	le
 801166e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011672:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011676:	4620      	mov	r0, r4
 8011678:	ee10 2a10 	vmov	r2, s0
 801167c:	465b      	mov	r3, fp
 801167e:	4639      	mov	r1, r7
 8011680:	f7ef f90c 	bl	800089c <__aeabi_ddiv>
 8011684:	ec41 0b10 	vmov	d0, r0, r1
 8011688:	b003      	add	sp, #12
 801168a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801168e <__copybits>:
 801168e:	3901      	subs	r1, #1
 8011690:	b570      	push	{r4, r5, r6, lr}
 8011692:	1149      	asrs	r1, r1, #5
 8011694:	6914      	ldr	r4, [r2, #16]
 8011696:	3101      	adds	r1, #1
 8011698:	f102 0314 	add.w	r3, r2, #20
 801169c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80116a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80116a4:	1f05      	subs	r5, r0, #4
 80116a6:	42a3      	cmp	r3, r4
 80116a8:	d30c      	bcc.n	80116c4 <__copybits+0x36>
 80116aa:	1aa3      	subs	r3, r4, r2
 80116ac:	3b11      	subs	r3, #17
 80116ae:	f023 0303 	bic.w	r3, r3, #3
 80116b2:	3211      	adds	r2, #17
 80116b4:	42a2      	cmp	r2, r4
 80116b6:	bf88      	it	hi
 80116b8:	2300      	movhi	r3, #0
 80116ba:	4418      	add	r0, r3
 80116bc:	2300      	movs	r3, #0
 80116be:	4288      	cmp	r0, r1
 80116c0:	d305      	bcc.n	80116ce <__copybits+0x40>
 80116c2:	bd70      	pop	{r4, r5, r6, pc}
 80116c4:	f853 6b04 	ldr.w	r6, [r3], #4
 80116c8:	f845 6f04 	str.w	r6, [r5, #4]!
 80116cc:	e7eb      	b.n	80116a6 <__copybits+0x18>
 80116ce:	f840 3b04 	str.w	r3, [r0], #4
 80116d2:	e7f4      	b.n	80116be <__copybits+0x30>

080116d4 <__any_on>:
 80116d4:	f100 0214 	add.w	r2, r0, #20
 80116d8:	6900      	ldr	r0, [r0, #16]
 80116da:	114b      	asrs	r3, r1, #5
 80116dc:	4298      	cmp	r0, r3
 80116de:	b510      	push	{r4, lr}
 80116e0:	db11      	blt.n	8011706 <__any_on+0x32>
 80116e2:	dd0a      	ble.n	80116fa <__any_on+0x26>
 80116e4:	f011 011f 	ands.w	r1, r1, #31
 80116e8:	d007      	beq.n	80116fa <__any_on+0x26>
 80116ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80116ee:	fa24 f001 	lsr.w	r0, r4, r1
 80116f2:	fa00 f101 	lsl.w	r1, r0, r1
 80116f6:	428c      	cmp	r4, r1
 80116f8:	d10b      	bne.n	8011712 <__any_on+0x3e>
 80116fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80116fe:	4293      	cmp	r3, r2
 8011700:	d803      	bhi.n	801170a <__any_on+0x36>
 8011702:	2000      	movs	r0, #0
 8011704:	bd10      	pop	{r4, pc}
 8011706:	4603      	mov	r3, r0
 8011708:	e7f7      	b.n	80116fa <__any_on+0x26>
 801170a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801170e:	2900      	cmp	r1, #0
 8011710:	d0f5      	beq.n	80116fe <__any_on+0x2a>
 8011712:	2001      	movs	r0, #1
 8011714:	e7f6      	b.n	8011704 <__any_on+0x30>

08011716 <_calloc_r>:
 8011716:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011718:	fba1 2402 	umull	r2, r4, r1, r2
 801171c:	b94c      	cbnz	r4, 8011732 <_calloc_r+0x1c>
 801171e:	4611      	mov	r1, r2
 8011720:	9201      	str	r2, [sp, #4]
 8011722:	f000 f87b 	bl	801181c <_malloc_r>
 8011726:	9a01      	ldr	r2, [sp, #4]
 8011728:	4605      	mov	r5, r0
 801172a:	b930      	cbnz	r0, 801173a <_calloc_r+0x24>
 801172c:	4628      	mov	r0, r5
 801172e:	b003      	add	sp, #12
 8011730:	bd30      	pop	{r4, r5, pc}
 8011732:	220c      	movs	r2, #12
 8011734:	6002      	str	r2, [r0, #0]
 8011736:	2500      	movs	r5, #0
 8011738:	e7f8      	b.n	801172c <_calloc_r+0x16>
 801173a:	4621      	mov	r1, r4
 801173c:	f7fc fa86 	bl	800dc4c <memset>
 8011740:	e7f4      	b.n	801172c <_calloc_r+0x16>
	...

08011744 <_free_r>:
 8011744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011746:	2900      	cmp	r1, #0
 8011748:	d044      	beq.n	80117d4 <_free_r+0x90>
 801174a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801174e:	9001      	str	r0, [sp, #4]
 8011750:	2b00      	cmp	r3, #0
 8011752:	f1a1 0404 	sub.w	r4, r1, #4
 8011756:	bfb8      	it	lt
 8011758:	18e4      	addlt	r4, r4, r3
 801175a:	f000 fb2f 	bl	8011dbc <__malloc_lock>
 801175e:	4a1e      	ldr	r2, [pc, #120]	; (80117d8 <_free_r+0x94>)
 8011760:	9801      	ldr	r0, [sp, #4]
 8011762:	6813      	ldr	r3, [r2, #0]
 8011764:	b933      	cbnz	r3, 8011774 <_free_r+0x30>
 8011766:	6063      	str	r3, [r4, #4]
 8011768:	6014      	str	r4, [r2, #0]
 801176a:	b003      	add	sp, #12
 801176c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011770:	f000 bb2a 	b.w	8011dc8 <__malloc_unlock>
 8011774:	42a3      	cmp	r3, r4
 8011776:	d908      	bls.n	801178a <_free_r+0x46>
 8011778:	6825      	ldr	r5, [r4, #0]
 801177a:	1961      	adds	r1, r4, r5
 801177c:	428b      	cmp	r3, r1
 801177e:	bf01      	itttt	eq
 8011780:	6819      	ldreq	r1, [r3, #0]
 8011782:	685b      	ldreq	r3, [r3, #4]
 8011784:	1949      	addeq	r1, r1, r5
 8011786:	6021      	streq	r1, [r4, #0]
 8011788:	e7ed      	b.n	8011766 <_free_r+0x22>
 801178a:	461a      	mov	r2, r3
 801178c:	685b      	ldr	r3, [r3, #4]
 801178e:	b10b      	cbz	r3, 8011794 <_free_r+0x50>
 8011790:	42a3      	cmp	r3, r4
 8011792:	d9fa      	bls.n	801178a <_free_r+0x46>
 8011794:	6811      	ldr	r1, [r2, #0]
 8011796:	1855      	adds	r5, r2, r1
 8011798:	42a5      	cmp	r5, r4
 801179a:	d10b      	bne.n	80117b4 <_free_r+0x70>
 801179c:	6824      	ldr	r4, [r4, #0]
 801179e:	4421      	add	r1, r4
 80117a0:	1854      	adds	r4, r2, r1
 80117a2:	42a3      	cmp	r3, r4
 80117a4:	6011      	str	r1, [r2, #0]
 80117a6:	d1e0      	bne.n	801176a <_free_r+0x26>
 80117a8:	681c      	ldr	r4, [r3, #0]
 80117aa:	685b      	ldr	r3, [r3, #4]
 80117ac:	6053      	str	r3, [r2, #4]
 80117ae:	4421      	add	r1, r4
 80117b0:	6011      	str	r1, [r2, #0]
 80117b2:	e7da      	b.n	801176a <_free_r+0x26>
 80117b4:	d902      	bls.n	80117bc <_free_r+0x78>
 80117b6:	230c      	movs	r3, #12
 80117b8:	6003      	str	r3, [r0, #0]
 80117ba:	e7d6      	b.n	801176a <_free_r+0x26>
 80117bc:	6825      	ldr	r5, [r4, #0]
 80117be:	1961      	adds	r1, r4, r5
 80117c0:	428b      	cmp	r3, r1
 80117c2:	bf04      	itt	eq
 80117c4:	6819      	ldreq	r1, [r3, #0]
 80117c6:	685b      	ldreq	r3, [r3, #4]
 80117c8:	6063      	str	r3, [r4, #4]
 80117ca:	bf04      	itt	eq
 80117cc:	1949      	addeq	r1, r1, r5
 80117ce:	6021      	streq	r1, [r4, #0]
 80117d0:	6054      	str	r4, [r2, #4]
 80117d2:	e7ca      	b.n	801176a <_free_r+0x26>
 80117d4:	b003      	add	sp, #12
 80117d6:	bd30      	pop	{r4, r5, pc}
 80117d8:	20005188 	.word	0x20005188

080117dc <sbrk_aligned>:
 80117dc:	b570      	push	{r4, r5, r6, lr}
 80117de:	4e0e      	ldr	r6, [pc, #56]	; (8011818 <sbrk_aligned+0x3c>)
 80117e0:	460c      	mov	r4, r1
 80117e2:	6831      	ldr	r1, [r6, #0]
 80117e4:	4605      	mov	r5, r0
 80117e6:	b911      	cbnz	r1, 80117ee <sbrk_aligned+0x12>
 80117e8:	f000 f9ee 	bl	8011bc8 <_sbrk_r>
 80117ec:	6030      	str	r0, [r6, #0]
 80117ee:	4621      	mov	r1, r4
 80117f0:	4628      	mov	r0, r5
 80117f2:	f000 f9e9 	bl	8011bc8 <_sbrk_r>
 80117f6:	1c43      	adds	r3, r0, #1
 80117f8:	d00a      	beq.n	8011810 <sbrk_aligned+0x34>
 80117fa:	1cc4      	adds	r4, r0, #3
 80117fc:	f024 0403 	bic.w	r4, r4, #3
 8011800:	42a0      	cmp	r0, r4
 8011802:	d007      	beq.n	8011814 <sbrk_aligned+0x38>
 8011804:	1a21      	subs	r1, r4, r0
 8011806:	4628      	mov	r0, r5
 8011808:	f000 f9de 	bl	8011bc8 <_sbrk_r>
 801180c:	3001      	adds	r0, #1
 801180e:	d101      	bne.n	8011814 <sbrk_aligned+0x38>
 8011810:	f04f 34ff 	mov.w	r4, #4294967295
 8011814:	4620      	mov	r0, r4
 8011816:	bd70      	pop	{r4, r5, r6, pc}
 8011818:	2000518c 	.word	0x2000518c

0801181c <_malloc_r>:
 801181c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011820:	1ccd      	adds	r5, r1, #3
 8011822:	f025 0503 	bic.w	r5, r5, #3
 8011826:	3508      	adds	r5, #8
 8011828:	2d0c      	cmp	r5, #12
 801182a:	bf38      	it	cc
 801182c:	250c      	movcc	r5, #12
 801182e:	2d00      	cmp	r5, #0
 8011830:	4607      	mov	r7, r0
 8011832:	db01      	blt.n	8011838 <_malloc_r+0x1c>
 8011834:	42a9      	cmp	r1, r5
 8011836:	d905      	bls.n	8011844 <_malloc_r+0x28>
 8011838:	230c      	movs	r3, #12
 801183a:	603b      	str	r3, [r7, #0]
 801183c:	2600      	movs	r6, #0
 801183e:	4630      	mov	r0, r6
 8011840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011844:	4e2e      	ldr	r6, [pc, #184]	; (8011900 <_malloc_r+0xe4>)
 8011846:	f000 fab9 	bl	8011dbc <__malloc_lock>
 801184a:	6833      	ldr	r3, [r6, #0]
 801184c:	461c      	mov	r4, r3
 801184e:	bb34      	cbnz	r4, 801189e <_malloc_r+0x82>
 8011850:	4629      	mov	r1, r5
 8011852:	4638      	mov	r0, r7
 8011854:	f7ff ffc2 	bl	80117dc <sbrk_aligned>
 8011858:	1c43      	adds	r3, r0, #1
 801185a:	4604      	mov	r4, r0
 801185c:	d14d      	bne.n	80118fa <_malloc_r+0xde>
 801185e:	6834      	ldr	r4, [r6, #0]
 8011860:	4626      	mov	r6, r4
 8011862:	2e00      	cmp	r6, #0
 8011864:	d140      	bne.n	80118e8 <_malloc_r+0xcc>
 8011866:	6823      	ldr	r3, [r4, #0]
 8011868:	4631      	mov	r1, r6
 801186a:	4638      	mov	r0, r7
 801186c:	eb04 0803 	add.w	r8, r4, r3
 8011870:	f000 f9aa 	bl	8011bc8 <_sbrk_r>
 8011874:	4580      	cmp	r8, r0
 8011876:	d13a      	bne.n	80118ee <_malloc_r+0xd2>
 8011878:	6821      	ldr	r1, [r4, #0]
 801187a:	3503      	adds	r5, #3
 801187c:	1a6d      	subs	r5, r5, r1
 801187e:	f025 0503 	bic.w	r5, r5, #3
 8011882:	3508      	adds	r5, #8
 8011884:	2d0c      	cmp	r5, #12
 8011886:	bf38      	it	cc
 8011888:	250c      	movcc	r5, #12
 801188a:	4629      	mov	r1, r5
 801188c:	4638      	mov	r0, r7
 801188e:	f7ff ffa5 	bl	80117dc <sbrk_aligned>
 8011892:	3001      	adds	r0, #1
 8011894:	d02b      	beq.n	80118ee <_malloc_r+0xd2>
 8011896:	6823      	ldr	r3, [r4, #0]
 8011898:	442b      	add	r3, r5
 801189a:	6023      	str	r3, [r4, #0]
 801189c:	e00e      	b.n	80118bc <_malloc_r+0xa0>
 801189e:	6822      	ldr	r2, [r4, #0]
 80118a0:	1b52      	subs	r2, r2, r5
 80118a2:	d41e      	bmi.n	80118e2 <_malloc_r+0xc6>
 80118a4:	2a0b      	cmp	r2, #11
 80118a6:	d916      	bls.n	80118d6 <_malloc_r+0xba>
 80118a8:	1961      	adds	r1, r4, r5
 80118aa:	42a3      	cmp	r3, r4
 80118ac:	6025      	str	r5, [r4, #0]
 80118ae:	bf18      	it	ne
 80118b0:	6059      	strne	r1, [r3, #4]
 80118b2:	6863      	ldr	r3, [r4, #4]
 80118b4:	bf08      	it	eq
 80118b6:	6031      	streq	r1, [r6, #0]
 80118b8:	5162      	str	r2, [r4, r5]
 80118ba:	604b      	str	r3, [r1, #4]
 80118bc:	4638      	mov	r0, r7
 80118be:	f104 060b 	add.w	r6, r4, #11
 80118c2:	f000 fa81 	bl	8011dc8 <__malloc_unlock>
 80118c6:	f026 0607 	bic.w	r6, r6, #7
 80118ca:	1d23      	adds	r3, r4, #4
 80118cc:	1af2      	subs	r2, r6, r3
 80118ce:	d0b6      	beq.n	801183e <_malloc_r+0x22>
 80118d0:	1b9b      	subs	r3, r3, r6
 80118d2:	50a3      	str	r3, [r4, r2]
 80118d4:	e7b3      	b.n	801183e <_malloc_r+0x22>
 80118d6:	6862      	ldr	r2, [r4, #4]
 80118d8:	42a3      	cmp	r3, r4
 80118da:	bf0c      	ite	eq
 80118dc:	6032      	streq	r2, [r6, #0]
 80118de:	605a      	strne	r2, [r3, #4]
 80118e0:	e7ec      	b.n	80118bc <_malloc_r+0xa0>
 80118e2:	4623      	mov	r3, r4
 80118e4:	6864      	ldr	r4, [r4, #4]
 80118e6:	e7b2      	b.n	801184e <_malloc_r+0x32>
 80118e8:	4634      	mov	r4, r6
 80118ea:	6876      	ldr	r6, [r6, #4]
 80118ec:	e7b9      	b.n	8011862 <_malloc_r+0x46>
 80118ee:	230c      	movs	r3, #12
 80118f0:	603b      	str	r3, [r7, #0]
 80118f2:	4638      	mov	r0, r7
 80118f4:	f000 fa68 	bl	8011dc8 <__malloc_unlock>
 80118f8:	e7a1      	b.n	801183e <_malloc_r+0x22>
 80118fa:	6025      	str	r5, [r4, #0]
 80118fc:	e7de      	b.n	80118bc <_malloc_r+0xa0>
 80118fe:	bf00      	nop
 8011900:	20005188 	.word	0x20005188

08011904 <__sfputc_r>:
 8011904:	6893      	ldr	r3, [r2, #8]
 8011906:	3b01      	subs	r3, #1
 8011908:	2b00      	cmp	r3, #0
 801190a:	b410      	push	{r4}
 801190c:	6093      	str	r3, [r2, #8]
 801190e:	da08      	bge.n	8011922 <__sfputc_r+0x1e>
 8011910:	6994      	ldr	r4, [r2, #24]
 8011912:	42a3      	cmp	r3, r4
 8011914:	db01      	blt.n	801191a <__sfputc_r+0x16>
 8011916:	290a      	cmp	r1, #10
 8011918:	d103      	bne.n	8011922 <__sfputc_r+0x1e>
 801191a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801191e:	f7fd bd51 	b.w	800f3c4 <__swbuf_r>
 8011922:	6813      	ldr	r3, [r2, #0]
 8011924:	1c58      	adds	r0, r3, #1
 8011926:	6010      	str	r0, [r2, #0]
 8011928:	7019      	strb	r1, [r3, #0]
 801192a:	4608      	mov	r0, r1
 801192c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011930:	4770      	bx	lr

08011932 <__sfputs_r>:
 8011932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011934:	4606      	mov	r6, r0
 8011936:	460f      	mov	r7, r1
 8011938:	4614      	mov	r4, r2
 801193a:	18d5      	adds	r5, r2, r3
 801193c:	42ac      	cmp	r4, r5
 801193e:	d101      	bne.n	8011944 <__sfputs_r+0x12>
 8011940:	2000      	movs	r0, #0
 8011942:	e007      	b.n	8011954 <__sfputs_r+0x22>
 8011944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011948:	463a      	mov	r2, r7
 801194a:	4630      	mov	r0, r6
 801194c:	f7ff ffda 	bl	8011904 <__sfputc_r>
 8011950:	1c43      	adds	r3, r0, #1
 8011952:	d1f3      	bne.n	801193c <__sfputs_r+0xa>
 8011954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011958 <_vfiprintf_r>:
 8011958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801195c:	460d      	mov	r5, r1
 801195e:	b09d      	sub	sp, #116	; 0x74
 8011960:	4614      	mov	r4, r2
 8011962:	4698      	mov	r8, r3
 8011964:	4606      	mov	r6, r0
 8011966:	b118      	cbz	r0, 8011970 <_vfiprintf_r+0x18>
 8011968:	6983      	ldr	r3, [r0, #24]
 801196a:	b90b      	cbnz	r3, 8011970 <_vfiprintf_r+0x18>
 801196c:	f7fe fd80 	bl	8010470 <__sinit>
 8011970:	4b89      	ldr	r3, [pc, #548]	; (8011b98 <_vfiprintf_r+0x240>)
 8011972:	429d      	cmp	r5, r3
 8011974:	d11b      	bne.n	80119ae <_vfiprintf_r+0x56>
 8011976:	6875      	ldr	r5, [r6, #4]
 8011978:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801197a:	07d9      	lsls	r1, r3, #31
 801197c:	d405      	bmi.n	801198a <_vfiprintf_r+0x32>
 801197e:	89ab      	ldrh	r3, [r5, #12]
 8011980:	059a      	lsls	r2, r3, #22
 8011982:	d402      	bmi.n	801198a <_vfiprintf_r+0x32>
 8011984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011986:	f7ff f984 	bl	8010c92 <__retarget_lock_acquire_recursive>
 801198a:	89ab      	ldrh	r3, [r5, #12]
 801198c:	071b      	lsls	r3, r3, #28
 801198e:	d501      	bpl.n	8011994 <_vfiprintf_r+0x3c>
 8011990:	692b      	ldr	r3, [r5, #16]
 8011992:	b9eb      	cbnz	r3, 80119d0 <_vfiprintf_r+0x78>
 8011994:	4629      	mov	r1, r5
 8011996:	4630      	mov	r0, r6
 8011998:	f7fd fd66 	bl	800f468 <__swsetup_r>
 801199c:	b1c0      	cbz	r0, 80119d0 <_vfiprintf_r+0x78>
 801199e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80119a0:	07dc      	lsls	r4, r3, #31
 80119a2:	d50e      	bpl.n	80119c2 <_vfiprintf_r+0x6a>
 80119a4:	f04f 30ff 	mov.w	r0, #4294967295
 80119a8:	b01d      	add	sp, #116	; 0x74
 80119aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119ae:	4b7b      	ldr	r3, [pc, #492]	; (8011b9c <_vfiprintf_r+0x244>)
 80119b0:	429d      	cmp	r5, r3
 80119b2:	d101      	bne.n	80119b8 <_vfiprintf_r+0x60>
 80119b4:	68b5      	ldr	r5, [r6, #8]
 80119b6:	e7df      	b.n	8011978 <_vfiprintf_r+0x20>
 80119b8:	4b79      	ldr	r3, [pc, #484]	; (8011ba0 <_vfiprintf_r+0x248>)
 80119ba:	429d      	cmp	r5, r3
 80119bc:	bf08      	it	eq
 80119be:	68f5      	ldreq	r5, [r6, #12]
 80119c0:	e7da      	b.n	8011978 <_vfiprintf_r+0x20>
 80119c2:	89ab      	ldrh	r3, [r5, #12]
 80119c4:	0598      	lsls	r0, r3, #22
 80119c6:	d4ed      	bmi.n	80119a4 <_vfiprintf_r+0x4c>
 80119c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80119ca:	f7ff f963 	bl	8010c94 <__retarget_lock_release_recursive>
 80119ce:	e7e9      	b.n	80119a4 <_vfiprintf_r+0x4c>
 80119d0:	2300      	movs	r3, #0
 80119d2:	9309      	str	r3, [sp, #36]	; 0x24
 80119d4:	2320      	movs	r3, #32
 80119d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80119da:	f8cd 800c 	str.w	r8, [sp, #12]
 80119de:	2330      	movs	r3, #48	; 0x30
 80119e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011ba4 <_vfiprintf_r+0x24c>
 80119e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80119e8:	f04f 0901 	mov.w	r9, #1
 80119ec:	4623      	mov	r3, r4
 80119ee:	469a      	mov	sl, r3
 80119f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119f4:	b10a      	cbz	r2, 80119fa <_vfiprintf_r+0xa2>
 80119f6:	2a25      	cmp	r2, #37	; 0x25
 80119f8:	d1f9      	bne.n	80119ee <_vfiprintf_r+0x96>
 80119fa:	ebba 0b04 	subs.w	fp, sl, r4
 80119fe:	d00b      	beq.n	8011a18 <_vfiprintf_r+0xc0>
 8011a00:	465b      	mov	r3, fp
 8011a02:	4622      	mov	r2, r4
 8011a04:	4629      	mov	r1, r5
 8011a06:	4630      	mov	r0, r6
 8011a08:	f7ff ff93 	bl	8011932 <__sfputs_r>
 8011a0c:	3001      	adds	r0, #1
 8011a0e:	f000 80aa 	beq.w	8011b66 <_vfiprintf_r+0x20e>
 8011a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a14:	445a      	add	r2, fp
 8011a16:	9209      	str	r2, [sp, #36]	; 0x24
 8011a18:	f89a 3000 	ldrb.w	r3, [sl]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	f000 80a2 	beq.w	8011b66 <_vfiprintf_r+0x20e>
 8011a22:	2300      	movs	r3, #0
 8011a24:	f04f 32ff 	mov.w	r2, #4294967295
 8011a28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a2c:	f10a 0a01 	add.w	sl, sl, #1
 8011a30:	9304      	str	r3, [sp, #16]
 8011a32:	9307      	str	r3, [sp, #28]
 8011a34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011a38:	931a      	str	r3, [sp, #104]	; 0x68
 8011a3a:	4654      	mov	r4, sl
 8011a3c:	2205      	movs	r2, #5
 8011a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a42:	4858      	ldr	r0, [pc, #352]	; (8011ba4 <_vfiprintf_r+0x24c>)
 8011a44:	f7ee fbf4 	bl	8000230 <memchr>
 8011a48:	9a04      	ldr	r2, [sp, #16]
 8011a4a:	b9d8      	cbnz	r0, 8011a84 <_vfiprintf_r+0x12c>
 8011a4c:	06d1      	lsls	r1, r2, #27
 8011a4e:	bf44      	itt	mi
 8011a50:	2320      	movmi	r3, #32
 8011a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a56:	0713      	lsls	r3, r2, #28
 8011a58:	bf44      	itt	mi
 8011a5a:	232b      	movmi	r3, #43	; 0x2b
 8011a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a60:	f89a 3000 	ldrb.w	r3, [sl]
 8011a64:	2b2a      	cmp	r3, #42	; 0x2a
 8011a66:	d015      	beq.n	8011a94 <_vfiprintf_r+0x13c>
 8011a68:	9a07      	ldr	r2, [sp, #28]
 8011a6a:	4654      	mov	r4, sl
 8011a6c:	2000      	movs	r0, #0
 8011a6e:	f04f 0c0a 	mov.w	ip, #10
 8011a72:	4621      	mov	r1, r4
 8011a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a78:	3b30      	subs	r3, #48	; 0x30
 8011a7a:	2b09      	cmp	r3, #9
 8011a7c:	d94e      	bls.n	8011b1c <_vfiprintf_r+0x1c4>
 8011a7e:	b1b0      	cbz	r0, 8011aae <_vfiprintf_r+0x156>
 8011a80:	9207      	str	r2, [sp, #28]
 8011a82:	e014      	b.n	8011aae <_vfiprintf_r+0x156>
 8011a84:	eba0 0308 	sub.w	r3, r0, r8
 8011a88:	fa09 f303 	lsl.w	r3, r9, r3
 8011a8c:	4313      	orrs	r3, r2
 8011a8e:	9304      	str	r3, [sp, #16]
 8011a90:	46a2      	mov	sl, r4
 8011a92:	e7d2      	b.n	8011a3a <_vfiprintf_r+0xe2>
 8011a94:	9b03      	ldr	r3, [sp, #12]
 8011a96:	1d19      	adds	r1, r3, #4
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	9103      	str	r1, [sp, #12]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	bfbb      	ittet	lt
 8011aa0:	425b      	neglt	r3, r3
 8011aa2:	f042 0202 	orrlt.w	r2, r2, #2
 8011aa6:	9307      	strge	r3, [sp, #28]
 8011aa8:	9307      	strlt	r3, [sp, #28]
 8011aaa:	bfb8      	it	lt
 8011aac:	9204      	strlt	r2, [sp, #16]
 8011aae:	7823      	ldrb	r3, [r4, #0]
 8011ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8011ab2:	d10c      	bne.n	8011ace <_vfiprintf_r+0x176>
 8011ab4:	7863      	ldrb	r3, [r4, #1]
 8011ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8011ab8:	d135      	bne.n	8011b26 <_vfiprintf_r+0x1ce>
 8011aba:	9b03      	ldr	r3, [sp, #12]
 8011abc:	1d1a      	adds	r2, r3, #4
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	9203      	str	r2, [sp, #12]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	bfb8      	it	lt
 8011ac6:	f04f 33ff 	movlt.w	r3, #4294967295
 8011aca:	3402      	adds	r4, #2
 8011acc:	9305      	str	r3, [sp, #20]
 8011ace:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011bb4 <_vfiprintf_r+0x25c>
 8011ad2:	7821      	ldrb	r1, [r4, #0]
 8011ad4:	2203      	movs	r2, #3
 8011ad6:	4650      	mov	r0, sl
 8011ad8:	f7ee fbaa 	bl	8000230 <memchr>
 8011adc:	b140      	cbz	r0, 8011af0 <_vfiprintf_r+0x198>
 8011ade:	2340      	movs	r3, #64	; 0x40
 8011ae0:	eba0 000a 	sub.w	r0, r0, sl
 8011ae4:	fa03 f000 	lsl.w	r0, r3, r0
 8011ae8:	9b04      	ldr	r3, [sp, #16]
 8011aea:	4303      	orrs	r3, r0
 8011aec:	3401      	adds	r4, #1
 8011aee:	9304      	str	r3, [sp, #16]
 8011af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011af4:	482c      	ldr	r0, [pc, #176]	; (8011ba8 <_vfiprintf_r+0x250>)
 8011af6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011afa:	2206      	movs	r2, #6
 8011afc:	f7ee fb98 	bl	8000230 <memchr>
 8011b00:	2800      	cmp	r0, #0
 8011b02:	d03f      	beq.n	8011b84 <_vfiprintf_r+0x22c>
 8011b04:	4b29      	ldr	r3, [pc, #164]	; (8011bac <_vfiprintf_r+0x254>)
 8011b06:	bb1b      	cbnz	r3, 8011b50 <_vfiprintf_r+0x1f8>
 8011b08:	9b03      	ldr	r3, [sp, #12]
 8011b0a:	3307      	adds	r3, #7
 8011b0c:	f023 0307 	bic.w	r3, r3, #7
 8011b10:	3308      	adds	r3, #8
 8011b12:	9303      	str	r3, [sp, #12]
 8011b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b16:	443b      	add	r3, r7
 8011b18:	9309      	str	r3, [sp, #36]	; 0x24
 8011b1a:	e767      	b.n	80119ec <_vfiprintf_r+0x94>
 8011b1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b20:	460c      	mov	r4, r1
 8011b22:	2001      	movs	r0, #1
 8011b24:	e7a5      	b.n	8011a72 <_vfiprintf_r+0x11a>
 8011b26:	2300      	movs	r3, #0
 8011b28:	3401      	adds	r4, #1
 8011b2a:	9305      	str	r3, [sp, #20]
 8011b2c:	4619      	mov	r1, r3
 8011b2e:	f04f 0c0a 	mov.w	ip, #10
 8011b32:	4620      	mov	r0, r4
 8011b34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b38:	3a30      	subs	r2, #48	; 0x30
 8011b3a:	2a09      	cmp	r2, #9
 8011b3c:	d903      	bls.n	8011b46 <_vfiprintf_r+0x1ee>
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d0c5      	beq.n	8011ace <_vfiprintf_r+0x176>
 8011b42:	9105      	str	r1, [sp, #20]
 8011b44:	e7c3      	b.n	8011ace <_vfiprintf_r+0x176>
 8011b46:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b4a:	4604      	mov	r4, r0
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	e7f0      	b.n	8011b32 <_vfiprintf_r+0x1da>
 8011b50:	ab03      	add	r3, sp, #12
 8011b52:	9300      	str	r3, [sp, #0]
 8011b54:	462a      	mov	r2, r5
 8011b56:	4b16      	ldr	r3, [pc, #88]	; (8011bb0 <_vfiprintf_r+0x258>)
 8011b58:	a904      	add	r1, sp, #16
 8011b5a:	4630      	mov	r0, r6
 8011b5c:	f7fc f91e 	bl	800dd9c <_printf_float>
 8011b60:	4607      	mov	r7, r0
 8011b62:	1c78      	adds	r0, r7, #1
 8011b64:	d1d6      	bne.n	8011b14 <_vfiprintf_r+0x1bc>
 8011b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b68:	07d9      	lsls	r1, r3, #31
 8011b6a:	d405      	bmi.n	8011b78 <_vfiprintf_r+0x220>
 8011b6c:	89ab      	ldrh	r3, [r5, #12]
 8011b6e:	059a      	lsls	r2, r3, #22
 8011b70:	d402      	bmi.n	8011b78 <_vfiprintf_r+0x220>
 8011b72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011b74:	f7ff f88e 	bl	8010c94 <__retarget_lock_release_recursive>
 8011b78:	89ab      	ldrh	r3, [r5, #12]
 8011b7a:	065b      	lsls	r3, r3, #25
 8011b7c:	f53f af12 	bmi.w	80119a4 <_vfiprintf_r+0x4c>
 8011b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b82:	e711      	b.n	80119a8 <_vfiprintf_r+0x50>
 8011b84:	ab03      	add	r3, sp, #12
 8011b86:	9300      	str	r3, [sp, #0]
 8011b88:	462a      	mov	r2, r5
 8011b8a:	4b09      	ldr	r3, [pc, #36]	; (8011bb0 <_vfiprintf_r+0x258>)
 8011b8c:	a904      	add	r1, sp, #16
 8011b8e:	4630      	mov	r0, r6
 8011b90:	f7fc fba8 	bl	800e2e4 <_printf_i>
 8011b94:	e7e4      	b.n	8011b60 <_vfiprintf_r+0x208>
 8011b96:	bf00      	nop
 8011b98:	08013794 	.word	0x08013794
 8011b9c:	080137b4 	.word	0x080137b4
 8011ba0:	08013774 	.word	0x08013774
 8011ba4:	080139ac 	.word	0x080139ac
 8011ba8:	080139b6 	.word	0x080139b6
 8011bac:	0800dd9d 	.word	0x0800dd9d
 8011bb0:	08011933 	.word	0x08011933
 8011bb4:	080139b2 	.word	0x080139b2

08011bb8 <nan>:
 8011bb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011bc0 <nan+0x8>
 8011bbc:	4770      	bx	lr
 8011bbe:	bf00      	nop
 8011bc0:	00000000 	.word	0x00000000
 8011bc4:	7ff80000 	.word	0x7ff80000

08011bc8 <_sbrk_r>:
 8011bc8:	b538      	push	{r3, r4, r5, lr}
 8011bca:	4d06      	ldr	r5, [pc, #24]	; (8011be4 <_sbrk_r+0x1c>)
 8011bcc:	2300      	movs	r3, #0
 8011bce:	4604      	mov	r4, r0
 8011bd0:	4608      	mov	r0, r1
 8011bd2:	602b      	str	r3, [r5, #0]
 8011bd4:	f7f3 fd40 	bl	8005658 <_sbrk>
 8011bd8:	1c43      	adds	r3, r0, #1
 8011bda:	d102      	bne.n	8011be2 <_sbrk_r+0x1a>
 8011bdc:	682b      	ldr	r3, [r5, #0]
 8011bde:	b103      	cbz	r3, 8011be2 <_sbrk_r+0x1a>
 8011be0:	6023      	str	r3, [r4, #0]
 8011be2:	bd38      	pop	{r3, r4, r5, pc}
 8011be4:	20005190 	.word	0x20005190

08011be8 <__sread>:
 8011be8:	b510      	push	{r4, lr}
 8011bea:	460c      	mov	r4, r1
 8011bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bf0:	f000 f8f0 	bl	8011dd4 <_read_r>
 8011bf4:	2800      	cmp	r0, #0
 8011bf6:	bfab      	itete	ge
 8011bf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011bfa:	89a3      	ldrhlt	r3, [r4, #12]
 8011bfc:	181b      	addge	r3, r3, r0
 8011bfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011c02:	bfac      	ite	ge
 8011c04:	6563      	strge	r3, [r4, #84]	; 0x54
 8011c06:	81a3      	strhlt	r3, [r4, #12]
 8011c08:	bd10      	pop	{r4, pc}

08011c0a <__swrite>:
 8011c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c0e:	461f      	mov	r7, r3
 8011c10:	898b      	ldrh	r3, [r1, #12]
 8011c12:	05db      	lsls	r3, r3, #23
 8011c14:	4605      	mov	r5, r0
 8011c16:	460c      	mov	r4, r1
 8011c18:	4616      	mov	r6, r2
 8011c1a:	d505      	bpl.n	8011c28 <__swrite+0x1e>
 8011c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c20:	2302      	movs	r3, #2
 8011c22:	2200      	movs	r2, #0
 8011c24:	f000 f8b8 	bl	8011d98 <_lseek_r>
 8011c28:	89a3      	ldrh	r3, [r4, #12]
 8011c2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011c32:	81a3      	strh	r3, [r4, #12]
 8011c34:	4632      	mov	r2, r6
 8011c36:	463b      	mov	r3, r7
 8011c38:	4628      	mov	r0, r5
 8011c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c3e:	f000 b837 	b.w	8011cb0 <_write_r>

08011c42 <__sseek>:
 8011c42:	b510      	push	{r4, lr}
 8011c44:	460c      	mov	r4, r1
 8011c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c4a:	f000 f8a5 	bl	8011d98 <_lseek_r>
 8011c4e:	1c43      	adds	r3, r0, #1
 8011c50:	89a3      	ldrh	r3, [r4, #12]
 8011c52:	bf15      	itete	ne
 8011c54:	6560      	strne	r0, [r4, #84]	; 0x54
 8011c56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011c5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011c5e:	81a3      	strheq	r3, [r4, #12]
 8011c60:	bf18      	it	ne
 8011c62:	81a3      	strhne	r3, [r4, #12]
 8011c64:	bd10      	pop	{r4, pc}

08011c66 <__sclose>:
 8011c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c6a:	f000 b851 	b.w	8011d10 <_close_r>

08011c6e <strncmp>:
 8011c6e:	b510      	push	{r4, lr}
 8011c70:	b17a      	cbz	r2, 8011c92 <strncmp+0x24>
 8011c72:	4603      	mov	r3, r0
 8011c74:	3901      	subs	r1, #1
 8011c76:	1884      	adds	r4, r0, r2
 8011c78:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011c7c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011c80:	4290      	cmp	r0, r2
 8011c82:	d101      	bne.n	8011c88 <strncmp+0x1a>
 8011c84:	42a3      	cmp	r3, r4
 8011c86:	d101      	bne.n	8011c8c <strncmp+0x1e>
 8011c88:	1a80      	subs	r0, r0, r2
 8011c8a:	bd10      	pop	{r4, pc}
 8011c8c:	2800      	cmp	r0, #0
 8011c8e:	d1f3      	bne.n	8011c78 <strncmp+0xa>
 8011c90:	e7fa      	b.n	8011c88 <strncmp+0x1a>
 8011c92:	4610      	mov	r0, r2
 8011c94:	e7f9      	b.n	8011c8a <strncmp+0x1c>

08011c96 <__ascii_wctomb>:
 8011c96:	b149      	cbz	r1, 8011cac <__ascii_wctomb+0x16>
 8011c98:	2aff      	cmp	r2, #255	; 0xff
 8011c9a:	bf85      	ittet	hi
 8011c9c:	238a      	movhi	r3, #138	; 0x8a
 8011c9e:	6003      	strhi	r3, [r0, #0]
 8011ca0:	700a      	strbls	r2, [r1, #0]
 8011ca2:	f04f 30ff 	movhi.w	r0, #4294967295
 8011ca6:	bf98      	it	ls
 8011ca8:	2001      	movls	r0, #1
 8011caa:	4770      	bx	lr
 8011cac:	4608      	mov	r0, r1
 8011cae:	4770      	bx	lr

08011cb0 <_write_r>:
 8011cb0:	b538      	push	{r3, r4, r5, lr}
 8011cb2:	4d07      	ldr	r5, [pc, #28]	; (8011cd0 <_write_r+0x20>)
 8011cb4:	4604      	mov	r4, r0
 8011cb6:	4608      	mov	r0, r1
 8011cb8:	4611      	mov	r1, r2
 8011cba:	2200      	movs	r2, #0
 8011cbc:	602a      	str	r2, [r5, #0]
 8011cbe:	461a      	mov	r2, r3
 8011cc0:	f7f3 fc79 	bl	80055b6 <_write>
 8011cc4:	1c43      	adds	r3, r0, #1
 8011cc6:	d102      	bne.n	8011cce <_write_r+0x1e>
 8011cc8:	682b      	ldr	r3, [r5, #0]
 8011cca:	b103      	cbz	r3, 8011cce <_write_r+0x1e>
 8011ccc:	6023      	str	r3, [r4, #0]
 8011cce:	bd38      	pop	{r3, r4, r5, pc}
 8011cd0:	20005190 	.word	0x20005190

08011cd4 <__assert_func>:
 8011cd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011cd6:	4614      	mov	r4, r2
 8011cd8:	461a      	mov	r2, r3
 8011cda:	4b09      	ldr	r3, [pc, #36]	; (8011d00 <__assert_func+0x2c>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	4605      	mov	r5, r0
 8011ce0:	68d8      	ldr	r0, [r3, #12]
 8011ce2:	b14c      	cbz	r4, 8011cf8 <__assert_func+0x24>
 8011ce4:	4b07      	ldr	r3, [pc, #28]	; (8011d04 <__assert_func+0x30>)
 8011ce6:	9100      	str	r1, [sp, #0]
 8011ce8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011cec:	4906      	ldr	r1, [pc, #24]	; (8011d08 <__assert_func+0x34>)
 8011cee:	462b      	mov	r3, r5
 8011cf0:	f000 f81e 	bl	8011d30 <fiprintf>
 8011cf4:	f000 f880 	bl	8011df8 <abort>
 8011cf8:	4b04      	ldr	r3, [pc, #16]	; (8011d0c <__assert_func+0x38>)
 8011cfa:	461c      	mov	r4, r3
 8011cfc:	e7f3      	b.n	8011ce6 <__assert_func+0x12>
 8011cfe:	bf00      	nop
 8011d00:	2000002c 	.word	0x2000002c
 8011d04:	080139bd 	.word	0x080139bd
 8011d08:	080139ca 	.word	0x080139ca
 8011d0c:	080139f8 	.word	0x080139f8

08011d10 <_close_r>:
 8011d10:	b538      	push	{r3, r4, r5, lr}
 8011d12:	4d06      	ldr	r5, [pc, #24]	; (8011d2c <_close_r+0x1c>)
 8011d14:	2300      	movs	r3, #0
 8011d16:	4604      	mov	r4, r0
 8011d18:	4608      	mov	r0, r1
 8011d1a:	602b      	str	r3, [r5, #0]
 8011d1c:	f7f3 fc67 	bl	80055ee <_close>
 8011d20:	1c43      	adds	r3, r0, #1
 8011d22:	d102      	bne.n	8011d2a <_close_r+0x1a>
 8011d24:	682b      	ldr	r3, [r5, #0]
 8011d26:	b103      	cbz	r3, 8011d2a <_close_r+0x1a>
 8011d28:	6023      	str	r3, [r4, #0]
 8011d2a:	bd38      	pop	{r3, r4, r5, pc}
 8011d2c:	20005190 	.word	0x20005190

08011d30 <fiprintf>:
 8011d30:	b40e      	push	{r1, r2, r3}
 8011d32:	b503      	push	{r0, r1, lr}
 8011d34:	4601      	mov	r1, r0
 8011d36:	ab03      	add	r3, sp, #12
 8011d38:	4805      	ldr	r0, [pc, #20]	; (8011d50 <fiprintf+0x20>)
 8011d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d3e:	6800      	ldr	r0, [r0, #0]
 8011d40:	9301      	str	r3, [sp, #4]
 8011d42:	f7ff fe09 	bl	8011958 <_vfiprintf_r>
 8011d46:	b002      	add	sp, #8
 8011d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d4c:	b003      	add	sp, #12
 8011d4e:	4770      	bx	lr
 8011d50:	2000002c 	.word	0x2000002c

08011d54 <_fstat_r>:
 8011d54:	b538      	push	{r3, r4, r5, lr}
 8011d56:	4d07      	ldr	r5, [pc, #28]	; (8011d74 <_fstat_r+0x20>)
 8011d58:	2300      	movs	r3, #0
 8011d5a:	4604      	mov	r4, r0
 8011d5c:	4608      	mov	r0, r1
 8011d5e:	4611      	mov	r1, r2
 8011d60:	602b      	str	r3, [r5, #0]
 8011d62:	f7f3 fc50 	bl	8005606 <_fstat>
 8011d66:	1c43      	adds	r3, r0, #1
 8011d68:	d102      	bne.n	8011d70 <_fstat_r+0x1c>
 8011d6a:	682b      	ldr	r3, [r5, #0]
 8011d6c:	b103      	cbz	r3, 8011d70 <_fstat_r+0x1c>
 8011d6e:	6023      	str	r3, [r4, #0]
 8011d70:	bd38      	pop	{r3, r4, r5, pc}
 8011d72:	bf00      	nop
 8011d74:	20005190 	.word	0x20005190

08011d78 <_isatty_r>:
 8011d78:	b538      	push	{r3, r4, r5, lr}
 8011d7a:	4d06      	ldr	r5, [pc, #24]	; (8011d94 <_isatty_r+0x1c>)
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	4604      	mov	r4, r0
 8011d80:	4608      	mov	r0, r1
 8011d82:	602b      	str	r3, [r5, #0]
 8011d84:	f7f3 fc4f 	bl	8005626 <_isatty>
 8011d88:	1c43      	adds	r3, r0, #1
 8011d8a:	d102      	bne.n	8011d92 <_isatty_r+0x1a>
 8011d8c:	682b      	ldr	r3, [r5, #0]
 8011d8e:	b103      	cbz	r3, 8011d92 <_isatty_r+0x1a>
 8011d90:	6023      	str	r3, [r4, #0]
 8011d92:	bd38      	pop	{r3, r4, r5, pc}
 8011d94:	20005190 	.word	0x20005190

08011d98 <_lseek_r>:
 8011d98:	b538      	push	{r3, r4, r5, lr}
 8011d9a:	4d07      	ldr	r5, [pc, #28]	; (8011db8 <_lseek_r+0x20>)
 8011d9c:	4604      	mov	r4, r0
 8011d9e:	4608      	mov	r0, r1
 8011da0:	4611      	mov	r1, r2
 8011da2:	2200      	movs	r2, #0
 8011da4:	602a      	str	r2, [r5, #0]
 8011da6:	461a      	mov	r2, r3
 8011da8:	f7f3 fc48 	bl	800563c <_lseek>
 8011dac:	1c43      	adds	r3, r0, #1
 8011dae:	d102      	bne.n	8011db6 <_lseek_r+0x1e>
 8011db0:	682b      	ldr	r3, [r5, #0]
 8011db2:	b103      	cbz	r3, 8011db6 <_lseek_r+0x1e>
 8011db4:	6023      	str	r3, [r4, #0]
 8011db6:	bd38      	pop	{r3, r4, r5, pc}
 8011db8:	20005190 	.word	0x20005190

08011dbc <__malloc_lock>:
 8011dbc:	4801      	ldr	r0, [pc, #4]	; (8011dc4 <__malloc_lock+0x8>)
 8011dbe:	f7fe bf68 	b.w	8010c92 <__retarget_lock_acquire_recursive>
 8011dc2:	bf00      	nop
 8011dc4:	20005184 	.word	0x20005184

08011dc8 <__malloc_unlock>:
 8011dc8:	4801      	ldr	r0, [pc, #4]	; (8011dd0 <__malloc_unlock+0x8>)
 8011dca:	f7fe bf63 	b.w	8010c94 <__retarget_lock_release_recursive>
 8011dce:	bf00      	nop
 8011dd0:	20005184 	.word	0x20005184

08011dd4 <_read_r>:
 8011dd4:	b538      	push	{r3, r4, r5, lr}
 8011dd6:	4d07      	ldr	r5, [pc, #28]	; (8011df4 <_read_r+0x20>)
 8011dd8:	4604      	mov	r4, r0
 8011dda:	4608      	mov	r0, r1
 8011ddc:	4611      	mov	r1, r2
 8011dde:	2200      	movs	r2, #0
 8011de0:	602a      	str	r2, [r5, #0]
 8011de2:	461a      	mov	r2, r3
 8011de4:	f7f3 fbca 	bl	800557c <_read>
 8011de8:	1c43      	adds	r3, r0, #1
 8011dea:	d102      	bne.n	8011df2 <_read_r+0x1e>
 8011dec:	682b      	ldr	r3, [r5, #0]
 8011dee:	b103      	cbz	r3, 8011df2 <_read_r+0x1e>
 8011df0:	6023      	str	r3, [r4, #0]
 8011df2:	bd38      	pop	{r3, r4, r5, pc}
 8011df4:	20005190 	.word	0x20005190

08011df8 <abort>:
 8011df8:	b508      	push	{r3, lr}
 8011dfa:	2006      	movs	r0, #6
 8011dfc:	f000 f82c 	bl	8011e58 <raise>
 8011e00:	2001      	movs	r0, #1
 8011e02:	f7f3 fbb1 	bl	8005568 <_exit>

08011e06 <_raise_r>:
 8011e06:	291f      	cmp	r1, #31
 8011e08:	b538      	push	{r3, r4, r5, lr}
 8011e0a:	4604      	mov	r4, r0
 8011e0c:	460d      	mov	r5, r1
 8011e0e:	d904      	bls.n	8011e1a <_raise_r+0x14>
 8011e10:	2316      	movs	r3, #22
 8011e12:	6003      	str	r3, [r0, #0]
 8011e14:	f04f 30ff 	mov.w	r0, #4294967295
 8011e18:	bd38      	pop	{r3, r4, r5, pc}
 8011e1a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011e1c:	b112      	cbz	r2, 8011e24 <_raise_r+0x1e>
 8011e1e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e22:	b94b      	cbnz	r3, 8011e38 <_raise_r+0x32>
 8011e24:	4620      	mov	r0, r4
 8011e26:	f000 f831 	bl	8011e8c <_getpid_r>
 8011e2a:	462a      	mov	r2, r5
 8011e2c:	4601      	mov	r1, r0
 8011e2e:	4620      	mov	r0, r4
 8011e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e34:	f000 b818 	b.w	8011e68 <_kill_r>
 8011e38:	2b01      	cmp	r3, #1
 8011e3a:	d00a      	beq.n	8011e52 <_raise_r+0x4c>
 8011e3c:	1c59      	adds	r1, r3, #1
 8011e3e:	d103      	bne.n	8011e48 <_raise_r+0x42>
 8011e40:	2316      	movs	r3, #22
 8011e42:	6003      	str	r3, [r0, #0]
 8011e44:	2001      	movs	r0, #1
 8011e46:	e7e7      	b.n	8011e18 <_raise_r+0x12>
 8011e48:	2400      	movs	r4, #0
 8011e4a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011e4e:	4628      	mov	r0, r5
 8011e50:	4798      	blx	r3
 8011e52:	2000      	movs	r0, #0
 8011e54:	e7e0      	b.n	8011e18 <_raise_r+0x12>
	...

08011e58 <raise>:
 8011e58:	4b02      	ldr	r3, [pc, #8]	; (8011e64 <raise+0xc>)
 8011e5a:	4601      	mov	r1, r0
 8011e5c:	6818      	ldr	r0, [r3, #0]
 8011e5e:	f7ff bfd2 	b.w	8011e06 <_raise_r>
 8011e62:	bf00      	nop
 8011e64:	2000002c 	.word	0x2000002c

08011e68 <_kill_r>:
 8011e68:	b538      	push	{r3, r4, r5, lr}
 8011e6a:	4d07      	ldr	r5, [pc, #28]	; (8011e88 <_kill_r+0x20>)
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	4604      	mov	r4, r0
 8011e70:	4608      	mov	r0, r1
 8011e72:	4611      	mov	r1, r2
 8011e74:	602b      	str	r3, [r5, #0]
 8011e76:	f7f3 fb67 	bl	8005548 <_kill>
 8011e7a:	1c43      	adds	r3, r0, #1
 8011e7c:	d102      	bne.n	8011e84 <_kill_r+0x1c>
 8011e7e:	682b      	ldr	r3, [r5, #0]
 8011e80:	b103      	cbz	r3, 8011e84 <_kill_r+0x1c>
 8011e82:	6023      	str	r3, [r4, #0]
 8011e84:	bd38      	pop	{r3, r4, r5, pc}
 8011e86:	bf00      	nop
 8011e88:	20005190 	.word	0x20005190

08011e8c <_getpid_r>:
 8011e8c:	f7f3 bb54 	b.w	8005538 <_getpid>

08011e90 <round>:
 8011e90:	ec51 0b10 	vmov	r0, r1, d0
 8011e94:	b570      	push	{r4, r5, r6, lr}
 8011e96:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8011e9a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8011e9e:	2c13      	cmp	r4, #19
 8011ea0:	ee10 2a10 	vmov	r2, s0
 8011ea4:	460b      	mov	r3, r1
 8011ea6:	dc19      	bgt.n	8011edc <round+0x4c>
 8011ea8:	2c00      	cmp	r4, #0
 8011eaa:	da09      	bge.n	8011ec0 <round+0x30>
 8011eac:	3401      	adds	r4, #1
 8011eae:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8011eb2:	d103      	bne.n	8011ebc <round+0x2c>
 8011eb4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011eb8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	e028      	b.n	8011f12 <round+0x82>
 8011ec0:	4d15      	ldr	r5, [pc, #84]	; (8011f18 <round+0x88>)
 8011ec2:	4125      	asrs	r5, r4
 8011ec4:	ea01 0605 	and.w	r6, r1, r5
 8011ec8:	4332      	orrs	r2, r6
 8011eca:	d00e      	beq.n	8011eea <round+0x5a>
 8011ecc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8011ed0:	fa42 f404 	asr.w	r4, r2, r4
 8011ed4:	4423      	add	r3, r4
 8011ed6:	ea23 0305 	bic.w	r3, r3, r5
 8011eda:	e7ef      	b.n	8011ebc <round+0x2c>
 8011edc:	2c33      	cmp	r4, #51	; 0x33
 8011ede:	dd07      	ble.n	8011ef0 <round+0x60>
 8011ee0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8011ee4:	d101      	bne.n	8011eea <round+0x5a>
 8011ee6:	f7ee f9f9 	bl	80002dc <__adddf3>
 8011eea:	ec41 0b10 	vmov	d0, r0, r1
 8011eee:	bd70      	pop	{r4, r5, r6, pc}
 8011ef0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8011ef4:	f04f 35ff 	mov.w	r5, #4294967295
 8011ef8:	40f5      	lsrs	r5, r6
 8011efa:	4228      	tst	r0, r5
 8011efc:	d0f5      	beq.n	8011eea <round+0x5a>
 8011efe:	2101      	movs	r1, #1
 8011f00:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8011f04:	fa01 f404 	lsl.w	r4, r1, r4
 8011f08:	1912      	adds	r2, r2, r4
 8011f0a:	bf28      	it	cs
 8011f0c:	185b      	addcs	r3, r3, r1
 8011f0e:	ea22 0205 	bic.w	r2, r2, r5
 8011f12:	4619      	mov	r1, r3
 8011f14:	4610      	mov	r0, r2
 8011f16:	e7e8      	b.n	8011eea <round+0x5a>
 8011f18:	000fffff 	.word	0x000fffff

08011f1c <fmaxf>:
 8011f1c:	b508      	push	{r3, lr}
 8011f1e:	ed2d 8b02 	vpush	{d8}
 8011f22:	eeb0 8a40 	vmov.f32	s16, s0
 8011f26:	eef0 8a60 	vmov.f32	s17, s1
 8011f2a:	f000 f82d 	bl	8011f88 <__fpclassifyf>
 8011f2e:	b148      	cbz	r0, 8011f44 <fmaxf+0x28>
 8011f30:	eeb0 0a68 	vmov.f32	s0, s17
 8011f34:	f000 f828 	bl	8011f88 <__fpclassifyf>
 8011f38:	b130      	cbz	r0, 8011f48 <fmaxf+0x2c>
 8011f3a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f42:	dc01      	bgt.n	8011f48 <fmaxf+0x2c>
 8011f44:	eeb0 8a68 	vmov.f32	s16, s17
 8011f48:	eeb0 0a48 	vmov.f32	s0, s16
 8011f4c:	ecbd 8b02 	vpop	{d8}
 8011f50:	bd08      	pop	{r3, pc}

08011f52 <fminf>:
 8011f52:	b508      	push	{r3, lr}
 8011f54:	ed2d 8b02 	vpush	{d8}
 8011f58:	eeb0 8a40 	vmov.f32	s16, s0
 8011f5c:	eef0 8a60 	vmov.f32	s17, s1
 8011f60:	f000 f812 	bl	8011f88 <__fpclassifyf>
 8011f64:	b148      	cbz	r0, 8011f7a <fminf+0x28>
 8011f66:	eeb0 0a68 	vmov.f32	s0, s17
 8011f6a:	f000 f80d 	bl	8011f88 <__fpclassifyf>
 8011f6e:	b130      	cbz	r0, 8011f7e <fminf+0x2c>
 8011f70:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f78:	d401      	bmi.n	8011f7e <fminf+0x2c>
 8011f7a:	eeb0 8a68 	vmov.f32	s16, s17
 8011f7e:	eeb0 0a48 	vmov.f32	s0, s16
 8011f82:	ecbd 8b02 	vpop	{d8}
 8011f86:	bd08      	pop	{r3, pc}

08011f88 <__fpclassifyf>:
 8011f88:	ee10 3a10 	vmov	r3, s0
 8011f8c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8011f90:	d00d      	beq.n	8011fae <__fpclassifyf+0x26>
 8011f92:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8011f96:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8011f9a:	d30a      	bcc.n	8011fb2 <__fpclassifyf+0x2a>
 8011f9c:	4b07      	ldr	r3, [pc, #28]	; (8011fbc <__fpclassifyf+0x34>)
 8011f9e:	1e42      	subs	r2, r0, #1
 8011fa0:	429a      	cmp	r2, r3
 8011fa2:	d908      	bls.n	8011fb6 <__fpclassifyf+0x2e>
 8011fa4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8011fa8:	4258      	negs	r0, r3
 8011faa:	4158      	adcs	r0, r3
 8011fac:	4770      	bx	lr
 8011fae:	2002      	movs	r0, #2
 8011fb0:	4770      	bx	lr
 8011fb2:	2004      	movs	r0, #4
 8011fb4:	4770      	bx	lr
 8011fb6:	2003      	movs	r0, #3
 8011fb8:	4770      	bx	lr
 8011fba:	bf00      	nop
 8011fbc:	007ffffe 	.word	0x007ffffe

08011fc0 <exp>:
 8011fc0:	b538      	push	{r3, r4, r5, lr}
 8011fc2:	ed2d 8b02 	vpush	{d8}
 8011fc6:	ec55 4b10 	vmov	r4, r5, d0
 8011fca:	f000 f881 	bl	80120d0 <__ieee754_exp>
 8011fce:	eeb0 8a40 	vmov.f32	s16, s0
 8011fd2:	eef0 8a60 	vmov.f32	s17, s1
 8011fd6:	ec45 4b10 	vmov	d0, r4, r5
 8011fda:	f000 fab0 	bl	801253e <finite>
 8011fde:	b168      	cbz	r0, 8011ffc <exp+0x3c>
 8011fe0:	a317      	add	r3, pc, #92	; (adr r3, 8012040 <exp+0x80>)
 8011fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe6:	4620      	mov	r0, r4
 8011fe8:	4629      	mov	r1, r5
 8011fea:	f7ee fdbd 	bl	8000b68 <__aeabi_dcmpgt>
 8011fee:	b160      	cbz	r0, 801200a <exp+0x4a>
 8011ff0:	f7fb fdf4 	bl	800dbdc <__errno>
 8011ff4:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8012030 <exp+0x70>
 8011ff8:	2322      	movs	r3, #34	; 0x22
 8011ffa:	6003      	str	r3, [r0, #0]
 8011ffc:	eeb0 0a48 	vmov.f32	s0, s16
 8012000:	eef0 0a68 	vmov.f32	s1, s17
 8012004:	ecbd 8b02 	vpop	{d8}
 8012008:	bd38      	pop	{r3, r4, r5, pc}
 801200a:	a30f      	add	r3, pc, #60	; (adr r3, 8012048 <exp+0x88>)
 801200c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012010:	4620      	mov	r0, r4
 8012012:	4629      	mov	r1, r5
 8012014:	f7ee fd8a 	bl	8000b2c <__aeabi_dcmplt>
 8012018:	2800      	cmp	r0, #0
 801201a:	d0ef      	beq.n	8011ffc <exp+0x3c>
 801201c:	f7fb fdde 	bl	800dbdc <__errno>
 8012020:	2322      	movs	r3, #34	; 0x22
 8012022:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8012038 <exp+0x78>
 8012026:	6003      	str	r3, [r0, #0]
 8012028:	e7e8      	b.n	8011ffc <exp+0x3c>
 801202a:	bf00      	nop
 801202c:	f3af 8000 	nop.w
 8012030:	00000000 	.word	0x00000000
 8012034:	7ff00000 	.word	0x7ff00000
	...
 8012040:	fefa39ef 	.word	0xfefa39ef
 8012044:	40862e42 	.word	0x40862e42
 8012048:	d52d3051 	.word	0xd52d3051
 801204c:	c0874910 	.word	0xc0874910

08012050 <fmodf>:
 8012050:	b508      	push	{r3, lr}
 8012052:	ed2d 8b02 	vpush	{d8}
 8012056:	eef0 8a40 	vmov.f32	s17, s0
 801205a:	eeb0 8a60 	vmov.f32	s16, s1
 801205e:	f000 f9b9 	bl	80123d4 <__ieee754_fmodf>
 8012062:	eef4 8a48 	vcmp.f32	s17, s16
 8012066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801206a:	d60c      	bvs.n	8012086 <fmodf+0x36>
 801206c:	eddf 8a07 	vldr	s17, [pc, #28]	; 801208c <fmodf+0x3c>
 8012070:	eeb4 8a68 	vcmp.f32	s16, s17
 8012074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012078:	d105      	bne.n	8012086 <fmodf+0x36>
 801207a:	f7fb fdaf 	bl	800dbdc <__errno>
 801207e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012082:	2321      	movs	r3, #33	; 0x21
 8012084:	6003      	str	r3, [r0, #0]
 8012086:	ecbd 8b02 	vpop	{d8}
 801208a:	bd08      	pop	{r3, pc}
 801208c:	00000000 	.word	0x00000000

08012090 <sqrtf>:
 8012090:	b508      	push	{r3, lr}
 8012092:	ed2d 8b02 	vpush	{d8}
 8012096:	eeb0 8a40 	vmov.f32	s16, s0
 801209a:	f000 fa1d 	bl	80124d8 <__ieee754_sqrtf>
 801209e:	eeb4 8a48 	vcmp.f32	s16, s16
 80120a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120a6:	d60c      	bvs.n	80120c2 <sqrtf+0x32>
 80120a8:	eddf 8a07 	vldr	s17, [pc, #28]	; 80120c8 <sqrtf+0x38>
 80120ac:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80120b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120b4:	d505      	bpl.n	80120c2 <sqrtf+0x32>
 80120b6:	f7fb fd91 	bl	800dbdc <__errno>
 80120ba:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80120be:	2321      	movs	r3, #33	; 0x21
 80120c0:	6003      	str	r3, [r0, #0]
 80120c2:	ecbd 8b02 	vpop	{d8}
 80120c6:	bd08      	pop	{r3, pc}
	...

080120d0 <__ieee754_exp>:
 80120d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120d4:	ec55 4b10 	vmov	r4, r5, d0
 80120d8:	49b5      	ldr	r1, [pc, #724]	; (80123b0 <__ieee754_exp+0x2e0>)
 80120da:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80120de:	428b      	cmp	r3, r1
 80120e0:	ed2d 8b04 	vpush	{d8-d9}
 80120e4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80120e8:	d93d      	bls.n	8012166 <__ieee754_exp+0x96>
 80120ea:	49b2      	ldr	r1, [pc, #712]	; (80123b4 <__ieee754_exp+0x2e4>)
 80120ec:	428b      	cmp	r3, r1
 80120ee:	d918      	bls.n	8012122 <__ieee754_exp+0x52>
 80120f0:	ee10 3a10 	vmov	r3, s0
 80120f4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 80120f8:	4313      	orrs	r3, r2
 80120fa:	d009      	beq.n	8012110 <__ieee754_exp+0x40>
 80120fc:	ee10 2a10 	vmov	r2, s0
 8012100:	462b      	mov	r3, r5
 8012102:	4620      	mov	r0, r4
 8012104:	4629      	mov	r1, r5
 8012106:	f7ee f8e9 	bl	80002dc <__adddf3>
 801210a:	4604      	mov	r4, r0
 801210c:	460d      	mov	r5, r1
 801210e:	e002      	b.n	8012116 <__ieee754_exp+0x46>
 8012110:	b10e      	cbz	r6, 8012116 <__ieee754_exp+0x46>
 8012112:	2400      	movs	r4, #0
 8012114:	2500      	movs	r5, #0
 8012116:	ecbd 8b04 	vpop	{d8-d9}
 801211a:	ec45 4b10 	vmov	d0, r4, r5
 801211e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012122:	a38d      	add	r3, pc, #564	; (adr r3, 8012358 <__ieee754_exp+0x288>)
 8012124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012128:	ee10 0a10 	vmov	r0, s0
 801212c:	4629      	mov	r1, r5
 801212e:	f7ee fd1b 	bl	8000b68 <__aeabi_dcmpgt>
 8012132:	4607      	mov	r7, r0
 8012134:	b130      	cbz	r0, 8012144 <__ieee754_exp+0x74>
 8012136:	ecbd 8b04 	vpop	{d8-d9}
 801213a:	2000      	movs	r0, #0
 801213c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012140:	f000 b9f4 	b.w	801252c <__math_oflow>
 8012144:	a386      	add	r3, pc, #536	; (adr r3, 8012360 <__ieee754_exp+0x290>)
 8012146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801214a:	4620      	mov	r0, r4
 801214c:	4629      	mov	r1, r5
 801214e:	f7ee fced 	bl	8000b2c <__aeabi_dcmplt>
 8012152:	2800      	cmp	r0, #0
 8012154:	f000 808b 	beq.w	801226e <__ieee754_exp+0x19e>
 8012158:	ecbd 8b04 	vpop	{d8-d9}
 801215c:	4638      	mov	r0, r7
 801215e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012162:	f000 b9da 	b.w	801251a <__math_uflow>
 8012166:	4a94      	ldr	r2, [pc, #592]	; (80123b8 <__ieee754_exp+0x2e8>)
 8012168:	4293      	cmp	r3, r2
 801216a:	f240 80ac 	bls.w	80122c6 <__ieee754_exp+0x1f6>
 801216e:	4a93      	ldr	r2, [pc, #588]	; (80123bc <__ieee754_exp+0x2ec>)
 8012170:	4293      	cmp	r3, r2
 8012172:	d87c      	bhi.n	801226e <__ieee754_exp+0x19e>
 8012174:	4b92      	ldr	r3, [pc, #584]	; (80123c0 <__ieee754_exp+0x2f0>)
 8012176:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801217e:	ee10 0a10 	vmov	r0, s0
 8012182:	4629      	mov	r1, r5
 8012184:	f7ee f8a8 	bl	80002d8 <__aeabi_dsub>
 8012188:	4b8e      	ldr	r3, [pc, #568]	; (80123c4 <__ieee754_exp+0x2f4>)
 801218a:	00f7      	lsls	r7, r6, #3
 801218c:	443b      	add	r3, r7
 801218e:	ed93 7b00 	vldr	d7, [r3]
 8012192:	f1c6 0a01 	rsb	sl, r6, #1
 8012196:	4680      	mov	r8, r0
 8012198:	4689      	mov	r9, r1
 801219a:	ebaa 0a06 	sub.w	sl, sl, r6
 801219e:	eeb0 8a47 	vmov.f32	s16, s14
 80121a2:	eef0 8a67 	vmov.f32	s17, s15
 80121a6:	ec53 2b18 	vmov	r2, r3, d8
 80121aa:	4640      	mov	r0, r8
 80121ac:	4649      	mov	r1, r9
 80121ae:	f7ee f893 	bl	80002d8 <__aeabi_dsub>
 80121b2:	4604      	mov	r4, r0
 80121b4:	460d      	mov	r5, r1
 80121b6:	4622      	mov	r2, r4
 80121b8:	462b      	mov	r3, r5
 80121ba:	4620      	mov	r0, r4
 80121bc:	4629      	mov	r1, r5
 80121be:	f7ee fa43 	bl	8000648 <__aeabi_dmul>
 80121c2:	a369      	add	r3, pc, #420	; (adr r3, 8012368 <__ieee754_exp+0x298>)
 80121c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c8:	4606      	mov	r6, r0
 80121ca:	460f      	mov	r7, r1
 80121cc:	f7ee fa3c 	bl	8000648 <__aeabi_dmul>
 80121d0:	a367      	add	r3, pc, #412	; (adr r3, 8012370 <__ieee754_exp+0x2a0>)
 80121d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121d6:	f7ee f87f 	bl	80002d8 <__aeabi_dsub>
 80121da:	4632      	mov	r2, r6
 80121dc:	463b      	mov	r3, r7
 80121de:	f7ee fa33 	bl	8000648 <__aeabi_dmul>
 80121e2:	a365      	add	r3, pc, #404	; (adr r3, 8012378 <__ieee754_exp+0x2a8>)
 80121e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121e8:	f7ee f878 	bl	80002dc <__adddf3>
 80121ec:	4632      	mov	r2, r6
 80121ee:	463b      	mov	r3, r7
 80121f0:	f7ee fa2a 	bl	8000648 <__aeabi_dmul>
 80121f4:	a362      	add	r3, pc, #392	; (adr r3, 8012380 <__ieee754_exp+0x2b0>)
 80121f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121fa:	f7ee f86d 	bl	80002d8 <__aeabi_dsub>
 80121fe:	4632      	mov	r2, r6
 8012200:	463b      	mov	r3, r7
 8012202:	f7ee fa21 	bl	8000648 <__aeabi_dmul>
 8012206:	a360      	add	r3, pc, #384	; (adr r3, 8012388 <__ieee754_exp+0x2b8>)
 8012208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801220c:	f7ee f866 	bl	80002dc <__adddf3>
 8012210:	4632      	mov	r2, r6
 8012212:	463b      	mov	r3, r7
 8012214:	f7ee fa18 	bl	8000648 <__aeabi_dmul>
 8012218:	4602      	mov	r2, r0
 801221a:	460b      	mov	r3, r1
 801221c:	4620      	mov	r0, r4
 801221e:	4629      	mov	r1, r5
 8012220:	f7ee f85a 	bl	80002d8 <__aeabi_dsub>
 8012224:	4602      	mov	r2, r0
 8012226:	460b      	mov	r3, r1
 8012228:	4606      	mov	r6, r0
 801222a:	460f      	mov	r7, r1
 801222c:	4620      	mov	r0, r4
 801222e:	4629      	mov	r1, r5
 8012230:	f7ee fa0a 	bl	8000648 <__aeabi_dmul>
 8012234:	ec41 0b19 	vmov	d9, r0, r1
 8012238:	f1ba 0f00 	cmp.w	sl, #0
 801223c:	d15d      	bne.n	80122fa <__ieee754_exp+0x22a>
 801223e:	2200      	movs	r2, #0
 8012240:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012244:	4630      	mov	r0, r6
 8012246:	4639      	mov	r1, r7
 8012248:	f7ee f846 	bl	80002d8 <__aeabi_dsub>
 801224c:	4602      	mov	r2, r0
 801224e:	460b      	mov	r3, r1
 8012250:	ec51 0b19 	vmov	r0, r1, d9
 8012254:	f7ee fb22 	bl	800089c <__aeabi_ddiv>
 8012258:	4622      	mov	r2, r4
 801225a:	462b      	mov	r3, r5
 801225c:	f7ee f83c 	bl	80002d8 <__aeabi_dsub>
 8012260:	4602      	mov	r2, r0
 8012262:	460b      	mov	r3, r1
 8012264:	2000      	movs	r0, #0
 8012266:	4958      	ldr	r1, [pc, #352]	; (80123c8 <__ieee754_exp+0x2f8>)
 8012268:	f7ee f836 	bl	80002d8 <__aeabi_dsub>
 801226c:	e74d      	b.n	801210a <__ieee754_exp+0x3a>
 801226e:	4857      	ldr	r0, [pc, #348]	; (80123cc <__ieee754_exp+0x2fc>)
 8012270:	a347      	add	r3, pc, #284	; (adr r3, 8012390 <__ieee754_exp+0x2c0>)
 8012272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012276:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801227a:	4629      	mov	r1, r5
 801227c:	4620      	mov	r0, r4
 801227e:	f7ee f9e3 	bl	8000648 <__aeabi_dmul>
 8012282:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012286:	f7ee f829 	bl	80002dc <__adddf3>
 801228a:	f7ee fc8d 	bl	8000ba8 <__aeabi_d2iz>
 801228e:	4682      	mov	sl, r0
 8012290:	f7ee f970 	bl	8000574 <__aeabi_i2d>
 8012294:	a340      	add	r3, pc, #256	; (adr r3, 8012398 <__ieee754_exp+0x2c8>)
 8012296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801229a:	4606      	mov	r6, r0
 801229c:	460f      	mov	r7, r1
 801229e:	f7ee f9d3 	bl	8000648 <__aeabi_dmul>
 80122a2:	4602      	mov	r2, r0
 80122a4:	460b      	mov	r3, r1
 80122a6:	4620      	mov	r0, r4
 80122a8:	4629      	mov	r1, r5
 80122aa:	f7ee f815 	bl	80002d8 <__aeabi_dsub>
 80122ae:	a33c      	add	r3, pc, #240	; (adr r3, 80123a0 <__ieee754_exp+0x2d0>)
 80122b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b4:	4680      	mov	r8, r0
 80122b6:	4689      	mov	r9, r1
 80122b8:	4630      	mov	r0, r6
 80122ba:	4639      	mov	r1, r7
 80122bc:	f7ee f9c4 	bl	8000648 <__aeabi_dmul>
 80122c0:	ec41 0b18 	vmov	d8, r0, r1
 80122c4:	e76f      	b.n	80121a6 <__ieee754_exp+0xd6>
 80122c6:	4a42      	ldr	r2, [pc, #264]	; (80123d0 <__ieee754_exp+0x300>)
 80122c8:	4293      	cmp	r3, r2
 80122ca:	d811      	bhi.n	80122f0 <__ieee754_exp+0x220>
 80122cc:	a336      	add	r3, pc, #216	; (adr r3, 80123a8 <__ieee754_exp+0x2d8>)
 80122ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d2:	ee10 0a10 	vmov	r0, s0
 80122d6:	4629      	mov	r1, r5
 80122d8:	f7ee f800 	bl	80002dc <__adddf3>
 80122dc:	4b3a      	ldr	r3, [pc, #232]	; (80123c8 <__ieee754_exp+0x2f8>)
 80122de:	2200      	movs	r2, #0
 80122e0:	f7ee fc42 	bl	8000b68 <__aeabi_dcmpgt>
 80122e4:	b138      	cbz	r0, 80122f6 <__ieee754_exp+0x226>
 80122e6:	4b38      	ldr	r3, [pc, #224]	; (80123c8 <__ieee754_exp+0x2f8>)
 80122e8:	2200      	movs	r2, #0
 80122ea:	4620      	mov	r0, r4
 80122ec:	4629      	mov	r1, r5
 80122ee:	e70a      	b.n	8012106 <__ieee754_exp+0x36>
 80122f0:	f04f 0a00 	mov.w	sl, #0
 80122f4:	e75f      	b.n	80121b6 <__ieee754_exp+0xe6>
 80122f6:	4682      	mov	sl, r0
 80122f8:	e75d      	b.n	80121b6 <__ieee754_exp+0xe6>
 80122fa:	4632      	mov	r2, r6
 80122fc:	463b      	mov	r3, r7
 80122fe:	2000      	movs	r0, #0
 8012300:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8012304:	f7ed ffe8 	bl	80002d8 <__aeabi_dsub>
 8012308:	4602      	mov	r2, r0
 801230a:	460b      	mov	r3, r1
 801230c:	ec51 0b19 	vmov	r0, r1, d9
 8012310:	f7ee fac4 	bl	800089c <__aeabi_ddiv>
 8012314:	4602      	mov	r2, r0
 8012316:	460b      	mov	r3, r1
 8012318:	ec51 0b18 	vmov	r0, r1, d8
 801231c:	f7ed ffdc 	bl	80002d8 <__aeabi_dsub>
 8012320:	4642      	mov	r2, r8
 8012322:	464b      	mov	r3, r9
 8012324:	f7ed ffd8 	bl	80002d8 <__aeabi_dsub>
 8012328:	4602      	mov	r2, r0
 801232a:	460b      	mov	r3, r1
 801232c:	2000      	movs	r0, #0
 801232e:	4926      	ldr	r1, [pc, #152]	; (80123c8 <__ieee754_exp+0x2f8>)
 8012330:	f7ed ffd2 	bl	80002d8 <__aeabi_dsub>
 8012334:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8012338:	4592      	cmp	sl, r2
 801233a:	db02      	blt.n	8012342 <__ieee754_exp+0x272>
 801233c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8012340:	e6e3      	b.n	801210a <__ieee754_exp+0x3a>
 8012342:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8012346:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801234a:	2200      	movs	r2, #0
 801234c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8012350:	f7ee f97a 	bl	8000648 <__aeabi_dmul>
 8012354:	e6d9      	b.n	801210a <__ieee754_exp+0x3a>
 8012356:	bf00      	nop
 8012358:	fefa39ef 	.word	0xfefa39ef
 801235c:	40862e42 	.word	0x40862e42
 8012360:	d52d3051 	.word	0xd52d3051
 8012364:	c0874910 	.word	0xc0874910
 8012368:	72bea4d0 	.word	0x72bea4d0
 801236c:	3e663769 	.word	0x3e663769
 8012370:	c5d26bf1 	.word	0xc5d26bf1
 8012374:	3ebbbd41 	.word	0x3ebbbd41
 8012378:	af25de2c 	.word	0xaf25de2c
 801237c:	3f11566a 	.word	0x3f11566a
 8012380:	16bebd93 	.word	0x16bebd93
 8012384:	3f66c16c 	.word	0x3f66c16c
 8012388:	5555553e 	.word	0x5555553e
 801238c:	3fc55555 	.word	0x3fc55555
 8012390:	652b82fe 	.word	0x652b82fe
 8012394:	3ff71547 	.word	0x3ff71547
 8012398:	fee00000 	.word	0xfee00000
 801239c:	3fe62e42 	.word	0x3fe62e42
 80123a0:	35793c76 	.word	0x35793c76
 80123a4:	3dea39ef 	.word	0x3dea39ef
 80123a8:	8800759c 	.word	0x8800759c
 80123ac:	7e37e43c 	.word	0x7e37e43c
 80123b0:	40862e41 	.word	0x40862e41
 80123b4:	7fefffff 	.word	0x7fefffff
 80123b8:	3fd62e42 	.word	0x3fd62e42
 80123bc:	3ff0a2b1 	.word	0x3ff0a2b1
 80123c0:	08013a10 	.word	0x08013a10
 80123c4:	08013a20 	.word	0x08013a20
 80123c8:	3ff00000 	.word	0x3ff00000
 80123cc:	08013a00 	.word	0x08013a00
 80123d0:	3defffff 	.word	0x3defffff

080123d4 <__ieee754_fmodf>:
 80123d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123d6:	ee10 5a90 	vmov	r5, s1
 80123da:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 80123de:	d009      	beq.n	80123f4 <__ieee754_fmodf+0x20>
 80123e0:	ee10 2a10 	vmov	r2, s0
 80123e4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80123e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80123ec:	da02      	bge.n	80123f4 <__ieee754_fmodf+0x20>
 80123ee:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80123f2:	dd04      	ble.n	80123fe <__ieee754_fmodf+0x2a>
 80123f4:	ee60 0a20 	vmul.f32	s1, s0, s1
 80123f8:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80123fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123fe:	42a3      	cmp	r3, r4
 8012400:	dbfc      	blt.n	80123fc <__ieee754_fmodf+0x28>
 8012402:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 8012406:	d105      	bne.n	8012414 <__ieee754_fmodf+0x40>
 8012408:	4b32      	ldr	r3, [pc, #200]	; (80124d4 <__ieee754_fmodf+0x100>)
 801240a:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 801240e:	ed93 0a00 	vldr	s0, [r3]
 8012412:	e7f3      	b.n	80123fc <__ieee754_fmodf+0x28>
 8012414:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8012418:	d13f      	bne.n	801249a <__ieee754_fmodf+0xc6>
 801241a:	0219      	lsls	r1, r3, #8
 801241c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8012420:	2900      	cmp	r1, #0
 8012422:	dc37      	bgt.n	8012494 <__ieee754_fmodf+0xc0>
 8012424:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8012428:	d13d      	bne.n	80124a6 <__ieee754_fmodf+0xd2>
 801242a:	0227      	lsls	r7, r4, #8
 801242c:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8012430:	2f00      	cmp	r7, #0
 8012432:	da35      	bge.n	80124a0 <__ieee754_fmodf+0xcc>
 8012434:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8012438:	bfbb      	ittet	lt
 801243a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 801243e:	1a12      	sublt	r2, r2, r0
 8012440:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8012444:	4093      	lsllt	r3, r2
 8012446:	bfa8      	it	ge
 8012448:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 801244c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8012450:	bfb5      	itete	lt
 8012452:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8012456:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 801245a:	1a52      	sublt	r2, r2, r1
 801245c:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8012460:	bfb8      	it	lt
 8012462:	4094      	lsllt	r4, r2
 8012464:	1a40      	subs	r0, r0, r1
 8012466:	1b1a      	subs	r2, r3, r4
 8012468:	bb00      	cbnz	r0, 80124ac <__ieee754_fmodf+0xd8>
 801246a:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 801246e:	bf38      	it	cc
 8012470:	4613      	movcc	r3, r2
 8012472:	2b00      	cmp	r3, #0
 8012474:	d0c8      	beq.n	8012408 <__ieee754_fmodf+0x34>
 8012476:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801247a:	db1f      	blt.n	80124bc <__ieee754_fmodf+0xe8>
 801247c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8012480:	db1f      	blt.n	80124c2 <__ieee754_fmodf+0xee>
 8012482:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8012486:	317f      	adds	r1, #127	; 0x7f
 8012488:	4333      	orrs	r3, r6
 801248a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 801248e:	ee00 3a10 	vmov	s0, r3
 8012492:	e7b3      	b.n	80123fc <__ieee754_fmodf+0x28>
 8012494:	3801      	subs	r0, #1
 8012496:	0049      	lsls	r1, r1, #1
 8012498:	e7c2      	b.n	8012420 <__ieee754_fmodf+0x4c>
 801249a:	15d8      	asrs	r0, r3, #23
 801249c:	387f      	subs	r0, #127	; 0x7f
 801249e:	e7c1      	b.n	8012424 <__ieee754_fmodf+0x50>
 80124a0:	3901      	subs	r1, #1
 80124a2:	007f      	lsls	r7, r7, #1
 80124a4:	e7c4      	b.n	8012430 <__ieee754_fmodf+0x5c>
 80124a6:	15e1      	asrs	r1, r4, #23
 80124a8:	397f      	subs	r1, #127	; 0x7f
 80124aa:	e7c3      	b.n	8012434 <__ieee754_fmodf+0x60>
 80124ac:	2a00      	cmp	r2, #0
 80124ae:	da02      	bge.n	80124b6 <__ieee754_fmodf+0xe2>
 80124b0:	005b      	lsls	r3, r3, #1
 80124b2:	3801      	subs	r0, #1
 80124b4:	e7d7      	b.n	8012466 <__ieee754_fmodf+0x92>
 80124b6:	d0a7      	beq.n	8012408 <__ieee754_fmodf+0x34>
 80124b8:	0053      	lsls	r3, r2, #1
 80124ba:	e7fa      	b.n	80124b2 <__ieee754_fmodf+0xde>
 80124bc:	005b      	lsls	r3, r3, #1
 80124be:	3901      	subs	r1, #1
 80124c0:	e7d9      	b.n	8012476 <__ieee754_fmodf+0xa2>
 80124c2:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 80124c6:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 80124ca:	3182      	adds	r1, #130	; 0x82
 80124cc:	410b      	asrs	r3, r1
 80124ce:	4333      	orrs	r3, r6
 80124d0:	e7dd      	b.n	801248e <__ieee754_fmodf+0xba>
 80124d2:	bf00      	nop
 80124d4:	08013a30 	.word	0x08013a30

080124d8 <__ieee754_sqrtf>:
 80124d8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80124dc:	4770      	bx	lr

080124de <with_errno>:
 80124de:	b570      	push	{r4, r5, r6, lr}
 80124e0:	4604      	mov	r4, r0
 80124e2:	460d      	mov	r5, r1
 80124e4:	4616      	mov	r6, r2
 80124e6:	f7fb fb79 	bl	800dbdc <__errno>
 80124ea:	4629      	mov	r1, r5
 80124ec:	6006      	str	r6, [r0, #0]
 80124ee:	4620      	mov	r0, r4
 80124f0:	bd70      	pop	{r4, r5, r6, pc}

080124f2 <xflow>:
 80124f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80124f4:	4614      	mov	r4, r2
 80124f6:	461d      	mov	r5, r3
 80124f8:	b108      	cbz	r0, 80124fe <xflow+0xc>
 80124fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80124fe:	e9cd 2300 	strd	r2, r3, [sp]
 8012502:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012506:	4620      	mov	r0, r4
 8012508:	4629      	mov	r1, r5
 801250a:	f7ee f89d 	bl	8000648 <__aeabi_dmul>
 801250e:	2222      	movs	r2, #34	; 0x22
 8012510:	b003      	add	sp, #12
 8012512:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012516:	f7ff bfe2 	b.w	80124de <with_errno>

0801251a <__math_uflow>:
 801251a:	b508      	push	{r3, lr}
 801251c:	2200      	movs	r2, #0
 801251e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012522:	f7ff ffe6 	bl	80124f2 <xflow>
 8012526:	ec41 0b10 	vmov	d0, r0, r1
 801252a:	bd08      	pop	{r3, pc}

0801252c <__math_oflow>:
 801252c:	b508      	push	{r3, lr}
 801252e:	2200      	movs	r2, #0
 8012530:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8012534:	f7ff ffdd 	bl	80124f2 <xflow>
 8012538:	ec41 0b10 	vmov	d0, r0, r1
 801253c:	bd08      	pop	{r3, pc}

0801253e <finite>:
 801253e:	b082      	sub	sp, #8
 8012540:	ed8d 0b00 	vstr	d0, [sp]
 8012544:	9801      	ldr	r0, [sp, #4]
 8012546:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801254a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801254e:	0fc0      	lsrs	r0, r0, #31
 8012550:	b002      	add	sp, #8
 8012552:	4770      	bx	lr

08012554 <_init>:
 8012554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012556:	bf00      	nop
 8012558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801255a:	bc08      	pop	{r3}
 801255c:	469e      	mov	lr, r3
 801255e:	4770      	bx	lr

08012560 <_fini>:
 8012560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012562:	bf00      	nop
 8012564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012566:	bc08      	pop	{r3}
 8012568:	469e      	mov	lr, r3
 801256a:	4770      	bx	lr
