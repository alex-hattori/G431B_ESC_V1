
G431B_ESC_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011d64  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014b0  08011f48  08011f48  00021f48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080133f8  080133f8  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  080133f8  080133f8  000233f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013400  08013400  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013400  08013400  00023400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013404  08013404  00023404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08013408  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052cc  20000208  0801360c  00030208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200054d4  0801360c  000354d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003566a  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c2f  00000000  00000000  0006589e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f40  00000000  00000000  0006b4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cf0  00000000  00000000  0006d410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b1e  00000000  00000000  0006f100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002799a  00000000  00000000  00095c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7ca5  00000000  00000000  000bd5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a525d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a0c  00000000  00000000  001a52b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011f2c 	.word	0x08011f2c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	08011f2c 	.word	0x08011f2c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a4 	b.w	8001038 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468c      	mov	ip, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8083 	bne.w	8000e8a <__udivmoddi4+0x116>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d947      	bls.n	8000e1a <__udivmoddi4+0xa6>
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	b142      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	f1c2 0020 	rsb	r0, r2, #32
 8000d94:	fa24 f000 	lsr.w	r0, r4, r0
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4097      	lsls	r7, r2
 8000d9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000da0:	4094      	lsls	r4, r2
 8000da2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da6:	0c23      	lsrs	r3, r4, #16
 8000da8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dac:	fa1f fe87 	uxth.w	lr, r7
 8000db0:	fb08 c116 	mls	r1, r8, r6, ip
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x60>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc6:	f080 8119 	bcs.w	8000ffc <__udivmoddi4+0x288>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 8116 	bls.w	8000ffc <__udivmoddi4+0x288>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ddc:	fb08 3310 	mls	r3, r8, r0, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d909      	bls.n	8000e00 <__udivmoddi4+0x8c>
 8000dec:	193c      	adds	r4, r7, r4
 8000dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df2:	f080 8105 	bcs.w	8001000 <__udivmoddi4+0x28c>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f240 8102 	bls.w	8001000 <__udivmoddi4+0x28c>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	443c      	add	r4, r7
 8000e00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e04:	eba4 040e 	sub.w	r4, r4, lr
 8000e08:	2600      	movs	r6, #0
 8000e0a:	b11d      	cbz	r5, 8000e14 <__udivmoddi4+0xa0>
 8000e0c:	40d4      	lsrs	r4, r2
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e9c5 4300 	strd	r4, r3, [r5]
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xaa>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f282 	clz	r2, r2
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d150      	bne.n	8000ec8 <__udivmoddi4+0x154>
 8000e26:	1bcb      	subs	r3, r1, r7
 8000e28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2c:	fa1f f887 	uxth.w	r8, r7
 8000e30:	2601      	movs	r6, #1
 8000e32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e36:	0c21      	lsrs	r1, r4, #16
 8000e38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb08 f30c 	mul.w	r3, r8, ip
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0xe4>
 8000e48:	1879      	adds	r1, r7, r1
 8000e4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0xe2>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	f200 80e9 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e56:	4684      	mov	ip, r0
 8000e58:	1ac9      	subs	r1, r1, r3
 8000e5a:	b2a3      	uxth	r3, r4
 8000e5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e68:	fb08 f800 	mul.w	r8, r8, r0
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x10c>
 8000e70:	193c      	adds	r4, r7, r4
 8000e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x10a>
 8000e78:	45a0      	cmp	r8, r4
 8000e7a:	f200 80d9 	bhi.w	8001030 <__udivmoddi4+0x2bc>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	eba4 0408 	sub.w	r4, r4, r8
 8000e84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e88:	e7bf      	b.n	8000e0a <__udivmoddi4+0x96>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d909      	bls.n	8000ea2 <__udivmoddi4+0x12e>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	f000 80b1 	beq.w	8000ff6 <__udivmoddi4+0x282>
 8000e94:	2600      	movs	r6, #0
 8000e96:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	fab3 f683 	clz	r6, r3
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d14a      	bne.n	8000f40 <__udivmoddi4+0x1cc>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d302      	bcc.n	8000eb4 <__udivmoddi4+0x140>
 8000eae:	4282      	cmp	r2, r0
 8000eb0:	f200 80b8 	bhi.w	8001024 <__udivmoddi4+0x2b0>
 8000eb4:	1a84      	subs	r4, r0, r2
 8000eb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eba:	2001      	movs	r0, #1
 8000ebc:	468c      	mov	ip, r1
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d0a8      	beq.n	8000e14 <__udivmoddi4+0xa0>
 8000ec2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ed0:	4097      	lsls	r7, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eda:	40d9      	lsrs	r1, r3
 8000edc:	4330      	orrs	r0, r6
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee4:	fa1f f887 	uxth.w	r8, r7
 8000ee8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef0:	fb06 f108 	mul.w	r1, r6, r8
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	fa04 f402 	lsl.w	r4, r4, r2
 8000efa:	d909      	bls.n	8000f10 <__udivmoddi4+0x19c>
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f02:	f080 808d 	bcs.w	8001020 <__udivmoddi4+0x2ac>
 8000f06:	4299      	cmp	r1, r3
 8000f08:	f240 808a 	bls.w	8001020 <__udivmoddi4+0x2ac>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	443b      	add	r3, r7
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b281      	uxth	r1, r0
 8000f14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f20:	fb00 f308 	mul.w	r3, r0, r8
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x1c4>
 8000f28:	1879      	adds	r1, r7, r1
 8000f2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2e:	d273      	bcs.n	8001018 <__udivmoddi4+0x2a4>
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d971      	bls.n	8001018 <__udivmoddi4+0x2a4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4439      	add	r1, r7
 8000f38:	1acb      	subs	r3, r1, r3
 8000f3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3e:	e778      	b.n	8000e32 <__udivmoddi4+0xbe>
 8000f40:	f1c6 0c20 	rsb	ip, r6, #32
 8000f44:	fa03 f406 	lsl.w	r4, r3, r6
 8000f48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f4c:	431c      	orrs	r4, r3
 8000f4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f52:	fa01 f306 	lsl.w	r3, r1, r6
 8000f56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	0c3b      	lsrs	r3, r7, #16
 8000f62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f66:	fa1f f884 	uxth.w	r8, r4
 8000f6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f72:	fb09 fa08 	mul.w	sl, r9, r8
 8000f76:	458a      	cmp	sl, r1
 8000f78:	fa02 f206 	lsl.w	r2, r2, r6
 8000f7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x220>
 8000f82:	1861      	adds	r1, r4, r1
 8000f84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f88:	d248      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000f8a:	458a      	cmp	sl, r1
 8000f8c:	d946      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000f8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f92:	4421      	add	r1, r4
 8000f94:	eba1 010a 	sub.w	r1, r1, sl
 8000f98:	b2bf      	uxth	r7, r7
 8000f9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa6:	fb00 f808 	mul.w	r8, r0, r8
 8000faa:	45b8      	cmp	r8, r7
 8000fac:	d907      	bls.n	8000fbe <__udivmoddi4+0x24a>
 8000fae:	19e7      	adds	r7, r4, r7
 8000fb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb4:	d22e      	bcs.n	8001014 <__udivmoddi4+0x2a0>
 8000fb6:	45b8      	cmp	r8, r7
 8000fb8:	d92c      	bls.n	8001014 <__udivmoddi4+0x2a0>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4427      	add	r7, r4
 8000fbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc2:	eba7 0708 	sub.w	r7, r7, r8
 8000fc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fca:	454f      	cmp	r7, r9
 8000fcc:	46c6      	mov	lr, r8
 8000fce:	4649      	mov	r1, r9
 8000fd0:	d31a      	bcc.n	8001008 <__udivmoddi4+0x294>
 8000fd2:	d017      	beq.n	8001004 <__udivmoddi4+0x290>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x27a>
 8000fd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fda:	eb67 0701 	sbc.w	r7, r7, r1
 8000fde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fe2:	40f2      	lsrs	r2, r6
 8000fe4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe8:	40f7      	lsrs	r7, r6
 8000fea:	e9c5 2700 	strd	r2, r7, [r5]
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e70b      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e9      	b.n	8000dd4 <__udivmoddi4+0x60>
 8001000:	4618      	mov	r0, r3
 8001002:	e6fd      	b.n	8000e00 <__udivmoddi4+0x8c>
 8001004:	4543      	cmp	r3, r8
 8001006:	d2e5      	bcs.n	8000fd4 <__udivmoddi4+0x260>
 8001008:	ebb8 0e02 	subs.w	lr, r8, r2
 800100c:	eb69 0104 	sbc.w	r1, r9, r4
 8001010:	3801      	subs	r0, #1
 8001012:	e7df      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001014:	4608      	mov	r0, r1
 8001016:	e7d2      	b.n	8000fbe <__udivmoddi4+0x24a>
 8001018:	4660      	mov	r0, ip
 800101a:	e78d      	b.n	8000f38 <__udivmoddi4+0x1c4>
 800101c:	4681      	mov	r9, r0
 800101e:	e7b9      	b.n	8000f94 <__udivmoddi4+0x220>
 8001020:	4666      	mov	r6, ip
 8001022:	e775      	b.n	8000f10 <__udivmoddi4+0x19c>
 8001024:	4630      	mov	r0, r6
 8001026:	e74a      	b.n	8000ebe <__udivmoddi4+0x14a>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	4439      	add	r1, r7
 800102e:	e713      	b.n	8000e58 <__udivmoddi4+0xe4>
 8001030:	3802      	subs	r0, #2
 8001032:	443c      	add	r4, r7
 8001034:	e724      	b.n	8000e80 <__udivmoddi4+0x10c>
 8001036:	bf00      	nop

08001038 <__aeabi_idiv0>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	; 0x30
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2220      	movs	r2, #32
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f00c fb45 	bl	800d6e4 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800105a:	4b39      	ldr	r3, [pc, #228]	; (8001140 <MX_ADC1_Init+0x104>)
 800105c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001060:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001062:	4b37      	ldr	r3, [pc, #220]	; (8001140 <MX_ADC1_Init+0x104>)
 8001064:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001068:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800106a:	4b35      	ldr	r3, [pc, #212]	; (8001140 <MX_ADC1_Init+0x104>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001070:	4b33      	ldr	r3, [pc, #204]	; (8001140 <MX_ADC1_Init+0x104>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001076:	4b32      	ldr	r3, [pc, #200]	; (8001140 <MX_ADC1_Init+0x104>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800107c:	4b30      	ldr	r3, [pc, #192]	; (8001140 <MX_ADC1_Init+0x104>)
 800107e:	2201      	movs	r2, #1
 8001080:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001082:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <MX_ADC1_Init+0x104>)
 8001084:	2208      	movs	r2, #8
 8001086:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001088:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <MX_ADC1_Init+0x104>)
 800108a:	2200      	movs	r2, #0
 800108c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800108e:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <MX_ADC1_Init+0x104>)
 8001090:	2200      	movs	r2, #0
 8001092:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001094:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <MX_ADC1_Init+0x104>)
 8001096:	2202      	movs	r2, #2
 8001098:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109a:	4b29      	ldr	r3, [pc, #164]	; (8001140 <MX_ADC1_Init+0x104>)
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a2:	4b27      	ldr	r3, [pc, #156]	; (8001140 <MX_ADC1_Init+0x104>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a8:	4b25      	ldr	r3, [pc, #148]	; (8001140 <MX_ADC1_Init+0x104>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ae:	4b24      	ldr	r3, [pc, #144]	; (8001140 <MX_ADC1_Init+0x104>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010b6:	4b22      	ldr	r3, [pc, #136]	; (8001140 <MX_ADC1_Init+0x104>)
 80010b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <MX_ADC1_Init+0x104>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c6:	481e      	ldr	r0, [pc, #120]	; (8001140 <MX_ADC1_Init+0x104>)
 80010c8:	f004 fd50 	bl	8005b6c <HAL_ADC_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80010d2:	f003 fa0e 	bl	80044f2 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010de:	4619      	mov	r1, r3
 80010e0:	4817      	ldr	r0, [pc, #92]	; (8001140 <MX_ADC1_Init+0x104>)
 80010e2:	f005 ff01 	bl	8006ee8 <HAL_ADCEx_MultiModeConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80010ec:	f003 fa01 	bl	80044f2 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_ADC1_Init+0x108>)
 80010f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f4:	2306      	movs	r3, #6
 80010f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010fc:	237f      	movs	r3, #127	; 0x7f
 80010fe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001100:	2304      	movs	r3, #4
 8001102:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	4619      	mov	r1, r3
 800110c:	480c      	ldr	r0, [pc, #48]	; (8001140 <MX_ADC1_Init+0x104>)
 800110e:	f005 f9ad 	bl	800646c <HAL_ADC_ConfigChannel>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001118:	f003 f9eb 	bl	80044f2 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <MX_ADC1_Init+0x10c>)
 800111e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001120:	230c      	movs	r3, #12
 8001122:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	4619      	mov	r1, r3
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_ADC1_Init+0x104>)
 800112a:	f005 f99f 	bl	800646c <HAL_ADC_ConfigChannel>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001134:	f003 f9dd 	bl	80044f2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	3730      	adds	r7, #48	; 0x30
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200002a0 	.word	0x200002a0
 8001144:	b6902000 	.word	0xb6902000
 8001148:	04300002 	.word	0x04300002

0800114c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001152:	463b      	mov	r3, r7
 8001154:	2220      	movs	r2, #32
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f00c fac3 	bl	800d6e4 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800115e:	4b32      	ldr	r3, [pc, #200]	; (8001228 <MX_ADC2_Init+0xdc>)
 8001160:	4a32      	ldr	r2, [pc, #200]	; (800122c <MX_ADC2_Init+0xe0>)
 8001162:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001164:	4b30      	ldr	r3, [pc, #192]	; (8001228 <MX_ADC2_Init+0xdc>)
 8001166:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800116a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800116c:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <MX_ADC2_Init+0xdc>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001172:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <MX_ADC2_Init+0xdc>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <MX_ADC2_Init+0xdc>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <MX_ADC2_Init+0xdc>)
 8001180:	2201      	movs	r2, #1
 8001182:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001184:	4b28      	ldr	r3, [pc, #160]	; (8001228 <MX_ADC2_Init+0xdc>)
 8001186:	2208      	movs	r2, #8
 8001188:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800118a:	4b27      	ldr	r3, [pc, #156]	; (8001228 <MX_ADC2_Init+0xdc>)
 800118c:	2200      	movs	r2, #0
 800118e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001190:	4b25      	ldr	r3, [pc, #148]	; (8001228 <MX_ADC2_Init+0xdc>)
 8001192:	2200      	movs	r2, #0
 8001194:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8001196:	4b24      	ldr	r3, [pc, #144]	; (8001228 <MX_ADC2_Init+0xdc>)
 8001198:	2202      	movs	r2, #2
 800119a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800119c:	4b22      	ldr	r3, [pc, #136]	; (8001228 <MX_ADC2_Init+0xdc>)
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a4:	4b20      	ldr	r3, [pc, #128]	; (8001228 <MX_ADC2_Init+0xdc>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <MX_ADC2_Init+0xdc>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <MX_ADC2_Init+0xdc>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <MX_ADC2_Init+0xdc>)
 80011ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011be:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <MX_ADC2_Init+0xdc>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011c8:	4817      	ldr	r0, [pc, #92]	; (8001228 <MX_ADC2_Init+0xdc>)
 80011ca:	f004 fccf 	bl	8005b6c <HAL_ADC_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 80011d4:	f003 f98d 	bl	80044f2 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_ADC2_Init+0xe4>)
 80011da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011dc:	2306      	movs	r3, #6
 80011de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011e4:	237f      	movs	r3, #127	; 0x7f
 80011e6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011e8:	2304      	movs	r3, #4
 80011ea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011f0:	463b      	mov	r3, r7
 80011f2:	4619      	mov	r1, r3
 80011f4:	480c      	ldr	r0, [pc, #48]	; (8001228 <MX_ADC2_Init+0xdc>)
 80011f6:	f005 f939 	bl	800646c <HAL_ADC_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8001200:	f003 f977 	bl	80044f2 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_ADC2_Init+0xe8>)
 8001206:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001208:	230c      	movs	r3, #12
 800120a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800120c:	463b      	mov	r3, r7
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_ADC2_Init+0xdc>)
 8001212:	f005 f92b 	bl	800646c <HAL_ADC_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 800121c:	f003 f969 	bl	80044f2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	3720      	adds	r7, #32
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000234 	.word	0x20000234
 800122c:	50000100 	.word	0x50000100
 8001230:	c3290000 	.word	0xc3290000
 8001234:	cb8c0000 	.word	0xcb8c0000

08001238 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001258:	d161      	bne.n	800131e <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800125a:	4b59      	ldr	r3, [pc, #356]	; (80013c0 <HAL_ADC_MspInit+0x188>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	3301      	adds	r3, #1
 8001260:	4a57      	ldr	r2, [pc, #348]	; (80013c0 <HAL_ADC_MspInit+0x188>)
 8001262:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001264:	4b56      	ldr	r3, [pc, #344]	; (80013c0 <HAL_ADC_MspInit+0x188>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d10b      	bne.n	8001284 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800126c:	4b55      	ldr	r3, [pc, #340]	; (80013c4 <HAL_ADC_MspInit+0x18c>)
 800126e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001270:	4a54      	ldr	r2, [pc, #336]	; (80013c4 <HAL_ADC_MspInit+0x18c>)
 8001272:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001276:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001278:	4b52      	ldr	r3, [pc, #328]	; (80013c4 <HAL_ADC_MspInit+0x18c>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	4b4f      	ldr	r3, [pc, #316]	; (80013c4 <HAL_ADC_MspInit+0x18c>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001288:	4a4e      	ldr	r2, [pc, #312]	; (80013c4 <HAL_ADC_MspInit+0x18c>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001290:	4b4c      	ldr	r3, [pc, #304]	; (80013c4 <HAL_ADC_MspInit+0x18c>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800129c:	2301      	movs	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a0:	2303      	movs	r3, #3
 80012a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b2:	f007 f8cf 	bl	8008454 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012b6:	4b44      	ldr	r3, [pc, #272]	; (80013c8 <HAL_ADC_MspInit+0x190>)
 80012b8:	4a44      	ldr	r2, [pc, #272]	; (80013cc <HAL_ADC_MspInit+0x194>)
 80012ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012bc:	4b42      	ldr	r3, [pc, #264]	; (80013c8 <HAL_ADC_MspInit+0x190>)
 80012be:	2205      	movs	r2, #5
 80012c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c2:	4b41      	ldr	r3, [pc, #260]	; (80013c8 <HAL_ADC_MspInit+0x190>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c8:	4b3f      	ldr	r3, [pc, #252]	; (80013c8 <HAL_ADC_MspInit+0x190>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012ce:	4b3e      	ldr	r3, [pc, #248]	; (80013c8 <HAL_ADC_MspInit+0x190>)
 80012d0:	2280      	movs	r2, #128	; 0x80
 80012d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012d4:	4b3c      	ldr	r3, [pc, #240]	; (80013c8 <HAL_ADC_MspInit+0x190>)
 80012d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012dc:	4b3a      	ldr	r3, [pc, #232]	; (80013c8 <HAL_ADC_MspInit+0x190>)
 80012de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012e2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80012e4:	4b38      	ldr	r3, [pc, #224]	; (80013c8 <HAL_ADC_MspInit+0x190>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012ea:	4b37      	ldr	r3, [pc, #220]	; (80013c8 <HAL_ADC_MspInit+0x190>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012f0:	4835      	ldr	r0, [pc, #212]	; (80013c8 <HAL_ADC_MspInit+0x190>)
 80012f2:	f005 ffad 	bl	8007250 <HAL_DMA_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80012fc:	f003 f8f9 	bl	80044f2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a31      	ldr	r2, [pc, #196]	; (80013c8 <HAL_ADC_MspInit+0x190>)
 8001304:	655a      	str	r2, [r3, #84]	; 0x54
 8001306:	4a30      	ldr	r2, [pc, #192]	; (80013c8 <HAL_ADC_MspInit+0x190>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	2012      	movs	r0, #18
 8001312:	f005 ff68 	bl	80071e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001316:	2012      	movs	r0, #18
 8001318:	f005 ff7f 	bl	800721a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800131c:	e04c      	b.n	80013b8 <HAL_ADC_MspInit+0x180>
  else if(adcHandle->Instance==ADC2)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a2b      	ldr	r2, [pc, #172]	; (80013d0 <HAL_ADC_MspInit+0x198>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d147      	bne.n	80013b8 <HAL_ADC_MspInit+0x180>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001328:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <HAL_ADC_MspInit+0x188>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	4a24      	ldr	r2, [pc, #144]	; (80013c0 <HAL_ADC_MspInit+0x188>)
 8001330:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001332:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <HAL_ADC_MspInit+0x188>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d10b      	bne.n	8001352 <HAL_ADC_MspInit+0x11a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800133a:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <HAL_ADC_MspInit+0x18c>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133e:	4a21      	ldr	r2, [pc, #132]	; (80013c4 <HAL_ADC_MspInit+0x18c>)
 8001340:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001346:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <HAL_ADC_MspInit+0x18c>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
    hdma_adc2.Instance = DMA1_Channel2;
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HAL_ADC_MspInit+0x19c>)
 8001354:	4a20      	ldr	r2, [pc, #128]	; (80013d8 <HAL_ADC_MspInit+0x1a0>)
 8001356:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001358:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <HAL_ADC_MspInit+0x19c>)
 800135a:	2224      	movs	r2, #36	; 0x24
 800135c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <HAL_ADC_MspInit+0x19c>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <HAL_ADC_MspInit+0x19c>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <HAL_ADC_MspInit+0x19c>)
 800136c:	2280      	movs	r2, #128	; 0x80
 800136e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <HAL_ADC_MspInit+0x19c>)
 8001372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001376:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_ADC_MspInit+0x19c>)
 800137a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800137e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <HAL_ADC_MspInit+0x19c>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_ADC_MspInit+0x19c>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800138c:	4811      	ldr	r0, [pc, #68]	; (80013d4 <HAL_ADC_MspInit+0x19c>)
 800138e:	f005 ff5f 	bl	8007250 <HAL_DMA_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_ADC_MspInit+0x164>
      Error_Handler();
 8001398:	f003 f8ab 	bl	80044f2 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <HAL_ADC_MspInit+0x19c>)
 80013a0:	655a      	str	r2, [r3, #84]	; 0x54
 80013a2:	4a0c      	ldr	r2, [pc, #48]	; (80013d4 <HAL_ADC_MspInit+0x19c>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2100      	movs	r1, #0
 80013ac:	2012      	movs	r0, #18
 80013ae:	f005 ff1a 	bl	80071e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013b2:	2012      	movs	r0, #18
 80013b4:	f005 ff31 	bl	800721a <HAL_NVIC_EnableIRQ>
}
 80013b8:	bf00      	nop
 80013ba:	3728      	adds	r7, #40	; 0x28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000224 	.word	0x20000224
 80013c4:	40021000 	.word	0x40021000
 80013c8:	2000030c 	.word	0x2000030c
 80013cc:	40020008 	.word	0x40020008
 80013d0:	50000100 	.word	0x50000100
 80013d4:	2000036c 	.word	0x2000036c
 80013d8:	4002001c 	.word	0x4002001c

080013dc <order_phases>:
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"
#include "tim.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 80013dc:	b5b0      	push	{r4, r5, r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af02      	add	r7, sp, #8
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
 80013e8:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 80013ea:	4b7d      	ldr	r3, [pc, #500]	; (80015e0 <order_phases+0x204>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
	if(!cal->started){
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7c1b      	ldrb	r3, [r3, #16]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d108      	bne.n	800140a <order_phases+0x2e>
		printf("Checking phase sign, pole pairs\r\n");
 80013f8:	487a      	ldr	r0, [pc, #488]	; (80015e4 <order_phases+0x208>)
 80013fa:	f00c fe6b 	bl	800e0d4 <puts>
		cal->started = 1;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	ee07 3a90 	vmov	s15, r3
 8001416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80015e8 <order_phases+0x20c>
 800141e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	edd3 7a05 	vldr	s15, [r3, #20]
 800142e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001432:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143a:	d528      	bpl.n	800148e <order_phases+0xb2>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 800144e:	3308      	adds	r3, #8
 8001450:	601a      	str	r2, [r3, #0]
        cal->cal_position.elec_velocity = 0;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 8001458:	3310      	adds	r3, #16
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
        controller->i_d_des = I_CAL;
 8001460:	4b62      	ldr	r3, [pc, #392]	; (80015ec <order_phases+0x210>)
 8001462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 800147a:	332c      	adds	r3, #44	; 0x2c
 800147c:	4619      	mov	r1, r3
 800147e:	68b8      	ldr	r0, [r7, #8]
 8001480:	f001 fa1c 	bl	80028bc <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	619a      	str	r2, [r3, #24]
    	return;
 800148c:	e0a4      	b.n	80015d8 <order_phases+0x1fc>
    }
    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	edd3 7a05 	vldr	s15, [r3, #20]
 8001494:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80015f0 <order_phases+0x214>
 8001498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	d51d      	bpl.n	80014de <order_phases+0x102>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80014a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 80014c8:	3308      	adds	r3, #8
 80014ca:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80014d2:	332c      	adds	r3, #44	; 0x2c
 80014d4:	4619      	mov	r1, r3
 80014d6:	68b8      	ldr	r0, [r7, #8]
 80014d8:	f001 f9f0 	bl	80028bc <commutate>
    	return;
 80014dc:	e07c      	b.n	80015d8 <order_phases+0x1fc>
    }
	reset_foc(controller);
 80014de:	68b8      	ldr	r0, [r7, #8]
 80014e0:	f001 f978 	bl	80027d4 <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80014f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80014f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f8:	eef0 7ae7 	vabs.f32	s15, s15
 80014fc:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80015f4 <order_phases+0x218>
 8001500:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001504:	ee16 0a90 	vmov	r0, s13
 8001508:	f7ff f846 	bl	8000598 <__aeabi_f2d>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	ec43 2b10 	vmov	d0, r2, r3
 8001514:	f010 f9c6 	bl	80118a4 <round>
 8001518:	ec53 2b10 	vmov	r2, r3, d0
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f7ff fb6a 	bl	8000bf8 <__aeabi_d2uiz>
 8001524:	4603      	mov	r3, r0
 8001526:	b2da      	uxtb	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001532:	ed97 7a05 	vldr	s14, [r7, #20]
 8001536:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	dd07      	ble.n	8001550 <order_phases+0x174>
		cal->phase_order = 0;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 8001548:	482b      	ldr	r0, [pc, #172]	; (80015f8 <order_phases+0x21c>)
 800154a:	f00c fdc3 	bl	800e0d4 <puts>
 800154e:	e014      	b.n	800157a <order_phases+0x19e>
	}
	else{
		cal->phase_order = 1;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 2020 	strb.w	r2, [r3, #32]
		int offsetATemp = controller->adc_a_offset;
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800155e:	613b      	str	r3, [r7, #16]
		controller->adc_a_offset = controller->adc_b_offset;
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		controller->adc_b_offset = offsetATemp;
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		printf("Swapping phase sign\r\n");
 8001574:	4821      	ldr	r0, [pc, #132]	; (80015fc <order_phases+0x220>)
 8001576:	f00c fdad 	bl	800e0d4 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	4619      	mov	r1, r3
 8001580:	481f      	ldr	r0, [pc, #124]	; (8001600 <order_phases+0x224>)
 8001582:	f00c fd21 	bl	800dfc8 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff f804 	bl	8000598 <__aeabi_f2d>
 8001590:	4604      	mov	r4, r0
 8001592:	460d      	mov	r5, r1
 8001594:	6978      	ldr	r0, [r7, #20]
 8001596:	f7fe ffff 	bl	8000598 <__aeabi_f2d>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	e9cd 2300 	strd	r2, r3, [sp]
 80015a2:	4622      	mov	r2, r4
 80015a4:	462b      	mov	r3, r5
 80015a6:	4817      	ldr	r0, [pc, #92]	; (8001604 <order_phases+0x228>)
 80015a8:	f00c fd0e 	bl	800dfc8 <iprintf>
    PHASE_ORDER = cal->phase_order;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <order_phases+0x204>)
 80015b6:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	ee07 3a90 	vmov	s15, r3
 80015c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <order_phases+0x210>)
 80015c6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    cal->started = 0;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bdb0      	pop	{r4, r5, r7, pc}
 80015de:	bf00      	nop
 80015e0:	20004d8c 	.word	0x20004d8c
 80015e4:	08011f48 	.word	0x08011f48
 80015e8:	3851b717 	.word	0x3851b717
 80015ec:	20000678 	.word	0x20000678
 80015f0:	3fd06cbe 	.word	0x3fd06cbe
 80015f4:	40c90fdb 	.word	0x40c90fdb
 80015f8:	08011f6c 	.word	0x08011f6c
 80015fc:	08011f84 	.word	0x08011f84
 8001600:	08011f9c 	.word	0x08011f9c
 8001604:	08011fb0 	.word	0x08011fb0

08001608 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b094      	sub	sp, #80	; 0x50
 800160c:	af02      	add	r7, sp, #8
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	7c1b      	ldrb	r3, [r3, #16]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10f      	bne.n	800163e <calibrate_encoder+0x36>
		printf("Starting offset cal and linearization\r\n");
 800161e:	489e      	ldr	r0, [pc, #632]	; (8001898 <calibrate_encoder+0x290>)
 8001620:	f00c fd58 	bl	800e0d4 <puts>
		cal->started = 1;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	60da      	str	r2, [r3, #12]
		cal->next_sample_time = T1;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
		cal->sample_count = 0;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	849a      	strh	r2, [r3, #36]	; 0x24
	}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	ee07 3a90 	vmov	s15, r3
 800164a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800189c <calibrate_encoder+0x294>
 8001652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001662:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800166a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166e:	d525      	bpl.n	80016bc <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 8001682:	3308      	adds	r3, #8
 8001684:	601a      	str	r2, [r3, #0]
        controller->i_d_des = I_CAL;
 8001686:	4b86      	ldr	r3, [pc, #536]	; (80018a0 <calibrate_encoder+0x298>)
 8001688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80016a0:	332c      	adds	r3, #44	; 0x2c
 80016a2:	4619      	mov	r1, r3
 80016a4:	68b8      	ldr	r0, [r7, #8]
 80016a6:	f001 f909 	bl	80028bc <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 80016ba:	e256      	b.n	8001b6a <calibrate_encoder+0x562>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	ed93 7a05 	vldr	s14, [r3, #20]
 80016c2:	4b77      	ldr	r3, [pc, #476]	; (80018a0 <calibrate_encoder+0x298>)
 80016c4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016c8:	eddf 6a76 	vldr	s13, [pc, #472]	; 80018a4 <calibrate_encoder+0x29c>
 80016cc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80016d0:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80016d4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80016d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80016e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e8:	f140 808f 	bpl.w	800180a <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80016f2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80018a8 <calibrate_encoder+0x2a0>
 80016f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 800170a:	3308      	adds	r3, #8
 800170c:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8001714:	332c      	adds	r3, #44	; 0x2c
 8001716:	4619      	mov	r1, r3
 8001718:	68b8      	ldr	r0, [r7, #8]
 800171a:	f001 f8cf 	bl	80028bc <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	ed93 7a05 	vldr	s14, [r3, #20]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800172a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800172e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001732:	dc00      	bgt.n	8001736 <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 8001734:	e219      	b.n	8001b6a <calibrate_encoder+0x562>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	edd3 7a02 	vldr	s15, [r3, #8]
 800173c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80018bc <calibrate_encoder+0x2b4>
 8001740:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001744:	4b56      	ldr	r3, [pc, #344]	; (80018a0 <calibrate_encoder+0x298>)
 8001746:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800174a:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80018a4 <calibrate_encoder+0x29c>
 800174e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800175a:	ee17 3a90 	vmov	r3, s15
 800175e:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	14db      	asrs	r3, r3, #19
 800176e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001776:	4618      	mov	r0, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	441a      	add	r2, r3
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	f100 030a 	add.w	r3, r0, #10
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800178c:	461d      	mov	r5, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	330a      	adds	r3, #10
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	685c      	ldr	r4, [r3, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fef9 	bl	8000598 <__aeabi_f2d>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	e9cd 2300 	strd	r2, r3, [sp]
 80017ae:	4623      	mov	r3, r4
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4629      	mov	r1, r5
 80017b4:	483d      	ldr	r0, [pc, #244]	; (80018ac <calibrate_encoder+0x2a4>)
 80017b6:	f00c fc07 	bl	800dfc8 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80017c0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80018b0 <calibrate_encoder+0x2a8>
 80017c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017d2:	ee07 3a90 	vmov	s15, r3
 80017d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017da:	4b31      	ldr	r3, [pc, #196]	; (80018a0 <calibrate_encoder+0x298>)
 80017dc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80017e0:	eddf 6a34 	vldr	s13, [pc, #208]	; 80018b4 <calibrate_encoder+0x2ac>
 80017e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80017f0:	eeb4 7a67 	vcmp.f32	s14, s15
 80017f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f8:	f000 81b4 	beq.w	8001b64 <calibrate_encoder+0x55c>
			cal->sample_count++;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001800:	3301      	adds	r3, #1
 8001802:	b29a      	uxth	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 8001808:	e1af      	b.n	8001b6a <calibrate_encoder+0x562>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001810:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <calibrate_encoder+0x298>)
 8001812:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001816:	eddf 6a28 	vldr	s13, [pc, #160]	; 80018b8 <calibrate_encoder+0x2b0>
 800181a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800181e:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001822:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800182a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800182e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001836:	f140 80a9 	bpl.w	800198c <calibrate_encoder+0x384>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001840:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80018a8 <calibrate_encoder+0x2a0>
 8001844:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <calibrate_encoder+0x298>)
 8001850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		controller->i_q_des = 0.0f;
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		cal->cal_position.elec_angle = cal->theta_ref;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 800186c:	3308      	adds	r3, #8
 800186e:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8001876:	332c      	adds	r3, #44	; 0x2c
 8001878:	4619      	mov	r1, r3
 800187a:	68b8      	ldr	r0, [r7, #8]
 800187c:	f001 f81e 	bl	80028bc <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	ed93 7a05 	vldr	s14, [r3, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800188c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001894:	dc14      	bgt.n	80018c0 <calibrate_encoder+0x2b8>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 8001896:	e167      	b.n	8001b68 <calibrate_encoder+0x560>
 8001898:	08011fcc 	.word	0x08011fcc
 800189c:	3851b717 	.word	0x3851b717
 80018a0:	20000678 	.word	0x20000678
 80018a4:	40c90fdb 	.word	0x40c90fdb
 80018a8:	3a03126e 	.word	0x3a03126e
 80018ac:	08011ff4 	.word	0x08011ff4
 80018b0:	3c20d97c 	.word	0x3c20d97c
 80018b4:	42800000 	.word	0x42800000
 80018b8:	41490fdb 	.word	0x41490fdb
 80018bc:	45800000 	.word	0x45800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 814f 	beq.w	8001b68 <calibrate_encoder+0x560>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80018d0:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80018bc <calibrate_encoder+0x2b4>
 80018d4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80018d8:	4ba5      	ldr	r3, [pc, #660]	; (8001b70 <calibrate_encoder+0x568>)
 80018da:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018de:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8001b74 <calibrate_encoder+0x56c>
 80018e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ee:	ee17 3a90 	vmov	r3, s15
 80018f2:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	14db      	asrs	r3, r3, #19
 8001902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	4413      	add	r3, r2
 800190a:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	330a      	adds	r3, #10
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	4413      	add	r3, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001922:	4610      	mov	r0, r2
 8001924:	0fda      	lsrs	r2, r3, #31
 8001926:	4413      	add	r3, r2
 8001928:	105b      	asrs	r3, r3, #1
 800192a:	4619      	mov	r1, r3
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	f100 030a 	add.w	r3, r0, #10
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800193c:	461d      	mov	r5, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	330a      	adds	r3, #10
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	685c      	ldr	r4, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fe21 	bl	8000598 <__aeabi_f2d>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	e9cd 2300 	strd	r2, r3, [sp]
 800195e:	4623      	mov	r3, r4
 8001960:	6a3a      	ldr	r2, [r7, #32]
 8001962:	4629      	mov	r1, r5
 8001964:	4884      	ldr	r0, [pc, #528]	; (8001b78 <calibrate_encoder+0x570>)
 8001966:	f00c fb2f 	bl	800dfc8 <iprintf>
			cal->sample_count--;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800196e:	3b01      	subs	r3, #1
 8001970:	b29a      	uxth	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	849a      	strh	r2, [r3, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800197c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001b7c <calibrate_encoder+0x574>
 8001980:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 800198a:	e0ed      	b.n	8001b68 <calibrate_encoder+0x560>
    }

    reset_foc(controller);
 800198c:	68b8      	ldr	r0, [r7, #8]
 800198e:	f000 ff21 	bl	80027d4 <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001996:	2300      	movs	r3, #0
 8001998:	643b      	str	r3, [r7, #64]	; 0x40
 800199a:	e00b      	b.n	80019b4 <calibrate_encoder+0x3ac>
		ezero_mean += cal->error_arr[i];
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019a0:	330a      	adds	r3, #10
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019aa:	4413      	add	r3, r2
 80019ac:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80019ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019b0:	3301      	adds	r3, #1
 80019b2:	643b      	str	r3, [r7, #64]	; 0x40
 80019b4:	4b6e      	ldr	r3, [pc, #440]	; (8001b70 <calibrate_encoder+0x568>)
 80019b6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019be:	ee17 3a90 	vmov	r3, s15
 80019c2:	019b      	lsls	r3, r3, #6
 80019c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019c6:	429a      	cmp	r2, r3
 80019c8:	dbe8      	blt.n	800199c <calibrate_encoder+0x394>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 80019ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019d4:	4b66      	ldr	r3, [pc, #408]	; (8001b70 <calibrate_encoder+0x568>)
 80019d6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019da:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001b80 <calibrate_encoder+0x578>
 80019de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ea:	ee17 2a90 	vmov	r2, s15
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 80019f2:	2340      	movs	r3, #64	; 0x40
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
	int lut_offset = (cal->error_arr[0])*N_LUT/ENC_CPR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	da00      	bge.n	8001a00 <calibrate_encoder+0x3f8>
 80019fe:	333f      	adds	r3, #63	; 0x3f
 8001a00:	119b      	asrs	r3, r3, #6
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<N_LUT; i++){
 8001a04:	2300      	movs	r3, #0
 8001a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a08:	e0a0      	b.n	8001b4c <calibrate_encoder+0x544>
			int moving_avg = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a10:	0fda      	lsrs	r2, r3, #31
 8001a12:	4413      	add	r3, r2
 8001a14:	105b      	asrs	r3, r3, #1
 8001a16:	425b      	negs	r3, r3
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
 8001a1a:	e068      	b.n	8001aee <calibrate_encoder+0x4e6>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a1e:	ee07 3a90 	vmov	s15, r3
 8001a22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a26:	4b52      	ldr	r3, [pc, #328]	; (8001b70 <calibrate_encoder+0x568>)
 8001a28:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a30:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001b80 <calibrate_encoder+0x578>
 8001a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a38:	eddf 6a51 	vldr	s13, [pc, #324]	; 8001b80 <calibrate_encoder+0x578>
 8001a3c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a52:	ee17 3a90 	vmov	r3, s15
 8001a56:	633b      	str	r3, [r7, #48]	; 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8001a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	da13      	bge.n	8001a86 <calibrate_encoder+0x47e>
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a60:	ee07 3a90 	vmov	s15, r3
 8001a64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a68:	4b41      	ldr	r3, [pc, #260]	; (8001b70 <calibrate_encoder+0x568>)
 8001a6a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a6e:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001b80 <calibrate_encoder+0x578>
 8001a72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a7e:	ee17 3a90 	vmov	r3, s15
 8001a82:	633b      	str	r3, [r7, #48]	; 0x30
 8001a84:	e027      	b.n	8001ad6 <calibrate_encoder+0x4ce>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a88:	ee07 3a90 	vmov	s15, r3
 8001a8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a90:	4b37      	ldr	r3, [pc, #220]	; (8001b70 <calibrate_encoder+0x568>)
 8001a92:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a96:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001b80 <calibrate_encoder+0x578>
 8001a9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001aa2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001aa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aae:	dd12      	ble.n	8001ad6 <calibrate_encoder+0x4ce>
 8001ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aba:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <calibrate_encoder+0x568>)
 8001abc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ac0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001b80 <calibrate_encoder+0x578>
 8001ac4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001acc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ad0:	ee17 3a90 	vmov	r3, s15
 8001ad4:	633b      	str	r3, [r7, #48]	; 0x30
				moving_avg += cal->error_arr[index];
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ada:	330a      	adds	r3, #10
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ae4:	4413      	add	r3, r2
 8001ae6:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aea:	3301      	adds	r3, #1
 8001aec:	637b      	str	r3, [r7, #52]	; 0x34
 8001aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af0:	0fda      	lsrs	r2, r3, #31
 8001af2:	4413      	add	r3, r2
 8001af4:	105b      	asrs	r3, r3, #1
 8001af6:	461a      	mov	r2, r3
 8001af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afa:	4293      	cmp	r3, r2
 8001afc:	db8e      	blt.n	8001a1c <calibrate_encoder+0x414>
			}
			moving_avg = moving_avg/window;
 8001afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b02:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b06:	63bb      	str	r3, [r7, #56]	; 0x38
			int lut_index = lut_offset + i;
 8001b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b0c:	4413      	add	r3, r2
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b12:	2b3f      	cmp	r3, #63	; 0x3f
 8001b14:	dd02      	ble.n	8001b1c <calibrate_encoder+0x514>
 8001b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b18:	3b40      	subs	r3, #64	; 0x40
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b22:	1ad2      	subs	r2, r2, r3
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b2c:	330a      	adds	r3, #10
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b40:	4810      	ldr	r0, [pc, #64]	; (8001b84 <calibrate_encoder+0x57c>)
 8001b42:	f00c fa41 	bl	800dfc8 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8001b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b48:	3301      	adds	r3, #1
 8001b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b4e:	2b3f      	cmp	r3, #63	; 0x3f
 8001b50:	f77f af5b 	ble.w	8001a0a <calibrate_encoder+0x402>

		}

	cal->started = 0;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001b62:	e002      	b.n	8001b6a <calibrate_encoder+0x562>
				return;
 8001b64:	bf00      	nop
 8001b66:	e000      	b.n	8001b6a <calibrate_encoder+0x562>
		return;
 8001b68:	bf00      	nop
}
 8001b6a:	3748      	adds	r7, #72	; 0x48
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b70:	20000678 	.word	0x20000678
 8001b74:	40c90fdb 	.word	0x40c90fdb
 8001b78:	08011ff4 	.word	0x08011ff4
 8001b7c:	3c20d97c 	.word	0x3c20d97c
 8001b80:	42800000 	.word	0x42800000
 8001b84:	08012004 	.word	0x08012004

08001b88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b8e:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <MX_DMA_Init+0x60>)
 8001b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b92:	4a15      	ldr	r2, [pc, #84]	; (8001be8 <MX_DMA_Init+0x60>)
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	6493      	str	r3, [r2, #72]	; 0x48
 8001b9a:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <MX_DMA_Init+0x60>)
 8001b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <MX_DMA_Init+0x60>)
 8001ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001baa:	4a0f      	ldr	r2, [pc, #60]	; (8001be8 <MX_DMA_Init+0x60>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6493      	str	r3, [r2, #72]	; 0x48
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <MX_DMA_Init+0x60>)
 8001bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	200b      	movs	r0, #11
 8001bc4:	f005 fb0f 	bl	80071e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bc8:	200b      	movs	r0, #11
 8001bca:	f005 fb26 	bl	800721a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	200c      	movs	r0, #12
 8001bd4:	f005 fb07 	bl	80071e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001bd8:	200c      	movs	r0, #12
 8001bda:	f005 fb1e 	bl	800721a <HAL_NVIC_EnableIRQ>

}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000
 8001bec:	00000000 	.word	0x00000000

08001bf0 <eeprom_restore>:

static uint32_t const page_nb = 58U; //(uint32_t)FLASH_PAGE_NB-1;
static uint32_t const start_address = 0x08000000UL+58*0x800U; //(FLASH_BASE)+page_nb*(FLASH_PAGE_SIZE);

HAL_StatusTypeDef eeprom_restore(float * float_regs, uint32_t float_size, int * int_regs, uint32_t int_size)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b090      	sub	sp, #64	; 0x40
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
	uint64_t data = 0xDEADBEEF;
 8001bfe:	a33b      	add	r3, pc, #236	; (adr r3, 8001cec <eeprom_restore+0xfc>)
 8001c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c04:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8001c08:	2300      	movs	r3, #0
 8001c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c0c:	e02c      	b.n	8001c68 <eeprom_restore+0x78>
	{
		memcpy(&data, (uint32_t *)(start_address+32*index), sizeof(uint64_t));
 8001c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c10:	015b      	lsls	r3, r3, #5
 8001c12:	4a35      	ldr	r2, [pc, #212]	; (8001ce8 <eeprom_restore+0xf8>)
 8001c14:	4413      	add	r3, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c1c:	2208      	movs	r2, #8
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f00b fd52 	bl	800d6c8 <memcpy>
		uint32_t temp = data&0xFFFFFFFF;
 8001c24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c28:	4613      	mov	r3, r2
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t temp2 = data>>32;
 8001c2c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	000a      	movs	r2, r1
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		float value;
		float value2;
		memcpy(&value,&temp,sizeof(uint32_t));
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
 8001c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
		memcpy(&value2,&temp2,sizeof(uint32_t));
 8001c46:	623b      	str	r3, [r7, #32]
		float_regs[index] = value;
 8001c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4413      	add	r3, r2
 8001c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c52:	601a      	str	r2, [r3, #0]
		float_regs[index+1] = value2;
 8001c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c56:	3301      	adds	r3, #1
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	6a3a      	ldr	r2, [r7, #32]
 8001c60:	601a      	str	r2, [r3, #0]
	for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8001c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c64:	3302      	adds	r3, #2
 8001c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d3ce      	bcc.n	8001c0e <eeprom_restore+0x1e>
	}
	for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8001c70:	2300      	movs	r3, #0
 8001c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c74:	e02e      	b.n	8001cd4 <eeprom_restore+0xe4>
	{

		memcpy(&data, (uint32_t *)(start_address+32*(index+float_size)), sizeof(uint64_t));
 8001c76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	015b      	lsls	r3, r3, #5
 8001c7e:	4a1a      	ldr	r2, [pc, #104]	; (8001ce8 <eeprom_restore+0xf8>)
 8001c80:	4413      	add	r3, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c88:	2208      	movs	r2, #8
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f00b fd1c 	bl	800d6c8 <memcpy>
		uint32_t temp = data&0xFFFFFFFF;
 8001c90:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c94:	4613      	mov	r3, r2
 8001c96:	61fb      	str	r3, [r7, #28]
		uint32_t temp2 = data>>32;
 8001c98:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	000a      	movs	r2, r1
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	4613      	mov	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
 8001cac:	69fb      	ldr	r3, [r7, #28]
		int value;
		int value2;
		memcpy(&value,&temp,sizeof(uint32_t));
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	69bb      	ldr	r3, [r7, #24]
		memcpy(&value2,&temp2,sizeof(uint32_t));
 8001cb2:	613b      	str	r3, [r7, #16]
		int_regs[index] = value;
 8001cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	4413      	add	r3, r2
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	601a      	str	r2, [r3, #0]
		int_regs[index+1] = value2;
 8001cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	601a      	str	r2, [r3, #0]
	for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8001cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d3cc      	bcc.n	8001c76 <eeprom_restore+0x86>
	}

	return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3740      	adds	r7, #64	; 0x40
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	0801d000 	.word	0x0801d000
 8001cec:	deadbeef 	.word	0xdeadbeef
	...

08001cf8 <eeprom_store>:

HAL_StatusTypeDef eeprom_store(float const * float_regs, uint32_t float_size, int const * int_regs, uint32_t int_size)
{
 8001cf8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cfc:	b09c      	sub	sp, #112	; 0x70
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	603b      	str	r3, [r7, #0]
	HAL_FLASH_Unlock();
 8001d08:	f006 f988 	bl	800801c <HAL_FLASH_Unlock>
	// erase the last page of bank1 (STM32G43x : 1 bank, 64 pages, 2kB per page, 64-bit data)
	{
		FLASH_EraseInitTypeDef erase ={FLASH_TYPEERASE_PAGES,FLASH_BANK_1,page_nb,5};
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d10:	2301      	movs	r3, #1
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d14:	233a      	movs	r3, #58	; 0x3a
 8001d16:	633b      	str	r3, [r7, #48]	; 0x30
 8001d18:	2305      	movs	r3, #5
 8001d1a:	637b      	str	r3, [r7, #52]	; 0x34
		uint32_t page_error = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&erase, &page_error);
 8001d20:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001d24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d28:	4611      	mov	r1, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f006 fa6e 	bl	800820c <HAL_FLASHEx_Erase>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if(result!=HAL_OK)
 8001d36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d004      	beq.n	8001d48 <eeprom_store+0x50>
		{
			HAL_FLASH_Lock();
 8001d3e:	f006 f98f 	bl	8008060 <HAL_FLASH_Lock>
			return result;
 8001d42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d46:	e0a7      	b.n	8001e98 <eeprom_store+0x1a0>
		}
	}
	// write the last page
	{
		uint64_t data = 0xDEADBEEF;
 8001d48:	a358      	add	r3, pc, #352	; (adr r3, 8001eac <eeprom_store+0x1b4>)
 8001d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8001d52:	2300      	movs	r3, #0
 8001d54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d56:	e047      	b.n	8001de8 <eeprom_store+0xf0>
		{
			union UN {float a; uint32_t b;};
			union UN un1;
			union UN un2;
			un1.a = float_regs[index];
 8001d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	623b      	str	r3, [r7, #32]
			un2.a = float_regs[index+1];
 8001d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d66:	3301      	adds	r3, #1
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	61fb      	str	r3, [r7, #28]
			uint64_t temp = un2.b;
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	461a      	mov	r2, r3
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			data = (temp<<32)|un1.b;
 8001d7e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	6a39      	ldr	r1, [r7, #32]
 8001d90:	4608      	mov	r0, r1
 8001d92:	f04f 0100 	mov.w	r1, #0
 8001d96:	ea42 0800 	orr.w	r8, r2, r0
 8001d9a:	ea43 0901 	orr.w	r9, r3, r1
 8001d9e:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
			HAL_StatusTypeDef result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,start_address+index*32,data);
 8001da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001da4:	015b      	lsls	r3, r3, #5
 8001da6:	4a40      	ldr	r2, [pc, #256]	; (8001ea8 <eeprom_store+0x1b0>)
 8001da8:	1899      	adds	r1, r3, r2
 8001daa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001dae:	2000      	movs	r0, #0
 8001db0:	f006 f8de 	bl	8007f70 <HAL_FLASH_Program>
 8001db4:	4603      	mov	r3, r0
 8001db6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if(result!=HAL_OK)
 8001dba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00f      	beq.n	8001de2 <eeprom_store+0xea>
			{
				uint32_t error = HAL_FLASH_GetError();
 8001dc2:	f006 f967 	bl	8008094 <HAL_FLASH_GetError>
 8001dc6:	63b8      	str	r0, [r7, #56]	; 0x38
				if(error)
 8001dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d004      	beq.n	8001dd8 <eeprom_store+0xe0>
				{
					HAL_FLASH_Lock();
 8001dce:	f006 f947 	bl	8008060 <HAL_FLASH_Lock>
					return error;
 8001dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	e05f      	b.n	8001e98 <eeprom_store+0x1a0>
				}
				HAL_FLASH_Lock();
 8001dd8:	f006 f942 	bl	8008060 <HAL_FLASH_Lock>
				return result;
 8001ddc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001de0:	e05a      	b.n	8001e98 <eeprom_store+0x1a0>
		for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8001de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de4:	3302      	adds	r3, #2
 8001de6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001de8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d3b3      	bcc.n	8001d58 <eeprom_store+0x60>
			}
		}
		for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8001df0:	2300      	movs	r3, #0
 8001df2:	66bb      	str	r3, [r7, #104]	; 0x68
 8001df4:	e049      	b.n	8001e8a <eeprom_store+0x192>
		{
			union UN {int a; uint32_t b;};
			union UN un1;
			union UN un2;
			un1.a = int_regs[index];
 8001df6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]
			un2.a = int_regs[index+1];
 8001e02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e04:	3301      	adds	r3, #1
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	617b      	str	r3, [r7, #20]
			uint64_t temp = un2.b;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	461a      	mov	r2, r3
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			data = (temp<<32)|un1.b;
 8001e1c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	0003      	movs	r3, r0
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	69b9      	ldr	r1, [r7, #24]
 8001e2e:	4608      	mov	r0, r1
 8001e30:	f04f 0100 	mov.w	r1, #0
 8001e34:	ea42 0400 	orr.w	r4, r2, r0
 8001e38:	ea43 0501 	orr.w	r5, r3, r1
 8001e3c:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
			HAL_StatusTypeDef result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,start_address+(float_size+index)*32,data);
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e44:	4413      	add	r3, r2
 8001e46:	015b      	lsls	r3, r3, #5
 8001e48:	4a17      	ldr	r2, [pc, #92]	; (8001ea8 <eeprom_store+0x1b0>)
 8001e4a:	1899      	adds	r1, r3, r2
 8001e4c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e50:	2000      	movs	r0, #0
 8001e52:	f006 f88d 	bl	8007f70 <HAL_FLASH_Program>
 8001e56:	4603      	mov	r3, r0
 8001e58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			if(result!=HAL_OK)
 8001e5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00f      	beq.n	8001e84 <eeprom_store+0x18c>
			{
				uint32_t error = HAL_FLASH_GetError();
 8001e64:	f006 f916 	bl	8008094 <HAL_FLASH_GetError>
 8001e68:	64b8      	str	r0, [r7, #72]	; 0x48
				if(error)
 8001e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d004      	beq.n	8001e7a <eeprom_store+0x182>
				{
					HAL_FLASH_Lock();
 8001e70:	f006 f8f6 	bl	8008060 <HAL_FLASH_Lock>
					return error;
 8001e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	e00e      	b.n	8001e98 <eeprom_store+0x1a0>
				}
				HAL_FLASH_Lock();
 8001e7a:	f006 f8f1 	bl	8008060 <HAL_FLASH_Lock>
				return result;
 8001e7e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e82:	e009      	b.n	8001e98 <eeprom_store+0x1a0>
		for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8001e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e86:	3302      	adds	r3, #2
 8001e88:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d3b1      	bcc.n	8001df6 <eeprom_store+0xfe>
			}
		}
	}
	HAL_FLASH_Lock();
 8001e92:	f006 f8e5 	bl	8008060 <HAL_FLASH_Lock>
	return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3770      	adds	r7, #112	; 0x70
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ea2:	bf00      	nop
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	0801d000 	.word	0x0801d000
 8001eac:	deadbeef 	.word	0xdeadbeef
 8001eb0:	00000000 	.word	0x00000000

08001eb4 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001eb8:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <MX_FDCAN1_Init+0x84>)
 8001eba:	4a20      	ldr	r2, [pc, #128]	; (8001f3c <MX_FDCAN1_Init+0x88>)
 8001ebc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001ebe:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <MX_FDCAN1_Init+0x84>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <MX_FDCAN1_Init+0x84>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001eca:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <MX_FDCAN1_Init+0x84>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <MX_FDCAN1_Init+0x84>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001ed6:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <MX_FDCAN1_Init+0x84>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001edc:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <MX_FDCAN1_Init+0x84>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <MX_FDCAN1_Init+0x84>)
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <MX_FDCAN1_Init+0x84>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <MX_FDCAN1_Init+0x84>)
 8001ef0:	220b      	movs	r2, #11
 8001ef2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001ef4:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <MX_FDCAN1_Init+0x84>)
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001efa:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <MX_FDCAN1_Init+0x84>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001f00:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <MX_FDCAN1_Init+0x84>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <MX_FDCAN1_Init+0x84>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001f0c:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <MX_FDCAN1_Init+0x84>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <MX_FDCAN1_Init+0x84>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <MX_FDCAN1_Init+0x84>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <MX_FDCAN1_Init+0x84>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001f24:	4804      	ldr	r0, [pc, #16]	; (8001f38 <MX_FDCAN1_Init+0x84>)
 8001f26:	f005 fcc5 	bl	80078b4 <HAL_FDCAN_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001f30:	f002 fadf 	bl	80044f2 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	200003cc 	.word	0x200003cc
 8001f3c:	40006400 	.word	0x40006400

08001f40 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a2d      	ldr	r2, [pc, #180]	; (8002014 <HAL_FDCAN_MspInit+0xd4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d154      	bne.n	800200c <HAL_FDCAN_MspInit+0xcc>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f62:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <HAL_FDCAN_MspInit+0xd8>)
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	4a2c      	ldr	r2, [pc, #176]	; (8002018 <HAL_FDCAN_MspInit+0xd8>)
 8001f68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f6e:	4b2a      	ldr	r3, [pc, #168]	; (8002018 <HAL_FDCAN_MspInit+0xd8>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7a:	4b27      	ldr	r3, [pc, #156]	; (8002018 <HAL_FDCAN_MspInit+0xd8>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	4a26      	ldr	r2, [pc, #152]	; (8002018 <HAL_FDCAN_MspInit+0xd8>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f86:	4b24      	ldr	r3, [pc, #144]	; (8002018 <HAL_FDCAN_MspInit+0xd8>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f92:	4b21      	ldr	r3, [pc, #132]	; (8002018 <HAL_FDCAN_MspInit+0xd8>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	4a20      	ldr	r2, [pc, #128]	; (8002018 <HAL_FDCAN_MspInit+0xd8>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9e:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <HAL_FDCAN_MspInit+0xd8>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001faa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001fbc:	2309      	movs	r3, #9
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fca:	f006 fa43 	bl	8008454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001fe0:	2309      	movs	r3, #9
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	4619      	mov	r1, r3
 8001fea:	480c      	ldr	r0, [pc, #48]	; (800201c <HAL_FDCAN_MspInit+0xdc>)
 8001fec:	f006 fa32 	bl	8008454 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_FDCAN_MspInit+0xe0>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <HAL_FDCAN_MspInit+0xe0>)
 8001ff6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ffa:	6053      	str	r3, [r2, #4]

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2100      	movs	r1, #0
 8002000:	2015      	movs	r0, #21
 8002002:	f005 f8f0 	bl	80071e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002006:	2015      	movs	r0, #21
 8002008:	f005 f907 	bl	800721a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800200c:	bf00      	nop
 800200e:	3728      	adds	r7, #40	; 0x28
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40006400 	.word	0x40006400
 8002018:	40021000 	.word	0x40021000
 800201c:	48000400 	.word	0x48000400
 8002020:	40010000 	.word	0x40010000

08002024 <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002036:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203c:	60fb      	str	r3, [r7, #12]
		dtc_u = 1.0f - controller->dtc_u;
		dtc_v = 1.0f - controller->dtc_v;
		dtc_w = 1.0f - controller->dtc_w;
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 800203e:	4b3b      	ldr	r3, [pc, #236]	; (800212c <set_dtc+0x108>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d136      	bne.n	80020b4 <set_dtc+0x90>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002046:	4b3a      	ldr	r3, [pc, #232]	; (8002130 <set_dtc+0x10c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204c:	ee07 3a90 	vmov	s15, r3
 8002050:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002054:	edd7 7a05 	vldr	s15, [r7, #20]
 8002058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205c:	4b34      	ldr	r3, [pc, #208]	; (8002130 <set_dtc+0x10c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002064:	ee17 2a90 	vmov	r2, s15
 8002068:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 800206a:	4b31      	ldr	r3, [pc, #196]	; (8002130 <set_dtc+0x10c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002070:	ee07 3a90 	vmov	s15, r3
 8002074:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002078:	edd7 7a04 	vldr	s15, [r7, #16]
 800207c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002080:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <set_dtc+0x10c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002088:	ee17 2a90 	vmov	r2, s15
 800208c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 800208e:	4b28      	ldr	r3, [pc, #160]	; (8002130 <set_dtc+0x10c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	ee07 3a90 	vmov	s15, r3
 8002098:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800209c:	edd7 7a03 	vldr	s15, [r7, #12]
 80020a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a4:	4b22      	ldr	r3, [pc, #136]	; (8002130 <set_dtc+0x10c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ac:	ee17 2a90 	vmov	r2, s15
 80020b0:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 80020b2:	e035      	b.n	8002120 <set_dtc+0xfc>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 80020b4:	4b1e      	ldr	r3, [pc, #120]	; (8002130 <set_dtc+0x10c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	ee07 3a90 	vmov	s15, r3
 80020be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80020c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ca:	4b19      	ldr	r3, [pc, #100]	; (8002130 <set_dtc+0x10c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020d2:	ee17 2a90 	vmov	r2, s15
 80020d6:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 80020d8:	4b15      	ldr	r3, [pc, #84]	; (8002130 <set_dtc+0x10c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	ee07 3a90 	vmov	s15, r3
 80020e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80020ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ee:	4b10      	ldr	r3, [pc, #64]	; (8002130 <set_dtc+0x10c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020f6:	ee17 2a90 	vmov	r2, s15
 80020fa:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <set_dtc+0x10c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800210a:	edd7 7a03 	vldr	s15, [r7, #12]
 800210e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002112:	4b07      	ldr	r3, [pc, #28]	; (8002130 <set_dtc+0x10c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800211a:	ee17 2a90 	vmov	r2, s15
 800211e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002120:	bf00      	nop
 8002122:	371c      	adds	r7, #28
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	20004d8c 	.word	0x20004d8c
 8002130:	200053e4 	.word	0x200053e4

08002134 <analog_sample>:

void analog_sample (ControllerStruct *controller){
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	/* Sample ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 800213c:	4b41      	ldr	r3, [pc, #260]	; (8002244 <analog_sample+0x110>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d112      	bne.n	800216a <analog_sample+0x36>
		controller->adc_a_raw = controller->ADC1_Val[0];
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 800214a:	461a      	mov	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = controller->ADC2_Val[0];
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 8002156:	461a      	mov	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	609a      	str	r2, [r3, #8]
		controller->adc_c_raw = controller->ADC2_Val[1];
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 8002162:	461a      	mov	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	60da      	str	r2, [r3, #12]
 8002168:	e011      	b.n	800218e <analog_sample+0x5a>
	}
	else{
		controller->adc_a_raw = controller->ADC2_Val[0];
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 8002170:	461a      	mov	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = controller->ADC1_Val[0];
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 800217c:	461a      	mov	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	609a      	str	r2, [r3, #8]
		controller->adc_c_raw = controller->ADC2_Val[1];
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 8002188:	461a      	mov	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	60da      	str	r2, [r3, #12]
	}

    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)controller->ADC1_Val, 2);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8002194:	2202      	movs	r2, #2
 8002196:	4619      	mov	r1, r3
 8002198:	482b      	ldr	r0, [pc, #172]	; (8002248 <analog_sample+0x114>)
 800219a:	f003 fe71 	bl	8005e80 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc2, (uint32_t *)controller->ADC2_Val, 2);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80021a4:	2202      	movs	r2, #2
 80021a6:	4619      	mov	r1, r3
 80021a8:	4828      	ldr	r0, [pc, #160]	; (800224c <analog_sample+0x118>)
 80021aa:	f003 fe69 	bl	8005e80 <HAL_ADC_Start_DMA>

	controller->adc_vbus_raw = controller->ADC1_Val[1];
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	; 0x2fa
 80021b4:	461a      	mov	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	ee07 3a90 	vmov	s15, r3
 80021c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002250 <analog_sample+0x11c>
 80021ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	edc3 7a08 	vstr	s15, [r3, #32]

	controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	ee07 3a90 	vmov	s15, r3
 80021e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002254 <analog_sample+0x120>
 80021ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	edc3 7a05 	vstr	s15, [r3, #20]
	controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	ee07 3a90 	vmov	s15, r3
 8002206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800220a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002254 <analog_sample+0x120>
 800220e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	edc3 7a06 	vstr	s15, [r3, #24]
	controller->i_c = I_SCALE*(float)(controller->adc_c_raw - controller->adc_c_offset);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	ee07 3a90 	vmov	s15, r3
 8002228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800222c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002254 <analog_sample+0x120>
 8002230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	edc3 7a07 	vstr	s15, [r3, #28]

}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20004d8c 	.word	0x20004d8c
 8002248:	200002a0 	.word	0x200002a0
 800224c:	20000234 	.word	0x20000234
 8002250:	3c092822 	.word	0x3c092822
 8002254:	3cf0aa87 	.word	0x3cf0aa87

08002258 <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	ed87 0a05 	vstr	s0, [r7, #20]
 8002262:	edc7 0a04 	vstr	s1, [r7, #16]
 8002266:	ed87 1a03 	vstr	s2, [r7, #12]
 800226a:	60b8      	str	r0, [r7, #8]
 800226c:	6079      	str	r1, [r7, #4]
 800226e:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 8002270:	ed97 0a05 	vldr	s0, [r7, #20]
 8002274:	f002 fa66 	bl	8004744 <cos_lut>
 8002278:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 800227c:	ed97 0a05 	vldr	s0, [r7, #20]
 8002280:	f002 fa26 	bl	80046d0 <sin_lut>
 8002284:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 8002288:	ed97 7a07 	vldr	s14, [r7, #28]
 800228c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002290:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002294:	edd7 6a06 	vldr	s13, [r7, #24]
 8002298:	edd7 7a03 	vldr	s15, [r7, #12]
 800229c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 80022aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80022ae:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002358 <abc+0x100>
 80022b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80022ba:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80022be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80022c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80022ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80022d2:	eddf 6a22 	vldr	s13, [pc, #136]	; 800235c <abc+0x104>
 80022d6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80022da:	edd7 7a06 	vldr	s15, [r7, #24]
 80022de:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80022e2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80022e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80022ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80022ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 80022fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002300:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800235c <abc+0x104>
 8002304:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002308:	edd7 7a07 	vldr	s15, [r7, #28]
 800230c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002310:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002314:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002318:	edd7 7a04 	vldr	s15, [r7, #16]
 800231c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002320:	edd7 7a07 	vldr	s15, [r7, #28]
 8002324:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002358 <abc+0x100>
 8002328:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800232c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002330:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002334:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002338:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800233c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002340:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	edc3 7a00 	vstr	s15, [r3]
    }
 800234e:	bf00      	nop
 8002350:	3720      	adds	r7, #32
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	3f5db3d7 	.word	0x3f5db3d7
 800235c:	bf5db3d7 	.word	0xbf5db3d7

08002360 <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	ed87 0a05 	vstr	s0, [r7, #20]
 800236a:	edc7 0a04 	vstr	s1, [r7, #16]
 800236e:	ed87 1a03 	vstr	s2, [r7, #12]
 8002372:	edc7 1a02 	vstr	s3, [r7, #8]
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 800237a:	ed97 0a05 	vldr	s0, [r7, #20]
 800237e:	f002 f9e1 	bl	8004744 <cos_lut>
 8002382:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002386:	ed97 0a05 	vldr	s0, [r7, #20]
 800238a:	f002 f9a1 	bl	80046d0 <sin_lut>
 800238e:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002392:	ed97 7a07 	vldr	s14, [r7, #28]
 8002396:	edd7 7a04 	vldr	s15, [r7, #16]
 800239a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800239e:	edd7 7a06 	vldr	s15, [r7, #24]
 80023a2:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002474 <dq0+0x114>
 80023a6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80023aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80023ae:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80023b2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80023b6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80023ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80023be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80023ca:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002478 <dq0+0x118>
 80023ce:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80023d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80023d6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80023da:	ee67 7a86 	vmul.f32	s15, s15, s12
 80023de:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80023e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80023e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ee:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800247c <dq0+0x11c>
 80023f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 80023fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002400:	eeb1 7a67 	vneg.f32	s14, s15
 8002404:	edd7 7a04 	vldr	s15, [r7, #16]
 8002408:	ee27 7a27 	vmul.f32	s14, s14, s15
 800240c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002410:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002478 <dq0+0x118>
 8002414:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002418:	edd7 7a06 	vldr	s15, [r7, #24]
 800241c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002420:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002424:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002428:	edd7 7a03 	vldr	s15, [r7, #12]
 800242c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002430:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002434:	edd7 7a07 	vldr	s15, [r7, #28]
 8002438:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002474 <dq0+0x114>
 800243c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002440:	edd7 7a06 	vldr	s15, [r7, #24]
 8002444:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002448:	ee67 7a86 	vmul.f32	s15, s15, s12
 800244c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002450:	edd7 7a02 	vldr	s15, [r7, #8]
 8002454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800245c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800247c <dq0+0x11c>
 8002460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	edc3 7a00 	vstr	s15, [r3]

    }
 800246a:	bf00      	nop
 800246c:	3720      	adds	r7, #32
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	3f5db3d7 	.word	0x3f5db3d7
 8002478:	bf5db3d7 	.word	0xbf5db3d7
 800247c:	3f2aaaab 	.word	0x3f2aaaab

08002480 <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8002480:	b580      	push	{r7, lr}
 8002482:	ed2d 8b02 	vpush	{d8}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af00      	add	r7, sp, #0
 800248a:	ed87 0a07 	vstr	s0, [r7, #28]
 800248e:	edc7 0a06 	vstr	s1, [r7, #24]
 8002492:	ed87 1a05 	vstr	s2, [r7, #20]
 8002496:	edc7 1a04 	vstr	s3, [r7, #16]
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 80024a0:	ed97 1a04 	vldr	s2, [r7, #16]
 80024a4:	edd7 0a05 	vldr	s1, [r7, #20]
 80024a8:	ed97 0a06 	vldr	s0, [r7, #24]
 80024ac:	f002 f892 	bl	80045d4 <fminf3>
 80024b0:	eeb0 8a40 	vmov.f32	s16, s0
 80024b4:	ed97 1a04 	vldr	s2, [r7, #16]
 80024b8:	edd7 0a05 	vldr	s1, [r7, #20]
 80024bc:	ed97 0a06 	vldr	s0, [r7, #24]
 80024c0:	f002 f854 	bl	800456c <fmaxf3>
 80024c4:	eef0 7a40 	vmov.f32	s15, s0
 80024c8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80024cc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024d4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 80024d8:	4b41      	ldr	r3, [pc, #260]	; (80025e0 <svm+0x160>)
 80024da:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80024dc:	ed97 7a06 	vldr	s14, [r7, #24]
 80024e0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80024e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f0:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80025e4 <svm+0x164>
 80024f4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80024f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80024fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002500:	edd7 7a08 	vldr	s15, [r7, #32]
 8002504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002508:	eddf 0a37 	vldr	s1, [pc, #220]	; 80025e8 <svm+0x168>
 800250c:	eeb0 0a67 	vmov.f32	s0, s15
 8002510:	f001 fff4 	bl	80044fc <fast_fmaxf>
 8002514:	eef0 7a40 	vmov.f32	s15, s0
 8002518:	eddf 0a34 	vldr	s1, [pc, #208]	; 80025ec <svm+0x16c>
 800251c:	eeb0 0a67 	vmov.f32	s0, s15
 8002520:	f002 f808 	bl	8004534 <fast_fminf>
 8002524:	eef0 7a40 	vmov.f32	s15, s0
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 800252e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002532:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800253e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002542:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80025e4 <svm+0x164>
 8002546:	ee67 6a87 	vmul.f32	s13, s15, s14
 800254a:	edd7 7a07 	vldr	s15, [r7, #28]
 800254e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002552:	edd7 7a08 	vldr	s15, [r7, #32]
 8002556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800255a:	eddf 0a23 	vldr	s1, [pc, #140]	; 80025e8 <svm+0x168>
 800255e:	eeb0 0a67 	vmov.f32	s0, s15
 8002562:	f001 ffcb 	bl	80044fc <fast_fmaxf>
 8002566:	eef0 7a40 	vmov.f32	s15, s0
 800256a:	eddf 0a20 	vldr	s1, [pc, #128]	; 80025ec <svm+0x16c>
 800256e:	eeb0 0a67 	vmov.f32	s0, s15
 8002572:	f001 ffdf 	bl	8004534 <fast_fminf>
 8002576:	eef0 7a40 	vmov.f32	s15, s0
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002580:	ed97 7a04 	vldr	s14, [r7, #16]
 8002584:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002588:	ee77 7a67 	vsub.f32	s15, s14, s15
 800258c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002590:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002594:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80025e4 <svm+0x164>
 8002598:	ee67 6a87 	vmul.f32	s13, s15, s14
 800259c:	edd7 7a07 	vldr	s15, [r7, #28]
 80025a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80025a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ac:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80025e8 <svm+0x168>
 80025b0:	eeb0 0a67 	vmov.f32	s0, s15
 80025b4:	f001 ffa2 	bl	80044fc <fast_fmaxf>
 80025b8:	eef0 7a40 	vmov.f32	s15, s0
 80025bc:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80025ec <svm+0x16c>
 80025c0:	eeb0 0a67 	vmov.f32	s0, s15
 80025c4:	f001 ffb6 	bl	8004534 <fast_fminf>
 80025c8:	eef0 7a40 	vmov.f32	s15, s0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	edc3 7a00 	vstr	s15, [r3]

    }
 80025d2:	bf00      	nop
 80025d4:	3728      	adds	r7, #40	; 0x28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	ecbd 8b02 	vpop	{d8}
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	3ef0a3d7 	.word	0x3ef0a3d7
 80025e4:	3f933333 	.word	0x3f933333
 80025e8:	00000000 	.word	0x00000000
 80025ec:	3f70a3d7 	.word	0x3f70a3d7

080025f0 <zero_current>:

void zero_current(ControllerStruct *controller){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61fb      	str	r3, [r7, #28]
    int adc_b_offset = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61bb      	str	r3, [r7, #24]
    int adc_c_offset = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
    int n = 1000;
 8002604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002608:	60fb      	str	r3, [r7, #12]
    controller->dtc_u = 0.f;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	659a      	str	r2, [r3, #88]	; 0x58
    controller->dtc_v = 0.f;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_w = 0.f;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	661a      	str	r2, [r3, #96]	; 0x60
    set_dtc(controller);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff fcfe 	bl	8002024 <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8002628:	2300      	movs	r3, #0
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	e014      	b.n	8002658 <zero_current+0x68>
    	analog_sample(controller);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff fd80 	bl	8002134 <analog_sample>
    	adc_a_offset += controller->adc_a_raw;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	69fa      	ldr	r2, [r7, #28]
 800263a:	4413      	add	r3, r2
 800263c:	61fb      	str	r3, [r7, #28]
    	adc_b_offset += controller->adc_b_raw;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4413      	add	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
    	adc_c_offset += controller->adc_c_raw;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	4413      	add	r3, r2
 8002650:	617b      	str	r3, [r7, #20]
    for (int i = 0; i<n; i++){               // Average n samples
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	3301      	adds	r3, #1
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	429a      	cmp	r2, r3
 800265e:	dbe6      	blt.n	800262e <zero_current+0x3e>
     }
    controller->adc_a_offset = adc_a_offset/n;
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	fb92 f2f3 	sdiv	r2, r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    controller->adc_b_offset = adc_b_offset/n;
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	fb92 f2f3 	sdiv	r2, r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    controller->adc_c_offset = adc_c_offset/n;
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	fb92 f2f3 	sdiv	r2, r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    }
 800268a:	bf00      	nop
 800268c:	3720      	adds	r7, #32
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a42      	ldr	r2, [pc, #264]	; (80027a8 <init_controller_params+0x114>)
 80026a0:	679a      	str	r2, [r3, #120]	; 0x78
    controller->ki_q = KI_Q;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a40      	ldr	r2, [pc, #256]	; (80027a8 <init_controller_params+0x114>)
 80026a6:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->k_d = K_SCALE*I_BW;
 80026a8:	4b40      	ldr	r3, [pc, #256]	; (80027ac <init_controller_params+0x118>)
 80026aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80026ae:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80027b0 <init_controller_params+0x11c>
 80026b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    controller->k_q = K_SCALE*I_BW;
 80026bc:	4b3b      	ldr	r3, [pc, #236]	; (80027ac <init_controller_params+0x118>)
 80026be:	edd3 7a02 	vldr	s15, [r3, #8]
 80026c2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80027b0 <init_controller_params+0x11c>
 80026c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 80026d0:	4b36      	ldr	r3, [pc, #216]	; (80027ac <init_controller_params+0x118>)
 80026d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80026d6:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80027b4 <init_controller_params+0x120>
 80026da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026de:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80027b8 <init_controller_params+0x124>
 80026e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->ki_fw = .1f*controller->ki_d;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800270a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80027bc <init_controller_params+0x128>
 800270e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
    controller->phase_order = PHASE_ORDER;
 8002718:	4b29      	ldr	r3, [pc, #164]	; (80027c0 <init_controller_params+0x12c>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	e036      	b.n	8002796 <init_controller_params+0x102>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	ee07 3a90 	vmov	s15, r3
 800272e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002732:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80027c4 <init_controller_params+0x130>
 8002736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800273a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80027c8 <init_controller_params+0x134>
 800273e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002742:	ee16 0a90 	vmov	r0, s13
 8002746:	f7fd ff27 	bl	8000598 <__aeabi_f2d>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	ec43 2b10 	vmov	d0, r2, r3
 8002752:	f00f f941 	bl	80119d8 <exp>
 8002756:	ec51 0b10 	vmov	r0, r1, d0
 800275a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800275e:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <init_controller_params+0x138>)
 8002760:	f7fd ff72 	bl	8000648 <__aeabi_dmul>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <init_controller_params+0x13c>)
 8002772:	f7fd fdb3 	bl	80002dc <__adddf3>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4610      	mov	r0, r2
 800277c:	4619      	mov	r1, r3
 800277e:	f7fe fa5b 	bl	8000c38 <__aeabi_d2f>
 8002782:	4601      	mov	r1, r0
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	333c      	adds	r3, #60	; 0x3c
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	3301      	adds	r3, #1
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2b7f      	cmp	r3, #127	; 0x7f
 800279a:	ddc5      	ble.n	8002728 <init_controller_params+0x94>
    }
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	3d3851ec 	.word	0x3d3851ec
 80027ac:	20000678 	.word	0x20000678
 80027b0:	38d1b717 	.word	0x38d1b717
 80027b4:	3851b717 	.word	0x3851b717
 80027b8:	40c90fdb 	.word	0x40c90fdb
 80027bc:	3dcccccd 	.word	0x3dcccccd
 80027c0:	20004d8c 	.word	0x20004d8c
 80027c4:	bc000000 	.word	0xbc000000
 80027c8:	3d03126f 	.word	0x3d03126f
 80027cc:	3ff33333 	.word	0x3ff33333
 80027d0:	3ff00000 	.word	0x3ff00000

080027d4 <reset_foc>:

void reset_foc(ControllerStruct *controller){
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 80027dc:	4b36      	ldr	r3, [pc, #216]	; (80028b8 <reset_foc+0xe4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	ee07 3a90 	vmov	s15, r3
 80027e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80027ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027f2:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <reset_foc+0xe4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027fa:	ee17 2a90 	vmov	r2, s15
 80027fe:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002800:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <reset_foc+0xe4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	ee07 3a90 	vmov	s15, r3
 800280a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800280e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002812:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002816:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <reset_foc+0xe4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800281e:	ee17 2a90 	vmov	r2, s15
 8002822:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002824:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <reset_foc+0xe4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002832:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800283a:	4b1f      	ldr	r3, [pc, #124]	; (80028b8 <reset_foc+0xe4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002842:	ee17 2a90 	vmov	r2, s15
 8002846:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    controller->i_q_des = 0;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller->i_d = 0;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    controller->d_int = 0;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    controller->v_q = 0;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	655a      	str	r2, [r3, #84]	; 0x54
    controller->v_d = 0;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	651a      	str	r2, [r3, #80]	; 0x50
    controller->fw_int = 0;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    controller->otw_flag = 0;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

    }
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	200053e4 	.word	0x200053e4

080028bc <commutate>:


}

void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity/GR;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 80028dc:	4bd7      	ldr	r3, [pc, #860]	; (8002c3c <commutate+0x380>)
 80028de:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80028e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	edd3 6a03 	vldr	s13, [r3, #12]
 80028f2:	4bd2      	ldr	r3, [pc, #840]	; (8002c3c <commutate+0x380>)
 80028f4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80028f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	ed93 7a05 	vldr	s14, [r3, #20]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	edd3 6a06 	vldr	s13, [r3, #24]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	ed93 6a07 	vldr	s12, [r3, #28]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3340      	adds	r3, #64	; 0x40
 8002924:	4619      	mov	r1, r3
 8002926:	4610      	mov	r0, r2
 8002928:	eef0 1a46 	vmov.f32	s3, s12
 800292c:	eeb0 1a66 	vmov.f32	s2, s13
 8002930:	eef0 0a47 	vmov.f32	s1, s14
 8002934:	eeb0 0a67 	vmov.f32	s0, s15
 8002938:	f7ff fd12 	bl	8002360 <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002942:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8002c40 <commutate+0x384>
 8002946:	ee27 7a87 	vmul.f32	s14, s15, s14
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002950:	eddf 6abc 	vldr	s13, [pc, #752]	; 8002c44 <commutate+0x388>
 8002954:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002968:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002c40 <commutate+0x384>
 800296c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002976:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8002c44 <commutate+0x388>
 800297a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800297e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800298e:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8002c48 <commutate+0x38c>
 8002992:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	edd3 7a08 	vldr	s15, [r3, #32]
 800299c:	eddf 6aab 	vldr	s13, [pc, #684]	; 8002c4c <commutate+0x390>
 80029a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80029b4:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002c50 <commutate+0x394>
 80029b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029bc:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002c54 <commutate+0x398>
 80029c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029c4:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8002c58 <commutate+0x39c>
 80029c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 80029d2:	4b9a      	ldr	r3, [pc, #616]	; (8002c3c <commutate+0x380>)
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f103 01a4 	add.w	r1, r3, #164	; 0xa4
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 80029ee:	eeb0 0a67 	vmov.f32	s0, s15
 80029f2:	4610      	mov	r0, r2
 80029f4:	f001 fe22 	bl	800463c <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a08:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002a18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a1c:	edc7 7a06 	vstr	s15, [r7, #24]


       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8002a32:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002a40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a44:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002a5e:	eef0 0a47 	vmov.f32	s1, s14
 8002a62:	eeb0 0a67 	vmov.f32	s0, s15
 8002a66:	f001 fd65 	bl	8004534 <fast_fminf>
 8002a6a:	eeb0 7a40 	vmov.f32	s14, s0
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002a74:	eef1 7a67 	vneg.f32	s15, s15
 8002a78:	eef0 0a67 	vmov.f32	s1, s15
 8002a7c:	eeb0 0a47 	vmov.f32	s0, s14
 8002a80:	f001 fd3c 	bl	80044fc <fast_fmaxf>
 8002a84:	eef0 7a40 	vmov.f32	s15, s0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002aa0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002aa4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002aa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002ac2:	eef0 0a47 	vmov.f32	s1, s14
 8002ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8002aca:	f001 fd33 	bl	8004534 <fast_fminf>
 8002ace:	eeb0 7a40 	vmov.f32	s14, s0
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002ad8:	eef1 7a67 	vneg.f32	s15, s15
 8002adc:	eef0 0a67 	vmov.f32	s1, s15
 8002ae0:	eeb0 0a47 	vmov.f32	s0, s14
 8002ae4:	f001 fd0a 	bl	80044fc <fast_fmaxf>
 8002ae8:	eef0 7a40 	vmov.f32	s15, s0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002afe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002b0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b16:	eeb0 0a67 	vmov.f32	s0, s15
 8002b1a:	f00e ffd7 	bl	8011acc <sqrtf>
 8002b1e:	ed87 0a03 	vstr	s0, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002b28:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002b36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8002b5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002b7c:	eef0 0a47 	vmov.f32	s1, s14
 8002b80:	eeb0 0a67 	vmov.f32	s0, s15
 8002b84:	f001 fcd6 	bl	8004534 <fast_fminf>
 8002b88:	eeb0 7a40 	vmov.f32	s14, s0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002b92:	eef1 7a67 	vneg.f32	s15, s15
 8002b96:	eef0 0a67 	vmov.f32	s1, s15
 8002b9a:	eeb0 0a47 	vmov.f32	s0, s14
 8002b9e:	f001 fcad 	bl	80044fc <fast_fmaxf>
 8002ba2:	eef0 7a40 	vmov.f32	s15, s0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002bb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002bc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8002bd4:	f00e ff7a 	bl	8011acc <sqrtf>
 8002bd8:	eef0 7a40 	vmov.f32	s15, s0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002be8:	edd7 0a03 	vldr	s1, [r7, #12]
 8002bec:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf0:	f001 fca0 	bl	8004534 <fast_fminf>
 8002bf4:	eeb0 7a40 	vmov.f32	s14, s0
 8002bf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bfc:	eef1 7a67 	vneg.f32	s15, s15
 8002c00:	eef0 0a67 	vmov.f32	s1, s15
 8002c04:	eeb0 0a47 	vmov.f32	s0, s14
 8002c08:	f001 fc78 	bl	80044fc <fast_fmaxf>
 8002c0c:	eef0 7a40 	vmov.f32	s15, s0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002c28:	eeb0 0a67 	vmov.f32	s0, s15
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	f001 fd05 	bl	800463c <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	e011      	b.n	8002c60 <commutate+0x3a4>
 8002c3c:	20000678 	.word	0x20000678
 8002c40:	3f7d70a4 	.word	0x3f7d70a4
 8002c44:	3c23d70a 	.word	0x3c23d70a
 8002c48:	3f666666 	.word	0x3f666666
 8002c4c:	3dcccccd 	.word	0x3dcccccd
 8002c50:	3f933333 	.word	0x3f933333
 8002c54:	3f70a3d7 	.word	0x3f70a3d7
 8002c58:	3f13cd3a 	.word	0x3f13cd3a
 8002c5c:	389d4951 	.word	0x389d4951
 8002c60:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002c64:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8002c5c <commutate+0x3a0>
 8002c68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	336c      	adds	r3, #108	; 0x6c
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	eeb0 1a66 	vmov.f32	s2, s13
 8002c92:	eef0 0a47 	vmov.f32	s1, s14
 8002c96:	eeb0 0a67 	vmov.f32	s0, s15
 8002c9a:	f7ff fadd 	bl	8002258 <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	ed93 6a1b 	vldr	s12, [r3, #108]	; 0x6c
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3360      	adds	r3, #96	; 0x60
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	eef0 1a46 	vmov.f32	s3, s12
 8002ccc:	eeb0 1a66 	vmov.f32	s2, s13
 8002cd0:	eef0 0a47 	vmov.f32	s1, s14
 8002cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8002cd8:	f7ff fbd2 	bl	8002480 <svm>
       set_dtc(controller);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff f9a1 	bl	8002024 <set_dtc>

    }
 8002ce2:	bf00      	nop
 8002ce4:	3720      	adds	r7, #32
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop

08002cec <torque_control>:
void torque_control(ControllerStruct *controller){
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	edd3 6a32 	vldr	s13, [r3, #200]	; 0xc8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002d06:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8002d14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	ed93 6a33 	vldr	s12, [r3, #204]	; 0xcc
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002d2a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d36:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = torque_des/(KT*GR);
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	; (8002d70 <torque_control+0x84>)
 8002d3c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <torque_control+0x84>)
 8002d42:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002d46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d4a:	edd7 6a03 	vldr	s13, [r7, #12]
 8002d4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    controller->i_d_des = 0.0f;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

}
 8002d62:	bf00      	nop
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	20000678 	.word	0x20000678

08002d74 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->kp = 0;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	controller->kd = 0;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	controller->p_des = 0;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	controller->v_des = 0;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	controller->i_q_des = 0;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "gatedrive.h"

 void run_fsm(FSMStruct * fsmstate){
 8002dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */
	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	785a      	ldrb	r2, [r3, #1]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d00d      	beq.n	8002df4 <run_fsm+0x30>
//		 printf("trans %i %i \r\n",fsmstate->state, fsmstate->next_state);
		 fsm_exit_state(fsmstate);		// safely exit the old state
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f927 	bl	800302c <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	78db      	ldrb	r3, [r3, #3]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d006      	beq.n	8002df4 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	785a      	ldrb	r2, [r3, #1]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f8c2 	bl	8002f78 <fsm_enter_state>
		 }

	 }

	 switch(fsmstate->state){
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b06      	cmp	r3, #6
 8002dfa:	f200 80ab 	bhi.w	8002f54 <run_fsm+0x190>
 8002dfe:	a201      	add	r2, pc, #4	; (adr r2, 8002e04 <run_fsm+0x40>)
 8002e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e04:	08002f53 	.word	0x08002f53
 8002e08:	08002e21 	.word	0x08002e21
 8002e0c:	08002f0d 	.word	0x08002f0d
 8002e10:	08002f55 	.word	0x08002f55
 8002e14:	08002f53 	.word	0x08002f53
 8002e18:	08002f49 	.word	0x08002f49
 8002e1c:	08002f53 	.word	0x08002f53
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 8002e20:	4b4e      	ldr	r3, [pc, #312]	; (8002f5c <run_fsm+0x198>)
 8002e22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d108      	bne.n	8002e3c <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8002e2a:	4b4d      	ldr	r3, [pc, #308]	; (8002f60 <run_fsm+0x19c>)
 8002e2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e30:	4a4a      	ldr	r2, [pc, #296]	; (8002f5c <run_fsm+0x198>)
 8002e32:	494b      	ldr	r1, [pc, #300]	; (8002f60 <run_fsm+0x19c>)
 8002e34:	484b      	ldr	r0, [pc, #300]	; (8002f64 <run_fsm+0x1a0>)
 8002e36:	f7fe fad1 	bl	80013dc <order_phases>
//				HAL_Delay(10);
//				zero_current(&controller);
//				HAL_Delay(100);
			 }

			 break;
 8002e3a:	e08b      	b.n	8002f54 <run_fsm+0x190>
			 else if(!comm_encoder_cal.done_cal){
 8002e3c:	4b47      	ldr	r3, [pc, #284]	; (8002f5c <run_fsm+0x198>)
 8002e3e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d108      	bne.n	8002e58 <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8002e46:	4b46      	ldr	r3, [pc, #280]	; (8002f60 <run_fsm+0x19c>)
 8002e48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e4c:	4a43      	ldr	r2, [pc, #268]	; (8002f5c <run_fsm+0x198>)
 8002e4e:	4944      	ldr	r1, [pc, #272]	; (8002f60 <run_fsm+0x19c>)
 8002e50:	4844      	ldr	r0, [pc, #272]	; (8002f64 <run_fsm+0x1a0>)
 8002e52:	f7fe fbd9 	bl	8001608 <calibrate_encoder>
			 break;
 8002e56:	e07d      	b.n	8002f54 <run_fsm+0x190>
				 E_ZERO = comm_encoder_cal.ezero;
 8002e58:	4b40      	ldr	r3, [pc, #256]	; (8002f5c <run_fsm+0x198>)
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	4a42      	ldr	r2, [pc, #264]	; (8002f68 <run_fsm+0x1a4>)
 8002e5e:	6153      	str	r3, [r2, #20]
				 printf("E_ZERO: %d  PP: %.3f %f\r\n", E_ZERO, comm_encoder.ppairs, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8002e60:	4b41      	ldr	r3, [pc, #260]	; (8002f68 <run_fsm+0x1a4>)
 8002e62:	695e      	ldr	r6, [r3, #20]
 8002e64:	4b3f      	ldr	r3, [pc, #252]	; (8002f64 <run_fsm+0x1a0>)
 8002e66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fd fb95 	bl	8000598 <__aeabi_f2d>
 8002e6e:	4604      	mov	r4, r0
 8002e70:	460d      	mov	r5, r1
 8002e72:	4b3c      	ldr	r3, [pc, #240]	; (8002f64 <run_fsm+0x1a0>)
 8002e74:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002e78:	4b3b      	ldr	r3, [pc, #236]	; (8002f68 <run_fsm+0x1a4>)
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	425b      	negs	r3, r3
 8002e7e:	ee07 3a90 	vmov	s15, r3
 8002e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e8a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002f6c <run_fsm+0x1a8>
 8002e8e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e92:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002e96:	eeb0 0a47 	vmov.f32	s0, s14
 8002e9a:	f00e fdeb 	bl	8011a74 <fmodf>
 8002e9e:	eef0 7a40 	vmov.f32	s15, s0
 8002ea2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002f70 <run_fsm+0x1ac>
 8002ea6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eaa:	ee17 0a90 	vmov	r0, s15
 8002eae:	f7fd fb73 	bl	8000598 <__aeabi_f2d>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	e9cd 2300 	strd	r2, r3, [sp]
 8002eba:	4622      	mov	r2, r4
 8002ebc:	462b      	mov	r3, r5
 8002ebe:	4631      	mov	r1, r6
 8002ec0:	482c      	ldr	r0, [pc, #176]	; (8002f74 <run_fsm+0x1b0>)
 8002ec2:	f00b f881 	bl	800dfc8 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 8002ec6:	4a27      	ldr	r2, [pc, #156]	; (8002f64 <run_fsm+0x1a0>)
 8002ec8:	4b24      	ldr	r3, [pc, #144]	; (8002f5c <run_fsm+0x198>)
 8002eca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002ece:	332c      	adds	r3, #44	; 0x2c
 8002ed0:	f102 00dc 	add.w	r0, r2, #220	; 0xdc
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eda:	461a      	mov	r2, r3
 8002edc:	f00a fbf4 	bl	800d6c8 <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 8002ee0:	4a21      	ldr	r2, [pc, #132]	; (8002f68 <run_fsm+0x1a4>)
 8002ee2:	4b1e      	ldr	r3, [pc, #120]	; (8002f5c <run_fsm+0x198>)
 8002ee4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002ee8:	332c      	adds	r3, #44	; 0x2c
 8002eea:	f102 001c 	add.w	r0, r2, #28
 8002eee:	4619      	mov	r1, r3
 8002ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f00a fbe7 	bl	800d6c8 <memcpy>
				 store_eeprom_regs();
 8002efa:	f002 fb1f 	bl	800553c <store_eeprom_regs>
				 load_eeprom_regs();
 8002efe:	f002 fb2b 	bl	8005558 <load_eeprom_regs>
				 update_fsm(fsmstate, 27);
 8002f02:	211b      	movs	r1, #27
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f8d7 	bl	80030b8 <update_fsm>
			 break;
 8002f0a:	e023      	b.n	8002f54 <run_fsm+0x190>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 8002f0c:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <run_fsm+0x1a4>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	dd0a      	ble.n	8002f2a <run_fsm+0x166>
 8002f14:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <run_fsm+0x19c>)
 8002f16:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <run_fsm+0x1a4>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	dd03      	ble.n	8002f2a <run_fsm+0x166>
				 zero_commands(&controller);
 8002f22:	480f      	ldr	r0, [pc, #60]	; (8002f60 <run_fsm+0x19c>)
 8002f24:	f7ff ff26 	bl	8002d74 <zero_commands>
 8002f28:	e002      	b.n	8002f30 <run_fsm+0x16c>
			 }
			 /* Otherwise, commutate */
			 else{
				 torque_control(&controller);
 8002f2a:	480d      	ldr	r0, [pc, #52]	; (8002f60 <run_fsm+0x19c>)
 8002f2c:	f7ff fede 	bl	8002cec <torque_control>
//				 field_weaken(&controller);
			 }
			 commutate(&controller, &comm_encoder);
 8002f30:	490c      	ldr	r1, [pc, #48]	; (8002f64 <run_fsm+0x1a0>)
 8002f32:	480b      	ldr	r0, [pc, #44]	; (8002f60 <run_fsm+0x19c>)
 8002f34:	f7ff fcc2 	bl	80028bc <commutate>
			 controller.timeout ++;
 8002f38:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <run_fsm+0x19c>)
 8002f3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f3e:	3301      	adds	r3, #1
 8002f40:	4a07      	ldr	r2, [pc, #28]	; (8002f60 <run_fsm+0x19c>)
 8002f42:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
			 break;
 8002f46:	e005      	b.n	8002f54 <run_fsm+0x190>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 8002f48:	2164      	movs	r1, #100	; 0x64
 8002f4a:	4806      	ldr	r0, [pc, #24]	; (8002f64 <run_fsm+0x1a0>)
 8002f4c:	f001 fede 	bl	8004d0c <ps_print>
			 break;
 8002f50:	e000      	b.n	8002f54 <run_fsm+0x190>
			 break;
 8002f52:	bf00      	nop

		 case INIT_TEMP_MODE:
			 break;
	 }

 }
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f5c:	20000a78 	.word	0x20000a78
 8002f60:	20000778 	.word	0x20000778
 8002f64:	20000480 	.word	0x20000480
 8002f68:	20004d8c 	.word	0x20004d8c
 8002f6c:	45800000 	.word	0x45800000
 8002f70:	40c90fdb 	.word	0x40c90fdb
 8002f74:	08012010 	.word	0x08012010

08002f78 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b05      	cmp	r3, #5
 8002f86:	d841      	bhi.n	800300c <fsm_enter_state+0x94>
 8002f88:	a201      	add	r2, pc, #4	; (adr r2, 8002f90 <fsm_enter_state+0x18>)
 8002f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8e:	bf00      	nop
 8002f90:	08002fa9 	.word	0x08002fa9
 8002f94:	08002fcd 	.word	0x08002fcd
 8002f98:	08002fb5 	.word	0x08002fb5
 8002f9c:	0800300d 	.word	0x0800300d
 8002fa0:	08002faf 	.word	0x08002faf
 8002fa4:	0800300b 	.word	0x0800300b
				case MENU_MODE:
//				printf("Entering Main Menu\r\n");
				enter_menu_state();
 8002fa8:	f000 f950 	bl	800324c <enter_menu_state>
				break;
 8002fac:	e02e      	b.n	800300c <fsm_enter_state+0x94>
			case SETUP_MODE:
//				printf("Entering Setup\r\n");
				enter_setup_state();
 8002fae:	f000 f979 	bl	80032a4 <enter_setup_state>
				break;
 8002fb2:	e02b      	b.n	800300c <fsm_enter_state+0x94>
			case ENCODER_MODE:
//				printf("Entering Encoder Mode\r\n");
				break;
			case MOTOR_MODE:
//				printf("Entering Motor Mode\r\n");
				HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	2140      	movs	r1, #64	; 0x40
 8002fb8:	4816      	ldr	r0, [pc, #88]	; (8003014 <fsm_enter_state+0x9c>)
 8002fba:	f005 fbcd 	bl	8008758 <HAL_GPIO_WritePin>
				reset_foc(&controller);
 8002fbe:	4816      	ldr	r0, [pc, #88]	; (8003018 <fsm_enter_state+0xa0>)
 8002fc0:	f7ff fc08 	bl	80027d4 <reset_foc>
//				drv_enable_gd(drv);
				enable_gd(&controller);
 8002fc4:	4814      	ldr	r0, [pc, #80]	; (8003018 <fsm_enter_state+0xa0>)
 8002fc6:	f000 fda1 	bl	8003b0c <enable_gd>

				break;
 8002fca:	e01f      	b.n	800300c <fsm_enter_state+0x94>
			case CALIBRATION_MODE:
//				printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 8002fcc:	4b13      	ldr	r3, [pc, #76]	; (800301c <fsm_enter_state+0xa4>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <fsm_enter_state+0xa4>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	; (800301c <fsm_enter_state+0xa4>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 8002fe2:	4b0f      	ldr	r3, [pc, #60]	; (8003020 <fsm_enter_state+0xa8>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8002fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fee:	2100      	movs	r1, #0
 8002ff0:	480c      	ldr	r0, [pc, #48]	; (8003024 <fsm_enter_state+0xac>)
 8002ff2:	f00a fb77 	bl	800d6e4 <memset>
				PHASE_ORDER = 0;
 8002ff6:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <fsm_enter_state+0xb0>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
//			   disable_gd(&controller);
//			   HAL_Delay(10);
			   zero_current(&controller);
 8002ffc:	4806      	ldr	r0, [pc, #24]	; (8003018 <fsm_enter_state+0xa0>)
 8002ffe:	f7ff faf7 	bl	80025f0 <zero_current>
//			   HAL_Delay(100);

//				drv_enable_gd(drv);
				enable_gd(&controller);
 8003002:	4805      	ldr	r0, [pc, #20]	; (8003018 <fsm_enter_state+0xa0>)
 8003004:	f000 fd82 	bl	8003b0c <enable_gd>
				break;
 8003008:	e000      	b.n	800300c <fsm_enter_state+0x94>
				break;
 800300a:	bf00      	nop

		}
 }
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	48000800 	.word	0x48000800
 8003018:	20000778 	.word	0x20000778
 800301c:	20000a78 	.word	0x20000a78
 8003020:	20000480 	.word	0x20000480
 8003024:	2000055c 	.word	0x2000055c
 8003028:	20004d8c 	.word	0x20004d8c

0800302c <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b05      	cmp	r3, #5
 800303a:	d834      	bhi.n	80030a6 <fsm_exit_state+0x7a>
 800303c:	a201      	add	r2, pc, #4	; (adr r2, 8003044 <fsm_exit_state+0x18>)
 800303e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003042:	bf00      	nop
 8003044:	0800305d 	.word	0x0800305d
 8003048:	08003099 	.word	0x08003099
 800304c:	08003075 	.word	0x08003075
 8003050:	080030a7 	.word	0x080030a7
 8003054:	08003065 	.word	0x08003065
 8003058:	0800306d 	.word	0x0800306d
			case MENU_MODE:
//				printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	70da      	strb	r2, [r3, #3]
				break;
 8003062:	e020      	b.n	80030a6 <fsm_exit_state+0x7a>
			case SETUP_MODE:
//				printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	70da      	strb	r2, [r3, #3]
				break;
 800306a:	e01c      	b.n	80030a6 <fsm_exit_state+0x7a>
			case ENCODER_MODE:
//				printf("Leaving Encoder Mode\r\n");
				fsmstate->ready = 1;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	70da      	strb	r2, [r3, #3]
				break;
 8003072:	e018      	b.n	80030a6 <fsm_exit_state+0x7a>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
//				if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
					fsmstate->ready = 1;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	70da      	strb	r2, [r3, #3]
//					drv_disable_gd(drv);
					reset_foc(&controller);
 800307a:	480d      	ldr	r0, [pc, #52]	; (80030b0 <fsm_exit_state+0x84>)
 800307c:	f7ff fbaa 	bl	80027d4 <reset_foc>
					disable_gd(&controller);
 8003080:	480b      	ldr	r0, [pc, #44]	; (80030b0 <fsm_exit_state+0x84>)
 8003082:	f000 fd69 	bl	8003b58 <disable_gd>
					HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 8003086:	2200      	movs	r2, #0
 8003088:	2140      	movs	r1, #64	; 0x40
 800308a:	480a      	ldr	r0, [pc, #40]	; (80030b4 <fsm_exit_state+0x88>)
 800308c:	f005 fb64 	bl	8008758 <HAL_GPIO_WritePin>
//				}
				zero_commands(&controller);		// Set commands to zero
 8003090:	4807      	ldr	r0, [pc, #28]	; (80030b0 <fsm_exit_state+0x84>)
 8003092:	f7ff fe6f 	bl	8002d74 <zero_commands>
//				printf("Exiting Motor Mode\r\n");

				break;
 8003096:	e006      	b.n	80030a6 <fsm_exit_state+0x7a>
			case CALIBRATION_MODE:
//				printf("Exiting Calibration Mode\r\n");
//				drv_disable_gd(drv);
				disable_gd(&controller);
 8003098:	4805      	ldr	r0, [pc, #20]	; (80030b0 <fsm_exit_state+0x84>)
 800309a:	f000 fd5d 	bl	8003b58 <disable_gd>
				//free(error_array);
				//free(lut_array);
				fsmstate->ready = 1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	70da      	strb	r2, [r3, #3]
				break;
 80030a4:	bf00      	nop
		}

 }
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000778 	.word	0x20000778
 80030b4:	48000800 	.word	0x48000800

080030b8 <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
//	 printf("%i %i %i\r\n",fsmstate->state, fsm_input, fsmstate->next_state);
	if(fsm_input == MENU_CMD){	// escape to exit do rest mode
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	2b1b      	cmp	r3, #27
 80030c8:	d106      	bne.n	80030d8 <update_fsm+0x20>
		fsmstate->next_state = MENU_MODE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	70da      	strb	r2, [r3, #3]
		return;
 80030d6:	e0ad      	b.n	8003234 <update_fsm+0x17c>
	}
	switch(fsmstate->state){
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b05      	cmp	r3, #5
 80030de:	f200 80a9 	bhi.w	8003234 <update_fsm+0x17c>
 80030e2:	a201      	add	r2, pc, #4	; (adr r2, 80030e8 <update_fsm+0x30>)
 80030e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e8:	08003101 	.word	0x08003101
 80030ec:	08003235 	.word	0x08003235
 80030f0:	08003235 	.word	0x08003235
 80030f4:	08003235 	.word	0x08003235
 80030f8:	080031f9 	.word	0x080031f9
 80030fc:	08003235 	.word	0x08003235
		case MENU_MODE:
			switch (fsm_input){
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	3b63      	subs	r3, #99	; 0x63
 8003104:	2b17      	cmp	r3, #23
 8003106:	f200 8094 	bhi.w	8003232 <update_fsm+0x17a>
 800310a:	a201      	add	r2, pc, #4	; (adr r2, 8003110 <update_fsm+0x58>)
 800310c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003110:	08003171 	.word	0x08003171
 8003114:	08003233 	.word	0x08003233
 8003118:	0800318d 	.word	0x0800318d
 800311c:	08003233 	.word	0x08003233
 8003120:	08003233 	.word	0x08003233
 8003124:	08003233 	.word	0x08003233
 8003128:	08003233 	.word	0x08003233
 800312c:	08003233 	.word	0x08003233
 8003130:	08003233 	.word	0x08003233
 8003134:	08003233 	.word	0x08003233
 8003138:	0800317f 	.word	0x0800317f
 800313c:	08003233 	.word	0x08003233
 8003140:	08003233 	.word	0x08003233
 8003144:	08003233 	.word	0x08003233
 8003148:	08003233 	.word	0x08003233
 800314c:	08003233 	.word	0x08003233
 8003150:	0800319b 	.word	0x0800319b
 8003154:	08003233 	.word	0x08003233
 8003158:	08003233 	.word	0x08003233
 800315c:	08003233 	.word	0x08003233
 8003160:	08003233 	.word	0x08003233
 8003164:	08003233 	.word	0x08003233
 8003168:	08003233 	.word	0x08003233
 800316c:	080031a9 	.word	0x080031a9
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	70da      	strb	r2, [r3, #3]
					break;
 800317c:	e03b      	b.n	80031f6 <update_fsm+0x13e>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2202      	movs	r2, #2
 8003182:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	70da      	strb	r2, [r3, #3]
					break;
 800318a:	e034      	b.n	80031f6 <update_fsm+0x13e>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2205      	movs	r2, #5
 8003190:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	70da      	strb	r2, [r3, #3]
					break;
 8003198:	e02d      	b.n	80031f6 <update_fsm+0x13e>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2204      	movs	r2, #4
 800319e:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	70da      	strb	r2, [r3, #3]
					break;
 80031a6:	e026      	b.n	80031f6 <update_fsm+0x13e>
				case ZERO_CMD:
					comm_encoder.m_zero = 0;
 80031a8:	4b24      	ldr	r3, [pc, #144]	; (800323c <update_fsm+0x184>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
					comm_encoder.mech_zero = 0.0f;
 80031b0:	4b22      	ldr	r3, [pc, #136]	; (800323c <update_fsm+0x184>)
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
					ps_sample(&comm_encoder, DT);
 80031ba:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8003240 <update_fsm+0x188>
 80031be:	481f      	ldr	r0, [pc, #124]	; (800323c <update_fsm+0x184>)
 80031c0:	f001 fc30 	bl	8004a24 <ps_sample>
//					int zero_count = comm_encoder.count;
//					M_ZERO = zero_count;
					MECH_ZERO = comm_encoder.angle_multiturn[0];
 80031c4:	4b1d      	ldr	r3, [pc, #116]	; (800323c <update_fsm+0x184>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	4a1e      	ldr	r2, [pc, #120]	; (8003244 <update_fsm+0x18c>)
 80031ca:	65d3      	str	r3, [r2, #92]	; 0x5c
					comm_encoder.mech_zero = MECH_ZERO;
 80031cc:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <update_fsm+0x18c>)
 80031ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d0:	4a1a      	ldr	r2, [pc, #104]	; (800323c <update_fsm+0x184>)
 80031d2:	f8c2 31e0 	str.w	r3, [r2, #480]	; 0x1e0
					store_eeprom_regs();
 80031d6:	f002 f9b1 	bl	800553c <store_eeprom_regs>
					load_eeprom_regs();
 80031da:	f002 f9bd 	bl	8005558 <load_eeprom_regs>
					printf("\n\r  Saved new zero position:  %.3f\n\r\n\r", comm_encoder.mech_zero);
 80031de:	4b17      	ldr	r3, [pc, #92]	; (800323c <update_fsm+0x184>)
 80031e0:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fd f9d7 	bl	8000598 <__aeabi_f2d>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4816      	ldr	r0, [pc, #88]	; (8003248 <update_fsm+0x190>)
 80031f0:	f00a feea 	bl	800dfc8 <iprintf>
					break;
 80031f4:	bf00      	nop
				}
			break;
 80031f6:	e01c      	b.n	8003232 <update_fsm+0x17a>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	2b0d      	cmp	r3, #13
 80031fc:	d103      	bne.n	8003206 <update_fsm+0x14e>
				process_user_input(fsmstate);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f9c4 	bl	800358c <process_user_input>
				break;
 8003204:	e016      	b.n	8003234 <update_fsm+0x17c>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	7b1b      	ldrb	r3, [r3, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <update_fsm+0x15e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	78fa      	ldrb	r2, [r7, #3]
 8003212:	735a      	strb	r2, [r3, #13]
 8003214:	e006      	b.n	8003224 <update_fsm+0x16c>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	7b1b      	ldrb	r3, [r3, #12]
 800321a:	3b01      	subs	r3, #1
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4413      	add	r3, r2
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	711a      	strb	r2, [r3, #4]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	7b1b      	ldrb	r3, [r3, #12]
 8003228:	3301      	adds	r3, #1
 800322a:	b2da      	uxtb	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	731a      	strb	r2, [r3, #12]
			/* If enter is typed, process user input */

			break;
 8003230:	e000      	b.n	8003234 <update_fsm+0x17c>
			break;
 8003232:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000480 	.word	0x20000480
 8003240:	3851b717 	.word	0x3851b717
 8003244:	20000678 	.word	0x20000678
 8003248:	0801202c 	.word	0x0801202c

0800324c <enter_menu_state>:


 void enter_menu_state(void){
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 8003250:	480c      	ldr	r0, [pc, #48]	; (8003284 <enter_menu_state+0x38>)
 8003252:	f00a feb9 	bl	800dfc8 <iprintf>
	    printf(" Commands:\n\r");
 8003256:	480c      	ldr	r0, [pc, #48]	; (8003288 <enter_menu_state+0x3c>)
 8003258:	f00a feb6 	bl	800dfc8 <iprintf>
	    printf(" m - Motor Mode\n\r");
 800325c:	480b      	ldr	r0, [pc, #44]	; (800328c <enter_menu_state+0x40>)
 800325e:	f00a feb3 	bl	800dfc8 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8003262:	480b      	ldr	r0, [pc, #44]	; (8003290 <enter_menu_state+0x44>)
 8003264:	f00a feb0 	bl	800dfc8 <iprintf>
	    printf(" s - Setup\n\r");
 8003268:	480a      	ldr	r0, [pc, #40]	; (8003294 <enter_menu_state+0x48>)
 800326a:	f00a fead 	bl	800dfc8 <iprintf>
	    printf(" e - Display Encoder\n\r");
 800326e:	480a      	ldr	r0, [pc, #40]	; (8003298 <enter_menu_state+0x4c>)
 8003270:	f00a feaa 	bl	800dfc8 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8003274:	4809      	ldr	r0, [pc, #36]	; (800329c <enter_menu_state+0x50>)
 8003276:	f00a fea7 	bl	800dfc8 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 800327a:	4809      	ldr	r0, [pc, #36]	; (80032a0 <enter_menu_state+0x54>)
 800327c:	f00a fea4 	bl	800dfc8 <iprintf>

	    //gpio.led->write(0);
 }
 8003280:	bf00      	nop
 8003282:	bd80      	pop	{r7, pc}
 8003284:	08012054 	.word	0x08012054
 8003288:	0801205c 	.word	0x0801205c
 800328c:	0801206c 	.word	0x0801206c
 8003290:	08012080 	.word	0x08012080
 8003294:	0801209c 	.word	0x0801209c
 8003298:	080120ac 	.word	0x080120ac
 800329c:	080120c4 	.word	0x080120c4
 80032a0:	080120e0 	.word	0x080120e0

080032a4 <enter_setup_state>:

 void enter_setup_state(void){
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 80032aa:	487d      	ldr	r0, [pc, #500]	; (80034a0 <enter_setup_state+0x1fc>)
 80032ac:	f00a fe8c 	bl	800dfc8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 80032b0:	4b7c      	ldr	r3, [pc, #496]	; (80034a4 <enter_setup_state+0x200>)
 80032b2:	9301      	str	r3, [sp, #4]
 80032b4:	4b7c      	ldr	r3, [pc, #496]	; (80034a8 <enter_setup_state+0x204>)
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	4b7c      	ldr	r3, [pc, #496]	; (80034ac <enter_setup_state+0x208>)
 80032ba:	4a7d      	ldr	r2, [pc, #500]	; (80034b0 <enter_setup_state+0x20c>)
 80032bc:	497d      	ldr	r1, [pc, #500]	; (80034b4 <enter_setup_state+0x210>)
 80032be:	487e      	ldr	r0, [pc, #504]	; (80034b8 <enter_setup_state+0x214>)
 80032c0:	f00a fe82 	bl	800dfc8 <iprintf>
	    printf("\r\n Motor:\r\n");
 80032c4:	487d      	ldr	r0, [pc, #500]	; (80034bc <enter_setup_state+0x218>)
 80032c6:	f00a ff05 	bl	800e0d4 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 80032ca:	4b7d      	ldr	r3, [pc, #500]	; (80034c0 <enter_setup_state+0x21c>)
 80032cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd f962 	bl	8000598 <__aeabi_f2d>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80032dc:	4b79      	ldr	r3, [pc, #484]	; (80034c4 <enter_setup_state+0x220>)
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	4b79      	ldr	r3, [pc, #484]	; (80034c8 <enter_setup_state+0x224>)
 80032e2:	4a7a      	ldr	r2, [pc, #488]	; (80034cc <enter_setup_state+0x228>)
 80032e4:	497a      	ldr	r1, [pc, #488]	; (80034d0 <enter_setup_state+0x22c>)
 80032e6:	487b      	ldr	r0, [pc, #492]	; (80034d4 <enter_setup_state+0x230>)
 80032e8:	f00a fe6e 	bl	800dfc8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 80032ec:	4b74      	ldr	r3, [pc, #464]	; (80034c0 <enter_setup_state+0x21c>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fd f951 	bl	8000598 <__aeabi_f2d>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80032fe:	4b71      	ldr	r3, [pc, #452]	; (80034c4 <enter_setup_state+0x220>)
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	4b71      	ldr	r3, [pc, #452]	; (80034c8 <enter_setup_state+0x224>)
 8003304:	4a74      	ldr	r2, [pc, #464]	; (80034d8 <enter_setup_state+0x234>)
 8003306:	4975      	ldr	r1, [pc, #468]	; (80034dc <enter_setup_state+0x238>)
 8003308:	4875      	ldr	r0, [pc, #468]	; (80034e0 <enter_setup_state+0x23c>)
 800330a:	f00a fe5d 	bl	800dfc8 <iprintf>
	    printf("\r\n Control:\r\n");
 800330e:	4875      	ldr	r0, [pc, #468]	; (80034e4 <enter_setup_state+0x240>)
 8003310:	f00a fee0 	bl	800e0d4 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8003314:	4b6a      	ldr	r3, [pc, #424]	; (80034c0 <enter_setup_state+0x21c>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	4618      	mov	r0, r3
 800331a:	f7fd f93d 	bl	8000598 <__aeabi_f2d>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003326:	4b70      	ldr	r3, [pc, #448]	; (80034e8 <enter_setup_state+0x244>)
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	4b70      	ldr	r3, [pc, #448]	; (80034ec <enter_setup_state+0x248>)
 800332c:	4a70      	ldr	r2, [pc, #448]	; (80034f0 <enter_setup_state+0x24c>)
 800332e:	4971      	ldr	r1, [pc, #452]	; (80034f4 <enter_setup_state+0x250>)
 8003330:	4871      	ldr	r0, [pc, #452]	; (80034f8 <enter_setup_state+0x254>)
 8003332:	f00a fe49 	bl	800dfc8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "60.0", I_MAX);
 8003336:	4b62      	ldr	r3, [pc, #392]	; (80034c0 <enter_setup_state+0x21c>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd f92c 	bl	8000598 <__aeabi_f2d>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003348:	4b6c      	ldr	r3, [pc, #432]	; (80034fc <enter_setup_state+0x258>)
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	4b6c      	ldr	r3, [pc, #432]	; (8003500 <enter_setup_state+0x25c>)
 800334e:	4a6d      	ldr	r2, [pc, #436]	; (8003504 <enter_setup_state+0x260>)
 8003350:	496d      	ldr	r1, [pc, #436]	; (8003508 <enter_setup_state+0x264>)
 8003352:	4869      	ldr	r0, [pc, #420]	; (80034f8 <enter_setup_state+0x254>)
 8003354:	f00a fe38 	bl	800dfc8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 8003358:	4b59      	ldr	r3, [pc, #356]	; (80034c0 <enter_setup_state+0x21c>)
 800335a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd f91b 	bl	8000598 <__aeabi_f2d>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800336a:	4b56      	ldr	r3, [pc, #344]	; (80034c4 <enter_setup_state+0x220>)
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	4b55      	ldr	r3, [pc, #340]	; (80034c4 <enter_setup_state+0x220>)
 8003370:	4a66      	ldr	r2, [pc, #408]	; (800350c <enter_setup_state+0x268>)
 8003372:	4967      	ldr	r1, [pc, #412]	; (8003510 <enter_setup_state+0x26c>)
 8003374:	4860      	ldr	r0, [pc, #384]	; (80034f8 <enter_setup_state+0x254>)
 8003376:	f00a fe27 	bl	800dfc8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 800337a:	4b51      	ldr	r3, [pc, #324]	; (80034c0 <enter_setup_state+0x21c>)
 800337c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd f90a 	bl	8000598 <__aeabi_f2d>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800338c:	4b4d      	ldr	r3, [pc, #308]	; (80034c4 <enter_setup_state+0x220>)
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	4b4c      	ldr	r3, [pc, #304]	; (80034c4 <enter_setup_state+0x220>)
 8003392:	4a60      	ldr	r2, [pc, #384]	; (8003514 <enter_setup_state+0x270>)
 8003394:	4960      	ldr	r1, [pc, #384]	; (8003518 <enter_setup_state+0x274>)
 8003396:	4858      	ldr	r0, [pc, #352]	; (80034f8 <enter_setup_state+0x254>)
 8003398:	f00a fe16 	bl	800dfc8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 800339c:	4b48      	ldr	r3, [pc, #288]	; (80034c0 <enter_setup_state+0x21c>)
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fd f8f9 	bl	8000598 <__aeabi_f2d>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80033ae:	4b5b      	ldr	r3, [pc, #364]	; (800351c <enter_setup_state+0x278>)
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	4b53      	ldr	r3, [pc, #332]	; (8003500 <enter_setup_state+0x25c>)
 80033b4:	4a5a      	ldr	r2, [pc, #360]	; (8003520 <enter_setup_state+0x27c>)
 80033b6:	495b      	ldr	r1, [pc, #364]	; (8003524 <enter_setup_state+0x280>)
 80033b8:	484f      	ldr	r0, [pc, #316]	; (80034f8 <enter_setup_state+0x254>)
 80033ba:	f00a fe05 	bl	800dfc8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 80033be:	4b40      	ldr	r3, [pc, #256]	; (80034c0 <enter_setup_state+0x21c>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd f8e8 	bl	8000598 <__aeabi_f2d>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80033d0:	4b55      	ldr	r3, [pc, #340]	; (8003528 <enter_setup_state+0x284>)
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	4b4a      	ldr	r3, [pc, #296]	; (8003500 <enter_setup_state+0x25c>)
 80033d6:	4a55      	ldr	r2, [pc, #340]	; (800352c <enter_setup_state+0x288>)
 80033d8:	4955      	ldr	r1, [pc, #340]	; (8003530 <enter_setup_state+0x28c>)
 80033da:	4847      	ldr	r0, [pc, #284]	; (80034f8 <enter_setup_state+0x254>)
 80033dc:	f00a fdf4 	bl	800dfc8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 80033e0:	4b37      	ldr	r3, [pc, #220]	; (80034c0 <enter_setup_state+0x21c>)
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fd f8d7 	bl	8000598 <__aeabi_f2d>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80033f2:	4b50      	ldr	r3, [pc, #320]	; (8003534 <enter_setup_state+0x290>)
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	4b42      	ldr	r3, [pc, #264]	; (8003500 <enter_setup_state+0x25c>)
 80033f8:	4a4f      	ldr	r2, [pc, #316]	; (8003538 <enter_setup_state+0x294>)
 80033fa:	4950      	ldr	r1, [pc, #320]	; (800353c <enter_setup_state+0x298>)
 80033fc:	483e      	ldr	r0, [pc, #248]	; (80034f8 <enter_setup_state+0x254>)
 80033fe:	f00a fde3 	bl	800dfc8 <iprintf>
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
//	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 8003402:	4b2f      	ldr	r3, [pc, #188]	; (80034c0 <enter_setup_state+0x21c>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	4618      	mov	r0, r3
 8003408:	f7fd f8c6 	bl	8000598 <__aeabi_f2d>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003414:	4b4a      	ldr	r3, [pc, #296]	; (8003540 <enter_setup_state+0x29c>)
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	4b39      	ldr	r3, [pc, #228]	; (8003500 <enter_setup_state+0x25c>)
 800341a:	4a4a      	ldr	r2, [pc, #296]	; (8003544 <enter_setup_state+0x2a0>)
 800341c:	494a      	ldr	r1, [pc, #296]	; (8003548 <enter_setup_state+0x2a4>)
 800341e:	4836      	ldr	r0, [pc, #216]	; (80034f8 <enter_setup_state+0x254>)
 8003420:	f00a fdd2 	bl	800dfc8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "o", "Max Torque Setpoint (N-m)", "0.0", "-", T_MAX);
 8003424:	4b26      	ldr	r3, [pc, #152]	; (80034c0 <enter_setup_state+0x21c>)
 8003426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003428:	4618      	mov	r0, r3
 800342a:	f7fd f8b5 	bl	8000598 <__aeabi_f2d>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003436:	4b23      	ldr	r3, [pc, #140]	; (80034c4 <enter_setup_state+0x220>)
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	4b31      	ldr	r3, [pc, #196]	; (8003500 <enter_setup_state+0x25c>)
 800343c:	4a43      	ldr	r2, [pc, #268]	; (800354c <enter_setup_state+0x2a8>)
 800343e:	4944      	ldr	r1, [pc, #272]	; (8003550 <enter_setup_state+0x2ac>)
 8003440:	482d      	ldr	r0, [pc, #180]	; (80034f8 <enter_setup_state+0x254>)
 8003442:	f00a fdc1 	bl	800dfc8 <iprintf>
	    printf("\r\n CAN:\r\n");
 8003446:	4843      	ldr	r0, [pc, #268]	; (8003554 <enter_setup_state+0x2b0>)
 8003448:	f00a fe44 	bl	800e0d4 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 800344c:	4b42      	ldr	r3, [pc, #264]	; (8003558 <enter_setup_state+0x2b4>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	9301      	str	r3, [sp, #4]
 8003452:	4b42      	ldr	r3, [pc, #264]	; (800355c <enter_setup_state+0x2b8>)
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	4b1c      	ldr	r3, [pc, #112]	; (80034c8 <enter_setup_state+0x224>)
 8003458:	4a41      	ldr	r2, [pc, #260]	; (8003560 <enter_setup_state+0x2bc>)
 800345a:	4942      	ldr	r1, [pc, #264]	; (8003564 <enter_setup_state+0x2c0>)
 800345c:	4842      	ldr	r0, [pc, #264]	; (8003568 <enter_setup_state+0x2c4>)
 800345e:	f00a fdb3 	bl	800dfc8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN Master ID", "0", "127", CAN_MASTER);
 8003462:	4b3d      	ldr	r3, [pc, #244]	; (8003558 <enter_setup_state+0x2b4>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	9301      	str	r3, [sp, #4]
 8003468:	4b3c      	ldr	r3, [pc, #240]	; (800355c <enter_setup_state+0x2b8>)
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	4b16      	ldr	r3, [pc, #88]	; (80034c8 <enter_setup_state+0x224>)
 800346e:	4a3f      	ldr	r2, [pc, #252]	; (800356c <enter_setup_state+0x2c8>)
 8003470:	493f      	ldr	r1, [pc, #252]	; (8003570 <enter_setup_state+0x2cc>)
 8003472:	483d      	ldr	r0, [pc, #244]	; (8003568 <enter_setup_state+0x2c4>)
 8003474:	f00a fda8 	bl	800dfc8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 8003478:	4b37      	ldr	r3, [pc, #220]	; (8003558 <enter_setup_state+0x2b4>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	9301      	str	r3, [sp, #4]
 800347e:	4b3d      	ldr	r3, [pc, #244]	; (8003574 <enter_setup_state+0x2d0>)
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <enter_setup_state+0x224>)
 8003484:	4a3c      	ldr	r2, [pc, #240]	; (8003578 <enter_setup_state+0x2d4>)
 8003486:	493d      	ldr	r1, [pc, #244]	; (800357c <enter_setup_state+0x2d8>)
 8003488:	483d      	ldr	r0, [pc, #244]	; (8003580 <enter_setup_state+0x2dc>)
 800348a:	f00a fd9d 	bl	800dfc8 <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 800348e:	483d      	ldr	r0, [pc, #244]	; (8003584 <enter_setup_state+0x2e0>)
 8003490:	f00a fd9a 	bl	800dfc8 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8003494:	483c      	ldr	r0, [pc, #240]	; (8003588 <enter_setup_state+0x2e4>)
 8003496:	f00a fd97 	bl	800dfc8 <iprintf>
 }
 800349a:	bf00      	nop
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	080120f8 	.word	0x080120f8
 80034a4:	0801214c 	.word	0x0801214c
 80034a8:	0801215c 	.word	0x0801215c
 80034ac:	08012114 	.word	0x08012114
 80034b0:	08012118 	.word	0x08012118
 80034b4:	08012124 	.word	0x08012124
 80034b8:	0801212c 	.word	0x0801212c
 80034bc:	08012160 	.word	0x08012160
 80034c0:	20000678 	.word	0x20000678
 80034c4:	080121a0 	.word	0x080121a0
 80034c8:	0801216c 	.word	0x0801216c
 80034cc:	08012170 	.word	0x08012170
 80034d0:	0801217c 	.word	0x0801217c
 80034d4:	08012180 	.word	0x08012180
 80034d8:	080121a4 	.word	0x080121a4
 80034dc:	080121bc 	.word	0x080121bc
 80034e0:	080121c0 	.word	0x080121c0
 80034e4:	080121e0 	.word	0x080121e0
 80034e8:	08012230 	.word	0x08012230
 80034ec:	080121f0 	.word	0x080121f0
 80034f0:	080121f4 	.word	0x080121f4
 80034f4:	0801220c 	.word	0x0801220c
 80034f8:	08012210 	.word	0x08012210
 80034fc:	08012254 	.word	0x08012254
 8003500:	08012238 	.word	0x08012238
 8003504:	0801223c 	.word	0x0801223c
 8003508:	08012250 	.word	0x08012250
 800350c:	0801225c 	.word	0x0801225c
 8003510:	08012278 	.word	0x08012278
 8003514:	0801227c 	.word	0x0801227c
 8003518:	0801229c 	.word	0x0801229c
 800351c:	080122c0 	.word	0x080122c0
 8003520:	080122a0 	.word	0x080122a0
 8003524:	080122bc 	.word	0x080122bc
 8003528:	080122ec 	.word	0x080122ec
 800352c:	080122c8 	.word	0x080122c8
 8003530:	080122e8 	.word	0x080122e8
 8003534:	0801230c 	.word	0x0801230c
 8003538:	080122f0 	.word	0x080122f0
 800353c:	08012308 	.word	0x08012308
 8003540:	08012330 	.word	0x08012330
 8003544:	08012314 	.word	0x08012314
 8003548:	0801232c 	.word	0x0801232c
 800354c:	08012338 	.word	0x08012338
 8003550:	08012354 	.word	0x08012354
 8003554:	08012358 	.word	0x08012358
 8003558:	20004d8c 	.word	0x20004d8c
 800355c:	08012390 	.word	0x08012390
 8003560:	08012364 	.word	0x08012364
 8003564:	0801236c 	.word	0x0801236c
 8003568:	08012370 	.word	0x08012370
 800356c:	08012394 	.word	0x08012394
 8003570:	080123a4 	.word	0x080123a4
 8003574:	080123e8 	.word	0x080123e8
 8003578:	080123a8 	.word	0x080123a8
 800357c:	080123c8 	.word	0x080123c8
 8003580:	080123cc 	.word	0x080123cc
 8003584:	080123f0 	.word	0x080123f0
 8003588:	0801243c 	.word	0x0801243c

0800358c <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	7b5b      	ldrb	r3, [r3, #13]
 8003598:	3b61      	subs	r3, #97	; 0x61
 800359a:	2b17      	cmp	r3, #23
 800359c:	f200 828a 	bhi.w	8003ab4 <process_user_input+0x528>
 80035a0:	a201      	add	r2, pc, #4	; (adr r2, 80035a8 <process_user_input+0x1c>)
 80035a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a6:	bf00      	nop
 80035a8:	08003807 	.word	0x08003807
 80035ac:	08003609 	.word	0x08003609
 80035b0:	080037b3 	.word	0x080037b3
 80035b4:	08003985 	.word	0x08003985
 80035b8:	08003ab5 	.word	0x08003ab5
 80035bc:	080036ed 	.word	0x080036ed
 80035c0:	0800385b 	.word	0x0800385b
 80035c4:	0800375f 	.word	0x0800375f
 80035c8:	0800365d 	.word	0x0800365d
 80035cc:	08003ab5 	.word	0x08003ab5
 80035d0:	0800389f 	.word	0x0800389f
 80035d4:	08003699 	.word	0x08003699
 80035d8:	0800367b 	.word	0x0800367b
 80035dc:	08003ab5 	.word	0x08003ab5
 80035e0:	08003a71 	.word	0x08003a71
 80035e4:	080039c9 	.word	0x080039c9
 80035e8:	08003ab5 	.word	0x08003ab5
 80035ec:	08003ab5 	.word	0x08003ab5
 80035f0:	08003ab5 	.word	0x08003ab5
 80035f4:	08003741 	.word	0x08003741
 80035f8:	08003ab5 	.word	0x08003ab5
 80035fc:	08003a1d 	.word	0x08003a1d
 8003600:	08003ab5 	.word	0x08003ab5
 8003604:	080038e3 	.word	0x080038e3
		 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3304      	adds	r3, #4
 800360c:	4618      	mov	r0, r3
 800360e:	f00a f829 	bl	800d664 <atof>
 8003612:	ec53 2b10 	vmov	r2, r3, d0
 8003616:	4610      	mov	r0, r2
 8003618:	4619      	mov	r1, r3
 800361a:	f7fd fb0d 	bl	8000c38 <__aeabi_d2f>
 800361e:	4603      	mov	r3, r0
 8003620:	eddf 0ac1 	vldr	s1, [pc, #772]	; 8003928 <process_user_input+0x39c>
 8003624:	ee00 3a10 	vmov	s0, r3
 8003628:	f00e f99d 	bl	8011966 <fminf>
 800362c:	eef0 7a40 	vmov.f32	s15, s0
 8003630:	eddf 0abe 	vldr	s1, [pc, #760]	; 800392c <process_user_input+0x3a0>
 8003634:	eeb0 0a67 	vmov.f32	s0, s15
 8003638:	f00e f97a 	bl	8011930 <fmaxf>
 800363c:	eef0 7a40 	vmov.f32	s15, s0
 8003640:	4bbb      	ldr	r3, [pc, #748]	; (8003930 <process_user_input+0x3a4>)
 8003642:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 8003646:	4bba      	ldr	r3, [pc, #744]	; (8003930 <process_user_input+0x3a4>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fc ffa4 	bl	8000598 <__aeabi_f2d>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	48b7      	ldr	r0, [pc, #732]	; (8003934 <process_user_input+0x3a8>)
 8003656:	f00a fcb7 	bl	800dfc8 <iprintf>
			 break;
 800365a:	e232      	b.n	8003ac2 <process_user_input+0x536>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3304      	adds	r3, #4
 8003660:	4618      	mov	r0, r3
 8003662:	f00a f802 	bl	800d66a <atoi>
 8003666:	4603      	mov	r3, r0
 8003668:	4ab3      	ldr	r2, [pc, #716]	; (8003938 <process_user_input+0x3ac>)
 800366a:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 800366c:	4bb2      	ldr	r3, [pc, #712]	; (8003938 <process_user_input+0x3ac>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4619      	mov	r1, r3
 8003672:	48b2      	ldr	r0, [pc, #712]	; (800393c <process_user_input+0x3b0>)
 8003674:	f00a fca8 	bl	800dfc8 <iprintf>
			 break;
 8003678:	e223      	b.n	8003ac2 <process_user_input+0x536>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3304      	adds	r3, #4
 800367e:	4618      	mov	r0, r3
 8003680:	f009 fff3 	bl	800d66a <atoi>
 8003684:	4603      	mov	r3, r0
 8003686:	4aac      	ldr	r2, [pc, #688]	; (8003938 <process_user_input+0x3ac>)
 8003688:	6093      	str	r3, [r2, #8]
			 printf("CAN_MASTER set to %d\r\n", CAN_MASTER);
 800368a:	4bab      	ldr	r3, [pc, #684]	; (8003938 <process_user_input+0x3ac>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	4619      	mov	r1, r3
 8003690:	48ab      	ldr	r0, [pc, #684]	; (8003940 <process_user_input+0x3b4>)
 8003692:	f00a fc99 	bl	800dfc8 <iprintf>
			 break;
 8003696:	e214      	b.n	8003ac2 <process_user_input+0x536>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 60.0f), 0.0f);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3304      	adds	r3, #4
 800369c:	4618      	mov	r0, r3
 800369e:	f009 ffe1 	bl	800d664 <atof>
 80036a2:	ec53 2b10 	vmov	r2, r3, d0
 80036a6:	4610      	mov	r0, r2
 80036a8:	4619      	mov	r1, r3
 80036aa:	f7fd fac5 	bl	8000c38 <__aeabi_d2f>
 80036ae:	4603      	mov	r3, r0
 80036b0:	eddf 0aa4 	vldr	s1, [pc, #656]	; 8003944 <process_user_input+0x3b8>
 80036b4:	ee00 3a10 	vmov	s0, r3
 80036b8:	f00e f955 	bl	8011966 <fminf>
 80036bc:	eef0 7a40 	vmov.f32	s15, s0
 80036c0:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8003980 <process_user_input+0x3f4>
 80036c4:	eeb0 0a67 	vmov.f32	s0, s15
 80036c8:	f00e f932 	bl	8011930 <fmaxf>
 80036cc:	eef0 7a40 	vmov.f32	s15, s0
 80036d0:	4b97      	ldr	r3, [pc, #604]	; (8003930 <process_user_input+0x3a4>)
 80036d2:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 80036d6:	4b96      	ldr	r3, [pc, #600]	; (8003930 <process_user_input+0x3a4>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fc ff5c 	bl	8000598 <__aeabi_f2d>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4898      	ldr	r0, [pc, #608]	; (8003948 <process_user_input+0x3bc>)
 80036e6:	f00a fc6f 	bl	800dfc8 <iprintf>
			 break;
 80036ea:	e1ea      	b.n	8003ac2 <process_user_input+0x536>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3304      	adds	r3, #4
 80036f0:	4618      	mov	r0, r3
 80036f2:	f009 ffb7 	bl	800d664 <atof>
 80036f6:	ec53 2b10 	vmov	r2, r3, d0
 80036fa:	4610      	mov	r0, r2
 80036fc:	4619      	mov	r1, r3
 80036fe:	f7fd fa9b 	bl	8000c38 <__aeabi_d2f>
 8003702:	4603      	mov	r3, r0
 8003704:	eddf 0a91 	vldr	s1, [pc, #580]	; 800394c <process_user_input+0x3c0>
 8003708:	ee00 3a10 	vmov	s0, r3
 800370c:	f00e f92b 	bl	8011966 <fminf>
 8003710:	eef0 7a40 	vmov.f32	s15, s0
 8003714:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8003980 <process_user_input+0x3f4>
 8003718:	eeb0 0a67 	vmov.f32	s0, s15
 800371c:	f00e f908 	bl	8011930 <fmaxf>
 8003720:	eef0 7a40 	vmov.f32	s15, s0
 8003724:	4b82      	ldr	r3, [pc, #520]	; (8003930 <process_user_input+0x3a4>)
 8003726:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 800372a:	4b81      	ldr	r3, [pc, #516]	; (8003930 <process_user_input+0x3a4>)
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fc ff32 	bl	8000598 <__aeabi_f2d>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4885      	ldr	r0, [pc, #532]	; (8003950 <process_user_input+0x3c4>)
 800373a:	f00a fc45 	bl	800dfc8 <iprintf>
			 break;
 800373e:	e1c0      	b.n	8003ac2 <process_user_input+0x536>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3304      	adds	r3, #4
 8003744:	4618      	mov	r0, r3
 8003746:	f009 ff90 	bl	800d66a <atoi>
 800374a:	4603      	mov	r3, r0
 800374c:	4a7a      	ldr	r2, [pc, #488]	; (8003938 <process_user_input+0x3ac>)
 800374e:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 8003750:	4b79      	ldr	r3, [pc, #484]	; (8003938 <process_user_input+0x3ac>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4619      	mov	r1, r3
 8003756:	487f      	ldr	r0, [pc, #508]	; (8003954 <process_user_input+0x3c8>)
 8003758:	f00a fc36 	bl	800dfc8 <iprintf>
			 break;
 800375c:	e1b1      	b.n	8003ac2 <process_user_input+0x536>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3304      	adds	r3, #4
 8003762:	4618      	mov	r0, r3
 8003764:	f009 ff7e 	bl	800d664 <atof>
 8003768:	ec53 2b10 	vmov	r2, r3, d0
 800376c:	4610      	mov	r0, r2
 800376e:	4619      	mov	r1, r3
 8003770:	f7fd fa62 	bl	8000c38 <__aeabi_d2f>
 8003774:	4603      	mov	r3, r0
 8003776:	eddf 0a78 	vldr	s1, [pc, #480]	; 8003958 <process_user_input+0x3cc>
 800377a:	ee00 3a10 	vmov	s0, r3
 800377e:	f00e f8f2 	bl	8011966 <fminf>
 8003782:	eef0 7a40 	vmov.f32	s15, s0
 8003786:	eddf 0a7e 	vldr	s1, [pc, #504]	; 8003980 <process_user_input+0x3f4>
 800378a:	eeb0 0a67 	vmov.f32	s0, s15
 800378e:	f00e f8cf 	bl	8011930 <fmaxf>
 8003792:	eef0 7a40 	vmov.f32	s15, s0
 8003796:	4b66      	ldr	r3, [pc, #408]	; (8003930 <process_user_input+0x3a4>)
 8003798:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 800379c:	4b64      	ldr	r3, [pc, #400]	; (8003930 <process_user_input+0x3a4>)
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fc fef9 	bl	8000598 <__aeabi_f2d>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	486c      	ldr	r0, [pc, #432]	; (800395c <process_user_input+0x3d0>)
 80037ac:	f00a fc0c 	bl	800dfc8 <iprintf>
			 break;
 80037b0:	e187      	b.n	8003ac2 <process_user_input+0x536>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3304      	adds	r3, #4
 80037b6:	4618      	mov	r0, r3
 80037b8:	f009 ff54 	bl	800d664 <atof>
 80037bc:	ec53 2b10 	vmov	r2, r3, d0
 80037c0:	4610      	mov	r0, r2
 80037c2:	4619      	mov	r1, r3
 80037c4:	f7fd fa38 	bl	8000c38 <__aeabi_d2f>
 80037c8:	4603      	mov	r3, r0
 80037ca:	eddf 0a65 	vldr	s1, [pc, #404]	; 8003960 <process_user_input+0x3d4>
 80037ce:	ee00 3a10 	vmov	s0, r3
 80037d2:	f00e f8c8 	bl	8011966 <fminf>
 80037d6:	eef0 7a40 	vmov.f32	s15, s0
 80037da:	eddf 0a69 	vldr	s1, [pc, #420]	; 8003980 <process_user_input+0x3f4>
 80037de:	eeb0 0a67 	vmov.f32	s0, s15
 80037e2:	f00e f8a5 	bl	8011930 <fmaxf>
 80037e6:	eef0 7a40 	vmov.f32	s15, s0
 80037ea:	4b51      	ldr	r3, [pc, #324]	; (8003930 <process_user_input+0x3a4>)
 80037ec:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 80037f0:	4b4f      	ldr	r3, [pc, #316]	; (8003930 <process_user_input+0x3a4>)
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fc fecf 	bl	8000598 <__aeabi_f2d>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4859      	ldr	r0, [pc, #356]	; (8003964 <process_user_input+0x3d8>)
 8003800:	f00a fbe2 	bl	800dfc8 <iprintf>
			 break;
 8003804:	e15d      	b.n	8003ac2 <process_user_input+0x536>
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3304      	adds	r3, #4
 800380a:	4618      	mov	r0, r3
 800380c:	f009 ff2a 	bl	800d664 <atof>
 8003810:	ec53 2b10 	vmov	r2, r3, d0
 8003814:	4610      	mov	r0, r2
 8003816:	4619      	mov	r1, r3
 8003818:	f7fd fa0e 	bl	8000c38 <__aeabi_d2f>
 800381c:	4603      	mov	r3, r0
 800381e:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8003822:	ee00 3a10 	vmov	s0, r3
 8003826:	f00e f89e 	bl	8011966 <fminf>
 800382a:	eef0 7a40 	vmov.f32	s15, s0
 800382e:	eddf 0a54 	vldr	s1, [pc, #336]	; 8003980 <process_user_input+0x3f4>
 8003832:	eeb0 0a67 	vmov.f32	s0, s15
 8003836:	f00e f87b 	bl	8011930 <fmaxf>
 800383a:	eef0 7a40 	vmov.f32	s15, s0
 800383e:	4b3c      	ldr	r3, [pc, #240]	; (8003930 <process_user_input+0x3a4>)
 8003840:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			 printf("I_CAL set to %f\r\n", I_CAL);
 8003844:	4b3a      	ldr	r3, [pc, #232]	; (8003930 <process_user_input+0x3a4>)
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	4618      	mov	r0, r3
 800384a:	f7fc fea5 	bl	8000598 <__aeabi_f2d>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4845      	ldr	r0, [pc, #276]	; (8003968 <process_user_input+0x3dc>)
 8003854:	f00a fbb8 	bl	800dfc8 <iprintf>
			 break;
 8003858:	e133      	b.n	8003ac2 <process_user_input+0x536>
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3304      	adds	r3, #4
 800385e:	4618      	mov	r0, r3
 8003860:	f009 ff00 	bl	800d664 <atof>
 8003864:	ec53 2b10 	vmov	r2, r3, d0
 8003868:	4610      	mov	r0, r2
 800386a:	4619      	mov	r1, r3
 800386c:	f7fd f9e4 	bl	8000c38 <__aeabi_d2f>
 8003870:	4603      	mov	r3, r0
 8003872:	eddf 0a3e 	vldr	s1, [pc, #248]	; 800396c <process_user_input+0x3e0>
 8003876:	ee00 3a10 	vmov	s0, r3
 800387a:	f00e f859 	bl	8011930 <fmaxf>
 800387e:	eef0 7a40 	vmov.f32	s15, s0
 8003882:	4b2b      	ldr	r3, [pc, #172]	; (8003930 <process_user_input+0x3a4>)
 8003884:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			 printf("GR set to %f\r\n", GR);
 8003888:	4b29      	ldr	r3, [pc, #164]	; (8003930 <process_user_input+0x3a4>)
 800388a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388c:	4618      	mov	r0, r3
 800388e:	f7fc fe83 	bl	8000598 <__aeabi_f2d>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4836      	ldr	r0, [pc, #216]	; (8003970 <process_user_input+0x3e4>)
 8003898:	f00a fb96 	bl	800dfc8 <iprintf>
			 break;
 800389c:	e111      	b.n	8003ac2 <process_user_input+0x536>
		 case 'k':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3304      	adds	r3, #4
 80038a2:	4618      	mov	r0, r3
 80038a4:	f009 fede 	bl	800d664 <atof>
 80038a8:	ec53 2b10 	vmov	r2, r3, d0
 80038ac:	4610      	mov	r0, r2
 80038ae:	4619      	mov	r1, r3
 80038b0:	f7fd f9c2 	bl	8000c38 <__aeabi_d2f>
 80038b4:	4603      	mov	r3, r0
 80038b6:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8003974 <process_user_input+0x3e8>
 80038ba:	ee00 3a10 	vmov	s0, r3
 80038be:	f00e f837 	bl	8011930 <fmaxf>
 80038c2:	eef0 7a40 	vmov.f32	s15, s0
 80038c6:	4b1a      	ldr	r3, [pc, #104]	; (8003930 <process_user_input+0x3a4>)
 80038c8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			 printf("KT set to %f\r\n", KT);
 80038cc:	4b18      	ldr	r3, [pc, #96]	; (8003930 <process_user_input+0x3a4>)
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fc fe61 	bl	8000598 <__aeabi_f2d>
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	4827      	ldr	r0, [pc, #156]	; (8003978 <process_user_input+0x3ec>)
 80038dc:	f00a fb74 	bl	800dfc8 <iprintf>
			 break;
 80038e0:	e0ef      	b.n	8003ac2 <process_user_input+0x536>
		 case 'x':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4618      	mov	r0, r3
 80038e8:	f009 febc 	bl	800d664 <atof>
 80038ec:	ec53 2b10 	vmov	r2, r3, d0
 80038f0:	4610      	mov	r0, r2
 80038f2:	4619      	mov	r1, r3
 80038f4:	f7fd f9a0 	bl	8000c38 <__aeabi_d2f>
 80038f8:	4603      	mov	r3, r0
 80038fa:	eddf 0a21 	vldr	s1, [pc, #132]	; 8003980 <process_user_input+0x3f4>
 80038fe:	ee00 3a10 	vmov	s0, r3
 8003902:	f00e f815 	bl	8011930 <fmaxf>
 8003906:	eef0 7a40 	vmov.f32	s15, s0
 800390a:	4b09      	ldr	r3, [pc, #36]	; (8003930 <process_user_input+0x3a4>)
 800390c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 8003910:	4b07      	ldr	r3, [pc, #28]	; (8003930 <process_user_input+0x3a4>)
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	4618      	mov	r0, r3
 8003916:	f7fc fe3f 	bl	8000598 <__aeabi_f2d>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4817      	ldr	r0, [pc, #92]	; (800397c <process_user_input+0x3f0>)
 8003920:	f00a fb52 	bl	800dfc8 <iprintf>
			 break;
 8003924:	e0cd      	b.n	8003ac2 <process_user_input+0x536>
 8003926:	bf00      	nop
 8003928:	44fa0000 	.word	0x44fa0000
 800392c:	42c80000 	.word	0x42c80000
 8003930:	20000678 	.word	0x20000678
 8003934:	08012468 	.word	0x08012468
 8003938:	20004d8c 	.word	0x20004d8c
 800393c:	0801247c 	.word	0x0801247c
 8003940:	08012490 	.word	0x08012490
 8003944:	42700000 	.word	0x42700000
 8003948:	080124a8 	.word	0x080124a8
 800394c:	42040000 	.word	0x42040000
 8003950:	080124bc 	.word	0x080124bc
 8003954:	080124d4 	.word	0x080124d4
 8003958:	43160000 	.word	0x43160000
 800395c:	080124ec 	.word	0x080124ec
 8003960:	42200000 	.word	0x42200000
 8003964:	08012504 	.word	0x08012504
 8003968:	0801251c 	.word	0x0801251c
 800396c:	3a83126f 	.word	0x3a83126f
 8003970:	08012530 	.word	0x08012530
 8003974:	38d1b717 	.word	0x38d1b717
 8003978:	08012540 	.word	0x08012540
 800397c:	08012550 	.word	0x08012550
 8003980:	00000000 	.word	0x00000000
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3304      	adds	r3, #4
 8003988:	4618      	mov	r0, r3
 800398a:	f009 fe6b 	bl	800d664 <atof>
 800398e:	ec53 2b10 	vmov	r2, r3, d0
 8003992:	4610      	mov	r0, r2
 8003994:	4619      	mov	r1, r3
 8003996:	f7fd f94f 	bl	8000c38 <__aeabi_d2f>
 800399a:	4603      	mov	r3, r0
 800399c:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 8003980 <process_user_input+0x3f4>
 80039a0:	ee00 3a10 	vmov	s0, r3
 80039a4:	f00d ffc4 	bl	8011930 <fmaxf>
 80039a8:	eef0 7a40 	vmov.f32	s15, s0
 80039ac:	4b50      	ldr	r3, [pc, #320]	; (8003af0 <process_user_input+0x564>)
 80039ae:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 80039b2:	4b4f      	ldr	r3, [pc, #316]	; (8003af0 <process_user_input+0x564>)
 80039b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fc fdee 	bl	8000598 <__aeabi_f2d>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	484c      	ldr	r0, [pc, #304]	; (8003af4 <process_user_input+0x568>)
 80039c2:	f00a fb01 	bl	800dfc8 <iprintf>
			 break;
 80039c6:	e07c      	b.n	8003ac2 <process_user_input+0x536>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3304      	adds	r3, #4
 80039cc:	4618      	mov	r0, r3
 80039ce:	f009 fe49 	bl	800d664 <atof>
 80039d2:	ec53 2b10 	vmov	r2, r3, d0
 80039d6:	4610      	mov	r0, r2
 80039d8:	4619      	mov	r1, r3
 80039da:	f7fd f92d 	bl	8000c38 <__aeabi_d2f>
 80039de:	4603      	mov	r3, r0
 80039e0:	eddf 0a45 	vldr	s1, [pc, #276]	; 8003af8 <process_user_input+0x56c>
 80039e4:	ee00 3a10 	vmov	s0, r3
 80039e8:	f00d ffa2 	bl	8011930 <fmaxf>
 80039ec:	eef0 7a40 	vmov.f32	s15, s0
 80039f0:	4b3f      	ldr	r3, [pc, #252]	; (8003af0 <process_user_input+0x564>)
 80039f2:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 P_MIN = -P_MAX;
 80039f6:	4b3e      	ldr	r3, [pc, #248]	; (8003af0 <process_user_input+0x564>)
 80039f8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80039fc:	eef1 7a67 	vneg.f32	s15, s15
 8003a00:	4b3b      	ldr	r3, [pc, #236]	; (8003af0 <process_user_input+0x564>)
 8003a02:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("P_MAX set to %f\r\n", P_MAX);
 8003a06:	4b3a      	ldr	r3, [pc, #232]	; (8003af0 <process_user_input+0x564>)
 8003a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fc fdc4 	bl	8000598 <__aeabi_f2d>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4839      	ldr	r0, [pc, #228]	; (8003afc <process_user_input+0x570>)
 8003a16:	f00a fad7 	bl	800dfc8 <iprintf>
			 break;
 8003a1a:	e052      	b.n	8003ac2 <process_user_input+0x536>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	4618      	mov	r0, r3
 8003a22:	f009 fe1f 	bl	800d664 <atof>
 8003a26:	ec53 2b10 	vmov	r2, r3, d0
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f7fd f903 	bl	8000c38 <__aeabi_d2f>
 8003a32:	4603      	mov	r3, r0
 8003a34:	eddf 0a30 	vldr	s1, [pc, #192]	; 8003af8 <process_user_input+0x56c>
 8003a38:	ee00 3a10 	vmov	s0, r3
 8003a3c:	f00d ff78 	bl	8011930 <fmaxf>
 8003a40:	eef0 7a40 	vmov.f32	s15, s0
 8003a44:	4b2a      	ldr	r3, [pc, #168]	; (8003af0 <process_user_input+0x564>)
 8003a46:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 V_MIN = -V_MAX;
 8003a4a:	4b29      	ldr	r3, [pc, #164]	; (8003af0 <process_user_input+0x564>)
 8003a4c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003a50:	eef1 7a67 	vneg.f32	s15, s15
 8003a54:	4b26      	ldr	r3, [pc, #152]	; (8003af0 <process_user_input+0x564>)
 8003a56:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			 printf("V_MAX set to %f\r\n", V_MAX);
 8003a5a:	4b25      	ldr	r3, [pc, #148]	; (8003af0 <process_user_input+0x564>)
 8003a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fc fd9a 	bl	8000598 <__aeabi_f2d>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4825      	ldr	r0, [pc, #148]	; (8003b00 <process_user_input+0x574>)
 8003a6a:	f00a faad 	bl	800dfc8 <iprintf>
			 break;
 8003a6e:	e028      	b.n	8003ac2 <process_user_input+0x536>
		 case 'o':
			 T_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3304      	adds	r3, #4
 8003a74:	4618      	mov	r0, r3
 8003a76:	f009 fdf5 	bl	800d664 <atof>
 8003a7a:	ec53 2b10 	vmov	r2, r3, d0
 8003a7e:	4610      	mov	r0, r2
 8003a80:	4619      	mov	r1, r3
 8003a82:	f7fd f8d9 	bl	8000c38 <__aeabi_d2f>
 8003a86:	4603      	mov	r3, r0
 8003a88:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8003af8 <process_user_input+0x56c>
 8003a8c:	ee00 3a10 	vmov	s0, r3
 8003a90:	f00d ff4e 	bl	8011930 <fmaxf>
 8003a94:	eef0 7a40 	vmov.f32	s15, s0
 8003a98:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <process_user_input+0x564>)
 8003a9a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("T_MAX set to %f\r\n", T_MAX);
 8003a9e:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <process_user_input+0x564>)
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fc fd78 	bl	8000598 <__aeabi_f2d>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4815      	ldr	r0, [pc, #84]	; (8003b04 <process_user_input+0x578>)
 8003aae:	f00a fa8b 	bl	800dfc8 <iprintf>
			 break;
 8003ab2:	e006      	b.n	8003ac2 <process_user_input+0x536>
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4813      	ldr	r0, [pc, #76]	; (8003b08 <process_user_input+0x57c>)
 8003abc:	f00a fa84 	bl	800dfc8 <iprintf>
			 break;
 8003ac0:	bf00      	nop

		 }

	 /* Write new settings to flash */
	 store_eeprom_regs();
 8003ac2:	f001 fd3b 	bl	800553c <store_eeprom_regs>
	 load_eeprom_regs();
 8003ac6:	f001 fd47 	bl	8005558 <load_eeprom_regs>

	 enter_setup_state();
 8003aca:	f7ff fbeb 	bl	80032a4 <enter_setup_state>

	 fsmstate->bytecount = 0;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	731a      	strb	r2, [r3, #12]
	 fsmstate->cmd_id = 0;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	735a      	strb	r2, [r3, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3304      	adds	r3, #4
 8003ade:	2208      	movs	r2, #8
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f009 fdfe 	bl	800d6e4 <memset>
 }
 8003ae8:	bf00      	nop
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	20000678 	.word	0x20000678
 8003af4:	08012564 	.word	0x08012564
 8003af8:	00000000 	.word	0x00000000
 8003afc:	08012578 	.word	0x08012578
 8003b00:	0801258c 	.word	0x0801258c
 8003b04:	080125a0 	.word	0x080125a0
 8003b08:	080125b4 	.word	0x080125b4

08003b0c <enable_gd>:
 */
#include "gatedrive.h"
#include <stdio.h>


void enable_gd(ControllerStruct *controller){
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
	//Restart PWM
	controller->isEnabled = 1;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
    HAL_TIM_PWM_Start(&TIM_PWM, TIM_CHANNEL_1);
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	480d      	ldr	r0, [pc, #52]	; (8003b54 <enable_gd+0x48>)
 8003b20:	f006 fda2 	bl	800a668 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&TIM_PWM, TIM_CHANNEL_2);
 8003b24:	2104      	movs	r1, #4
 8003b26:	480b      	ldr	r0, [pc, #44]	; (8003b54 <enable_gd+0x48>)
 8003b28:	f006 fd9e 	bl	800a668 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&TIM_PWM, TIM_CHANNEL_3);
 8003b2c:	2108      	movs	r1, #8
 8003b2e:	4809      	ldr	r0, [pc, #36]	; (8003b54 <enable_gd+0x48>)
 8003b30:	f006 fd9a 	bl	800a668 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&TIM_PWM, TIM_CHANNEL_1);
 8003b34:	2100      	movs	r1, #0
 8003b36:	4807      	ldr	r0, [pc, #28]	; (8003b54 <enable_gd+0x48>)
 8003b38:	f007 fe96 	bl	800b868 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&TIM_PWM, TIM_CHANNEL_2);
 8003b3c:	2104      	movs	r1, #4
 8003b3e:	4805      	ldr	r0, [pc, #20]	; (8003b54 <enable_gd+0x48>)
 8003b40:	f007 fe92 	bl	800b868 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&TIM_PWM, TIM_CHANNEL_3);
 8003b44:	2108      	movs	r1, #8
 8003b46:	4803      	ldr	r0, [pc, #12]	; (8003b54 <enable_gd+0x48>)
 8003b48:	f007 fe8e 	bl	800b868 <HAL_TIMEx_PWMN_Start>
//    printf("enabled\r\n");
}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	200053e4 	.word	0x200053e4

08003b58 <disable_gd>:
void disable_gd(ControllerStruct *controller){
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
	//Drive all gates low
	controller->isEnabled = 0;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.0f);
 8003b68:	4b30      	ldr	r3, [pc, #192]	; (8003c2c <disable_gd+0xd4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6e:	ee07 3a90 	vmov	s15, r3
 8003b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b76:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003c30 <disable_gd+0xd8>
 8003b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b7e:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <disable_gd+0xd4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b86:	ee17 2a90 	vmov	r2, s15
 8003b8a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.0f);
 8003b8c:	4b27      	ldr	r3, [pc, #156]	; (8003c2c <disable_gd+0xd4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b92:	ee07 3a90 	vmov	s15, r3
 8003b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b9a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003c30 <disable_gd+0xd8>
 8003b9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ba2:	4b22      	ldr	r3, [pc, #136]	; (8003c2c <disable_gd+0xd4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003baa:	ee17 2a90 	vmov	r2, s15
 8003bae:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.0f);
 8003bb0:	4b1e      	ldr	r3, [pc, #120]	; (8003c2c <disable_gd+0xd4>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bbe:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003c30 <disable_gd+0xd8>
 8003bc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bc6:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <disable_gd+0xd4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bce:	ee17 2a90 	vmov	r2, s15
 8003bd2:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(DRV_HA, GPIO_PIN_RESET );
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bde:	f004 fdbb 	bl	8008758 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_HB, GPIO_PIN_RESET );
 8003be2:	2200      	movs	r2, #0
 8003be4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003be8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bec:	f004 fdb4 	bl	8008758 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_HC, GPIO_PIN_RESET );
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bfa:	f004 fdad 	bl	8008758 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_LA, GPIO_PIN_RESET );
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c04:	480b      	ldr	r0, [pc, #44]	; (8003c34 <disable_gd+0xdc>)
 8003c06:	f004 fda7 	bl	8008758 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_LB, GPIO_PIN_RESET );
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c14:	f004 fda0 	bl	8008758 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_LC, GPIO_PIN_RESET );
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c1e:	4806      	ldr	r0, [pc, #24]	; (8003c38 <disable_gd+0xe0>)
 8003c20:	f004 fd9a 	bl	8008758 <HAL_GPIO_WritePin>

}
 8003c24:	bf00      	nop
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	200053e4 	.word	0x200053e4
 8003c30:	00000000 	.word	0x00000000
 8003c34:	48000800 	.word	0x48000800
 8003c38:	48000400 	.word	0x48000400

08003c3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	; 0x28
 8003c40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c42:	f107 0314 	add.w	r3, r7, #20
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	605a      	str	r2, [r3, #4]
 8003c4c:	609a      	str	r2, [r3, #8]
 8003c4e:	60da      	str	r2, [r3, #12]
 8003c50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c52:	4b30      	ldr	r3, [pc, #192]	; (8003d14 <MX_GPIO_Init+0xd8>)
 8003c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c56:	4a2f      	ldr	r2, [pc, #188]	; (8003d14 <MX_GPIO_Init+0xd8>)
 8003c58:	f043 0304 	orr.w	r3, r3, #4
 8003c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c5e:	4b2d      	ldr	r3, [pc, #180]	; (8003d14 <MX_GPIO_Init+0xd8>)
 8003c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	613b      	str	r3, [r7, #16]
 8003c68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c6a:	4b2a      	ldr	r3, [pc, #168]	; (8003d14 <MX_GPIO_Init+0xd8>)
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6e:	4a29      	ldr	r2, [pc, #164]	; (8003d14 <MX_GPIO_Init+0xd8>)
 8003c70:	f043 0320 	orr.w	r3, r3, #32
 8003c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c76:	4b27      	ldr	r3, [pc, #156]	; (8003d14 <MX_GPIO_Init+0xd8>)
 8003c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c82:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <MX_GPIO_Init+0xd8>)
 8003c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c86:	4a23      	ldr	r2, [pc, #140]	; (8003d14 <MX_GPIO_Init+0xd8>)
 8003c88:	f043 0301 	orr.w	r3, r3, #1
 8003c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c8e:	4b21      	ldr	r3, [pc, #132]	; (8003d14 <MX_GPIO_Init+0xd8>)
 8003c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c9a:	4b1e      	ldr	r3, [pc, #120]	; (8003d14 <MX_GPIO_Init+0xd8>)
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9e:	4a1d      	ldr	r2, [pc, #116]	; (8003d14 <MX_GPIO_Init+0xd8>)
 8003ca0:	f043 0302 	orr.w	r3, r3, #2
 8003ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ca6:	4b1b      	ldr	r3, [pc, #108]	; (8003d14 <MX_GPIO_Init+0xd8>)
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	607b      	str	r3, [r7, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_11, GPIO_PIN_RESET);
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f644 0140 	movw	r1, #18496	; 0x4840
 8003cb8:	4817      	ldr	r0, [pc, #92]	; (8003d18 <MX_GPIO_Init+0xdc>)
 8003cba:	f004 fd4d 	bl	8008758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cc8:	f004 fd46 	bl	8008758 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC6 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_11;
 8003ccc:	f644 0340 	movw	r3, #18496	; 0x4840
 8003cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cde:	f107 0314 	add.w	r3, r7, #20
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	480c      	ldr	r0, [pc, #48]	; (8003d18 <MX_GPIO_Init+0xdc>)
 8003ce6:	f004 fbb5 	bl	8008454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cfc:	f107 0314 	add.w	r3, r7, #20
 8003d00:	4619      	mov	r1, r3
 8003d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d06:	f004 fba5 	bl	8008454 <HAL_GPIO_Init>

}
 8003d0a:	bf00      	nop
 8003d0c:	3728      	adds	r7, #40	; 0x28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40021000 	.word	0x40021000
 8003d18:	48000800 	.word	0x48000800

08003d1c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003d20:	4b1e      	ldr	r3, [pc, #120]	; (8003d9c <MX_I2C1_Init+0x80>)
 8003d22:	4a1f      	ldr	r2, [pc, #124]	; (8003da0 <MX_I2C1_Init+0x84>)
 8003d24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00802F62;
 8003d26:	4b1d      	ldr	r3, [pc, #116]	; (8003d9c <MX_I2C1_Init+0x80>)
 8003d28:	4a1e      	ldr	r2, [pc, #120]	; (8003da4 <MX_I2C1_Init+0x88>)
 8003d2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003d2c:	4b1b      	ldr	r3, [pc, #108]	; (8003d9c <MX_I2C1_Init+0x80>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d32:	4b1a      	ldr	r3, [pc, #104]	; (8003d9c <MX_I2C1_Init+0x80>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d38:	4b18      	ldr	r3, [pc, #96]	; (8003d9c <MX_I2C1_Init+0x80>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003d3e:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <MX_I2C1_Init+0x80>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003d44:	4b15      	ldr	r3, [pc, #84]	; (8003d9c <MX_I2C1_Init+0x80>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d4a:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <MX_I2C1_Init+0x80>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d50:	4b12      	ldr	r3, [pc, #72]	; (8003d9c <MX_I2C1_Init+0x80>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d56:	4811      	ldr	r0, [pc, #68]	; (8003d9c <MX_I2C1_Init+0x80>)
 8003d58:	f004 fd16 	bl	8008788 <HAL_I2C_Init>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003d62:	f000 fbc6 	bl	80044f2 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003d66:	2100      	movs	r1, #0
 8003d68:	480c      	ldr	r0, [pc, #48]	; (8003d9c <MX_I2C1_Init+0x80>)
 8003d6a:	f005 f9e7 	bl	800913c <HAL_I2CEx_ConfigAnalogFilter>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003d74:	f000 fbbd 	bl	80044f2 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4808      	ldr	r0, [pc, #32]	; (8003d9c <MX_I2C1_Init+0x80>)
 8003d7c:	f005 fa29 	bl	80091d2 <HAL_I2CEx_ConfigDigitalFilter>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003d86:	f000 fbb4 	bl	80044f2 <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 8003d8a:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <MX_I2C1_Init+0x8c>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	4a06      	ldr	r2, [pc, #24]	; (8003da8 <MX_I2C1_Init+0x8c>)
 8003d90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d94:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000430 	.word	0x20000430
 8003da0:	40005400 	.word	0x40005400
 8003da4:	00802f62 	.word	0x00802f62
 8003da8:	40010000 	.word	0x40010000

08003dac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08a      	sub	sp, #40	; 0x28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db4:	f107 0314 	add.w	r3, r7, #20
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	60da      	str	r2, [r3, #12]
 8003dc2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a17      	ldr	r2, [pc, #92]	; (8003e28 <HAL_I2C_MspInit+0x7c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d128      	bne.n	8003e20 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dce:	4b17      	ldr	r3, [pc, #92]	; (8003e2c <HAL_I2C_MspInit+0x80>)
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd2:	4a16      	ldr	r2, [pc, #88]	; (8003e2c <HAL_I2C_MspInit+0x80>)
 8003dd4:	f043 0302 	orr.w	r3, r3, #2
 8003dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dda:	4b14      	ldr	r3, [pc, #80]	; (8003e2c <HAL_I2C_MspInit+0x80>)
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003de6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dec:	2312      	movs	r3, #18
 8003dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003df0:	2301      	movs	r3, #1
 8003df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df4:	2300      	movs	r3, #0
 8003df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003df8:	2304      	movs	r3, #4
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dfc:	f107 0314 	add.w	r3, r7, #20
 8003e00:	4619      	mov	r1, r3
 8003e02:	480b      	ldr	r0, [pc, #44]	; (8003e30 <HAL_I2C_MspInit+0x84>)
 8003e04:	f004 fb26 	bl	8008454 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e08:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <HAL_I2C_MspInit+0x80>)
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0c:	4a07      	ldr	r2, [pc, #28]	; (8003e2c <HAL_I2C_MspInit+0x80>)
 8003e0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e12:	6593      	str	r3, [r2, #88]	; 0x58
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <HAL_I2C_MspInit+0x80>)
 8003e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003e20:	bf00      	nop
 8003e22:	3728      	adds	r7, #40	; 0x28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40005400 	.word	0x40005400
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	48000400 	.word	0x48000400

08003e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	6039      	str	r1, [r7, #0]
 8003e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	db0a      	blt.n	8003e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	490c      	ldr	r1, [pc, #48]	; (8003e80 <__NVIC_SetPriority+0x4c>)
 8003e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e52:	0112      	lsls	r2, r2, #4
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	440b      	add	r3, r1
 8003e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e5c:	e00a      	b.n	8003e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	4908      	ldr	r1, [pc, #32]	; (8003e84 <__NVIC_SetPriority+0x50>)
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	3b04      	subs	r3, #4
 8003e6c:	0112      	lsls	r2, r2, #4
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	440b      	add	r3, r1
 8003e72:	761a      	strb	r2, [r3, #24]
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	e000e100 	.word	0xe000e100
 8003e84:	e000ed00 	.word	0xe000ed00

08003e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e8c:	f001 fb9b 	bl	80055c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e90:	f000 fac4 	bl	800441c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(100);
 8003e94:	2064      	movs	r0, #100	; 0x64
 8003e96:	f001 fc07 	bl	80056a8 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e9a:	f7ff fecf 	bl	8003c3c <MX_GPIO_Init>
  MX_DMA_Init();
 8003e9e:	f7fd fe73 	bl	8001b88 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003ea2:	f001 fa8f 	bl	80053c4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8003ea6:	f001 f923 	bl	80050f0 <MX_TIM1_Init>
  MX_I2C1_Init();
 8003eaa:	f7ff ff37 	bl	8003d1c <MX_I2C1_Init>
  MX_OPAMP1_Init();
 8003eae:	f000 fc61 	bl	8004774 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8003eb2:	f000 fc8d 	bl	80047d0 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8003eb6:	f000 fcb9 	bl	800482c <MX_OPAMP3_Init>
  MX_ADC1_Init();
 8003eba:	f7fd f8bf 	bl	800103c <MX_ADC1_Init>
  MX_ADC2_Init();
 8003ebe:	f7fd f945 	bl	800114c <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8003ec2:	f7fd fff7 	bl	8001eb4 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  load_eeprom_regs();
 8003ec6:	f001 fb47 	bl	8005558 <load_eeprom_regs>
  /* Sanitize configs in case flash is empty*/
  if(E_ZERO==-1){E_ZERO = 0;}
 8003eca:	4bb9      	ldr	r3, [pc, #740]	; (80041b0 <main+0x328>)
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed2:	d102      	bne.n	8003eda <main+0x52>
 8003ed4:	4bb6      	ldr	r3, [pc, #728]	; (80041b0 <main+0x328>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	615a      	str	r2, [r3, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 8003eda:	4bb5      	ldr	r3, [pc, #724]	; (80041b0 <main+0x328>)
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee2:	d102      	bne.n	8003eea <main+0x62>
 8003ee4:	4bb2      	ldr	r3, [pc, #712]	; (80041b0 <main+0x328>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	611a      	str	r2, [r3, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8003eea:	4bb2      	ldr	r3, [pc, #712]	; (80041b4 <main+0x32c>)
 8003eec:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ef0:	eef4 7a67 	vcmp.f32	s15, s15
 8003ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef8:	d609      	bvs.n	8003f0e <main+0x86>
 8003efa:	4bae      	ldr	r3, [pc, #696]	; (80041b4 <main+0x32c>)
 8003efc:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f00:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003f04:	eef4 7a47 	vcmp.f32	s15, s14
 8003f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0c:	d102      	bne.n	8003f14 <main+0x8c>
 8003f0e:	4ba9      	ldr	r3, [pc, #676]	; (80041b4 <main+0x32c>)
 8003f10:	4aa9      	ldr	r2, [pc, #676]	; (80041b8 <main+0x330>)
 8003f12:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8003f14:	4ba7      	ldr	r3, [pc, #668]	; (80041b4 <main+0x32c>)
 8003f16:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f1a:	eef4 7a67 	vcmp.f32	s15, s15
 8003f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f22:	d609      	bvs.n	8003f38 <main+0xb0>
 8003f24:	4ba3      	ldr	r3, [pc, #652]	; (80041b4 <main+0x32c>)
 8003f26:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f2a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003f2e:	eef4 7a47 	vcmp.f32	s15, s14
 8003f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f36:	d102      	bne.n	8003f3e <main+0xb6>
 8003f38:	4b9e      	ldr	r3, [pc, #632]	; (80041b4 <main+0x32c>)
 8003f3a:	4aa0      	ldr	r2, [pc, #640]	; (80041bc <main+0x334>)
 8003f3c:	60da      	str	r2, [r3, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8003f3e:	4b9d      	ldr	r3, [pc, #628]	; (80041b4 <main+0x32c>)
 8003f40:	edd3 7a06 	vldr	s15, [r3, #24]
 8003f44:	eef4 7a67 	vcmp.f32	s15, s15
 8003f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f4c:	d609      	bvs.n	8003f62 <main+0xda>
 8003f4e:	4b99      	ldr	r3, [pc, #612]	; (80041b4 <main+0x32c>)
 8003f50:	edd3 7a06 	vldr	s15, [r3, #24]
 8003f54:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003f58:	eef4 7a47 	vcmp.f32	s15, s14
 8003f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f60:	d103      	bne.n	8003f6a <main+0xe2>
 8003f62:	4b94      	ldr	r3, [pc, #592]	; (80041b4 <main+0x32c>)
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	619a      	str	r2, [r3, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 8003f6a:	4b91      	ldr	r3, [pc, #580]	; (80041b0 <main+0x328>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f72:	d102      	bne.n	8003f7a <main+0xf2>
 8003f74:	4b8e      	ldr	r3, [pc, #568]	; (80041b0 <main+0x328>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 8003f7a:	4b8d      	ldr	r3, [pc, #564]	; (80041b0 <main+0x328>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f82:	d102      	bne.n	8003f8a <main+0x102>
 8003f84:	4b8a      	ldr	r3, [pc, #552]	; (80041b0 <main+0x328>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 0;}
 8003f8a:	4b89      	ldr	r3, [pc, #548]	; (80041b0 <main+0x328>)
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d102      	bne.n	8003f9a <main+0x112>
 8003f94:	4b86      	ldr	r3, [pc, #536]	; (80041b0 <main+0x328>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8003f9a:	4b86      	ldr	r3, [pc, #536]	; (80041b4 <main+0x32c>)
 8003f9c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003fa0:	eef4 7a67 	vcmp.f32	s15, s15
 8003fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa8:	d609      	bvs.n	8003fbe <main+0x136>
 8003faa:	4b82      	ldr	r3, [pc, #520]	; (80041b4 <main+0x32c>)
 8003fac:	edd3 7a07 	vldr	s15, [r3, #28]
 8003fb0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003fb4:	eef4 7a47 	vcmp.f32	s15, s14
 8003fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fbc:	d103      	bne.n	8003fc6 <main+0x13e>
 8003fbe:	4b7d      	ldr	r3, [pc, #500]	; (80041b4 <main+0x32c>)
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 8003fc6:	4b7b      	ldr	r3, [pc, #492]	; (80041b4 <main+0x32c>)
 8003fc8:	edd3 7a08 	vldr	s15, [r3, #32]
 8003fcc:	eef4 7a67 	vcmp.f32	s15, s15
 8003fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd4:	d609      	bvs.n	8003fea <main+0x162>
 8003fd6:	4b77      	ldr	r3, [pc, #476]	; (80041b4 <main+0x32c>)
 8003fd8:	edd3 7a08 	vldr	s15, [r3, #32]
 8003fdc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003fe0:	eef4 7a47 	vcmp.f32	s15, s14
 8003fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe8:	d102      	bne.n	8003ff0 <main+0x168>
 8003fea:	4b72      	ldr	r3, [pc, #456]	; (80041b4 <main+0x32c>)
 8003fec:	4a74      	ldr	r2, [pc, #464]	; (80041c0 <main+0x338>)
 8003fee:	621a      	str	r2, [r3, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8003ff0:	4b70      	ldr	r3, [pc, #448]	; (80041b4 <main+0x32c>)
 8003ff2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003ff6:	eef4 7a67 	vcmp.f32	s15, s15
 8003ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffe:	d609      	bvs.n	8004014 <main+0x18c>
 8004000:	4b6c      	ldr	r3, [pc, #432]	; (80041b4 <main+0x32c>)
 8004002:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004006:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800400a:	eef4 7a47 	vcmp.f32	s15, s14
 800400e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004012:	d102      	bne.n	800401a <main+0x192>
 8004014:	4b67      	ldr	r3, [pc, #412]	; (80041b4 <main+0x32c>)
 8004016:	4a6b      	ldr	r2, [pc, #428]	; (80041c4 <main+0x33c>)
 8004018:	625a      	str	r2, [r3, #36]	; 0x24
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 800401a:	4b66      	ldr	r3, [pc, #408]	; (80041b4 <main+0x32c>)
 800401c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004020:	eef4 7a67 	vcmp.f32	s15, s15
 8004024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004028:	d609      	bvs.n	800403e <main+0x1b6>
 800402a:	4b62      	ldr	r3, [pc, #392]	; (80041b4 <main+0x32c>)
 800402c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004030:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004034:	eef4 7a47 	vcmp.f32	s15, s14
 8004038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800403c:	d102      	bne.n	8004044 <main+0x1bc>
 800403e:	4b5d      	ldr	r3, [pc, #372]	; (80041b4 <main+0x32c>)
 8004040:	4a61      	ldr	r2, [pc, #388]	; (80041c8 <main+0x340>)
 8004042:	641a      	str	r2, [r3, #64]	; 0x40
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 8004044:	4b5b      	ldr	r3, [pc, #364]	; (80041b4 <main+0x32c>)
 8004046:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800404a:	eef4 7a67 	vcmp.f32	s15, s15
 800404e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004052:	d609      	bvs.n	8004068 <main+0x1e0>
 8004054:	4b57      	ldr	r3, [pc, #348]	; (80041b4 <main+0x32c>)
 8004056:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800405a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800405e:	eef4 7a47 	vcmp.f32	s15, s14
 8004062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004066:	d102      	bne.n	800406e <main+0x1e6>
 8004068:	4b52      	ldr	r3, [pc, #328]	; (80041b4 <main+0x32c>)
 800406a:	4a58      	ldr	r2, [pc, #352]	; (80041cc <main+0x344>)
 800406c:	629a      	str	r2, [r3, #40]	; 0x28
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 800406e:	4b51      	ldr	r3, [pc, #324]	; (80041b4 <main+0x32c>)
 8004070:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004074:	eef4 7a67 	vcmp.f32	s15, s15
 8004078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800407c:	d609      	bvs.n	8004092 <main+0x20a>
 800407e:	4b4d      	ldr	r3, [pc, #308]	; (80041b4 <main+0x32c>)
 8004080:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004084:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004088:	eef4 7a47 	vcmp.f32	s15, s14
 800408c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004090:	d103      	bne.n	800409a <main+0x212>
 8004092:	4b48      	ldr	r3, [pc, #288]	; (80041b4 <main+0x32c>)
 8004094:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004098:	63da      	str	r2, [r3, #60]	; 0x3c
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 800409a:	4b46      	ldr	r3, [pc, #280]	; (80041b4 <main+0x32c>)
 800409c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80040a0:	eef4 7a67 	vcmp.f32	s15, s15
 80040a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a8:	d609      	bvs.n	80040be <main+0x236>
 80040aa:	4b42      	ldr	r3, [pc, #264]	; (80041b4 <main+0x32c>)
 80040ac:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80040b0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80040b4:	eef4 7a47 	vcmp.f32	s15, s14
 80040b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040bc:	d103      	bne.n	80040c6 <main+0x23e>
 80040be:	4b3d      	ldr	r3, [pc, #244]	; (80041b4 <main+0x32c>)
 80040c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80040c4:	631a      	str	r2, [r3, #48]	; 0x30
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 80040c6:	4b3b      	ldr	r3, [pc, #236]	; (80041b4 <main+0x32c>)
 80040c8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80040cc:	eef4 7a67 	vcmp.f32	s15, s15
 80040d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d4:	d609      	bvs.n	80040ea <main+0x262>
 80040d6:	4b37      	ldr	r3, [pc, #220]	; (80041b4 <main+0x32c>)
 80040d8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80040dc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80040e0:	eef4 7a47 	vcmp.f32	s15, s14
 80040e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e8:	d102      	bne.n	80040f0 <main+0x268>
 80040ea:	4b32      	ldr	r3, [pc, #200]	; (80041b4 <main+0x32c>)
 80040ec:	4a38      	ldr	r2, [pc, #224]	; (80041d0 <main+0x348>)
 80040ee:	655a      	str	r2, [r3, #84]	; 0x54
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 80040f0:	4b30      	ldr	r3, [pc, #192]	; (80041b4 <main+0x32c>)
 80040f2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80040f6:	eef4 7a67 	vcmp.f32	s15, s15
 80040fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040fe:	d609      	bvs.n	8004114 <main+0x28c>
 8004100:	4b2c      	ldr	r3, [pc, #176]	; (80041b4 <main+0x32c>)
 8004102:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004106:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800410a:	eef4 7a47 	vcmp.f32	s15, s14
 800410e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004112:	d102      	bne.n	800411a <main+0x292>
 8004114:	4b27      	ldr	r3, [pc, #156]	; (80041b4 <main+0x32c>)
 8004116:	4a2c      	ldr	r2, [pc, #176]	; (80041c8 <main+0x340>)
 8004118:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(P_MAX)){P_MAX = 12.5f;}
 800411a:	4b26      	ldr	r3, [pc, #152]	; (80041b4 <main+0x32c>)
 800411c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004120:	eef4 7a67 	vcmp.f32	s15, s15
 8004124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004128:	d702      	bvc.n	8004130 <main+0x2a8>
 800412a:	4b22      	ldr	r3, [pc, #136]	; (80041b4 <main+0x32c>)
 800412c:	4a29      	ldr	r2, [pc, #164]	; (80041d4 <main+0x34c>)
 800412e:	649a      	str	r2, [r3, #72]	; 0x48
  if(isnan(P_MIN)){P_MIN = -12.5f;}
 8004130:	4b20      	ldr	r3, [pc, #128]	; (80041b4 <main+0x32c>)
 8004132:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004136:	eef4 7a67 	vcmp.f32	s15, s15
 800413a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800413e:	d702      	bvc.n	8004146 <main+0x2be>
 8004140:	4b1c      	ldr	r3, [pc, #112]	; (80041b4 <main+0x32c>)
 8004142:	4a25      	ldr	r2, [pc, #148]	; (80041d8 <main+0x350>)
 8004144:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(V_MAX)){V_MAX = 200.0f;}
 8004146:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <main+0x32c>)
 8004148:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800414c:	eef4 7a67 	vcmp.f32	s15, s15
 8004150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004154:	d702      	bvc.n	800415c <main+0x2d4>
 8004156:	4b17      	ldr	r3, [pc, #92]	; (80041b4 <main+0x32c>)
 8004158:	4a20      	ldr	r2, [pc, #128]	; (80041dc <main+0x354>)
 800415a:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(V_MIN)){V_MIN = -200.0f;}
 800415c:	4b15      	ldr	r3, [pc, #84]	; (80041b4 <main+0x32c>)
 800415e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004162:	eef4 7a67 	vcmp.f32	s15, s15
 8004166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800416a:	d702      	bvc.n	8004172 <main+0x2ea>
 800416c:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <main+0x32c>)
 800416e:	4a1c      	ldr	r2, [pc, #112]	; (80041e0 <main+0x358>)
 8004170:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(MECH_ZERO)){MECH_ZERO = 0.0f;}
 8004172:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <main+0x32c>)
 8004174:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004178:	eef4 7a67 	vcmp.f32	s15, s15
 800417c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004180:	d703      	bvc.n	800418a <main+0x302>
 8004182:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <main+0x32c>)
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	65da      	str	r2, [r3, #92]	; 0x5c
  if(isnan(T_MAX)){T_MAX = 10.0f;}
 800418a:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <main+0x32c>)
 800418c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004190:	eef4 7a67 	vcmp.f32	s15, s15
 8004194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004198:	d702      	bvc.n	80041a0 <main+0x318>
 800419a:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <main+0x32c>)
 800419c:	4a11      	ldr	r2, [pc, #68]	; (80041e4 <main+0x35c>)
 800419e:	661a      	str	r2, [r3, #96]	; 0x60

  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <main+0x360>)
 80041a6:	4811      	ldr	r0, [pc, #68]	; (80041ec <main+0x364>)
 80041a8:	f009 ff0e 	bl	800dfc8 <iprintf>
 80041ac:	e020      	b.n	80041f0 <main+0x368>
 80041ae:	bf00      	nop
 80041b0:	20004d8c 	.word	0x20004d8c
 80041b4:	20000678 	.word	0x20000678
 80041b8:	447a0000 	.word	0x447a0000
 80041bc:	42200000 	.word	0x42200000
 80041c0:	42fa0000 	.word	0x42fa0000
 80041c4:	41600000 	.word	0x41600000
 80041c8:	40a00000 	.word	0x40a00000
 80041cc:	41a80000 	.word	0x41a80000
 80041d0:	43fa0000 	.word	0x43fa0000
 80041d4:	41480000 	.word	0x41480000
 80041d8:	c1480000 	.word	0xc1480000
 80041dc:	43480000 	.word	0x43480000
 80041e0:	c3480000 	.word	0xc3480000
 80041e4:	41200000 	.word	0x41200000
 80041e8:	3ff00000 	.word	0x3ff00000
 80041ec:	080125dc 	.word	0x080125dc
/* Controller Setup */
init_controller_params(&controller);
 80041f0:	4872      	ldr	r0, [pc, #456]	; (80043bc <main+0x534>)
 80041f2:	f7fe fa4f 	bl	8002694 <init_controller_params>

/* calibration "encoder" zeroing */
memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 80041f6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80041fa:	2100      	movs	r1, #0
 80041fc:	4870      	ldr	r0, [pc, #448]	; (80043c0 <main+0x538>)
 80041fe:	f009 fa71 	bl	800d6e4 <memset>

/* commutation encoder setup */
comm_encoder.m_zero = M_ZERO;
 8004202:	4b70      	ldr	r3, [pc, #448]	; (80043c4 <main+0x53c>)
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	4a70      	ldr	r2, [pc, #448]	; (80043c8 <main+0x540>)
 8004208:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
comm_encoder.e_zero = E_ZERO;
 800420c:	4b6d      	ldr	r3, [pc, #436]	; (80043c4 <main+0x53c>)
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	4a6d      	ldr	r2, [pc, #436]	; (80043c8 <main+0x540>)
 8004212:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
comm_encoder.ppairs = PPAIRS;
 8004216:	4b6d      	ldr	r3, [pc, #436]	; (80043cc <main+0x544>)
 8004218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421a:	4a6b      	ldr	r2, [pc, #428]	; (80043c8 <main+0x540>)
 800421c:	6693      	str	r3, [r2, #104]	; 0x68
comm_encoder.mech_zero = MECH_ZERO;
 800421e:	4b6b      	ldr	r3, [pc, #428]	; (80043cc <main+0x544>)
 8004220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004222:	4a69      	ldr	r2, [pc, #420]	; (80043c8 <main+0x540>)
 8004224:	f8c2 31e0 	str.w	r3, [r2, #480]	; 0x1e0
ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 8004228:	2164      	movs	r1, #100	; 0x64
 800422a:	4867      	ldr	r0, [pc, #412]	; (80043c8 <main+0x540>)
 800422c:	f000 fba2 	bl	8004974 <ps_warmup>
ps_sample(&comm_encoder, DT);
 8004230:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80043d0 <main+0x548>
 8004234:	4864      	ldr	r0, [pc, #400]	; (80043c8 <main+0x540>)
 8004236:	f000 fbf5 	bl	8004a24 <ps_sample>
ps_sample(&comm_encoder, DT);
 800423a:	ed9f 0a65 	vldr	s0, [pc, #404]	; 80043d0 <main+0x548>
 800423e:	4862      	ldr	r0, [pc, #392]	; (80043c8 <main+0x540>)
 8004240:	f000 fbf0 	bl	8004a24 <ps_sample>
ps_sample(&comm_encoder, DT);
 8004244:	ed9f 0a62 	vldr	s0, [pc, #392]	; 80043d0 <main+0x548>
 8004248:	485f      	ldr	r0, [pc, #380]	; (80043c8 <main+0x540>)
 800424a:	f000 fbeb 	bl	8004a24 <ps_sample>
if(comm_encoder.angle_multiturn[0]>PI_F){
 800424e:	4b5e      	ldr	r3, [pc, #376]	; (80043c8 <main+0x540>)
 8004250:	edd3 7a03 	vldr	s15, [r3, #12]
 8004254:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80043d4 <main+0x54c>
 8004258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800425c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004260:	dd14      	ble.n	800428c <main+0x404>
  comm_encoder.angle_multiturn[0]-=TWO_PI_F;
 8004262:	4b59      	ldr	r3, [pc, #356]	; (80043c8 <main+0x540>)
 8004264:	edd3 7a03 	vldr	s15, [r3, #12]
 8004268:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80043d8 <main+0x550>
 800426c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004270:	4b55      	ldr	r3, [pc, #340]	; (80043c8 <main+0x540>)
 8004272:	edc3 7a03 	vstr	s15, [r3, #12]
  comm_encoder.turns--;
 8004276:	4b54      	ldr	r3, [pc, #336]	; (80043c8 <main+0x540>)
 8004278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800427c:	3b01      	subs	r3, #1
 800427e:	4a52      	ldr	r2, [pc, #328]	; (80043c8 <main+0x540>)
 8004280:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  printf("Added\r\n");
 8004284:	4855      	ldr	r0, [pc, #340]	; (80043dc <main+0x554>)
 8004286:	f009 ff25 	bl	800e0d4 <puts>
 800428a:	e01d      	b.n	80042c8 <main+0x440>
}
else if(comm_encoder.angle_multiturn[0]<-PI_F){
 800428c:	4b4e      	ldr	r3, [pc, #312]	; (80043c8 <main+0x540>)
 800428e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004292:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80043e0 <main+0x558>
 8004296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800429a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800429e:	d513      	bpl.n	80042c8 <main+0x440>
  comm_encoder.angle_multiturn[0] += TWO_PI_F;
 80042a0:	4b49      	ldr	r3, [pc, #292]	; (80043c8 <main+0x540>)
 80042a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80042a6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80043d8 <main+0x550>
 80042aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042ae:	4b46      	ldr	r3, [pc, #280]	; (80043c8 <main+0x540>)
 80042b0:	edc3 7a03 	vstr	s15, [r3, #12]
  comm_encoder.turns++;
 80042b4:	4b44      	ldr	r3, [pc, #272]	; (80043c8 <main+0x540>)
 80042b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042ba:	3301      	adds	r3, #1
 80042bc:	4a42      	ldr	r2, [pc, #264]	; (80043c8 <main+0x540>)
 80042be:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  printf("Subtracted\r\n");
 80042c2:	4848      	ldr	r0, [pc, #288]	; (80043e4 <main+0x55c>)
 80042c4:	f009 ff06 	bl	800e0d4 <puts>
}


if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 80042c8:	4b3f      	ldr	r3, [pc, #252]	; (80043c8 <main+0x540>)
 80042ca:	4a3e      	ldr	r2, [pc, #248]	; (80043c4 <main+0x53c>)
 80042cc:	33dc      	adds	r3, #220	; 0xdc
 80042ce:	f102 011c 	add.w	r1, r2, #28
 80042d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042d6:	4618      	mov	r0, r3
 80042d8:	f009 f9f6 	bl	800d6c8 <memcpy>

/* Turn on ADCs */
//   HAL_ADC_Start(&hadc1);
//   HAL_Delay(10);
//   HAL_ADC_Start(&hadc2);
	HAL_OPAMP_Start(&hopamp1);
 80042dc:	4842      	ldr	r0, [pc, #264]	; (80043e8 <main+0x560>)
 80042de:	f005 f895 	bl	800940c <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp2);
 80042e2:	4842      	ldr	r0, [pc, #264]	; (80043ec <main+0x564>)
 80042e4:	f005 f892 	bl	800940c <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 80042e8:	4841      	ldr	r0, [pc, #260]	; (80043f0 <main+0x568>)
 80042ea:	f005 f88f 	bl	800940c <HAL_OPAMP_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)controller.ADC1_Val, 2);
 80042ee:	2202      	movs	r2, #2
 80042f0:	4940      	ldr	r1, [pc, #256]	; (80043f4 <main+0x56c>)
 80042f2:	4841      	ldr	r0, [pc, #260]	; (80043f8 <main+0x570>)
 80042f4:	f001 fdc4 	bl	8005e80 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)controller.ADC2_Val, 2);
 80042f8:	2202      	movs	r2, #2
 80042fa:	4940      	ldr	r1, [pc, #256]	; (80043fc <main+0x574>)
 80042fc:	4840      	ldr	r0, [pc, #256]	; (8004400 <main+0x578>)
 80042fe:	f001 fdbf 	bl	8005e80 <HAL_ADC_Start_DMA>

   disable_gd(&controller);
 8004302:	482e      	ldr	r0, [pc, #184]	; (80043bc <main+0x534>)
 8004304:	f7ff fc28 	bl	8003b58 <disable_gd>
   HAL_Delay(10);
 8004308:	200a      	movs	r0, #10
 800430a:	f001 f9cd 	bl	80056a8 <HAL_Delay>

   zero_current(&controller);
 800430e:	482b      	ldr	r0, [pc, #172]	; (80043bc <main+0x534>)
 8004310:	f7fe f96e 	bl	80025f0 <zero_current>
   HAL_Delay(100);
 8004314:	2064      	movs	r0, #100	; 0x64
 8004316:	f001 f9c7 	bl	80056a8 <HAL_Delay>
   printf("ADC A OFFSET: %d     ADC B OFFSET: %d     ADC C OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset, controller.adc_c_offset);
 800431a:	4b28      	ldr	r3, [pc, #160]	; (80043bc <main+0x534>)
 800431c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004320:	4b26      	ldr	r3, [pc, #152]	; (80043bc <main+0x534>)
 8004322:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004326:	4b25      	ldr	r3, [pc, #148]	; (80043bc <main+0x534>)
 8004328:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800432c:	4835      	ldr	r0, [pc, #212]	; (8004404 <main+0x57c>)
 800432e:	f009 fe4b 	bl	800dfc8 <iprintf>

   /* Turn on PWM */
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004332:	2100      	movs	r1, #0
 8004334:	4834      	ldr	r0, [pc, #208]	; (8004408 <main+0x580>)
 8004336:	f006 f997 	bl	800a668 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800433a:	2104      	movs	r1, #4
 800433c:	4832      	ldr	r0, [pc, #200]	; (8004408 <main+0x580>)
 800433e:	f006 f993 	bl	800a668 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8004342:	2108      	movs	r1, #8
 8004344:	4830      	ldr	r0, [pc, #192]	; (8004408 <main+0x580>)
 8004346:	f006 f98f 	bl	800a668 <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800434a:	2100      	movs	r1, #0
 800434c:	482e      	ldr	r0, [pc, #184]	; (8004408 <main+0x580>)
 800434e:	f007 fa8b 	bl	800b868 <HAL_TIMEx_PWMN_Start>
      HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8004352:	2104      	movs	r1, #4
 8004354:	482c      	ldr	r0, [pc, #176]	; (8004408 <main+0x580>)
 8004356:	f007 fa87 	bl	800b868 <HAL_TIMEx_PWMN_Start>
      HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800435a:	2108      	movs	r1, #8
 800435c:	482a      	ldr	r0, [pc, #168]	; (8004408 <main+0x580>)
 800435e:	f007 fa83 	bl	800b868 <HAL_TIMEx_PWMN_Start>

      disable_gd(&controller);
 8004362:	4816      	ldr	r0, [pc, #88]	; (80043bc <main+0x534>)
 8004364:	f7ff fbf8 	bl	8003b58 <disable_gd>

	  /* CAN setup */
      HAL_GPIO_WritePin(CAN_SHDWN, GPIO_PIN_RESET); //Enable CAN
 8004368:	2200      	movs	r2, #0
 800436a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800436e:	4827      	ldr	r0, [pc, #156]	; (800440c <main+0x584>)
 8004370:	f004 f9f2 	bl	8008758 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(CAN_TERM, GPIO_PIN_RESET ); //Disable CAN termination resistor
 8004374:	2200      	movs	r2, #0
 8004376:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800437a:	4824      	ldr	r0, [pc, #144]	; (800440c <main+0x584>)
 800437c:	f004 f9ec 	bl	8008758 <HAL_GPIO_WritePin>
	  can_tx_init(&can_tx);
	  HAL_CAN_Start(&CAN_H); //start CAN
	  __HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt  */

	  /* Set Interrupt Priorities */
	  NVIC_SetPriority(PWM_ISR, 1); // commutation > communication
 8004380:	2101      	movs	r1, #1
 8004382:	2019      	movs	r0, #25
 8004384:	f7ff fd56 	bl	8003e34 <__NVIC_SetPriority>
	  NVIC_SetPriority(CAN_ISR, 3);
 8004388:	2103      	movs	r1, #3
 800438a:	2015      	movs	r0, #21
 800438c:	f7ff fd52 	bl	8003e34 <__NVIC_SetPriority>

	  /* Start the FSM */
	  state.state = MENU_MODE;
 8004390:	4b1f      	ldr	r3, [pc, #124]	; (8004410 <main+0x588>)
 8004392:	2200      	movs	r2, #0
 8004394:	701a      	strb	r2, [r3, #0]
	  state.next_state = MENU_MODE;
 8004396:	4b1e      	ldr	r3, [pc, #120]	; (8004410 <main+0x588>)
 8004398:	2200      	movs	r2, #0
 800439a:	705a      	strb	r2, [r3, #1]
	  state.ready = 1;
 800439c:	4b1c      	ldr	r3, [pc, #112]	; (8004410 <main+0x588>)
 800439e:	2201      	movs	r2, #1
 80043a0:	70da      	strb	r2, [r3, #3]


  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 80043a2:	2201      	movs	r2, #1
 80043a4:	491b      	ldr	r1, [pc, #108]	; (8004414 <main+0x58c>)
 80043a6:	481c      	ldr	r0, [pc, #112]	; (8004418 <main+0x590>)
 80043a8:	f007 fd98 	bl	800bedc <HAL_UART_Receive_IT>
   HAL_TIM_Base_Start_IT(&htim1);
 80043ac:	4816      	ldr	r0, [pc, #88]	; (8004408 <main+0x580>)
 80043ae:	f006 f88f 	bl	800a4d0 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	printf("A:%f B:%f C:%f V:%f \r\n",controller.i_a, controller.i_b, controller.i_c, controller.v_bus);

	HAL_Delay(100);
 80043b2:	2064      	movs	r0, #100	; 0x64
 80043b4:	f001 f978 	bl	80056a8 <HAL_Delay>
 80043b8:	e7fb      	b.n	80043b2 <main+0x52a>
 80043ba:	bf00      	nop
 80043bc:	20000778 	.word	0x20000778
 80043c0:	20004ba4 	.word	0x20004ba4
 80043c4:	20004d8c 	.word	0x20004d8c
 80043c8:	20000480 	.word	0x20000480
 80043cc:	20000678 	.word	0x20000678
 80043d0:	3851b717 	.word	0x3851b717
 80043d4:	40490fdb 	.word	0x40490fdb
 80043d8:	40c90fdb 	.word	0x40c90fdb
 80043dc:	08012600 	.word	0x08012600
 80043e0:	c0490fdb 	.word	0xc0490fdb
 80043e4:	08012608 	.word	0x08012608
 80043e8:	200053a8 	.word	0x200053a8
 80043ec:	20005330 	.word	0x20005330
 80043f0:	2000536c 	.word	0x2000536c
 80043f4:	20000a70 	.word	0x20000a70
 80043f8:	200002a0 	.word	0x200002a0
 80043fc:	20000a74 	.word	0x20000a74
 8004400:	20000234 	.word	0x20000234
 8004404:	08012614 	.word	0x08012614
 8004408:	200053e4 	.word	0x200053e4
 800440c:	48000800 	.word	0x48000800
 8004410:	20000668 	.word	0x20000668
 8004414:	20000664 	.word	0x20000664
 8004418:	20005430 	.word	0x20005430

0800441c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b0a4      	sub	sp, #144	; 0x90
 8004420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004422:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004426:	2238      	movs	r2, #56	; 0x38
 8004428:	2100      	movs	r1, #0
 800442a:	4618      	mov	r0, r3
 800442c:	f009 f95a 	bl	800d6e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004430:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	605a      	str	r2, [r3, #4]
 800443a:	609a      	str	r2, [r3, #8]
 800443c:	60da      	str	r2, [r3, #12]
 800443e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004440:	463b      	mov	r3, r7
 8004442:	2244      	movs	r2, #68	; 0x44
 8004444:	2100      	movs	r1, #0
 8004446:	4618      	mov	r0, r3
 8004448:	f009 f94c 	bl	800d6e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800444c:	2000      	movs	r0, #0
 800444e:	f005 f80f 	bl	8009470 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004452:	2301      	movs	r3, #1
 8004454:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800445a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800445c:	2302      	movs	r3, #2
 800445e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004460:	2303      	movs	r3, #3
 8004462:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8004464:	2302      	movs	r3, #2
 8004466:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8004468:	2354      	movs	r3, #84	; 0x54
 800446a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800446e:	2302      	movs	r3, #2
 8004470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004474:	2302      	movs	r3, #2
 8004476:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800447a:	2302      	movs	r3, #2
 800447c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004480:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004484:	4618      	mov	r0, r3
 8004486:	f005 f8a7 	bl	80095d8 <HAL_RCC_OscConfig>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8004490:	f000 f82f 	bl	80044f2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004494:	230f      	movs	r3, #15
 8004496:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004498:	2303      	movs	r3, #3
 800449a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800449c:	2300      	movs	r3, #0
 800449e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80044a0:	2300      	movs	r3, #0
 80044a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80044a4:	2300      	movs	r3, #0
 80044a6:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80044a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80044ac:	2104      	movs	r1, #4
 80044ae:	4618      	mov	r0, r3
 80044b0:	f005 fbaa 	bl	8009c08 <HAL_RCC_ClockConfig>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80044ba:	f000 f81a 	bl	80044f2 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80044be:	f249 0342 	movw	r3, #36930	; 0x9042
 80044c2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80044cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044d0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80044d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80044d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044d8:	463b      	mov	r3, r7
 80044da:	4618      	mov	r0, r3
 80044dc:	f005 fdb0 	bl	800a040 <HAL_RCCEx_PeriphCLKConfig>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <SystemClock_Config+0xce>
  {
    Error_Handler();
 80044e6:	f000 f804 	bl	80044f2 <Error_Handler>
  }
}
 80044ea:	bf00      	nop
 80044ec:	3790      	adds	r7, #144	; 0x90
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044f2:	b480      	push	{r7}
 80044f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044f6:	b672      	cpsid	i
}
 80044f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80044fa:	e7fe      	b.n	80044fa <Error_Handler+0x8>

080044fc <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	ed87 0a01 	vstr	s0, [r7, #4]
 8004506:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 800450a:	ed97 7a01 	vldr	s14, [r7, #4]
 800450e:	edd7 7a00 	vldr	s15, [r7]
 8004512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800451a:	dd01      	ble.n	8004520 <fast_fmaxf+0x24>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	e000      	b.n	8004522 <fast_fmaxf+0x26>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	ee07 3a90 	vmov	s15, r3
    }
 8004526:	eeb0 0a67 	vmov.f32	s0, s15
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <fast_fminf>:

float fast_fminf(float x, float y){
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	ed87 0a01 	vstr	s0, [r7, #4]
 800453e:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8004542:	ed97 7a01 	vldr	s14, [r7, #4]
 8004546:	edd7 7a00 	vldr	s15, [r7]
 800454a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800454e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004552:	d501      	bpl.n	8004558 <fast_fminf+0x24>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	e000      	b.n	800455a <fast_fminf+0x26>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	ee07 3a90 	vmov	s15, r3
    }
 800455e:	eeb0 0a67 	vmov.f32	s0, s15
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <fmaxf3>:

float fmaxf3(float x, float y, float z){
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	ed87 0a03 	vstr	s0, [r7, #12]
 8004576:	edc7 0a02 	vstr	s1, [r7, #8]
 800457a:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 800457e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004582:	edd7 7a02 	vldr	s15, [r7, #8]
 8004586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800458a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458e:	dd0c      	ble.n	80045aa <fmaxf3+0x3e>
 8004590:	ed97 7a03 	vldr	s14, [r7, #12]
 8004594:	edd7 7a01 	vldr	s15, [r7, #4]
 8004598:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800459c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a0:	dd01      	ble.n	80045a6 <fmaxf3+0x3a>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	e00d      	b.n	80045c2 <fmaxf3+0x56>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	e00b      	b.n	80045c2 <fmaxf3+0x56>
 80045aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80045ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80045b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ba:	dd01      	ble.n	80045c0 <fmaxf3+0x54>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	e000      	b.n	80045c2 <fmaxf3+0x56>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	ee07 3a90 	vmov	s15, r3
    }
 80045c6:	eeb0 0a67 	vmov.f32	s0, s15
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <fminf3>:

float fminf3(float x, float y, float z){
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	ed87 0a03 	vstr	s0, [r7, #12]
 80045de:	edc7 0a02 	vstr	s1, [r7, #8]
 80045e2:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 80045e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80045ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80045ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f6:	d50c      	bpl.n	8004612 <fminf3+0x3e>
 80045f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80045fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004600:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004608:	d501      	bpl.n	800460e <fminf3+0x3a>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	e00d      	b.n	800462a <fminf3+0x56>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	e00b      	b.n	800462a <fminf3+0x56>
 8004612:	ed97 7a02 	vldr	s14, [r7, #8]
 8004616:	edd7 7a01 	vldr	s15, [r7, #4]
 800461a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800461e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004622:	d501      	bpl.n	8004628 <fminf3+0x54>
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	e000      	b.n	800462a <fminf3+0x56>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	ee07 3a90 	vmov	s15, r3
    }
 800462e:	eeb0 0a67 	vmov.f32	s0, s15
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	ed93 7a00 	vldr	s14, [r3]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	edd3 7a00 	vldr	s15, [r3]
 8004656:	ee27 7a27 	vmul.f32	s14, s14, s15
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	edd3 6a00 	vldr	s13, [r3]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	edd3 7a00 	vldr	s15, [r3]
 8004666:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800466a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800466e:	eeb0 0a67 	vmov.f32	s0, s15
 8004672:	f00d fa2b 	bl	8011acc <sqrtf>
 8004676:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 800467a:	ed97 7a05 	vldr	s14, [r7, #20]
 800467e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004682:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800468a:	dc00      	bgt.n	800468e <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 800468c:	e01b      	b.n	80046c6 <limit_norm+0x8a>
        *x = *x * limit/norm;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	ed93 7a00 	vldr	s14, [r3]
 8004694:	edd7 7a01 	vldr	s15, [r7, #4]
 8004698:	ee67 6a27 	vmul.f32	s13, s14, s15
 800469c:	ed97 7a05 	vldr	s14, [r7, #20]
 80046a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	ed93 7a00 	vldr	s14, [r3]
 80046b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80046b4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80046b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80046bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	edc3 7a00 	vstr	s15, [r3]
    }
 80046c6:	bf00      	nop
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <sin_lut>:
    float span = x_max - x_min;
    float offset = x_min;
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
    }

float sin_lut(float theta){
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 80046da:	eddf 0a17 	vldr	s1, [pc, #92]	; 8004738 <sin_lut+0x68>
 80046de:	ed97 0a01 	vldr	s0, [r7, #4]
 80046e2:	f00d f9c7 	bl	8011a74 <fmodf>
 80046e6:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 80046ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80046ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f6:	d506      	bpl.n	8004706 <sin_lut+0x36>
 80046f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80046fc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004738 <sin_lut+0x68>
 8004700:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004704:	e001      	b.n	800470a <sin_lut+0x3a>
 8004706:	edd7 7a01 	vldr	s15, [r7, #4]
 800470a:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 800470e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004712:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800473c <sin_lut+0x6c>
 8004716:	ee67 7a87 	vmul.f32	s15, s15, s14
 800471a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800471e:	ee17 3a90 	vmov	r3, s15
 8004722:	4a07      	ldr	r2, [pc, #28]	; (8004740 <sin_lut+0x70>)
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	ee07 3a90 	vmov	s15, r3
}
 800472e:	eeb0 0a67 	vmov.f32	s0, s15
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40c90fdb 	.word	0x40c90fdb
 800473c:	42a2f983 	.word	0x42a2f983
 8004740:	080126d0 	.word	0x080126d0

08004744 <cos_lut>:

float cos_lut(float theta){
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 800474e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004770 <cos_lut+0x2c>
 8004752:	edd7 7a01 	vldr	s15, [r7, #4]
 8004756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800475a:	eeb0 0a67 	vmov.f32	s0, s15
 800475e:	f7ff ffb7 	bl	80046d0 <sin_lut>
 8004762:	eef0 7a40 	vmov.f32	s15, s0
}
 8004766:	eeb0 0a67 	vmov.f32	s0, s15
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	3fc90fdb 	.word	0x3fc90fdb

08004774 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8004778:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <MX_OPAMP1_Init+0x54>)
 800477a:	4a14      	ldr	r2, [pc, #80]	; (80047cc <MX_OPAMP1_Init+0x58>)
 800477c:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 800477e:	4b12      	ldr	r3, [pc, #72]	; (80047c8 <MX_OPAMP1_Init+0x54>)
 8004780:	2280      	movs	r2, #128	; 0x80
 8004782:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8004784:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <MX_OPAMP1_Init+0x54>)
 8004786:	2240      	movs	r2, #64	; 0x40
 8004788:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800478a:	4b0f      	ldr	r3, [pc, #60]	; (80047c8 <MX_OPAMP1_Init+0x54>)
 800478c:	2200      	movs	r2, #0
 800478e:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8004790:	4b0d      	ldr	r3, [pc, #52]	; (80047c8 <MX_OPAMP1_Init+0x54>)
 8004792:	2201      	movs	r2, #1
 8004794:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004796:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <MX_OPAMP1_Init+0x54>)
 8004798:	2200      	movs	r2, #0
 800479a:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 800479c:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <MX_OPAMP1_Init+0x54>)
 800479e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047a2:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80047a4:	4b08      	ldr	r3, [pc, #32]	; (80047c8 <MX_OPAMP1_Init+0x54>)
 80047a6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80047aa:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80047ac:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <MX_OPAMP1_Init+0x54>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80047b2:	4805      	ldr	r0, [pc, #20]	; (80047c8 <MX_OPAMP1_Init+0x54>)
 80047b4:	f004 fd5a 	bl	800926c <HAL_OPAMP_Init>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 80047be:	f7ff fe98 	bl	80044f2 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80047c2:	bf00      	nop
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	200053a8 	.word	0x200053a8
 80047cc:	40010300 	.word	0x40010300

080047d0 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 80047d4:	4b13      	ldr	r3, [pc, #76]	; (8004824 <MX_OPAMP2_Init+0x54>)
 80047d6:	4a14      	ldr	r2, [pc, #80]	; (8004828 <MX_OPAMP2_Init+0x58>)
 80047d8:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80047da:	4b12      	ldr	r3, [pc, #72]	; (8004824 <MX_OPAMP2_Init+0x54>)
 80047dc:	2280      	movs	r2, #128	; 0x80
 80047de:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80047e0:	4b10      	ldr	r3, [pc, #64]	; (8004824 <MX_OPAMP2_Init+0x54>)
 80047e2:	2240      	movs	r2, #64	; 0x40
 80047e4:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80047e6:	4b0f      	ldr	r3, [pc, #60]	; (8004824 <MX_OPAMP2_Init+0x54>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 80047ec:	4b0d      	ldr	r3, [pc, #52]	; (8004824 <MX_OPAMP2_Init+0x54>)
 80047ee:	2201      	movs	r2, #1
 80047f0:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80047f2:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <MX_OPAMP2_Init+0x54>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80047f8:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <MX_OPAMP2_Init+0x54>)
 80047fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047fe:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8004800:	4b08      	ldr	r3, [pc, #32]	; (8004824 <MX_OPAMP2_Init+0x54>)
 8004802:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004806:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004808:	4b06      	ldr	r3, [pc, #24]	; (8004824 <MX_OPAMP2_Init+0x54>)
 800480a:	2200      	movs	r2, #0
 800480c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 800480e:	4805      	ldr	r0, [pc, #20]	; (8004824 <MX_OPAMP2_Init+0x54>)
 8004810:	f004 fd2c 	bl	800926c <HAL_OPAMP_Init>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 800481a:	f7ff fe6a 	bl	80044f2 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 800481e:	bf00      	nop
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20005330 	.word	0x20005330
 8004828:	40010304 	.word	0x40010304

0800482c <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8004830:	4b13      	ldr	r3, [pc, #76]	; (8004880 <MX_OPAMP3_Init+0x54>)
 8004832:	4a14      	ldr	r2, [pc, #80]	; (8004884 <MX_OPAMP3_Init+0x58>)
 8004834:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8004836:	4b12      	ldr	r3, [pc, #72]	; (8004880 <MX_OPAMP3_Init+0x54>)
 8004838:	2280      	movs	r2, #128	; 0x80
 800483a:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 800483c:	4b10      	ldr	r3, [pc, #64]	; (8004880 <MX_OPAMP3_Init+0x54>)
 800483e:	2240      	movs	r2, #64	; 0x40
 8004840:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004842:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <MX_OPAMP3_Init+0x54>)
 8004844:	2200      	movs	r2, #0
 8004846:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8004848:	4b0d      	ldr	r3, [pc, #52]	; (8004880 <MX_OPAMP3_Init+0x54>)
 800484a:	2201      	movs	r2, #1
 800484c:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800484e:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <MX_OPAMP3_Init+0x54>)
 8004850:	2200      	movs	r2, #0
 8004852:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004854:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <MX_OPAMP3_Init+0x54>)
 8004856:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800485a:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800485c:	4b08      	ldr	r3, [pc, #32]	; (8004880 <MX_OPAMP3_Init+0x54>)
 800485e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004862:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004864:	4b06      	ldr	r3, [pc, #24]	; (8004880 <MX_OPAMP3_Init+0x54>)
 8004866:	2200      	movs	r2, #0
 8004868:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 800486a:	4805      	ldr	r0, [pc, #20]	; (8004880 <MX_OPAMP3_Init+0x54>)
 800486c:	f004 fcfe 	bl	800926c <HAL_OPAMP_Init>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8004876:	f7ff fe3c 	bl	80044f2 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 800487a:	bf00      	nop
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	2000536c 	.word	0x2000536c
 8004884:	40010308 	.word	0x40010308

08004888 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08a      	sub	sp, #40	; 0x28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004890:	f107 0314 	add.w	r3, r7, #20
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	605a      	str	r2, [r3, #4]
 800489a:	609a      	str	r2, [r3, #8]
 800489c:	60da      	str	r2, [r3, #12]
 800489e:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a2e      	ldr	r2, [pc, #184]	; (8004960 <HAL_OPAMP_MspInit+0xd8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d119      	bne.n	80048de <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048aa:	4b2e      	ldr	r3, [pc, #184]	; (8004964 <HAL_OPAMP_MspInit+0xdc>)
 80048ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ae:	4a2d      	ldr	r2, [pc, #180]	; (8004964 <HAL_OPAMP_MspInit+0xdc>)
 80048b0:	f043 0301 	orr.w	r3, r3, #1
 80048b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048b6:	4b2b      	ldr	r3, [pc, #172]	; (8004964 <HAL_OPAMP_MspInit+0xdc>)
 80048b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	613b      	str	r3, [r7, #16]
 80048c0:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80048c2:	230a      	movs	r3, #10
 80048c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048c6:	2303      	movs	r3, #3
 80048c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ce:	f107 0314 	add.w	r3, r7, #20
 80048d2:	4619      	mov	r1, r3
 80048d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048d8:	f003 fdbc 	bl	8008454 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 80048dc:	e03b      	b.n	8004956 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a21      	ldr	r2, [pc, #132]	; (8004968 <HAL_OPAMP_MspInit+0xe0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d119      	bne.n	800491c <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048e8:	4b1e      	ldr	r3, [pc, #120]	; (8004964 <HAL_OPAMP_MspInit+0xdc>)
 80048ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ec:	4a1d      	ldr	r2, [pc, #116]	; (8004964 <HAL_OPAMP_MspInit+0xdc>)
 80048ee:	f043 0301 	orr.w	r3, r3, #1
 80048f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048f4:	4b1b      	ldr	r3, [pc, #108]	; (8004964 <HAL_OPAMP_MspInit+0xdc>)
 80048f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004900:	23a0      	movs	r3, #160	; 0xa0
 8004902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004904:	2303      	movs	r3, #3
 8004906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004908:	2300      	movs	r3, #0
 800490a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800490c:	f107 0314 	add.w	r3, r7, #20
 8004910:	4619      	mov	r1, r3
 8004912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004916:	f003 fd9d 	bl	8008454 <HAL_GPIO_Init>
}
 800491a:	e01c      	b.n	8004956 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a12      	ldr	r2, [pc, #72]	; (800496c <HAL_OPAMP_MspInit+0xe4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d117      	bne.n	8004956 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004926:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <HAL_OPAMP_MspInit+0xdc>)
 8004928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492a:	4a0e      	ldr	r2, [pc, #56]	; (8004964 <HAL_OPAMP_MspInit+0xdc>)
 800492c:	f043 0302 	orr.w	r3, r3, #2
 8004930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004932:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <HAL_OPAMP_MspInit+0xdc>)
 8004934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	60bb      	str	r3, [r7, #8]
 800493c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800493e:	2305      	movs	r3, #5
 8004940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004942:	2303      	movs	r3, #3
 8004944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800494a:	f107 0314 	add.w	r3, r7, #20
 800494e:	4619      	mov	r1, r3
 8004950:	4807      	ldr	r0, [pc, #28]	; (8004970 <HAL_OPAMP_MspInit+0xe8>)
 8004952:	f003 fd7f 	bl	8008454 <HAL_GPIO_Init>
}
 8004956:	bf00      	nop
 8004958:	3728      	adds	r7, #40	; 0x28
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40010300 	.word	0x40010300
 8004964:	40021000 	.word	0x40021000
 8004968:	40010304 	.word	0x40010304
 800496c:	40010308 	.word	0x40010308
 8004970:	48000400 	.word	0x48000400

08004974 <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af04      	add	r7, sp, #16
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
	encoder->config.raw = 0;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	801a      	strh	r2, [r3, #0]
	encoder->config.bit.PM = 0;
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	8813      	ldrh	r3, [r2, #0]
 8004988:	f36f 2309 	bfc	r3, #8, #2
 800498c:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.HYST = 0;
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	8813      	ldrh	r3, [r2, #0]
 8004992:	f36f 238b 	bfc	r3, #10, #2
 8004996:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.OUTS = 0;
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	8813      	ldrh	r3, [r2, #0]
 800499c:	f36f 330d 	bfc	r3, #12, #2
 80049a0:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.PWMF = 0;
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	8813      	ldrh	r3, [r2, #0]
 80049a6:	f36f 338f 	bfc	r3, #14, #2
 80049aa:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.SF = 3;
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	8813      	ldrh	r3, [r2, #0]
 80049b0:	f043 0303 	orr.w	r3, r3, #3
 80049b4:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.FTH = 7;
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	8813      	ldrh	r3, [r2, #0]
 80049ba:	f043 031c 	orr.w	r3, r3, #28
 80049be:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.WD = 0;
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	8813      	ldrh	r3, [r2, #0]
 80049c4:	f36f 1345 	bfc	r3, #5, #1
 80049c8:	8013      	strh	r3, [r2, #0]
	HAL_I2C_Mem_Write(&ENC_I2C, ENC_ADDRESS,0x01,I2C_MEMADD_SIZE_8BIT, (uint8_t*)&encoder->config.raw, 2,2);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2202      	movs	r2, #2
 80049ce:	9202      	str	r2, [sp, #8]
 80049d0:	2202      	movs	r2, #2
 80049d2:	9201      	str	r2, [sp, #4]
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	2301      	movs	r3, #1
 80049d8:	2201      	movs	r2, #1
 80049da:	216c      	movs	r1, #108	; 0x6c
 80049dc:	4810      	ldr	r0, [pc, #64]	; (8004a20 <ps_warmup+0xac>)
 80049de:	f003 ff63 	bl	80088a8 <HAL_I2C_Mem_Write>
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 80049e2:	2300      	movs	r3, #0
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	e012      	b.n	8004a0e <ps_warmup+0x9a>
		encoder->data.raw = 0;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	805a      	strh	r2, [r3, #2]
		HAL_I2C_Mem_Read(&ENC_I2C, ENC_ADDRESS,0x0C,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&encoder->data.raw, 2,2);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3302      	adds	r3, #2
 80049f2:	2202      	movs	r2, #2
 80049f4:	9202      	str	r2, [sp, #8]
 80049f6:	2202      	movs	r2, #2
 80049f8:	9201      	str	r2, [sp, #4]
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	2301      	movs	r3, #1
 80049fe:	220c      	movs	r2, #12
 8004a00:	216c      	movs	r1, #108	; 0x6c
 8004a02:	4807      	ldr	r0, [pc, #28]	; (8004a20 <ps_warmup+0xac>)
 8004a04:	f004 f864 	bl	8008ad0 <HAL_I2C_Mem_Read>
	for(int i = 0; i<n; i++){
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	dbe8      	blt.n	80049e8 <ps_warmup+0x74>
	}
}
 8004a16:	bf00      	nop
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20000430 	.word	0x20000430

08004a24 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08e      	sub	sp, #56	; 0x38
 8004a28:	af04      	add	r7, sp, #16
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	609a      	str	r2, [r3, #8]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 8004a38:	2313      	movs	r3, #19
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3c:	e011      	b.n	8004a62 <ps_sample+0x3e>
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	3b01      	subs	r3, #1
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	3302      	adds	r3, #2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	3302      	adds	r3, #2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	440b      	add	r3, r1
 8004a58:	3304      	adds	r3, #4
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	dcea      	bgt.n	8004a3e <ps_sample+0x1a>
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->data.raw = 0;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	805a      	strh	r2, [r3, #2]
	HAL_I2C_Mem_Read(&ENC_I2C, ENC_ADDRESS,0x0C,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&encoder->data.raw, 2,2);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	3302      	adds	r3, #2
 8004a72:	2202      	movs	r2, #2
 8004a74:	9202      	str	r2, [sp, #8]
 8004a76:	2202      	movs	r2, #2
 8004a78:	9201      	str	r2, [sp, #4]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	220c      	movs	r2, #12
 8004a80:	216c      	movs	r1, #108	; 0x6c
 8004a82:	489c      	ldr	r0, [pc, #624]	; (8004cf4 <ps_sample+0x2d0>)
 8004a84:	f004 f824 	bl	8008ad0 <HAL_I2C_Mem_Read>
	uint16_t angle = ((encoder->data.bit.angle8_12<<8)&0xF00)|encoder->data.bit.angle0_7;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	885b      	ldrh	r3, [r3, #2]
 8004a8c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	021b      	lsls	r3, r3, #8
 8004a94:	b21b      	sxth	r3, r3
 8004a96:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a9a:	b21a      	sxth	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	885b      	ldrh	r3, [r3, #2]
 8004aa0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	b21b      	sxth	r3, r3
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	b21b      	sxth	r3, r3
 8004aac:	83fb      	strh	r3, [r7, #30]
	encoder->raw = angle;
 8004aae:	8bfa      	ldrh	r2, [r7, #30]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	675a      	str	r2, [r3, #116]	; 0x74

	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>7];				// lookup table lower entry
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab8:	11db      	asrs	r3, r3, #7
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	3336      	adds	r3, #54	; 0x36
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	61bb      	str	r3, [r7, #24]
	int off_2 = encoder->offset_lut[((encoder->raw>>7)+1)%128];		// lookup table higher entry
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aca:	11db      	asrs	r3, r3, #7
 8004acc:	3301      	adds	r3, #1
 8004ace:	425a      	negs	r2, r3
 8004ad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ad8:	bf58      	it	pl
 8004ada:	4253      	negpl	r3, r2
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	3336      	adds	r3, #54	; 0x36
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	617b      	str	r3, [r7, #20]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>7)<<7))>>7);     // Interpolate between lookup table entries
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004af2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	11db      	asrs	r3, r3, #7
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4413      	add	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
	encoder->count = encoder->raw - off_interp;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad2      	subs	r2, r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	679a      	str	r2, [r3, #120]	; 0x78


	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count))/((float)ENC_CPR);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b1a:	eddf 6a77 	vldr	s13, [pc, #476]	; 8004cf8 <ps_sample+0x2d4>
 8004b1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	edc3 7a01 	vstr	s15, [r3, #4]
	int int_angle = encoder->angle_singleturn;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b32:	ee17 3a90 	vmov	r3, s15
 8004b36:	60fb      	str	r3, [r7, #12]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	ed93 7a01 	vldr	s14, [r3, #4]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	ee07 3a90 	vmov	s15, r3
 8004b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b4c:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8004cfc <ps_sample+0x2d8>
 8004b50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	edc3 7a01 	vstr	s15, [r3, #4]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b68:	d507      	bpl.n	8004b7a <ps_sample+0x156>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b70:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8004cfc <ps_sample+0x2d8>
 8004b74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b78:	e002      	b.n	8004b80 <ps_sample+0x15c>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004b90:	4b5b      	ldr	r3, [pc, #364]	; (8004d00 <ps_sample+0x2dc>)
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ba2:	eddf 6a55 	vldr	s13, [pc, #340]	; 8004cf8 <ps_sample+0x2d4>
 8004ba6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	int_angle = (int)encoder->elec_angle;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004bb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bba:	ee17 3a90 	vmov	r3, s15
 8004bbe:	60fb      	str	r3, [r7, #12]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	ee07 3a90 	vmov	s15, r3
 8004bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bd4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8004cfc <ps_sample+0x2d8>
 8004bd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004be8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf0:	d507      	bpl.n	8004c02 <ps_sample+0x1de>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004bf8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004cfc <ps_sample+0x2d8>
 8004bfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c00:	e002      	b.n	8004c08 <ps_sample+0x1e4>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	/* Rollover */
	int rollover = 0;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	623b      	str	r3, [r7, #32]
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c22:	edc7 7a02 	vstr	s15, [r7, #8]
	if(angle_diff > PI_F){rollover = -1;}
 8004c26:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c2a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8004d04 <ps_sample+0x2e0>
 8004c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c36:	dd03      	ble.n	8004c40 <ps_sample+0x21c>
 8004c38:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3c:	623b      	str	r3, [r7, #32]
 8004c3e:	e00a      	b.n	8004c56 <ps_sample+0x232>
	else if(angle_diff < -PI_F){rollover = 1;}
 8004c40:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c44:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004d08 <ps_sample+0x2e4>
 8004c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c50:	d501      	bpl.n	8004c56 <ps_sample+0x232>
 8004c52:	2301      	movs	r3, #1
 8004c54:	623b      	str	r3, [r7, #32]
	encoder->turns += rollover;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	441a      	add	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if(!encoder->first_sample){
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 31dc 	ldrb.w	r3, [r3, #476]	; 0x1dc
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d107      	bne.n	8004c80 <ps_sample+0x25c>
		encoder->turns = 0;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		encoder->first_sample = 1;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
	}

	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns-encoder->mech_zero;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c8c:	ee07 3a90 	vmov	s15, r3
 8004c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c94:	eddf 6a19 	vldr	s13, [pc, #100]	; 8004cfc <ps_sample+0x2d8>
 8004c98:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004c9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8004ca6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	edc3 7a03 	vstr	s15, [r3, #12]

	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	ed93 7a03 	vldr	s14, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004cbc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004cc0:	edd7 7a00 	vldr	s15, [r7]
 8004cc4:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8004cc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

}
 8004cec:	bf00      	nop
 8004cee:	3728      	adds	r7, #40	; 0x28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	20000430 	.word	0x20000430
 8004cf8:	45800000 	.word	0x45800000
 8004cfc:	40c90fdb 	.word	0x40c90fdb
 8004d00:	20004d8c 	.word	0x20004d8c
 8004d04:	40490fdb 	.word	0x40490fdb
 8004d08:	c0490fdb 	.word	0xc0490fdb

08004d0c <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
//	printf("Raw: %d\r\n", encoder->raw);
	printf("Raw: %d", encoder->raw);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	481d      	ldr	r0, [pc, #116]	; (8004d94 <ps_print+0x88>)
 8004d1e:	f009 f953 	bl	800dfc8 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d26:	4619      	mov	r1, r3
 8004d28:	481b      	ldr	r0, [pc, #108]	; (8004d98 <ps_print+0x8c>)
 8004d2a:	f009 f94d 	bl	800dfc8 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fb fc30 	bl	8000598 <__aeabi_f2d>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4817      	ldr	r0, [pc, #92]	; (8004d9c <ps_print+0x90>)
 8004d3e:	f009 f943 	bl	800dfc8 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fb fc26 	bl	8000598 <__aeabi_f2d>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4813      	ldr	r0, [pc, #76]	; (8004da0 <ps_print+0x94>)
 8004d52:	f009 f939 	bl	800dfc8 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fb fc1c 	bl	8000598 <__aeabi_f2d>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	480f      	ldr	r0, [pc, #60]	; (8004da4 <ps_print+0x98>)
 8004d66:	f009 f92f 	bl	800dfc8 <iprintf>
	printf("   Turns:  %d", encoder->turns);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d70:	4619      	mov	r1, r3
 8004d72:	480d      	ldr	r0, [pc, #52]	; (8004da8 <ps_print+0x9c>)
 8004d74:	f009 f928 	bl	800dfc8 <iprintf>
	printf("   CAN:   %f\r\n", encoder->angle_multiturn[0]);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fb fc0b 	bl	8000598 <__aeabi_f2d>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4809      	ldr	r0, [pc, #36]	; (8004dac <ps_print+0xa0>)
 8004d88:	f009 f91e 	bl	800dfc8 <iprintf>
	//HAL_Delay(dt_ms);
}
 8004d8c:	bf00      	nop
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	08012654 	.word	0x08012654
 8004d98:	0801265c 	.word	0x0801265c
 8004d9c:	08012674 	.word	0x08012674
 8004da0:	08012688 	.word	0x08012688
 8004da4:	0801269c 	.word	0x0801269c
 8004da8:	080126b0 	.word	0x080126b0
 8004dac:	080126c0 	.word	0x080126c0

08004db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004db6:	4b0f      	ldr	r3, [pc, #60]	; (8004df4 <HAL_MspInit+0x44>)
 8004db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dba:	4a0e      	ldr	r2, [pc, #56]	; (8004df4 <HAL_MspInit+0x44>)
 8004dbc:	f043 0301 	orr.w	r3, r3, #1
 8004dc0:	6613      	str	r3, [r2, #96]	; 0x60
 8004dc2:	4b0c      	ldr	r3, [pc, #48]	; (8004df4 <HAL_MspInit+0x44>)
 8004dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	607b      	str	r3, [r7, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dce:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <HAL_MspInit+0x44>)
 8004dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd2:	4a08      	ldr	r2, [pc, #32]	; (8004df4 <HAL_MspInit+0x44>)
 8004dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd8:	6593      	str	r3, [r2, #88]	; 0x58
 8004dda:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <HAL_MspInit+0x44>)
 8004ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de2:	603b      	str	r3, [r7, #0]
 8004de4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004de6:	f004 fbe7 	bl	80095b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004dea:	bf00      	nop
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40021000 	.word	0x40021000

08004df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004dfc:	e7fe      	b.n	8004dfc <NMI_Handler+0x4>

08004dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e02:	e7fe      	b.n	8004e02 <HardFault_Handler+0x4>

08004e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e08:	e7fe      	b.n	8004e08 <MemManage_Handler+0x4>

08004e0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e0e:	e7fe      	b.n	8004e0e <BusFault_Handler+0x4>

08004e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e14:	e7fe      	b.n	8004e14 <UsageFault_Handler+0x4>

08004e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e16:	b480      	push	{r7}
 8004e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e1a:	bf00      	nop
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e28:	bf00      	nop
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e32:	b480      	push	{r7}
 8004e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e36:	bf00      	nop
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e44:	f000 fc12 	bl	800566c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e48:	bf00      	nop
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e50:	4802      	ldr	r0, [pc, #8]	; (8004e5c <DMA1_Channel1_IRQHandler+0x10>)
 8004e52:	f002 fbe0 	bl	8007616 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004e56:	bf00      	nop
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	2000030c 	.word	0x2000030c

08004e60 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004e64:	4802      	ldr	r0, [pc, #8]	; (8004e70 <DMA1_Channel2_IRQHandler+0x10>)
 8004e66:	f002 fbd6 	bl	8007616 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004e6a:	bf00      	nop
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	2000036c 	.word	0x2000036c

08004e74 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004e78:	4803      	ldr	r0, [pc, #12]	; (8004e88 <ADC1_2_IRQHandler+0x14>)
 8004e7a:	f001 f8b5 	bl	8005fe8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004e7e:	4803      	ldr	r0, [pc, #12]	; (8004e8c <ADC1_2_IRQHandler+0x18>)
 8004e80:	f001 f8b2 	bl	8005fe8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004e84:	bf00      	nop
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	200002a0 	.word	0x200002a0
 8004e8c:	20000234 	.word	0x20000234

08004e90 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004e94:	4802      	ldr	r0, [pc, #8]	; (8004ea0 <FDCAN1_IT0_IRQHandler+0x10>)
 8004e96:	f002 fe67 	bl	8007b68 <HAL_FDCAN_IRQHandler>
//  else{
//	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
//	  controller.timeout = 0;					// Reset timeout counter
//  }
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004e9a:	bf00      	nop
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	200003cc 	.word	0x200003cc

08004ea4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	HAL_GPIO_WritePin(PWM_PIN, GPIO_PIN_RESET );	// Useful for timing
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004eb2:	f003 fc51 	bl	8008758 <HAL_GPIO_WritePin>
	analog_sample(&controller);
 8004eb6:	480f      	ldr	r0, [pc, #60]	; (8004ef4 <TIM1_UP_TIM16_IRQHandler+0x50>)
 8004eb8:	f7fd f93c 	bl	8002134 <analog_sample>

	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 8004ebc:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8004ef8 <TIM1_UP_TIM16_IRQHandler+0x54>
 8004ec0:	480e      	ldr	r0, [pc, #56]	; (8004efc <TIM1_UP_TIM16_IRQHandler+0x58>)
 8004ec2:	f7ff fdaf 	bl	8004a24 <ps_sample>
//	  HAL_GPIO_WritePin(LoopTime, GPIO_PIN_SET );

	/* Run Finite State Machine */
	run_fsm(&state);
 8004ec6:	480e      	ldr	r0, [pc, #56]	; (8004f00 <TIM1_UP_TIM16_IRQHandler+0x5c>)
 8004ec8:	f7fd ff7c 	bl	8002dc4 <run_fsm>

	/* increment loop count */
	controller.loop_count++;
 8004ecc:	4b09      	ldr	r3, [pc, #36]	; (8004ef4 <TIM1_UP_TIM16_IRQHandler+0x50>)
 8004ece:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	4a07      	ldr	r2, [pc, #28]	; (8004ef4 <TIM1_UP_TIM16_IRQHandler+0x50>)
 8004ed6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004eda:	480a      	ldr	r0, [pc, #40]	; (8004f04 <TIM1_UP_TIM16_IRQHandler+0x60>)
 8004edc:	f005 fcc4 	bl	800a868 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
	HAL_GPIO_WritePin(PWM_PIN, GPIO_PIN_SET );	// Useful for timing
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ee6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004eea:	f003 fc35 	bl	8008758 <HAL_GPIO_WritePin>

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004eee:	bf00      	nop
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000778 	.word	0x20000778
 8004ef8:	3851b717 	.word	0x3851b717
 8004efc:	20000480 	.word	0x20000480
 8004f00:	20000668 	.word	0x20000668
 8004f04:	200053e4 	.word	0x200053e4

08004f08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004f0e:	4809      	ldr	r0, [pc, #36]	; (8004f34 <USART2_IRQHandler+0x2c>)
 8004f10:	f007 f82a 	bl	800bf68 <HAL_UART_IRQHandler>

  char c = Serial2RxBuffer[0];
 8004f14:	4b08      	ldr	r3, [pc, #32]	; (8004f38 <USART2_IRQHandler+0x30>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	71fb      	strb	r3, [r7, #7]
  update_fsm(&state, c);
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4807      	ldr	r0, [pc, #28]	; (8004f3c <USART2_IRQHandler+0x34>)
 8004f20:	f7fe f8ca 	bl	80030b8 <update_fsm>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004f24:	4803      	ldr	r0, [pc, #12]	; (8004f34 <USART2_IRQHandler+0x2c>)
 8004f26:	f007 f81f 	bl	800bf68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004f2a:	bf00      	nop
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20005430 	.word	0x20005430
 8004f38:	20000664 	.word	0x20000664
 8004f3c:	20000668 	.word	0x20000668

08004f40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
	return 1;
 8004f44:	2301      	movs	r3, #1
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <_kill>:

int _kill(int pid, int sig)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004f5a:	f008 fb8b 	bl	800d674 <__errno>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2216      	movs	r2, #22
 8004f62:	601a      	str	r2, [r3, #0]
	return -1;
 8004f64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <_exit>:

void _exit (int status)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004f78:	f04f 31ff 	mov.w	r1, #4294967295
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7ff ffe7 	bl	8004f50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004f82:	e7fe      	b.n	8004f82 <_exit+0x12>

08004f84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	e00a      	b.n	8004fac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004f96:	f3af 8000 	nop.w
 8004f9a:	4601      	mov	r1, r0
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	60ba      	str	r2, [r7, #8]
 8004fa2:	b2ca      	uxtb	r2, r1
 8004fa4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	dbf0      	blt.n	8004f96 <_read+0x12>
	}

return len;
 8004fb4:	687b      	ldr	r3, [r7, #4]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b086      	sub	sp, #24
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	e009      	b.n	8004fe4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	60ba      	str	r2, [r7, #8]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fa8b 	bl	80054f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	dbf1      	blt.n	8004fd0 <_write+0x12>
	}
	return len;
 8004fec:	687b      	ldr	r3, [r7, #4]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <_close>:

int _close(int file)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
	return -1;
 8004ffe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800501e:	605a      	str	r2, [r3, #4]
	return 0;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <_isatty>:

int _isatty(int file)
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
	return 1;
 8005036:	2301      	movs	r3, #1
}
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
	return 0;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
	...

08005060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005068:	4a14      	ldr	r2, [pc, #80]	; (80050bc <_sbrk+0x5c>)
 800506a:	4b15      	ldr	r3, [pc, #84]	; (80050c0 <_sbrk+0x60>)
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005074:	4b13      	ldr	r3, [pc, #76]	; (80050c4 <_sbrk+0x64>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d102      	bne.n	8005082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800507c:	4b11      	ldr	r3, [pc, #68]	; (80050c4 <_sbrk+0x64>)
 800507e:	4a12      	ldr	r2, [pc, #72]	; (80050c8 <_sbrk+0x68>)
 8005080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005082:	4b10      	ldr	r3, [pc, #64]	; (80050c4 <_sbrk+0x64>)
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4413      	add	r3, r2
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	429a      	cmp	r2, r3
 800508e:	d207      	bcs.n	80050a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005090:	f008 faf0 	bl	800d674 <__errno>
 8005094:	4603      	mov	r3, r0
 8005096:	220c      	movs	r2, #12
 8005098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800509a:	f04f 33ff 	mov.w	r3, #4294967295
 800509e:	e009      	b.n	80050b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050a0:	4b08      	ldr	r3, [pc, #32]	; (80050c4 <_sbrk+0x64>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050a6:	4b07      	ldr	r3, [pc, #28]	; (80050c4 <_sbrk+0x64>)
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4413      	add	r3, r2
 80050ae:	4a05      	ldr	r2, [pc, #20]	; (80050c4 <_sbrk+0x64>)
 80050b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050b2:	68fb      	ldr	r3, [r7, #12]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	20008000 	.word	0x20008000
 80050c0:	00000400 	.word	0x00000400
 80050c4:	20000228 	.word	0x20000228
 80050c8:	200054d8 	.word	0x200054d8

080050cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80050d0:	4b06      	ldr	r3, [pc, #24]	; (80050ec <SystemInit+0x20>)
 80050d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d6:	4a05      	ldr	r2, [pc, #20]	; (80050ec <SystemInit+0x20>)
 80050d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050e0:	bf00      	nop
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	e000ed00 	.word	0xe000ed00

080050f0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b09c      	sub	sp, #112	; 0x70
 80050f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	605a      	str	r2, [r3, #4]
 8005100:	609a      	str	r2, [r3, #8]
 8005102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005104:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	605a      	str	r2, [r3, #4]
 800510e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005110:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	605a      	str	r2, [r3, #4]
 800511a:	609a      	str	r2, [r3, #8]
 800511c:	60da      	str	r2, [r3, #12]
 800511e:	611a      	str	r2, [r3, #16]
 8005120:	615a      	str	r2, [r3, #20]
 8005122:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005124:	1d3b      	adds	r3, r7, #4
 8005126:	2234      	movs	r2, #52	; 0x34
 8005128:	2100      	movs	r1, #0
 800512a:	4618      	mov	r0, r3
 800512c:	f008 fada 	bl	800d6e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005130:	4b54      	ldr	r3, [pc, #336]	; (8005284 <MX_TIM1_Init+0x194>)
 8005132:	4a55      	ldr	r2, [pc, #340]	; (8005288 <MX_TIM1_Init+0x198>)
 8005134:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005136:	4b53      	ldr	r3, [pc, #332]	; (8005284 <MX_TIM1_Init+0x194>)
 8005138:	2200      	movs	r2, #0
 800513a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800513c:	4b51      	ldr	r3, [pc, #324]	; (8005284 <MX_TIM1_Init+0x194>)
 800513e:	2220      	movs	r2, #32
 8005140:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4200;
 8005142:	4b50      	ldr	r3, [pc, #320]	; (8005284 <MX_TIM1_Init+0x194>)
 8005144:	f241 0268 	movw	r2, #4200	; 0x1068
 8005148:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800514a:	4b4e      	ldr	r3, [pc, #312]	; (8005284 <MX_TIM1_Init+0x194>)
 800514c:	2200      	movs	r2, #0
 800514e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8005150:	4b4c      	ldr	r3, [pc, #304]	; (8005284 <MX_TIM1_Init+0x194>)
 8005152:	2201      	movs	r2, #1
 8005154:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005156:	4b4b      	ldr	r3, [pc, #300]	; (8005284 <MX_TIM1_Init+0x194>)
 8005158:	2280      	movs	r2, #128	; 0x80
 800515a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800515c:	4849      	ldr	r0, [pc, #292]	; (8005284 <MX_TIM1_Init+0x194>)
 800515e:	f005 f95f 	bl	800a420 <HAL_TIM_Base_Init>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005168:	f7ff f9c3 	bl	80044f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800516c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005170:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005172:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005176:	4619      	mov	r1, r3
 8005178:	4842      	ldr	r0, [pc, #264]	; (8005284 <MX_TIM1_Init+0x194>)
 800517a:	f005 fe05 	bl	800ad88 <HAL_TIM_ConfigClockSource>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005184:	f7ff f9b5 	bl	80044f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005188:	483e      	ldr	r0, [pc, #248]	; (8005284 <MX_TIM1_Init+0x194>)
 800518a:	f005 fa0b 	bl	800a5a4 <HAL_TIM_PWM_Init>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005194:	f7ff f9ad 	bl	80044f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005198:	2320      	movs	r3, #32
 800519a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800519c:	2300      	movs	r3, #0
 800519e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051a0:	2300      	movs	r3, #0
 80051a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80051a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80051a8:	4619      	mov	r1, r3
 80051aa:	4836      	ldr	r0, [pc, #216]	; (8005284 <MX_TIM1_Init+0x194>)
 80051ac:	f006 fc10 	bl	800b9d0 <HAL_TIMEx_MasterConfigSynchronization>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80051b6:	f7ff f99c 	bl	80044f2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80051ba:	2370      	movs	r3, #112	; 0x70
 80051bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80051be:	2300      	movs	r3, #0
 80051c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80051c2:	2302      	movs	r3, #2
 80051c4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80051c6:	2308      	movs	r3, #8
 80051c8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80051ca:	2304      	movs	r3, #4
 80051cc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80051ce:	2300      	movs	r3, #0
 80051d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80051d2:	2300      	movs	r3, #0
 80051d4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80051d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80051da:	2200      	movs	r2, #0
 80051dc:	4619      	mov	r1, r3
 80051de:	4829      	ldr	r0, [pc, #164]	; (8005284 <MX_TIM1_Init+0x194>)
 80051e0:	f005 fcc2 	bl	800ab68 <HAL_TIM_PWM_ConfigChannel>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80051ea:	f7ff f982 	bl	80044f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80051ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80051f2:	2204      	movs	r2, #4
 80051f4:	4619      	mov	r1, r3
 80051f6:	4823      	ldr	r0, [pc, #140]	; (8005284 <MX_TIM1_Init+0x194>)
 80051f8:	f005 fcb6 	bl	800ab68 <HAL_TIM_PWM_ConfigChannel>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8005202:	f7ff f976 	bl	80044f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005206:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800520a:	2208      	movs	r2, #8
 800520c:	4619      	mov	r1, r3
 800520e:	481d      	ldr	r0, [pc, #116]	; (8005284 <MX_TIM1_Init+0x194>)
 8005210:	f005 fcaa 	bl	800ab68 <HAL_TIM_PWM_ConfigChannel>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800521a:	f7ff f96a 	bl	80044f2 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 800521e:	4819      	ldr	r0, [pc, #100]	; (8005284 <MX_TIM1_Init+0x194>)
 8005220:	f006 fcf8 	bl	800bc14 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8005224:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005228:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800522a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800522e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005230:	2300      	movs	r3, #0
 8005232:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 8005234:	2364      	movs	r3, #100	; 0x64
 8005236:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800523c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005240:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005242:	2300      	movs	r3, #0
 8005244:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005246:	2300      	movs	r3, #0
 8005248:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800524a:	2300      	movs	r3, #0
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800524e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005252:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005258:	2300      	movs	r3, #0
 800525a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800525c:	2300      	movs	r3, #0
 800525e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005260:	1d3b      	adds	r3, r7, #4
 8005262:	4619      	mov	r1, r3
 8005264:	4807      	ldr	r0, [pc, #28]	; (8005284 <MX_TIM1_Init+0x194>)
 8005266:	f006 fc35 	bl	800bad4 <HAL_TIMEx_ConfigBreakDeadTime>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8005270:	f7ff f93f 	bl	80044f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005274:	4803      	ldr	r0, [pc, #12]	; (8005284 <MX_TIM1_Init+0x194>)
 8005276:	f000 f82f 	bl	80052d8 <HAL_TIM_MspPostInit>

}
 800527a:	bf00      	nop
 800527c:	3770      	adds	r7, #112	; 0x70
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	200053e4 	.word	0x200053e4
 8005288:	40012c00 	.word	0x40012c00

0800528c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a0d      	ldr	r2, [pc, #52]	; (80052d0 <HAL_TIM_Base_MspInit+0x44>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d113      	bne.n	80052c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800529e:	4b0d      	ldr	r3, [pc, #52]	; (80052d4 <HAL_TIM_Base_MspInit+0x48>)
 80052a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a2:	4a0c      	ldr	r2, [pc, #48]	; (80052d4 <HAL_TIM_Base_MspInit+0x48>)
 80052a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052a8:	6613      	str	r3, [r2, #96]	; 0x60
 80052aa:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <HAL_TIM_Base_MspInit+0x48>)
 80052ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80052b6:	2200      	movs	r2, #0
 80052b8:	2100      	movs	r1, #0
 80052ba:	2019      	movs	r0, #25
 80052bc:	f001 ff93 	bl	80071e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80052c0:	2019      	movs	r0, #25
 80052c2:	f001 ffaa 	bl	800721a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80052c6:	bf00      	nop
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40012c00 	.word	0x40012c00
 80052d4:	40021000 	.word	0x40021000

080052d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08a      	sub	sp, #40	; 0x28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052e0:	f107 0314 	add.w	r3, r7, #20
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	605a      	str	r2, [r3, #4]
 80052ea:	609a      	str	r2, [r3, #8]
 80052ec:	60da      	str	r2, [r3, #12]
 80052ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a2f      	ldr	r2, [pc, #188]	; (80053b4 <HAL_TIM_MspPostInit+0xdc>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d157      	bne.n	80053aa <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052fa:	4b2f      	ldr	r3, [pc, #188]	; (80053b8 <HAL_TIM_MspPostInit+0xe0>)
 80052fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052fe:	4a2e      	ldr	r2, [pc, #184]	; (80053b8 <HAL_TIM_MspPostInit+0xe0>)
 8005300:	f043 0304 	orr.w	r3, r3, #4
 8005304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005306:	4b2c      	ldr	r3, [pc, #176]	; (80053b8 <HAL_TIM_MspPostInit+0xe0>)
 8005308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530a:	f003 0304 	and.w	r3, r3, #4
 800530e:	613b      	str	r3, [r7, #16]
 8005310:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005312:	4b29      	ldr	r3, [pc, #164]	; (80053b8 <HAL_TIM_MspPostInit+0xe0>)
 8005314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005316:	4a28      	ldr	r2, [pc, #160]	; (80053b8 <HAL_TIM_MspPostInit+0xe0>)
 8005318:	f043 0302 	orr.w	r3, r3, #2
 800531c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800531e:	4b26      	ldr	r3, [pc, #152]	; (80053b8 <HAL_TIM_MspPostInit+0xe0>)
 8005320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800532a:	4b23      	ldr	r3, [pc, #140]	; (80053b8 <HAL_TIM_MspPostInit+0xe0>)
 800532c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800532e:	4a22      	ldr	r2, [pc, #136]	; (80053b8 <HAL_TIM_MspPostInit+0xe0>)
 8005330:	f043 0301 	orr.w	r3, r3, #1
 8005334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005336:	4b20      	ldr	r3, [pc, #128]	; (80053b8 <HAL_TIM_MspPostInit+0xe0>)
 8005338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	60bb      	str	r3, [r7, #8]
 8005340:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005342:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005348:	2302      	movs	r3, #2
 800534a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800534c:	2300      	movs	r3, #0
 800534e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005350:	2300      	movs	r3, #0
 8005352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8005354:	2304      	movs	r3, #4
 8005356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005358:	f107 0314 	add.w	r3, r7, #20
 800535c:	4619      	mov	r1, r3
 800535e:	4817      	ldr	r0, [pc, #92]	; (80053bc <HAL_TIM_MspPostInit+0xe4>)
 8005360:	f003 f878 	bl	8008454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005364:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800536a:	2302      	movs	r3, #2
 800536c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800536e:	2300      	movs	r3, #0
 8005370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005372:	2300      	movs	r3, #0
 8005374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8005376:	2304      	movs	r3, #4
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800537a:	f107 0314 	add.w	r3, r7, #20
 800537e:	4619      	mov	r1, r3
 8005380:	480f      	ldr	r0, [pc, #60]	; (80053c0 <HAL_TIM_MspPostInit+0xe8>)
 8005382:	f003 f867 	bl	8008454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8005386:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 800538a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800538c:	2302      	movs	r3, #2
 800538e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005390:	2300      	movs	r3, #0
 8005392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005394:	2300      	movs	r3, #0
 8005396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005398:	2306      	movs	r3, #6
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800539c:	f107 0314 	add.w	r3, r7, #20
 80053a0:	4619      	mov	r1, r3
 80053a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053a6:	f003 f855 	bl	8008454 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80053aa:	bf00      	nop
 80053ac:	3728      	adds	r7, #40	; 0x28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40012c00 	.word	0x40012c00
 80053b8:	40021000 	.word	0x40021000
 80053bc:	48000800 	.word	0x48000800
 80053c0:	48000400 	.word	0x48000400

080053c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80053c8:	4b22      	ldr	r3, [pc, #136]	; (8005454 <MX_USART2_UART_Init+0x90>)
 80053ca:	4a23      	ldr	r2, [pc, #140]	; (8005458 <MX_USART2_UART_Init+0x94>)
 80053cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80053ce:	4b21      	ldr	r3, [pc, #132]	; (8005454 <MX_USART2_UART_Init+0x90>)
 80053d0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80053d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80053d6:	4b1f      	ldr	r3, [pc, #124]	; (8005454 <MX_USART2_UART_Init+0x90>)
 80053d8:	2200      	movs	r2, #0
 80053da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80053dc:	4b1d      	ldr	r3, [pc, #116]	; (8005454 <MX_USART2_UART_Init+0x90>)
 80053de:	2200      	movs	r2, #0
 80053e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80053e2:	4b1c      	ldr	r3, [pc, #112]	; (8005454 <MX_USART2_UART_Init+0x90>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80053e8:	4b1a      	ldr	r3, [pc, #104]	; (8005454 <MX_USART2_UART_Init+0x90>)
 80053ea:	220c      	movs	r2, #12
 80053ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053ee:	4b19      	ldr	r3, [pc, #100]	; (8005454 <MX_USART2_UART_Init+0x90>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80053f4:	4b17      	ldr	r3, [pc, #92]	; (8005454 <MX_USART2_UART_Init+0x90>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80053fa:	4b16      	ldr	r3, [pc, #88]	; (8005454 <MX_USART2_UART_Init+0x90>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005400:	4b14      	ldr	r3, [pc, #80]	; (8005454 <MX_USART2_UART_Init+0x90>)
 8005402:	2200      	movs	r2, #0
 8005404:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005406:	4b13      	ldr	r3, [pc, #76]	; (8005454 <MX_USART2_UART_Init+0x90>)
 8005408:	2200      	movs	r2, #0
 800540a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800540c:	4811      	ldr	r0, [pc, #68]	; (8005454 <MX_USART2_UART_Init+0x90>)
 800540e:	f006 fc7f 	bl	800bd10 <HAL_UART_Init>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005418:	f7ff f86b 	bl	80044f2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800541c:	2100      	movs	r1, #0
 800541e:	480d      	ldr	r0, [pc, #52]	; (8005454 <MX_USART2_UART_Init+0x90>)
 8005420:	f008 f855 	bl	800d4ce <HAL_UARTEx_SetTxFifoThreshold>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800542a:	f7ff f862 	bl	80044f2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800542e:	2100      	movs	r1, #0
 8005430:	4808      	ldr	r0, [pc, #32]	; (8005454 <MX_USART2_UART_Init+0x90>)
 8005432:	f008 f88a 	bl	800d54a <HAL_UARTEx_SetRxFifoThreshold>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800543c:	f7ff f859 	bl	80044f2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005440:	4804      	ldr	r0, [pc, #16]	; (8005454 <MX_USART2_UART_Init+0x90>)
 8005442:	f008 f80b 	bl	800d45c <HAL_UARTEx_DisableFifoMode>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800544c:	f7ff f851 	bl	80044f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005450:	bf00      	nop
 8005452:	bd80      	pop	{r7, pc}
 8005454:	20005430 	.word	0x20005430
 8005458:	40004400 	.word	0x40004400

0800545c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08a      	sub	sp, #40	; 0x28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005464:	f107 0314 	add.w	r3, r7, #20
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	605a      	str	r2, [r3, #4]
 800546e:	609a      	str	r2, [r3, #8]
 8005470:	60da      	str	r2, [r3, #12]
 8005472:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1b      	ldr	r2, [pc, #108]	; (80054e8 <HAL_UART_MspInit+0x8c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d12f      	bne.n	80054de <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800547e:	4b1b      	ldr	r3, [pc, #108]	; (80054ec <HAL_UART_MspInit+0x90>)
 8005480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005482:	4a1a      	ldr	r2, [pc, #104]	; (80054ec <HAL_UART_MspInit+0x90>)
 8005484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005488:	6593      	str	r3, [r2, #88]	; 0x58
 800548a:	4b18      	ldr	r3, [pc, #96]	; (80054ec <HAL_UART_MspInit+0x90>)
 800548c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005492:	613b      	str	r3, [r7, #16]
 8005494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005496:	4b15      	ldr	r3, [pc, #84]	; (80054ec <HAL_UART_MspInit+0x90>)
 8005498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800549a:	4a14      	ldr	r2, [pc, #80]	; (80054ec <HAL_UART_MspInit+0x90>)
 800549c:	f043 0302 	orr.w	r3, r3, #2
 80054a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054a2:	4b12      	ldr	r3, [pc, #72]	; (80054ec <HAL_UART_MspInit+0x90>)
 80054a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80054ae:	2318      	movs	r3, #24
 80054b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b2:	2302      	movs	r3, #2
 80054b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054ba:	2300      	movs	r3, #0
 80054bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80054be:	2307      	movs	r3, #7
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054c2:	f107 0314 	add.w	r3, r7, #20
 80054c6:	4619      	mov	r1, r3
 80054c8:	4809      	ldr	r0, [pc, #36]	; (80054f0 <HAL_UART_MspInit+0x94>)
 80054ca:	f002 ffc3 	bl	8008454 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80054ce:	2200      	movs	r2, #0
 80054d0:	2100      	movs	r1, #0
 80054d2:	2026      	movs	r0, #38	; 0x26
 80054d4:	f001 fe87 	bl	80071e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80054d8:	2026      	movs	r0, #38	; 0x26
 80054da:	f001 fe9e 	bl	800721a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80054de:	bf00      	nop
 80054e0:	3728      	adds	r7, #40	; 0x28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	40004400 	.word	0x40004400
 80054ec:	40021000 	.word	0x40021000
 80054f0:	48000400 	.word	0x48000400

080054f4 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 80054fc:	1d39      	adds	r1, r7, #4
 80054fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005502:	2201      	movs	r2, #1
 8005504:	4803      	ldr	r0, [pc, #12]	; (8005514 <__io_putchar+0x20>)
 8005506:	f006 fc53 	bl	800bdb0 <HAL_UART_Transmit>
return 0;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	20005430 	.word	0x20005430

08005518 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8005520:	2201      	movs	r2, #1
 8005522:	4904      	ldr	r1, [pc, #16]	; (8005534 <HAL_UART_RxCpltCallback+0x1c>)
 8005524:	4804      	ldr	r0, [pc, #16]	; (8005538 <HAL_UART_RxCpltCallback+0x20>)
 8005526:	f006 fcd9 	bl	800bedc <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800552a:	bf00      	nop
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20000664 	.word	0x20000664
 8005538:	20005430 	.word	0x20005430

0800553c <store_eeprom_regs>:

#include "user_config.h"
#include "eeprom.h"

void store_eeprom_regs()
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
	eeprom_store(__float_reg, FLOAT_REG_LEN, __int_reg, INT_REG_LEN);
 8005540:	2380      	movs	r3, #128	; 0x80
 8005542:	4a03      	ldr	r2, [pc, #12]	; (8005550 <store_eeprom_regs+0x14>)
 8005544:	2140      	movs	r1, #64	; 0x40
 8005546:	4803      	ldr	r0, [pc, #12]	; (8005554 <store_eeprom_regs+0x18>)
 8005548:	f7fc fbd6 	bl	8001cf8 <eeprom_store>
}
 800554c:	bf00      	nop
 800554e:	bd80      	pop	{r7, pc}
 8005550:	20004d8c 	.word	0x20004d8c
 8005554:	20000678 	.word	0x20000678

08005558 <load_eeprom_regs>:

void load_eeprom_regs()
{
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
	eeprom_restore(__float_reg, FLOAT_REG_LEN, __int_reg, INT_REG_LEN);
 800555c:	2380      	movs	r3, #128	; 0x80
 800555e:	4a03      	ldr	r2, [pc, #12]	; (800556c <load_eeprom_regs+0x14>)
 8005560:	2140      	movs	r1, #64	; 0x40
 8005562:	4803      	ldr	r0, [pc, #12]	; (8005570 <load_eeprom_regs+0x18>)
 8005564:	f7fc fb44 	bl	8001bf0 <eeprom_restore>
}
 8005568:	bf00      	nop
 800556a:	bd80      	pop	{r7, pc}
 800556c:	20004d8c 	.word	0x20004d8c
 8005570:	20000678 	.word	0x20000678

08005574 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005574:	480d      	ldr	r0, [pc, #52]	; (80055ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005576:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005578:	480d      	ldr	r0, [pc, #52]	; (80055b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800557a:	490e      	ldr	r1, [pc, #56]	; (80055b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800557c:	4a0e      	ldr	r2, [pc, #56]	; (80055b8 <LoopForever+0xe>)
  movs r3, #0
 800557e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005580:	e002      	b.n	8005588 <LoopCopyDataInit>

08005582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005586:	3304      	adds	r3, #4

08005588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800558a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800558c:	d3f9      	bcc.n	8005582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800558e:	4a0b      	ldr	r2, [pc, #44]	; (80055bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8005590:	4c0b      	ldr	r4, [pc, #44]	; (80055c0 <LoopForever+0x16>)
  movs r3, #0
 8005592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005594:	e001      	b.n	800559a <LoopFillZerobss>

08005596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005598:	3204      	adds	r2, #4

0800559a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800559a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800559c:	d3fb      	bcc.n	8005596 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800559e:	f7ff fd95 	bl	80050cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055a2:	f008 f86d 	bl	800d680 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80055a6:	f7fe fc6f 	bl	8003e88 <main>

080055aa <LoopForever>:

LoopForever:
    b LoopForever
 80055aa:	e7fe      	b.n	80055aa <LoopForever>
  ldr   r0, =_estack
 80055ac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80055b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055b4:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80055b8:	08013408 	.word	0x08013408
  ldr r2, =_sbss
 80055bc:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80055c0:	200054d4 	.word	0x200054d4

080055c4 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80055c4:	e7fe      	b.n	80055c4 <COMP1_2_3_IRQHandler>

080055c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b082      	sub	sp, #8
 80055ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055d0:	2003      	movs	r0, #3
 80055d2:	f001 fdfd 	bl	80071d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80055d6:	2000      	movs	r0, #0
 80055d8:	f000 f80e 	bl	80055f8 <HAL_InitTick>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	71fb      	strb	r3, [r7, #7]
 80055e6:	e001      	b.n	80055ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80055e8:	f7ff fbe2 	bl	8004db0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80055ec:	79fb      	ldrb	r3, [r7, #7]

}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
	...

080055f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005604:	4b16      	ldr	r3, [pc, #88]	; (8005660 <HAL_InitTick+0x68>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d022      	beq.n	8005652 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800560c:	4b15      	ldr	r3, [pc, #84]	; (8005664 <HAL_InitTick+0x6c>)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	4b13      	ldr	r3, [pc, #76]	; (8005660 <HAL_InitTick+0x68>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005618:	fbb1 f3f3 	udiv	r3, r1, r3
 800561c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005620:	4618      	mov	r0, r3
 8005622:	f001 fe08 	bl	8007236 <HAL_SYSTICK_Config>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10f      	bne.n	800564c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b0f      	cmp	r3, #15
 8005630:	d809      	bhi.n	8005646 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005632:	2200      	movs	r2, #0
 8005634:	6879      	ldr	r1, [r7, #4]
 8005636:	f04f 30ff 	mov.w	r0, #4294967295
 800563a:	f001 fdd4 	bl	80071e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800563e:	4a0a      	ldr	r2, [pc, #40]	; (8005668 <HAL_InitTick+0x70>)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	e007      	b.n	8005656 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	73fb      	strb	r3, [r7, #15]
 800564a:	e004      	b.n	8005656 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	73fb      	strb	r3, [r7, #15]
 8005650:	e001      	b.n	8005656 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005656:	7bfb      	ldrb	r3, [r7, #15]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	20000008 	.word	0x20000008
 8005664:	20000000 	.word	0x20000000
 8005668:	20000004 	.word	0x20000004

0800566c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005670:	4b05      	ldr	r3, [pc, #20]	; (8005688 <HAL_IncTick+0x1c>)
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	4b05      	ldr	r3, [pc, #20]	; (800568c <HAL_IncTick+0x20>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4413      	add	r3, r2
 800567a:	4a03      	ldr	r2, [pc, #12]	; (8005688 <HAL_IncTick+0x1c>)
 800567c:	6013      	str	r3, [r2, #0]
}
 800567e:	bf00      	nop
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	200054c0 	.word	0x200054c0
 800568c:	20000008 	.word	0x20000008

08005690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  return uwTick;
 8005694:	4b03      	ldr	r3, [pc, #12]	; (80056a4 <HAL_GetTick+0x14>)
 8005696:	681b      	ldr	r3, [r3, #0]
}
 8005698:	4618      	mov	r0, r3
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	200054c0 	.word	0x200054c0

080056a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056b0:	f7ff ffee 	bl	8005690 <HAL_GetTick>
 80056b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c0:	d004      	beq.n	80056cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80056c2:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <HAL_Delay+0x40>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4413      	add	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80056cc:	bf00      	nop
 80056ce:	f7ff ffdf 	bl	8005690 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d8f7      	bhi.n	80056ce <HAL_Delay+0x26>
  {
  }
}
 80056de:	bf00      	nop
 80056e0:	bf00      	nop
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	20000008 	.word	0x20000008

080056ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	431a      	orrs	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	609a      	str	r2, [r3, #8]
}
 8005706:	bf00      	nop
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	609a      	str	r2, [r3, #8]
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005748:	4618      	mov	r0, r3
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	3360      	adds	r3, #96	; 0x60
 8005766:	461a      	mov	r2, r3
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	4b08      	ldr	r3, [pc, #32]	; (8005798 <LL_ADC_SetOffset+0x44>)
 8005776:	4013      	ands	r3, r2
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	4313      	orrs	r3, r2
 8005784:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800578c:	bf00      	nop
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	03fff000 	.word	0x03fff000

0800579c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3360      	adds	r3, #96	; 0x60
 80057aa:	461a      	mov	r2, r3
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3360      	adds	r3, #96	; 0x60
 80057d8:	461a      	mov	r2, r3
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	431a      	orrs	r2, r3
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80057f2:	bf00      	nop
 80057f4:	371c      	adds	r7, #28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80057fe:	b480      	push	{r7}
 8005800:	b087      	sub	sp, #28
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3360      	adds	r3, #96	; 0x60
 800580e:	461a      	mov	r2, r3
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	431a      	orrs	r2, r3
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005828:	bf00      	nop
 800582a:	371c      	adds	r7, #28
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3360      	adds	r3, #96	; 0x60
 8005844:	461a      	mov	r2, r3
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	431a      	orrs	r2, r3
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	615a      	str	r2, [r3, #20]
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80058a4:	2301      	movs	r3, #1
 80058a6:	e000      	b.n	80058aa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b087      	sub	sp, #28
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	60f8      	str	r0, [r7, #12]
 80058be:	60b9      	str	r1, [r7, #8]
 80058c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3330      	adds	r3, #48	; 0x30
 80058c6:	461a      	mov	r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	0a1b      	lsrs	r3, r3, #8
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	f003 030c 	and.w	r3, r3, #12
 80058d2:	4413      	add	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f003 031f 	and.w	r3, r3, #31
 80058e0:	211f      	movs	r1, #31
 80058e2:	fa01 f303 	lsl.w	r3, r1, r3
 80058e6:	43db      	mvns	r3, r3
 80058e8:	401a      	ands	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	0e9b      	lsrs	r3, r3, #26
 80058ee:	f003 011f 	and.w	r1, r3, #31
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f003 031f 	and.w	r3, r3, #31
 80058f8:	fa01 f303 	lsl.w	r3, r1, r3
 80058fc:	431a      	orrs	r2, r3
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005902:	bf00      	nop
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800591a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	3314      	adds	r3, #20
 8005944:	461a      	mov	r2, r3
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	0e5b      	lsrs	r3, r3, #25
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	4413      	add	r3, r2
 8005952:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	0d1b      	lsrs	r3, r3, #20
 800595c:	f003 031f 	and.w	r3, r3, #31
 8005960:	2107      	movs	r1, #7
 8005962:	fa01 f303 	lsl.w	r3, r1, r3
 8005966:	43db      	mvns	r3, r3
 8005968:	401a      	ands	r2, r3
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	0d1b      	lsrs	r3, r3, #20
 800596e:	f003 031f 	and.w	r3, r3, #31
 8005972:	6879      	ldr	r1, [r7, #4]
 8005974:	fa01 f303 	lsl.w	r3, r1, r3
 8005978:	431a      	orrs	r2, r3
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800597e:	bf00      	nop
 8005980:	371c      	adds	r7, #28
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
	...

0800598c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059a4:	43db      	mvns	r3, r3
 80059a6:	401a      	ands	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f003 0318 	and.w	r3, r3, #24
 80059ae:	4908      	ldr	r1, [pc, #32]	; (80059d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80059b0:	40d9      	lsrs	r1, r3
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	400b      	ands	r3, r1
 80059b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ba:	431a      	orrs	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80059c2:	bf00      	nop
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	0007ffff 	.word	0x0007ffff

080059d4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f003 031f 	and.w	r3, r3, #31
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005a1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6093      	str	r3, [r2, #8]
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a44:	d101      	bne.n	8005a4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005a46:	2301      	movs	r3, #1
 8005a48:	e000      	b.n	8005a4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005a68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a94:	d101      	bne.n	8005a9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ab8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005abc:	f043 0201 	orr.w	r2, r3, #1
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <LL_ADC_IsEnabled+0x18>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e000      	b.n	8005aea <LL_ADC_IsEnabled+0x1a>
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b06:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b0a:	f043 0204 	orr.w	r2, r3, #4
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 0304 	and.w	r3, r3, #4
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d101      	bne.n	8005b36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e000      	b.n	8005b38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d101      	bne.n	8005b5c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e000      	b.n	8005b5e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
	...

08005b6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005b6c:	b590      	push	{r4, r7, lr}
 8005b6e:	b089      	sub	sp, #36	; 0x24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e16d      	b.n	8005e62 <HAL_ADC_Init+0x2f6>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d109      	bne.n	8005ba8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7fb fb4f 	bl	8001238 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7ff ff3f 	bl	8005a30 <LL_ADC_IsDeepPowerDownEnabled>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d004      	beq.n	8005bc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff ff25 	bl	8005a0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7ff ff5a 	bl	8005a80 <LL_ADC_IsInternalRegulatorEnabled>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d115      	bne.n	8005bfe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7ff ff3e 	bl	8005a58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005bdc:	4ba3      	ldr	r3, [pc, #652]	; (8005e6c <HAL_ADC_Init+0x300>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	099b      	lsrs	r3, r3, #6
 8005be2:	4aa3      	ldr	r2, [pc, #652]	; (8005e70 <HAL_ADC_Init+0x304>)
 8005be4:	fba2 2303 	umull	r2, r3, r2, r3
 8005be8:	099b      	lsrs	r3, r3, #6
 8005bea:	3301      	adds	r3, #1
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005bf0:	e002      	b.n	8005bf8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1f9      	bne.n	8005bf2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7ff ff3c 	bl	8005a80 <LL_ADC_IsInternalRegulatorEnabled>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10d      	bne.n	8005c2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c12:	f043 0210 	orr.w	r2, r3, #16
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c1e:	f043 0201 	orr.w	r2, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff ff75 	bl	8005b1e <LL_ADC_REG_IsConversionOngoing>
 8005c34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c3a:	f003 0310 	and.w	r3, r3, #16
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f040 8106 	bne.w	8005e50 <HAL_ADC_Init+0x2e4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f040 8102 	bne.w	8005e50 <HAL_ADC_Init+0x2e4>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c50:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005c54:	f043 0202 	orr.w	r2, r3, #2
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff ff35 	bl	8005ad0 <LL_ADC_IsEnabled>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d111      	bne.n	8005c90 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c6c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005c70:	f7ff ff2e 	bl	8005ad0 <LL_ADC_IsEnabled>
 8005c74:	4604      	mov	r4, r0
 8005c76:	487f      	ldr	r0, [pc, #508]	; (8005e74 <HAL_ADC_Init+0x308>)
 8005c78:	f7ff ff2a 	bl	8005ad0 <LL_ADC_IsEnabled>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	4323      	orrs	r3, r4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d105      	bne.n	8005c90 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	4619      	mov	r1, r3
 8005c8a:	487b      	ldr	r0, [pc, #492]	; (8005e78 <HAL_ADC_Init+0x30c>)
 8005c8c:	f7ff fd2e 	bl	80056ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	7f5b      	ldrb	r3, [r3, #29]
 8005c94:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c9a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005ca0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005ca6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d106      	bne.n	8005ccc <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	045b      	lsls	r3, r3, #17
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d009      	beq.n	8005ce8 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	4b63      	ldr	r3, [pc, #396]	; (8005e7c <HAL_ADC_Init+0x310>)
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	6812      	ldr	r2, [r2, #0]
 8005cf6:	69b9      	ldr	r1, [r7, #24]
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff ff01 	bl	8005b1e <LL_ADC_REG_IsConversionOngoing>
 8005d1c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff ff0e 	bl	8005b44 <LL_ADC_INJ_IsConversionOngoing>
 8005d28:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d16d      	bne.n	8005e0c <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d16a      	bne.n	8005e0c <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005d3a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d42:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005d44:	4313      	orrs	r3, r2
 8005d46:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d52:	f023 0302 	bic.w	r3, r3, #2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6812      	ldr	r2, [r2, #0]
 8005d5a:	69b9      	ldr	r1, [r7, #24]
 8005d5c:	430b      	orrs	r3, r1
 8005d5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d017      	beq.n	8005d98 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691a      	ldr	r2, [r3, #16]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005d76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005d80:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005d84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6911      	ldr	r1, [r2, #16]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6812      	ldr	r2, [r2, #0]
 8005d90:	430b      	orrs	r3, r1
 8005d92:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005d96:	e013      	b.n	8005dc0 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691a      	ldr	r2, [r3, #16]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005da6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6812      	ldr	r2, [r2, #0]
 8005db4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005db8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005dbc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d118      	bne.n	8005dfc <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005dd4:	f023 0304 	bic.w	r3, r3, #4
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005de0:	4311      	orrs	r1, r2
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005de6:	4311      	orrs	r1, r2
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005dec:	430a      	orrs	r2, r1
 8005dee:	431a      	orrs	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f042 0201 	orr.w	r2, r2, #1
 8005df8:	611a      	str	r2, [r3, #16]
 8005dfa:	e007      	b.n	8005e0c <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691a      	ldr	r2, [r3, #16]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 0201 	bic.w	r2, r2, #1
 8005e0a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d10c      	bne.n	8005e2e <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1a:	f023 010f 	bic.w	r1, r3, #15
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	1e5a      	subs	r2, r3, #1
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	631a      	str	r2, [r3, #48]	; 0x30
 8005e2c:	e007      	b.n	8005e3e <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 020f 	bic.w	r2, r2, #15
 8005e3c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e42:	f023 0303 	bic.w	r3, r3, #3
 8005e46:	f043 0201 	orr.w	r2, r3, #1
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e4e:	e007      	b.n	8005e60 <HAL_ADC_Init+0x2f4>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e54:	f043 0210 	orr.w	r2, r3, #16
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005e60:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3724      	adds	r7, #36	; 0x24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd90      	pop	{r4, r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20000000 	.word	0x20000000
 8005e70:	053e2d63 	.word	0x053e2d63
 8005e74:	50000100 	.word	0x50000100
 8005e78:	50000300 	.word	0x50000300
 8005e7c:	fff04007 	.word	0xfff04007

08005e80 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e8c:	4851      	ldr	r0, [pc, #324]	; (8005fd4 <HAL_ADC_Start_DMA+0x154>)
 8005e8e:	f7ff fda1 	bl	80059d4 <LL_ADC_GetMultimode>
 8005e92:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff fe40 	bl	8005b1e <LL_ADC_REG_IsConversionOngoing>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f040 808f 	bne.w	8005fc4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d101      	bne.n	8005eb4 <HAL_ADC_Start_DMA+0x34>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e08a      	b.n	8005fca <HAL_ADC_Start_DMA+0x14a>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	2b05      	cmp	r3, #5
 8005ec6:	d002      	beq.n	8005ece <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	2b09      	cmp	r3, #9
 8005ecc:	d173      	bne.n	8005fb6 <HAL_ADC_Start_DMA+0x136>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 febc 	bl	8006c4c <ADC_Enable>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d166      	bne.n	8005fac <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ee6:	f023 0301 	bic.w	r3, r3, #1
 8005eea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a38      	ldr	r2, [pc, #224]	; (8005fd8 <HAL_ADC_Start_DMA+0x158>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d002      	beq.n	8005f02 <HAL_ADC_Start_DMA+0x82>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	e001      	b.n	8005f06 <HAL_ADC_Start_DMA+0x86>
 8005f02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	6812      	ldr	r2, [r2, #0]
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d002      	beq.n	8005f14 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d105      	bne.n	8005f20 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f18:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d006      	beq.n	8005f3a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f30:	f023 0206 	bic.w	r2, r3, #6
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	661a      	str	r2, [r3, #96]	; 0x60
 8005f38:	e002      	b.n	8005f40 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f44:	4a25      	ldr	r2, [pc, #148]	; (8005fdc <HAL_ADC_Start_DMA+0x15c>)
 8005f46:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4c:	4a24      	ldr	r2, [pc, #144]	; (8005fe0 <HAL_ADC_Start_DMA+0x160>)
 8005f4e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f54:	4a23      	ldr	r2, [pc, #140]	; (8005fe4 <HAL_ADC_Start_DMA+0x164>)
 8005f56:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	221c      	movs	r2, #28
 8005f5e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0210 	orr.w	r2, r2, #16
 8005f76:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0201 	orr.w	r2, r2, #1
 8005f86:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3340      	adds	r3, #64	; 0x40
 8005f92:	4619      	mov	r1, r3
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f001 fa02 	bl	80073a0 <HAL_DMA_Start_IT>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7ff fda6 	bl	8005af6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005faa:	e00d      	b.n	8005fc8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8005fb4:	e008      	b.n	8005fc8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005fc2:	e001      	b.n	8005fc8 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3718      	adds	r7, #24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	50000300 	.word	0x50000300
 8005fd8:	50000100 	.word	0x50000100
 8005fdc:	08006d11 	.word	0x08006d11
 8005fe0:	08006de9 	.word	0x08006de9
 8005fe4:	08006e05 	.word	0x08006e05

08005fe8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08a      	sub	sp, #40	; 0x28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006004:	4883      	ldr	r0, [pc, #524]	; (8006214 <HAL_ADC_IRQHandler+0x22c>)
 8006006:	f7ff fce5 	bl	80059d4 <LL_ADC_GetMultimode>
 800600a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d017      	beq.n	8006046 <HAL_ADC_IRQHandler+0x5e>
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d012      	beq.n	8006046 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b00      	cmp	r3, #0
 800602a:	d105      	bne.n	8006038 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006030:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 ff4b 	bl	8006ed4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2202      	movs	r2, #2
 8006044:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	2b00      	cmp	r3, #0
 800604e:	d004      	beq.n	800605a <HAL_ADC_IRQHandler+0x72>
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	f003 0304 	and.w	r3, r3, #4
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10a      	bne.n	8006070 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 8085 	beq.w	8006170 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	f003 0308 	and.w	r3, r3, #8
 800606c:	2b00      	cmp	r3, #0
 800606e:	d07f      	beq.n	8006170 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006074:	f003 0310 	and.w	r3, r3, #16
 8006078:	2b00      	cmp	r3, #0
 800607a:	d105      	bne.n	8006088 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006080:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff fbff 	bl	8005890 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d064      	beq.n	8006162 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a5e      	ldr	r2, [pc, #376]	; (8006218 <HAL_ADC_IRQHandler+0x230>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d002      	beq.n	80060a8 <HAL_ADC_IRQHandler+0xc0>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	e001      	b.n	80060ac <HAL_ADC_IRQHandler+0xc4>
 80060a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	6812      	ldr	r2, [r2, #0]
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d008      	beq.n	80060c6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d005      	beq.n	80060c6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2b05      	cmp	r3, #5
 80060be:	d002      	beq.n	80060c6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2b09      	cmp	r3, #9
 80060c4:	d104      	bne.n	80060d0 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	623b      	str	r3, [r7, #32]
 80060ce:	e00d      	b.n	80060ec <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a50      	ldr	r2, [pc, #320]	; (8006218 <HAL_ADC_IRQHandler+0x230>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d002      	beq.n	80060e0 <HAL_ADC_IRQHandler+0xf8>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	e001      	b.n	80060e4 <HAL_ADC_IRQHandler+0xfc>
 80060e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80060e4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d135      	bne.n	8006162 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0308 	and.w	r3, r3, #8
 8006100:	2b08      	cmp	r3, #8
 8006102:	d12e      	bne.n	8006162 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff fd08 	bl	8005b1e <LL_ADC_REG_IsConversionOngoing>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d11a      	bne.n	800614a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 020c 	bic.w	r2, r2, #12
 8006122:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006128:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006134:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d112      	bne.n	8006162 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006140:	f043 0201 	orr.w	r2, r3, #1
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	65da      	str	r2, [r3, #92]	; 0x5c
 8006148:	e00b      	b.n	8006162 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800614e:	f043 0210 	orr.w	r2, r3, #16
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800615a:	f043 0201 	orr.w	r2, r3, #1
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f95a 	bl	800641c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	220c      	movs	r2, #12
 800616e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	f003 0320 	and.w	r3, r3, #32
 8006176:	2b00      	cmp	r3, #0
 8006178:	d004      	beq.n	8006184 <HAL_ADC_IRQHandler+0x19c>
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	f003 0320 	and.w	r3, r3, #32
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10b      	bne.n	800619c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 809e 	beq.w	80062cc <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 8098 	beq.w	80062cc <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a0:	f003 0310 	and.w	r3, r3, #16
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d105      	bne.n	80061b4 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7ff fba8 	bl	800590e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80061be:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff fb63 	bl	8005890 <LL_ADC_REG_IsTriggerSourceSWStart>
 80061ca:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a11      	ldr	r2, [pc, #68]	; (8006218 <HAL_ADC_IRQHandler+0x230>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d002      	beq.n	80061dc <HAL_ADC_IRQHandler+0x1f4>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	e001      	b.n	80061e0 <HAL_ADC_IRQHandler+0x1f8>
 80061dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	6812      	ldr	r2, [r2, #0]
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d008      	beq.n	80061fa <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d005      	beq.n	80061fa <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2b06      	cmp	r3, #6
 80061f2:	d002      	beq.n	80061fa <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	2b07      	cmp	r3, #7
 80061f8:	d104      	bne.n	8006204 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	623b      	str	r3, [r7, #32]
 8006202:	e011      	b.n	8006228 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a03      	ldr	r2, [pc, #12]	; (8006218 <HAL_ADC_IRQHandler+0x230>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d006      	beq.n	800621c <HAL_ADC_IRQHandler+0x234>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	e005      	b.n	8006220 <HAL_ADC_IRQHandler+0x238>
 8006214:	50000300 	.word	0x50000300
 8006218:	50000100 	.word	0x50000100
 800621c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006220:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d047      	beq.n	80062be <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d007      	beq.n	8006248 <HAL_ADC_IRQHandler+0x260>
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d03f      	beq.n	80062be <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006244:	2b00      	cmp	r3, #0
 8006246:	d13a      	bne.n	80062be <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006252:	2b40      	cmp	r3, #64	; 0x40
 8006254:	d133      	bne.n	80062be <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d12e      	bne.n	80062be <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff fc6d 	bl	8005b44 <LL_ADC_INJ_IsConversionOngoing>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d11a      	bne.n	80062a6 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800627e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006284:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006294:	2b00      	cmp	r3, #0
 8006296:	d112      	bne.n	80062be <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800629c:	f043 0201 	orr.w	r2, r3, #1
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80062a4:	e00b      	b.n	80062be <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062aa:	f043 0210 	orr.w	r2, r3, #16
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062b6:	f043 0201 	orr.w	r2, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fde0 	bl	8006e84 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2260      	movs	r2, #96	; 0x60
 80062ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d011      	beq.n	80062fa <HAL_ADC_IRQHandler+0x312>
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00c      	beq.n	80062fa <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f8a9 	bl	8006444 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2280      	movs	r2, #128	; 0x80
 80062f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006300:	2b00      	cmp	r3, #0
 8006302:	d012      	beq.n	800632a <HAL_ADC_IRQHandler+0x342>
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00d      	beq.n	800632a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006312:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fdc6 	bl	8006eac <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006328:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006330:	2b00      	cmp	r3, #0
 8006332:	d012      	beq.n	800635a <HAL_ADC_IRQHandler+0x372>
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00d      	beq.n	800635a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006342:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fdb8 	bl	8006ec0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006358:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	f003 0310 	and.w	r3, r3, #16
 8006360:	2b00      	cmp	r3, #0
 8006362:	d036      	beq.n	80063d2 <HAL_ADC_IRQHandler+0x3ea>
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	f003 0310 	and.w	r3, r3, #16
 800636a:	2b00      	cmp	r3, #0
 800636c:	d031      	beq.n	80063d2 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006372:	2b00      	cmp	r3, #0
 8006374:	d102      	bne.n	800637c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8006376:	2301      	movs	r3, #1
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
 800637a:	e014      	b.n	80063a6 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d008      	beq.n	8006394 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006382:	4825      	ldr	r0, [pc, #148]	; (8006418 <HAL_ADC_IRQHandler+0x430>)
 8006384:	f7ff fb34 	bl	80059f0 <LL_ADC_GetMultiDMATransfer>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00b      	beq.n	80063a6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800638e:	2301      	movs	r3, #1
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
 8006392:	e008      	b.n	80063a6 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80063a2:	2301      	movs	r3, #1
 80063a4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d10e      	bne.n	80063ca <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063bc:	f043 0202 	orr.w	r2, r3, #2
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f847 	bl	8006458 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2210      	movs	r2, #16
 80063d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d018      	beq.n	800640e <HAL_ADC_IRQHandler+0x426>
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d013      	beq.n	800640e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ea:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063f6:	f043 0208 	orr.w	r2, r3, #8
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006406:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fd45 	bl	8006e98 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800640e:	bf00      	nop
 8006410:	3728      	adds	r7, #40	; 0x28
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	50000300 	.word	0x50000300

0800641c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b0b6      	sub	sp, #216	; 0xd8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800647c:	2300      	movs	r3, #0
 800647e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006486:	2b01      	cmp	r3, #1
 8006488:	d101      	bne.n	800648e <HAL_ADC_ConfigChannel+0x22>
 800648a:	2302      	movs	r3, #2
 800648c:	e3c8      	b.n	8006c20 <HAL_ADC_ConfigChannel+0x7b4>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff fb3f 	bl	8005b1e <LL_ADC_REG_IsConversionOngoing>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f040 83ad 	bne.w	8006c02 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	6859      	ldr	r1, [r3, #4]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	461a      	mov	r2, r3
 80064b6:	f7ff f9fe 	bl	80058b6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4618      	mov	r0, r3
 80064c0:	f7ff fb2d 	bl	8005b1e <LL_ADC_REG_IsConversionOngoing>
 80064c4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7ff fb39 	bl	8005b44 <LL_ADC_INJ_IsConversionOngoing>
 80064d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80064d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f040 81d9 	bne.w	8006892 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80064e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f040 81d4 	bne.w	8006892 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064f2:	d10f      	bne.n	8006514 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2200      	movs	r2, #0
 80064fe:	4619      	mov	r1, r3
 8006500:	f7ff fa18 	bl	8005934 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff f9ac 	bl	800586a <LL_ADC_SetSamplingTimeCommonConfig>
 8006512:	e00e      	b.n	8006532 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6818      	ldr	r0, [r3, #0]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	6819      	ldr	r1, [r3, #0]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	461a      	mov	r2, r3
 8006522:	f7ff fa07 	bl	8005934 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2100      	movs	r1, #0
 800652c:	4618      	mov	r0, r3
 800652e:	f7ff f99c 	bl	800586a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	695a      	ldr	r2, [r3, #20]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	08db      	lsrs	r3, r3, #3
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	fa02 f303 	lsl.w	r3, r2, r3
 8006548:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	2b04      	cmp	r3, #4
 8006552:	d022      	beq.n	800659a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6818      	ldr	r0, [r3, #0]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	6919      	ldr	r1, [r3, #16]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006564:	f7ff f8f6 	bl	8005754 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6818      	ldr	r0, [r3, #0]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	6919      	ldr	r1, [r3, #16]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	461a      	mov	r2, r3
 8006576:	f7ff f942 	bl	80057fe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	6919      	ldr	r1, [r3, #16]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	7f1b      	ldrb	r3, [r3, #28]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d102      	bne.n	8006590 <HAL_ADC_ConfigChannel+0x124>
 800658a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800658e:	e000      	b.n	8006592 <HAL_ADC_ConfigChannel+0x126>
 8006590:	2300      	movs	r3, #0
 8006592:	461a      	mov	r2, r3
 8006594:	f7ff f94e 	bl	8005834 <LL_ADC_SetOffsetSaturation>
 8006598:	e17b      	b.n	8006892 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2100      	movs	r1, #0
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7ff f8fb 	bl	800579c <LL_ADC_GetOffsetChannel>
 80065a6:	4603      	mov	r3, r0
 80065a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <HAL_ADC_ConfigChannel+0x15a>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2100      	movs	r1, #0
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7ff f8f0 	bl	800579c <LL_ADC_GetOffsetChannel>
 80065bc:	4603      	mov	r3, r0
 80065be:	0e9b      	lsrs	r3, r3, #26
 80065c0:	f003 021f 	and.w	r2, r3, #31
 80065c4:	e01e      	b.n	8006604 <HAL_ADC_ConfigChannel+0x198>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2100      	movs	r1, #0
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff f8e5 	bl	800579c <LL_ADC_GetOffsetChannel>
 80065d2:	4603      	mov	r3, r0
 80065d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80065dc:	fa93 f3a3 	rbit	r3, r3
 80065e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80065e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80065ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80065f4:	2320      	movs	r3, #32
 80065f6:	e004      	b.n	8006602 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80065f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065fc:	fab3 f383 	clz	r3, r3
 8006600:	b2db      	uxtb	r3, r3
 8006602:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800660c:	2b00      	cmp	r3, #0
 800660e:	d105      	bne.n	800661c <HAL_ADC_ConfigChannel+0x1b0>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	0e9b      	lsrs	r3, r3, #26
 8006616:	f003 031f 	and.w	r3, r3, #31
 800661a:	e018      	b.n	800664e <HAL_ADC_ConfigChannel+0x1e2>
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006624:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006628:	fa93 f3a3 	rbit	r3, r3
 800662c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006630:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006638:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8006640:	2320      	movs	r3, #32
 8006642:	e004      	b.n	800664e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8006644:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006648:	fab3 f383 	clz	r3, r3
 800664c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800664e:	429a      	cmp	r2, r3
 8006650:	d106      	bne.n	8006660 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2200      	movs	r2, #0
 8006658:	2100      	movs	r1, #0
 800665a:	4618      	mov	r0, r3
 800665c:	f7ff f8b4 	bl	80057c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2101      	movs	r1, #1
 8006666:	4618      	mov	r0, r3
 8006668:	f7ff f898 	bl	800579c <LL_ADC_GetOffsetChannel>
 800666c:	4603      	mov	r3, r0
 800666e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10a      	bne.n	800668c <HAL_ADC_ConfigChannel+0x220>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2101      	movs	r1, #1
 800667c:	4618      	mov	r0, r3
 800667e:	f7ff f88d 	bl	800579c <LL_ADC_GetOffsetChannel>
 8006682:	4603      	mov	r3, r0
 8006684:	0e9b      	lsrs	r3, r3, #26
 8006686:	f003 021f 	and.w	r2, r3, #31
 800668a:	e01e      	b.n	80066ca <HAL_ADC_ConfigChannel+0x25e>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2101      	movs	r1, #1
 8006692:	4618      	mov	r0, r3
 8006694:	f7ff f882 	bl	800579c <LL_ADC_GetOffsetChannel>
 8006698:	4603      	mov	r3, r0
 800669a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800669e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80066a2:	fa93 f3a3 	rbit	r3, r3
 80066a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80066aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80066b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80066ba:	2320      	movs	r3, #32
 80066bc:	e004      	b.n	80066c8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80066be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066c2:	fab3 f383 	clz	r3, r3
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d105      	bne.n	80066e2 <HAL_ADC_ConfigChannel+0x276>
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	0e9b      	lsrs	r3, r3, #26
 80066dc:	f003 031f 	and.w	r3, r3, #31
 80066e0:	e018      	b.n	8006714 <HAL_ADC_ConfigChannel+0x2a8>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066ee:	fa93 f3a3 	rbit	r3, r3
 80066f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80066f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80066fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80066fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8006706:	2320      	movs	r3, #32
 8006708:	e004      	b.n	8006714 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800670a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800670e:	fab3 f383 	clz	r3, r3
 8006712:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006714:	429a      	cmp	r2, r3
 8006716:	d106      	bne.n	8006726 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2200      	movs	r2, #0
 800671e:	2101      	movs	r1, #1
 8006720:	4618      	mov	r0, r3
 8006722:	f7ff f851 	bl	80057c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2102      	movs	r1, #2
 800672c:	4618      	mov	r0, r3
 800672e:	f7ff f835 	bl	800579c <LL_ADC_GetOffsetChannel>
 8006732:	4603      	mov	r3, r0
 8006734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10a      	bne.n	8006752 <HAL_ADC_ConfigChannel+0x2e6>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2102      	movs	r1, #2
 8006742:	4618      	mov	r0, r3
 8006744:	f7ff f82a 	bl	800579c <LL_ADC_GetOffsetChannel>
 8006748:	4603      	mov	r3, r0
 800674a:	0e9b      	lsrs	r3, r3, #26
 800674c:	f003 021f 	and.w	r2, r3, #31
 8006750:	e01e      	b.n	8006790 <HAL_ADC_ConfigChannel+0x324>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2102      	movs	r1, #2
 8006758:	4618      	mov	r0, r3
 800675a:	f7ff f81f 	bl	800579c <LL_ADC_GetOffsetChannel>
 800675e:	4603      	mov	r3, r0
 8006760:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006764:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006768:	fa93 f3a3 	rbit	r3, r3
 800676c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006770:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006774:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006778:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8006780:	2320      	movs	r3, #32
 8006782:	e004      	b.n	800678e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8006784:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006788:	fab3 f383 	clz	r3, r3
 800678c:	b2db      	uxtb	r3, r3
 800678e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006798:	2b00      	cmp	r3, #0
 800679a:	d105      	bne.n	80067a8 <HAL_ADC_ConfigChannel+0x33c>
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	0e9b      	lsrs	r3, r3, #26
 80067a2:	f003 031f 	and.w	r3, r3, #31
 80067a6:	e016      	b.n	80067d6 <HAL_ADC_ConfigChannel+0x36a>
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067b4:	fa93 f3a3 	rbit	r3, r3
 80067b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80067ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80067c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80067c8:	2320      	movs	r3, #32
 80067ca:	e004      	b.n	80067d6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80067cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067d0:	fab3 f383 	clz	r3, r3
 80067d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d106      	bne.n	80067e8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2200      	movs	r2, #0
 80067e0:	2102      	movs	r1, #2
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fe fff0 	bl	80057c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2103      	movs	r1, #3
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe ffd4 	bl	800579c <LL_ADC_GetOffsetChannel>
 80067f4:	4603      	mov	r3, r0
 80067f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10a      	bne.n	8006814 <HAL_ADC_ConfigChannel+0x3a8>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2103      	movs	r1, #3
 8006804:	4618      	mov	r0, r3
 8006806:	f7fe ffc9 	bl	800579c <LL_ADC_GetOffsetChannel>
 800680a:	4603      	mov	r3, r0
 800680c:	0e9b      	lsrs	r3, r3, #26
 800680e:	f003 021f 	and.w	r2, r3, #31
 8006812:	e017      	b.n	8006844 <HAL_ADC_ConfigChannel+0x3d8>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2103      	movs	r1, #3
 800681a:	4618      	mov	r0, r3
 800681c:	f7fe ffbe 	bl	800579c <LL_ADC_GetOffsetChannel>
 8006820:	4603      	mov	r3, r0
 8006822:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006824:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006826:	fa93 f3a3 	rbit	r3, r3
 800682a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800682c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800682e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8006836:	2320      	movs	r3, #32
 8006838:	e003      	b.n	8006842 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800683a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800683c:	fab3 f383 	clz	r3, r3
 8006840:	b2db      	uxtb	r3, r3
 8006842:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800684c:	2b00      	cmp	r3, #0
 800684e:	d105      	bne.n	800685c <HAL_ADC_ConfigChannel+0x3f0>
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	0e9b      	lsrs	r3, r3, #26
 8006856:	f003 031f 	and.w	r3, r3, #31
 800685a:	e011      	b.n	8006880 <HAL_ADC_ConfigChannel+0x414>
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006862:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006864:	fa93 f3a3 	rbit	r3, r3
 8006868:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800686a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800686c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800686e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8006874:	2320      	movs	r3, #32
 8006876:	e003      	b.n	8006880 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8006878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800687a:	fab3 f383 	clz	r3, r3
 800687e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006880:	429a      	cmp	r2, r3
 8006882:	d106      	bne.n	8006892 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2200      	movs	r2, #0
 800688a:	2103      	movs	r1, #3
 800688c:	4618      	mov	r0, r3
 800688e:	f7fe ff9b 	bl	80057c8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff f91a 	bl	8005ad0 <LL_ADC_IsEnabled>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f040 8140 	bne.w	8006b24 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6818      	ldr	r0, [r3, #0]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	6819      	ldr	r1, [r3, #0]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	461a      	mov	r2, r3
 80068b2:	f7ff f86b 	bl	800598c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	4a8f      	ldr	r2, [pc, #572]	; (8006af8 <HAL_ADC_ConfigChannel+0x68c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	f040 8131 	bne.w	8006b24 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10b      	bne.n	80068ea <HAL_ADC_ConfigChannel+0x47e>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	0e9b      	lsrs	r3, r3, #26
 80068d8:	3301      	adds	r3, #1
 80068da:	f003 031f 	and.w	r3, r3, #31
 80068de:	2b09      	cmp	r3, #9
 80068e0:	bf94      	ite	ls
 80068e2:	2301      	movls	r3, #1
 80068e4:	2300      	movhi	r3, #0
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	e019      	b.n	800691e <HAL_ADC_ConfigChannel+0x4b2>
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068f2:	fa93 f3a3 	rbit	r3, r3
 80068f6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80068f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068fa:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80068fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8006902:	2320      	movs	r3, #32
 8006904:	e003      	b.n	800690e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8006906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006908:	fab3 f383 	clz	r3, r3
 800690c:	b2db      	uxtb	r3, r3
 800690e:	3301      	adds	r3, #1
 8006910:	f003 031f 	and.w	r3, r3, #31
 8006914:	2b09      	cmp	r3, #9
 8006916:	bf94      	ite	ls
 8006918:	2301      	movls	r3, #1
 800691a:	2300      	movhi	r3, #0
 800691c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800691e:	2b00      	cmp	r3, #0
 8006920:	d079      	beq.n	8006a16 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800692a:	2b00      	cmp	r3, #0
 800692c:	d107      	bne.n	800693e <HAL_ADC_ConfigChannel+0x4d2>
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	0e9b      	lsrs	r3, r3, #26
 8006934:	3301      	adds	r3, #1
 8006936:	069b      	lsls	r3, r3, #26
 8006938:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800693c:	e015      	b.n	800696a <HAL_ADC_ConfigChannel+0x4fe>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006946:	fa93 f3a3 	rbit	r3, r3
 800694a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800694c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800694e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8006956:	2320      	movs	r3, #32
 8006958:	e003      	b.n	8006962 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800695a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800695c:	fab3 f383 	clz	r3, r3
 8006960:	b2db      	uxtb	r3, r3
 8006962:	3301      	adds	r3, #1
 8006964:	069b      	lsls	r3, r3, #26
 8006966:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006972:	2b00      	cmp	r3, #0
 8006974:	d109      	bne.n	800698a <HAL_ADC_ConfigChannel+0x51e>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	0e9b      	lsrs	r3, r3, #26
 800697c:	3301      	adds	r3, #1
 800697e:	f003 031f 	and.w	r3, r3, #31
 8006982:	2101      	movs	r1, #1
 8006984:	fa01 f303 	lsl.w	r3, r1, r3
 8006988:	e017      	b.n	80069ba <HAL_ADC_ConfigChannel+0x54e>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006992:	fa93 f3a3 	rbit	r3, r3
 8006996:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800699a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800699c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80069a2:	2320      	movs	r3, #32
 80069a4:	e003      	b.n	80069ae <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80069a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069a8:	fab3 f383 	clz	r3, r3
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	3301      	adds	r3, #1
 80069b0:	f003 031f 	and.w	r3, r3, #31
 80069b4:	2101      	movs	r1, #1
 80069b6:	fa01 f303 	lsl.w	r3, r1, r3
 80069ba:	ea42 0103 	orr.w	r1, r2, r3
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10a      	bne.n	80069e0 <HAL_ADC_ConfigChannel+0x574>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	0e9b      	lsrs	r3, r3, #26
 80069d0:	3301      	adds	r3, #1
 80069d2:	f003 021f 	and.w	r2, r3, #31
 80069d6:	4613      	mov	r3, r2
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	4413      	add	r3, r2
 80069dc:	051b      	lsls	r3, r3, #20
 80069de:	e018      	b.n	8006a12 <HAL_ADC_ConfigChannel+0x5a6>
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e8:	fa93 f3a3 	rbit	r3, r3
 80069ec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80069ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80069f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80069f8:	2320      	movs	r3, #32
 80069fa:	e003      	b.n	8006a04 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80069fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fe:	fab3 f383 	clz	r3, r3
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	3301      	adds	r3, #1
 8006a06:	f003 021f 	and.w	r2, r3, #31
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	005b      	lsls	r3, r3, #1
 8006a0e:	4413      	add	r3, r2
 8006a10:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a12:	430b      	orrs	r3, r1
 8006a14:	e081      	b.n	8006b1a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d107      	bne.n	8006a32 <HAL_ADC_ConfigChannel+0x5c6>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	0e9b      	lsrs	r3, r3, #26
 8006a28:	3301      	adds	r3, #1
 8006a2a:	069b      	lsls	r3, r3, #26
 8006a2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a30:	e015      	b.n	8006a5e <HAL_ADC_ConfigChannel+0x5f2>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3a:	fa93 f3a3 	rbit	r3, r3
 8006a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8006a4a:	2320      	movs	r3, #32
 8006a4c:	e003      	b.n	8006a56 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a50:	fab3 f383 	clz	r3, r3
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	3301      	adds	r3, #1
 8006a58:	069b      	lsls	r3, r3, #26
 8006a5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d109      	bne.n	8006a7e <HAL_ADC_ConfigChannel+0x612>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	0e9b      	lsrs	r3, r3, #26
 8006a70:	3301      	adds	r3, #1
 8006a72:	f003 031f 	and.w	r3, r3, #31
 8006a76:	2101      	movs	r1, #1
 8006a78:	fa01 f303 	lsl.w	r3, r1, r3
 8006a7c:	e017      	b.n	8006aae <HAL_ADC_ConfigChannel+0x642>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	fa93 f3a3 	rbit	r3, r3
 8006a8a:	61fb      	str	r3, [r7, #28]
  return result;
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8006a96:	2320      	movs	r3, #32
 8006a98:	e003      	b.n	8006aa2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	fab3 f383 	clz	r3, r3
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	f003 031f 	and.w	r3, r3, #31
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8006aae:	ea42 0103 	orr.w	r1, r2, r3
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10d      	bne.n	8006ada <HAL_ADC_ConfigChannel+0x66e>
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	0e9b      	lsrs	r3, r3, #26
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	f003 021f 	and.w	r2, r3, #31
 8006aca:	4613      	mov	r3, r2
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	4413      	add	r3, r2
 8006ad0:	3b1e      	subs	r3, #30
 8006ad2:	051b      	lsls	r3, r3, #20
 8006ad4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006ad8:	e01e      	b.n	8006b18 <HAL_ADC_ConfigChannel+0x6ac>
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	fa93 f3a3 	rbit	r3, r3
 8006ae6:	613b      	str	r3, [r7, #16]
  return result;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d104      	bne.n	8006afc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8006af2:	2320      	movs	r3, #32
 8006af4:	e006      	b.n	8006b04 <HAL_ADC_ConfigChannel+0x698>
 8006af6:	bf00      	nop
 8006af8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	fab3 f383 	clz	r3, r3
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	3301      	adds	r3, #1
 8006b06:	f003 021f 	and.w	r2, r3, #31
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	4413      	add	r3, r2
 8006b10:	3b1e      	subs	r3, #30
 8006b12:	051b      	lsls	r3, r3, #20
 8006b14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	6892      	ldr	r2, [r2, #8]
 8006b1e:	4619      	mov	r1, r3
 8006b20:	f7fe ff08 	bl	8005934 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	4b3f      	ldr	r3, [pc, #252]	; (8006c28 <HAL_ADC_ConfigChannel+0x7bc>)
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d071      	beq.n	8006c14 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006b30:	483e      	ldr	r0, [pc, #248]	; (8006c2c <HAL_ADC_ConfigChannel+0x7c0>)
 8006b32:	f7fe fe01 	bl	8005738 <LL_ADC_GetCommonPathInternalCh>
 8006b36:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a3c      	ldr	r2, [pc, #240]	; (8006c30 <HAL_ADC_ConfigChannel+0x7c4>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d004      	beq.n	8006b4e <HAL_ADC_ConfigChannel+0x6e2>
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a3a      	ldr	r2, [pc, #232]	; (8006c34 <HAL_ADC_ConfigChannel+0x7c8>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d127      	bne.n	8006b9e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006b4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d121      	bne.n	8006b9e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b62:	d157      	bne.n	8006c14 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006b64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	482f      	ldr	r0, [pc, #188]	; (8006c2c <HAL_ADC_ConfigChannel+0x7c0>)
 8006b70:	f7fe fdcf 	bl	8005712 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006b74:	4b30      	ldr	r3, [pc, #192]	; (8006c38 <HAL_ADC_ConfigChannel+0x7cc>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	099b      	lsrs	r3, r3, #6
 8006b7a:	4a30      	ldr	r2, [pc, #192]	; (8006c3c <HAL_ADC_ConfigChannel+0x7d0>)
 8006b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b80:	099b      	lsrs	r3, r3, #6
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	4613      	mov	r3, r2
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	4413      	add	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006b8e:	e002      	b.n	8006b96 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1f9      	bne.n	8006b90 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006b9c:	e03a      	b.n	8006c14 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a27      	ldr	r2, [pc, #156]	; (8006c40 <HAL_ADC_ConfigChannel+0x7d4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d113      	bne.n	8006bd0 <HAL_ADC_ConfigChannel+0x764>
 8006ba8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006bac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10d      	bne.n	8006bd0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a22      	ldr	r2, [pc, #136]	; (8006c44 <HAL_ADC_ConfigChannel+0x7d8>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d02a      	beq.n	8006c14 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006bbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4818      	ldr	r0, [pc, #96]	; (8006c2c <HAL_ADC_ConfigChannel+0x7c0>)
 8006bca:	f7fe fda2 	bl	8005712 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006bce:	e021      	b.n	8006c14 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a1c      	ldr	r2, [pc, #112]	; (8006c48 <HAL_ADC_ConfigChannel+0x7dc>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d11c      	bne.n	8006c14 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006bda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d116      	bne.n	8006c14 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a16      	ldr	r2, [pc, #88]	; (8006c44 <HAL_ADC_ConfigChannel+0x7d8>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d011      	beq.n	8006c14 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006bf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006bf4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	480c      	ldr	r0, [pc, #48]	; (8006c2c <HAL_ADC_ConfigChannel+0x7c0>)
 8006bfc:	f7fe fd89 	bl	8005712 <LL_ADC_SetCommonPathInternalCh>
 8006c00:	e008      	b.n	8006c14 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c06:	f043 0220 	orr.w	r2, r3, #32
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006c1c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	37d8      	adds	r7, #216	; 0xd8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	80080000 	.word	0x80080000
 8006c2c:	50000300 	.word	0x50000300
 8006c30:	c3210000 	.word	0xc3210000
 8006c34:	90c00010 	.word	0x90c00010
 8006c38:	20000000 	.word	0x20000000
 8006c3c:	053e2d63 	.word	0x053e2d63
 8006c40:	c7520000 	.word	0xc7520000
 8006c44:	50000100 	.word	0x50000100
 8006c48:	cb840000 	.word	0xcb840000

08006c4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fe ff39 	bl	8005ad0 <LL_ADC_IsEnabled>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d14d      	bne.n	8006d00 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	4b28      	ldr	r3, [pc, #160]	; (8006d0c <ADC_Enable+0xc0>)
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00d      	beq.n	8006c8e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c76:	f043 0210 	orr.w	r2, r3, #16
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c82:	f043 0201 	orr.w	r2, r3, #1
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e039      	b.n	8006d02 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fe ff08 	bl	8005aa8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006c98:	f7fe fcfa 	bl	8005690 <HAL_GetTick>
 8006c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006c9e:	e028      	b.n	8006cf2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fe ff13 	bl	8005ad0 <LL_ADC_IsEnabled>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d104      	bne.n	8006cba <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fe fef7 	bl	8005aa8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006cba:	f7fe fce9 	bl	8005690 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d914      	bls.n	8006cf2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d00d      	beq.n	8006cf2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cda:	f043 0210 	orr.w	r2, r3, #16
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ce6:	f043 0201 	orr.w	r2, r3, #1
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e007      	b.n	8006d02 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d1cf      	bne.n	8006ca0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	8000003f 	.word	0x8000003f

08006d10 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d14b      	bne.n	8006dc2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0308 	and.w	r3, r3, #8
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d021      	beq.n	8006d88 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fe fda1 	bl	8005890 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d032      	beq.n	8006dba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d12b      	bne.n	8006dba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d11f      	bne.n	8006dba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d7e:	f043 0201 	orr.w	r2, r3, #1
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d86:	e018      	b.n	8006dba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d111      	bne.n	8006dba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d105      	bne.n	8006dba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db2:	f043 0201 	orr.w	r2, r3, #1
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f7ff fb2e 	bl	800641c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006dc0:	e00e      	b.n	8006de0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc6:	f003 0310 	and.w	r3, r3, #16
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f7ff fb42 	bl	8006458 <HAL_ADC_ErrorCallback>
}
 8006dd4:	e004      	b.n	8006de0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	4798      	blx	r3
}
 8006de0:	bf00      	nop
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f7ff fb1a 	bl	8006430 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006dfc:	bf00      	nop
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e10:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e22:	f043 0204 	orr.w	r2, r3, #4
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f7ff fb14 	bl	8006458 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e30:	bf00      	nop
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <LL_ADC_IsEnabled>:
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d101      	bne.n	8006e50 <LL_ADC_IsEnabled+0x18>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e000      	b.n	8006e52 <LL_ADC_IsEnabled+0x1a>
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <LL_ADC_REG_IsConversionOngoing>:
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 0304 	and.w	r3, r3, #4
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d101      	bne.n	8006e76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006e72:	2301      	movs	r3, #1
 8006e74:	e000      	b.n	8006e78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006ee8:	b590      	push	{r4, r7, lr}
 8006eea:	b0a1      	sub	sp, #132	; 0x84
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d101      	bne.n	8006f06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006f02:	2302      	movs	r3, #2
 8006f04:	e08b      	b.n	800701e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006f0e:	2300      	movs	r3, #0
 8006f10:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006f12:	2300      	movs	r3, #0
 8006f14:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f1e:	d102      	bne.n	8006f26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006f20:	4b41      	ldr	r3, [pc, #260]	; (8007028 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006f22:	60bb      	str	r3, [r7, #8]
 8006f24:	e001      	b.n	8006f2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006f26:	2300      	movs	r3, #0
 8006f28:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10b      	bne.n	8006f48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f34:	f043 0220 	orr.w	r2, r3, #32
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e06a      	b.n	800701e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff ff87 	bl	8006e5e <LL_ADC_REG_IsConversionOngoing>
 8006f50:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7ff ff81 	bl	8006e5e <LL_ADC_REG_IsConversionOngoing>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d14c      	bne.n	8006ffc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d149      	bne.n	8006ffc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006f68:	4b30      	ldr	r3, [pc, #192]	; (800702c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8006f6a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d028      	beq.n	8006fc6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006f74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	6859      	ldr	r1, [r3, #4]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f86:	035b      	lsls	r3, r3, #13
 8006f88:	430b      	orrs	r3, r1
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f8e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f90:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006f94:	f7ff ff50 	bl	8006e38 <LL_ADC_IsEnabled>
 8006f98:	4604      	mov	r4, r0
 8006f9a:	4823      	ldr	r0, [pc, #140]	; (8007028 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006f9c:	f7ff ff4c 	bl	8006e38 <LL_ADC_IsEnabled>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	4323      	orrs	r3, r4
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d133      	bne.n	8007010 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006fb0:	f023 030f 	bic.w	r3, r3, #15
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	6811      	ldr	r1, [r2, #0]
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	6892      	ldr	r2, [r2, #8]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fc2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006fc4:	e024      	b.n	8007010 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fd0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006fd2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006fd6:	f7ff ff2f 	bl	8006e38 <LL_ADC_IsEnabled>
 8006fda:	4604      	mov	r4, r0
 8006fdc:	4812      	ldr	r0, [pc, #72]	; (8007028 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006fde:	f7ff ff2b 	bl	8006e38 <LL_ADC_IsEnabled>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	4323      	orrs	r3, r4
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d112      	bne.n	8007010 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006fea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006ff2:	f023 030f 	bic.w	r3, r3, #15
 8006ff6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006ff8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ffa:	e009      	b.n	8007010 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007000:	f043 0220 	orr.w	r2, r3, #32
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800700e:	e000      	b.n	8007012 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007010:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800701a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800701e:	4618      	mov	r0, r3
 8007020:	3784      	adds	r7, #132	; 0x84
 8007022:	46bd      	mov	sp, r7
 8007024:	bd90      	pop	{r4, r7, pc}
 8007026:	bf00      	nop
 8007028:	50000100 	.word	0x50000100
 800702c:	50000300 	.word	0x50000300

08007030 <__NVIC_SetPriorityGrouping>:
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f003 0307 	and.w	r3, r3, #7
 800703e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007040:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <__NVIC_SetPriorityGrouping+0x44>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800704c:	4013      	ands	r3, r2
 800704e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800705c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007062:	4a04      	ldr	r2, [pc, #16]	; (8007074 <__NVIC_SetPriorityGrouping+0x44>)
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	60d3      	str	r3, [r2, #12]
}
 8007068:	bf00      	nop
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	e000ed00 	.word	0xe000ed00

08007078 <__NVIC_GetPriorityGrouping>:
{
 8007078:	b480      	push	{r7}
 800707a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800707c:	4b04      	ldr	r3, [pc, #16]	; (8007090 <__NVIC_GetPriorityGrouping+0x18>)
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	0a1b      	lsrs	r3, r3, #8
 8007082:	f003 0307 	and.w	r3, r3, #7
}
 8007086:	4618      	mov	r0, r3
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	e000ed00 	.word	0xe000ed00

08007094 <__NVIC_EnableIRQ>:
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	4603      	mov	r3, r0
 800709c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800709e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	db0b      	blt.n	80070be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070a6:	79fb      	ldrb	r3, [r7, #7]
 80070a8:	f003 021f 	and.w	r2, r3, #31
 80070ac:	4907      	ldr	r1, [pc, #28]	; (80070cc <__NVIC_EnableIRQ+0x38>)
 80070ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	2001      	movs	r0, #1
 80070b6:	fa00 f202 	lsl.w	r2, r0, r2
 80070ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80070be:	bf00      	nop
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	e000e100 	.word	0xe000e100

080070d0 <__NVIC_SetPriority>:
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4603      	mov	r3, r0
 80070d8:	6039      	str	r1, [r7, #0]
 80070da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	db0a      	blt.n	80070fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	490c      	ldr	r1, [pc, #48]	; (800711c <__NVIC_SetPriority+0x4c>)
 80070ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ee:	0112      	lsls	r2, r2, #4
 80070f0:	b2d2      	uxtb	r2, r2
 80070f2:	440b      	add	r3, r1
 80070f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80070f8:	e00a      	b.n	8007110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	4908      	ldr	r1, [pc, #32]	; (8007120 <__NVIC_SetPriority+0x50>)
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	f003 030f 	and.w	r3, r3, #15
 8007106:	3b04      	subs	r3, #4
 8007108:	0112      	lsls	r2, r2, #4
 800710a:	b2d2      	uxtb	r2, r2
 800710c:	440b      	add	r3, r1
 800710e:	761a      	strb	r2, [r3, #24]
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	e000e100 	.word	0xe000e100
 8007120:	e000ed00 	.word	0xe000ed00

08007124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007124:	b480      	push	{r7}
 8007126:	b089      	sub	sp, #36	; 0x24
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f003 0307 	and.w	r3, r3, #7
 8007136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	f1c3 0307 	rsb	r3, r3, #7
 800713e:	2b04      	cmp	r3, #4
 8007140:	bf28      	it	cs
 8007142:	2304      	movcs	r3, #4
 8007144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	3304      	adds	r3, #4
 800714a:	2b06      	cmp	r3, #6
 800714c:	d902      	bls.n	8007154 <NVIC_EncodePriority+0x30>
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	3b03      	subs	r3, #3
 8007152:	e000      	b.n	8007156 <NVIC_EncodePriority+0x32>
 8007154:	2300      	movs	r3, #0
 8007156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007158:	f04f 32ff 	mov.w	r2, #4294967295
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	fa02 f303 	lsl.w	r3, r2, r3
 8007162:	43da      	mvns	r2, r3
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	401a      	ands	r2, r3
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800716c:	f04f 31ff 	mov.w	r1, #4294967295
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	fa01 f303 	lsl.w	r3, r1, r3
 8007176:	43d9      	mvns	r1, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800717c:	4313      	orrs	r3, r2
         );
}
 800717e:	4618      	mov	r0, r3
 8007180:	3724      	adds	r7, #36	; 0x24
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
	...

0800718c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3b01      	subs	r3, #1
 8007198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800719c:	d301      	bcc.n	80071a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800719e:	2301      	movs	r3, #1
 80071a0:	e00f      	b.n	80071c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80071a2:	4a0a      	ldr	r2, [pc, #40]	; (80071cc <SysTick_Config+0x40>)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	3b01      	subs	r3, #1
 80071a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80071aa:	210f      	movs	r1, #15
 80071ac:	f04f 30ff 	mov.w	r0, #4294967295
 80071b0:	f7ff ff8e 	bl	80070d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80071b4:	4b05      	ldr	r3, [pc, #20]	; (80071cc <SysTick_Config+0x40>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80071ba:	4b04      	ldr	r3, [pc, #16]	; (80071cc <SysTick_Config+0x40>)
 80071bc:	2207      	movs	r2, #7
 80071be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	e000e010 	.word	0xe000e010

080071d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7ff ff29 	bl	8007030 <__NVIC_SetPriorityGrouping>
}
 80071de:	bf00      	nop
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b086      	sub	sp, #24
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	4603      	mov	r3, r0
 80071ee:	60b9      	str	r1, [r7, #8]
 80071f0:	607a      	str	r2, [r7, #4]
 80071f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80071f4:	f7ff ff40 	bl	8007078 <__NVIC_GetPriorityGrouping>
 80071f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	68b9      	ldr	r1, [r7, #8]
 80071fe:	6978      	ldr	r0, [r7, #20]
 8007200:	f7ff ff90 	bl	8007124 <NVIC_EncodePriority>
 8007204:	4602      	mov	r2, r0
 8007206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800720a:	4611      	mov	r1, r2
 800720c:	4618      	mov	r0, r3
 800720e:	f7ff ff5f 	bl	80070d0 <__NVIC_SetPriority>
}
 8007212:	bf00      	nop
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b082      	sub	sp, #8
 800721e:	af00      	add	r7, sp, #0
 8007220:	4603      	mov	r3, r0
 8007222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007228:	4618      	mov	r0, r3
 800722a:	f7ff ff33 	bl	8007094 <__NVIC_EnableIRQ>
}
 800722e:	bf00      	nop
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b082      	sub	sp, #8
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7ff ffa4 	bl	800718c <SysTick_Config>
 8007244:	4603      	mov	r3, r0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
	...

08007250 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e08d      	b.n	800737e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	4b47      	ldr	r3, [pc, #284]	; (8007388 <HAL_DMA_Init+0x138>)
 800726a:	429a      	cmp	r2, r3
 800726c:	d80f      	bhi.n	800728e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	4b45      	ldr	r3, [pc, #276]	; (800738c <HAL_DMA_Init+0x13c>)
 8007276:	4413      	add	r3, r2
 8007278:	4a45      	ldr	r2, [pc, #276]	; (8007390 <HAL_DMA_Init+0x140>)
 800727a:	fba2 2303 	umull	r2, r3, r2, r3
 800727e:	091b      	lsrs	r3, r3, #4
 8007280:	009a      	lsls	r2, r3, #2
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a42      	ldr	r2, [pc, #264]	; (8007394 <HAL_DMA_Init+0x144>)
 800728a:	641a      	str	r2, [r3, #64]	; 0x40
 800728c:	e00e      	b.n	80072ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	4b40      	ldr	r3, [pc, #256]	; (8007398 <HAL_DMA_Init+0x148>)
 8007296:	4413      	add	r3, r2
 8007298:	4a3d      	ldr	r2, [pc, #244]	; (8007390 <HAL_DMA_Init+0x140>)
 800729a:	fba2 2303 	umull	r2, r3, r2, r3
 800729e:	091b      	lsrs	r3, r3, #4
 80072a0:	009a      	lsls	r2, r3, #2
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a3c      	ldr	r2, [pc, #240]	; (800739c <HAL_DMA_Init+0x14c>)
 80072aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80072c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80072d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fa76 	bl	80077f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800730c:	d102      	bne.n	8007314 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800731c:	b2d2      	uxtb	r2, r2
 800731e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007328:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d010      	beq.n	8007354 <HAL_DMA_Init+0x104>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	2b04      	cmp	r3, #4
 8007338:	d80c      	bhi.n	8007354 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fa96 	bl	800786c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007344:	2200      	movs	r2, #0
 8007346:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007350:	605a      	str	r2, [r3, #4]
 8007352:	e008      	b.n	8007366 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	40020407 	.word	0x40020407
 800738c:	bffdfff8 	.word	0xbffdfff8
 8007390:	cccccccd 	.word	0xcccccccd
 8007394:	40020000 	.word	0x40020000
 8007398:	bffdfbf8 	.word	0xbffdfbf8
 800739c:	40020400 	.word	0x40020400

080073a0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
 80073ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d101      	bne.n	80073c0 <HAL_DMA_Start_IT+0x20>
 80073bc:	2302      	movs	r3, #2
 80073be:	e066      	b.n	800748e <HAL_DMA_Start_IT+0xee>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d155      	bne.n	8007480 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2202      	movs	r2, #2
 80073d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f022 0201 	bic.w	r2, r2, #1
 80073f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	68b9      	ldr	r1, [r7, #8]
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 f9bb 	bl	8007774 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007402:	2b00      	cmp	r3, #0
 8007404:	d008      	beq.n	8007418 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f042 020e 	orr.w	r2, r2, #14
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	e00f      	b.n	8007438 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f022 0204 	bic.w	r2, r2, #4
 8007426:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f042 020a 	orr.w	r2, r2, #10
 8007436:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d007      	beq.n	8007456 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007454:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800745a:	2b00      	cmp	r3, #0
 800745c:	d007      	beq.n	800746e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800746c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f042 0201 	orr.w	r2, r2, #1
 800747c:	601a      	str	r2, [r3, #0]
 800747e:	e005      	b.n	800748c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007488:	2302      	movs	r3, #2
 800748a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800748c:	7dfb      	ldrb	r3, [r7, #23]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007496:	b480      	push	{r7}
 8007498:	b085      	sub	sp, #20
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800749e:	2300      	movs	r3, #0
 80074a0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d005      	beq.n	80074ba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2204      	movs	r2, #4
 80074b2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	73fb      	strb	r3, [r7, #15]
 80074b8:	e037      	b.n	800752a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 020e 	bic.w	r2, r2, #14
 80074c8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074d8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 0201 	bic.w	r2, r2, #1
 80074e8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ee:	f003 021f 	and.w	r2, r3, #31
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f6:	2101      	movs	r1, #1
 80074f8:	fa01 f202 	lsl.w	r2, r1, r2
 80074fc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007506:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00c      	beq.n	800752a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800751a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800751e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007528:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800753a:	7bfb      	ldrb	r3, [r7, #15]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007550:	2300      	movs	r3, #0
 8007552:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b02      	cmp	r3, #2
 800755e:	d00d      	beq.n	800757c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2204      	movs	r2, #4
 8007564:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	73fb      	strb	r3, [r7, #15]
 800757a:	e047      	b.n	800760c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 020e 	bic.w	r2, r2, #14
 800758a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f022 0201 	bic.w	r2, r2, #1
 800759a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b0:	f003 021f 	and.w	r2, r3, #31
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b8:	2101      	movs	r1, #1
 80075ba:	fa01 f202 	lsl.w	r2, r1, r2
 80075be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80075c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00c      	beq.n	80075ec <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80075ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007600:	2b00      	cmp	r3, #0
 8007602:	d003      	beq.n	800760c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	4798      	blx	r3
    }
  }
  return status;
 800760c:	7bfb      	ldrb	r3, [r7, #15]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b084      	sub	sp, #16
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007632:	f003 031f 	and.w	r3, r3, #31
 8007636:	2204      	movs	r2, #4
 8007638:	409a      	lsls	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	4013      	ands	r3, r2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d026      	beq.n	8007690 <HAL_DMA_IRQHandler+0x7a>
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	f003 0304 	and.w	r3, r3, #4
 8007648:	2b00      	cmp	r3, #0
 800764a:	d021      	beq.n	8007690 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0320 	and.w	r3, r3, #32
 8007656:	2b00      	cmp	r3, #0
 8007658:	d107      	bne.n	800766a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0204 	bic.w	r2, r2, #4
 8007668:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766e:	f003 021f 	and.w	r2, r3, #31
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007676:	2104      	movs	r1, #4
 8007678:	fa01 f202 	lsl.w	r2, r1, r2
 800767c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007682:	2b00      	cmp	r3, #0
 8007684:	d071      	beq.n	800776a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800768e:	e06c      	b.n	800776a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007694:	f003 031f 	and.w	r3, r3, #31
 8007698:	2202      	movs	r2, #2
 800769a:	409a      	lsls	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4013      	ands	r3, r2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d02e      	beq.n	8007702 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d029      	beq.n	8007702 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0320 	and.w	r3, r3, #32
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10b      	bne.n	80076d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f022 020a 	bic.w	r2, r2, #10
 80076ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d8:	f003 021f 	and.w	r2, r3, #31
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e0:	2102      	movs	r1, #2
 80076e2:	fa01 f202 	lsl.w	r2, r1, r2
 80076e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d038      	beq.n	800776a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007700:	e033      	b.n	800776a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007706:	f003 031f 	and.w	r3, r3, #31
 800770a:	2208      	movs	r2, #8
 800770c:	409a      	lsls	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4013      	ands	r3, r2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d02a      	beq.n	800776c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	f003 0308 	and.w	r3, r3, #8
 800771c:	2b00      	cmp	r3, #0
 800771e:	d025      	beq.n	800776c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f022 020e 	bic.w	r2, r2, #14
 800772e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007734:	f003 021f 	and.w	r2, r3, #31
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773c:	2101      	movs	r1, #1
 800773e:	fa01 f202 	lsl.w	r2, r1, r2
 8007742:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800775e:	2b00      	cmp	r3, #0
 8007760:	d004      	beq.n	800776c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800776a:	bf00      	nop
 800776c:	bf00      	nop
}
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800778a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007790:	2b00      	cmp	r3, #0
 8007792:	d004      	beq.n	800779e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800779c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a2:	f003 021f 	and.w	r2, r3, #31
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	2101      	movs	r1, #1
 80077ac:	fa01 f202 	lsl.w	r2, r1, r2
 80077b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	2b10      	cmp	r3, #16
 80077c0:	d108      	bne.n	80077d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80077d2:	e007      	b.n	80077e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	60da      	str	r2, [r3, #12]
}
 80077e4:	bf00      	nop
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b087      	sub	sp, #28
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	461a      	mov	r2, r3
 80077fe:	4b16      	ldr	r3, [pc, #88]	; (8007858 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007800:	429a      	cmp	r2, r3
 8007802:	d802      	bhi.n	800780a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007804:	4b15      	ldr	r3, [pc, #84]	; (800785c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007806:	617b      	str	r3, [r7, #20]
 8007808:	e001      	b.n	800780e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800780a:	4b15      	ldr	r3, [pc, #84]	; (8007860 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800780c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	b2db      	uxtb	r3, r3
 8007818:	3b08      	subs	r3, #8
 800781a:	4a12      	ldr	r2, [pc, #72]	; (8007864 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800781c:	fba2 2303 	umull	r2, r3, r2, r3
 8007820:	091b      	lsrs	r3, r3, #4
 8007822:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007828:	089b      	lsrs	r3, r3, #2
 800782a:	009a      	lsls	r2, r3, #2
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	4413      	add	r3, r2
 8007830:	461a      	mov	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a0b      	ldr	r2, [pc, #44]	; (8007868 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800783a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f003 031f 	and.w	r3, r3, #31
 8007842:	2201      	movs	r2, #1
 8007844:	409a      	lsls	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	651a      	str	r2, [r3, #80]	; 0x50
}
 800784a:	bf00      	nop
 800784c:	371c      	adds	r7, #28
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	40020407 	.word	0x40020407
 800785c:	40020800 	.word	0x40020800
 8007860:	40020820 	.word	0x40020820
 8007864:	cccccccd 	.word	0xcccccccd
 8007868:	40020880 	.word	0x40020880

0800786c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	b2db      	uxtb	r3, r3
 800787a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	4b0b      	ldr	r3, [pc, #44]	; (80078ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007880:	4413      	add	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	461a      	mov	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a08      	ldr	r2, [pc, #32]	; (80078b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800788e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3b01      	subs	r3, #1
 8007894:	f003 031f 	and.w	r3, r3, #31
 8007898:	2201      	movs	r2, #1
 800789a:	409a      	lsls	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80078a0:	bf00      	nop
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	1000823f 	.word	0x1000823f
 80078b0:	40020940 	.word	0x40020940

080078b4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e147      	b.n	8007b56 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d106      	bne.n	80078e0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7fa fb30 	bl	8001f40 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	699a      	ldr	r2, [r3, #24]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f022 0210 	bic.w	r2, r2, #16
 80078ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078f0:	f7fd fece 	bl	8005690 <HAL_GetTick>
 80078f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80078f6:	e012      	b.n	800791e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80078f8:	f7fd feca 	bl	8005690 <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	2b0a      	cmp	r3, #10
 8007904:	d90b      	bls.n	800791e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800790a:	f043 0201 	orr.w	r2, r3, #1
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2203      	movs	r2, #3
 8007916:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e11b      	b.n	8007b56 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	f003 0308 	and.w	r3, r3, #8
 8007928:	2b08      	cmp	r3, #8
 800792a:	d0e5      	beq.n	80078f8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	699a      	ldr	r2, [r3, #24]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f042 0201 	orr.w	r2, r2, #1
 800793a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800793c:	f7fd fea8 	bl	8005690 <HAL_GetTick>
 8007940:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007942:	e012      	b.n	800796a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007944:	f7fd fea4 	bl	8005690 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b0a      	cmp	r3, #10
 8007950:	d90b      	bls.n	800796a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007956:	f043 0201 	orr.w	r2, r3, #1
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2203      	movs	r2, #3
 8007962:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e0f5      	b.n	8007b56 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	f003 0301 	and.w	r3, r3, #1
 8007974:	2b00      	cmp	r3, #0
 8007976:	d0e5      	beq.n	8007944 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	699a      	ldr	r2, [r3, #24]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f042 0202 	orr.w	r2, r2, #2
 8007986:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a74      	ldr	r2, [pc, #464]	; (8007b60 <HAL_FDCAN_Init+0x2ac>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d103      	bne.n	800799a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007992:	4a74      	ldr	r2, [pc, #464]	; (8007b64 <HAL_FDCAN_Init+0x2b0>)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	7c1b      	ldrb	r3, [r3, #16]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d108      	bne.n	80079b4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	699a      	ldr	r2, [r3, #24]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079b0:	619a      	str	r2, [r3, #24]
 80079b2:	e007      	b.n	80079c4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	699a      	ldr	r2, [r3, #24]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079c2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	7c5b      	ldrb	r3, [r3, #17]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d108      	bne.n	80079de <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699a      	ldr	r2, [r3, #24]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079da:	619a      	str	r2, [r3, #24]
 80079dc:	e007      	b.n	80079ee <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	699a      	ldr	r2, [r3, #24]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80079ec:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	7c9b      	ldrb	r3, [r3, #18]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d108      	bne.n	8007a08 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	699a      	ldr	r2, [r3, #24]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a04:	619a      	str	r2, [r3, #24]
 8007a06:	e007      	b.n	8007a18 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	699a      	ldr	r2, [r3, #24]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a16:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	689a      	ldr	r2, [r3, #8]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	699a      	ldr	r2, [r3, #24]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007a3c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	691a      	ldr	r2, [r3, #16]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f022 0210 	bic.w	r2, r2, #16
 8007a4c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d108      	bne.n	8007a68 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	699a      	ldr	r2, [r3, #24]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f042 0204 	orr.w	r2, r2, #4
 8007a64:	619a      	str	r2, [r3, #24]
 8007a66:	e02c      	b.n	8007ac2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d028      	beq.n	8007ac2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d01c      	beq.n	8007ab2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	699a      	ldr	r2, [r3, #24]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a86:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	691a      	ldr	r2, [r3, #16]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f042 0210 	orr.w	r2, r2, #16
 8007a96:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d110      	bne.n	8007ac2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	699a      	ldr	r2, [r3, #24]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f042 0220 	orr.w	r2, r2, #32
 8007aae:	619a      	str	r2, [r3, #24]
 8007ab0:	e007      	b.n	8007ac2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	699a      	ldr	r2, [r3, #24]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f042 0220 	orr.w	r2, r2, #32
 8007ac0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007ad2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
 8007ad8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007ada:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007aea:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007aec:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007af6:	d115      	bne.n	8007b24 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b02:	3b01      	subs	r3, #1
 8007b04:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007b06:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007b10:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007b20:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007b22:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	430a      	orrs	r2, r1
 8007b36:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f9c2 	bl	8007ec4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	40006400 	.word	0x40006400
 8007b64:	40006500 	.word	0x40006500

08007b68 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08a      	sub	sp, #40	; 0x28
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b76:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8007b7a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b84:	4013      	ands	r3, r2
 8007b86:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b8e:	f003 0307 	and.w	r3, r3, #7
 8007b92:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b9a:	6a3a      	ldr	r2, [r7, #32]
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007baa:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb2:	69fa      	ldr	r2, [r7, #28]
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bbe:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8007bc2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	4013      	ands	r3, r2
 8007bce:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007bda:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	4013      	ands	r3, r2
 8007be6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00d      	beq.n	8007c12 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d006      	beq.n	8007c12 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2240      	movs	r2, #64	; 0x40
 8007c0a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f939 	bl	8007e84 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d01b      	beq.n	8007c58 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d014      	beq.n	8007c58 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007c36:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	4013      	ands	r3, r2
 8007c44:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c4e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007c50:	6939      	ldr	r1, [r7, #16]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f8f7 	bl	8007e46 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d007      	beq.n	8007c6e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c64:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007c66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f8b6 	bl	8007dda <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007c6e:	6a3b      	ldr	r3, [r7, #32]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d007      	beq.n	8007c84 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6a3a      	ldr	r2, [r7, #32]
 8007c7a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007c7c:	6a39      	ldr	r1, [r7, #32]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f8b6 	bl	8007df0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d007      	beq.n	8007c9a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	69fa      	ldr	r2, [r7, #28]
 8007c90:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007c92:	69f9      	ldr	r1, [r7, #28]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f8b6 	bl	8007e06 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00e      	beq.n	8007cc6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d007      	beq.n	8007cc6 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cbe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f8ab 	bl	8007e1c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d01a      	beq.n	8007d0a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d013      	beq.n	8007d0a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007cea:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2280      	movs	r2, #128	; 0x80
 8007d00:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007d02:	68f9      	ldr	r1, [r7, #12]
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f893 	bl	8007e30 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00e      	beq.n	8007d36 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d007      	beq.n	8007d36 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007d2e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f893 	bl	8007e5c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00e      	beq.n	8007d62 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d007      	beq.n	8007d62 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007d5a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f887 	bl	8007e70 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d011      	beq.n	8007d94 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00a      	beq.n	8007d94 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007d86:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d007      	beq.n	8007daa <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007da2:	6979      	ldr	r1, [r7, #20]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f881 	bl	8007eac <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d009      	beq.n	8007dc4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	69ba      	ldr	r2, [r7, #24]
 8007db6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f863 	bl	8007e98 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007dd2:	bf00      	nop
 8007dd4:	3728      	adds	r7, #40	; 0x28
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b083      	sub	sp, #12
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8007dfa:	bf00      	nop
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007e3a:	bf00      	nop
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b083      	sub	sp, #12
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007eb6:	bf00      	nop
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
	...

08007ec4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007ecc:	4b27      	ldr	r3, [pc, #156]	; (8007f6c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8007ece:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ede:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee6:	041a      	lsls	r2, r3, #16
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	430a      	orrs	r2, r1
 8007eee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f04:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0c:	061a      	lsls	r2, r3, #24
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	60fb      	str	r3, [r7, #12]
 8007f44:	e005      	b.n	8007f52 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3304      	adds	r3, #4
 8007f50:	60fb      	str	r3, [r7, #12]
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d3f3      	bcc.n	8007f46 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8007f5e:	bf00      	nop
 8007f60:	bf00      	nop
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr
 8007f6c:	4000a400 	.word	0x4000a400

08007f70 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007f82:	4b24      	ldr	r3, [pc, #144]	; (8008014 <HAL_FLASH_Program+0xa4>)
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d101      	bne.n	8007f8e <HAL_FLASH_Program+0x1e>
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	e03e      	b.n	800800c <HAL_FLASH_Program+0x9c>
 8007f8e:	4b21      	ldr	r3, [pc, #132]	; (8008014 <HAL_FLASH_Program+0xa4>)
 8007f90:	2201      	movs	r2, #1
 8007f92:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007f94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007f98:	f000 f888 	bl	80080ac <FLASH_WaitForLastOperation>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8007fa0:	7dfb      	ldrb	r3, [r7, #23]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d12e      	bne.n	8008004 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007fa6:	4b1b      	ldr	r3, [pc, #108]	; (8008014 <HAL_FLASH_Program+0xa4>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d107      	bne.n	8007fc2 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8007fb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fb6:	68b8      	ldr	r0, [r7, #8]
 8007fb8:	f000 f8cc 	bl	8008154 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	613b      	str	r3, [r7, #16]
 8007fc0:	e010      	b.n	8007fe4 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d002      	beq.n	8007fce <HAL_FLASH_Program+0x5e>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d10a      	bne.n	8007fe4 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	68b8      	ldr	r0, [r7, #8]
 8007fd4:	f000 f8e4 	bl	80081a0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d102      	bne.n	8007fe4 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8007fde:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007fe2:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007fe4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007fe8:	f000 f860 	bl	80080ac <FLASH_WaitForLastOperation>
 8007fec:	4603      	mov	r3, r0
 8007fee:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d006      	beq.n	8008004 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8007ff6:	4b08      	ldr	r3, [pc, #32]	; (8008018 <HAL_FLASH_Program+0xa8>)
 8007ff8:	695a      	ldr	r2, [r3, #20]
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	43db      	mvns	r3, r3
 8007ffe:	4906      	ldr	r1, [pc, #24]	; (8008018 <HAL_FLASH_Program+0xa8>)
 8008000:	4013      	ands	r3, r2
 8008002:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008004:	4b03      	ldr	r3, [pc, #12]	; (8008014 <HAL_FLASH_Program+0xa4>)
 8008006:	2200      	movs	r2, #0
 8008008:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800800a:	7dfb      	ldrb	r3, [r7, #23]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3718      	adds	r7, #24
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	2000000c 	.word	0x2000000c
 8008018:	40022000 	.word	0x40022000

0800801c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8008026:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <HAL_FLASH_Unlock+0x38>)
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	2b00      	cmp	r3, #0
 800802c:	da0b      	bge.n	8008046 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800802e:	4b09      	ldr	r3, [pc, #36]	; (8008054 <HAL_FLASH_Unlock+0x38>)
 8008030:	4a09      	ldr	r2, [pc, #36]	; (8008058 <HAL_FLASH_Unlock+0x3c>)
 8008032:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008034:	4b07      	ldr	r3, [pc, #28]	; (8008054 <HAL_FLASH_Unlock+0x38>)
 8008036:	4a09      	ldr	r2, [pc, #36]	; (800805c <HAL_FLASH_Unlock+0x40>)
 8008038:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800803a:	4b06      	ldr	r3, [pc, #24]	; (8008054 <HAL_FLASH_Unlock+0x38>)
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	2b00      	cmp	r3, #0
 8008040:	da01      	bge.n	8008046 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8008046:	79fb      	ldrb	r3, [r7, #7]
}
 8008048:	4618      	mov	r0, r3
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr
 8008054:	40022000 	.word	0x40022000
 8008058:	45670123 	.word	0x45670123
 800805c:	cdef89ab 	.word	0xcdef89ab

08008060 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800806a:	4b09      	ldr	r3, [pc, #36]	; (8008090 <HAL_FLASH_Lock+0x30>)
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	4a08      	ldr	r2, [pc, #32]	; (8008090 <HAL_FLASH_Lock+0x30>)
 8008070:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008074:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8008076:	4b06      	ldr	r3, [pc, #24]	; (8008090 <HAL_FLASH_Lock+0x30>)
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	2b00      	cmp	r3, #0
 800807c:	da01      	bge.n	8008082 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 800807e:	2300      	movs	r3, #0
 8008080:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008082:	79fb      	ldrb	r3, [r7, #7]
}
 8008084:	4618      	mov	r0, r3
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	40022000 	.word	0x40022000

08008094 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 8008094:	b480      	push	{r7}
 8008096:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8008098:	4b03      	ldr	r3, [pc, #12]	; (80080a8 <HAL_FLASH_GetError+0x14>)
 800809a:	685b      	ldr	r3, [r3, #4]
}
 800809c:	4618      	mov	r0, r3
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	2000000c 	.word	0x2000000c

080080ac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80080b4:	f7fd faec 	bl	8005690 <HAL_GetTick>
 80080b8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80080ba:	e009      	b.n	80080d0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80080bc:	f7fd fae8 	bl	8005690 <HAL_GetTick>
 80080c0:	4602      	mov	r2, r0
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d201      	bcs.n	80080d0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e038      	b.n	8008142 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80080d0:	4b1e      	ldr	r3, [pc, #120]	; (800814c <FLASH_WaitForLastOperation+0xa0>)
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080dc:	d0ee      	beq.n	80080bc <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80080de:	4b1b      	ldr	r3, [pc, #108]	; (800814c <FLASH_WaitForLastOperation+0xa0>)
 80080e0:	691a      	ldr	r2, [r3, #16]
 80080e2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80080e6:	4013      	ands	r3, r2
 80080e8:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d01e      	beq.n	800812e <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80080f0:	4b17      	ldr	r3, [pc, #92]	; (8008150 <FLASH_WaitForLastOperation+0xa4>)
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	4a15      	ldr	r2, [pc, #84]	; (8008150 <FLASH_WaitForLastOperation+0xa4>)
 80080fa:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d007      	beq.n	8008116 <FLASH_WaitForLastOperation+0x6a>
 8008106:	4b11      	ldr	r3, [pc, #68]	; (800814c <FLASH_WaitForLastOperation+0xa0>)
 8008108:	699a      	ldr	r2, [r3, #24]
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008110:	490e      	ldr	r1, [pc, #56]	; (800814c <FLASH_WaitForLastOperation+0xa0>)
 8008112:	4313      	orrs	r3, r2
 8008114:	618b      	str	r3, [r1, #24]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800811c:	2b00      	cmp	r3, #0
 800811e:	d004      	beq.n	800812a <FLASH_WaitForLastOperation+0x7e>
 8008120:	4a0a      	ldr	r2, [pc, #40]	; (800814c <FLASH_WaitForLastOperation+0xa0>)
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008128:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e009      	b.n	8008142 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800812e:	4b07      	ldr	r3, [pc, #28]	; (800814c <FLASH_WaitForLastOperation+0xa0>)
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	2b01      	cmp	r3, #1
 8008138:	d102      	bne.n	8008140 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800813a:	4b04      	ldr	r3, [pc, #16]	; (800814c <FLASH_WaitForLastOperation+0xa0>)
 800813c:	2201      	movs	r2, #1
 800813e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	40022000 	.word	0x40022000
 8008150:	2000000c 	.word	0x2000000c

08008154 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008160:	4b0e      	ldr	r3, [pc, #56]	; (800819c <FLASH_Program_DoubleWord+0x48>)
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	4a0d      	ldr	r2, [pc, #52]	; (800819c <FLASH_Program_DoubleWord+0x48>)
 8008166:	f043 0301 	orr.w	r3, r3, #1
 800816a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8008172:	f3bf 8f6f 	isb	sy
}
 8008176:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8008178:	e9d7 0100 	ldrd	r0, r1, [r7]
 800817c:	f04f 0200 	mov.w	r2, #0
 8008180:	f04f 0300 	mov.w	r3, #0
 8008184:	000a      	movs	r2, r1
 8008186:	2300      	movs	r3, #0
 8008188:	68f9      	ldr	r1, [r7, #12]
 800818a:	3104      	adds	r1, #4
 800818c:	4613      	mov	r3, r2
 800818e:	600b      	str	r3, [r1, #0]
}
 8008190:	bf00      	nop
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	40022000 	.word	0x40022000

080081a0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b089      	sub	sp, #36	; 0x24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80081aa:	2340      	movs	r3, #64	; 0x40
 80081ac:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80081b6:	4b14      	ldr	r3, [pc, #80]	; (8008208 <FLASH_Program_Fast+0x68>)
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	4a13      	ldr	r2, [pc, #76]	; (8008208 <FLASH_Program_Fast+0x68>)
 80081bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081c2:	f3ef 8310 	mrs	r3, PRIMASK
 80081c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80081c8:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80081ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80081cc:	b672      	cpsid	i
}
 80081ce:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	3304      	adds	r3, #4
 80081dc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	3304      	adds	r3, #4
 80081e2:	617b      	str	r3, [r7, #20]
    row_index--;
 80081e4:	7ffb      	ldrb	r3, [r7, #31]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80081ea:	7ffb      	ldrb	r3, [r7, #31]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1ef      	bne.n	80081d0 <FLASH_Program_Fast+0x30>
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	f383 8810 	msr	PRIMASK, r3
}
 80081fa:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80081fc:	bf00      	nop
 80081fe:	3724      	adds	r7, #36	; 0x24
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr
 8008208:	40022000 	.word	0x40022000

0800820c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008216:	4b4a      	ldr	r3, [pc, #296]	; (8008340 <HAL_FLASHEx_Erase+0x134>)
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d101      	bne.n	8008222 <HAL_FLASHEx_Erase+0x16>
 800821e:	2302      	movs	r3, #2
 8008220:	e089      	b.n	8008336 <HAL_FLASHEx_Erase+0x12a>
 8008222:	4b47      	ldr	r3, [pc, #284]	; (8008340 <HAL_FLASHEx_Erase+0x134>)
 8008224:	2201      	movs	r2, #1
 8008226:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008228:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800822c:	f7ff ff3e 	bl	80080ac <FLASH_WaitForLastOperation>
 8008230:	4603      	mov	r3, r0
 8008232:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008234:	7bfb      	ldrb	r3, [r7, #15]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d179      	bne.n	800832e <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800823a:	4b41      	ldr	r3, [pc, #260]	; (8008340 <HAL_FLASHEx_Erase+0x134>)
 800823c:	2200      	movs	r2, #0
 800823e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8008240:	4b40      	ldr	r3, [pc, #256]	; (8008344 <HAL_FLASHEx_Erase+0x138>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008248:	2b00      	cmp	r3, #0
 800824a:	d019      	beq.n	8008280 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800824c:	4b3d      	ldr	r3, [pc, #244]	; (8008344 <HAL_FLASHEx_Erase+0x138>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a3c      	ldr	r2, [pc, #240]	; (8008344 <HAL_FLASHEx_Erase+0x138>)
 8008252:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008256:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8008258:	4b3a      	ldr	r3, [pc, #232]	; (8008344 <HAL_FLASHEx_Erase+0x138>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008260:	2b00      	cmp	r3, #0
 8008262:	d009      	beq.n	8008278 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8008264:	4b37      	ldr	r3, [pc, #220]	; (8008344 <HAL_FLASHEx_Erase+0x138>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a36      	ldr	r2, [pc, #216]	; (8008344 <HAL_FLASHEx_Erase+0x138>)
 800826a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800826e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8008270:	4b33      	ldr	r3, [pc, #204]	; (8008340 <HAL_FLASHEx_Erase+0x134>)
 8008272:	2203      	movs	r2, #3
 8008274:	771a      	strb	r2, [r3, #28]
 8008276:	e016      	b.n	80082a6 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8008278:	4b31      	ldr	r3, [pc, #196]	; (8008340 <HAL_FLASHEx_Erase+0x134>)
 800827a:	2201      	movs	r2, #1
 800827c:	771a      	strb	r2, [r3, #28]
 800827e:	e012      	b.n	80082a6 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8008280:	4b30      	ldr	r3, [pc, #192]	; (8008344 <HAL_FLASHEx_Erase+0x138>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008288:	2b00      	cmp	r3, #0
 800828a:	d009      	beq.n	80082a0 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800828c:	4b2d      	ldr	r3, [pc, #180]	; (8008344 <HAL_FLASHEx_Erase+0x138>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a2c      	ldr	r2, [pc, #176]	; (8008344 <HAL_FLASHEx_Erase+0x138>)
 8008292:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008296:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8008298:	4b29      	ldr	r3, [pc, #164]	; (8008340 <HAL_FLASHEx_Erase+0x134>)
 800829a:	2202      	movs	r2, #2
 800829c:	771a      	strb	r2, [r3, #28]
 800829e:	e002      	b.n	80082a6 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80082a0:	4b27      	ldr	r3, [pc, #156]	; (8008340 <HAL_FLASHEx_Erase+0x134>)
 80082a2:	2200      	movs	r2, #0
 80082a4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d111      	bne.n	80082d2 <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 f848 	bl	8008348 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80082b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80082bc:	f7ff fef6 	bl	80080ac <FLASH_WaitForLastOperation>
 80082c0:	4603      	mov	r3, r0
 80082c2:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80082c4:	4b1f      	ldr	r3, [pc, #124]	; (8008344 <HAL_FLASHEx_Erase+0x138>)
 80082c6:	695b      	ldr	r3, [r3, #20]
 80082c8:	4a1e      	ldr	r2, [pc, #120]	; (8008344 <HAL_FLASHEx_Erase+0x138>)
 80082ca:	f023 0304 	bic.w	r3, r3, #4
 80082ce:	6153      	str	r3, [r2, #20]
 80082d0:	e02b      	b.n	800832a <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	f04f 32ff 	mov.w	r2, #4294967295
 80082d8:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	60bb      	str	r3, [r7, #8]
 80082e0:	e01b      	b.n	800831a <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	4619      	mov	r1, r3
 80082e8:	68b8      	ldr	r0, [r7, #8]
 80082ea:	f000 f84b 	bl	8008384 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80082ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80082f2:	f7ff fedb 	bl	80080ac <FLASH_WaitForLastOperation>
 80082f6:	4603      	mov	r3, r0
 80082f8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80082fa:	4b12      	ldr	r3, [pc, #72]	; (8008344 <HAL_FLASHEx_Erase+0x138>)
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	4a11      	ldr	r2, [pc, #68]	; (8008344 <HAL_FLASHEx_Erase+0x138>)
 8008300:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8008304:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d003      	beq.n	8008314 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	601a      	str	r2, [r3, #0]
          break;
 8008312:	e00a      	b.n	800832a <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	3301      	adds	r3, #1
 8008318:	60bb      	str	r3, [r7, #8]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	689a      	ldr	r2, [r3, #8]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	4413      	add	r3, r2
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	429a      	cmp	r2, r3
 8008328:	d3db      	bcc.n	80082e2 <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800832a:	f000 f84f 	bl	80083cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800832e:	4b04      	ldr	r3, [pc, #16]	; (8008340 <HAL_FLASHEx_Erase+0x134>)
 8008330:	2200      	movs	r2, #0
 8008332:	701a      	strb	r2, [r3, #0]

  return status;
 8008334:	7bfb      	ldrb	r3, [r7, #15]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	2000000c 	.word	0x2000000c
 8008344:	40022000 	.word	0x40022000

08008348 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	2b00      	cmp	r3, #0
 8008358:	d005      	beq.n	8008366 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800835a:	4b09      	ldr	r3, [pc, #36]	; (8008380 <FLASH_MassErase+0x38>)
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	4a08      	ldr	r2, [pc, #32]	; (8008380 <FLASH_MassErase+0x38>)
 8008360:	f043 0304 	orr.w	r3, r3, #4
 8008364:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008366:	4b06      	ldr	r3, [pc, #24]	; (8008380 <FLASH_MassErase+0x38>)
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	4a05      	ldr	r2, [pc, #20]	; (8008380 <FLASH_MassErase+0x38>)
 800836c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008370:	6153      	str	r3, [r2, #20]
}
 8008372:	bf00      	nop
 8008374:	370c      	adds	r7, #12
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	40022000 	.word	0x40022000

08008384 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800838e:	4b0e      	ldr	r3, [pc, #56]	; (80083c8 <FLASH_PageErase+0x44>)
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	00db      	lsls	r3, r3, #3
 800839a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800839e:	490a      	ldr	r1, [pc, #40]	; (80083c8 <FLASH_PageErase+0x44>)
 80083a0:	4313      	orrs	r3, r2
 80083a2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80083a4:	4b08      	ldr	r3, [pc, #32]	; (80083c8 <FLASH_PageErase+0x44>)
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	4a07      	ldr	r2, [pc, #28]	; (80083c8 <FLASH_PageErase+0x44>)
 80083aa:	f043 0302 	orr.w	r3, r3, #2
 80083ae:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80083b0:	4b05      	ldr	r3, [pc, #20]	; (80083c8 <FLASH_PageErase+0x44>)
 80083b2:	695b      	ldr	r3, [r3, #20]
 80083b4:	4a04      	ldr	r2, [pc, #16]	; (80083c8 <FLASH_PageErase+0x44>)
 80083b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083ba:	6153      	str	r3, [r2, #20]
}
 80083bc:	bf00      	nop
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr
 80083c8:	40022000 	.word	0x40022000

080083cc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80083d2:	4b1e      	ldr	r3, [pc, #120]	; (800844c <FLASH_FlushCaches+0x80>)
 80083d4:	7f1b      	ldrb	r3, [r3, #28]
 80083d6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80083d8:	79fb      	ldrb	r3, [r7, #7]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d002      	beq.n	80083e4 <FLASH_FlushCaches+0x18>
 80083de:	79fb      	ldrb	r3, [r7, #7]
 80083e0:	2b03      	cmp	r3, #3
 80083e2:	d111      	bne.n	8008408 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80083e4:	4b1a      	ldr	r3, [pc, #104]	; (8008450 <FLASH_FlushCaches+0x84>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a19      	ldr	r2, [pc, #100]	; (8008450 <FLASH_FlushCaches+0x84>)
 80083ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	4b17      	ldr	r3, [pc, #92]	; (8008450 <FLASH_FlushCaches+0x84>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a16      	ldr	r2, [pc, #88]	; (8008450 <FLASH_FlushCaches+0x84>)
 80083f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083fa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80083fc:	4b14      	ldr	r3, [pc, #80]	; (8008450 <FLASH_FlushCaches+0x84>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a13      	ldr	r2, [pc, #76]	; (8008450 <FLASH_FlushCaches+0x84>)
 8008402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008406:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8008408:	79fb      	ldrb	r3, [r7, #7]
 800840a:	2b02      	cmp	r3, #2
 800840c:	d002      	beq.n	8008414 <FLASH_FlushCaches+0x48>
 800840e:	79fb      	ldrb	r3, [r7, #7]
 8008410:	2b03      	cmp	r3, #3
 8008412:	d111      	bne.n	8008438 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008414:	4b0e      	ldr	r3, [pc, #56]	; (8008450 <FLASH_FlushCaches+0x84>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a0d      	ldr	r2, [pc, #52]	; (8008450 <FLASH_FlushCaches+0x84>)
 800841a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800841e:	6013      	str	r3, [r2, #0]
 8008420:	4b0b      	ldr	r3, [pc, #44]	; (8008450 <FLASH_FlushCaches+0x84>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a0a      	ldr	r2, [pc, #40]	; (8008450 <FLASH_FlushCaches+0x84>)
 8008426:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800842a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800842c:	4b08      	ldr	r3, [pc, #32]	; (8008450 <FLASH_FlushCaches+0x84>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a07      	ldr	r2, [pc, #28]	; (8008450 <FLASH_FlushCaches+0x84>)
 8008432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008436:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008438:	4b04      	ldr	r3, [pc, #16]	; (800844c <FLASH_FlushCaches+0x80>)
 800843a:	2200      	movs	r2, #0
 800843c:	771a      	strb	r2, [r3, #28]
}
 800843e:	bf00      	nop
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	2000000c 	.word	0x2000000c
 8008450:	40022000 	.word	0x40022000

08008454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008454:	b480      	push	{r7}
 8008456:	b087      	sub	sp, #28
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800845e:	2300      	movs	r3, #0
 8008460:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008462:	e15a      	b.n	800871a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	2101      	movs	r1, #1
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	fa01 f303 	lsl.w	r3, r1, r3
 8008470:	4013      	ands	r3, r2
 8008472:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2b00      	cmp	r3, #0
 8008478:	f000 814c 	beq.w	8008714 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d00b      	beq.n	800849c <HAL_GPIO_Init+0x48>
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	2b02      	cmp	r3, #2
 800848a:	d007      	beq.n	800849c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008490:	2b11      	cmp	r3, #17
 8008492:	d003      	beq.n	800849c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	2b12      	cmp	r3, #18
 800849a:	d130      	bne.n	80084fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	005b      	lsls	r3, r3, #1
 80084a6:	2203      	movs	r2, #3
 80084a8:	fa02 f303 	lsl.w	r3, r2, r3
 80084ac:	43db      	mvns	r3, r3
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	4013      	ands	r3, r2
 80084b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	68da      	ldr	r2, [r3, #12]
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	005b      	lsls	r3, r3, #1
 80084bc:	fa02 f303 	lsl.w	r3, r2, r3
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80084d2:	2201      	movs	r2, #1
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	fa02 f303 	lsl.w	r3, r2, r3
 80084da:	43db      	mvns	r3, r3
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	4013      	ands	r3, r2
 80084e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	091b      	lsrs	r3, r3, #4
 80084e8:	f003 0201 	and.w	r2, r3, #1
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	fa02 f303 	lsl.w	r3, r2, r3
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	693a      	ldr	r2, [r7, #16]
 80084fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	005b      	lsls	r3, r3, #1
 8008508:	2203      	movs	r2, #3
 800850a:	fa02 f303 	lsl.w	r3, r2, r3
 800850e:	43db      	mvns	r3, r3
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	4013      	ands	r3, r2
 8008514:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	689a      	ldr	r2, [r3, #8]
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	005b      	lsls	r3, r3, #1
 800851e:	fa02 f303 	lsl.w	r3, r2, r3
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	4313      	orrs	r3, r2
 8008526:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	2b02      	cmp	r3, #2
 8008534:	d003      	beq.n	800853e <HAL_GPIO_Init+0xea>
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	2b12      	cmp	r3, #18
 800853c:	d123      	bne.n	8008586 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	08da      	lsrs	r2, r3, #3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	3208      	adds	r2, #8
 8008546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800854a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	f003 0307 	and.w	r3, r3, #7
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	220f      	movs	r2, #15
 8008556:	fa02 f303 	lsl.w	r3, r2, r3
 800855a:	43db      	mvns	r3, r3
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	4013      	ands	r3, r2
 8008560:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	691a      	ldr	r2, [r3, #16]
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f003 0307 	and.w	r3, r3, #7
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	fa02 f303 	lsl.w	r3, r2, r3
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	4313      	orrs	r3, r2
 8008576:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	08da      	lsrs	r2, r3, #3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	3208      	adds	r2, #8
 8008580:	6939      	ldr	r1, [r7, #16]
 8008582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	005b      	lsls	r3, r3, #1
 8008590:	2203      	movs	r2, #3
 8008592:	fa02 f303 	lsl.w	r3, r2, r3
 8008596:	43db      	mvns	r3, r3
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	4013      	ands	r3, r2
 800859c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f003 0203 	and.w	r2, r3, #3
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	005b      	lsls	r3, r3, #1
 80085aa:	fa02 f303 	lsl.w	r3, r2, r3
 80085ae:	693a      	ldr	r2, [r7, #16]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 80a6 	beq.w	8008714 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085c8:	4b5b      	ldr	r3, [pc, #364]	; (8008738 <HAL_GPIO_Init+0x2e4>)
 80085ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085cc:	4a5a      	ldr	r2, [pc, #360]	; (8008738 <HAL_GPIO_Init+0x2e4>)
 80085ce:	f043 0301 	orr.w	r3, r3, #1
 80085d2:	6613      	str	r3, [r2, #96]	; 0x60
 80085d4:	4b58      	ldr	r3, [pc, #352]	; (8008738 <HAL_GPIO_Init+0x2e4>)
 80085d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085d8:	f003 0301 	and.w	r3, r3, #1
 80085dc:	60bb      	str	r3, [r7, #8]
 80085de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80085e0:	4a56      	ldr	r2, [pc, #344]	; (800873c <HAL_GPIO_Init+0x2e8>)
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	089b      	lsrs	r3, r3, #2
 80085e6:	3302      	adds	r3, #2
 80085e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	f003 0303 	and.w	r3, r3, #3
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	220f      	movs	r2, #15
 80085f8:	fa02 f303 	lsl.w	r3, r2, r3
 80085fc:	43db      	mvns	r3, r3
 80085fe:	693a      	ldr	r2, [r7, #16]
 8008600:	4013      	ands	r3, r2
 8008602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800860a:	d01f      	beq.n	800864c <HAL_GPIO_Init+0x1f8>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a4c      	ldr	r2, [pc, #304]	; (8008740 <HAL_GPIO_Init+0x2ec>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d019      	beq.n	8008648 <HAL_GPIO_Init+0x1f4>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a4b      	ldr	r2, [pc, #300]	; (8008744 <HAL_GPIO_Init+0x2f0>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d013      	beq.n	8008644 <HAL_GPIO_Init+0x1f0>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a4a      	ldr	r2, [pc, #296]	; (8008748 <HAL_GPIO_Init+0x2f4>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d00d      	beq.n	8008640 <HAL_GPIO_Init+0x1ec>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a49      	ldr	r2, [pc, #292]	; (800874c <HAL_GPIO_Init+0x2f8>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d007      	beq.n	800863c <HAL_GPIO_Init+0x1e8>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a48      	ldr	r2, [pc, #288]	; (8008750 <HAL_GPIO_Init+0x2fc>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d101      	bne.n	8008638 <HAL_GPIO_Init+0x1e4>
 8008634:	2305      	movs	r3, #5
 8008636:	e00a      	b.n	800864e <HAL_GPIO_Init+0x1fa>
 8008638:	2306      	movs	r3, #6
 800863a:	e008      	b.n	800864e <HAL_GPIO_Init+0x1fa>
 800863c:	2304      	movs	r3, #4
 800863e:	e006      	b.n	800864e <HAL_GPIO_Init+0x1fa>
 8008640:	2303      	movs	r3, #3
 8008642:	e004      	b.n	800864e <HAL_GPIO_Init+0x1fa>
 8008644:	2302      	movs	r3, #2
 8008646:	e002      	b.n	800864e <HAL_GPIO_Init+0x1fa>
 8008648:	2301      	movs	r3, #1
 800864a:	e000      	b.n	800864e <HAL_GPIO_Init+0x1fa>
 800864c:	2300      	movs	r3, #0
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	f002 0203 	and.w	r2, r2, #3
 8008654:	0092      	lsls	r2, r2, #2
 8008656:	4093      	lsls	r3, r2
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	4313      	orrs	r3, r2
 800865c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800865e:	4937      	ldr	r1, [pc, #220]	; (800873c <HAL_GPIO_Init+0x2e8>)
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	089b      	lsrs	r3, r3, #2
 8008664:	3302      	adds	r3, #2
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800866c:	4b39      	ldr	r3, [pc, #228]	; (8008754 <HAL_GPIO_Init+0x300>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	43db      	mvns	r3, r3
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	4013      	ands	r3, r2
 800867a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d003      	beq.n	8008690 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	4313      	orrs	r3, r2
 800868e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008690:	4a30      	ldr	r2, [pc, #192]	; (8008754 <HAL_GPIO_Init+0x300>)
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8008696:	4b2f      	ldr	r3, [pc, #188]	; (8008754 <HAL_GPIO_Init+0x300>)
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	43db      	mvns	r3, r3
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	4013      	ands	r3, r2
 80086a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80086ba:	4a26      	ldr	r2, [pc, #152]	; (8008754 <HAL_GPIO_Init+0x300>)
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80086c0:	4b24      	ldr	r3, [pc, #144]	; (8008754 <HAL_GPIO_Init+0x300>)
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	43db      	mvns	r3, r3
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	4013      	ands	r3, r2
 80086ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d003      	beq.n	80086e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80086e4:	4a1b      	ldr	r2, [pc, #108]	; (8008754 <HAL_GPIO_Init+0x300>)
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80086ea:	4b1a      	ldr	r3, [pc, #104]	; (8008754 <HAL_GPIO_Init+0x300>)
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	43db      	mvns	r3, r3
 80086f4:	693a      	ldr	r2, [r7, #16]
 80086f6:	4013      	ands	r3, r2
 80086f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d003      	beq.n	800870e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	4313      	orrs	r3, r2
 800870c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800870e:	4a11      	ldr	r2, [pc, #68]	; (8008754 <HAL_GPIO_Init+0x300>)
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	3301      	adds	r3, #1
 8008718:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	fa22 f303 	lsr.w	r3, r2, r3
 8008724:	2b00      	cmp	r3, #0
 8008726:	f47f ae9d 	bne.w	8008464 <HAL_GPIO_Init+0x10>
  }
}
 800872a:	bf00      	nop
 800872c:	bf00      	nop
 800872e:	371c      	adds	r7, #28
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	40021000 	.word	0x40021000
 800873c:	40010000 	.word	0x40010000
 8008740:	48000400 	.word	0x48000400
 8008744:	48000800 	.word	0x48000800
 8008748:	48000c00 	.word	0x48000c00
 800874c:	48001000 	.word	0x48001000
 8008750:	48001400 	.word	0x48001400
 8008754:	40010400 	.word	0x40010400

08008758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	807b      	strh	r3, [r7, #2]
 8008764:	4613      	mov	r3, r2
 8008766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008768:	787b      	ldrb	r3, [r7, #1]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d003      	beq.n	8008776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800876e:	887a      	ldrh	r2, [r7, #2]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008774:	e002      	b.n	800877c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008776:	887a      	ldrh	r2, [r7, #2]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800877c:	bf00      	nop
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d101      	bne.n	800879a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e081      	b.n	800889e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d106      	bne.n	80087b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7fb fafc 	bl	8003dac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2224      	movs	r2, #36	; 0x24
 80087b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f022 0201 	bic.w	r2, r2, #1
 80087ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80087d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	689a      	ldr	r2, [r3, #8]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80087e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d107      	bne.n	8008802 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	689a      	ldr	r2, [r3, #8]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087fe:	609a      	str	r2, [r3, #8]
 8008800:	e006      	b.n	8008810 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	689a      	ldr	r2, [r3, #8]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800880e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	2b02      	cmp	r3, #2
 8008816:	d104      	bne.n	8008822 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008820:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	6812      	ldr	r2, [r2, #0]
 800882c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008834:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68da      	ldr	r2, [r3, #12]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008844:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	691a      	ldr	r2, [r3, #16]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	ea42 0103 	orr.w	r1, r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	699b      	ldr	r3, [r3, #24]
 8008856:	021a      	lsls	r2, r3, #8
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	430a      	orrs	r2, r1
 800885e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	69d9      	ldr	r1, [r3, #28]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a1a      	ldr	r2, [r3, #32]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	430a      	orrs	r2, r1
 800886e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f042 0201 	orr.w	r2, r2, #1
 800887e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2220      	movs	r2, #32
 800888a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
	...

080088a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b088      	sub	sp, #32
 80088ac:	af02      	add	r7, sp, #8
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	4608      	mov	r0, r1
 80088b2:	4611      	mov	r1, r2
 80088b4:	461a      	mov	r2, r3
 80088b6:	4603      	mov	r3, r0
 80088b8:	817b      	strh	r3, [r7, #10]
 80088ba:	460b      	mov	r3, r1
 80088bc:	813b      	strh	r3, [r7, #8]
 80088be:	4613      	mov	r3, r2
 80088c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b20      	cmp	r3, #32
 80088cc:	f040 80f9 	bne.w	8008ac2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80088d0:	6a3b      	ldr	r3, [r7, #32]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d002      	beq.n	80088dc <HAL_I2C_Mem_Write+0x34>
 80088d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d105      	bne.n	80088e8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e0ed      	b.n	8008ac4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d101      	bne.n	80088f6 <HAL_I2C_Mem_Write+0x4e>
 80088f2:	2302      	movs	r3, #2
 80088f4:	e0e6      	b.n	8008ac4 <HAL_I2C_Mem_Write+0x21c>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80088fe:	f7fc fec7 	bl	8005690 <HAL_GetTick>
 8008902:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	2319      	movs	r3, #25
 800890a:	2201      	movs	r2, #1
 800890c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 fac3 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e0d1      	b.n	8008ac4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2221      	movs	r2, #33	; 0x21
 8008924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2240      	movs	r2, #64	; 0x40
 800892c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6a3a      	ldr	r2, [r7, #32]
 800893a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008940:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008948:	88f8      	ldrh	r0, [r7, #6]
 800894a:	893a      	ldrh	r2, [r7, #8]
 800894c:	8979      	ldrh	r1, [r7, #10]
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	9301      	str	r3, [sp, #4]
 8008952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008954:	9300      	str	r3, [sp, #0]
 8008956:	4603      	mov	r3, r0
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f000 f9d3 	bl	8008d04 <I2C_RequestMemoryWrite>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d005      	beq.n	8008970 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e0a9      	b.n	8008ac4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008974:	b29b      	uxth	r3, r3
 8008976:	2bff      	cmp	r3, #255	; 0xff
 8008978:	d90e      	bls.n	8008998 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	22ff      	movs	r2, #255	; 0xff
 800897e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008984:	b2da      	uxtb	r2, r3
 8008986:	8979      	ldrh	r1, [r7, #10]
 8008988:	2300      	movs	r3, #0
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f000 fba5 	bl	80090e0 <I2C_TransferConfig>
 8008996:	e00f      	b.n	80089b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800899c:	b29a      	uxth	r2, r3
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089a6:	b2da      	uxtb	r2, r3
 80089a8:	8979      	ldrh	r1, [r7, #10]
 80089aa:	2300      	movs	r3, #0
 80089ac:	9300      	str	r3, [sp, #0]
 80089ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	f000 fb94 	bl	80090e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089b8:	697a      	ldr	r2, [r7, #20]
 80089ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 faad 	bl	8008f1c <I2C_WaitOnTXISFlagUntilTimeout>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d001      	beq.n	80089cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e07b      	b.n	8008ac4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d0:	781a      	ldrb	r2, [r3, #0]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089dc:	1c5a      	adds	r2, r3, #1
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	3b01      	subs	r3, #1
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089f4:	3b01      	subs	r3, #1
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d034      	beq.n	8008a70 <HAL_I2C_Mem_Write+0x1c8>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d130      	bne.n	8008a70 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a14:	2200      	movs	r2, #0
 8008a16:	2180      	movs	r1, #128	; 0x80
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f000 fa3f 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d001      	beq.n	8008a28 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e04d      	b.n	8008ac4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	2bff      	cmp	r3, #255	; 0xff
 8008a30:	d90e      	bls.n	8008a50 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	22ff      	movs	r2, #255	; 0xff
 8008a36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a3c:	b2da      	uxtb	r2, r3
 8008a3e:	8979      	ldrh	r1, [r7, #10]
 8008a40:	2300      	movs	r3, #0
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f000 fb49 	bl	80090e0 <I2C_TransferConfig>
 8008a4e:	e00f      	b.n	8008a70 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a5e:	b2da      	uxtb	r2, r3
 8008a60:	8979      	ldrh	r1, [r7, #10]
 8008a62:	2300      	movs	r3, #0
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f000 fb38 	bl	80090e0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d19e      	bne.n	80089b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f000 fa8c 	bl	8008f9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d001      	beq.n	8008a8e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e01a      	b.n	8008ac4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2220      	movs	r2, #32
 8008a94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	6859      	ldr	r1, [r3, #4]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	4b0a      	ldr	r3, [pc, #40]	; (8008acc <HAL_I2C_Mem_Write+0x224>)
 8008aa2:	400b      	ands	r3, r1
 8008aa4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2220      	movs	r2, #32
 8008aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	e000      	b.n	8008ac4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008ac2:	2302      	movs	r3, #2
  }
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3718      	adds	r7, #24
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	fe00e800 	.word	0xfe00e800

08008ad0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b088      	sub	sp, #32
 8008ad4:	af02      	add	r7, sp, #8
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	4608      	mov	r0, r1
 8008ada:	4611      	mov	r1, r2
 8008adc:	461a      	mov	r2, r3
 8008ade:	4603      	mov	r3, r0
 8008ae0:	817b      	strh	r3, [r7, #10]
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	813b      	strh	r3, [r7, #8]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b20      	cmp	r3, #32
 8008af4:	f040 80fd 	bne.w	8008cf2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008af8:	6a3b      	ldr	r3, [r7, #32]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d002      	beq.n	8008b04 <HAL_I2C_Mem_Read+0x34>
 8008afe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d105      	bne.n	8008b10 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b0a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e0f1      	b.n	8008cf4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d101      	bne.n	8008b1e <HAL_I2C_Mem_Read+0x4e>
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	e0ea      	b.n	8008cf4 <HAL_I2C_Mem_Read+0x224>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2201      	movs	r2, #1
 8008b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008b26:	f7fc fdb3 	bl	8005690 <HAL_GetTick>
 8008b2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	2319      	movs	r3, #25
 8008b32:	2201      	movs	r2, #1
 8008b34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f000 f9af 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d001      	beq.n	8008b48 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e0d5      	b.n	8008cf4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2222      	movs	r2, #34	; 0x22
 8008b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2240      	movs	r2, #64	; 0x40
 8008b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6a3a      	ldr	r2, [r7, #32]
 8008b62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008b68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008b70:	88f8      	ldrh	r0, [r7, #6]
 8008b72:	893a      	ldrh	r2, [r7, #8]
 8008b74:	8979      	ldrh	r1, [r7, #10]
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	9301      	str	r3, [sp, #4]
 8008b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	4603      	mov	r3, r0
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f000 f913 	bl	8008dac <I2C_RequestMemoryRead>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d005      	beq.n	8008b98 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e0ad      	b.n	8008cf4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	2bff      	cmp	r3, #255	; 0xff
 8008ba0:	d90e      	bls.n	8008bc0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	22ff      	movs	r2, #255	; 0xff
 8008ba6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	8979      	ldrh	r1, [r7, #10]
 8008bb0:	4b52      	ldr	r3, [pc, #328]	; (8008cfc <HAL_I2C_Mem_Read+0x22c>)
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f000 fa91 	bl	80090e0 <I2C_TransferConfig>
 8008bbe:	e00f      	b.n	8008be0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	8979      	ldrh	r1, [r7, #10]
 8008bd2:	4b4a      	ldr	r3, [pc, #296]	; (8008cfc <HAL_I2C_Mem_Read+0x22c>)
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f000 fa80 	bl	80090e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be6:	2200      	movs	r2, #0
 8008be8:	2104      	movs	r1, #4
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f000 f956 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e07c      	b.n	8008cf4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c04:	b2d2      	uxtb	r2, r2
 8008c06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0c:	1c5a      	adds	r2, r3, #1
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c16:	3b01      	subs	r3, #1
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	3b01      	subs	r3, #1
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d034      	beq.n	8008ca0 <HAL_I2C_Mem_Read+0x1d0>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d130      	bne.n	8008ca0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	9300      	str	r3, [sp, #0]
 8008c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c44:	2200      	movs	r2, #0
 8008c46:	2180      	movs	r1, #128	; 0x80
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f000 f927 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d001      	beq.n	8008c58 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e04d      	b.n	8008cf4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	2bff      	cmp	r3, #255	; 0xff
 8008c60:	d90e      	bls.n	8008c80 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	22ff      	movs	r2, #255	; 0xff
 8008c66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c6c:	b2da      	uxtb	r2, r3
 8008c6e:	8979      	ldrh	r1, [r7, #10]
 8008c70:	2300      	movs	r3, #0
 8008c72:	9300      	str	r3, [sp, #0]
 8008c74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f000 fa31 	bl	80090e0 <I2C_TransferConfig>
 8008c7e:	e00f      	b.n	8008ca0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c8e:	b2da      	uxtb	r2, r3
 8008c90:	8979      	ldrh	r1, [r7, #10]
 8008c92:	2300      	movs	r3, #0
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f000 fa20 	bl	80090e0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d19a      	bne.n	8008be0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f000 f974 	bl	8008f9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d001      	beq.n	8008cbe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e01a      	b.n	8008cf4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2220      	movs	r2, #32
 8008cc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6859      	ldr	r1, [r3, #4]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	4b0b      	ldr	r3, [pc, #44]	; (8008d00 <HAL_I2C_Mem_Read+0x230>)
 8008cd2:	400b      	ands	r3, r1
 8008cd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2220      	movs	r2, #32
 8008cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	e000      	b.n	8008cf4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008cf2:	2302      	movs	r3, #2
  }
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	80002400 	.word	0x80002400
 8008d00:	fe00e800 	.word	0xfe00e800

08008d04 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af02      	add	r7, sp, #8
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	4608      	mov	r0, r1
 8008d0e:	4611      	mov	r1, r2
 8008d10:	461a      	mov	r2, r3
 8008d12:	4603      	mov	r3, r0
 8008d14:	817b      	strh	r3, [r7, #10]
 8008d16:	460b      	mov	r3, r1
 8008d18:	813b      	strh	r3, [r7, #8]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008d1e:	88fb      	ldrh	r3, [r7, #6]
 8008d20:	b2da      	uxtb	r2, r3
 8008d22:	8979      	ldrh	r1, [r7, #10]
 8008d24:	4b20      	ldr	r3, [pc, #128]	; (8008da8 <I2C_RequestMemoryWrite+0xa4>)
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f000 f9d7 	bl	80090e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d32:	69fa      	ldr	r2, [r7, #28]
 8008d34:	69b9      	ldr	r1, [r7, #24]
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f000 f8f0 	bl	8008f1c <I2C_WaitOnTXISFlagUntilTimeout>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d001      	beq.n	8008d46 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e02c      	b.n	8008da0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d46:	88fb      	ldrh	r3, [r7, #6]
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d105      	bne.n	8008d58 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d4c:	893b      	ldrh	r3, [r7, #8]
 8008d4e:	b2da      	uxtb	r2, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	629a      	str	r2, [r3, #40]	; 0x28
 8008d56:	e015      	b.n	8008d84 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008d58:	893b      	ldrh	r3, [r7, #8]
 8008d5a:	0a1b      	lsrs	r3, r3, #8
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	b2da      	uxtb	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d66:	69fa      	ldr	r2, [r7, #28]
 8008d68:	69b9      	ldr	r1, [r7, #24]
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f000 f8d6 	bl	8008f1c <I2C_WaitOnTXISFlagUntilTimeout>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d001      	beq.n	8008d7a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e012      	b.n	8008da0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d7a:	893b      	ldrh	r3, [r7, #8]
 8008d7c:	b2da      	uxtb	r2, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	2180      	movs	r1, #128	; 0x80
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f000 f884 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e000      	b.n	8008da0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	80002000 	.word	0x80002000

08008dac <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af02      	add	r7, sp, #8
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	4608      	mov	r0, r1
 8008db6:	4611      	mov	r1, r2
 8008db8:	461a      	mov	r2, r3
 8008dba:	4603      	mov	r3, r0
 8008dbc:	817b      	strh	r3, [r7, #10]
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	813b      	strh	r3, [r7, #8]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008dc6:	88fb      	ldrh	r3, [r7, #6]
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	8979      	ldrh	r1, [r7, #10]
 8008dcc:	4b20      	ldr	r3, [pc, #128]	; (8008e50 <I2C_RequestMemoryRead+0xa4>)
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f000 f984 	bl	80090e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008dd8:	69fa      	ldr	r2, [r7, #28]
 8008dda:	69b9      	ldr	r1, [r7, #24]
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f000 f89d 	bl	8008f1c <I2C_WaitOnTXISFlagUntilTimeout>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d001      	beq.n	8008dec <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e02c      	b.n	8008e46 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008dec:	88fb      	ldrh	r3, [r7, #6]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d105      	bne.n	8008dfe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008df2:	893b      	ldrh	r3, [r7, #8]
 8008df4:	b2da      	uxtb	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	629a      	str	r2, [r3, #40]	; 0x28
 8008dfc:	e015      	b.n	8008e2a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008dfe:	893b      	ldrh	r3, [r7, #8]
 8008e00:	0a1b      	lsrs	r3, r3, #8
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e0c:	69fa      	ldr	r2, [r7, #28]
 8008e0e:	69b9      	ldr	r1, [r7, #24]
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f000 f883 	bl	8008f1c <I2C_WaitOnTXISFlagUntilTimeout>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d001      	beq.n	8008e20 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e012      	b.n	8008e46 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e20:	893b      	ldrh	r3, [r7, #8]
 8008e22:	b2da      	uxtb	r2, r3
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	2200      	movs	r2, #0
 8008e32:	2140      	movs	r1, #64	; 0x40
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f000 f831 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d001      	beq.n	8008e44 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	e000      	b.n	8008e46 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	80002000 	.word	0x80002000

08008e54 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	699b      	ldr	r3, [r3, #24]
 8008e62:	f003 0302 	and.w	r3, r3, #2
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d103      	bne.n	8008e72 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d007      	beq.n	8008e90 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	699a      	ldr	r2, [r3, #24]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f042 0201 	orr.w	r2, r2, #1
 8008e8e:	619a      	str	r2, [r3, #24]
  }
}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	603b      	str	r3, [r7, #0]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008eac:	e022      	b.n	8008ef4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb4:	d01e      	beq.n	8008ef4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008eb6:	f7fc fbeb 	bl	8005690 <HAL_GetTick>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d302      	bcc.n	8008ecc <I2C_WaitOnFlagUntilTimeout+0x30>
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d113      	bne.n	8008ef4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ed0:	f043 0220 	orr.w	r2, r3, #32
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2220      	movs	r2, #32
 8008edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e00f      	b.n	8008f14 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	699a      	ldr	r2, [r3, #24]
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	4013      	ands	r3, r2
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	bf0c      	ite	eq
 8008f04:	2301      	moveq	r3, #1
 8008f06:	2300      	movne	r3, #0
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	79fb      	ldrb	r3, [r7, #7]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d0cd      	beq.n	8008eae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008f28:	e02c      	b.n	8008f84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	68b9      	ldr	r1, [r7, #8]
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f000 f870 	bl	8009014 <I2C_IsAcknowledgeFailed>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d001      	beq.n	8008f3e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e02a      	b.n	8008f94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f44:	d01e      	beq.n	8008f84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f46:	f7fc fba3 	bl	8005690 <HAL_GetTick>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	1ad3      	subs	r3, r2, r3
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d302      	bcc.n	8008f5c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d113      	bne.n	8008f84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f60:	f043 0220 	orr.w	r2, r3, #32
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2220      	movs	r2, #32
 8008f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e007      	b.n	8008f94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	f003 0302 	and.w	r3, r3, #2
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d1cb      	bne.n	8008f2a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008fa8:	e028      	b.n	8008ffc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	68b9      	ldr	r1, [r7, #8]
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f000 f830 	bl	8009014 <I2C_IsAcknowledgeFailed>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d001      	beq.n	8008fbe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e026      	b.n	800900c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fbe:	f7fc fb67 	bl	8005690 <HAL_GetTick>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	1ad3      	subs	r3, r2, r3
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d302      	bcc.n	8008fd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d113      	bne.n	8008ffc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fd8:	f043 0220 	orr.w	r2, r3, #32
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2220      	movs	r2, #32
 8008fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e007      	b.n	800900c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	f003 0320 	and.w	r3, r3, #32
 8009006:	2b20      	cmp	r3, #32
 8009008:	d1cf      	bne.n	8008faa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	699b      	ldr	r3, [r3, #24]
 8009026:	f003 0310 	and.w	r3, r3, #16
 800902a:	2b10      	cmp	r3, #16
 800902c:	d151      	bne.n	80090d2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800902e:	e022      	b.n	8009076 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009036:	d01e      	beq.n	8009076 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009038:	f7fc fb2a 	bl	8005690 <HAL_GetTick>
 800903c:	4602      	mov	r2, r0
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	429a      	cmp	r2, r3
 8009046:	d302      	bcc.n	800904e <I2C_IsAcknowledgeFailed+0x3a>
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d113      	bne.n	8009076 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009052:	f043 0220 	orr.w	r2, r3, #32
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2220      	movs	r2, #32
 800905e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	e02e      	b.n	80090d4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	699b      	ldr	r3, [r3, #24]
 800907c:	f003 0320 	and.w	r3, r3, #32
 8009080:	2b20      	cmp	r3, #32
 8009082:	d1d5      	bne.n	8009030 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2210      	movs	r2, #16
 800908a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2220      	movs	r2, #32
 8009092:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f7ff fedd 	bl	8008e54 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6859      	ldr	r1, [r3, #4]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	4b0d      	ldr	r3, [pc, #52]	; (80090dc <I2C_IsAcknowledgeFailed+0xc8>)
 80090a6:	400b      	ands	r3, r1
 80090a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ae:	f043 0204 	orr.w	r2, r3, #4
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2220      	movs	r2, #32
 80090ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e000      	b.n	80090d4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	fe00e800 	.word	0xfe00e800

080090e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b085      	sub	sp, #20
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	607b      	str	r3, [r7, #4]
 80090ea:	460b      	mov	r3, r1
 80090ec:	817b      	strh	r3, [r7, #10]
 80090ee:	4613      	mov	r3, r2
 80090f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	0d5b      	lsrs	r3, r3, #21
 80090fc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009100:	4b0d      	ldr	r3, [pc, #52]	; (8009138 <I2C_TransferConfig+0x58>)
 8009102:	430b      	orrs	r3, r1
 8009104:	43db      	mvns	r3, r3
 8009106:	ea02 0103 	and.w	r1, r2, r3
 800910a:	897b      	ldrh	r3, [r7, #10]
 800910c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009110:	7a7b      	ldrb	r3, [r7, #9]
 8009112:	041b      	lsls	r3, r3, #16
 8009114:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009118:	431a      	orrs	r2, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	431a      	orrs	r2, r3
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	431a      	orrs	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	430a      	orrs	r2, r1
 8009128:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800912a:	bf00      	nop
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	03ff63ff 	.word	0x03ff63ff

0800913c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800914c:	b2db      	uxtb	r3, r3
 800914e:	2b20      	cmp	r3, #32
 8009150:	d138      	bne.n	80091c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009158:	2b01      	cmp	r3, #1
 800915a:	d101      	bne.n	8009160 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800915c:	2302      	movs	r3, #2
 800915e:	e032      	b.n	80091c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2224      	movs	r2, #36	; 0x24
 800916c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f022 0201 	bic.w	r2, r2, #1
 800917e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800918e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6819      	ldr	r1, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	430a      	orrs	r2, r1
 800919e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f042 0201 	orr.w	r2, r2, #1
 80091ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2220      	movs	r2, #32
 80091b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80091c0:	2300      	movs	r3, #0
 80091c2:	e000      	b.n	80091c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80091c4:	2302      	movs	r3, #2
  }
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	370c      	adds	r7, #12
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80091d2:	b480      	push	{r7}
 80091d4:	b085      	sub	sp, #20
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b20      	cmp	r3, #32
 80091e6:	d139      	bne.n	800925c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d101      	bne.n	80091f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80091f2:	2302      	movs	r3, #2
 80091f4:	e033      	b.n	800925e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2224      	movs	r2, #36	; 0x24
 8009202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f022 0201 	bic.w	r2, r2, #1
 8009214:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009224:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	021b      	lsls	r3, r3, #8
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	4313      	orrs	r3, r2
 800922e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f042 0201 	orr.w	r2, r2, #1
 8009246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2220      	movs	r2, #32
 800924c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009258:	2300      	movs	r3, #0
 800925a:	e000      	b.n	800925e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800925c:	2302      	movs	r3, #2
  }
}
 800925e:	4618      	mov	r0, r3
 8009260:	3714      	adds	r7, #20
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
	...

0800926c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e0bb      	b.n	80093fa <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b05      	cmp	r3, #5
 800928c:	d101      	bne.n	8009292 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e0b3      	b.n	80093fa <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b02      	cmp	r3, #2
 800929c:	d101      	bne.n	80092a2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	e0ab      	b.n	80093fa <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092a2:	4b58      	ldr	r3, [pc, #352]	; (8009404 <HAL_OPAMP_Init+0x198>)
 80092a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092a6:	4a57      	ldr	r2, [pc, #348]	; (8009404 <HAL_OPAMP_Init+0x198>)
 80092a8:	f043 0301 	orr.w	r3, r3, #1
 80092ac:	6613      	str	r3, [r2, #96]	; 0x60
 80092ae:	4b55      	ldr	r3, [pc, #340]	; (8009404 <HAL_OPAMP_Init+0x198>)
 80092b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	60bb      	str	r3, [r7, #8]
 80092b8:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d103      	bne.n	80092ce <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7fb fada 	bl	8004888 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	2b40      	cmp	r3, #64	; 0x40
 80092da:	d003      	beq.n	80092e4 <HAL_OPAMP_Init+0x78>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	2b60      	cmp	r3, #96	; 0x60
 80092e2:	d133      	bne.n	800934c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f023 0110 	bic.w	r1, r3, #16
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	430a      	orrs	r2, r1
 80092f8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	4b41      	ldr	r3, [pc, #260]	; (8009408 <HAL_OPAMP_Init+0x19c>)
 8009302:	4013      	ands	r3, r2
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	6851      	ldr	r1, [r2, #4]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	6892      	ldr	r2, [r2, #8]
 800930c:	4311      	orrs	r1, r2
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	6912      	ldr	r2, [r2, #16]
 8009312:	430a      	orrs	r2, r1
 8009314:	6879      	ldr	r1, [r7, #4]
 8009316:	7d09      	ldrb	r1, [r1, #20]
 8009318:	2901      	cmp	r1, #1
 800931a:	d102      	bne.n	8009322 <HAL_OPAMP_Init+0xb6>
 800931c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009320:	e000      	b.n	8009324 <HAL_OPAMP_Init+0xb8>
 8009322:	2100      	movs	r1, #0
 8009324:	4311      	orrs	r1, r2
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800932a:	4311      	orrs	r1, r2
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009330:	4311      	orrs	r1, r2
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009336:	04d2      	lsls	r2, r2, #19
 8009338:	4311      	orrs	r1, r2
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800933e:	0612      	lsls	r2, r2, #24
 8009340:	4311      	orrs	r1, r2
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	6812      	ldr	r2, [r2, #0]
 8009346:	430b      	orrs	r3, r1
 8009348:	6013      	str	r3, [r2, #0]
 800934a:	e035      	b.n	80093b8 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f023 0110 	bic.w	r1, r3, #16
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	430a      	orrs	r2, r1
 8009360:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	4b27      	ldr	r3, [pc, #156]	; (8009408 <HAL_OPAMP_Init+0x19c>)
 800936a:	4013      	ands	r3, r2
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	6851      	ldr	r1, [r2, #4]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	6892      	ldr	r2, [r2, #8]
 8009374:	4311      	orrs	r1, r2
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	68d2      	ldr	r2, [r2, #12]
 800937a:	4311      	orrs	r1, r2
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	6912      	ldr	r2, [r2, #16]
 8009380:	430a      	orrs	r2, r1
 8009382:	6879      	ldr	r1, [r7, #4]
 8009384:	7d09      	ldrb	r1, [r1, #20]
 8009386:	2901      	cmp	r1, #1
 8009388:	d102      	bne.n	8009390 <HAL_OPAMP_Init+0x124>
 800938a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800938e:	e000      	b.n	8009392 <HAL_OPAMP_Init+0x126>
 8009390:	2100      	movs	r1, #0
 8009392:	4311      	orrs	r1, r2
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009398:	4311      	orrs	r1, r2
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800939e:	4311      	orrs	r1, r2
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80093a4:	04d2      	lsls	r2, r2, #19
 80093a6:	4311      	orrs	r1, r2
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80093ac:	0612      	lsls	r2, r2, #24
 80093ae:	4311      	orrs	r1, r2
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	6812      	ldr	r2, [r2, #0]
 80093b4:	430b      	orrs	r3, r1
 80093b6:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	699b      	ldr	r3, [r3, #24]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	db10      	blt.n	80093e4 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	699b      	ldr	r3, [r3, #24]
 80093c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	699a      	ldr	r2, [r3, #24]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	69db      	ldr	r3, [r3, #28]
 80093d4:	431a      	orrs	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a1b      	ldr	r3, [r3, #32]
 80093da:	431a      	orrs	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	430a      	orrs	r2, r1
 80093e2:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d103      	bne.n	80093f8 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80093f8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	40021000 	.word	0x40021000
 8009408:	e0003e11 	.word	0xe0003e11

0800940c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009414:	2300      	movs	r3, #0
 8009416:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d102      	bne.n	8009424 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	73fb      	strb	r3, [r7, #15]
 8009422:	e01d      	b.n	8009460 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800942a:	b2db      	uxtb	r3, r3
 800942c:	2b05      	cmp	r3, #5
 800942e:	d102      	bne.n	8009436 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	73fb      	strb	r3, [r7, #15]
 8009434:	e014      	b.n	8009460 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800943c:	b2db      	uxtb	r3, r3
 800943e:	2b01      	cmp	r3, #1
 8009440:	d10c      	bne.n	800945c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f042 0201 	orr.w	r2, r2, #1
 8009450:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2204      	movs	r2, #4
 8009456:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800945a:	e001      	b.n	8009460 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8009460:	7bfb      	ldrb	r3, [r7, #15]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
	...

08009470 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d141      	bne.n	8009502 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800947e:	4b4b      	ldr	r3, [pc, #300]	; (80095ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800948a:	d131      	bne.n	80094f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800948c:	4b47      	ldr	r3, [pc, #284]	; (80095ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800948e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009492:	4a46      	ldr	r2, [pc, #280]	; (80095ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009498:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800949c:	4b43      	ldr	r3, [pc, #268]	; (80095ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80094a4:	4a41      	ldr	r2, [pc, #260]	; (80095ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80094a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80094ac:	4b40      	ldr	r3, [pc, #256]	; (80095b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2232      	movs	r2, #50	; 0x32
 80094b2:	fb02 f303 	mul.w	r3, r2, r3
 80094b6:	4a3f      	ldr	r2, [pc, #252]	; (80095b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80094b8:	fba2 2303 	umull	r2, r3, r2, r3
 80094bc:	0c9b      	lsrs	r3, r3, #18
 80094be:	3301      	adds	r3, #1
 80094c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80094c2:	e002      	b.n	80094ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	3b01      	subs	r3, #1
 80094c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80094ca:	4b38      	ldr	r3, [pc, #224]	; (80095ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094d6:	d102      	bne.n	80094de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1f2      	bne.n	80094c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80094de:	4b33      	ldr	r3, [pc, #204]	; (80095ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80094e0:	695b      	ldr	r3, [r3, #20]
 80094e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094ea:	d158      	bne.n	800959e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80094ec:	2303      	movs	r3, #3
 80094ee:	e057      	b.n	80095a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80094f0:	4b2e      	ldr	r3, [pc, #184]	; (80095ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80094f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094f6:	4a2d      	ldr	r2, [pc, #180]	; (80095ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80094f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009500:	e04d      	b.n	800959e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009508:	d141      	bne.n	800958e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800950a:	4b28      	ldr	r3, [pc, #160]	; (80095ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009516:	d131      	bne.n	800957c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009518:	4b24      	ldr	r3, [pc, #144]	; (80095ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800951a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800951e:	4a23      	ldr	r2, [pc, #140]	; (80095ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009524:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009528:	4b20      	ldr	r3, [pc, #128]	; (80095ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009530:	4a1e      	ldr	r2, [pc, #120]	; (80095ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009536:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009538:	4b1d      	ldr	r3, [pc, #116]	; (80095b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2232      	movs	r2, #50	; 0x32
 800953e:	fb02 f303 	mul.w	r3, r2, r3
 8009542:	4a1c      	ldr	r2, [pc, #112]	; (80095b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009544:	fba2 2303 	umull	r2, r3, r2, r3
 8009548:	0c9b      	lsrs	r3, r3, #18
 800954a:	3301      	adds	r3, #1
 800954c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800954e:	e002      	b.n	8009556 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	3b01      	subs	r3, #1
 8009554:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009556:	4b15      	ldr	r3, [pc, #84]	; (80095ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009558:	695b      	ldr	r3, [r3, #20]
 800955a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800955e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009562:	d102      	bne.n	800956a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1f2      	bne.n	8009550 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800956a:	4b10      	ldr	r3, [pc, #64]	; (80095ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009576:	d112      	bne.n	800959e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009578:	2303      	movs	r3, #3
 800957a:	e011      	b.n	80095a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800957c:	4b0b      	ldr	r3, [pc, #44]	; (80095ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800957e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009582:	4a0a      	ldr	r2, [pc, #40]	; (80095ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009588:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800958c:	e007      	b.n	800959e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800958e:	4b07      	ldr	r3, [pc, #28]	; (80095ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009596:	4a05      	ldr	r2, [pc, #20]	; (80095ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009598:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800959c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3714      	adds	r7, #20
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr
 80095ac:	40007000 	.word	0x40007000
 80095b0:	20000000 	.word	0x20000000
 80095b4:	431bde83 	.word	0x431bde83

080095b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80095b8:	b480      	push	{r7}
 80095ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80095bc:	4b05      	ldr	r3, [pc, #20]	; (80095d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	4a04      	ldr	r2, [pc, #16]	; (80095d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80095c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095c6:	6093      	str	r3, [r2, #8]
}
 80095c8:	bf00      	nop
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	40007000 	.word	0x40007000

080095d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b088      	sub	sp, #32
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d101      	bne.n	80095ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e308      	b.n	8009bfc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d075      	beq.n	80096e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095f6:	4ba3      	ldr	r3, [pc, #652]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	f003 030c 	and.w	r3, r3, #12
 80095fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009600:	4ba0      	ldr	r3, [pc, #640]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	f003 0303 	and.w	r3, r3, #3
 8009608:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	2b0c      	cmp	r3, #12
 800960e:	d102      	bne.n	8009616 <HAL_RCC_OscConfig+0x3e>
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	2b03      	cmp	r3, #3
 8009614:	d002      	beq.n	800961c <HAL_RCC_OscConfig+0x44>
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	2b08      	cmp	r3, #8
 800961a:	d10b      	bne.n	8009634 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800961c:	4b99      	ldr	r3, [pc, #612]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d05b      	beq.n	80096e0 <HAL_RCC_OscConfig+0x108>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d157      	bne.n	80096e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	e2e3      	b.n	8009bfc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800963c:	d106      	bne.n	800964c <HAL_RCC_OscConfig+0x74>
 800963e:	4b91      	ldr	r3, [pc, #580]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a90      	ldr	r2, [pc, #576]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 8009644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009648:	6013      	str	r3, [r2, #0]
 800964a:	e01d      	b.n	8009688 <HAL_RCC_OscConfig+0xb0>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009654:	d10c      	bne.n	8009670 <HAL_RCC_OscConfig+0x98>
 8009656:	4b8b      	ldr	r3, [pc, #556]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a8a      	ldr	r2, [pc, #552]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 800965c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009660:	6013      	str	r3, [r2, #0]
 8009662:	4b88      	ldr	r3, [pc, #544]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a87      	ldr	r2, [pc, #540]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 8009668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800966c:	6013      	str	r3, [r2, #0]
 800966e:	e00b      	b.n	8009688 <HAL_RCC_OscConfig+0xb0>
 8009670:	4b84      	ldr	r3, [pc, #528]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a83      	ldr	r2, [pc, #524]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 8009676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800967a:	6013      	str	r3, [r2, #0]
 800967c:	4b81      	ldr	r3, [pc, #516]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a80      	ldr	r2, [pc, #512]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 8009682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d013      	beq.n	80096b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009690:	f7fb fffe 	bl	8005690 <HAL_GetTick>
 8009694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009696:	e008      	b.n	80096aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009698:	f7fb fffa 	bl	8005690 <HAL_GetTick>
 800969c:	4602      	mov	r2, r0
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	2b64      	cmp	r3, #100	; 0x64
 80096a4:	d901      	bls.n	80096aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80096a6:	2303      	movs	r3, #3
 80096a8:	e2a8      	b.n	8009bfc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80096aa:	4b76      	ldr	r3, [pc, #472]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d0f0      	beq.n	8009698 <HAL_RCC_OscConfig+0xc0>
 80096b6:	e014      	b.n	80096e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096b8:	f7fb ffea 	bl	8005690 <HAL_GetTick>
 80096bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80096be:	e008      	b.n	80096d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096c0:	f7fb ffe6 	bl	8005690 <HAL_GetTick>
 80096c4:	4602      	mov	r2, r0
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	2b64      	cmp	r3, #100	; 0x64
 80096cc:	d901      	bls.n	80096d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80096ce:	2303      	movs	r3, #3
 80096d0:	e294      	b.n	8009bfc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80096d2:	4b6c      	ldr	r3, [pc, #432]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1f0      	bne.n	80096c0 <HAL_RCC_OscConfig+0xe8>
 80096de:	e000      	b.n	80096e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f003 0302 	and.w	r3, r3, #2
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d075      	beq.n	80097da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096ee:	4b65      	ldr	r3, [pc, #404]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	f003 030c 	and.w	r3, r3, #12
 80096f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80096f8:	4b62      	ldr	r3, [pc, #392]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	f003 0303 	and.w	r3, r3, #3
 8009700:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	2b0c      	cmp	r3, #12
 8009706:	d102      	bne.n	800970e <HAL_RCC_OscConfig+0x136>
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	2b02      	cmp	r3, #2
 800970c:	d002      	beq.n	8009714 <HAL_RCC_OscConfig+0x13c>
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	2b04      	cmp	r3, #4
 8009712:	d11f      	bne.n	8009754 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009714:	4b5b      	ldr	r3, [pc, #364]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800971c:	2b00      	cmp	r3, #0
 800971e:	d005      	beq.n	800972c <HAL_RCC_OscConfig+0x154>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d101      	bne.n	800972c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	e267      	b.n	8009bfc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800972c:	4b55      	ldr	r3, [pc, #340]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	061b      	lsls	r3, r3, #24
 800973a:	4952      	ldr	r1, [pc, #328]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 800973c:	4313      	orrs	r3, r2
 800973e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009740:	4b51      	ldr	r3, [pc, #324]	; (8009888 <HAL_RCC_OscConfig+0x2b0>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4618      	mov	r0, r3
 8009746:	f7fb ff57 	bl	80055f8 <HAL_InitTick>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d043      	beq.n	80097d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e253      	b.n	8009bfc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d023      	beq.n	80097a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800975c:	4b49      	ldr	r3, [pc, #292]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a48      	ldr	r2, [pc, #288]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 8009762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009768:	f7fb ff92 	bl	8005690 <HAL_GetTick>
 800976c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800976e:	e008      	b.n	8009782 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009770:	f7fb ff8e 	bl	8005690 <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	2b02      	cmp	r3, #2
 800977c:	d901      	bls.n	8009782 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800977e:	2303      	movs	r3, #3
 8009780:	e23c      	b.n	8009bfc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009782:	4b40      	ldr	r3, [pc, #256]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800978a:	2b00      	cmp	r3, #0
 800978c:	d0f0      	beq.n	8009770 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800978e:	4b3d      	ldr	r3, [pc, #244]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	061b      	lsls	r3, r3, #24
 800979c:	4939      	ldr	r1, [pc, #228]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 800979e:	4313      	orrs	r3, r2
 80097a0:	604b      	str	r3, [r1, #4]
 80097a2:	e01a      	b.n	80097da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80097a4:	4b37      	ldr	r3, [pc, #220]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a36      	ldr	r2, [pc, #216]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 80097aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097b0:	f7fb ff6e 	bl	8005690 <HAL_GetTick>
 80097b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80097b6:	e008      	b.n	80097ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097b8:	f7fb ff6a 	bl	8005690 <HAL_GetTick>
 80097bc:	4602      	mov	r2, r0
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	1ad3      	subs	r3, r2, r3
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	d901      	bls.n	80097ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80097c6:	2303      	movs	r3, #3
 80097c8:	e218      	b.n	8009bfc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80097ca:	4b2e      	ldr	r3, [pc, #184]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1f0      	bne.n	80097b8 <HAL_RCC_OscConfig+0x1e0>
 80097d6:	e000      	b.n	80097da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80097d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f003 0308 	and.w	r3, r3, #8
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d03c      	beq.n	8009860 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	695b      	ldr	r3, [r3, #20]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d01c      	beq.n	8009828 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80097ee:	4b25      	ldr	r3, [pc, #148]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 80097f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80097f4:	4a23      	ldr	r2, [pc, #140]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 80097f6:	f043 0301 	orr.w	r3, r3, #1
 80097fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097fe:	f7fb ff47 	bl	8005690 <HAL_GetTick>
 8009802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009804:	e008      	b.n	8009818 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009806:	f7fb ff43 	bl	8005690 <HAL_GetTick>
 800980a:	4602      	mov	r2, r0
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	1ad3      	subs	r3, r2, r3
 8009810:	2b02      	cmp	r3, #2
 8009812:	d901      	bls.n	8009818 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009814:	2303      	movs	r3, #3
 8009816:	e1f1      	b.n	8009bfc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009818:	4b1a      	ldr	r3, [pc, #104]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 800981a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800981e:	f003 0302 	and.w	r3, r3, #2
 8009822:	2b00      	cmp	r3, #0
 8009824:	d0ef      	beq.n	8009806 <HAL_RCC_OscConfig+0x22e>
 8009826:	e01b      	b.n	8009860 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009828:	4b16      	ldr	r3, [pc, #88]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 800982a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800982e:	4a15      	ldr	r2, [pc, #84]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 8009830:	f023 0301 	bic.w	r3, r3, #1
 8009834:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009838:	f7fb ff2a 	bl	8005690 <HAL_GetTick>
 800983c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800983e:	e008      	b.n	8009852 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009840:	f7fb ff26 	bl	8005690 <HAL_GetTick>
 8009844:	4602      	mov	r2, r0
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	2b02      	cmp	r3, #2
 800984c:	d901      	bls.n	8009852 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800984e:	2303      	movs	r3, #3
 8009850:	e1d4      	b.n	8009bfc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009852:	4b0c      	ldr	r3, [pc, #48]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 8009854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009858:	f003 0302 	and.w	r3, r3, #2
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1ef      	bne.n	8009840 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 0304 	and.w	r3, r3, #4
 8009868:	2b00      	cmp	r3, #0
 800986a:	f000 80ab 	beq.w	80099c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800986e:	2300      	movs	r3, #0
 8009870:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009872:	4b04      	ldr	r3, [pc, #16]	; (8009884 <HAL_RCC_OscConfig+0x2ac>)
 8009874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800987a:	2b00      	cmp	r3, #0
 800987c:	d106      	bne.n	800988c <HAL_RCC_OscConfig+0x2b4>
 800987e:	2301      	movs	r3, #1
 8009880:	e005      	b.n	800988e <HAL_RCC_OscConfig+0x2b6>
 8009882:	bf00      	nop
 8009884:	40021000 	.word	0x40021000
 8009888:	20000004 	.word	0x20000004
 800988c:	2300      	movs	r3, #0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00d      	beq.n	80098ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009892:	4baf      	ldr	r3, [pc, #700]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009896:	4aae      	ldr	r2, [pc, #696]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800989c:	6593      	str	r3, [r2, #88]	; 0x58
 800989e:	4bac      	ldr	r3, [pc, #688]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 80098a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098a6:	60fb      	str	r3, [r7, #12]
 80098a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80098aa:	2301      	movs	r3, #1
 80098ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80098ae:	4ba9      	ldr	r3, [pc, #676]	; (8009b54 <HAL_RCC_OscConfig+0x57c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d118      	bne.n	80098ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80098ba:	4ba6      	ldr	r3, [pc, #664]	; (8009b54 <HAL_RCC_OscConfig+0x57c>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4aa5      	ldr	r2, [pc, #660]	; (8009b54 <HAL_RCC_OscConfig+0x57c>)
 80098c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80098c6:	f7fb fee3 	bl	8005690 <HAL_GetTick>
 80098ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80098cc:	e008      	b.n	80098e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098ce:	f7fb fedf 	bl	8005690 <HAL_GetTick>
 80098d2:	4602      	mov	r2, r0
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	2b02      	cmp	r3, #2
 80098da:	d901      	bls.n	80098e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80098dc:	2303      	movs	r3, #3
 80098de:	e18d      	b.n	8009bfc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80098e0:	4b9c      	ldr	r3, [pc, #624]	; (8009b54 <HAL_RCC_OscConfig+0x57c>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d0f0      	beq.n	80098ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d108      	bne.n	8009906 <HAL_RCC_OscConfig+0x32e>
 80098f4:	4b96      	ldr	r3, [pc, #600]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 80098f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098fa:	4a95      	ldr	r2, [pc, #596]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 80098fc:	f043 0301 	orr.w	r3, r3, #1
 8009900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009904:	e024      	b.n	8009950 <HAL_RCC_OscConfig+0x378>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	2b05      	cmp	r3, #5
 800990c:	d110      	bne.n	8009930 <HAL_RCC_OscConfig+0x358>
 800990e:	4b90      	ldr	r3, [pc, #576]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009914:	4a8e      	ldr	r2, [pc, #568]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009916:	f043 0304 	orr.w	r3, r3, #4
 800991a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800991e:	4b8c      	ldr	r3, [pc, #560]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009924:	4a8a      	ldr	r2, [pc, #552]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009926:	f043 0301 	orr.w	r3, r3, #1
 800992a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800992e:	e00f      	b.n	8009950 <HAL_RCC_OscConfig+0x378>
 8009930:	4b87      	ldr	r3, [pc, #540]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009936:	4a86      	ldr	r2, [pc, #536]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009938:	f023 0301 	bic.w	r3, r3, #1
 800993c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009940:	4b83      	ldr	r3, [pc, #524]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009946:	4a82      	ldr	r2, [pc, #520]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009948:	f023 0304 	bic.w	r3, r3, #4
 800994c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d016      	beq.n	8009986 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009958:	f7fb fe9a 	bl	8005690 <HAL_GetTick>
 800995c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800995e:	e00a      	b.n	8009976 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009960:	f7fb fe96 	bl	8005690 <HAL_GetTick>
 8009964:	4602      	mov	r2, r0
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	f241 3288 	movw	r2, #5000	; 0x1388
 800996e:	4293      	cmp	r3, r2
 8009970:	d901      	bls.n	8009976 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	e142      	b.n	8009bfc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009976:	4b76      	ldr	r3, [pc, #472]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800997c:	f003 0302 	and.w	r3, r3, #2
 8009980:	2b00      	cmp	r3, #0
 8009982:	d0ed      	beq.n	8009960 <HAL_RCC_OscConfig+0x388>
 8009984:	e015      	b.n	80099b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009986:	f7fb fe83 	bl	8005690 <HAL_GetTick>
 800998a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800998c:	e00a      	b.n	80099a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800998e:	f7fb fe7f 	bl	8005690 <HAL_GetTick>
 8009992:	4602      	mov	r2, r0
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	f241 3288 	movw	r2, #5000	; 0x1388
 800999c:	4293      	cmp	r3, r2
 800999e:	d901      	bls.n	80099a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80099a0:	2303      	movs	r3, #3
 80099a2:	e12b      	b.n	8009bfc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80099a4:	4b6a      	ldr	r3, [pc, #424]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 80099a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099aa:	f003 0302 	and.w	r3, r3, #2
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1ed      	bne.n	800998e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80099b2:	7ffb      	ldrb	r3, [r7, #31]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d105      	bne.n	80099c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099b8:	4b65      	ldr	r3, [pc, #404]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 80099ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099bc:	4a64      	ldr	r2, [pc, #400]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 80099be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f003 0320 	and.w	r3, r3, #32
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d03c      	beq.n	8009a4a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d01c      	beq.n	8009a12 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80099d8:	4b5d      	ldr	r3, [pc, #372]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 80099da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80099de:	4a5c      	ldr	r2, [pc, #368]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 80099e0:	f043 0301 	orr.w	r3, r3, #1
 80099e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099e8:	f7fb fe52 	bl	8005690 <HAL_GetTick>
 80099ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80099ee:	e008      	b.n	8009a02 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80099f0:	f7fb fe4e 	bl	8005690 <HAL_GetTick>
 80099f4:	4602      	mov	r2, r0
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d901      	bls.n	8009a02 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80099fe:	2303      	movs	r3, #3
 8009a00:	e0fc      	b.n	8009bfc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009a02:	4b53      	ldr	r3, [pc, #332]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009a04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a08:	f003 0302 	and.w	r3, r3, #2
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d0ef      	beq.n	80099f0 <HAL_RCC_OscConfig+0x418>
 8009a10:	e01b      	b.n	8009a4a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009a12:	4b4f      	ldr	r3, [pc, #316]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a18:	4a4d      	ldr	r2, [pc, #308]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009a1a:	f023 0301 	bic.w	r3, r3, #1
 8009a1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a22:	f7fb fe35 	bl	8005690 <HAL_GetTick>
 8009a26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009a28:	e008      	b.n	8009a3c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009a2a:	f7fb fe31 	bl	8005690 <HAL_GetTick>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d901      	bls.n	8009a3c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	e0df      	b.n	8009bfc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009a3c:	4b44      	ldr	r3, [pc, #272]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009a3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a42:	f003 0302 	and.w	r3, r3, #2
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d1ef      	bne.n	8009a2a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	69db      	ldr	r3, [r3, #28]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f000 80d3 	beq.w	8009bfa <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009a54:	4b3e      	ldr	r3, [pc, #248]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	f003 030c 	and.w	r3, r3, #12
 8009a5c:	2b0c      	cmp	r3, #12
 8009a5e:	f000 808d 	beq.w	8009b7c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d15a      	bne.n	8009b20 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a6a:	4b39      	ldr	r3, [pc, #228]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a38      	ldr	r2, [pc, #224]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009a70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a76:	f7fb fe0b 	bl	8005690 <HAL_GetTick>
 8009a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009a7c:	e008      	b.n	8009a90 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a7e:	f7fb fe07 	bl	8005690 <HAL_GetTick>
 8009a82:	4602      	mov	r2, r0
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d901      	bls.n	8009a90 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e0b5      	b.n	8009bfc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009a90:	4b2f      	ldr	r3, [pc, #188]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1f0      	bne.n	8009a7e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009a9c:	4b2c      	ldr	r3, [pc, #176]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009a9e:	68da      	ldr	r2, [r3, #12]
 8009aa0:	4b2d      	ldr	r3, [pc, #180]	; (8009b58 <HAL_RCC_OscConfig+0x580>)
 8009aa2:	4013      	ands	r3, r2
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	6a11      	ldr	r1, [r2, #32]
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009aac:	3a01      	subs	r2, #1
 8009aae:	0112      	lsls	r2, r2, #4
 8009ab0:	4311      	orrs	r1, r2
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009ab6:	0212      	lsls	r2, r2, #8
 8009ab8:	4311      	orrs	r1, r2
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009abe:	0852      	lsrs	r2, r2, #1
 8009ac0:	3a01      	subs	r2, #1
 8009ac2:	0552      	lsls	r2, r2, #21
 8009ac4:	4311      	orrs	r1, r2
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009aca:	0852      	lsrs	r2, r2, #1
 8009acc:	3a01      	subs	r2, #1
 8009ace:	0652      	lsls	r2, r2, #25
 8009ad0:	4311      	orrs	r1, r2
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009ad6:	06d2      	lsls	r2, r2, #27
 8009ad8:	430a      	orrs	r2, r1
 8009ada:	491d      	ldr	r1, [pc, #116]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009adc:	4313      	orrs	r3, r2
 8009ade:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ae0:	4b1b      	ldr	r3, [pc, #108]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a1a      	ldr	r2, [pc, #104]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009aea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009aec:	4b18      	ldr	r3, [pc, #96]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	4a17      	ldr	r2, [pc, #92]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009af6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009af8:	f7fb fdca 	bl	8005690 <HAL_GetTick>
 8009afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009afe:	e008      	b.n	8009b12 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b00:	f7fb fdc6 	bl	8005690 <HAL_GetTick>
 8009b04:	4602      	mov	r2, r0
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	1ad3      	subs	r3, r2, r3
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	d901      	bls.n	8009b12 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	e074      	b.n	8009bfc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b12:	4b0f      	ldr	r3, [pc, #60]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d0f0      	beq.n	8009b00 <HAL_RCC_OscConfig+0x528>
 8009b1e:	e06c      	b.n	8009bfa <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b20:	4b0b      	ldr	r3, [pc, #44]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a0a      	ldr	r2, [pc, #40]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b2a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009b2c:	4b08      	ldr	r3, [pc, #32]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	4a07      	ldr	r2, [pc, #28]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009b32:	f023 0303 	bic.w	r3, r3, #3
 8009b36:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009b38:	4b05      	ldr	r3, [pc, #20]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	4a04      	ldr	r2, [pc, #16]	; (8009b50 <HAL_RCC_OscConfig+0x578>)
 8009b3e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b46:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b48:	f7fb fda2 	bl	8005690 <HAL_GetTick>
 8009b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b4e:	e00e      	b.n	8009b6e <HAL_RCC_OscConfig+0x596>
 8009b50:	40021000 	.word	0x40021000
 8009b54:	40007000 	.word	0x40007000
 8009b58:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b5c:	f7fb fd98 	bl	8005690 <HAL_GetTick>
 8009b60:	4602      	mov	r2, r0
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	d901      	bls.n	8009b6e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	e046      	b.n	8009bfc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b6e:	4b25      	ldr	r3, [pc, #148]	; (8009c04 <HAL_RCC_OscConfig+0x62c>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1f0      	bne.n	8009b5c <HAL_RCC_OscConfig+0x584>
 8009b7a:	e03e      	b.n	8009bfa <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	69db      	ldr	r3, [r3, #28]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d101      	bne.n	8009b88 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	e039      	b.n	8009bfc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009b88:	4b1e      	ldr	r3, [pc, #120]	; (8009c04 <HAL_RCC_OscConfig+0x62c>)
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	f003 0203 	and.w	r2, r3, #3
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6a1b      	ldr	r3, [r3, #32]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d12c      	bne.n	8009bf6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d123      	bne.n	8009bf6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d11b      	bne.n	8009bf6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d113      	bne.n	8009bf6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd8:	085b      	lsrs	r3, r3, #1
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d109      	bne.n	8009bf6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bec:	085b      	lsrs	r3, r3, #1
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d001      	beq.n	8009bfa <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e000      	b.n	8009bfc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3720      	adds	r7, #32
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	40021000 	.word	0x40021000

08009c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009c12:	2300      	movs	r3, #0
 8009c14:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d101      	bne.n	8009c20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e11e      	b.n	8009e5e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009c20:	4b91      	ldr	r3, [pc, #580]	; (8009e68 <HAL_RCC_ClockConfig+0x260>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f003 030f 	and.w	r3, r3, #15
 8009c28:	683a      	ldr	r2, [r7, #0]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d910      	bls.n	8009c50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c2e:	4b8e      	ldr	r3, [pc, #568]	; (8009e68 <HAL_RCC_ClockConfig+0x260>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f023 020f 	bic.w	r2, r3, #15
 8009c36:	498c      	ldr	r1, [pc, #560]	; (8009e68 <HAL_RCC_ClockConfig+0x260>)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c3e:	4b8a      	ldr	r3, [pc, #552]	; (8009e68 <HAL_RCC_ClockConfig+0x260>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f003 030f 	and.w	r3, r3, #15
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d001      	beq.n	8009c50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e106      	b.n	8009e5e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 0301 	and.w	r3, r3, #1
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d073      	beq.n	8009d44 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	2b03      	cmp	r3, #3
 8009c62:	d129      	bne.n	8009cb8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c64:	4b81      	ldr	r3, [pc, #516]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d101      	bne.n	8009c74 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	e0f4      	b.n	8009e5e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009c74:	f000 f99e 	bl	8009fb4 <RCC_GetSysClockFreqFromPLLSource>
 8009c78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	4a7c      	ldr	r2, [pc, #496]	; (8009e70 <HAL_RCC_ClockConfig+0x268>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d93f      	bls.n	8009d02 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009c82:	4b7a      	ldr	r3, [pc, #488]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d009      	beq.n	8009ca2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d033      	beq.n	8009d02 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d12f      	bne.n	8009d02 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009ca2:	4b72      	ldr	r3, [pc, #456]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009caa:	4a70      	ldr	r2, [pc, #448]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cb0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009cb2:	2380      	movs	r3, #128	; 0x80
 8009cb4:	617b      	str	r3, [r7, #20]
 8009cb6:	e024      	b.n	8009d02 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d107      	bne.n	8009cd0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009cc0:	4b6a      	ldr	r3, [pc, #424]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d109      	bne.n	8009ce0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	e0c6      	b.n	8009e5e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009cd0:	4b66      	ldr	r3, [pc, #408]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d101      	bne.n	8009ce0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e0be      	b.n	8009e5e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009ce0:	f000 f8ce 	bl	8009e80 <HAL_RCC_GetSysClockFreq>
 8009ce4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	4a61      	ldr	r2, [pc, #388]	; (8009e70 <HAL_RCC_ClockConfig+0x268>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d909      	bls.n	8009d02 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009cee:	4b5f      	ldr	r3, [pc, #380]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009cf6:	4a5d      	ldr	r2, [pc, #372]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cfc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009cfe:	2380      	movs	r3, #128	; 0x80
 8009d00:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009d02:	4b5a      	ldr	r3, [pc, #360]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	f023 0203 	bic.w	r2, r3, #3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	4957      	ldr	r1, [pc, #348]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009d10:	4313      	orrs	r3, r2
 8009d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d14:	f7fb fcbc 	bl	8005690 <HAL_GetTick>
 8009d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d1a:	e00a      	b.n	8009d32 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d1c:	f7fb fcb8 	bl	8005690 <HAL_GetTick>
 8009d20:	4602      	mov	r2, r0
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	1ad3      	subs	r3, r2, r3
 8009d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d901      	bls.n	8009d32 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009d2e:	2303      	movs	r3, #3
 8009d30:	e095      	b.n	8009e5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d32:	4b4e      	ldr	r3, [pc, #312]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	f003 020c 	and.w	r2, r3, #12
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d1eb      	bne.n	8009d1c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f003 0302 	and.w	r3, r3, #2
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d023      	beq.n	8009d98 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 0304 	and.w	r3, r3, #4
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d005      	beq.n	8009d68 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009d5c:	4b43      	ldr	r3, [pc, #268]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	4a42      	ldr	r2, [pc, #264]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009d62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009d66:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f003 0308 	and.w	r3, r3, #8
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d007      	beq.n	8009d84 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009d74:	4b3d      	ldr	r3, [pc, #244]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009d7c:	4a3b      	ldr	r2, [pc, #236]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009d7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009d82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d84:	4b39      	ldr	r3, [pc, #228]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	4936      	ldr	r1, [pc, #216]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009d92:	4313      	orrs	r3, r2
 8009d94:	608b      	str	r3, [r1, #8]
 8009d96:	e008      	b.n	8009daa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	2b80      	cmp	r3, #128	; 0x80
 8009d9c:	d105      	bne.n	8009daa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009d9e:	4b33      	ldr	r3, [pc, #204]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	4a32      	ldr	r2, [pc, #200]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009da4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009da8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009daa:	4b2f      	ldr	r3, [pc, #188]	; (8009e68 <HAL_RCC_ClockConfig+0x260>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f003 030f 	and.w	r3, r3, #15
 8009db2:	683a      	ldr	r2, [r7, #0]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d21d      	bcs.n	8009df4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009db8:	4b2b      	ldr	r3, [pc, #172]	; (8009e68 <HAL_RCC_ClockConfig+0x260>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f023 020f 	bic.w	r2, r3, #15
 8009dc0:	4929      	ldr	r1, [pc, #164]	; (8009e68 <HAL_RCC_ClockConfig+0x260>)
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009dc8:	f7fb fc62 	bl	8005690 <HAL_GetTick>
 8009dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009dce:	e00a      	b.n	8009de6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009dd0:	f7fb fc5e 	bl	8005690 <HAL_GetTick>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	1ad3      	subs	r3, r2, r3
 8009dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d901      	bls.n	8009de6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009de2:	2303      	movs	r3, #3
 8009de4:	e03b      	b.n	8009e5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009de6:	4b20      	ldr	r3, [pc, #128]	; (8009e68 <HAL_RCC_ClockConfig+0x260>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f003 030f 	and.w	r3, r3, #15
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d1ed      	bne.n	8009dd0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f003 0304 	and.w	r3, r3, #4
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d008      	beq.n	8009e12 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e00:	4b1a      	ldr	r3, [pc, #104]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	4917      	ldr	r1, [pc, #92]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 0308 	and.w	r3, r3, #8
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d009      	beq.n	8009e32 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009e1e:	4b13      	ldr	r3, [pc, #76]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	00db      	lsls	r3, r3, #3
 8009e2c:	490f      	ldr	r1, [pc, #60]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009e32:	f000 f825 	bl	8009e80 <HAL_RCC_GetSysClockFreq>
 8009e36:	4602      	mov	r2, r0
 8009e38:	4b0c      	ldr	r3, [pc, #48]	; (8009e6c <HAL_RCC_ClockConfig+0x264>)
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	091b      	lsrs	r3, r3, #4
 8009e3e:	f003 030f 	and.w	r3, r3, #15
 8009e42:	490c      	ldr	r1, [pc, #48]	; (8009e74 <HAL_RCC_ClockConfig+0x26c>)
 8009e44:	5ccb      	ldrb	r3, [r1, r3]
 8009e46:	f003 031f 	and.w	r3, r3, #31
 8009e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e4e:	4a0a      	ldr	r2, [pc, #40]	; (8009e78 <HAL_RCC_ClockConfig+0x270>)
 8009e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009e52:	4b0a      	ldr	r3, [pc, #40]	; (8009e7c <HAL_RCC_ClockConfig+0x274>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fb fbce 	bl	80055f8 <HAL_InitTick>
 8009e5c:	4603      	mov	r3, r0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3718      	adds	r7, #24
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	40022000 	.word	0x40022000
 8009e6c:	40021000 	.word	0x40021000
 8009e70:	04c4b400 	.word	0x04c4b400
 8009e74:	08012ed0 	.word	0x08012ed0
 8009e78:	20000000 	.word	0x20000000
 8009e7c:	20000004 	.word	0x20000004

08009e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b087      	sub	sp, #28
 8009e84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009e86:	4b2c      	ldr	r3, [pc, #176]	; (8009f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	f003 030c 	and.w	r3, r3, #12
 8009e8e:	2b04      	cmp	r3, #4
 8009e90:	d102      	bne.n	8009e98 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009e92:	4b2a      	ldr	r3, [pc, #168]	; (8009f3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8009e94:	613b      	str	r3, [r7, #16]
 8009e96:	e047      	b.n	8009f28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009e98:	4b27      	ldr	r3, [pc, #156]	; (8009f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	f003 030c 	and.w	r3, r3, #12
 8009ea0:	2b08      	cmp	r3, #8
 8009ea2:	d102      	bne.n	8009eaa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009ea4:	4b26      	ldr	r3, [pc, #152]	; (8009f40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009ea6:	613b      	str	r3, [r7, #16]
 8009ea8:	e03e      	b.n	8009f28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009eaa:	4b23      	ldr	r3, [pc, #140]	; (8009f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	f003 030c 	and.w	r3, r3, #12
 8009eb2:	2b0c      	cmp	r3, #12
 8009eb4:	d136      	bne.n	8009f24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009eb6:	4b20      	ldr	r3, [pc, #128]	; (8009f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	f003 0303 	and.w	r3, r3, #3
 8009ebe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009ec0:	4b1d      	ldr	r3, [pc, #116]	; (8009f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	091b      	lsrs	r3, r3, #4
 8009ec6:	f003 030f 	and.w	r3, r3, #15
 8009eca:	3301      	adds	r3, #1
 8009ecc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2b03      	cmp	r3, #3
 8009ed2:	d10c      	bne.n	8009eee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009ed4:	4a1a      	ldr	r2, [pc, #104]	; (8009f40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009edc:	4a16      	ldr	r2, [pc, #88]	; (8009f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009ede:	68d2      	ldr	r2, [r2, #12]
 8009ee0:	0a12      	lsrs	r2, r2, #8
 8009ee2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009ee6:	fb02 f303 	mul.w	r3, r2, r3
 8009eea:	617b      	str	r3, [r7, #20]
      break;
 8009eec:	e00c      	b.n	8009f08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009eee:	4a13      	ldr	r2, [pc, #76]	; (8009f3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ef6:	4a10      	ldr	r2, [pc, #64]	; (8009f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009ef8:	68d2      	ldr	r2, [r2, #12]
 8009efa:	0a12      	lsrs	r2, r2, #8
 8009efc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009f00:	fb02 f303 	mul.w	r3, r2, r3
 8009f04:	617b      	str	r3, [r7, #20]
      break;
 8009f06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009f08:	4b0b      	ldr	r3, [pc, #44]	; (8009f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	0e5b      	lsrs	r3, r3, #25
 8009f0e:	f003 0303 	and.w	r3, r3, #3
 8009f12:	3301      	adds	r3, #1
 8009f14:	005b      	lsls	r3, r3, #1
 8009f16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009f18:	697a      	ldr	r2, [r7, #20]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f20:	613b      	str	r3, [r7, #16]
 8009f22:	e001      	b.n	8009f28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009f24:	2300      	movs	r3, #0
 8009f26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009f28:	693b      	ldr	r3, [r7, #16]
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	371c      	adds	r7, #28
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop
 8009f38:	40021000 	.word	0x40021000
 8009f3c:	00f42400 	.word	0x00f42400
 8009f40:	007a1200 	.word	0x007a1200

08009f44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f44:	b480      	push	{r7}
 8009f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f48:	4b03      	ldr	r3, [pc, #12]	; (8009f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop
 8009f58:	20000000 	.word	0x20000000

08009f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009f60:	f7ff fff0 	bl	8009f44 <HAL_RCC_GetHCLKFreq>
 8009f64:	4602      	mov	r2, r0
 8009f66:	4b06      	ldr	r3, [pc, #24]	; (8009f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	0a1b      	lsrs	r3, r3, #8
 8009f6c:	f003 0307 	and.w	r3, r3, #7
 8009f70:	4904      	ldr	r1, [pc, #16]	; (8009f84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009f72:	5ccb      	ldrb	r3, [r1, r3]
 8009f74:	f003 031f 	and.w	r3, r3, #31
 8009f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	40021000 	.word	0x40021000
 8009f84:	08012ee0 	.word	0x08012ee0

08009f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009f8c:	f7ff ffda 	bl	8009f44 <HAL_RCC_GetHCLKFreq>
 8009f90:	4602      	mov	r2, r0
 8009f92:	4b06      	ldr	r3, [pc, #24]	; (8009fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	0adb      	lsrs	r3, r3, #11
 8009f98:	f003 0307 	and.w	r3, r3, #7
 8009f9c:	4904      	ldr	r1, [pc, #16]	; (8009fb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009f9e:	5ccb      	ldrb	r3, [r1, r3]
 8009fa0:	f003 031f 	and.w	r3, r3, #31
 8009fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	40021000 	.word	0x40021000
 8009fb0:	08012ee0 	.word	0x08012ee0

08009fb4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b087      	sub	sp, #28
 8009fb8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009fba:	4b1e      	ldr	r3, [pc, #120]	; (800a034 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	f003 0303 	and.w	r3, r3, #3
 8009fc2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009fc4:	4b1b      	ldr	r3, [pc, #108]	; (800a034 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	091b      	lsrs	r3, r3, #4
 8009fca:	f003 030f 	and.w	r3, r3, #15
 8009fce:	3301      	adds	r3, #1
 8009fd0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	2b03      	cmp	r3, #3
 8009fd6:	d10c      	bne.n	8009ff2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009fd8:	4a17      	ldr	r2, [pc, #92]	; (800a038 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fe0:	4a14      	ldr	r2, [pc, #80]	; (800a034 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009fe2:	68d2      	ldr	r2, [r2, #12]
 8009fe4:	0a12      	lsrs	r2, r2, #8
 8009fe6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009fea:	fb02 f303 	mul.w	r3, r2, r3
 8009fee:	617b      	str	r3, [r7, #20]
    break;
 8009ff0:	e00c      	b.n	800a00c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009ff2:	4a12      	ldr	r2, [pc, #72]	; (800a03c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ffa:	4a0e      	ldr	r2, [pc, #56]	; (800a034 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009ffc:	68d2      	ldr	r2, [r2, #12]
 8009ffe:	0a12      	lsrs	r2, r2, #8
 800a000:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a004:	fb02 f303 	mul.w	r3, r2, r3
 800a008:	617b      	str	r3, [r7, #20]
    break;
 800a00a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a00c:	4b09      	ldr	r3, [pc, #36]	; (800a034 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	0e5b      	lsrs	r3, r3, #25
 800a012:	f003 0303 	and.w	r3, r3, #3
 800a016:	3301      	adds	r3, #1
 800a018:	005b      	lsls	r3, r3, #1
 800a01a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a01c:	697a      	ldr	r2, [r7, #20]
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	fbb2 f3f3 	udiv	r3, r2, r3
 800a024:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a026:	687b      	ldr	r3, [r7, #4]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	371c      	adds	r7, #28
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr
 800a034:	40021000 	.word	0x40021000
 800a038:	007a1200 	.word	0x007a1200
 800a03c:	00f42400 	.word	0x00f42400

0800a040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b086      	sub	sp, #24
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a048:	2300      	movs	r3, #0
 800a04a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a04c:	2300      	movs	r3, #0
 800a04e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a058:	2b00      	cmp	r3, #0
 800a05a:	f000 8098 	beq.w	800a18e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a05e:	2300      	movs	r3, #0
 800a060:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a062:	4b43      	ldr	r3, [pc, #268]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d10d      	bne.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a06e:	4b40      	ldr	r3, [pc, #256]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a072:	4a3f      	ldr	r2, [pc, #252]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a078:	6593      	str	r3, [r2, #88]	; 0x58
 800a07a:	4b3d      	ldr	r3, [pc, #244]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a07c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a07e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a082:	60bb      	str	r3, [r7, #8]
 800a084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a086:	2301      	movs	r3, #1
 800a088:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a08a:	4b3a      	ldr	r3, [pc, #232]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a39      	ldr	r2, [pc, #228]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a094:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a096:	f7fb fafb 	bl	8005690 <HAL_GetTick>
 800a09a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a09c:	e009      	b.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a09e:	f7fb faf7 	bl	8005690 <HAL_GetTick>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d902      	bls.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	74fb      	strb	r3, [r7, #19]
        break;
 800a0b0:	e005      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a0b2:	4b30      	ldr	r3, [pc, #192]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d0ef      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a0be:	7cfb      	ldrb	r3, [r7, #19]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d159      	bne.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a0c4:	4b2a      	ldr	r3, [pc, #168]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a0c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d01e      	beq.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d019      	beq.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a0e0:	4b23      	ldr	r3, [pc, #140]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a0e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a0ec:	4b20      	ldr	r3, [pc, #128]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a0ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0f2:	4a1f      	ldr	r2, [pc, #124]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a0f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a0fc:	4b1c      	ldr	r3, [pc, #112]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a0fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a102:	4a1b      	ldr	r2, [pc, #108]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a10c:	4a18      	ldr	r2, [pc, #96]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	f003 0301 	and.w	r3, r3, #1
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d016      	beq.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a11e:	f7fb fab7 	bl	8005690 <HAL_GetTick>
 800a122:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a124:	e00b      	b.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a126:	f7fb fab3 	bl	8005690 <HAL_GetTick>
 800a12a:	4602      	mov	r2, r0
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	1ad3      	subs	r3, r2, r3
 800a130:	f241 3288 	movw	r2, #5000	; 0x1388
 800a134:	4293      	cmp	r3, r2
 800a136:	d902      	bls.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a138:	2303      	movs	r3, #3
 800a13a:	74fb      	strb	r3, [r7, #19]
            break;
 800a13c:	e006      	b.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a13e:	4b0c      	ldr	r3, [pc, #48]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a144:	f003 0302 	and.w	r3, r3, #2
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d0ec      	beq.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a14c:	7cfb      	ldrb	r3, [r7, #19]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d10b      	bne.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a152:	4b07      	ldr	r3, [pc, #28]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a158:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a160:	4903      	ldr	r1, [pc, #12]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a162:	4313      	orrs	r3, r2
 800a164:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a168:	e008      	b.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a16a:	7cfb      	ldrb	r3, [r7, #19]
 800a16c:	74bb      	strb	r3, [r7, #18]
 800a16e:	e005      	b.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a170:	40021000 	.word	0x40021000
 800a174:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a178:	7cfb      	ldrb	r3, [r7, #19]
 800a17a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a17c:	7c7b      	ldrb	r3, [r7, #17]
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d105      	bne.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a182:	4ba6      	ldr	r3, [pc, #664]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a186:	4aa5      	ldr	r2, [pc, #660]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a18c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f003 0301 	and.w	r3, r3, #1
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00a      	beq.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a19a:	4ba0      	ldr	r3, [pc, #640]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a19c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a0:	f023 0203 	bic.w	r2, r3, #3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	499c      	ldr	r1, [pc, #624]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f003 0302 	and.w	r3, r3, #2
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d00a      	beq.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a1bc:	4b97      	ldr	r3, [pc, #604]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1c2:	f023 020c 	bic.w	r2, r3, #12
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	4994      	ldr	r1, [pc, #592]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 0304 	and.w	r3, r3, #4
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00a      	beq.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a1de:	4b8f      	ldr	r3, [pc, #572]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	498b      	ldr	r1, [pc, #556]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 0308 	and.w	r3, r3, #8
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d00a      	beq.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a200:	4b86      	ldr	r3, [pc, #536]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a206:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	4983      	ldr	r1, [pc, #524]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a210:	4313      	orrs	r3, r2
 800a212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f003 0320 	and.w	r3, r3, #32
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d00a      	beq.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a222:	4b7e      	ldr	r3, [pc, #504]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a228:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	695b      	ldr	r3, [r3, #20]
 800a230:	497a      	ldr	r1, [pc, #488]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a232:	4313      	orrs	r3, r2
 800a234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00a      	beq.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a244:	4b75      	ldr	r3, [pc, #468]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a24a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	4972      	ldr	r1, [pc, #456]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a254:	4313      	orrs	r3, r2
 800a256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00a      	beq.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a266:	4b6d      	ldr	r3, [pc, #436]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a26c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	69db      	ldr	r3, [r3, #28]
 800a274:	4969      	ldr	r1, [pc, #420]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a276:	4313      	orrs	r3, r2
 800a278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a284:	2b00      	cmp	r3, #0
 800a286:	d00a      	beq.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a288:	4b64      	ldr	r3, [pc, #400]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a28a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a28e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	4961      	ldr	r1, [pc, #388]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a298:	4313      	orrs	r3, r2
 800a29a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00a      	beq.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a2aa:	4b5c      	ldr	r3, [pc, #368]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a2ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b8:	4958      	ldr	r1, [pc, #352]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d015      	beq.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a2cc:	4b53      	ldr	r3, [pc, #332]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a2ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2da:	4950      	ldr	r1, [pc, #320]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2ea:	d105      	bne.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a2ec:	4b4b      	ldr	r3, [pc, #300]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	4a4a      	ldr	r2, [pc, #296]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a2f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a300:	2b00      	cmp	r3, #0
 800a302:	d015      	beq.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a304:	4b45      	ldr	r3, [pc, #276]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a30a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a312:	4942      	ldr	r1, [pc, #264]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a314:	4313      	orrs	r3, r2
 800a316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a31e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a322:	d105      	bne.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a324:	4b3d      	ldr	r3, [pc, #244]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	4a3c      	ldr	r2, [pc, #240]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a32a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a32e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d015      	beq.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a33c:	4b37      	ldr	r3, [pc, #220]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a33e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a342:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a34a:	4934      	ldr	r1, [pc, #208]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a34c:	4313      	orrs	r3, r2
 800a34e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a356:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a35a:	d105      	bne.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a35c:	4b2f      	ldr	r3, [pc, #188]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	4a2e      	ldr	r2, [pc, #184]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a362:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a366:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a370:	2b00      	cmp	r3, #0
 800a372:	d015      	beq.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a374:	4b29      	ldr	r3, [pc, #164]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a37a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a382:	4926      	ldr	r1, [pc, #152]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a384:	4313      	orrs	r3, r2
 800a386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a38e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a392:	d105      	bne.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a394:	4b21      	ldr	r3, [pc, #132]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	4a20      	ldr	r2, [pc, #128]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a39a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a39e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d015      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a3ac:	4b1b      	ldr	r3, [pc, #108]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a3ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ba:	4918      	ldr	r1, [pc, #96]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3ca:	d105      	bne.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a3cc:	4b13      	ldr	r3, [pc, #76]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	4a12      	ldr	r2, [pc, #72]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a3d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d015      	beq.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a3e4:	4b0d      	ldr	r3, [pc, #52]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a3e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3f2:	490a      	ldr	r1, [pc, #40]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a402:	d105      	bne.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a404:	4b05      	ldr	r3, [pc, #20]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	4a04      	ldr	r2, [pc, #16]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a40a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a40e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a410:	7cbb      	ldrb	r3, [r7, #18]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3718      	adds	r7, #24
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	40021000 	.word	0x40021000

0800a420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	e049      	b.n	800a4c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d106      	bne.n	800a44c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f7fa ff20 	bl	800528c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2202      	movs	r2, #2
 800a450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	3304      	adds	r3, #4
 800a45c:	4619      	mov	r1, r3
 800a45e:	4610      	mov	r0, r2
 800a460:	f000 fdba 	bl	800afd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3708      	adds	r7, #8
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
	...

0800a4d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b085      	sub	sp, #20
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d001      	beq.n	800a4e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e04a      	b.n	800a57e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2202      	movs	r2, #2
 800a4ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68da      	ldr	r2, [r3, #12]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f042 0201 	orr.w	r2, r2, #1
 800a4fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a21      	ldr	r2, [pc, #132]	; (800a58c <HAL_TIM_Base_Start_IT+0xbc>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d018      	beq.n	800a53c <HAL_TIM_Base_Start_IT+0x6c>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a512:	d013      	beq.n	800a53c <HAL_TIM_Base_Start_IT+0x6c>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a1d      	ldr	r2, [pc, #116]	; (800a590 <HAL_TIM_Base_Start_IT+0xc0>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d00e      	beq.n	800a53c <HAL_TIM_Base_Start_IT+0x6c>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a1c      	ldr	r2, [pc, #112]	; (800a594 <HAL_TIM_Base_Start_IT+0xc4>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d009      	beq.n	800a53c <HAL_TIM_Base_Start_IT+0x6c>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a1a      	ldr	r2, [pc, #104]	; (800a598 <HAL_TIM_Base_Start_IT+0xc8>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d004      	beq.n	800a53c <HAL_TIM_Base_Start_IT+0x6c>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a19      	ldr	r2, [pc, #100]	; (800a59c <HAL_TIM_Base_Start_IT+0xcc>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d115      	bne.n	800a568 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	689a      	ldr	r2, [r3, #8]
 800a542:	4b17      	ldr	r3, [pc, #92]	; (800a5a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a544:	4013      	ands	r3, r2
 800a546:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2b06      	cmp	r3, #6
 800a54c:	d015      	beq.n	800a57a <HAL_TIM_Base_Start_IT+0xaa>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a554:	d011      	beq.n	800a57a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f042 0201 	orr.w	r2, r2, #1
 800a564:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a566:	e008      	b.n	800a57a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f042 0201 	orr.w	r2, r2, #1
 800a576:	601a      	str	r2, [r3, #0]
 800a578:	e000      	b.n	800a57c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a57a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3714      	adds	r7, #20
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop
 800a58c:	40012c00 	.word	0x40012c00
 800a590:	40000400 	.word	0x40000400
 800a594:	40000800 	.word	0x40000800
 800a598:	40013400 	.word	0x40013400
 800a59c:	40014000 	.word	0x40014000
 800a5a0:	00010007 	.word	0x00010007

0800a5a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d101      	bne.n	800a5b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e049      	b.n	800a64a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d106      	bne.n	800a5d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f841 	bl	800a652 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2202      	movs	r2, #2
 800a5d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	3304      	adds	r3, #4
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	4610      	mov	r0, r2
 800a5e4:	f000 fcf8 	bl	800afd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2201      	movs	r2, #1
 800a634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3708      	adds	r7, #8
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a652:	b480      	push	{r7}
 800a654:	b083      	sub	sp, #12
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a65a:	bf00      	nop
 800a65c:	370c      	adds	r7, #12
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
	...

0800a668 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d109      	bne.n	800a68c <HAL_TIM_PWM_Start+0x24>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	2b01      	cmp	r3, #1
 800a682:	bf14      	ite	ne
 800a684:	2301      	movne	r3, #1
 800a686:	2300      	moveq	r3, #0
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	e03c      	b.n	800a706 <HAL_TIM_PWM_Start+0x9e>
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	2b04      	cmp	r3, #4
 800a690:	d109      	bne.n	800a6a6 <HAL_TIM_PWM_Start+0x3e>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	bf14      	ite	ne
 800a69e:	2301      	movne	r3, #1
 800a6a0:	2300      	moveq	r3, #0
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	e02f      	b.n	800a706 <HAL_TIM_PWM_Start+0x9e>
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	2b08      	cmp	r3, #8
 800a6aa:	d109      	bne.n	800a6c0 <HAL_TIM_PWM_Start+0x58>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	bf14      	ite	ne
 800a6b8:	2301      	movne	r3, #1
 800a6ba:	2300      	moveq	r3, #0
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	e022      	b.n	800a706 <HAL_TIM_PWM_Start+0x9e>
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	2b0c      	cmp	r3, #12
 800a6c4:	d109      	bne.n	800a6da <HAL_TIM_PWM_Start+0x72>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	bf14      	ite	ne
 800a6d2:	2301      	movne	r3, #1
 800a6d4:	2300      	moveq	r3, #0
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	e015      	b.n	800a706 <HAL_TIM_PWM_Start+0x9e>
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	2b10      	cmp	r3, #16
 800a6de:	d109      	bne.n	800a6f4 <HAL_TIM_PWM_Start+0x8c>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	bf14      	ite	ne
 800a6ec:	2301      	movne	r3, #1
 800a6ee:	2300      	moveq	r3, #0
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	e008      	b.n	800a706 <HAL_TIM_PWM_Start+0x9e>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	bf14      	ite	ne
 800a700:	2301      	movne	r3, #1
 800a702:	2300      	moveq	r3, #0
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b00      	cmp	r3, #0
 800a708:	d001      	beq.n	800a70e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	e097      	b.n	800a83e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d104      	bne.n	800a71e <HAL_TIM_PWM_Start+0xb6>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2202      	movs	r2, #2
 800a718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a71c:	e023      	b.n	800a766 <HAL_TIM_PWM_Start+0xfe>
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	2b04      	cmp	r3, #4
 800a722:	d104      	bne.n	800a72e <HAL_TIM_PWM_Start+0xc6>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2202      	movs	r2, #2
 800a728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a72c:	e01b      	b.n	800a766 <HAL_TIM_PWM_Start+0xfe>
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	2b08      	cmp	r3, #8
 800a732:	d104      	bne.n	800a73e <HAL_TIM_PWM_Start+0xd6>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2202      	movs	r2, #2
 800a738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a73c:	e013      	b.n	800a766 <HAL_TIM_PWM_Start+0xfe>
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	2b0c      	cmp	r3, #12
 800a742:	d104      	bne.n	800a74e <HAL_TIM_PWM_Start+0xe6>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2202      	movs	r2, #2
 800a748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a74c:	e00b      	b.n	800a766 <HAL_TIM_PWM_Start+0xfe>
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	2b10      	cmp	r3, #16
 800a752:	d104      	bne.n	800a75e <HAL_TIM_PWM_Start+0xf6>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2202      	movs	r2, #2
 800a758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a75c:	e003      	b.n	800a766 <HAL_TIM_PWM_Start+0xfe>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2202      	movs	r2, #2
 800a762:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	2201      	movs	r2, #1
 800a76c:	6839      	ldr	r1, [r7, #0]
 800a76e:	4618      	mov	r0, r3
 800a770:	f001 f854 	bl	800b81c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a33      	ldr	r2, [pc, #204]	; (800a848 <HAL_TIM_PWM_Start+0x1e0>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d013      	beq.n	800a7a6 <HAL_TIM_PWM_Start+0x13e>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a32      	ldr	r2, [pc, #200]	; (800a84c <HAL_TIM_PWM_Start+0x1e4>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d00e      	beq.n	800a7a6 <HAL_TIM_PWM_Start+0x13e>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a30      	ldr	r2, [pc, #192]	; (800a850 <HAL_TIM_PWM_Start+0x1e8>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d009      	beq.n	800a7a6 <HAL_TIM_PWM_Start+0x13e>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a2f      	ldr	r2, [pc, #188]	; (800a854 <HAL_TIM_PWM_Start+0x1ec>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d004      	beq.n	800a7a6 <HAL_TIM_PWM_Start+0x13e>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a2d      	ldr	r2, [pc, #180]	; (800a858 <HAL_TIM_PWM_Start+0x1f0>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d101      	bne.n	800a7aa <HAL_TIM_PWM_Start+0x142>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e000      	b.n	800a7ac <HAL_TIM_PWM_Start+0x144>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d007      	beq.n	800a7c0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a7be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a20      	ldr	r2, [pc, #128]	; (800a848 <HAL_TIM_PWM_Start+0x1e0>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d018      	beq.n	800a7fc <HAL_TIM_PWM_Start+0x194>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7d2:	d013      	beq.n	800a7fc <HAL_TIM_PWM_Start+0x194>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a20      	ldr	r2, [pc, #128]	; (800a85c <HAL_TIM_PWM_Start+0x1f4>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d00e      	beq.n	800a7fc <HAL_TIM_PWM_Start+0x194>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a1f      	ldr	r2, [pc, #124]	; (800a860 <HAL_TIM_PWM_Start+0x1f8>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d009      	beq.n	800a7fc <HAL_TIM_PWM_Start+0x194>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a17      	ldr	r2, [pc, #92]	; (800a84c <HAL_TIM_PWM_Start+0x1e4>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d004      	beq.n	800a7fc <HAL_TIM_PWM_Start+0x194>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a16      	ldr	r2, [pc, #88]	; (800a850 <HAL_TIM_PWM_Start+0x1e8>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d115      	bne.n	800a828 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	689a      	ldr	r2, [r3, #8]
 800a802:	4b18      	ldr	r3, [pc, #96]	; (800a864 <HAL_TIM_PWM_Start+0x1fc>)
 800a804:	4013      	ands	r3, r2
 800a806:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2b06      	cmp	r3, #6
 800a80c:	d015      	beq.n	800a83a <HAL_TIM_PWM_Start+0x1d2>
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a814:	d011      	beq.n	800a83a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f042 0201 	orr.w	r2, r2, #1
 800a824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a826:	e008      	b.n	800a83a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f042 0201 	orr.w	r2, r2, #1
 800a836:	601a      	str	r2, [r3, #0]
 800a838:	e000      	b.n	800a83c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a83a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3710      	adds	r7, #16
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	40012c00 	.word	0x40012c00
 800a84c:	40013400 	.word	0x40013400
 800a850:	40014000 	.word	0x40014000
 800a854:	40014400 	.word	0x40014400
 800a858:	40014800 	.word	0x40014800
 800a85c:	40000400 	.word	0x40000400
 800a860:	40000800 	.word	0x40000800
 800a864:	00010007 	.word	0x00010007

0800a868 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	f003 0302 	and.w	r3, r3, #2
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	d122      	bne.n	800a8c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	f003 0302 	and.w	r3, r3, #2
 800a888:	2b02      	cmp	r3, #2
 800a88a:	d11b      	bne.n	800a8c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f06f 0202 	mvn.w	r2, #2
 800a894:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	f003 0303 	and.w	r3, r3, #3
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d003      	beq.n	800a8b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fb76 	bl	800af9c <HAL_TIM_IC_CaptureCallback>
 800a8b0:	e005      	b.n	800a8be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 fb68 	bl	800af88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 fb79 	bl	800afb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	691b      	ldr	r3, [r3, #16]
 800a8ca:	f003 0304 	and.w	r3, r3, #4
 800a8ce:	2b04      	cmp	r3, #4
 800a8d0:	d122      	bne.n	800a918 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	f003 0304 	and.w	r3, r3, #4
 800a8dc:	2b04      	cmp	r3, #4
 800a8de:	d11b      	bne.n	800a918 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f06f 0204 	mvn.w	r2, #4
 800a8e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2202      	movs	r2, #2
 800a8ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	699b      	ldr	r3, [r3, #24]
 800a8f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d003      	beq.n	800a906 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 fb4c 	bl	800af9c <HAL_TIM_IC_CaptureCallback>
 800a904:	e005      	b.n	800a912 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 fb3e 	bl	800af88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fb4f 	bl	800afb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	f003 0308 	and.w	r3, r3, #8
 800a922:	2b08      	cmp	r3, #8
 800a924:	d122      	bne.n	800a96c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	f003 0308 	and.w	r3, r3, #8
 800a930:	2b08      	cmp	r3, #8
 800a932:	d11b      	bne.n	800a96c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f06f 0208 	mvn.w	r2, #8
 800a93c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2204      	movs	r2, #4
 800a942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	69db      	ldr	r3, [r3, #28]
 800a94a:	f003 0303 	and.w	r3, r3, #3
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d003      	beq.n	800a95a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 fb22 	bl	800af9c <HAL_TIM_IC_CaptureCallback>
 800a958:	e005      	b.n	800a966 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 fb14 	bl	800af88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 fb25 	bl	800afb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	f003 0310 	and.w	r3, r3, #16
 800a976:	2b10      	cmp	r3, #16
 800a978:	d122      	bne.n	800a9c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	f003 0310 	and.w	r3, r3, #16
 800a984:	2b10      	cmp	r3, #16
 800a986:	d11b      	bne.n	800a9c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f06f 0210 	mvn.w	r2, #16
 800a990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2208      	movs	r2, #8
 800a996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	69db      	ldr	r3, [r3, #28]
 800a99e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d003      	beq.n	800a9ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 faf8 	bl	800af9c <HAL_TIM_IC_CaptureCallback>
 800a9ac:	e005      	b.n	800a9ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 faea 	bl	800af88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 fafb 	bl	800afb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	691b      	ldr	r3, [r3, #16]
 800a9c6:	f003 0301 	and.w	r3, r3, #1
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d10e      	bne.n	800a9ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	f003 0301 	and.w	r3, r3, #1
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d107      	bne.n	800a9ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f06f 0201 	mvn.w	r2, #1
 800a9e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 fac4 	bl	800af74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9f6:	2b80      	cmp	r3, #128	; 0x80
 800a9f8:	d10e      	bne.n	800aa18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa04:	2b80      	cmp	r3, #128	; 0x80
 800aa06:	d107      	bne.n	800aa18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f001 f91b 	bl	800bc4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	691b      	ldr	r3, [r3, #16]
 800aa1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa26:	d10e      	bne.n	800aa46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68db      	ldr	r3, [r3, #12]
 800aa2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa32:	2b80      	cmp	r3, #128	; 0x80
 800aa34:	d107      	bne.n	800aa46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f001 f90e 	bl	800bc62 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa50:	2b40      	cmp	r3, #64	; 0x40
 800aa52:	d10e      	bne.n	800aa72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa5e:	2b40      	cmp	r3, #64	; 0x40
 800aa60:	d107      	bne.n	800aa72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 faa9 	bl	800afc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	f003 0320 	and.w	r3, r3, #32
 800aa7c:	2b20      	cmp	r3, #32
 800aa7e:	d10e      	bne.n	800aa9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	f003 0320 	and.w	r3, r3, #32
 800aa8a:	2b20      	cmp	r3, #32
 800aa8c:	d107      	bne.n	800aa9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f06f 0220 	mvn.w	r2, #32
 800aa96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f001 f8ce 	bl	800bc3a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aaa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aaac:	d10f      	bne.n	800aace <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aab8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aabc:	d107      	bne.n	800aace <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800aac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f001 f8d4 	bl	800bc76 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	691b      	ldr	r3, [r3, #16]
 800aad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aad8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aadc:	d10f      	bne.n	800aafe <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	68db      	ldr	r3, [r3, #12]
 800aae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aae8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aaec:	d107      	bne.n	800aafe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800aaf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f001 f8c6 	bl	800bc8a <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab0c:	d10f      	bne.n	800ab2e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab1c:	d107      	bne.n	800ab2e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800ab26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f001 f8b8 	bl	800bc9e <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	691b      	ldr	r3, [r3, #16]
 800ab34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ab3c:	d10f      	bne.n	800ab5e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ab4c:	d107      	bne.n	800ab5e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800ab56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f001 f8aa 	bl	800bcb2 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab5e:	bf00      	nop
 800ab60:	3708      	adds	r7, #8
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
	...

0800ab68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d101      	bne.n	800ab82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ab7e:	2302      	movs	r3, #2
 800ab80:	e0fd      	b.n	800ad7e <HAL_TIM_PWM_ConfigChannel+0x216>
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2201      	movs	r2, #1
 800ab86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b14      	cmp	r3, #20
 800ab8e:	f200 80f0 	bhi.w	800ad72 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800ab92:	a201      	add	r2, pc, #4	; (adr r2, 800ab98 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800ab94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab98:	0800abed 	.word	0x0800abed
 800ab9c:	0800ad73 	.word	0x0800ad73
 800aba0:	0800ad73 	.word	0x0800ad73
 800aba4:	0800ad73 	.word	0x0800ad73
 800aba8:	0800ac2d 	.word	0x0800ac2d
 800abac:	0800ad73 	.word	0x0800ad73
 800abb0:	0800ad73 	.word	0x0800ad73
 800abb4:	0800ad73 	.word	0x0800ad73
 800abb8:	0800ac6f 	.word	0x0800ac6f
 800abbc:	0800ad73 	.word	0x0800ad73
 800abc0:	0800ad73 	.word	0x0800ad73
 800abc4:	0800ad73 	.word	0x0800ad73
 800abc8:	0800acaf 	.word	0x0800acaf
 800abcc:	0800ad73 	.word	0x0800ad73
 800abd0:	0800ad73 	.word	0x0800ad73
 800abd4:	0800ad73 	.word	0x0800ad73
 800abd8:	0800acf1 	.word	0x0800acf1
 800abdc:	0800ad73 	.word	0x0800ad73
 800abe0:	0800ad73 	.word	0x0800ad73
 800abe4:	0800ad73 	.word	0x0800ad73
 800abe8:	0800ad31 	.word	0x0800ad31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	68b9      	ldr	r1, [r7, #8]
 800abf2:	4618      	mov	r0, r3
 800abf4:	f000 fa80 	bl	800b0f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	699a      	ldr	r2, [r3, #24]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f042 0208 	orr.w	r2, r2, #8
 800ac06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	699a      	ldr	r2, [r3, #24]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f022 0204 	bic.w	r2, r2, #4
 800ac16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	6999      	ldr	r1, [r3, #24]
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	691a      	ldr	r2, [r3, #16]
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	430a      	orrs	r2, r1
 800ac28:	619a      	str	r2, [r3, #24]
      break;
 800ac2a:	e0a3      	b.n	800ad74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68b9      	ldr	r1, [r7, #8]
 800ac32:	4618      	mov	r0, r3
 800ac34:	f000 faf0 	bl	800b218 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	699a      	ldr	r2, [r3, #24]
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	699a      	ldr	r2, [r3, #24]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	6999      	ldr	r1, [r3, #24]
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	691b      	ldr	r3, [r3, #16]
 800ac62:	021a      	lsls	r2, r3, #8
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	430a      	orrs	r2, r1
 800ac6a:	619a      	str	r2, [r3, #24]
      break;
 800ac6c:	e082      	b.n	800ad74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	68b9      	ldr	r1, [r7, #8]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f000 fb59 	bl	800b32c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	69da      	ldr	r2, [r3, #28]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f042 0208 	orr.w	r2, r2, #8
 800ac88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	69da      	ldr	r2, [r3, #28]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f022 0204 	bic.w	r2, r2, #4
 800ac98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	69d9      	ldr	r1, [r3, #28]
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	691a      	ldr	r2, [r3, #16]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	430a      	orrs	r2, r1
 800acaa:	61da      	str	r2, [r3, #28]
      break;
 800acac:	e062      	b.n	800ad74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	68b9      	ldr	r1, [r7, #8]
 800acb4:	4618      	mov	r0, r3
 800acb6:	f000 fbc1 	bl	800b43c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	69da      	ldr	r2, [r3, #28]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800acc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	69da      	ldr	r2, [r3, #28]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800acd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	69d9      	ldr	r1, [r3, #28]
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	691b      	ldr	r3, [r3, #16]
 800ace4:	021a      	lsls	r2, r3, #8
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	430a      	orrs	r2, r1
 800acec:	61da      	str	r2, [r3, #28]
      break;
 800acee:	e041      	b.n	800ad74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68b9      	ldr	r1, [r7, #8]
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 fc2a 	bl	800b550 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f042 0208 	orr.w	r2, r2, #8
 800ad0a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f022 0204 	bic.w	r2, r2, #4
 800ad1a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	691a      	ldr	r2, [r3, #16]
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	430a      	orrs	r2, r1
 800ad2c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ad2e:	e021      	b.n	800ad74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	68b9      	ldr	r1, [r7, #8]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f000 fc6e 	bl	800b618 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad4a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad5a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	691b      	ldr	r3, [r3, #16]
 800ad66:	021a      	lsls	r2, r3, #8
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	430a      	orrs	r2, r1
 800ad6e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ad70:	e000      	b.n	800ad74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800ad72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop

0800ad88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d101      	bne.n	800ada0 <HAL_TIM_ConfigClockSource+0x18>
 800ad9c:	2302      	movs	r3, #2
 800ad9e:	e0dd      	b.n	800af5c <HAL_TIM_ConfigClockSource+0x1d4>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2202      	movs	r2, #2
 800adac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800adbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800adc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800adca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a62      	ldr	r2, [pc, #392]	; (800af64 <HAL_TIM_ConfigClockSource+0x1dc>)
 800adda:	4293      	cmp	r3, r2
 800addc:	f000 80a9 	beq.w	800af32 <HAL_TIM_ConfigClockSource+0x1aa>
 800ade0:	4a60      	ldr	r2, [pc, #384]	; (800af64 <HAL_TIM_ConfigClockSource+0x1dc>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	f200 80ae 	bhi.w	800af44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ade8:	4a5f      	ldr	r2, [pc, #380]	; (800af68 <HAL_TIM_ConfigClockSource+0x1e0>)
 800adea:	4293      	cmp	r3, r2
 800adec:	f000 80a1 	beq.w	800af32 <HAL_TIM_ConfigClockSource+0x1aa>
 800adf0:	4a5d      	ldr	r2, [pc, #372]	; (800af68 <HAL_TIM_ConfigClockSource+0x1e0>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	f200 80a6 	bhi.w	800af44 <HAL_TIM_ConfigClockSource+0x1bc>
 800adf8:	4a5c      	ldr	r2, [pc, #368]	; (800af6c <HAL_TIM_ConfigClockSource+0x1e4>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	f000 8099 	beq.w	800af32 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae00:	4a5a      	ldr	r2, [pc, #360]	; (800af6c <HAL_TIM_ConfigClockSource+0x1e4>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	f200 809e 	bhi.w	800af44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae08:	4a59      	ldr	r2, [pc, #356]	; (800af70 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	f000 8091 	beq.w	800af32 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae10:	4a57      	ldr	r2, [pc, #348]	; (800af70 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	f200 8096 	bhi.w	800af44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae18:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ae1c:	f000 8089 	beq.w	800af32 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae20:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ae24:	f200 808e 	bhi.w	800af44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae2c:	d03e      	beq.n	800aeac <HAL_TIM_ConfigClockSource+0x124>
 800ae2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae32:	f200 8087 	bhi.w	800af44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae3a:	f000 8085 	beq.w	800af48 <HAL_TIM_ConfigClockSource+0x1c0>
 800ae3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae42:	d87f      	bhi.n	800af44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae44:	2b70      	cmp	r3, #112	; 0x70
 800ae46:	d01a      	beq.n	800ae7e <HAL_TIM_ConfigClockSource+0xf6>
 800ae48:	2b70      	cmp	r3, #112	; 0x70
 800ae4a:	d87b      	bhi.n	800af44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae4c:	2b60      	cmp	r3, #96	; 0x60
 800ae4e:	d050      	beq.n	800aef2 <HAL_TIM_ConfigClockSource+0x16a>
 800ae50:	2b60      	cmp	r3, #96	; 0x60
 800ae52:	d877      	bhi.n	800af44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae54:	2b50      	cmp	r3, #80	; 0x50
 800ae56:	d03c      	beq.n	800aed2 <HAL_TIM_ConfigClockSource+0x14a>
 800ae58:	2b50      	cmp	r3, #80	; 0x50
 800ae5a:	d873      	bhi.n	800af44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae5c:	2b40      	cmp	r3, #64	; 0x40
 800ae5e:	d058      	beq.n	800af12 <HAL_TIM_ConfigClockSource+0x18a>
 800ae60:	2b40      	cmp	r3, #64	; 0x40
 800ae62:	d86f      	bhi.n	800af44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae64:	2b30      	cmp	r3, #48	; 0x30
 800ae66:	d064      	beq.n	800af32 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae68:	2b30      	cmp	r3, #48	; 0x30
 800ae6a:	d86b      	bhi.n	800af44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae6c:	2b20      	cmp	r3, #32
 800ae6e:	d060      	beq.n	800af32 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae70:	2b20      	cmp	r3, #32
 800ae72:	d867      	bhi.n	800af44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d05c      	beq.n	800af32 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae78:	2b10      	cmp	r3, #16
 800ae7a:	d05a      	beq.n	800af32 <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800ae7c:	e062      	b.n	800af44 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6818      	ldr	r0, [r3, #0]
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	6899      	ldr	r1, [r3, #8]
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	685a      	ldr	r2, [r3, #4]
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	f000 fca5 	bl	800b7dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aea0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	68fa      	ldr	r2, [r7, #12]
 800aea8:	609a      	str	r2, [r3, #8]
      break;
 800aeaa:	e04e      	b.n	800af4a <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6818      	ldr	r0, [r3, #0]
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	6899      	ldr	r1, [r3, #8]
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	685a      	ldr	r2, [r3, #4]
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	f000 fc8e 	bl	800b7dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	689a      	ldr	r2, [r3, #8]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aece:	609a      	str	r2, [r3, #8]
      break;
 800aed0:	e03b      	b.n	800af4a <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6818      	ldr	r0, [r3, #0]
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	6859      	ldr	r1, [r3, #4]
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	461a      	mov	r2, r3
 800aee0:	f000 fc00 	bl	800b6e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2150      	movs	r1, #80	; 0x50
 800aeea:	4618      	mov	r0, r3
 800aeec:	f000 fc59 	bl	800b7a2 <TIM_ITRx_SetConfig>
      break;
 800aef0:	e02b      	b.n	800af4a <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6818      	ldr	r0, [r3, #0]
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	6859      	ldr	r1, [r3, #4]
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	461a      	mov	r2, r3
 800af00:	f000 fc1f 	bl	800b742 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2160      	movs	r1, #96	; 0x60
 800af0a:	4618      	mov	r0, r3
 800af0c:	f000 fc49 	bl	800b7a2 <TIM_ITRx_SetConfig>
      break;
 800af10:	e01b      	b.n	800af4a <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6818      	ldr	r0, [r3, #0]
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	6859      	ldr	r1, [r3, #4]
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	461a      	mov	r2, r3
 800af20:	f000 fbe0 	bl	800b6e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2140      	movs	r1, #64	; 0x40
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 fc39 	bl	800b7a2 <TIM_ITRx_SetConfig>
      break;
 800af30:	e00b      	b.n	800af4a <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4619      	mov	r1, r3
 800af3c:	4610      	mov	r0, r2
 800af3e:	f000 fc30 	bl	800b7a2 <TIM_ITRx_SetConfig>
        break;
 800af42:	e002      	b.n	800af4a <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800af44:	bf00      	nop
 800af46:	e000      	b.n	800af4a <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800af48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2201      	movs	r2, #1
 800af4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af5a:	2300      	movs	r3, #0
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3710      	adds	r7, #16
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	00100070 	.word	0x00100070
 800af68:	00100040 	.word	0x00100040
 800af6c:	00100030 	.word	0x00100030
 800af70:	00100020 	.word	0x00100020

0800af74 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800af7c:	bf00      	nop
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af90:	bf00      	nop
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800afa4:	bf00      	nop
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800afb8:	bf00      	nop
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800afcc:	bf00      	nop
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	4a3c      	ldr	r2, [pc, #240]	; (800b0dc <TIM_Base_SetConfig+0x104>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d00f      	beq.n	800b010 <TIM_Base_SetConfig+0x38>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aff6:	d00b      	beq.n	800b010 <TIM_Base_SetConfig+0x38>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4a39      	ldr	r2, [pc, #228]	; (800b0e0 <TIM_Base_SetConfig+0x108>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d007      	beq.n	800b010 <TIM_Base_SetConfig+0x38>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a38      	ldr	r2, [pc, #224]	; (800b0e4 <TIM_Base_SetConfig+0x10c>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d003      	beq.n	800b010 <TIM_Base_SetConfig+0x38>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a37      	ldr	r2, [pc, #220]	; (800b0e8 <TIM_Base_SetConfig+0x110>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d108      	bne.n	800b022 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	68fa      	ldr	r2, [r7, #12]
 800b01e:	4313      	orrs	r3, r2
 800b020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	4a2d      	ldr	r2, [pc, #180]	; (800b0dc <TIM_Base_SetConfig+0x104>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d01b      	beq.n	800b062 <TIM_Base_SetConfig+0x8a>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b030:	d017      	beq.n	800b062 <TIM_Base_SetConfig+0x8a>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	4a2a      	ldr	r2, [pc, #168]	; (800b0e0 <TIM_Base_SetConfig+0x108>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d013      	beq.n	800b062 <TIM_Base_SetConfig+0x8a>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4a29      	ldr	r2, [pc, #164]	; (800b0e4 <TIM_Base_SetConfig+0x10c>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d00f      	beq.n	800b062 <TIM_Base_SetConfig+0x8a>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	4a28      	ldr	r2, [pc, #160]	; (800b0e8 <TIM_Base_SetConfig+0x110>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d00b      	beq.n	800b062 <TIM_Base_SetConfig+0x8a>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4a27      	ldr	r2, [pc, #156]	; (800b0ec <TIM_Base_SetConfig+0x114>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d007      	beq.n	800b062 <TIM_Base_SetConfig+0x8a>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4a26      	ldr	r2, [pc, #152]	; (800b0f0 <TIM_Base_SetConfig+0x118>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d003      	beq.n	800b062 <TIM_Base_SetConfig+0x8a>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4a25      	ldr	r2, [pc, #148]	; (800b0f4 <TIM_Base_SetConfig+0x11c>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d108      	bne.n	800b074 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	4313      	orrs	r3, r2
 800b072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	695b      	ldr	r3, [r3, #20]
 800b07e:	4313      	orrs	r3, r2
 800b080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	68fa      	ldr	r2, [r7, #12]
 800b086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	689a      	ldr	r2, [r3, #8]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4a10      	ldr	r2, [pc, #64]	; (800b0dc <TIM_Base_SetConfig+0x104>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d00f      	beq.n	800b0c0 <TIM_Base_SetConfig+0xe8>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	4a11      	ldr	r2, [pc, #68]	; (800b0e8 <TIM_Base_SetConfig+0x110>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d00b      	beq.n	800b0c0 <TIM_Base_SetConfig+0xe8>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	4a10      	ldr	r2, [pc, #64]	; (800b0ec <TIM_Base_SetConfig+0x114>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d007      	beq.n	800b0c0 <TIM_Base_SetConfig+0xe8>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4a0f      	ldr	r2, [pc, #60]	; (800b0f0 <TIM_Base_SetConfig+0x118>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d003      	beq.n	800b0c0 <TIM_Base_SetConfig+0xe8>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a0e      	ldr	r2, [pc, #56]	; (800b0f4 <TIM_Base_SetConfig+0x11c>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d103      	bne.n	800b0c8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	691a      	ldr	r2, [r3, #16]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	615a      	str	r2, [r3, #20]
}
 800b0ce:	bf00      	nop
 800b0d0:	3714      	adds	r7, #20
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	40012c00 	.word	0x40012c00
 800b0e0:	40000400 	.word	0x40000400
 800b0e4:	40000800 	.word	0x40000800
 800b0e8:	40013400 	.word	0x40013400
 800b0ec:	40014000 	.word	0x40014000
 800b0f0:	40014400 	.word	0x40014400
 800b0f4:	40014800 	.word	0x40014800

0800b0f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b087      	sub	sp, #28
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a1b      	ldr	r3, [r3, #32]
 800b106:	f023 0201 	bic.w	r2, r3, #1
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6a1b      	ldr	r3, [r3, #32]
 800b112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	699b      	ldr	r3, [r3, #24]
 800b11e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b12a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f023 0303 	bic.w	r3, r3, #3
 800b132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	f023 0302 	bic.w	r3, r3, #2
 800b144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	697a      	ldr	r2, [r7, #20]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4a2c      	ldr	r2, [pc, #176]	; (800b204 <TIM_OC1_SetConfig+0x10c>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d00f      	beq.n	800b178 <TIM_OC1_SetConfig+0x80>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4a2b      	ldr	r2, [pc, #172]	; (800b208 <TIM_OC1_SetConfig+0x110>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d00b      	beq.n	800b178 <TIM_OC1_SetConfig+0x80>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	4a2a      	ldr	r2, [pc, #168]	; (800b20c <TIM_OC1_SetConfig+0x114>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d007      	beq.n	800b178 <TIM_OC1_SetConfig+0x80>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4a29      	ldr	r2, [pc, #164]	; (800b210 <TIM_OC1_SetConfig+0x118>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d003      	beq.n	800b178 <TIM_OC1_SetConfig+0x80>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4a28      	ldr	r2, [pc, #160]	; (800b214 <TIM_OC1_SetConfig+0x11c>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d10c      	bne.n	800b192 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	f023 0308 	bic.w	r3, r3, #8
 800b17e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	697a      	ldr	r2, [r7, #20]
 800b186:	4313      	orrs	r3, r2
 800b188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	f023 0304 	bic.w	r3, r3, #4
 800b190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	4a1b      	ldr	r2, [pc, #108]	; (800b204 <TIM_OC1_SetConfig+0x10c>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d00f      	beq.n	800b1ba <TIM_OC1_SetConfig+0xc2>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	4a1a      	ldr	r2, [pc, #104]	; (800b208 <TIM_OC1_SetConfig+0x110>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d00b      	beq.n	800b1ba <TIM_OC1_SetConfig+0xc2>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	4a19      	ldr	r2, [pc, #100]	; (800b20c <TIM_OC1_SetConfig+0x114>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d007      	beq.n	800b1ba <TIM_OC1_SetConfig+0xc2>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4a18      	ldr	r2, [pc, #96]	; (800b210 <TIM_OC1_SetConfig+0x118>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d003      	beq.n	800b1ba <TIM_OC1_SetConfig+0xc2>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	4a17      	ldr	r2, [pc, #92]	; (800b214 <TIM_OC1_SetConfig+0x11c>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d111      	bne.n	800b1de <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b1c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	695b      	ldr	r3, [r3, #20]
 800b1ce:	693a      	ldr	r2, [r7, #16]
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	699b      	ldr	r3, [r3, #24]
 800b1d8:	693a      	ldr	r2, [r7, #16]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	693a      	ldr	r2, [r7, #16]
 800b1e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	68fa      	ldr	r2, [r7, #12]
 800b1e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	685a      	ldr	r2, [r3, #4]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	697a      	ldr	r2, [r7, #20]
 800b1f6:	621a      	str	r2, [r3, #32]
}
 800b1f8:	bf00      	nop
 800b1fa:	371c      	adds	r7, #28
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr
 800b204:	40012c00 	.word	0x40012c00
 800b208:	40013400 	.word	0x40013400
 800b20c:	40014000 	.word	0x40014000
 800b210:	40014400 	.word	0x40014400
 800b214:	40014800 	.word	0x40014800

0800b218 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b218:	b480      	push	{r7}
 800b21a:	b087      	sub	sp, #28
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a1b      	ldr	r3, [r3, #32]
 800b226:	f023 0210 	bic.w	r2, r3, #16
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a1b      	ldr	r3, [r3, #32]
 800b232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	699b      	ldr	r3, [r3, #24]
 800b23e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b24a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	021b      	lsls	r3, r3, #8
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	4313      	orrs	r3, r2
 800b25e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	f023 0320 	bic.w	r3, r3, #32
 800b266:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	011b      	lsls	r3, r3, #4
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	4313      	orrs	r3, r2
 800b272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a28      	ldr	r2, [pc, #160]	; (800b318 <TIM_OC2_SetConfig+0x100>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d003      	beq.n	800b284 <TIM_OC2_SetConfig+0x6c>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a27      	ldr	r2, [pc, #156]	; (800b31c <TIM_OC2_SetConfig+0x104>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d10d      	bne.n	800b2a0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b28a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	011b      	lsls	r3, r3, #4
 800b292:	697a      	ldr	r2, [r7, #20]
 800b294:	4313      	orrs	r3, r2
 800b296:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b29e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4a1d      	ldr	r2, [pc, #116]	; (800b318 <TIM_OC2_SetConfig+0x100>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d00f      	beq.n	800b2c8 <TIM_OC2_SetConfig+0xb0>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a1c      	ldr	r2, [pc, #112]	; (800b31c <TIM_OC2_SetConfig+0x104>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d00b      	beq.n	800b2c8 <TIM_OC2_SetConfig+0xb0>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	4a1b      	ldr	r2, [pc, #108]	; (800b320 <TIM_OC2_SetConfig+0x108>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d007      	beq.n	800b2c8 <TIM_OC2_SetConfig+0xb0>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	4a1a      	ldr	r2, [pc, #104]	; (800b324 <TIM_OC2_SetConfig+0x10c>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d003      	beq.n	800b2c8 <TIM_OC2_SetConfig+0xb0>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	4a19      	ldr	r2, [pc, #100]	; (800b328 <TIM_OC2_SetConfig+0x110>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d113      	bne.n	800b2f0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b2ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b2d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	695b      	ldr	r3, [r3, #20]
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	693a      	ldr	r2, [r7, #16]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	699b      	ldr	r3, [r3, #24]
 800b2e8:	009b      	lsls	r3, r3, #2
 800b2ea:	693a      	ldr	r2, [r7, #16]
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	693a      	ldr	r2, [r7, #16]
 800b2f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	685a      	ldr	r2, [r3, #4]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	697a      	ldr	r2, [r7, #20]
 800b308:	621a      	str	r2, [r3, #32]
}
 800b30a:	bf00      	nop
 800b30c:	371c      	adds	r7, #28
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	40012c00 	.word	0x40012c00
 800b31c:	40013400 	.word	0x40013400
 800b320:	40014000 	.word	0x40014000
 800b324:	40014400 	.word	0x40014400
 800b328:	40014800 	.word	0x40014800

0800b32c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b087      	sub	sp, #28
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6a1b      	ldr	r3, [r3, #32]
 800b33a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6a1b      	ldr	r3, [r3, #32]
 800b346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	69db      	ldr	r3, [r3, #28]
 800b352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b35a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b35e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f023 0303 	bic.w	r3, r3, #3
 800b366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68fa      	ldr	r2, [r7, #12]
 800b36e:	4313      	orrs	r3, r2
 800b370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	021b      	lsls	r3, r3, #8
 800b380:	697a      	ldr	r2, [r7, #20]
 800b382:	4313      	orrs	r3, r2
 800b384:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4a27      	ldr	r2, [pc, #156]	; (800b428 <TIM_OC3_SetConfig+0xfc>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d003      	beq.n	800b396 <TIM_OC3_SetConfig+0x6a>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4a26      	ldr	r2, [pc, #152]	; (800b42c <TIM_OC3_SetConfig+0x100>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d10d      	bne.n	800b3b2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b39c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	68db      	ldr	r3, [r3, #12]
 800b3a2:	021b      	lsls	r3, r3, #8
 800b3a4:	697a      	ldr	r2, [r7, #20]
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b3b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	4a1c      	ldr	r2, [pc, #112]	; (800b428 <TIM_OC3_SetConfig+0xfc>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d00f      	beq.n	800b3da <TIM_OC3_SetConfig+0xae>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	4a1b      	ldr	r2, [pc, #108]	; (800b42c <TIM_OC3_SetConfig+0x100>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d00b      	beq.n	800b3da <TIM_OC3_SetConfig+0xae>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	4a1a      	ldr	r2, [pc, #104]	; (800b430 <TIM_OC3_SetConfig+0x104>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d007      	beq.n	800b3da <TIM_OC3_SetConfig+0xae>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4a19      	ldr	r2, [pc, #100]	; (800b434 <TIM_OC3_SetConfig+0x108>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d003      	beq.n	800b3da <TIM_OC3_SetConfig+0xae>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4a18      	ldr	r2, [pc, #96]	; (800b438 <TIM_OC3_SetConfig+0x10c>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d113      	bne.n	800b402 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b3e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	695b      	ldr	r3, [r3, #20]
 800b3ee:	011b      	lsls	r3, r3, #4
 800b3f0:	693a      	ldr	r2, [r7, #16]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	699b      	ldr	r3, [r3, #24]
 800b3fa:	011b      	lsls	r3, r3, #4
 800b3fc:	693a      	ldr	r2, [r7, #16]
 800b3fe:	4313      	orrs	r3, r2
 800b400:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	693a      	ldr	r2, [r7, #16]
 800b406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	685a      	ldr	r2, [r3, #4]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	697a      	ldr	r2, [r7, #20]
 800b41a:	621a      	str	r2, [r3, #32]
}
 800b41c:	bf00      	nop
 800b41e:	371c      	adds	r7, #28
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr
 800b428:	40012c00 	.word	0x40012c00
 800b42c:	40013400 	.word	0x40013400
 800b430:	40014000 	.word	0x40014000
 800b434:	40014400 	.word	0x40014400
 800b438:	40014800 	.word	0x40014800

0800b43c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b087      	sub	sp, #28
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6a1b      	ldr	r3, [r3, #32]
 800b44a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a1b      	ldr	r3, [r3, #32]
 800b456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	69db      	ldr	r3, [r3, #28]
 800b462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b46a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b46e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	021b      	lsls	r3, r3, #8
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	4313      	orrs	r3, r2
 800b482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b48a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	031b      	lsls	r3, r3, #12
 800b492:	697a      	ldr	r2, [r7, #20]
 800b494:	4313      	orrs	r3, r2
 800b496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	4a28      	ldr	r2, [pc, #160]	; (800b53c <TIM_OC4_SetConfig+0x100>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d003      	beq.n	800b4a8 <TIM_OC4_SetConfig+0x6c>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4a27      	ldr	r2, [pc, #156]	; (800b540 <TIM_OC4_SetConfig+0x104>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d10d      	bne.n	800b4c4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b4ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	031b      	lsls	r3, r3, #12
 800b4b6:	697a      	ldr	r2, [r7, #20]
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b4c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4a1d      	ldr	r2, [pc, #116]	; (800b53c <TIM_OC4_SetConfig+0x100>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d00f      	beq.n	800b4ec <TIM_OC4_SetConfig+0xb0>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a1c      	ldr	r2, [pc, #112]	; (800b540 <TIM_OC4_SetConfig+0x104>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d00b      	beq.n	800b4ec <TIM_OC4_SetConfig+0xb0>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	4a1b      	ldr	r2, [pc, #108]	; (800b544 <TIM_OC4_SetConfig+0x108>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d007      	beq.n	800b4ec <TIM_OC4_SetConfig+0xb0>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	4a1a      	ldr	r2, [pc, #104]	; (800b548 <TIM_OC4_SetConfig+0x10c>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d003      	beq.n	800b4ec <TIM_OC4_SetConfig+0xb0>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	4a19      	ldr	r2, [pc, #100]	; (800b54c <TIM_OC4_SetConfig+0x110>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d113      	bne.n	800b514 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b4f2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b4fa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	695b      	ldr	r3, [r3, #20]
 800b500:	019b      	lsls	r3, r3, #6
 800b502:	693a      	ldr	r2, [r7, #16]
 800b504:	4313      	orrs	r3, r2
 800b506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	699b      	ldr	r3, [r3, #24]
 800b50c:	019b      	lsls	r3, r3, #6
 800b50e:	693a      	ldr	r2, [r7, #16]
 800b510:	4313      	orrs	r3, r2
 800b512:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	693a      	ldr	r2, [r7, #16]
 800b518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	68fa      	ldr	r2, [r7, #12]
 800b51e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	685a      	ldr	r2, [r3, #4]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	697a      	ldr	r2, [r7, #20]
 800b52c:	621a      	str	r2, [r3, #32]
}
 800b52e:	bf00      	nop
 800b530:	371c      	adds	r7, #28
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr
 800b53a:	bf00      	nop
 800b53c:	40012c00 	.word	0x40012c00
 800b540:	40013400 	.word	0x40013400
 800b544:	40014000 	.word	0x40014000
 800b548:	40014400 	.word	0x40014400
 800b54c:	40014800 	.word	0x40014800

0800b550 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b550:	b480      	push	{r7}
 800b552:	b087      	sub	sp, #28
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6a1b      	ldr	r3, [r3, #32]
 800b55e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6a1b      	ldr	r3, [r3, #32]
 800b56a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b57e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	4313      	orrs	r3, r2
 800b58c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b594:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	689b      	ldr	r3, [r3, #8]
 800b59a:	041b      	lsls	r3, r3, #16
 800b59c:	693a      	ldr	r2, [r7, #16]
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4a17      	ldr	r2, [pc, #92]	; (800b604 <TIM_OC5_SetConfig+0xb4>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d00f      	beq.n	800b5ca <TIM_OC5_SetConfig+0x7a>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4a16      	ldr	r2, [pc, #88]	; (800b608 <TIM_OC5_SetConfig+0xb8>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d00b      	beq.n	800b5ca <TIM_OC5_SetConfig+0x7a>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a15      	ldr	r2, [pc, #84]	; (800b60c <TIM_OC5_SetConfig+0xbc>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d007      	beq.n	800b5ca <TIM_OC5_SetConfig+0x7a>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4a14      	ldr	r2, [pc, #80]	; (800b610 <TIM_OC5_SetConfig+0xc0>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d003      	beq.n	800b5ca <TIM_OC5_SetConfig+0x7a>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	4a13      	ldr	r2, [pc, #76]	; (800b614 <TIM_OC5_SetConfig+0xc4>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d109      	bne.n	800b5de <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	695b      	ldr	r3, [r3, #20]
 800b5d6:	021b      	lsls	r3, r3, #8
 800b5d8:	697a      	ldr	r2, [r7, #20]
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	697a      	ldr	r2, [r7, #20]
 800b5e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	685a      	ldr	r2, [r3, #4]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	693a      	ldr	r2, [r7, #16]
 800b5f6:	621a      	str	r2, [r3, #32]
}
 800b5f8:	bf00      	nop
 800b5fa:	371c      	adds	r7, #28
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr
 800b604:	40012c00 	.word	0x40012c00
 800b608:	40013400 	.word	0x40013400
 800b60c:	40014000 	.word	0x40014000
 800b610:	40014400 	.word	0x40014400
 800b614:	40014800 	.word	0x40014800

0800b618 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b618:	b480      	push	{r7}
 800b61a:	b087      	sub	sp, #28
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a1b      	ldr	r3, [r3, #32]
 800b626:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6a1b      	ldr	r3, [r3, #32]
 800b632:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b63e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b64a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	021b      	lsls	r3, r3, #8
 800b652:	68fa      	ldr	r2, [r7, #12]
 800b654:	4313      	orrs	r3, r2
 800b656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b65e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	051b      	lsls	r3, r3, #20
 800b666:	693a      	ldr	r2, [r7, #16]
 800b668:	4313      	orrs	r3, r2
 800b66a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4a18      	ldr	r2, [pc, #96]	; (800b6d0 <TIM_OC6_SetConfig+0xb8>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d00f      	beq.n	800b694 <TIM_OC6_SetConfig+0x7c>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a17      	ldr	r2, [pc, #92]	; (800b6d4 <TIM_OC6_SetConfig+0xbc>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d00b      	beq.n	800b694 <TIM_OC6_SetConfig+0x7c>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	4a16      	ldr	r2, [pc, #88]	; (800b6d8 <TIM_OC6_SetConfig+0xc0>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d007      	beq.n	800b694 <TIM_OC6_SetConfig+0x7c>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4a15      	ldr	r2, [pc, #84]	; (800b6dc <TIM_OC6_SetConfig+0xc4>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d003      	beq.n	800b694 <TIM_OC6_SetConfig+0x7c>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	4a14      	ldr	r2, [pc, #80]	; (800b6e0 <TIM_OC6_SetConfig+0xc8>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d109      	bne.n	800b6a8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b69a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	695b      	ldr	r3, [r3, #20]
 800b6a0:	029b      	lsls	r3, r3, #10
 800b6a2:	697a      	ldr	r2, [r7, #20]
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	697a      	ldr	r2, [r7, #20]
 800b6ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	68fa      	ldr	r2, [r7, #12]
 800b6b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	685a      	ldr	r2, [r3, #4]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	693a      	ldr	r2, [r7, #16]
 800b6c0:	621a      	str	r2, [r3, #32]
}
 800b6c2:	bf00      	nop
 800b6c4:	371c      	adds	r7, #28
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr
 800b6ce:	bf00      	nop
 800b6d0:	40012c00 	.word	0x40012c00
 800b6d4:	40013400 	.word	0x40013400
 800b6d8:	40014000 	.word	0x40014000
 800b6dc:	40014400 	.word	0x40014400
 800b6e0:	40014800 	.word	0x40014800

0800b6e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b087      	sub	sp, #28
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	60b9      	str	r1, [r7, #8]
 800b6ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	6a1b      	ldr	r3, [r3, #32]
 800b6f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	6a1b      	ldr	r3, [r3, #32]
 800b6fa:	f023 0201 	bic.w	r2, r3, #1
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	699b      	ldr	r3, [r3, #24]
 800b706:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b70e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	011b      	lsls	r3, r3, #4
 800b714:	693a      	ldr	r2, [r7, #16]
 800b716:	4313      	orrs	r3, r2
 800b718:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	f023 030a 	bic.w	r3, r3, #10
 800b720:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b722:	697a      	ldr	r2, [r7, #20]
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	4313      	orrs	r3, r2
 800b728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	693a      	ldr	r2, [r7, #16]
 800b72e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	697a      	ldr	r2, [r7, #20]
 800b734:	621a      	str	r2, [r3, #32]
}
 800b736:	bf00      	nop
 800b738:	371c      	adds	r7, #28
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr

0800b742 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b742:	b480      	push	{r7}
 800b744:	b087      	sub	sp, #28
 800b746:	af00      	add	r7, sp, #0
 800b748:	60f8      	str	r0, [r7, #12]
 800b74a:	60b9      	str	r1, [r7, #8]
 800b74c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6a1b      	ldr	r3, [r3, #32]
 800b752:	f023 0210 	bic.w	r2, r3, #16
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6a1b      	ldr	r3, [r3, #32]
 800b764:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b76c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	031b      	lsls	r3, r3, #12
 800b772:	697a      	ldr	r2, [r7, #20]
 800b774:	4313      	orrs	r3, r2
 800b776:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b77e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	011b      	lsls	r3, r3, #4
 800b784:	693a      	ldr	r2, [r7, #16]
 800b786:	4313      	orrs	r3, r2
 800b788:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	697a      	ldr	r2, [r7, #20]
 800b78e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	693a      	ldr	r2, [r7, #16]
 800b794:	621a      	str	r2, [r3, #32]
}
 800b796:	bf00      	nop
 800b798:	371c      	adds	r7, #28
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr

0800b7a2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b7a2:	b480      	push	{r7}
 800b7a4:	b085      	sub	sp, #20
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
 800b7aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b7b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b7be:	683a      	ldr	r2, [r7, #0]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	f043 0307 	orr.w	r3, r3, #7
 800b7c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	609a      	str	r2, [r3, #8]
}
 800b7d0:	bf00      	nop
 800b7d2:	3714      	adds	r7, #20
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr

0800b7dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b087      	sub	sp, #28
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
 800b7e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	689b      	ldr	r3, [r3, #8]
 800b7ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	021a      	lsls	r2, r3, #8
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	431a      	orrs	r2, r3
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	4313      	orrs	r3, r2
 800b804:	697a      	ldr	r2, [r7, #20]
 800b806:	4313      	orrs	r3, r2
 800b808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	697a      	ldr	r2, [r7, #20]
 800b80e:	609a      	str	r2, [r3, #8]
}
 800b810:	bf00      	nop
 800b812:	371c      	adds	r7, #28
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b087      	sub	sp, #28
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	f003 031f 	and.w	r3, r3, #31
 800b82e:	2201      	movs	r2, #1
 800b830:	fa02 f303 	lsl.w	r3, r2, r3
 800b834:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	6a1a      	ldr	r2, [r3, #32]
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	43db      	mvns	r3, r3
 800b83e:	401a      	ands	r2, r3
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6a1a      	ldr	r2, [r3, #32]
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	f003 031f 	and.w	r3, r3, #31
 800b84e:	6879      	ldr	r1, [r7, #4]
 800b850:	fa01 f303 	lsl.w	r3, r1, r3
 800b854:	431a      	orrs	r2, r3
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	621a      	str	r2, [r3, #32]
}
 800b85a:	bf00      	nop
 800b85c:	371c      	adds	r7, #28
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr
	...

0800b868 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b084      	sub	sp, #16
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d109      	bne.n	800b88c <HAL_TIMEx_PWMN_Start+0x24>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	2b01      	cmp	r3, #1
 800b882:	bf14      	ite	ne
 800b884:	2301      	movne	r3, #1
 800b886:	2300      	moveq	r3, #0
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	e022      	b.n	800b8d2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	2b04      	cmp	r3, #4
 800b890:	d109      	bne.n	800b8a6 <HAL_TIMEx_PWMN_Start+0x3e>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	bf14      	ite	ne
 800b89e:	2301      	movne	r3, #1
 800b8a0:	2300      	moveq	r3, #0
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	e015      	b.n	800b8d2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	2b08      	cmp	r3, #8
 800b8aa:	d109      	bne.n	800b8c0 <HAL_TIMEx_PWMN_Start+0x58>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	bf14      	ite	ne
 800b8b8:	2301      	movne	r3, #1
 800b8ba:	2300      	moveq	r3, #0
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	e008      	b.n	800b8d2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	bf14      	ite	ne
 800b8cc:	2301      	movne	r3, #1
 800b8ce:	2300      	moveq	r3, #0
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d001      	beq.n	800b8da <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e069      	b.n	800b9ae <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d104      	bne.n	800b8ea <HAL_TIMEx_PWMN_Start+0x82>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2202      	movs	r2, #2
 800b8e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8e8:	e013      	b.n	800b912 <HAL_TIMEx_PWMN_Start+0xaa>
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	2b04      	cmp	r3, #4
 800b8ee:	d104      	bne.n	800b8fa <HAL_TIMEx_PWMN_Start+0x92>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2202      	movs	r2, #2
 800b8f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8f8:	e00b      	b.n	800b912 <HAL_TIMEx_PWMN_Start+0xaa>
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	2b08      	cmp	r3, #8
 800b8fe:	d104      	bne.n	800b90a <HAL_TIMEx_PWMN_Start+0xa2>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2202      	movs	r2, #2
 800b904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b908:	e003      	b.n	800b912 <HAL_TIMEx_PWMN_Start+0xaa>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2202      	movs	r2, #2
 800b90e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2204      	movs	r2, #4
 800b918:	6839      	ldr	r1, [r7, #0]
 800b91a:	4618      	mov	r0, r3
 800b91c:	f000 f9d3 	bl	800bcc6 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b92e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a20      	ldr	r2, [pc, #128]	; (800b9b8 <HAL_TIMEx_PWMN_Start+0x150>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d018      	beq.n	800b96c <HAL_TIMEx_PWMN_Start+0x104>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b942:	d013      	beq.n	800b96c <HAL_TIMEx_PWMN_Start+0x104>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a1c      	ldr	r2, [pc, #112]	; (800b9bc <HAL_TIMEx_PWMN_Start+0x154>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d00e      	beq.n	800b96c <HAL_TIMEx_PWMN_Start+0x104>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a1b      	ldr	r2, [pc, #108]	; (800b9c0 <HAL_TIMEx_PWMN_Start+0x158>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d009      	beq.n	800b96c <HAL_TIMEx_PWMN_Start+0x104>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a19      	ldr	r2, [pc, #100]	; (800b9c4 <HAL_TIMEx_PWMN_Start+0x15c>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d004      	beq.n	800b96c <HAL_TIMEx_PWMN_Start+0x104>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a18      	ldr	r2, [pc, #96]	; (800b9c8 <HAL_TIMEx_PWMN_Start+0x160>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d115      	bne.n	800b998 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	689a      	ldr	r2, [r3, #8]
 800b972:	4b16      	ldr	r3, [pc, #88]	; (800b9cc <HAL_TIMEx_PWMN_Start+0x164>)
 800b974:	4013      	ands	r3, r2
 800b976:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2b06      	cmp	r3, #6
 800b97c:	d015      	beq.n	800b9aa <HAL_TIMEx_PWMN_Start+0x142>
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b984:	d011      	beq.n	800b9aa <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f042 0201 	orr.w	r2, r2, #1
 800b994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b996:	e008      	b.n	800b9aa <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f042 0201 	orr.w	r2, r2, #1
 800b9a6:	601a      	str	r2, [r3, #0]
 800b9a8:	e000      	b.n	800b9ac <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3710      	adds	r7, #16
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	40012c00 	.word	0x40012c00
 800b9bc:	40000400 	.word	0x40000400
 800b9c0:	40000800 	.word	0x40000800
 800b9c4:	40013400 	.word	0x40013400
 800b9c8:	40014000 	.word	0x40014000
 800b9cc:	00010007 	.word	0x00010007

0800b9d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d101      	bne.n	800b9e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b9e4:	2302      	movs	r3, #2
 800b9e6:	e065      	b.n	800bab4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2202      	movs	r2, #2
 800b9f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a2c      	ldr	r2, [pc, #176]	; (800bac0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d004      	beq.n	800ba1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a2b      	ldr	r2, [pc, #172]	; (800bac4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d108      	bne.n	800ba2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ba22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ba34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a1b      	ldr	r2, [pc, #108]	; (800bac0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d018      	beq.n	800ba88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba5e:	d013      	beq.n	800ba88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a18      	ldr	r2, [pc, #96]	; (800bac8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d00e      	beq.n	800ba88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a17      	ldr	r2, [pc, #92]	; (800bacc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d009      	beq.n	800ba88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a12      	ldr	r2, [pc, #72]	; (800bac4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d004      	beq.n	800ba88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4a13      	ldr	r2, [pc, #76]	; (800bad0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d10c      	bne.n	800baa2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	68ba      	ldr	r2, [r7, #8]
 800ba96:	4313      	orrs	r3, r2
 800ba98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	68ba      	ldr	r2, [r7, #8]
 800baa0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2201      	movs	r2, #1
 800baa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bab2:	2300      	movs	r3, #0
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3714      	adds	r7, #20
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr
 800bac0:	40012c00 	.word	0x40012c00
 800bac4:	40013400 	.word	0x40013400
 800bac8:	40000400 	.word	0x40000400
 800bacc:	40000800 	.word	0x40000800
 800bad0:	40014000 	.word	0x40014000

0800bad4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b085      	sub	sp, #20
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bade:	2300      	movs	r3, #0
 800bae0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d101      	bne.n	800baf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800baec:	2302      	movs	r3, #2
 800baee:	e087      	b.n	800bc00 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2201      	movs	r2, #1
 800baf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	68db      	ldr	r3, [r3, #12]
 800bb02:	4313      	orrs	r3, r2
 800bb04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	689b      	ldr	r3, [r3, #8]
 800bb10:	4313      	orrs	r3, r2
 800bb12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	691b      	ldr	r3, [r3, #16]
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	695b      	ldr	r3, [r3, #20]
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb56:	4313      	orrs	r3, r2
 800bb58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	699b      	ldr	r3, [r3, #24]
 800bb64:	041b      	lsls	r3, r3, #16
 800bb66:	4313      	orrs	r3, r2
 800bb68:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a27      	ldr	r2, [pc, #156]	; (800bc0c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d004      	beq.n	800bb7e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a25      	ldr	r2, [pc, #148]	; (800bc10 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d106      	bne.n	800bb8c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	69db      	ldr	r3, [r3, #28]
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a1e      	ldr	r2, [pc, #120]	; (800bc0c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d004      	beq.n	800bba0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a1d      	ldr	r2, [pc, #116]	; (800bc10 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d126      	bne.n	800bbee <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbaa:	051b      	lsls	r3, r3, #20
 800bbac:	4313      	orrs	r3, r2
 800bbae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	6a1b      	ldr	r3, [r3, #32]
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	4a0e      	ldr	r2, [pc, #56]	; (800bc0c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	d004      	beq.n	800bbe0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4a0d      	ldr	r2, [pc, #52]	; (800bc10 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d106      	bne.n	800bbee <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbea:	4313      	orrs	r3, r2
 800bbec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	68fa      	ldr	r2, [r7, #12]
 800bbf4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bbfe:	2300      	movs	r3, #0
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3714      	adds	r7, #20
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr
 800bc0c:	40012c00 	.word	0x40012c00
 800bc10:	40013400 	.word	0x40013400

0800bc14 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800bc2a:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	370c      	adds	r7, #12
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr

0800bc3a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc3a:	b480      	push	{r7}
 800bc3c:	b083      	sub	sp, #12
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc42:	bf00      	nop
 800bc44:	370c      	adds	r7, #12
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr

0800bc4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc4e:	b480      	push	{r7}
 800bc50:	b083      	sub	sp, #12
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc56:	bf00      	nop
 800bc58:	370c      	adds	r7, #12
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr

0800bc62 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bc62:	b480      	push	{r7}
 800bc64:	b083      	sub	sp, #12
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bc6a:	bf00      	nop
 800bc6c:	370c      	adds	r7, #12
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr

0800bc76 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bc76:	b480      	push	{r7}
 800bc78:	b083      	sub	sp, #12
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bc7e:	bf00      	nop
 800bc80:	370c      	adds	r7, #12
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr

0800bc8a <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bc8a:	b480      	push	{r7}
 800bc8c:	b083      	sub	sp, #12
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bc92:	bf00      	nop
 800bc94:	370c      	adds	r7, #12
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr

0800bc9e <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bc9e:	b480      	push	{r7}
 800bca0:	b083      	sub	sp, #12
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bca6:	bf00      	nop
 800bca8:	370c      	adds	r7, #12
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr

0800bcb2 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bcb2:	b480      	push	{r7}
 800bcb4:	b083      	sub	sp, #12
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bcba:	bf00      	nop
 800bcbc:	370c      	adds	r7, #12
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr

0800bcc6 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800bcc6:	b480      	push	{r7}
 800bcc8:	b087      	sub	sp, #28
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	60f8      	str	r0, [r7, #12]
 800bcce:	60b9      	str	r1, [r7, #8]
 800bcd0:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	f003 031f 	and.w	r3, r3, #31
 800bcd8:	2204      	movs	r2, #4
 800bcda:	fa02 f303 	lsl.w	r3, r2, r3
 800bcde:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	6a1a      	ldr	r2, [r3, #32]
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	43db      	mvns	r3, r3
 800bce8:	401a      	ands	r2, r3
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	6a1a      	ldr	r2, [r3, #32]
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	f003 031f 	and.w	r3, r3, #31
 800bcf8:	6879      	ldr	r1, [r7, #4]
 800bcfa:	fa01 f303 	lsl.w	r3, r1, r3
 800bcfe:	431a      	orrs	r2, r3
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	621a      	str	r2, [r3, #32]
}
 800bd04:	bf00      	nop
 800bd06:	371c      	adds	r7, #28
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d101      	bne.n	800bd22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	e042      	b.n	800bda8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d106      	bne.n	800bd3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f7f9 fb91 	bl	800545c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2224      	movs	r2, #36	; 0x24
 800bd3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f022 0201 	bic.w	r2, r2, #1
 800bd50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 fb5c 	bl	800c410 <UART_SetConfig>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d101      	bne.n	800bd62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e022      	b.n	800bda8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d002      	beq.n	800bd70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 fdee 	bl	800c94c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	685a      	ldr	r2, [r3, #4]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bd7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	689a      	ldr	r2, [r3, #8]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f042 0201 	orr.w	r2, r2, #1
 800bd9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 fe75 	bl	800ca90 <UART_CheckIdleState>
 800bda6:	4603      	mov	r3, r0
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3708      	adds	r7, #8
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b08a      	sub	sp, #40	; 0x28
 800bdb4:	af02      	add	r7, sp, #8
 800bdb6:	60f8      	str	r0, [r7, #12]
 800bdb8:	60b9      	str	r1, [r7, #8]
 800bdba:	603b      	str	r3, [r7, #0]
 800bdbc:	4613      	mov	r3, r2
 800bdbe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdc6:	2b20      	cmp	r3, #32
 800bdc8:	f040 8083 	bne.w	800bed2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d002      	beq.n	800bdd8 <HAL_UART_Transmit+0x28>
 800bdd2:	88fb      	ldrh	r3, [r7, #6]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d101      	bne.n	800bddc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	e07b      	b.n	800bed4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d101      	bne.n	800bdea <HAL_UART_Transmit+0x3a>
 800bde6:	2302      	movs	r3, #2
 800bde8:	e074      	b.n	800bed4 <HAL_UART_Transmit+0x124>
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2201      	movs	r2, #1
 800bdee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2221      	movs	r2, #33	; 0x21
 800bdfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800be02:	f7f9 fc45 	bl	8005690 <HAL_GetTick>
 800be06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	88fa      	ldrh	r2, [r7, #6]
 800be0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	88fa      	ldrh	r2, [r7, #6]
 800be14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be20:	d108      	bne.n	800be34 <HAL_UART_Transmit+0x84>
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	691b      	ldr	r3, [r3, #16]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d104      	bne.n	800be34 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800be2a:	2300      	movs	r3, #0
 800be2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	61bb      	str	r3, [r7, #24]
 800be32:	e003      	b.n	800be3c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800be38:	2300      	movs	r3, #0
 800be3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2200      	movs	r2, #0
 800be40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800be44:	e02c      	b.n	800bea0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	9300      	str	r3, [sp, #0]
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	2200      	movs	r2, #0
 800be4e:	2180      	movs	r1, #128	; 0x80
 800be50:	68f8      	ldr	r0, [r7, #12]
 800be52:	f000 fe68 	bl	800cb26 <UART_WaitOnFlagUntilTimeout>
 800be56:	4603      	mov	r3, r0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d001      	beq.n	800be60 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800be5c:	2303      	movs	r3, #3
 800be5e:	e039      	b.n	800bed4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d10b      	bne.n	800be7e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800be66:	69bb      	ldr	r3, [r7, #24]
 800be68:	881b      	ldrh	r3, [r3, #0]
 800be6a:	461a      	mov	r2, r3
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	3302      	adds	r3, #2
 800be7a:	61bb      	str	r3, [r7, #24]
 800be7c:	e007      	b.n	800be8e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	781a      	ldrb	r2, [r3, #0]
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800be88:	69fb      	ldr	r3, [r7, #28]
 800be8a:	3301      	adds	r3, #1
 800be8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800be94:	b29b      	uxth	r3, r3
 800be96:	3b01      	subs	r3, #1
 800be98:	b29a      	uxth	r2, r3
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d1cc      	bne.n	800be46 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	9300      	str	r3, [sp, #0]
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	2200      	movs	r2, #0
 800beb4:	2140      	movs	r1, #64	; 0x40
 800beb6:	68f8      	ldr	r0, [r7, #12]
 800beb8:	f000 fe35 	bl	800cb26 <UART_WaitOnFlagUntilTimeout>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d001      	beq.n	800bec6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800bec2:	2303      	movs	r3, #3
 800bec4:	e006      	b.n	800bed4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2220      	movs	r2, #32
 800beca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800bece:	2300      	movs	r3, #0
 800bed0:	e000      	b.n	800bed4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800bed2:	2302      	movs	r3, #2
  }
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3720      	adds	r7, #32
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	60b9      	str	r1, [r7, #8]
 800bee6:	4613      	mov	r3, r2
 800bee8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bef0:	2b20      	cmp	r3, #32
 800bef2:	d131      	bne.n	800bf58 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d002      	beq.n	800bf00 <HAL_UART_Receive_IT+0x24>
 800befa:	88fb      	ldrh	r3, [r7, #6]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d101      	bne.n	800bf04 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800bf00:	2301      	movs	r3, #1
 800bf02:	e02a      	b.n	800bf5a <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d101      	bne.n	800bf12 <HAL_UART_Receive_IT+0x36>
 800bf0e:	2302      	movs	r3, #2
 800bf10:	e023      	b.n	800bf5a <HAL_UART_Receive_IT+0x7e>
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2201      	movs	r2, #1
 800bf16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4a0f      	ldr	r2, [pc, #60]	; (800bf64 <HAL_UART_Receive_IT+0x88>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d00e      	beq.n	800bf48 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d007      	beq.n	800bf48 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800bf46:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bf48:	88fb      	ldrh	r3, [r7, #6]
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	68b9      	ldr	r1, [r7, #8]
 800bf4e:	68f8      	ldr	r0, [r7, #12]
 800bf50:	f000 fe6a 	bl	800cc28 <UART_Start_Receive_IT>
 800bf54:	4603      	mov	r3, r0
 800bf56:	e000      	b.n	800bf5a <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800bf58:	2302      	movs	r3, #2
  }
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3710      	adds	r7, #16
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	40008000 	.word	0x40008000

0800bf68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b088      	sub	sp, #32
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	69db      	ldr	r3, [r3, #28]
 800bf76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bf88:	69fa      	ldr	r2, [r7, #28]
 800bf8a:	f640 030f 	movw	r3, #2063	; 0x80f
 800bf8e:	4013      	ands	r3, r2
 800bf90:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d118      	bne.n	800bfca <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	f003 0320 	and.w	r3, r3, #32
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d013      	beq.n	800bfca <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	f003 0320 	and.w	r3, r3, #32
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d104      	bne.n	800bfb6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d009      	beq.n	800bfca <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f000 81fb 	beq.w	800c3b6 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	4798      	blx	r3
      }
      return;
 800bfc8:	e1f5      	b.n	800c3b6 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	f000 80ef 	beq.w	800c1b0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bfd2:	697a      	ldr	r2, [r7, #20]
 800bfd4:	4b73      	ldr	r3, [pc, #460]	; (800c1a4 <HAL_UART_IRQHandler+0x23c>)
 800bfd6:	4013      	ands	r3, r2
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d105      	bne.n	800bfe8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bfdc:	69ba      	ldr	r2, [r7, #24]
 800bfde:	4b72      	ldr	r3, [pc, #456]	; (800c1a8 <HAL_UART_IRQHandler+0x240>)
 800bfe0:	4013      	ands	r3, r2
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	f000 80e4 	beq.w	800c1b0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bfe8:	69fb      	ldr	r3, [r7, #28]
 800bfea:	f003 0301 	and.w	r3, r3, #1
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d010      	beq.n	800c014 <HAL_UART_IRQHandler+0xac>
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00b      	beq.n	800c014 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	2201      	movs	r2, #1
 800c002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c00a:	f043 0201 	orr.w	r2, r3, #1
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	f003 0302 	and.w	r3, r3, #2
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d010      	beq.n	800c040 <HAL_UART_IRQHandler+0xd8>
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	f003 0301 	and.w	r3, r3, #1
 800c024:	2b00      	cmp	r3, #0
 800c026:	d00b      	beq.n	800c040 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2202      	movs	r2, #2
 800c02e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c036:	f043 0204 	orr.w	r2, r3, #4
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	f003 0304 	and.w	r3, r3, #4
 800c046:	2b00      	cmp	r3, #0
 800c048:	d010      	beq.n	800c06c <HAL_UART_IRQHandler+0x104>
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	f003 0301 	and.w	r3, r3, #1
 800c050:	2b00      	cmp	r3, #0
 800c052:	d00b      	beq.n	800c06c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2204      	movs	r2, #4
 800c05a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c062:	f043 0202 	orr.w	r2, r3, #2
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c06c:	69fb      	ldr	r3, [r7, #28]
 800c06e:	f003 0308 	and.w	r3, r3, #8
 800c072:	2b00      	cmp	r3, #0
 800c074:	d015      	beq.n	800c0a2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c076:	69bb      	ldr	r3, [r7, #24]
 800c078:	f003 0320 	and.w	r3, r3, #32
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d104      	bne.n	800c08a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c080:	697a      	ldr	r2, [r7, #20]
 800c082:	4b48      	ldr	r3, [pc, #288]	; (800c1a4 <HAL_UART_IRQHandler+0x23c>)
 800c084:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c086:	2b00      	cmp	r3, #0
 800c088:	d00b      	beq.n	800c0a2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	2208      	movs	r2, #8
 800c090:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c098:	f043 0208 	orr.w	r2, r3, #8
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c0a2:	69fb      	ldr	r3, [r7, #28]
 800c0a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d011      	beq.n	800c0d0 <HAL_UART_IRQHandler+0x168>
 800c0ac:	69bb      	ldr	r3, [r7, #24]
 800c0ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00c      	beq.n	800c0d0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0c6:	f043 0220 	orr.w	r2, r3, #32
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f000 816f 	beq.w	800c3ba <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c0dc:	69fb      	ldr	r3, [r7, #28]
 800c0de:	f003 0320 	and.w	r3, r3, #32
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d011      	beq.n	800c10a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	f003 0320 	and.w	r3, r3, #32
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d104      	bne.n	800c0fa <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d007      	beq.n	800c10a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d003      	beq.n	800c10a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c110:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	689b      	ldr	r3, [r3, #8]
 800c118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c11c:	2b40      	cmp	r3, #64	; 0x40
 800c11e:	d004      	beq.n	800c12a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c126:	2b00      	cmp	r3, #0
 800c128:	d031      	beq.n	800c18e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 fe3a 	bl	800cda4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c13a:	2b40      	cmp	r3, #64	; 0x40
 800c13c:	d123      	bne.n	800c186 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	689a      	ldr	r2, [r3, #8]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c14c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c152:	2b00      	cmp	r3, #0
 800c154:	d013      	beq.n	800c17e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c15a:	4a14      	ldr	r2, [pc, #80]	; (800c1ac <HAL_UART_IRQHandler+0x244>)
 800c15c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c162:	4618      	mov	r0, r3
 800c164:	f7fb f9f0 	bl	8007548 <HAL_DMA_Abort_IT>
 800c168:	4603      	mov	r3, r0
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d017      	beq.n	800c19e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c178:	4610      	mov	r0, r2
 800c17a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c17c:	e00f      	b.n	800c19e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 f930 	bl	800c3e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c184:	e00b      	b.n	800c19e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 f92c 	bl	800c3e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c18c:	e007      	b.n	800c19e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 f928 	bl	800c3e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c19c:	e10d      	b.n	800c3ba <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c19e:	bf00      	nop
    return;
 800c1a0:	e10b      	b.n	800c3ba <HAL_UART_IRQHandler+0x452>
 800c1a2:	bf00      	nop
 800c1a4:	10000001 	.word	0x10000001
 800c1a8:	04000120 	.word	0x04000120
 800c1ac:	0800ce09 	.word	0x0800ce09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	f040 80ab 	bne.w	800c310 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c1ba:	69fb      	ldr	r3, [r7, #28]
 800c1bc:	f003 0310 	and.w	r3, r3, #16
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	f000 80a5 	beq.w	800c310 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	f003 0310 	and.w	r3, r3, #16
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f000 809f 	beq.w	800c310 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2210      	movs	r2, #16
 800c1d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	689b      	ldr	r3, [r3, #8]
 800c1e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1e4:	2b40      	cmp	r3, #64	; 0x40
 800c1e6:	d155      	bne.n	800c294 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800c1f2:	893b      	ldrh	r3, [r7, #8]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f000 80e2 	beq.w	800c3be <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c200:	893a      	ldrh	r2, [r7, #8]
 800c202:	429a      	cmp	r2, r3
 800c204:	f080 80db 	bcs.w	800c3be <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	893a      	ldrh	r2, [r7, #8]
 800c20c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f003 0320 	and.w	r3, r3, #32
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d12b      	bne.n	800c278 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c22e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	689a      	ldr	r2, [r3, #8]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f022 0201 	bic.w	r2, r2, #1
 800c23e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	689a      	ldr	r2, [r3, #8]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c24e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2220      	movs	r2, #32
 800c254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2200      	movs	r2, #0
 800c25c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f022 0210 	bic.w	r2, r2, #16
 800c26c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c272:	4618      	mov	r0, r3
 800c274:	f7fb f90f 	bl	8007496 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c284:	b29b      	uxth	r3, r3
 800c286:	1ad3      	subs	r3, r2, r3
 800c288:	b29b      	uxth	r3, r3
 800c28a:	4619      	mov	r1, r3
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 f8b3 	bl	800c3f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c292:	e094      	b.n	800c3be <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2a0:	b29b      	uxth	r3, r3
 800c2a2:	1ad3      	subs	r3, r2, r3
 800c2a4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	f000 8087 	beq.w	800c3c2 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 800c2b4:	897b      	ldrh	r3, [r7, #10]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	f000 8083 	beq.w	800c3c2 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c2ca:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	6812      	ldr	r2, [r2, #0]
 800c2d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2da:	f023 0301 	bic.w	r3, r3, #1
 800c2de:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2220      	movs	r2, #32
 800c2e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f022 0210 	bic.w	r2, r2, #16
 800c302:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c304:	897b      	ldrh	r3, [r7, #10]
 800c306:	4619      	mov	r1, r3
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 f875 	bl	800c3f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c30e:	e058      	b.n	800c3c2 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00d      	beq.n	800c336 <HAL_UART_IRQHandler+0x3ce>
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c320:	2b00      	cmp	r3, #0
 800c322:	d008      	beq.n	800c336 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c32c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f001 f876 	bl	800d420 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c334:	e048      	b.n	800c3c8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d012      	beq.n	800c366 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c346:	2b00      	cmp	r3, #0
 800c348:	d104      	bne.n	800c354 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c350:	2b00      	cmp	r3, #0
 800c352:	d008      	beq.n	800c366 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d034      	beq.n	800c3c6 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	4798      	blx	r3
    }
    return;
 800c364:	e02f      	b.n	800c3c6 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c366:	69fb      	ldr	r3, [r7, #28]
 800c368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d008      	beq.n	800c382 <HAL_UART_IRQHandler+0x41a>
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c376:	2b00      	cmp	r3, #0
 800c378:	d003      	beq.n	800c382 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 fd5a 	bl	800ce34 <UART_EndTransmit_IT>
    return;
 800c380:	e022      	b.n	800c3c8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d008      	beq.n	800c39e <HAL_UART_IRQHandler+0x436>
 800c38c:	69bb      	ldr	r3, [r7, #24]
 800c38e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c392:	2b00      	cmp	r3, #0
 800c394:	d003      	beq.n	800c39e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f001 f856 	bl	800d448 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c39c:	e014      	b.n	800c3c8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c39e:	69fb      	ldr	r3, [r7, #28]
 800c3a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d00f      	beq.n	800c3c8 <HAL_UART_IRQHandler+0x460>
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	da0c      	bge.n	800c3c8 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f001 f840 	bl	800d434 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c3b4:	e008      	b.n	800c3c8 <HAL_UART_IRQHandler+0x460>
      return;
 800c3b6:	bf00      	nop
 800c3b8:	e006      	b.n	800c3c8 <HAL_UART_IRQHandler+0x460>
    return;
 800c3ba:	bf00      	nop
 800c3bc:	e004      	b.n	800c3c8 <HAL_UART_IRQHandler+0x460>
      return;
 800c3be:	bf00      	nop
 800c3c0:	e002      	b.n	800c3c8 <HAL_UART_IRQHandler+0x460>
      return;
 800c3c2:	bf00      	nop
 800c3c4:	e000      	b.n	800c3c8 <HAL_UART_IRQHandler+0x460>
    return;
 800c3c6:	bf00      	nop
  }
}
 800c3c8:	3720      	adds	r7, #32
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop

0800c3d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c3d8:	bf00      	nop
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c3ec:	bf00      	nop
 800c3ee:	370c      	adds	r7, #12
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr

0800c3f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b083      	sub	sp, #12
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	460b      	mov	r3, r1
 800c402:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c404:	bf00      	nop
 800c406:	370c      	adds	r7, #12
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr

0800c410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c410:	b5b0      	push	{r4, r5, r7, lr}
 800c412:	b088      	sub	sp, #32
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c418:	2300      	movs	r3, #0
 800c41a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	689a      	ldr	r2, [r3, #8]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	691b      	ldr	r3, [r3, #16]
 800c424:	431a      	orrs	r2, r3
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	695b      	ldr	r3, [r3, #20]
 800c42a:	431a      	orrs	r2, r3
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	69db      	ldr	r3, [r3, #28]
 800c430:	4313      	orrs	r3, r2
 800c432:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	4baf      	ldr	r3, [pc, #700]	; (800c6f8 <UART_SetConfig+0x2e8>)
 800c43c:	4013      	ands	r3, r2
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	6812      	ldr	r2, [r2, #0]
 800c442:	69f9      	ldr	r1, [r7, #28]
 800c444:	430b      	orrs	r3, r1
 800c446:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	68da      	ldr	r2, [r3, #12]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	430a      	orrs	r2, r1
 800c45c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	699b      	ldr	r3, [r3, #24]
 800c462:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4aa4      	ldr	r2, [pc, #656]	; (800c6fc <UART_SetConfig+0x2ec>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d004      	beq.n	800c478 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6a1b      	ldr	r3, [r3, #32]
 800c472:	69fa      	ldr	r2, [r7, #28]
 800c474:	4313      	orrs	r3, r2
 800c476:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	689b      	ldr	r3, [r3, #8]
 800c47e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c482:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	6812      	ldr	r2, [r2, #0]
 800c48a:	69f9      	ldr	r1, [r7, #28]
 800c48c:	430b      	orrs	r3, r1
 800c48e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c496:	f023 010f 	bic.w	r1, r3, #15
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	430a      	orrs	r2, r1
 800c4a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4a95      	ldr	r2, [pc, #596]	; (800c700 <UART_SetConfig+0x2f0>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d120      	bne.n	800c4f2 <UART_SetConfig+0xe2>
 800c4b0:	4b94      	ldr	r3, [pc, #592]	; (800c704 <UART_SetConfig+0x2f4>)
 800c4b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4b6:	f003 0303 	and.w	r3, r3, #3
 800c4ba:	2b03      	cmp	r3, #3
 800c4bc:	d816      	bhi.n	800c4ec <UART_SetConfig+0xdc>
 800c4be:	a201      	add	r2, pc, #4	; (adr r2, 800c4c4 <UART_SetConfig+0xb4>)
 800c4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c4:	0800c4d5 	.word	0x0800c4d5
 800c4c8:	0800c4e1 	.word	0x0800c4e1
 800c4cc:	0800c4db 	.word	0x0800c4db
 800c4d0:	0800c4e7 	.word	0x0800c4e7
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	76fb      	strb	r3, [r7, #27]
 800c4d8:	e0bc      	b.n	800c654 <UART_SetConfig+0x244>
 800c4da:	2302      	movs	r3, #2
 800c4dc:	76fb      	strb	r3, [r7, #27]
 800c4de:	e0b9      	b.n	800c654 <UART_SetConfig+0x244>
 800c4e0:	2304      	movs	r3, #4
 800c4e2:	76fb      	strb	r3, [r7, #27]
 800c4e4:	e0b6      	b.n	800c654 <UART_SetConfig+0x244>
 800c4e6:	2308      	movs	r3, #8
 800c4e8:	76fb      	strb	r3, [r7, #27]
 800c4ea:	e0b3      	b.n	800c654 <UART_SetConfig+0x244>
 800c4ec:	2310      	movs	r3, #16
 800c4ee:	76fb      	strb	r3, [r7, #27]
 800c4f0:	e0b0      	b.n	800c654 <UART_SetConfig+0x244>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4a84      	ldr	r2, [pc, #528]	; (800c708 <UART_SetConfig+0x2f8>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d132      	bne.n	800c562 <UART_SetConfig+0x152>
 800c4fc:	4b81      	ldr	r3, [pc, #516]	; (800c704 <UART_SetConfig+0x2f4>)
 800c4fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c502:	f003 030c 	and.w	r3, r3, #12
 800c506:	2b0c      	cmp	r3, #12
 800c508:	d828      	bhi.n	800c55c <UART_SetConfig+0x14c>
 800c50a:	a201      	add	r2, pc, #4	; (adr r2, 800c510 <UART_SetConfig+0x100>)
 800c50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c510:	0800c545 	.word	0x0800c545
 800c514:	0800c55d 	.word	0x0800c55d
 800c518:	0800c55d 	.word	0x0800c55d
 800c51c:	0800c55d 	.word	0x0800c55d
 800c520:	0800c551 	.word	0x0800c551
 800c524:	0800c55d 	.word	0x0800c55d
 800c528:	0800c55d 	.word	0x0800c55d
 800c52c:	0800c55d 	.word	0x0800c55d
 800c530:	0800c54b 	.word	0x0800c54b
 800c534:	0800c55d 	.word	0x0800c55d
 800c538:	0800c55d 	.word	0x0800c55d
 800c53c:	0800c55d 	.word	0x0800c55d
 800c540:	0800c557 	.word	0x0800c557
 800c544:	2300      	movs	r3, #0
 800c546:	76fb      	strb	r3, [r7, #27]
 800c548:	e084      	b.n	800c654 <UART_SetConfig+0x244>
 800c54a:	2302      	movs	r3, #2
 800c54c:	76fb      	strb	r3, [r7, #27]
 800c54e:	e081      	b.n	800c654 <UART_SetConfig+0x244>
 800c550:	2304      	movs	r3, #4
 800c552:	76fb      	strb	r3, [r7, #27]
 800c554:	e07e      	b.n	800c654 <UART_SetConfig+0x244>
 800c556:	2308      	movs	r3, #8
 800c558:	76fb      	strb	r3, [r7, #27]
 800c55a:	e07b      	b.n	800c654 <UART_SetConfig+0x244>
 800c55c:	2310      	movs	r3, #16
 800c55e:	76fb      	strb	r3, [r7, #27]
 800c560:	e078      	b.n	800c654 <UART_SetConfig+0x244>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4a69      	ldr	r2, [pc, #420]	; (800c70c <UART_SetConfig+0x2fc>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d120      	bne.n	800c5ae <UART_SetConfig+0x19e>
 800c56c:	4b65      	ldr	r3, [pc, #404]	; (800c704 <UART_SetConfig+0x2f4>)
 800c56e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c572:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c576:	2b30      	cmp	r3, #48	; 0x30
 800c578:	d013      	beq.n	800c5a2 <UART_SetConfig+0x192>
 800c57a:	2b30      	cmp	r3, #48	; 0x30
 800c57c:	d814      	bhi.n	800c5a8 <UART_SetConfig+0x198>
 800c57e:	2b20      	cmp	r3, #32
 800c580:	d009      	beq.n	800c596 <UART_SetConfig+0x186>
 800c582:	2b20      	cmp	r3, #32
 800c584:	d810      	bhi.n	800c5a8 <UART_SetConfig+0x198>
 800c586:	2b00      	cmp	r3, #0
 800c588:	d002      	beq.n	800c590 <UART_SetConfig+0x180>
 800c58a:	2b10      	cmp	r3, #16
 800c58c:	d006      	beq.n	800c59c <UART_SetConfig+0x18c>
 800c58e:	e00b      	b.n	800c5a8 <UART_SetConfig+0x198>
 800c590:	2300      	movs	r3, #0
 800c592:	76fb      	strb	r3, [r7, #27]
 800c594:	e05e      	b.n	800c654 <UART_SetConfig+0x244>
 800c596:	2302      	movs	r3, #2
 800c598:	76fb      	strb	r3, [r7, #27]
 800c59a:	e05b      	b.n	800c654 <UART_SetConfig+0x244>
 800c59c:	2304      	movs	r3, #4
 800c59e:	76fb      	strb	r3, [r7, #27]
 800c5a0:	e058      	b.n	800c654 <UART_SetConfig+0x244>
 800c5a2:	2308      	movs	r3, #8
 800c5a4:	76fb      	strb	r3, [r7, #27]
 800c5a6:	e055      	b.n	800c654 <UART_SetConfig+0x244>
 800c5a8:	2310      	movs	r3, #16
 800c5aa:	76fb      	strb	r3, [r7, #27]
 800c5ac:	e052      	b.n	800c654 <UART_SetConfig+0x244>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4a57      	ldr	r2, [pc, #348]	; (800c710 <UART_SetConfig+0x300>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d120      	bne.n	800c5fa <UART_SetConfig+0x1ea>
 800c5b8:	4b52      	ldr	r3, [pc, #328]	; (800c704 <UART_SetConfig+0x2f4>)
 800c5ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c5c2:	2bc0      	cmp	r3, #192	; 0xc0
 800c5c4:	d013      	beq.n	800c5ee <UART_SetConfig+0x1de>
 800c5c6:	2bc0      	cmp	r3, #192	; 0xc0
 800c5c8:	d814      	bhi.n	800c5f4 <UART_SetConfig+0x1e4>
 800c5ca:	2b80      	cmp	r3, #128	; 0x80
 800c5cc:	d009      	beq.n	800c5e2 <UART_SetConfig+0x1d2>
 800c5ce:	2b80      	cmp	r3, #128	; 0x80
 800c5d0:	d810      	bhi.n	800c5f4 <UART_SetConfig+0x1e4>
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d002      	beq.n	800c5dc <UART_SetConfig+0x1cc>
 800c5d6:	2b40      	cmp	r3, #64	; 0x40
 800c5d8:	d006      	beq.n	800c5e8 <UART_SetConfig+0x1d8>
 800c5da:	e00b      	b.n	800c5f4 <UART_SetConfig+0x1e4>
 800c5dc:	2300      	movs	r3, #0
 800c5de:	76fb      	strb	r3, [r7, #27]
 800c5e0:	e038      	b.n	800c654 <UART_SetConfig+0x244>
 800c5e2:	2302      	movs	r3, #2
 800c5e4:	76fb      	strb	r3, [r7, #27]
 800c5e6:	e035      	b.n	800c654 <UART_SetConfig+0x244>
 800c5e8:	2304      	movs	r3, #4
 800c5ea:	76fb      	strb	r3, [r7, #27]
 800c5ec:	e032      	b.n	800c654 <UART_SetConfig+0x244>
 800c5ee:	2308      	movs	r3, #8
 800c5f0:	76fb      	strb	r3, [r7, #27]
 800c5f2:	e02f      	b.n	800c654 <UART_SetConfig+0x244>
 800c5f4:	2310      	movs	r3, #16
 800c5f6:	76fb      	strb	r3, [r7, #27]
 800c5f8:	e02c      	b.n	800c654 <UART_SetConfig+0x244>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4a3f      	ldr	r2, [pc, #252]	; (800c6fc <UART_SetConfig+0x2ec>)
 800c600:	4293      	cmp	r3, r2
 800c602:	d125      	bne.n	800c650 <UART_SetConfig+0x240>
 800c604:	4b3f      	ldr	r3, [pc, #252]	; (800c704 <UART_SetConfig+0x2f4>)
 800c606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c60a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c60e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c612:	d017      	beq.n	800c644 <UART_SetConfig+0x234>
 800c614:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c618:	d817      	bhi.n	800c64a <UART_SetConfig+0x23a>
 800c61a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c61e:	d00b      	beq.n	800c638 <UART_SetConfig+0x228>
 800c620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c624:	d811      	bhi.n	800c64a <UART_SetConfig+0x23a>
 800c626:	2b00      	cmp	r3, #0
 800c628:	d003      	beq.n	800c632 <UART_SetConfig+0x222>
 800c62a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c62e:	d006      	beq.n	800c63e <UART_SetConfig+0x22e>
 800c630:	e00b      	b.n	800c64a <UART_SetConfig+0x23a>
 800c632:	2300      	movs	r3, #0
 800c634:	76fb      	strb	r3, [r7, #27]
 800c636:	e00d      	b.n	800c654 <UART_SetConfig+0x244>
 800c638:	2302      	movs	r3, #2
 800c63a:	76fb      	strb	r3, [r7, #27]
 800c63c:	e00a      	b.n	800c654 <UART_SetConfig+0x244>
 800c63e:	2304      	movs	r3, #4
 800c640:	76fb      	strb	r3, [r7, #27]
 800c642:	e007      	b.n	800c654 <UART_SetConfig+0x244>
 800c644:	2308      	movs	r3, #8
 800c646:	76fb      	strb	r3, [r7, #27]
 800c648:	e004      	b.n	800c654 <UART_SetConfig+0x244>
 800c64a:	2310      	movs	r3, #16
 800c64c:	76fb      	strb	r3, [r7, #27]
 800c64e:	e001      	b.n	800c654 <UART_SetConfig+0x244>
 800c650:	2310      	movs	r3, #16
 800c652:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	4a28      	ldr	r2, [pc, #160]	; (800c6fc <UART_SetConfig+0x2ec>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	f040 809e 	bne.w	800c79c <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c660:	7efb      	ldrb	r3, [r7, #27]
 800c662:	2b08      	cmp	r3, #8
 800c664:	d823      	bhi.n	800c6ae <UART_SetConfig+0x29e>
 800c666:	a201      	add	r2, pc, #4	; (adr r2, 800c66c <UART_SetConfig+0x25c>)
 800c668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c66c:	0800c691 	.word	0x0800c691
 800c670:	0800c6af 	.word	0x0800c6af
 800c674:	0800c699 	.word	0x0800c699
 800c678:	0800c6af 	.word	0x0800c6af
 800c67c:	0800c69f 	.word	0x0800c69f
 800c680:	0800c6af 	.word	0x0800c6af
 800c684:	0800c6af 	.word	0x0800c6af
 800c688:	0800c6af 	.word	0x0800c6af
 800c68c:	0800c6a7 	.word	0x0800c6a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c690:	f7fd fc64 	bl	8009f5c <HAL_RCC_GetPCLK1Freq>
 800c694:	6178      	str	r0, [r7, #20]
        break;
 800c696:	e00f      	b.n	800c6b8 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c698:	4b1e      	ldr	r3, [pc, #120]	; (800c714 <UART_SetConfig+0x304>)
 800c69a:	617b      	str	r3, [r7, #20]
        break;
 800c69c:	e00c      	b.n	800c6b8 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c69e:	f7fd fbef 	bl	8009e80 <HAL_RCC_GetSysClockFreq>
 800c6a2:	6178      	str	r0, [r7, #20]
        break;
 800c6a4:	e008      	b.n	800c6b8 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6aa:	617b      	str	r3, [r7, #20]
        break;
 800c6ac:	e004      	b.n	800c6b8 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	76bb      	strb	r3, [r7, #26]
        break;
 800c6b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	f000 812e 	beq.w	800c91c <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6c4:	4a14      	ldr	r2, [pc, #80]	; (800c718 <UART_SetConfig+0x308>)
 800c6c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6d2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	685a      	ldr	r2, [r3, #4]
 800c6d8:	4613      	mov	r3, r2
 800c6da:	005b      	lsls	r3, r3, #1
 800c6dc:	4413      	add	r3, r2
 800c6de:	68ba      	ldr	r2, [r7, #8]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d305      	bcc.n	800c6f0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c6ea:	68ba      	ldr	r2, [r7, #8]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d915      	bls.n	800c71c <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	76bb      	strb	r3, [r7, #26]
 800c6f4:	e112      	b.n	800c91c <UART_SetConfig+0x50c>
 800c6f6:	bf00      	nop
 800c6f8:	cfff69f3 	.word	0xcfff69f3
 800c6fc:	40008000 	.word	0x40008000
 800c700:	40013800 	.word	0x40013800
 800c704:	40021000 	.word	0x40021000
 800c708:	40004400 	.word	0x40004400
 800c70c:	40004800 	.word	0x40004800
 800c710:	40004c00 	.word	0x40004c00
 800c714:	00f42400 	.word	0x00f42400
 800c718:	08012ee8 	.word	0x08012ee8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	4618      	mov	r0, r3
 800c720:	f04f 0100 	mov.w	r1, #0
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c728:	4a86      	ldr	r2, [pc, #536]	; (800c944 <UART_SetConfig+0x534>)
 800c72a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c72e:	b29a      	uxth	r2, r3
 800c730:	f04f 0300 	mov.w	r3, #0
 800c734:	f7f4 fad0 	bl	8000cd8 <__aeabi_uldivmod>
 800c738:	4602      	mov	r2, r0
 800c73a:	460b      	mov	r3, r1
 800c73c:	4610      	mov	r0, r2
 800c73e:	4619      	mov	r1, r3
 800c740:	f04f 0200 	mov.w	r2, #0
 800c744:	f04f 0300 	mov.w	r3, #0
 800c748:	020b      	lsls	r3, r1, #8
 800c74a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c74e:	0202      	lsls	r2, r0, #8
 800c750:	6879      	ldr	r1, [r7, #4]
 800c752:	6849      	ldr	r1, [r1, #4]
 800c754:	0849      	lsrs	r1, r1, #1
 800c756:	4608      	mov	r0, r1
 800c758:	f04f 0100 	mov.w	r1, #0
 800c75c:	1814      	adds	r4, r2, r0
 800c75e:	eb43 0501 	adc.w	r5, r3, r1
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	461a      	mov	r2, r3
 800c768:	f04f 0300 	mov.w	r3, #0
 800c76c:	4620      	mov	r0, r4
 800c76e:	4629      	mov	r1, r5
 800c770:	f7f4 fab2 	bl	8000cd8 <__aeabi_uldivmod>
 800c774:	4602      	mov	r2, r0
 800c776:	460b      	mov	r3, r1
 800c778:	4613      	mov	r3, r2
 800c77a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c782:	d308      	bcc.n	800c796 <UART_SetConfig+0x386>
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c78a:	d204      	bcs.n	800c796 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	693a      	ldr	r2, [r7, #16]
 800c792:	60da      	str	r2, [r3, #12]
 800c794:	e0c2      	b.n	800c91c <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800c796:	2301      	movs	r3, #1
 800c798:	76bb      	strb	r3, [r7, #26]
 800c79a:	e0bf      	b.n	800c91c <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	69db      	ldr	r3, [r3, #28]
 800c7a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7a4:	d165      	bne.n	800c872 <UART_SetConfig+0x462>
  {
    switch (clocksource)
 800c7a6:	7efb      	ldrb	r3, [r7, #27]
 800c7a8:	2b08      	cmp	r3, #8
 800c7aa:	d828      	bhi.n	800c7fe <UART_SetConfig+0x3ee>
 800c7ac:	a201      	add	r2, pc, #4	; (adr r2, 800c7b4 <UART_SetConfig+0x3a4>)
 800c7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b2:	bf00      	nop
 800c7b4:	0800c7d9 	.word	0x0800c7d9
 800c7b8:	0800c7e1 	.word	0x0800c7e1
 800c7bc:	0800c7e9 	.word	0x0800c7e9
 800c7c0:	0800c7ff 	.word	0x0800c7ff
 800c7c4:	0800c7ef 	.word	0x0800c7ef
 800c7c8:	0800c7ff 	.word	0x0800c7ff
 800c7cc:	0800c7ff 	.word	0x0800c7ff
 800c7d0:	0800c7ff 	.word	0x0800c7ff
 800c7d4:	0800c7f7 	.word	0x0800c7f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7d8:	f7fd fbc0 	bl	8009f5c <HAL_RCC_GetPCLK1Freq>
 800c7dc:	6178      	str	r0, [r7, #20]
        break;
 800c7de:	e013      	b.n	800c808 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c7e0:	f7fd fbd2 	bl	8009f88 <HAL_RCC_GetPCLK2Freq>
 800c7e4:	6178      	str	r0, [r7, #20]
        break;
 800c7e6:	e00f      	b.n	800c808 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c7e8:	4b57      	ldr	r3, [pc, #348]	; (800c948 <UART_SetConfig+0x538>)
 800c7ea:	617b      	str	r3, [r7, #20]
        break;
 800c7ec:	e00c      	b.n	800c808 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c7ee:	f7fd fb47 	bl	8009e80 <HAL_RCC_GetSysClockFreq>
 800c7f2:	6178      	str	r0, [r7, #20]
        break;
 800c7f4:	e008      	b.n	800c808 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c7f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c7fa:	617b      	str	r3, [r7, #20]
        break;
 800c7fc:	e004      	b.n	800c808 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 800c7fe:	2300      	movs	r3, #0
 800c800:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c802:	2301      	movs	r3, #1
 800c804:	76bb      	strb	r3, [r7, #26]
        break;
 800c806:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f000 8086 	beq.w	800c91c <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c814:	4a4b      	ldr	r2, [pc, #300]	; (800c944 <UART_SetConfig+0x534>)
 800c816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c81a:	461a      	mov	r2, r3
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c822:	005a      	lsls	r2, r3, #1
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	085b      	lsrs	r3, r3, #1
 800c82a:	441a      	add	r2, r3
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	fbb2 f3f3 	udiv	r3, r2, r3
 800c834:	b29b      	uxth	r3, r3
 800c836:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	2b0f      	cmp	r3, #15
 800c83c:	d916      	bls.n	800c86c <UART_SetConfig+0x45c>
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c844:	d212      	bcs.n	800c86c <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	b29b      	uxth	r3, r3
 800c84a:	f023 030f 	bic.w	r3, r3, #15
 800c84e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	085b      	lsrs	r3, r3, #1
 800c854:	b29b      	uxth	r3, r3
 800c856:	f003 0307 	and.w	r3, r3, #7
 800c85a:	b29a      	uxth	r2, r3
 800c85c:	89fb      	ldrh	r3, [r7, #14]
 800c85e:	4313      	orrs	r3, r2
 800c860:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	89fa      	ldrh	r2, [r7, #14]
 800c868:	60da      	str	r2, [r3, #12]
 800c86a:	e057      	b.n	800c91c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800c86c:	2301      	movs	r3, #1
 800c86e:	76bb      	strb	r3, [r7, #26]
 800c870:	e054      	b.n	800c91c <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c872:	7efb      	ldrb	r3, [r7, #27]
 800c874:	2b08      	cmp	r3, #8
 800c876:	d828      	bhi.n	800c8ca <UART_SetConfig+0x4ba>
 800c878:	a201      	add	r2, pc, #4	; (adr r2, 800c880 <UART_SetConfig+0x470>)
 800c87a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c87e:	bf00      	nop
 800c880:	0800c8a5 	.word	0x0800c8a5
 800c884:	0800c8ad 	.word	0x0800c8ad
 800c888:	0800c8b5 	.word	0x0800c8b5
 800c88c:	0800c8cb 	.word	0x0800c8cb
 800c890:	0800c8bb 	.word	0x0800c8bb
 800c894:	0800c8cb 	.word	0x0800c8cb
 800c898:	0800c8cb 	.word	0x0800c8cb
 800c89c:	0800c8cb 	.word	0x0800c8cb
 800c8a0:	0800c8c3 	.word	0x0800c8c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8a4:	f7fd fb5a 	bl	8009f5c <HAL_RCC_GetPCLK1Freq>
 800c8a8:	6178      	str	r0, [r7, #20]
        break;
 800c8aa:	e013      	b.n	800c8d4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c8ac:	f7fd fb6c 	bl	8009f88 <HAL_RCC_GetPCLK2Freq>
 800c8b0:	6178      	str	r0, [r7, #20]
        break;
 800c8b2:	e00f      	b.n	800c8d4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c8b4:	4b24      	ldr	r3, [pc, #144]	; (800c948 <UART_SetConfig+0x538>)
 800c8b6:	617b      	str	r3, [r7, #20]
        break;
 800c8b8:	e00c      	b.n	800c8d4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c8ba:	f7fd fae1 	bl	8009e80 <HAL_RCC_GetSysClockFreq>
 800c8be:	6178      	str	r0, [r7, #20]
        break;
 800c8c0:	e008      	b.n	800c8d4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8c6:	617b      	str	r3, [r7, #20]
        break;
 800c8c8:	e004      	b.n	800c8d4 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	76bb      	strb	r3, [r7, #26]
        break;
 800c8d2:	bf00      	nop
    }

    if (pclk != 0U)
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d020      	beq.n	800c91c <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8de:	4a19      	ldr	r2, [pc, #100]	; (800c944 <UART_SetConfig+0x534>)
 800c8e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	fbb3 f2f2 	udiv	r2, r3, r2
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	085b      	lsrs	r3, r3, #1
 800c8f2:	441a      	add	r2, r3
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8fc:	b29b      	uxth	r3, r3
 800c8fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	2b0f      	cmp	r3, #15
 800c904:	d908      	bls.n	800c918 <UART_SetConfig+0x508>
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c90c:	d204      	bcs.n	800c918 <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	693a      	ldr	r2, [r7, #16]
 800c914:	60da      	str	r2, [r3, #12]
 800c916:	e001      	b.n	800c91c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800c918:	2301      	movs	r3, #1
 800c91a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2201      	movs	r2, #1
 800c920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2201      	movs	r2, #1
 800c928:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2200      	movs	r2, #0
 800c930:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2200      	movs	r2, #0
 800c936:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c938:	7ebb      	ldrb	r3, [r7, #26]
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3720      	adds	r7, #32
 800c93e:	46bd      	mov	sp, r7
 800c940:	bdb0      	pop	{r4, r5, r7, pc}
 800c942:	bf00      	nop
 800c944:	08012ee8 	.word	0x08012ee8
 800c948:	00f42400 	.word	0x00f42400

0800c94c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c958:	f003 0301 	and.w	r3, r3, #1
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d00a      	beq.n	800c976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	430a      	orrs	r2, r1
 800c974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c97a:	f003 0302 	and.w	r3, r3, #2
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d00a      	beq.n	800c998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	685b      	ldr	r3, [r3, #4]
 800c988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	430a      	orrs	r2, r1
 800c996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c99c:	f003 0304 	and.w	r3, r3, #4
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d00a      	beq.n	800c9ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	430a      	orrs	r2, r1
 800c9b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9be:	f003 0308 	and.w	r3, r3, #8
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d00a      	beq.n	800c9dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	430a      	orrs	r2, r1
 800c9da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9e0:	f003 0310 	and.w	r3, r3, #16
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d00a      	beq.n	800c9fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	689b      	ldr	r3, [r3, #8]
 800c9ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	430a      	orrs	r2, r1
 800c9fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca02:	f003 0320 	and.w	r3, r3, #32
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d00a      	beq.n	800ca20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	689b      	ldr	r3, [r3, #8]
 800ca10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	430a      	orrs	r2, r1
 800ca1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d01a      	beq.n	800ca62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	430a      	orrs	r2, r1
 800ca40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca4a:	d10a      	bne.n	800ca62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	430a      	orrs	r2, r1
 800ca60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d00a      	beq.n	800ca84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	430a      	orrs	r2, r1
 800ca82:	605a      	str	r2, [r3, #4]
  }
}
 800ca84:	bf00      	nop
 800ca86:	370c      	adds	r7, #12
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr

0800ca90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b086      	sub	sp, #24
 800ca94:	af02      	add	r7, sp, #8
 800ca96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800caa0:	f7f8 fdf6 	bl	8005690 <HAL_GetTick>
 800caa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f003 0308 	and.w	r3, r3, #8
 800cab0:	2b08      	cmp	r3, #8
 800cab2:	d10e      	bne.n	800cad2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cab8:	9300      	str	r3, [sp, #0]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2200      	movs	r2, #0
 800cabe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 f82f 	bl	800cb26 <UART_WaitOnFlagUntilTimeout>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d001      	beq.n	800cad2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cace:	2303      	movs	r3, #3
 800cad0:	e025      	b.n	800cb1e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f003 0304 	and.w	r3, r3, #4
 800cadc:	2b04      	cmp	r3, #4
 800cade:	d10e      	bne.n	800cafe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cae4:	9300      	str	r3, [sp, #0]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	2200      	movs	r2, #0
 800caea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f000 f819 	bl	800cb26 <UART_WaitOnFlagUntilTimeout>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d001      	beq.n	800cafe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cafa:	2303      	movs	r3, #3
 800cafc:	e00f      	b.n	800cb1e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2220      	movs	r2, #32
 800cb02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2220      	movs	r2, #32
 800cb0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2200      	movs	r2, #0
 800cb12:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2200      	movs	r2, #0
 800cb18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cb1c:	2300      	movs	r3, #0
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3710      	adds	r7, #16
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}

0800cb26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cb26:	b580      	push	{r7, lr}
 800cb28:	b084      	sub	sp, #16
 800cb2a:	af00      	add	r7, sp, #0
 800cb2c:	60f8      	str	r0, [r7, #12]
 800cb2e:	60b9      	str	r1, [r7, #8]
 800cb30:	603b      	str	r3, [r7, #0]
 800cb32:	4613      	mov	r3, r2
 800cb34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb36:	e062      	b.n	800cbfe <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb38:	69bb      	ldr	r3, [r7, #24]
 800cb3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb3e:	d05e      	beq.n	800cbfe <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb40:	f7f8 fda6 	bl	8005690 <HAL_GetTick>
 800cb44:	4602      	mov	r2, r0
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	1ad3      	subs	r3, r2, r3
 800cb4a:	69ba      	ldr	r2, [r7, #24]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d302      	bcc.n	800cb56 <UART_WaitOnFlagUntilTimeout+0x30>
 800cb50:	69bb      	ldr	r3, [r7, #24]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d11d      	bne.n	800cb92 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cb64:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	689a      	ldr	r2, [r3, #8]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f022 0201 	bic.w	r2, r2, #1
 800cb74:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2220      	movs	r2, #32
 800cb7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2220      	movs	r2, #32
 800cb82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800cb8e:	2303      	movs	r3, #3
 800cb90:	e045      	b.n	800cc1e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f003 0304 	and.w	r3, r3, #4
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d02e      	beq.n	800cbfe <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	69db      	ldr	r3, [r3, #28]
 800cba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cbaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cbae:	d126      	bne.n	800cbfe <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cbb8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cbc8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	689a      	ldr	r2, [r3, #8]
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f022 0201 	bic.w	r2, r2, #1
 800cbd8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2220      	movs	r2, #32
 800cbde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2220      	movs	r2, #32
 800cbe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2220      	movs	r2, #32
 800cbee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cbfa:	2303      	movs	r3, #3
 800cbfc:	e00f      	b.n	800cc1e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	69da      	ldr	r2, [r3, #28]
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	4013      	ands	r3, r2
 800cc08:	68ba      	ldr	r2, [r7, #8]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	bf0c      	ite	eq
 800cc0e:	2301      	moveq	r3, #1
 800cc10:	2300      	movne	r3, #0
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	461a      	mov	r2, r3
 800cc16:	79fb      	ldrb	r3, [r7, #7]
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d08d      	beq.n	800cb38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cc1c:	2300      	movs	r3, #0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3710      	adds	r7, #16
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
	...

0800cc28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b085      	sub	sp, #20
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	4613      	mov	r3, r2
 800cc34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	68ba      	ldr	r2, [r7, #8]
 800cc3a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	88fa      	ldrh	r2, [r7, #6]
 800cc40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	88fa      	ldrh	r2, [r7, #6]
 800cc48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	689b      	ldr	r3, [r3, #8]
 800cc56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc5a:	d10e      	bne.n	800cc7a <UART_Start_Receive_IT+0x52>
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	691b      	ldr	r3, [r3, #16]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d105      	bne.n	800cc70 <UART_Start_Receive_IT+0x48>
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cc6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc6e:	e02d      	b.n	800cccc <UART_Start_Receive_IT+0xa4>
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	22ff      	movs	r2, #255	; 0xff
 800cc74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc78:	e028      	b.n	800cccc <UART_Start_Receive_IT+0xa4>
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	689b      	ldr	r3, [r3, #8]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d10d      	bne.n	800cc9e <UART_Start_Receive_IT+0x76>
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	691b      	ldr	r3, [r3, #16]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d104      	bne.n	800cc94 <UART_Start_Receive_IT+0x6c>
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	22ff      	movs	r2, #255	; 0xff
 800cc8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc92:	e01b      	b.n	800cccc <UART_Start_Receive_IT+0xa4>
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	227f      	movs	r2, #127	; 0x7f
 800cc98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc9c:	e016      	b.n	800cccc <UART_Start_Receive_IT+0xa4>
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cca6:	d10d      	bne.n	800ccc4 <UART_Start_Receive_IT+0x9c>
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	691b      	ldr	r3, [r3, #16]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d104      	bne.n	800ccba <UART_Start_Receive_IT+0x92>
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	227f      	movs	r2, #127	; 0x7f
 800ccb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ccb8:	e008      	b.n	800cccc <UART_Start_Receive_IT+0xa4>
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	223f      	movs	r2, #63	; 0x3f
 800ccbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ccc2:	e003      	b.n	800cccc <UART_Start_Receive_IT+0xa4>
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2222      	movs	r2, #34	; 0x22
 800ccd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	689a      	ldr	r2, [r3, #8]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f042 0201 	orr.w	r2, r2, #1
 800ccea:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccf4:	d12a      	bne.n	800cd4c <UART_Start_Receive_IT+0x124>
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ccfc:	88fa      	ldrh	r2, [r7, #6]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d324      	bcc.n	800cd4c <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	689b      	ldr	r3, [r3, #8]
 800cd06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd0a:	d107      	bne.n	800cd1c <UART_Start_Receive_IT+0xf4>
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	691b      	ldr	r3, [r3, #16]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d103      	bne.n	800cd1c <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	4a1f      	ldr	r2, [pc, #124]	; (800cd94 <UART_Start_Receive_IT+0x16c>)
 800cd18:	671a      	str	r2, [r3, #112]	; 0x70
 800cd1a:	e002      	b.n	800cd22 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	4a1e      	ldr	r2, [pc, #120]	; (800cd98 <UART_Start_Receive_IT+0x170>)
 800cd20:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2200      	movs	r2, #0
 800cd26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cd38:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	689a      	ldr	r2, [r3, #8]
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800cd48:	609a      	str	r2, [r3, #8]
 800cd4a:	e01b      	b.n	800cd84 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	689b      	ldr	r3, [r3, #8]
 800cd50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd54:	d107      	bne.n	800cd66 <UART_Start_Receive_IT+0x13e>
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	691b      	ldr	r3, [r3, #16]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d103      	bne.n	800cd66 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	4a0e      	ldr	r2, [pc, #56]	; (800cd9c <UART_Start_Receive_IT+0x174>)
 800cd62:	671a      	str	r2, [r3, #112]	; 0x70
 800cd64:	e002      	b.n	800cd6c <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	4a0d      	ldr	r2, [pc, #52]	; (800cda0 <UART_Start_Receive_IT+0x178>)
 800cd6a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	681a      	ldr	r2, [r3, #0]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800cd82:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800cd84:	2300      	movs	r3, #0
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3714      	adds	r7, #20
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr
 800cd92:	bf00      	nop
 800cd94:	0800d21d 	.word	0x0800d21d
 800cd98:	0800d019 	.word	0x0800d019
 800cd9c:	0800cf41 	.word	0x0800cf41
 800cda0:	0800ce69 	.word	0x0800ce69

0800cda4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cdba:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	689b      	ldr	r3, [r3, #8]
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	6812      	ldr	r2, [r2, #0]
 800cdc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cdca:	f023 0301 	bic.w	r3, r3, #1
 800cdce:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d107      	bne.n	800cde8 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f022 0210 	bic.w	r2, r2, #16
 800cde6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2220      	movs	r2, #32
 800cdec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	671a      	str	r2, [r3, #112]	; 0x70
}
 800cdfc:	bf00      	nop
 800cdfe:	370c      	adds	r7, #12
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr

0800ce08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b084      	sub	sp, #16
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2200      	movs	r2, #0
 800ce22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce26:	68f8      	ldr	r0, [r7, #12]
 800ce28:	f7ff fadc 	bl	800c3e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce2c:	bf00      	nop
 800ce2e:	3710      	adds	r7, #16
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}

0800ce34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce4a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2220      	movs	r2, #32
 800ce50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2200      	movs	r2, #0
 800ce58:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f7ff fab8 	bl	800c3d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce60:	bf00      	nop
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ce76:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce7e:	2b22      	cmp	r3, #34	; 0x22
 800ce80:	d152      	bne.n	800cf28 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce88:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ce8a:	89bb      	ldrh	r3, [r7, #12]
 800ce8c:	b2d9      	uxtb	r1, r3
 800ce8e:	89fb      	ldrh	r3, [r7, #14]
 800ce90:	b2da      	uxtb	r2, r3
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce96:	400a      	ands	r2, r1
 800ce98:	b2d2      	uxtb	r2, r2
 800ce9a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cea0:	1c5a      	adds	r2, r3, #1
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	b29a      	uxth	r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d139      	bne.n	800cf38 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ced2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	689a      	ldr	r2, [r3, #8]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f022 0201 	bic.w	r2, r2, #1
 800cee2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2220      	movs	r2, #32
 800cee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2200      	movs	r2, #0
 800cef0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cef6:	2b01      	cmp	r3, #1
 800cef8:	d10f      	bne.n	800cf1a <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	681a      	ldr	r2, [r3, #0]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f022 0210 	bic.w	r2, r2, #16
 800cf08:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cf10:	4619      	mov	r1, r3
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f7ff fa70 	bl	800c3f8 <HAL_UARTEx_RxEventCallback>
 800cf18:	e002      	b.n	800cf20 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f7f8 fafc 	bl	8005518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2200      	movs	r2, #0
 800cf24:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cf26:	e007      	b.n	800cf38 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	699a      	ldr	r2, [r3, #24]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f042 0208 	orr.w	r2, r2, #8
 800cf36:	619a      	str	r2, [r3, #24]
}
 800cf38:	bf00      	nop
 800cf3a:	3710      	adds	r7, #16
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b084      	sub	sp, #16
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf4e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf56:	2b22      	cmp	r3, #34	; 0x22
 800cf58:	d152      	bne.n	800d000 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf60:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf66:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800cf68:	89ba      	ldrh	r2, [r7, #12]
 800cf6a:	89fb      	ldrh	r3, [r7, #14]
 800cf6c:	4013      	ands	r3, r2
 800cf6e:	b29a      	uxth	r2, r3
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf78:	1c9a      	adds	r2, r3, #2
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	3b01      	subs	r3, #1
 800cf88:	b29a      	uxth	r2, r3
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf96:	b29b      	uxth	r3, r3
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d139      	bne.n	800d010 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	681a      	ldr	r2, [r3, #0]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cfaa:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	689a      	ldr	r2, [r3, #8]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f022 0201 	bic.w	r2, r2, #1
 800cfba:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2220      	movs	r2, #32
 800cfc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfce:	2b01      	cmp	r3, #1
 800cfd0:	d10f      	bne.n	800cff2 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	681a      	ldr	r2, [r3, #0]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f022 0210 	bic.w	r2, r2, #16
 800cfe0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cfe8:	4619      	mov	r1, r3
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f7ff fa04 	bl	800c3f8 <HAL_UARTEx_RxEventCallback>
 800cff0:	e002      	b.n	800cff8 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f7f8 fa90 	bl	8005518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2200      	movs	r2, #0
 800cffc:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cffe:	e007      	b.n	800d010 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	699a      	ldr	r2, [r3, #24]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f042 0208 	orr.w	r2, r2, #8
 800d00e:	619a      	str	r2, [r3, #24]
}
 800d010:	bf00      	nop
 800d012:	3710      	adds	r7, #16
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b088      	sub	sp, #32
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d026:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	69db      	ldr	r3, [r3, #28]
 800d02e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	689b      	ldr	r3, [r3, #8]
 800d03e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d046:	2b22      	cmp	r3, #34	; 0x22
 800d048:	f040 80da 	bne.w	800d200 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d052:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d054:	e0aa      	b.n	800d1ac <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d05c:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d05e:	89bb      	ldrh	r3, [r7, #12]
 800d060:	b2d9      	uxtb	r1, r3
 800d062:	8b7b      	ldrh	r3, [r7, #26]
 800d064:	b2da      	uxtb	r2, r3
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d06a:	400a      	ands	r2, r1
 800d06c:	b2d2      	uxtb	r2, r2
 800d06e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d074:	1c5a      	adds	r2, r3, #1
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d080:	b29b      	uxth	r3, r3
 800d082:	3b01      	subs	r3, #1
 800d084:	b29a      	uxth	r2, r3
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	69db      	ldr	r3, [r3, #28]
 800d092:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d094:	69fb      	ldr	r3, [r7, #28]
 800d096:	f003 0307 	and.w	r3, r3, #7
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d04d      	beq.n	800d13a <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d09e:	69fb      	ldr	r3, [r7, #28]
 800d0a0:	f003 0301 	and.w	r3, r3, #1
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d010      	beq.n	800d0ca <UART_RxISR_8BIT_FIFOEN+0xb2>
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d00b      	beq.n	800d0ca <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0c0:	f043 0201 	orr.w	r2, r3, #1
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0ca:	69fb      	ldr	r3, [r7, #28]
 800d0cc:	f003 0302 	and.w	r3, r3, #2
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d010      	beq.n	800d0f6 <UART_RxISR_8BIT_FIFOEN+0xde>
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	f003 0301 	and.w	r3, r3, #1
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d00b      	beq.n	800d0f6 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2202      	movs	r2, #2
 800d0e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0ec:	f043 0204 	orr.w	r2, r3, #4
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0f6:	69fb      	ldr	r3, [r7, #28]
 800d0f8:	f003 0304 	and.w	r3, r3, #4
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d010      	beq.n	800d122 <UART_RxISR_8BIT_FIFOEN+0x10a>
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	f003 0301 	and.w	r3, r3, #1
 800d106:	2b00      	cmp	r3, #0
 800d108:	d00b      	beq.n	800d122 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	2204      	movs	r2, #4
 800d110:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d118:	f043 0202 	orr.w	r2, r3, #2
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d006      	beq.n	800d13a <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f7ff f959 	bl	800c3e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2200      	movs	r2, #0
 800d136:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d140:	b29b      	uxth	r3, r3
 800d142:	2b00      	cmp	r3, #0
 800d144:	d132      	bne.n	800d1ac <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	681a      	ldr	r2, [r3, #0]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d154:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	689b      	ldr	r3, [r3, #8]
 800d15c:	687a      	ldr	r2, [r7, #4]
 800d15e:	6812      	ldr	r2, [r2, #0]
 800d160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d164:	f023 0301 	bic.w	r3, r3, #1
 800d168:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2220      	movs	r2, #32
 800d16e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2200      	movs	r2, #0
 800d176:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d17c:	2b01      	cmp	r3, #1
 800d17e:	d10f      	bne.n	800d1a0 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f022 0210 	bic.w	r2, r2, #16
 800d18e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d196:	4619      	mov	r1, r3
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f7ff f92d 	bl	800c3f8 <HAL_UARTEx_RxEventCallback>
 800d19e:	e002      	b.n	800d1a6 <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f7f8 f9b9 	bl	8005518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d1ac:	89fb      	ldrh	r3, [r7, #14]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d005      	beq.n	800d1be <UART_RxISR_8BIT_FIFOEN+0x1a6>
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	f003 0320 	and.w	r3, r3, #32
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	f47f af4c 	bne.w	800d056 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d1c4:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d1c6:	897b      	ldrh	r3, [r7, #10]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d021      	beq.n	800d210 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d1d2:	897a      	ldrh	r2, [r7, #10]
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d21b      	bcs.n	800d210 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	689a      	ldr	r2, [r3, #8]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d1e6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4a0b      	ldr	r2, [pc, #44]	; (800d218 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800d1ec:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	681a      	ldr	r2, [r3, #0]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f042 0220 	orr.w	r2, r2, #32
 800d1fc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d1fe:	e007      	b.n	800d210 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	699a      	ldr	r2, [r3, #24]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f042 0208 	orr.w	r2, r2, #8
 800d20e:	619a      	str	r2, [r3, #24]
}
 800d210:	bf00      	nop
 800d212:	3720      	adds	r7, #32
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}
 800d218:	0800ce69 	.word	0x0800ce69

0800d21c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b08a      	sub	sp, #40	; 0x28
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d22a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	69db      	ldr	r3, [r3, #28]
 800d232:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	689b      	ldr	r3, [r3, #8]
 800d242:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d24a:	2b22      	cmp	r3, #34	; 0x22
 800d24c:	f040 80da 	bne.w	800d404 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d256:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d258:	e0aa      	b.n	800d3b0 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d260:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d266:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800d268:	8aba      	ldrh	r2, [r7, #20]
 800d26a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d26c:	4013      	ands	r3, r2
 800d26e:	b29a      	uxth	r2, r3
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d278:	1c9a      	adds	r2, r3, #2
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d284:	b29b      	uxth	r3, r3
 800d286:	3b01      	subs	r3, #1
 800d288:	b29a      	uxth	r2, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	69db      	ldr	r3, [r3, #28]
 800d296:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29a:	f003 0307 	and.w	r3, r3, #7
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d04d      	beq.n	800d33e <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a4:	f003 0301 	and.w	r3, r3, #1
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d010      	beq.n	800d2ce <UART_RxISR_16BIT_FIFOEN+0xb2>
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d00b      	beq.n	800d2ce <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2c4:	f043 0201 	orr.w	r2, r3, #1
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d0:	f003 0302 	and.w	r3, r3, #2
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d010      	beq.n	800d2fa <UART_RxISR_16BIT_FIFOEN+0xde>
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	f003 0301 	and.w	r3, r3, #1
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d00b      	beq.n	800d2fa <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2202      	movs	r2, #2
 800d2e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2f0:	f043 0204 	orr.w	r2, r3, #4
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fc:	f003 0304 	and.w	r3, r3, #4
 800d300:	2b00      	cmp	r3, #0
 800d302:	d010      	beq.n	800d326 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800d304:	69bb      	ldr	r3, [r7, #24]
 800d306:	f003 0301 	and.w	r3, r3, #1
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d00b      	beq.n	800d326 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2204      	movs	r2, #4
 800d314:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d31c:	f043 0202 	orr.w	r2, r3, #2
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d006      	beq.n	800d33e <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f7ff f857 	bl	800c3e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2200      	movs	r2, #0
 800d33a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d344:	b29b      	uxth	r3, r3
 800d346:	2b00      	cmp	r3, #0
 800d348:	d132      	bne.n	800d3b0 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d358:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	6812      	ldr	r2, [r2, #0]
 800d364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d368:	f023 0301 	bic.w	r3, r3, #1
 800d36c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2220      	movs	r2, #32
 800d372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2200      	movs	r2, #0
 800d37a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d380:	2b01      	cmp	r3, #1
 800d382:	d10f      	bne.n	800d3a4 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	681a      	ldr	r2, [r3, #0]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f022 0210 	bic.w	r2, r2, #16
 800d392:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d39a:	4619      	mov	r1, r3
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f7ff f82b 	bl	800c3f8 <HAL_UARTEx_RxEventCallback>
 800d3a2:	e002      	b.n	800d3aa <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f7f8 f8b7 	bl	8005518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d3b0:	8afb      	ldrh	r3, [r7, #22]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d005      	beq.n	800d3c2 <UART_RxISR_16BIT_FIFOEN+0x1a6>
 800d3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b8:	f003 0320 	and.w	r3, r3, #32
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	f47f af4c 	bne.w	800d25a <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3c8:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d3ca:	89fb      	ldrh	r3, [r7, #14]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d021      	beq.n	800d414 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d3d6:	89fa      	ldrh	r2, [r7, #14]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d21b      	bcs.n	800d414 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	689a      	ldr	r2, [r3, #8]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d3ea:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	4a0b      	ldr	r2, [pc, #44]	; (800d41c <UART_RxISR_16BIT_FIFOEN+0x200>)
 800d3f0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f042 0220 	orr.w	r2, r2, #32
 800d400:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d402:	e007      	b.n	800d414 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	699a      	ldr	r2, [r3, #24]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f042 0208 	orr.w	r2, r2, #8
 800d412:	619a      	str	r2, [r3, #24]
}
 800d414:	bf00      	nop
 800d416:	3728      	adds	r7, #40	; 0x28
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}
 800d41c:	0800cf41 	.word	0x0800cf41

0800d420 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d428:	bf00      	nop
 800d42a:	370c      	adds	r7, #12
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr

0800d434 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d434:	b480      	push	{r7}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d43c:	bf00      	nop
 800d43e:	370c      	adds	r7, #12
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	4770      	bx	lr

0800d448 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d448:	b480      	push	{r7}
 800d44a:	b083      	sub	sp, #12
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d450:	bf00      	nop
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b085      	sub	sp, #20
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	d101      	bne.n	800d472 <HAL_UARTEx_DisableFifoMode+0x16>
 800d46e:	2302      	movs	r3, #2
 800d470:	e027      	b.n	800d4c2 <HAL_UARTEx_DisableFifoMode+0x66>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2201      	movs	r2, #1
 800d476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2224      	movs	r2, #36	; 0x24
 800d47e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	681a      	ldr	r2, [r3, #0]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f022 0201 	bic.w	r2, r2, #1
 800d498:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d4a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2220      	movs	r2, #32
 800d4b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d4c0:	2300      	movs	r3, #0
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3714      	adds	r7, #20
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr

0800d4ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d4ce:	b580      	push	{r7, lr}
 800d4d0:	b084      	sub	sp, #16
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
 800d4d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d4de:	2b01      	cmp	r3, #1
 800d4e0:	d101      	bne.n	800d4e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d4e2:	2302      	movs	r3, #2
 800d4e4:	e02d      	b.n	800d542 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2224      	movs	r2, #36	; 0x24
 800d4f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	681a      	ldr	r2, [r3, #0]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f022 0201 	bic.w	r2, r2, #1
 800d50c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	683a      	ldr	r2, [r7, #0]
 800d51e:	430a      	orrs	r2, r1
 800d520:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f000 f850 	bl	800d5c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	68fa      	ldr	r2, [r7, #12]
 800d52e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2220      	movs	r2, #32
 800d534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2200      	movs	r2, #0
 800d53c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d540:	2300      	movs	r3, #0
}
 800d542:	4618      	mov	r0, r3
 800d544:	3710      	adds	r7, #16
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}

0800d54a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d54a:	b580      	push	{r7, lr}
 800d54c:	b084      	sub	sp, #16
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
 800d552:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d55a:	2b01      	cmp	r3, #1
 800d55c:	d101      	bne.n	800d562 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d55e:	2302      	movs	r3, #2
 800d560:	e02d      	b.n	800d5be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2201      	movs	r2, #1
 800d566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2224      	movs	r2, #36	; 0x24
 800d56e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	681a      	ldr	r2, [r3, #0]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f022 0201 	bic.w	r2, r2, #1
 800d588:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	683a      	ldr	r2, [r7, #0]
 800d59a:	430a      	orrs	r2, r1
 800d59c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f000 f812 	bl	800d5c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	68fa      	ldr	r2, [r7, #12]
 800d5aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2220      	movs	r2, #32
 800d5b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d5bc:	2300      	movs	r3, #0
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3710      	adds	r7, #16
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
	...

0800d5c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b085      	sub	sp, #20
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d108      	bne.n	800d5ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2201      	movs	r2, #1
 800d5dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d5e8:	e031      	b.n	800d64e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d5ea:	2308      	movs	r3, #8
 800d5ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d5ee:	2308      	movs	r3, #8
 800d5f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	689b      	ldr	r3, [r3, #8]
 800d5f8:	0e5b      	lsrs	r3, r3, #25
 800d5fa:	b2db      	uxtb	r3, r3
 800d5fc:	f003 0307 	and.w	r3, r3, #7
 800d600:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	689b      	ldr	r3, [r3, #8]
 800d608:	0f5b      	lsrs	r3, r3, #29
 800d60a:	b2db      	uxtb	r3, r3
 800d60c:	f003 0307 	and.w	r3, r3, #7
 800d610:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d612:	7bbb      	ldrb	r3, [r7, #14]
 800d614:	7b3a      	ldrb	r2, [r7, #12]
 800d616:	4911      	ldr	r1, [pc, #68]	; (800d65c <UARTEx_SetNbDataToProcess+0x94>)
 800d618:	5c8a      	ldrb	r2, [r1, r2]
 800d61a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d61e:	7b3a      	ldrb	r2, [r7, #12]
 800d620:	490f      	ldr	r1, [pc, #60]	; (800d660 <UARTEx_SetNbDataToProcess+0x98>)
 800d622:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d624:	fb93 f3f2 	sdiv	r3, r3, r2
 800d628:	b29a      	uxth	r2, r3
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d630:	7bfb      	ldrb	r3, [r7, #15]
 800d632:	7b7a      	ldrb	r2, [r7, #13]
 800d634:	4909      	ldr	r1, [pc, #36]	; (800d65c <UARTEx_SetNbDataToProcess+0x94>)
 800d636:	5c8a      	ldrb	r2, [r1, r2]
 800d638:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d63c:	7b7a      	ldrb	r2, [r7, #13]
 800d63e:	4908      	ldr	r1, [pc, #32]	; (800d660 <UARTEx_SetNbDataToProcess+0x98>)
 800d640:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d642:	fb93 f3f2 	sdiv	r3, r3, r2
 800d646:	b29a      	uxth	r2, r3
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d64e:	bf00      	nop
 800d650:	3714      	adds	r7, #20
 800d652:	46bd      	mov	sp, r7
 800d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d658:	4770      	bx	lr
 800d65a:	bf00      	nop
 800d65c:	08012f00 	.word	0x08012f00
 800d660:	08012f08 	.word	0x08012f08

0800d664 <atof>:
 800d664:	2100      	movs	r1, #0
 800d666:	f001 bb65 	b.w	800ed34 <strtod>

0800d66a <atoi>:
 800d66a:	220a      	movs	r2, #10
 800d66c:	2100      	movs	r1, #0
 800d66e:	f001 bbf1 	b.w	800ee54 <strtol>
	...

0800d674 <__errno>:
 800d674:	4b01      	ldr	r3, [pc, #4]	; (800d67c <__errno+0x8>)
 800d676:	6818      	ldr	r0, [r3, #0]
 800d678:	4770      	bx	lr
 800d67a:	bf00      	nop
 800d67c:	2000002c 	.word	0x2000002c

0800d680 <__libc_init_array>:
 800d680:	b570      	push	{r4, r5, r6, lr}
 800d682:	4d0d      	ldr	r5, [pc, #52]	; (800d6b8 <__libc_init_array+0x38>)
 800d684:	4c0d      	ldr	r4, [pc, #52]	; (800d6bc <__libc_init_array+0x3c>)
 800d686:	1b64      	subs	r4, r4, r5
 800d688:	10a4      	asrs	r4, r4, #2
 800d68a:	2600      	movs	r6, #0
 800d68c:	42a6      	cmp	r6, r4
 800d68e:	d109      	bne.n	800d6a4 <__libc_init_array+0x24>
 800d690:	4d0b      	ldr	r5, [pc, #44]	; (800d6c0 <__libc_init_array+0x40>)
 800d692:	4c0c      	ldr	r4, [pc, #48]	; (800d6c4 <__libc_init_array+0x44>)
 800d694:	f004 fc4a 	bl	8011f2c <_init>
 800d698:	1b64      	subs	r4, r4, r5
 800d69a:	10a4      	asrs	r4, r4, #2
 800d69c:	2600      	movs	r6, #0
 800d69e:	42a6      	cmp	r6, r4
 800d6a0:	d105      	bne.n	800d6ae <__libc_init_array+0x2e>
 800d6a2:	bd70      	pop	{r4, r5, r6, pc}
 800d6a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6a8:	4798      	blx	r3
 800d6aa:	3601      	adds	r6, #1
 800d6ac:	e7ee      	b.n	800d68c <__libc_init_array+0xc>
 800d6ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6b2:	4798      	blx	r3
 800d6b4:	3601      	adds	r6, #1
 800d6b6:	e7f2      	b.n	800d69e <__libc_init_array+0x1e>
 800d6b8:	08013400 	.word	0x08013400
 800d6bc:	08013400 	.word	0x08013400
 800d6c0:	08013400 	.word	0x08013400
 800d6c4:	08013404 	.word	0x08013404

0800d6c8 <memcpy>:
 800d6c8:	440a      	add	r2, r1
 800d6ca:	4291      	cmp	r1, r2
 800d6cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d6d0:	d100      	bne.n	800d6d4 <memcpy+0xc>
 800d6d2:	4770      	bx	lr
 800d6d4:	b510      	push	{r4, lr}
 800d6d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6de:	4291      	cmp	r1, r2
 800d6e0:	d1f9      	bne.n	800d6d6 <memcpy+0xe>
 800d6e2:	bd10      	pop	{r4, pc}

0800d6e4 <memset>:
 800d6e4:	4402      	add	r2, r0
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d100      	bne.n	800d6ee <memset+0xa>
 800d6ec:	4770      	bx	lr
 800d6ee:	f803 1b01 	strb.w	r1, [r3], #1
 800d6f2:	e7f9      	b.n	800d6e8 <memset+0x4>

0800d6f4 <__cvt>:
 800d6f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6f8:	ec55 4b10 	vmov	r4, r5, d0
 800d6fc:	2d00      	cmp	r5, #0
 800d6fe:	460e      	mov	r6, r1
 800d700:	4619      	mov	r1, r3
 800d702:	462b      	mov	r3, r5
 800d704:	bfbb      	ittet	lt
 800d706:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d70a:	461d      	movlt	r5, r3
 800d70c:	2300      	movge	r3, #0
 800d70e:	232d      	movlt	r3, #45	; 0x2d
 800d710:	700b      	strb	r3, [r1, #0]
 800d712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d714:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d718:	4691      	mov	r9, r2
 800d71a:	f023 0820 	bic.w	r8, r3, #32
 800d71e:	bfbc      	itt	lt
 800d720:	4622      	movlt	r2, r4
 800d722:	4614      	movlt	r4, r2
 800d724:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d728:	d005      	beq.n	800d736 <__cvt+0x42>
 800d72a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d72e:	d100      	bne.n	800d732 <__cvt+0x3e>
 800d730:	3601      	adds	r6, #1
 800d732:	2102      	movs	r1, #2
 800d734:	e000      	b.n	800d738 <__cvt+0x44>
 800d736:	2103      	movs	r1, #3
 800d738:	ab03      	add	r3, sp, #12
 800d73a:	9301      	str	r3, [sp, #4]
 800d73c:	ab02      	add	r3, sp, #8
 800d73e:	9300      	str	r3, [sp, #0]
 800d740:	ec45 4b10 	vmov	d0, r4, r5
 800d744:	4653      	mov	r3, sl
 800d746:	4632      	mov	r2, r6
 800d748:	f001 fcda 	bl	800f100 <_dtoa_r>
 800d74c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d750:	4607      	mov	r7, r0
 800d752:	d102      	bne.n	800d75a <__cvt+0x66>
 800d754:	f019 0f01 	tst.w	r9, #1
 800d758:	d022      	beq.n	800d7a0 <__cvt+0xac>
 800d75a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d75e:	eb07 0906 	add.w	r9, r7, r6
 800d762:	d110      	bne.n	800d786 <__cvt+0x92>
 800d764:	783b      	ldrb	r3, [r7, #0]
 800d766:	2b30      	cmp	r3, #48	; 0x30
 800d768:	d10a      	bne.n	800d780 <__cvt+0x8c>
 800d76a:	2200      	movs	r2, #0
 800d76c:	2300      	movs	r3, #0
 800d76e:	4620      	mov	r0, r4
 800d770:	4629      	mov	r1, r5
 800d772:	f7f3 f9d1 	bl	8000b18 <__aeabi_dcmpeq>
 800d776:	b918      	cbnz	r0, 800d780 <__cvt+0x8c>
 800d778:	f1c6 0601 	rsb	r6, r6, #1
 800d77c:	f8ca 6000 	str.w	r6, [sl]
 800d780:	f8da 3000 	ldr.w	r3, [sl]
 800d784:	4499      	add	r9, r3
 800d786:	2200      	movs	r2, #0
 800d788:	2300      	movs	r3, #0
 800d78a:	4620      	mov	r0, r4
 800d78c:	4629      	mov	r1, r5
 800d78e:	f7f3 f9c3 	bl	8000b18 <__aeabi_dcmpeq>
 800d792:	b108      	cbz	r0, 800d798 <__cvt+0xa4>
 800d794:	f8cd 900c 	str.w	r9, [sp, #12]
 800d798:	2230      	movs	r2, #48	; 0x30
 800d79a:	9b03      	ldr	r3, [sp, #12]
 800d79c:	454b      	cmp	r3, r9
 800d79e:	d307      	bcc.n	800d7b0 <__cvt+0xbc>
 800d7a0:	9b03      	ldr	r3, [sp, #12]
 800d7a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7a4:	1bdb      	subs	r3, r3, r7
 800d7a6:	4638      	mov	r0, r7
 800d7a8:	6013      	str	r3, [r2, #0]
 800d7aa:	b004      	add	sp, #16
 800d7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7b0:	1c59      	adds	r1, r3, #1
 800d7b2:	9103      	str	r1, [sp, #12]
 800d7b4:	701a      	strb	r2, [r3, #0]
 800d7b6:	e7f0      	b.n	800d79a <__cvt+0xa6>

0800d7b8 <__exponent>:
 800d7b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	2900      	cmp	r1, #0
 800d7be:	bfb8      	it	lt
 800d7c0:	4249      	neglt	r1, r1
 800d7c2:	f803 2b02 	strb.w	r2, [r3], #2
 800d7c6:	bfb4      	ite	lt
 800d7c8:	222d      	movlt	r2, #45	; 0x2d
 800d7ca:	222b      	movge	r2, #43	; 0x2b
 800d7cc:	2909      	cmp	r1, #9
 800d7ce:	7042      	strb	r2, [r0, #1]
 800d7d0:	dd2a      	ble.n	800d828 <__exponent+0x70>
 800d7d2:	f10d 0407 	add.w	r4, sp, #7
 800d7d6:	46a4      	mov	ip, r4
 800d7d8:	270a      	movs	r7, #10
 800d7da:	46a6      	mov	lr, r4
 800d7dc:	460a      	mov	r2, r1
 800d7de:	fb91 f6f7 	sdiv	r6, r1, r7
 800d7e2:	fb07 1516 	mls	r5, r7, r6, r1
 800d7e6:	3530      	adds	r5, #48	; 0x30
 800d7e8:	2a63      	cmp	r2, #99	; 0x63
 800d7ea:	f104 34ff 	add.w	r4, r4, #4294967295
 800d7ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d7f2:	4631      	mov	r1, r6
 800d7f4:	dcf1      	bgt.n	800d7da <__exponent+0x22>
 800d7f6:	3130      	adds	r1, #48	; 0x30
 800d7f8:	f1ae 0502 	sub.w	r5, lr, #2
 800d7fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d800:	1c44      	adds	r4, r0, #1
 800d802:	4629      	mov	r1, r5
 800d804:	4561      	cmp	r1, ip
 800d806:	d30a      	bcc.n	800d81e <__exponent+0x66>
 800d808:	f10d 0209 	add.w	r2, sp, #9
 800d80c:	eba2 020e 	sub.w	r2, r2, lr
 800d810:	4565      	cmp	r5, ip
 800d812:	bf88      	it	hi
 800d814:	2200      	movhi	r2, #0
 800d816:	4413      	add	r3, r2
 800d818:	1a18      	subs	r0, r3, r0
 800d81a:	b003      	add	sp, #12
 800d81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d81e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d822:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d826:	e7ed      	b.n	800d804 <__exponent+0x4c>
 800d828:	2330      	movs	r3, #48	; 0x30
 800d82a:	3130      	adds	r1, #48	; 0x30
 800d82c:	7083      	strb	r3, [r0, #2]
 800d82e:	70c1      	strb	r1, [r0, #3]
 800d830:	1d03      	adds	r3, r0, #4
 800d832:	e7f1      	b.n	800d818 <__exponent+0x60>

0800d834 <_printf_float>:
 800d834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d838:	ed2d 8b02 	vpush	{d8}
 800d83c:	b08d      	sub	sp, #52	; 0x34
 800d83e:	460c      	mov	r4, r1
 800d840:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d844:	4616      	mov	r6, r2
 800d846:	461f      	mov	r7, r3
 800d848:	4605      	mov	r5, r0
 800d84a:	f002 ff6b 	bl	8010724 <_localeconv_r>
 800d84e:	f8d0 a000 	ldr.w	sl, [r0]
 800d852:	4650      	mov	r0, sl
 800d854:	f7f2 fce4 	bl	8000220 <strlen>
 800d858:	2300      	movs	r3, #0
 800d85a:	930a      	str	r3, [sp, #40]	; 0x28
 800d85c:	6823      	ldr	r3, [r4, #0]
 800d85e:	9305      	str	r3, [sp, #20]
 800d860:	f8d8 3000 	ldr.w	r3, [r8]
 800d864:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d868:	3307      	adds	r3, #7
 800d86a:	f023 0307 	bic.w	r3, r3, #7
 800d86e:	f103 0208 	add.w	r2, r3, #8
 800d872:	f8c8 2000 	str.w	r2, [r8]
 800d876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d87e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d882:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d886:	9307      	str	r3, [sp, #28]
 800d888:	f8cd 8018 	str.w	r8, [sp, #24]
 800d88c:	ee08 0a10 	vmov	s16, r0
 800d890:	4b9f      	ldr	r3, [pc, #636]	; (800db10 <_printf_float+0x2dc>)
 800d892:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d896:	f04f 32ff 	mov.w	r2, #4294967295
 800d89a:	f7f3 f96f 	bl	8000b7c <__aeabi_dcmpun>
 800d89e:	bb88      	cbnz	r0, 800d904 <_printf_float+0xd0>
 800d8a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d8a4:	4b9a      	ldr	r3, [pc, #616]	; (800db10 <_printf_float+0x2dc>)
 800d8a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d8aa:	f7f3 f949 	bl	8000b40 <__aeabi_dcmple>
 800d8ae:	bb48      	cbnz	r0, 800d904 <_printf_float+0xd0>
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	4640      	mov	r0, r8
 800d8b6:	4649      	mov	r1, r9
 800d8b8:	f7f3 f938 	bl	8000b2c <__aeabi_dcmplt>
 800d8bc:	b110      	cbz	r0, 800d8c4 <_printf_float+0x90>
 800d8be:	232d      	movs	r3, #45	; 0x2d
 800d8c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8c4:	4b93      	ldr	r3, [pc, #588]	; (800db14 <_printf_float+0x2e0>)
 800d8c6:	4894      	ldr	r0, [pc, #592]	; (800db18 <_printf_float+0x2e4>)
 800d8c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d8cc:	bf94      	ite	ls
 800d8ce:	4698      	movls	r8, r3
 800d8d0:	4680      	movhi	r8, r0
 800d8d2:	2303      	movs	r3, #3
 800d8d4:	6123      	str	r3, [r4, #16]
 800d8d6:	9b05      	ldr	r3, [sp, #20]
 800d8d8:	f023 0204 	bic.w	r2, r3, #4
 800d8dc:	6022      	str	r2, [r4, #0]
 800d8de:	f04f 0900 	mov.w	r9, #0
 800d8e2:	9700      	str	r7, [sp, #0]
 800d8e4:	4633      	mov	r3, r6
 800d8e6:	aa0b      	add	r2, sp, #44	; 0x2c
 800d8e8:	4621      	mov	r1, r4
 800d8ea:	4628      	mov	r0, r5
 800d8ec:	f000 f9d8 	bl	800dca0 <_printf_common>
 800d8f0:	3001      	adds	r0, #1
 800d8f2:	f040 8090 	bne.w	800da16 <_printf_float+0x1e2>
 800d8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8fa:	b00d      	add	sp, #52	; 0x34
 800d8fc:	ecbd 8b02 	vpop	{d8}
 800d900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d904:	4642      	mov	r2, r8
 800d906:	464b      	mov	r3, r9
 800d908:	4640      	mov	r0, r8
 800d90a:	4649      	mov	r1, r9
 800d90c:	f7f3 f936 	bl	8000b7c <__aeabi_dcmpun>
 800d910:	b140      	cbz	r0, 800d924 <_printf_float+0xf0>
 800d912:	464b      	mov	r3, r9
 800d914:	2b00      	cmp	r3, #0
 800d916:	bfbc      	itt	lt
 800d918:	232d      	movlt	r3, #45	; 0x2d
 800d91a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d91e:	487f      	ldr	r0, [pc, #508]	; (800db1c <_printf_float+0x2e8>)
 800d920:	4b7f      	ldr	r3, [pc, #508]	; (800db20 <_printf_float+0x2ec>)
 800d922:	e7d1      	b.n	800d8c8 <_printf_float+0x94>
 800d924:	6863      	ldr	r3, [r4, #4]
 800d926:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d92a:	9206      	str	r2, [sp, #24]
 800d92c:	1c5a      	adds	r2, r3, #1
 800d92e:	d13f      	bne.n	800d9b0 <_printf_float+0x17c>
 800d930:	2306      	movs	r3, #6
 800d932:	6063      	str	r3, [r4, #4]
 800d934:	9b05      	ldr	r3, [sp, #20]
 800d936:	6861      	ldr	r1, [r4, #4]
 800d938:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d93c:	2300      	movs	r3, #0
 800d93e:	9303      	str	r3, [sp, #12]
 800d940:	ab0a      	add	r3, sp, #40	; 0x28
 800d942:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d946:	ab09      	add	r3, sp, #36	; 0x24
 800d948:	ec49 8b10 	vmov	d0, r8, r9
 800d94c:	9300      	str	r3, [sp, #0]
 800d94e:	6022      	str	r2, [r4, #0]
 800d950:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d954:	4628      	mov	r0, r5
 800d956:	f7ff fecd 	bl	800d6f4 <__cvt>
 800d95a:	9b06      	ldr	r3, [sp, #24]
 800d95c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d95e:	2b47      	cmp	r3, #71	; 0x47
 800d960:	4680      	mov	r8, r0
 800d962:	d108      	bne.n	800d976 <_printf_float+0x142>
 800d964:	1cc8      	adds	r0, r1, #3
 800d966:	db02      	blt.n	800d96e <_printf_float+0x13a>
 800d968:	6863      	ldr	r3, [r4, #4]
 800d96a:	4299      	cmp	r1, r3
 800d96c:	dd41      	ble.n	800d9f2 <_printf_float+0x1be>
 800d96e:	f1ab 0b02 	sub.w	fp, fp, #2
 800d972:	fa5f fb8b 	uxtb.w	fp, fp
 800d976:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d97a:	d820      	bhi.n	800d9be <_printf_float+0x18a>
 800d97c:	3901      	subs	r1, #1
 800d97e:	465a      	mov	r2, fp
 800d980:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d984:	9109      	str	r1, [sp, #36]	; 0x24
 800d986:	f7ff ff17 	bl	800d7b8 <__exponent>
 800d98a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d98c:	1813      	adds	r3, r2, r0
 800d98e:	2a01      	cmp	r2, #1
 800d990:	4681      	mov	r9, r0
 800d992:	6123      	str	r3, [r4, #16]
 800d994:	dc02      	bgt.n	800d99c <_printf_float+0x168>
 800d996:	6822      	ldr	r2, [r4, #0]
 800d998:	07d2      	lsls	r2, r2, #31
 800d99a:	d501      	bpl.n	800d9a0 <_printf_float+0x16c>
 800d99c:	3301      	adds	r3, #1
 800d99e:	6123      	str	r3, [r4, #16]
 800d9a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d09c      	beq.n	800d8e2 <_printf_float+0xae>
 800d9a8:	232d      	movs	r3, #45	; 0x2d
 800d9aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9ae:	e798      	b.n	800d8e2 <_printf_float+0xae>
 800d9b0:	9a06      	ldr	r2, [sp, #24]
 800d9b2:	2a47      	cmp	r2, #71	; 0x47
 800d9b4:	d1be      	bne.n	800d934 <_printf_float+0x100>
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d1bc      	bne.n	800d934 <_printf_float+0x100>
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	e7b9      	b.n	800d932 <_printf_float+0xfe>
 800d9be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d9c2:	d118      	bne.n	800d9f6 <_printf_float+0x1c2>
 800d9c4:	2900      	cmp	r1, #0
 800d9c6:	6863      	ldr	r3, [r4, #4]
 800d9c8:	dd0b      	ble.n	800d9e2 <_printf_float+0x1ae>
 800d9ca:	6121      	str	r1, [r4, #16]
 800d9cc:	b913      	cbnz	r3, 800d9d4 <_printf_float+0x1a0>
 800d9ce:	6822      	ldr	r2, [r4, #0]
 800d9d0:	07d0      	lsls	r0, r2, #31
 800d9d2:	d502      	bpl.n	800d9da <_printf_float+0x1a6>
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	440b      	add	r3, r1
 800d9d8:	6123      	str	r3, [r4, #16]
 800d9da:	65a1      	str	r1, [r4, #88]	; 0x58
 800d9dc:	f04f 0900 	mov.w	r9, #0
 800d9e0:	e7de      	b.n	800d9a0 <_printf_float+0x16c>
 800d9e2:	b913      	cbnz	r3, 800d9ea <_printf_float+0x1b6>
 800d9e4:	6822      	ldr	r2, [r4, #0]
 800d9e6:	07d2      	lsls	r2, r2, #31
 800d9e8:	d501      	bpl.n	800d9ee <_printf_float+0x1ba>
 800d9ea:	3302      	adds	r3, #2
 800d9ec:	e7f4      	b.n	800d9d8 <_printf_float+0x1a4>
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	e7f2      	b.n	800d9d8 <_printf_float+0x1a4>
 800d9f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d9f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9f8:	4299      	cmp	r1, r3
 800d9fa:	db05      	blt.n	800da08 <_printf_float+0x1d4>
 800d9fc:	6823      	ldr	r3, [r4, #0]
 800d9fe:	6121      	str	r1, [r4, #16]
 800da00:	07d8      	lsls	r0, r3, #31
 800da02:	d5ea      	bpl.n	800d9da <_printf_float+0x1a6>
 800da04:	1c4b      	adds	r3, r1, #1
 800da06:	e7e7      	b.n	800d9d8 <_printf_float+0x1a4>
 800da08:	2900      	cmp	r1, #0
 800da0a:	bfd4      	ite	le
 800da0c:	f1c1 0202 	rsble	r2, r1, #2
 800da10:	2201      	movgt	r2, #1
 800da12:	4413      	add	r3, r2
 800da14:	e7e0      	b.n	800d9d8 <_printf_float+0x1a4>
 800da16:	6823      	ldr	r3, [r4, #0]
 800da18:	055a      	lsls	r2, r3, #21
 800da1a:	d407      	bmi.n	800da2c <_printf_float+0x1f8>
 800da1c:	6923      	ldr	r3, [r4, #16]
 800da1e:	4642      	mov	r2, r8
 800da20:	4631      	mov	r1, r6
 800da22:	4628      	mov	r0, r5
 800da24:	47b8      	blx	r7
 800da26:	3001      	adds	r0, #1
 800da28:	d12c      	bne.n	800da84 <_printf_float+0x250>
 800da2a:	e764      	b.n	800d8f6 <_printf_float+0xc2>
 800da2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800da30:	f240 80e0 	bls.w	800dbf4 <_printf_float+0x3c0>
 800da34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800da38:	2200      	movs	r2, #0
 800da3a:	2300      	movs	r3, #0
 800da3c:	f7f3 f86c 	bl	8000b18 <__aeabi_dcmpeq>
 800da40:	2800      	cmp	r0, #0
 800da42:	d034      	beq.n	800daae <_printf_float+0x27a>
 800da44:	4a37      	ldr	r2, [pc, #220]	; (800db24 <_printf_float+0x2f0>)
 800da46:	2301      	movs	r3, #1
 800da48:	4631      	mov	r1, r6
 800da4a:	4628      	mov	r0, r5
 800da4c:	47b8      	blx	r7
 800da4e:	3001      	adds	r0, #1
 800da50:	f43f af51 	beq.w	800d8f6 <_printf_float+0xc2>
 800da54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da58:	429a      	cmp	r2, r3
 800da5a:	db02      	blt.n	800da62 <_printf_float+0x22e>
 800da5c:	6823      	ldr	r3, [r4, #0]
 800da5e:	07d8      	lsls	r0, r3, #31
 800da60:	d510      	bpl.n	800da84 <_printf_float+0x250>
 800da62:	ee18 3a10 	vmov	r3, s16
 800da66:	4652      	mov	r2, sl
 800da68:	4631      	mov	r1, r6
 800da6a:	4628      	mov	r0, r5
 800da6c:	47b8      	blx	r7
 800da6e:	3001      	adds	r0, #1
 800da70:	f43f af41 	beq.w	800d8f6 <_printf_float+0xc2>
 800da74:	f04f 0800 	mov.w	r8, #0
 800da78:	f104 091a 	add.w	r9, r4, #26
 800da7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da7e:	3b01      	subs	r3, #1
 800da80:	4543      	cmp	r3, r8
 800da82:	dc09      	bgt.n	800da98 <_printf_float+0x264>
 800da84:	6823      	ldr	r3, [r4, #0]
 800da86:	079b      	lsls	r3, r3, #30
 800da88:	f100 8105 	bmi.w	800dc96 <_printf_float+0x462>
 800da8c:	68e0      	ldr	r0, [r4, #12]
 800da8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da90:	4298      	cmp	r0, r3
 800da92:	bfb8      	it	lt
 800da94:	4618      	movlt	r0, r3
 800da96:	e730      	b.n	800d8fa <_printf_float+0xc6>
 800da98:	2301      	movs	r3, #1
 800da9a:	464a      	mov	r2, r9
 800da9c:	4631      	mov	r1, r6
 800da9e:	4628      	mov	r0, r5
 800daa0:	47b8      	blx	r7
 800daa2:	3001      	adds	r0, #1
 800daa4:	f43f af27 	beq.w	800d8f6 <_printf_float+0xc2>
 800daa8:	f108 0801 	add.w	r8, r8, #1
 800daac:	e7e6      	b.n	800da7c <_printf_float+0x248>
 800daae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	dc39      	bgt.n	800db28 <_printf_float+0x2f4>
 800dab4:	4a1b      	ldr	r2, [pc, #108]	; (800db24 <_printf_float+0x2f0>)
 800dab6:	2301      	movs	r3, #1
 800dab8:	4631      	mov	r1, r6
 800daba:	4628      	mov	r0, r5
 800dabc:	47b8      	blx	r7
 800dabe:	3001      	adds	r0, #1
 800dac0:	f43f af19 	beq.w	800d8f6 <_printf_float+0xc2>
 800dac4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dac8:	4313      	orrs	r3, r2
 800daca:	d102      	bne.n	800dad2 <_printf_float+0x29e>
 800dacc:	6823      	ldr	r3, [r4, #0]
 800dace:	07d9      	lsls	r1, r3, #31
 800dad0:	d5d8      	bpl.n	800da84 <_printf_float+0x250>
 800dad2:	ee18 3a10 	vmov	r3, s16
 800dad6:	4652      	mov	r2, sl
 800dad8:	4631      	mov	r1, r6
 800dada:	4628      	mov	r0, r5
 800dadc:	47b8      	blx	r7
 800dade:	3001      	adds	r0, #1
 800dae0:	f43f af09 	beq.w	800d8f6 <_printf_float+0xc2>
 800dae4:	f04f 0900 	mov.w	r9, #0
 800dae8:	f104 0a1a 	add.w	sl, r4, #26
 800daec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daee:	425b      	negs	r3, r3
 800daf0:	454b      	cmp	r3, r9
 800daf2:	dc01      	bgt.n	800daf8 <_printf_float+0x2c4>
 800daf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daf6:	e792      	b.n	800da1e <_printf_float+0x1ea>
 800daf8:	2301      	movs	r3, #1
 800dafa:	4652      	mov	r2, sl
 800dafc:	4631      	mov	r1, r6
 800dafe:	4628      	mov	r0, r5
 800db00:	47b8      	blx	r7
 800db02:	3001      	adds	r0, #1
 800db04:	f43f aef7 	beq.w	800d8f6 <_printf_float+0xc2>
 800db08:	f109 0901 	add.w	r9, r9, #1
 800db0c:	e7ee      	b.n	800daec <_printf_float+0x2b8>
 800db0e:	bf00      	nop
 800db10:	7fefffff 	.word	0x7fefffff
 800db14:	08012f14 	.word	0x08012f14
 800db18:	08012f18 	.word	0x08012f18
 800db1c:	08012f20 	.word	0x08012f20
 800db20:	08012f1c 	.word	0x08012f1c
 800db24:	08012f24 	.word	0x08012f24
 800db28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db2c:	429a      	cmp	r2, r3
 800db2e:	bfa8      	it	ge
 800db30:	461a      	movge	r2, r3
 800db32:	2a00      	cmp	r2, #0
 800db34:	4691      	mov	r9, r2
 800db36:	dc37      	bgt.n	800dba8 <_printf_float+0x374>
 800db38:	f04f 0b00 	mov.w	fp, #0
 800db3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db40:	f104 021a 	add.w	r2, r4, #26
 800db44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db46:	9305      	str	r3, [sp, #20]
 800db48:	eba3 0309 	sub.w	r3, r3, r9
 800db4c:	455b      	cmp	r3, fp
 800db4e:	dc33      	bgt.n	800dbb8 <_printf_float+0x384>
 800db50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db54:	429a      	cmp	r2, r3
 800db56:	db3b      	blt.n	800dbd0 <_printf_float+0x39c>
 800db58:	6823      	ldr	r3, [r4, #0]
 800db5a:	07da      	lsls	r2, r3, #31
 800db5c:	d438      	bmi.n	800dbd0 <_printf_float+0x39c>
 800db5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db60:	9b05      	ldr	r3, [sp, #20]
 800db62:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db64:	1ad3      	subs	r3, r2, r3
 800db66:	eba2 0901 	sub.w	r9, r2, r1
 800db6a:	4599      	cmp	r9, r3
 800db6c:	bfa8      	it	ge
 800db6e:	4699      	movge	r9, r3
 800db70:	f1b9 0f00 	cmp.w	r9, #0
 800db74:	dc35      	bgt.n	800dbe2 <_printf_float+0x3ae>
 800db76:	f04f 0800 	mov.w	r8, #0
 800db7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db7e:	f104 0a1a 	add.w	sl, r4, #26
 800db82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db86:	1a9b      	subs	r3, r3, r2
 800db88:	eba3 0309 	sub.w	r3, r3, r9
 800db8c:	4543      	cmp	r3, r8
 800db8e:	f77f af79 	ble.w	800da84 <_printf_float+0x250>
 800db92:	2301      	movs	r3, #1
 800db94:	4652      	mov	r2, sl
 800db96:	4631      	mov	r1, r6
 800db98:	4628      	mov	r0, r5
 800db9a:	47b8      	blx	r7
 800db9c:	3001      	adds	r0, #1
 800db9e:	f43f aeaa 	beq.w	800d8f6 <_printf_float+0xc2>
 800dba2:	f108 0801 	add.w	r8, r8, #1
 800dba6:	e7ec      	b.n	800db82 <_printf_float+0x34e>
 800dba8:	4613      	mov	r3, r2
 800dbaa:	4631      	mov	r1, r6
 800dbac:	4642      	mov	r2, r8
 800dbae:	4628      	mov	r0, r5
 800dbb0:	47b8      	blx	r7
 800dbb2:	3001      	adds	r0, #1
 800dbb4:	d1c0      	bne.n	800db38 <_printf_float+0x304>
 800dbb6:	e69e      	b.n	800d8f6 <_printf_float+0xc2>
 800dbb8:	2301      	movs	r3, #1
 800dbba:	4631      	mov	r1, r6
 800dbbc:	4628      	mov	r0, r5
 800dbbe:	9205      	str	r2, [sp, #20]
 800dbc0:	47b8      	blx	r7
 800dbc2:	3001      	adds	r0, #1
 800dbc4:	f43f ae97 	beq.w	800d8f6 <_printf_float+0xc2>
 800dbc8:	9a05      	ldr	r2, [sp, #20]
 800dbca:	f10b 0b01 	add.w	fp, fp, #1
 800dbce:	e7b9      	b.n	800db44 <_printf_float+0x310>
 800dbd0:	ee18 3a10 	vmov	r3, s16
 800dbd4:	4652      	mov	r2, sl
 800dbd6:	4631      	mov	r1, r6
 800dbd8:	4628      	mov	r0, r5
 800dbda:	47b8      	blx	r7
 800dbdc:	3001      	adds	r0, #1
 800dbde:	d1be      	bne.n	800db5e <_printf_float+0x32a>
 800dbe0:	e689      	b.n	800d8f6 <_printf_float+0xc2>
 800dbe2:	9a05      	ldr	r2, [sp, #20]
 800dbe4:	464b      	mov	r3, r9
 800dbe6:	4442      	add	r2, r8
 800dbe8:	4631      	mov	r1, r6
 800dbea:	4628      	mov	r0, r5
 800dbec:	47b8      	blx	r7
 800dbee:	3001      	adds	r0, #1
 800dbf0:	d1c1      	bne.n	800db76 <_printf_float+0x342>
 800dbf2:	e680      	b.n	800d8f6 <_printf_float+0xc2>
 800dbf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbf6:	2a01      	cmp	r2, #1
 800dbf8:	dc01      	bgt.n	800dbfe <_printf_float+0x3ca>
 800dbfa:	07db      	lsls	r3, r3, #31
 800dbfc:	d538      	bpl.n	800dc70 <_printf_float+0x43c>
 800dbfe:	2301      	movs	r3, #1
 800dc00:	4642      	mov	r2, r8
 800dc02:	4631      	mov	r1, r6
 800dc04:	4628      	mov	r0, r5
 800dc06:	47b8      	blx	r7
 800dc08:	3001      	adds	r0, #1
 800dc0a:	f43f ae74 	beq.w	800d8f6 <_printf_float+0xc2>
 800dc0e:	ee18 3a10 	vmov	r3, s16
 800dc12:	4652      	mov	r2, sl
 800dc14:	4631      	mov	r1, r6
 800dc16:	4628      	mov	r0, r5
 800dc18:	47b8      	blx	r7
 800dc1a:	3001      	adds	r0, #1
 800dc1c:	f43f ae6b 	beq.w	800d8f6 <_printf_float+0xc2>
 800dc20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dc24:	2200      	movs	r2, #0
 800dc26:	2300      	movs	r3, #0
 800dc28:	f7f2 ff76 	bl	8000b18 <__aeabi_dcmpeq>
 800dc2c:	b9d8      	cbnz	r0, 800dc66 <_printf_float+0x432>
 800dc2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc30:	f108 0201 	add.w	r2, r8, #1
 800dc34:	3b01      	subs	r3, #1
 800dc36:	4631      	mov	r1, r6
 800dc38:	4628      	mov	r0, r5
 800dc3a:	47b8      	blx	r7
 800dc3c:	3001      	adds	r0, #1
 800dc3e:	d10e      	bne.n	800dc5e <_printf_float+0x42a>
 800dc40:	e659      	b.n	800d8f6 <_printf_float+0xc2>
 800dc42:	2301      	movs	r3, #1
 800dc44:	4652      	mov	r2, sl
 800dc46:	4631      	mov	r1, r6
 800dc48:	4628      	mov	r0, r5
 800dc4a:	47b8      	blx	r7
 800dc4c:	3001      	adds	r0, #1
 800dc4e:	f43f ae52 	beq.w	800d8f6 <_printf_float+0xc2>
 800dc52:	f108 0801 	add.w	r8, r8, #1
 800dc56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc58:	3b01      	subs	r3, #1
 800dc5a:	4543      	cmp	r3, r8
 800dc5c:	dcf1      	bgt.n	800dc42 <_printf_float+0x40e>
 800dc5e:	464b      	mov	r3, r9
 800dc60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dc64:	e6dc      	b.n	800da20 <_printf_float+0x1ec>
 800dc66:	f04f 0800 	mov.w	r8, #0
 800dc6a:	f104 0a1a 	add.w	sl, r4, #26
 800dc6e:	e7f2      	b.n	800dc56 <_printf_float+0x422>
 800dc70:	2301      	movs	r3, #1
 800dc72:	4642      	mov	r2, r8
 800dc74:	e7df      	b.n	800dc36 <_printf_float+0x402>
 800dc76:	2301      	movs	r3, #1
 800dc78:	464a      	mov	r2, r9
 800dc7a:	4631      	mov	r1, r6
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	47b8      	blx	r7
 800dc80:	3001      	adds	r0, #1
 800dc82:	f43f ae38 	beq.w	800d8f6 <_printf_float+0xc2>
 800dc86:	f108 0801 	add.w	r8, r8, #1
 800dc8a:	68e3      	ldr	r3, [r4, #12]
 800dc8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc8e:	1a5b      	subs	r3, r3, r1
 800dc90:	4543      	cmp	r3, r8
 800dc92:	dcf0      	bgt.n	800dc76 <_printf_float+0x442>
 800dc94:	e6fa      	b.n	800da8c <_printf_float+0x258>
 800dc96:	f04f 0800 	mov.w	r8, #0
 800dc9a:	f104 0919 	add.w	r9, r4, #25
 800dc9e:	e7f4      	b.n	800dc8a <_printf_float+0x456>

0800dca0 <_printf_common>:
 800dca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dca4:	4616      	mov	r6, r2
 800dca6:	4699      	mov	r9, r3
 800dca8:	688a      	ldr	r2, [r1, #8]
 800dcaa:	690b      	ldr	r3, [r1, #16]
 800dcac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	bfb8      	it	lt
 800dcb4:	4613      	movlt	r3, r2
 800dcb6:	6033      	str	r3, [r6, #0]
 800dcb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dcbc:	4607      	mov	r7, r0
 800dcbe:	460c      	mov	r4, r1
 800dcc0:	b10a      	cbz	r2, 800dcc6 <_printf_common+0x26>
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	6033      	str	r3, [r6, #0]
 800dcc6:	6823      	ldr	r3, [r4, #0]
 800dcc8:	0699      	lsls	r1, r3, #26
 800dcca:	bf42      	ittt	mi
 800dccc:	6833      	ldrmi	r3, [r6, #0]
 800dcce:	3302      	addmi	r3, #2
 800dcd0:	6033      	strmi	r3, [r6, #0]
 800dcd2:	6825      	ldr	r5, [r4, #0]
 800dcd4:	f015 0506 	ands.w	r5, r5, #6
 800dcd8:	d106      	bne.n	800dce8 <_printf_common+0x48>
 800dcda:	f104 0a19 	add.w	sl, r4, #25
 800dcde:	68e3      	ldr	r3, [r4, #12]
 800dce0:	6832      	ldr	r2, [r6, #0]
 800dce2:	1a9b      	subs	r3, r3, r2
 800dce4:	42ab      	cmp	r3, r5
 800dce6:	dc26      	bgt.n	800dd36 <_printf_common+0x96>
 800dce8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dcec:	1e13      	subs	r3, r2, #0
 800dcee:	6822      	ldr	r2, [r4, #0]
 800dcf0:	bf18      	it	ne
 800dcf2:	2301      	movne	r3, #1
 800dcf4:	0692      	lsls	r2, r2, #26
 800dcf6:	d42b      	bmi.n	800dd50 <_printf_common+0xb0>
 800dcf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dcfc:	4649      	mov	r1, r9
 800dcfe:	4638      	mov	r0, r7
 800dd00:	47c0      	blx	r8
 800dd02:	3001      	adds	r0, #1
 800dd04:	d01e      	beq.n	800dd44 <_printf_common+0xa4>
 800dd06:	6823      	ldr	r3, [r4, #0]
 800dd08:	68e5      	ldr	r5, [r4, #12]
 800dd0a:	6832      	ldr	r2, [r6, #0]
 800dd0c:	f003 0306 	and.w	r3, r3, #6
 800dd10:	2b04      	cmp	r3, #4
 800dd12:	bf08      	it	eq
 800dd14:	1aad      	subeq	r5, r5, r2
 800dd16:	68a3      	ldr	r3, [r4, #8]
 800dd18:	6922      	ldr	r2, [r4, #16]
 800dd1a:	bf0c      	ite	eq
 800dd1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd20:	2500      	movne	r5, #0
 800dd22:	4293      	cmp	r3, r2
 800dd24:	bfc4      	itt	gt
 800dd26:	1a9b      	subgt	r3, r3, r2
 800dd28:	18ed      	addgt	r5, r5, r3
 800dd2a:	2600      	movs	r6, #0
 800dd2c:	341a      	adds	r4, #26
 800dd2e:	42b5      	cmp	r5, r6
 800dd30:	d11a      	bne.n	800dd68 <_printf_common+0xc8>
 800dd32:	2000      	movs	r0, #0
 800dd34:	e008      	b.n	800dd48 <_printf_common+0xa8>
 800dd36:	2301      	movs	r3, #1
 800dd38:	4652      	mov	r2, sl
 800dd3a:	4649      	mov	r1, r9
 800dd3c:	4638      	mov	r0, r7
 800dd3e:	47c0      	blx	r8
 800dd40:	3001      	adds	r0, #1
 800dd42:	d103      	bne.n	800dd4c <_printf_common+0xac>
 800dd44:	f04f 30ff 	mov.w	r0, #4294967295
 800dd48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd4c:	3501      	adds	r5, #1
 800dd4e:	e7c6      	b.n	800dcde <_printf_common+0x3e>
 800dd50:	18e1      	adds	r1, r4, r3
 800dd52:	1c5a      	adds	r2, r3, #1
 800dd54:	2030      	movs	r0, #48	; 0x30
 800dd56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dd5a:	4422      	add	r2, r4
 800dd5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dd60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dd64:	3302      	adds	r3, #2
 800dd66:	e7c7      	b.n	800dcf8 <_printf_common+0x58>
 800dd68:	2301      	movs	r3, #1
 800dd6a:	4622      	mov	r2, r4
 800dd6c:	4649      	mov	r1, r9
 800dd6e:	4638      	mov	r0, r7
 800dd70:	47c0      	blx	r8
 800dd72:	3001      	adds	r0, #1
 800dd74:	d0e6      	beq.n	800dd44 <_printf_common+0xa4>
 800dd76:	3601      	adds	r6, #1
 800dd78:	e7d9      	b.n	800dd2e <_printf_common+0x8e>
	...

0800dd7c <_printf_i>:
 800dd7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd80:	460c      	mov	r4, r1
 800dd82:	4691      	mov	r9, r2
 800dd84:	7e27      	ldrb	r7, [r4, #24]
 800dd86:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dd88:	2f78      	cmp	r7, #120	; 0x78
 800dd8a:	4680      	mov	r8, r0
 800dd8c:	469a      	mov	sl, r3
 800dd8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd92:	d807      	bhi.n	800dda4 <_printf_i+0x28>
 800dd94:	2f62      	cmp	r7, #98	; 0x62
 800dd96:	d80a      	bhi.n	800ddae <_printf_i+0x32>
 800dd98:	2f00      	cmp	r7, #0
 800dd9a:	f000 80d8 	beq.w	800df4e <_printf_i+0x1d2>
 800dd9e:	2f58      	cmp	r7, #88	; 0x58
 800dda0:	f000 80a3 	beq.w	800deea <_printf_i+0x16e>
 800dda4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dda8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ddac:	e03a      	b.n	800de24 <_printf_i+0xa8>
 800ddae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ddb2:	2b15      	cmp	r3, #21
 800ddb4:	d8f6      	bhi.n	800dda4 <_printf_i+0x28>
 800ddb6:	a001      	add	r0, pc, #4	; (adr r0, 800ddbc <_printf_i+0x40>)
 800ddb8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ddbc:	0800de15 	.word	0x0800de15
 800ddc0:	0800de29 	.word	0x0800de29
 800ddc4:	0800dda5 	.word	0x0800dda5
 800ddc8:	0800dda5 	.word	0x0800dda5
 800ddcc:	0800dda5 	.word	0x0800dda5
 800ddd0:	0800dda5 	.word	0x0800dda5
 800ddd4:	0800de29 	.word	0x0800de29
 800ddd8:	0800dda5 	.word	0x0800dda5
 800dddc:	0800dda5 	.word	0x0800dda5
 800dde0:	0800dda5 	.word	0x0800dda5
 800dde4:	0800dda5 	.word	0x0800dda5
 800dde8:	0800df35 	.word	0x0800df35
 800ddec:	0800de59 	.word	0x0800de59
 800ddf0:	0800df17 	.word	0x0800df17
 800ddf4:	0800dda5 	.word	0x0800dda5
 800ddf8:	0800dda5 	.word	0x0800dda5
 800ddfc:	0800df57 	.word	0x0800df57
 800de00:	0800dda5 	.word	0x0800dda5
 800de04:	0800de59 	.word	0x0800de59
 800de08:	0800dda5 	.word	0x0800dda5
 800de0c:	0800dda5 	.word	0x0800dda5
 800de10:	0800df1f 	.word	0x0800df1f
 800de14:	680b      	ldr	r3, [r1, #0]
 800de16:	1d1a      	adds	r2, r3, #4
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	600a      	str	r2, [r1, #0]
 800de1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800de20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de24:	2301      	movs	r3, #1
 800de26:	e0a3      	b.n	800df70 <_printf_i+0x1f4>
 800de28:	6825      	ldr	r5, [r4, #0]
 800de2a:	6808      	ldr	r0, [r1, #0]
 800de2c:	062e      	lsls	r6, r5, #24
 800de2e:	f100 0304 	add.w	r3, r0, #4
 800de32:	d50a      	bpl.n	800de4a <_printf_i+0xce>
 800de34:	6805      	ldr	r5, [r0, #0]
 800de36:	600b      	str	r3, [r1, #0]
 800de38:	2d00      	cmp	r5, #0
 800de3a:	da03      	bge.n	800de44 <_printf_i+0xc8>
 800de3c:	232d      	movs	r3, #45	; 0x2d
 800de3e:	426d      	negs	r5, r5
 800de40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de44:	485e      	ldr	r0, [pc, #376]	; (800dfc0 <_printf_i+0x244>)
 800de46:	230a      	movs	r3, #10
 800de48:	e019      	b.n	800de7e <_printf_i+0x102>
 800de4a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800de4e:	6805      	ldr	r5, [r0, #0]
 800de50:	600b      	str	r3, [r1, #0]
 800de52:	bf18      	it	ne
 800de54:	b22d      	sxthne	r5, r5
 800de56:	e7ef      	b.n	800de38 <_printf_i+0xbc>
 800de58:	680b      	ldr	r3, [r1, #0]
 800de5a:	6825      	ldr	r5, [r4, #0]
 800de5c:	1d18      	adds	r0, r3, #4
 800de5e:	6008      	str	r0, [r1, #0]
 800de60:	0628      	lsls	r0, r5, #24
 800de62:	d501      	bpl.n	800de68 <_printf_i+0xec>
 800de64:	681d      	ldr	r5, [r3, #0]
 800de66:	e002      	b.n	800de6e <_printf_i+0xf2>
 800de68:	0669      	lsls	r1, r5, #25
 800de6a:	d5fb      	bpl.n	800de64 <_printf_i+0xe8>
 800de6c:	881d      	ldrh	r5, [r3, #0]
 800de6e:	4854      	ldr	r0, [pc, #336]	; (800dfc0 <_printf_i+0x244>)
 800de70:	2f6f      	cmp	r7, #111	; 0x6f
 800de72:	bf0c      	ite	eq
 800de74:	2308      	moveq	r3, #8
 800de76:	230a      	movne	r3, #10
 800de78:	2100      	movs	r1, #0
 800de7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800de7e:	6866      	ldr	r6, [r4, #4]
 800de80:	60a6      	str	r6, [r4, #8]
 800de82:	2e00      	cmp	r6, #0
 800de84:	bfa2      	ittt	ge
 800de86:	6821      	ldrge	r1, [r4, #0]
 800de88:	f021 0104 	bicge.w	r1, r1, #4
 800de8c:	6021      	strge	r1, [r4, #0]
 800de8e:	b90d      	cbnz	r5, 800de94 <_printf_i+0x118>
 800de90:	2e00      	cmp	r6, #0
 800de92:	d04d      	beq.n	800df30 <_printf_i+0x1b4>
 800de94:	4616      	mov	r6, r2
 800de96:	fbb5 f1f3 	udiv	r1, r5, r3
 800de9a:	fb03 5711 	mls	r7, r3, r1, r5
 800de9e:	5dc7      	ldrb	r7, [r0, r7]
 800dea0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dea4:	462f      	mov	r7, r5
 800dea6:	42bb      	cmp	r3, r7
 800dea8:	460d      	mov	r5, r1
 800deaa:	d9f4      	bls.n	800de96 <_printf_i+0x11a>
 800deac:	2b08      	cmp	r3, #8
 800deae:	d10b      	bne.n	800dec8 <_printf_i+0x14c>
 800deb0:	6823      	ldr	r3, [r4, #0]
 800deb2:	07df      	lsls	r7, r3, #31
 800deb4:	d508      	bpl.n	800dec8 <_printf_i+0x14c>
 800deb6:	6923      	ldr	r3, [r4, #16]
 800deb8:	6861      	ldr	r1, [r4, #4]
 800deba:	4299      	cmp	r1, r3
 800debc:	bfde      	ittt	le
 800debe:	2330      	movle	r3, #48	; 0x30
 800dec0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dec4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dec8:	1b92      	subs	r2, r2, r6
 800deca:	6122      	str	r2, [r4, #16]
 800decc:	f8cd a000 	str.w	sl, [sp]
 800ded0:	464b      	mov	r3, r9
 800ded2:	aa03      	add	r2, sp, #12
 800ded4:	4621      	mov	r1, r4
 800ded6:	4640      	mov	r0, r8
 800ded8:	f7ff fee2 	bl	800dca0 <_printf_common>
 800dedc:	3001      	adds	r0, #1
 800dede:	d14c      	bne.n	800df7a <_printf_i+0x1fe>
 800dee0:	f04f 30ff 	mov.w	r0, #4294967295
 800dee4:	b004      	add	sp, #16
 800dee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deea:	4835      	ldr	r0, [pc, #212]	; (800dfc0 <_printf_i+0x244>)
 800deec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800def0:	6823      	ldr	r3, [r4, #0]
 800def2:	680e      	ldr	r6, [r1, #0]
 800def4:	061f      	lsls	r7, r3, #24
 800def6:	f856 5b04 	ldr.w	r5, [r6], #4
 800defa:	600e      	str	r6, [r1, #0]
 800defc:	d514      	bpl.n	800df28 <_printf_i+0x1ac>
 800defe:	07d9      	lsls	r1, r3, #31
 800df00:	bf44      	itt	mi
 800df02:	f043 0320 	orrmi.w	r3, r3, #32
 800df06:	6023      	strmi	r3, [r4, #0]
 800df08:	b91d      	cbnz	r5, 800df12 <_printf_i+0x196>
 800df0a:	6823      	ldr	r3, [r4, #0]
 800df0c:	f023 0320 	bic.w	r3, r3, #32
 800df10:	6023      	str	r3, [r4, #0]
 800df12:	2310      	movs	r3, #16
 800df14:	e7b0      	b.n	800de78 <_printf_i+0xfc>
 800df16:	6823      	ldr	r3, [r4, #0]
 800df18:	f043 0320 	orr.w	r3, r3, #32
 800df1c:	6023      	str	r3, [r4, #0]
 800df1e:	2378      	movs	r3, #120	; 0x78
 800df20:	4828      	ldr	r0, [pc, #160]	; (800dfc4 <_printf_i+0x248>)
 800df22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800df26:	e7e3      	b.n	800def0 <_printf_i+0x174>
 800df28:	065e      	lsls	r6, r3, #25
 800df2a:	bf48      	it	mi
 800df2c:	b2ad      	uxthmi	r5, r5
 800df2e:	e7e6      	b.n	800defe <_printf_i+0x182>
 800df30:	4616      	mov	r6, r2
 800df32:	e7bb      	b.n	800deac <_printf_i+0x130>
 800df34:	680b      	ldr	r3, [r1, #0]
 800df36:	6826      	ldr	r6, [r4, #0]
 800df38:	6960      	ldr	r0, [r4, #20]
 800df3a:	1d1d      	adds	r5, r3, #4
 800df3c:	600d      	str	r5, [r1, #0]
 800df3e:	0635      	lsls	r5, r6, #24
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	d501      	bpl.n	800df48 <_printf_i+0x1cc>
 800df44:	6018      	str	r0, [r3, #0]
 800df46:	e002      	b.n	800df4e <_printf_i+0x1d2>
 800df48:	0671      	lsls	r1, r6, #25
 800df4a:	d5fb      	bpl.n	800df44 <_printf_i+0x1c8>
 800df4c:	8018      	strh	r0, [r3, #0]
 800df4e:	2300      	movs	r3, #0
 800df50:	6123      	str	r3, [r4, #16]
 800df52:	4616      	mov	r6, r2
 800df54:	e7ba      	b.n	800decc <_printf_i+0x150>
 800df56:	680b      	ldr	r3, [r1, #0]
 800df58:	1d1a      	adds	r2, r3, #4
 800df5a:	600a      	str	r2, [r1, #0]
 800df5c:	681e      	ldr	r6, [r3, #0]
 800df5e:	6862      	ldr	r2, [r4, #4]
 800df60:	2100      	movs	r1, #0
 800df62:	4630      	mov	r0, r6
 800df64:	f7f2 f964 	bl	8000230 <memchr>
 800df68:	b108      	cbz	r0, 800df6e <_printf_i+0x1f2>
 800df6a:	1b80      	subs	r0, r0, r6
 800df6c:	6060      	str	r0, [r4, #4]
 800df6e:	6863      	ldr	r3, [r4, #4]
 800df70:	6123      	str	r3, [r4, #16]
 800df72:	2300      	movs	r3, #0
 800df74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df78:	e7a8      	b.n	800decc <_printf_i+0x150>
 800df7a:	6923      	ldr	r3, [r4, #16]
 800df7c:	4632      	mov	r2, r6
 800df7e:	4649      	mov	r1, r9
 800df80:	4640      	mov	r0, r8
 800df82:	47d0      	blx	sl
 800df84:	3001      	adds	r0, #1
 800df86:	d0ab      	beq.n	800dee0 <_printf_i+0x164>
 800df88:	6823      	ldr	r3, [r4, #0]
 800df8a:	079b      	lsls	r3, r3, #30
 800df8c:	d413      	bmi.n	800dfb6 <_printf_i+0x23a>
 800df8e:	68e0      	ldr	r0, [r4, #12]
 800df90:	9b03      	ldr	r3, [sp, #12]
 800df92:	4298      	cmp	r0, r3
 800df94:	bfb8      	it	lt
 800df96:	4618      	movlt	r0, r3
 800df98:	e7a4      	b.n	800dee4 <_printf_i+0x168>
 800df9a:	2301      	movs	r3, #1
 800df9c:	4632      	mov	r2, r6
 800df9e:	4649      	mov	r1, r9
 800dfa0:	4640      	mov	r0, r8
 800dfa2:	47d0      	blx	sl
 800dfa4:	3001      	adds	r0, #1
 800dfa6:	d09b      	beq.n	800dee0 <_printf_i+0x164>
 800dfa8:	3501      	adds	r5, #1
 800dfaa:	68e3      	ldr	r3, [r4, #12]
 800dfac:	9903      	ldr	r1, [sp, #12]
 800dfae:	1a5b      	subs	r3, r3, r1
 800dfb0:	42ab      	cmp	r3, r5
 800dfb2:	dcf2      	bgt.n	800df9a <_printf_i+0x21e>
 800dfb4:	e7eb      	b.n	800df8e <_printf_i+0x212>
 800dfb6:	2500      	movs	r5, #0
 800dfb8:	f104 0619 	add.w	r6, r4, #25
 800dfbc:	e7f5      	b.n	800dfaa <_printf_i+0x22e>
 800dfbe:	bf00      	nop
 800dfc0:	08012f26 	.word	0x08012f26
 800dfc4:	08012f37 	.word	0x08012f37

0800dfc8 <iprintf>:
 800dfc8:	b40f      	push	{r0, r1, r2, r3}
 800dfca:	4b0a      	ldr	r3, [pc, #40]	; (800dff4 <iprintf+0x2c>)
 800dfcc:	b513      	push	{r0, r1, r4, lr}
 800dfce:	681c      	ldr	r4, [r3, #0]
 800dfd0:	b124      	cbz	r4, 800dfdc <iprintf+0x14>
 800dfd2:	69a3      	ldr	r3, [r4, #24]
 800dfd4:	b913      	cbnz	r3, 800dfdc <iprintf+0x14>
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	f001 ff98 	bl	800ff0c <__sinit>
 800dfdc:	ab05      	add	r3, sp, #20
 800dfde:	9a04      	ldr	r2, [sp, #16]
 800dfe0:	68a1      	ldr	r1, [r4, #8]
 800dfe2:	9301      	str	r3, [sp, #4]
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	f003 f9c1 	bl	801136c <_vfiprintf_r>
 800dfea:	b002      	add	sp, #8
 800dfec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dff0:	b004      	add	sp, #16
 800dff2:	4770      	bx	lr
 800dff4:	2000002c 	.word	0x2000002c

0800dff8 <_puts_r>:
 800dff8:	b570      	push	{r4, r5, r6, lr}
 800dffa:	460e      	mov	r6, r1
 800dffc:	4605      	mov	r5, r0
 800dffe:	b118      	cbz	r0, 800e008 <_puts_r+0x10>
 800e000:	6983      	ldr	r3, [r0, #24]
 800e002:	b90b      	cbnz	r3, 800e008 <_puts_r+0x10>
 800e004:	f001 ff82 	bl	800ff0c <__sinit>
 800e008:	69ab      	ldr	r3, [r5, #24]
 800e00a:	68ac      	ldr	r4, [r5, #8]
 800e00c:	b913      	cbnz	r3, 800e014 <_puts_r+0x1c>
 800e00e:	4628      	mov	r0, r5
 800e010:	f001 ff7c 	bl	800ff0c <__sinit>
 800e014:	4b2c      	ldr	r3, [pc, #176]	; (800e0c8 <_puts_r+0xd0>)
 800e016:	429c      	cmp	r4, r3
 800e018:	d120      	bne.n	800e05c <_puts_r+0x64>
 800e01a:	686c      	ldr	r4, [r5, #4]
 800e01c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e01e:	07db      	lsls	r3, r3, #31
 800e020:	d405      	bmi.n	800e02e <_puts_r+0x36>
 800e022:	89a3      	ldrh	r3, [r4, #12]
 800e024:	0598      	lsls	r0, r3, #22
 800e026:	d402      	bmi.n	800e02e <_puts_r+0x36>
 800e028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e02a:	f002 fb80 	bl	801072e <__retarget_lock_acquire_recursive>
 800e02e:	89a3      	ldrh	r3, [r4, #12]
 800e030:	0719      	lsls	r1, r3, #28
 800e032:	d51d      	bpl.n	800e070 <_puts_r+0x78>
 800e034:	6923      	ldr	r3, [r4, #16]
 800e036:	b1db      	cbz	r3, 800e070 <_puts_r+0x78>
 800e038:	3e01      	subs	r6, #1
 800e03a:	68a3      	ldr	r3, [r4, #8]
 800e03c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e040:	3b01      	subs	r3, #1
 800e042:	60a3      	str	r3, [r4, #8]
 800e044:	bb39      	cbnz	r1, 800e096 <_puts_r+0x9e>
 800e046:	2b00      	cmp	r3, #0
 800e048:	da38      	bge.n	800e0bc <_puts_r+0xc4>
 800e04a:	4622      	mov	r2, r4
 800e04c:	210a      	movs	r1, #10
 800e04e:	4628      	mov	r0, r5
 800e050:	f000 ff0a 	bl	800ee68 <__swbuf_r>
 800e054:	3001      	adds	r0, #1
 800e056:	d011      	beq.n	800e07c <_puts_r+0x84>
 800e058:	250a      	movs	r5, #10
 800e05a:	e011      	b.n	800e080 <_puts_r+0x88>
 800e05c:	4b1b      	ldr	r3, [pc, #108]	; (800e0cc <_puts_r+0xd4>)
 800e05e:	429c      	cmp	r4, r3
 800e060:	d101      	bne.n	800e066 <_puts_r+0x6e>
 800e062:	68ac      	ldr	r4, [r5, #8]
 800e064:	e7da      	b.n	800e01c <_puts_r+0x24>
 800e066:	4b1a      	ldr	r3, [pc, #104]	; (800e0d0 <_puts_r+0xd8>)
 800e068:	429c      	cmp	r4, r3
 800e06a:	bf08      	it	eq
 800e06c:	68ec      	ldreq	r4, [r5, #12]
 800e06e:	e7d5      	b.n	800e01c <_puts_r+0x24>
 800e070:	4621      	mov	r1, r4
 800e072:	4628      	mov	r0, r5
 800e074:	f000 ff4a 	bl	800ef0c <__swsetup_r>
 800e078:	2800      	cmp	r0, #0
 800e07a:	d0dd      	beq.n	800e038 <_puts_r+0x40>
 800e07c:	f04f 35ff 	mov.w	r5, #4294967295
 800e080:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e082:	07da      	lsls	r2, r3, #31
 800e084:	d405      	bmi.n	800e092 <_puts_r+0x9a>
 800e086:	89a3      	ldrh	r3, [r4, #12]
 800e088:	059b      	lsls	r3, r3, #22
 800e08a:	d402      	bmi.n	800e092 <_puts_r+0x9a>
 800e08c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e08e:	f002 fb4f 	bl	8010730 <__retarget_lock_release_recursive>
 800e092:	4628      	mov	r0, r5
 800e094:	bd70      	pop	{r4, r5, r6, pc}
 800e096:	2b00      	cmp	r3, #0
 800e098:	da04      	bge.n	800e0a4 <_puts_r+0xac>
 800e09a:	69a2      	ldr	r2, [r4, #24]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	dc06      	bgt.n	800e0ae <_puts_r+0xb6>
 800e0a0:	290a      	cmp	r1, #10
 800e0a2:	d004      	beq.n	800e0ae <_puts_r+0xb6>
 800e0a4:	6823      	ldr	r3, [r4, #0]
 800e0a6:	1c5a      	adds	r2, r3, #1
 800e0a8:	6022      	str	r2, [r4, #0]
 800e0aa:	7019      	strb	r1, [r3, #0]
 800e0ac:	e7c5      	b.n	800e03a <_puts_r+0x42>
 800e0ae:	4622      	mov	r2, r4
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	f000 fed9 	bl	800ee68 <__swbuf_r>
 800e0b6:	3001      	adds	r0, #1
 800e0b8:	d1bf      	bne.n	800e03a <_puts_r+0x42>
 800e0ba:	e7df      	b.n	800e07c <_puts_r+0x84>
 800e0bc:	6823      	ldr	r3, [r4, #0]
 800e0be:	250a      	movs	r5, #10
 800e0c0:	1c5a      	adds	r2, r3, #1
 800e0c2:	6022      	str	r2, [r4, #0]
 800e0c4:	701d      	strb	r5, [r3, #0]
 800e0c6:	e7db      	b.n	800e080 <_puts_r+0x88>
 800e0c8:	08013150 	.word	0x08013150
 800e0cc:	08013170 	.word	0x08013170
 800e0d0:	08013130 	.word	0x08013130

0800e0d4 <puts>:
 800e0d4:	4b02      	ldr	r3, [pc, #8]	; (800e0e0 <puts+0xc>)
 800e0d6:	4601      	mov	r1, r0
 800e0d8:	6818      	ldr	r0, [r3, #0]
 800e0da:	f7ff bf8d 	b.w	800dff8 <_puts_r>
 800e0de:	bf00      	nop
 800e0e0:	2000002c 	.word	0x2000002c

0800e0e4 <sulp>:
 800e0e4:	b570      	push	{r4, r5, r6, lr}
 800e0e6:	4604      	mov	r4, r0
 800e0e8:	460d      	mov	r5, r1
 800e0ea:	ec45 4b10 	vmov	d0, r4, r5
 800e0ee:	4616      	mov	r6, r2
 800e0f0:	f002 ff0a 	bl	8010f08 <__ulp>
 800e0f4:	ec51 0b10 	vmov	r0, r1, d0
 800e0f8:	b17e      	cbz	r6, 800e11a <sulp+0x36>
 800e0fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e0fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e102:	2b00      	cmp	r3, #0
 800e104:	dd09      	ble.n	800e11a <sulp+0x36>
 800e106:	051b      	lsls	r3, r3, #20
 800e108:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e10c:	2400      	movs	r4, #0
 800e10e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e112:	4622      	mov	r2, r4
 800e114:	462b      	mov	r3, r5
 800e116:	f7f2 fa97 	bl	8000648 <__aeabi_dmul>
 800e11a:	bd70      	pop	{r4, r5, r6, pc}
 800e11c:	0000      	movs	r0, r0
	...

0800e120 <_strtod_l>:
 800e120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e124:	b0a3      	sub	sp, #140	; 0x8c
 800e126:	461f      	mov	r7, r3
 800e128:	2300      	movs	r3, #0
 800e12a:	931e      	str	r3, [sp, #120]	; 0x78
 800e12c:	4ba4      	ldr	r3, [pc, #656]	; (800e3c0 <_strtod_l+0x2a0>)
 800e12e:	9219      	str	r2, [sp, #100]	; 0x64
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	9307      	str	r3, [sp, #28]
 800e134:	4604      	mov	r4, r0
 800e136:	4618      	mov	r0, r3
 800e138:	4688      	mov	r8, r1
 800e13a:	f7f2 f871 	bl	8000220 <strlen>
 800e13e:	f04f 0a00 	mov.w	sl, #0
 800e142:	4605      	mov	r5, r0
 800e144:	f04f 0b00 	mov.w	fp, #0
 800e148:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e14c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e14e:	781a      	ldrb	r2, [r3, #0]
 800e150:	2a2b      	cmp	r2, #43	; 0x2b
 800e152:	d04c      	beq.n	800e1ee <_strtod_l+0xce>
 800e154:	d839      	bhi.n	800e1ca <_strtod_l+0xaa>
 800e156:	2a0d      	cmp	r2, #13
 800e158:	d832      	bhi.n	800e1c0 <_strtod_l+0xa0>
 800e15a:	2a08      	cmp	r2, #8
 800e15c:	d832      	bhi.n	800e1c4 <_strtod_l+0xa4>
 800e15e:	2a00      	cmp	r2, #0
 800e160:	d03c      	beq.n	800e1dc <_strtod_l+0xbc>
 800e162:	2300      	movs	r3, #0
 800e164:	930e      	str	r3, [sp, #56]	; 0x38
 800e166:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e168:	7833      	ldrb	r3, [r6, #0]
 800e16a:	2b30      	cmp	r3, #48	; 0x30
 800e16c:	f040 80b4 	bne.w	800e2d8 <_strtod_l+0x1b8>
 800e170:	7873      	ldrb	r3, [r6, #1]
 800e172:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e176:	2b58      	cmp	r3, #88	; 0x58
 800e178:	d16c      	bne.n	800e254 <_strtod_l+0x134>
 800e17a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e17c:	9301      	str	r3, [sp, #4]
 800e17e:	ab1e      	add	r3, sp, #120	; 0x78
 800e180:	9702      	str	r7, [sp, #8]
 800e182:	9300      	str	r3, [sp, #0]
 800e184:	4a8f      	ldr	r2, [pc, #572]	; (800e3c4 <_strtod_l+0x2a4>)
 800e186:	ab1f      	add	r3, sp, #124	; 0x7c
 800e188:	a91d      	add	r1, sp, #116	; 0x74
 800e18a:	4620      	mov	r0, r4
 800e18c:	f001 ffc2 	bl	8010114 <__gethex>
 800e190:	f010 0707 	ands.w	r7, r0, #7
 800e194:	4605      	mov	r5, r0
 800e196:	d005      	beq.n	800e1a4 <_strtod_l+0x84>
 800e198:	2f06      	cmp	r7, #6
 800e19a:	d12a      	bne.n	800e1f2 <_strtod_l+0xd2>
 800e19c:	3601      	adds	r6, #1
 800e19e:	2300      	movs	r3, #0
 800e1a0:	961d      	str	r6, [sp, #116]	; 0x74
 800e1a2:	930e      	str	r3, [sp, #56]	; 0x38
 800e1a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	f040 8596 	bne.w	800ecd8 <_strtod_l+0xbb8>
 800e1ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e1ae:	b1db      	cbz	r3, 800e1e8 <_strtod_l+0xc8>
 800e1b0:	4652      	mov	r2, sl
 800e1b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e1b6:	ec43 2b10 	vmov	d0, r2, r3
 800e1ba:	b023      	add	sp, #140	; 0x8c
 800e1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1c0:	2a20      	cmp	r2, #32
 800e1c2:	d1ce      	bne.n	800e162 <_strtod_l+0x42>
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	931d      	str	r3, [sp, #116]	; 0x74
 800e1c8:	e7c0      	b.n	800e14c <_strtod_l+0x2c>
 800e1ca:	2a2d      	cmp	r2, #45	; 0x2d
 800e1cc:	d1c9      	bne.n	800e162 <_strtod_l+0x42>
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	920e      	str	r2, [sp, #56]	; 0x38
 800e1d2:	1c5a      	adds	r2, r3, #1
 800e1d4:	921d      	str	r2, [sp, #116]	; 0x74
 800e1d6:	785b      	ldrb	r3, [r3, #1]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d1c4      	bne.n	800e166 <_strtod_l+0x46>
 800e1dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e1de:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	f040 8576 	bne.w	800ecd4 <_strtod_l+0xbb4>
 800e1e8:	4652      	mov	r2, sl
 800e1ea:	465b      	mov	r3, fp
 800e1ec:	e7e3      	b.n	800e1b6 <_strtod_l+0x96>
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	e7ee      	b.n	800e1d0 <_strtod_l+0xb0>
 800e1f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e1f4:	b13a      	cbz	r2, 800e206 <_strtod_l+0xe6>
 800e1f6:	2135      	movs	r1, #53	; 0x35
 800e1f8:	a820      	add	r0, sp, #128	; 0x80
 800e1fa:	f002 ff90 	bl	801111e <__copybits>
 800e1fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e200:	4620      	mov	r0, r4
 800e202:	f002 fb55 	bl	80108b0 <_Bfree>
 800e206:	3f01      	subs	r7, #1
 800e208:	2f05      	cmp	r7, #5
 800e20a:	d807      	bhi.n	800e21c <_strtod_l+0xfc>
 800e20c:	e8df f007 	tbb	[pc, r7]
 800e210:	1d180b0e 	.word	0x1d180b0e
 800e214:	030e      	.short	0x030e
 800e216:	f04f 0b00 	mov.w	fp, #0
 800e21a:	46da      	mov	sl, fp
 800e21c:	0728      	lsls	r0, r5, #28
 800e21e:	d5c1      	bpl.n	800e1a4 <_strtod_l+0x84>
 800e220:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e224:	e7be      	b.n	800e1a4 <_strtod_l+0x84>
 800e226:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800e22a:	e7f7      	b.n	800e21c <_strtod_l+0xfc>
 800e22c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800e230:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e232:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e236:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e23a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e23e:	e7ed      	b.n	800e21c <_strtod_l+0xfc>
 800e240:	f8df b184 	ldr.w	fp, [pc, #388]	; 800e3c8 <_strtod_l+0x2a8>
 800e244:	f04f 0a00 	mov.w	sl, #0
 800e248:	e7e8      	b.n	800e21c <_strtod_l+0xfc>
 800e24a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e24e:	f04f 3aff 	mov.w	sl, #4294967295
 800e252:	e7e3      	b.n	800e21c <_strtod_l+0xfc>
 800e254:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e256:	1c5a      	adds	r2, r3, #1
 800e258:	921d      	str	r2, [sp, #116]	; 0x74
 800e25a:	785b      	ldrb	r3, [r3, #1]
 800e25c:	2b30      	cmp	r3, #48	; 0x30
 800e25e:	d0f9      	beq.n	800e254 <_strtod_l+0x134>
 800e260:	2b00      	cmp	r3, #0
 800e262:	d09f      	beq.n	800e1a4 <_strtod_l+0x84>
 800e264:	2301      	movs	r3, #1
 800e266:	f04f 0900 	mov.w	r9, #0
 800e26a:	9304      	str	r3, [sp, #16]
 800e26c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e26e:	930a      	str	r3, [sp, #40]	; 0x28
 800e270:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e274:	464f      	mov	r7, r9
 800e276:	220a      	movs	r2, #10
 800e278:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e27a:	7806      	ldrb	r6, [r0, #0]
 800e27c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e280:	b2d9      	uxtb	r1, r3
 800e282:	2909      	cmp	r1, #9
 800e284:	d92a      	bls.n	800e2dc <_strtod_l+0x1bc>
 800e286:	9907      	ldr	r1, [sp, #28]
 800e288:	462a      	mov	r2, r5
 800e28a:	f003 f9fc 	bl	8011686 <strncmp>
 800e28e:	b398      	cbz	r0, 800e2f8 <_strtod_l+0x1d8>
 800e290:	2000      	movs	r0, #0
 800e292:	4633      	mov	r3, r6
 800e294:	463d      	mov	r5, r7
 800e296:	9007      	str	r0, [sp, #28]
 800e298:	4602      	mov	r2, r0
 800e29a:	2b65      	cmp	r3, #101	; 0x65
 800e29c:	d001      	beq.n	800e2a2 <_strtod_l+0x182>
 800e29e:	2b45      	cmp	r3, #69	; 0x45
 800e2a0:	d118      	bne.n	800e2d4 <_strtod_l+0x1b4>
 800e2a2:	b91d      	cbnz	r5, 800e2ac <_strtod_l+0x18c>
 800e2a4:	9b04      	ldr	r3, [sp, #16]
 800e2a6:	4303      	orrs	r3, r0
 800e2a8:	d098      	beq.n	800e1dc <_strtod_l+0xbc>
 800e2aa:	2500      	movs	r5, #0
 800e2ac:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e2b0:	f108 0301 	add.w	r3, r8, #1
 800e2b4:	931d      	str	r3, [sp, #116]	; 0x74
 800e2b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e2ba:	2b2b      	cmp	r3, #43	; 0x2b
 800e2bc:	d075      	beq.n	800e3aa <_strtod_l+0x28a>
 800e2be:	2b2d      	cmp	r3, #45	; 0x2d
 800e2c0:	d07b      	beq.n	800e3ba <_strtod_l+0x29a>
 800e2c2:	f04f 0c00 	mov.w	ip, #0
 800e2c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e2ca:	2909      	cmp	r1, #9
 800e2cc:	f240 8082 	bls.w	800e3d4 <_strtod_l+0x2b4>
 800e2d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e2d4:	2600      	movs	r6, #0
 800e2d6:	e09d      	b.n	800e414 <_strtod_l+0x2f4>
 800e2d8:	2300      	movs	r3, #0
 800e2da:	e7c4      	b.n	800e266 <_strtod_l+0x146>
 800e2dc:	2f08      	cmp	r7, #8
 800e2de:	bfd8      	it	le
 800e2e0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e2e2:	f100 0001 	add.w	r0, r0, #1
 800e2e6:	bfda      	itte	le
 800e2e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800e2ec:	9309      	strle	r3, [sp, #36]	; 0x24
 800e2ee:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e2f2:	3701      	adds	r7, #1
 800e2f4:	901d      	str	r0, [sp, #116]	; 0x74
 800e2f6:	e7bf      	b.n	800e278 <_strtod_l+0x158>
 800e2f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e2fa:	195a      	adds	r2, r3, r5
 800e2fc:	921d      	str	r2, [sp, #116]	; 0x74
 800e2fe:	5d5b      	ldrb	r3, [r3, r5]
 800e300:	2f00      	cmp	r7, #0
 800e302:	d037      	beq.n	800e374 <_strtod_l+0x254>
 800e304:	9007      	str	r0, [sp, #28]
 800e306:	463d      	mov	r5, r7
 800e308:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800e30c:	2a09      	cmp	r2, #9
 800e30e:	d912      	bls.n	800e336 <_strtod_l+0x216>
 800e310:	2201      	movs	r2, #1
 800e312:	e7c2      	b.n	800e29a <_strtod_l+0x17a>
 800e314:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e316:	1c5a      	adds	r2, r3, #1
 800e318:	921d      	str	r2, [sp, #116]	; 0x74
 800e31a:	785b      	ldrb	r3, [r3, #1]
 800e31c:	3001      	adds	r0, #1
 800e31e:	2b30      	cmp	r3, #48	; 0x30
 800e320:	d0f8      	beq.n	800e314 <_strtod_l+0x1f4>
 800e322:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e326:	2a08      	cmp	r2, #8
 800e328:	f200 84db 	bhi.w	800ece2 <_strtod_l+0xbc2>
 800e32c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e32e:	9007      	str	r0, [sp, #28]
 800e330:	2000      	movs	r0, #0
 800e332:	920a      	str	r2, [sp, #40]	; 0x28
 800e334:	4605      	mov	r5, r0
 800e336:	3b30      	subs	r3, #48	; 0x30
 800e338:	f100 0201 	add.w	r2, r0, #1
 800e33c:	d014      	beq.n	800e368 <_strtod_l+0x248>
 800e33e:	9907      	ldr	r1, [sp, #28]
 800e340:	4411      	add	r1, r2
 800e342:	9107      	str	r1, [sp, #28]
 800e344:	462a      	mov	r2, r5
 800e346:	eb00 0e05 	add.w	lr, r0, r5
 800e34a:	210a      	movs	r1, #10
 800e34c:	4572      	cmp	r2, lr
 800e34e:	d113      	bne.n	800e378 <_strtod_l+0x258>
 800e350:	182a      	adds	r2, r5, r0
 800e352:	2a08      	cmp	r2, #8
 800e354:	f105 0501 	add.w	r5, r5, #1
 800e358:	4405      	add	r5, r0
 800e35a:	dc1c      	bgt.n	800e396 <_strtod_l+0x276>
 800e35c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e35e:	220a      	movs	r2, #10
 800e360:	fb02 3301 	mla	r3, r2, r1, r3
 800e364:	9309      	str	r3, [sp, #36]	; 0x24
 800e366:	2200      	movs	r2, #0
 800e368:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e36a:	1c59      	adds	r1, r3, #1
 800e36c:	911d      	str	r1, [sp, #116]	; 0x74
 800e36e:	785b      	ldrb	r3, [r3, #1]
 800e370:	4610      	mov	r0, r2
 800e372:	e7c9      	b.n	800e308 <_strtod_l+0x1e8>
 800e374:	4638      	mov	r0, r7
 800e376:	e7d2      	b.n	800e31e <_strtod_l+0x1fe>
 800e378:	2a08      	cmp	r2, #8
 800e37a:	dc04      	bgt.n	800e386 <_strtod_l+0x266>
 800e37c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e37e:	434e      	muls	r6, r1
 800e380:	9609      	str	r6, [sp, #36]	; 0x24
 800e382:	3201      	adds	r2, #1
 800e384:	e7e2      	b.n	800e34c <_strtod_l+0x22c>
 800e386:	f102 0c01 	add.w	ip, r2, #1
 800e38a:	f1bc 0f10 	cmp.w	ip, #16
 800e38e:	bfd8      	it	le
 800e390:	fb01 f909 	mulle.w	r9, r1, r9
 800e394:	e7f5      	b.n	800e382 <_strtod_l+0x262>
 800e396:	2d10      	cmp	r5, #16
 800e398:	bfdc      	itt	le
 800e39a:	220a      	movle	r2, #10
 800e39c:	fb02 3909 	mlale	r9, r2, r9, r3
 800e3a0:	e7e1      	b.n	800e366 <_strtod_l+0x246>
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	9307      	str	r3, [sp, #28]
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	e77c      	b.n	800e2a4 <_strtod_l+0x184>
 800e3aa:	f04f 0c00 	mov.w	ip, #0
 800e3ae:	f108 0302 	add.w	r3, r8, #2
 800e3b2:	931d      	str	r3, [sp, #116]	; 0x74
 800e3b4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e3b8:	e785      	b.n	800e2c6 <_strtod_l+0x1a6>
 800e3ba:	f04f 0c01 	mov.w	ip, #1
 800e3be:	e7f6      	b.n	800e3ae <_strtod_l+0x28e>
 800e3c0:	080131fc 	.word	0x080131fc
 800e3c4:	08012f48 	.word	0x08012f48
 800e3c8:	7ff00000 	.word	0x7ff00000
 800e3cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e3ce:	1c59      	adds	r1, r3, #1
 800e3d0:	911d      	str	r1, [sp, #116]	; 0x74
 800e3d2:	785b      	ldrb	r3, [r3, #1]
 800e3d4:	2b30      	cmp	r3, #48	; 0x30
 800e3d6:	d0f9      	beq.n	800e3cc <_strtod_l+0x2ac>
 800e3d8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800e3dc:	2908      	cmp	r1, #8
 800e3de:	f63f af79 	bhi.w	800e2d4 <_strtod_l+0x1b4>
 800e3e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e3e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e3e8:	9308      	str	r3, [sp, #32]
 800e3ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e3ec:	1c59      	adds	r1, r3, #1
 800e3ee:	911d      	str	r1, [sp, #116]	; 0x74
 800e3f0:	785b      	ldrb	r3, [r3, #1]
 800e3f2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800e3f6:	2e09      	cmp	r6, #9
 800e3f8:	d937      	bls.n	800e46a <_strtod_l+0x34a>
 800e3fa:	9e08      	ldr	r6, [sp, #32]
 800e3fc:	1b89      	subs	r1, r1, r6
 800e3fe:	2908      	cmp	r1, #8
 800e400:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e404:	dc02      	bgt.n	800e40c <_strtod_l+0x2ec>
 800e406:	4576      	cmp	r6, lr
 800e408:	bfa8      	it	ge
 800e40a:	4676      	movge	r6, lr
 800e40c:	f1bc 0f00 	cmp.w	ip, #0
 800e410:	d000      	beq.n	800e414 <_strtod_l+0x2f4>
 800e412:	4276      	negs	r6, r6
 800e414:	2d00      	cmp	r5, #0
 800e416:	d14f      	bne.n	800e4b8 <_strtod_l+0x398>
 800e418:	9904      	ldr	r1, [sp, #16]
 800e41a:	4301      	orrs	r1, r0
 800e41c:	f47f aec2 	bne.w	800e1a4 <_strtod_l+0x84>
 800e420:	2a00      	cmp	r2, #0
 800e422:	f47f aedb 	bne.w	800e1dc <_strtod_l+0xbc>
 800e426:	2b69      	cmp	r3, #105	; 0x69
 800e428:	d027      	beq.n	800e47a <_strtod_l+0x35a>
 800e42a:	dc24      	bgt.n	800e476 <_strtod_l+0x356>
 800e42c:	2b49      	cmp	r3, #73	; 0x49
 800e42e:	d024      	beq.n	800e47a <_strtod_l+0x35a>
 800e430:	2b4e      	cmp	r3, #78	; 0x4e
 800e432:	f47f aed3 	bne.w	800e1dc <_strtod_l+0xbc>
 800e436:	499e      	ldr	r1, [pc, #632]	; (800e6b0 <_strtod_l+0x590>)
 800e438:	a81d      	add	r0, sp, #116	; 0x74
 800e43a:	f002 f8c3 	bl	80105c4 <__match>
 800e43e:	2800      	cmp	r0, #0
 800e440:	f43f aecc 	beq.w	800e1dc <_strtod_l+0xbc>
 800e444:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	2b28      	cmp	r3, #40	; 0x28
 800e44a:	d12d      	bne.n	800e4a8 <_strtod_l+0x388>
 800e44c:	4999      	ldr	r1, [pc, #612]	; (800e6b4 <_strtod_l+0x594>)
 800e44e:	aa20      	add	r2, sp, #128	; 0x80
 800e450:	a81d      	add	r0, sp, #116	; 0x74
 800e452:	f002 f8cb 	bl	80105ec <__hexnan>
 800e456:	2805      	cmp	r0, #5
 800e458:	d126      	bne.n	800e4a8 <_strtod_l+0x388>
 800e45a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e45c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800e460:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e464:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e468:	e69c      	b.n	800e1a4 <_strtod_l+0x84>
 800e46a:	210a      	movs	r1, #10
 800e46c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e470:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e474:	e7b9      	b.n	800e3ea <_strtod_l+0x2ca>
 800e476:	2b6e      	cmp	r3, #110	; 0x6e
 800e478:	e7db      	b.n	800e432 <_strtod_l+0x312>
 800e47a:	498f      	ldr	r1, [pc, #572]	; (800e6b8 <_strtod_l+0x598>)
 800e47c:	a81d      	add	r0, sp, #116	; 0x74
 800e47e:	f002 f8a1 	bl	80105c4 <__match>
 800e482:	2800      	cmp	r0, #0
 800e484:	f43f aeaa 	beq.w	800e1dc <_strtod_l+0xbc>
 800e488:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e48a:	498c      	ldr	r1, [pc, #560]	; (800e6bc <_strtod_l+0x59c>)
 800e48c:	3b01      	subs	r3, #1
 800e48e:	a81d      	add	r0, sp, #116	; 0x74
 800e490:	931d      	str	r3, [sp, #116]	; 0x74
 800e492:	f002 f897 	bl	80105c4 <__match>
 800e496:	b910      	cbnz	r0, 800e49e <_strtod_l+0x37e>
 800e498:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e49a:	3301      	adds	r3, #1
 800e49c:	931d      	str	r3, [sp, #116]	; 0x74
 800e49e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800e6cc <_strtod_l+0x5ac>
 800e4a2:	f04f 0a00 	mov.w	sl, #0
 800e4a6:	e67d      	b.n	800e1a4 <_strtod_l+0x84>
 800e4a8:	4885      	ldr	r0, [pc, #532]	; (800e6c0 <_strtod_l+0x5a0>)
 800e4aa:	f003 f891 	bl	80115d0 <nan>
 800e4ae:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e4b2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e4b6:	e675      	b.n	800e1a4 <_strtod_l+0x84>
 800e4b8:	9b07      	ldr	r3, [sp, #28]
 800e4ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4bc:	1af3      	subs	r3, r6, r3
 800e4be:	2f00      	cmp	r7, #0
 800e4c0:	bf08      	it	eq
 800e4c2:	462f      	moveq	r7, r5
 800e4c4:	2d10      	cmp	r5, #16
 800e4c6:	9308      	str	r3, [sp, #32]
 800e4c8:	46a8      	mov	r8, r5
 800e4ca:	bfa8      	it	ge
 800e4cc:	f04f 0810 	movge.w	r8, #16
 800e4d0:	f7f2 f840 	bl	8000554 <__aeabi_ui2d>
 800e4d4:	2d09      	cmp	r5, #9
 800e4d6:	4682      	mov	sl, r0
 800e4d8:	468b      	mov	fp, r1
 800e4da:	dd13      	ble.n	800e504 <_strtod_l+0x3e4>
 800e4dc:	4b79      	ldr	r3, [pc, #484]	; (800e6c4 <_strtod_l+0x5a4>)
 800e4de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e4e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e4e6:	f7f2 f8af 	bl	8000648 <__aeabi_dmul>
 800e4ea:	4682      	mov	sl, r0
 800e4ec:	4648      	mov	r0, r9
 800e4ee:	468b      	mov	fp, r1
 800e4f0:	f7f2 f830 	bl	8000554 <__aeabi_ui2d>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	460b      	mov	r3, r1
 800e4f8:	4650      	mov	r0, sl
 800e4fa:	4659      	mov	r1, fp
 800e4fc:	f7f1 feee 	bl	80002dc <__adddf3>
 800e500:	4682      	mov	sl, r0
 800e502:	468b      	mov	fp, r1
 800e504:	2d0f      	cmp	r5, #15
 800e506:	dc38      	bgt.n	800e57a <_strtod_l+0x45a>
 800e508:	9b08      	ldr	r3, [sp, #32]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	f43f ae4a 	beq.w	800e1a4 <_strtod_l+0x84>
 800e510:	dd24      	ble.n	800e55c <_strtod_l+0x43c>
 800e512:	2b16      	cmp	r3, #22
 800e514:	dc0b      	bgt.n	800e52e <_strtod_l+0x40e>
 800e516:	4d6b      	ldr	r5, [pc, #428]	; (800e6c4 <_strtod_l+0x5a4>)
 800e518:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e51c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e520:	4652      	mov	r2, sl
 800e522:	465b      	mov	r3, fp
 800e524:	f7f2 f890 	bl	8000648 <__aeabi_dmul>
 800e528:	4682      	mov	sl, r0
 800e52a:	468b      	mov	fp, r1
 800e52c:	e63a      	b.n	800e1a4 <_strtod_l+0x84>
 800e52e:	9a08      	ldr	r2, [sp, #32]
 800e530:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e534:	4293      	cmp	r3, r2
 800e536:	db20      	blt.n	800e57a <_strtod_l+0x45a>
 800e538:	4c62      	ldr	r4, [pc, #392]	; (800e6c4 <_strtod_l+0x5a4>)
 800e53a:	f1c5 050f 	rsb	r5, r5, #15
 800e53e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e542:	4652      	mov	r2, sl
 800e544:	465b      	mov	r3, fp
 800e546:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e54a:	f7f2 f87d 	bl	8000648 <__aeabi_dmul>
 800e54e:	9b08      	ldr	r3, [sp, #32]
 800e550:	1b5d      	subs	r5, r3, r5
 800e552:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e556:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e55a:	e7e3      	b.n	800e524 <_strtod_l+0x404>
 800e55c:	9b08      	ldr	r3, [sp, #32]
 800e55e:	3316      	adds	r3, #22
 800e560:	db0b      	blt.n	800e57a <_strtod_l+0x45a>
 800e562:	9b07      	ldr	r3, [sp, #28]
 800e564:	4a57      	ldr	r2, [pc, #348]	; (800e6c4 <_strtod_l+0x5a4>)
 800e566:	1b9e      	subs	r6, r3, r6
 800e568:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e56c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e570:	4650      	mov	r0, sl
 800e572:	4659      	mov	r1, fp
 800e574:	f7f2 f992 	bl	800089c <__aeabi_ddiv>
 800e578:	e7d6      	b.n	800e528 <_strtod_l+0x408>
 800e57a:	9b08      	ldr	r3, [sp, #32]
 800e57c:	eba5 0808 	sub.w	r8, r5, r8
 800e580:	4498      	add	r8, r3
 800e582:	f1b8 0f00 	cmp.w	r8, #0
 800e586:	dd71      	ble.n	800e66c <_strtod_l+0x54c>
 800e588:	f018 030f 	ands.w	r3, r8, #15
 800e58c:	d00a      	beq.n	800e5a4 <_strtod_l+0x484>
 800e58e:	494d      	ldr	r1, [pc, #308]	; (800e6c4 <_strtod_l+0x5a4>)
 800e590:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e594:	4652      	mov	r2, sl
 800e596:	465b      	mov	r3, fp
 800e598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e59c:	f7f2 f854 	bl	8000648 <__aeabi_dmul>
 800e5a0:	4682      	mov	sl, r0
 800e5a2:	468b      	mov	fp, r1
 800e5a4:	f038 080f 	bics.w	r8, r8, #15
 800e5a8:	d04d      	beq.n	800e646 <_strtod_l+0x526>
 800e5aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e5ae:	dd22      	ble.n	800e5f6 <_strtod_l+0x4d6>
 800e5b0:	2500      	movs	r5, #0
 800e5b2:	462e      	mov	r6, r5
 800e5b4:	9509      	str	r5, [sp, #36]	; 0x24
 800e5b6:	9507      	str	r5, [sp, #28]
 800e5b8:	2322      	movs	r3, #34	; 0x22
 800e5ba:	f8df b110 	ldr.w	fp, [pc, #272]	; 800e6cc <_strtod_l+0x5ac>
 800e5be:	6023      	str	r3, [r4, #0]
 800e5c0:	f04f 0a00 	mov.w	sl, #0
 800e5c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	f43f adec 	beq.w	800e1a4 <_strtod_l+0x84>
 800e5cc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e5ce:	4620      	mov	r0, r4
 800e5d0:	f002 f96e 	bl	80108b0 <_Bfree>
 800e5d4:	9907      	ldr	r1, [sp, #28]
 800e5d6:	4620      	mov	r0, r4
 800e5d8:	f002 f96a 	bl	80108b0 <_Bfree>
 800e5dc:	4631      	mov	r1, r6
 800e5de:	4620      	mov	r0, r4
 800e5e0:	f002 f966 	bl	80108b0 <_Bfree>
 800e5e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e5e6:	4620      	mov	r0, r4
 800e5e8:	f002 f962 	bl	80108b0 <_Bfree>
 800e5ec:	4629      	mov	r1, r5
 800e5ee:	4620      	mov	r0, r4
 800e5f0:	f002 f95e 	bl	80108b0 <_Bfree>
 800e5f4:	e5d6      	b.n	800e1a4 <_strtod_l+0x84>
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e5fc:	4650      	mov	r0, sl
 800e5fe:	4659      	mov	r1, fp
 800e600:	4699      	mov	r9, r3
 800e602:	f1b8 0f01 	cmp.w	r8, #1
 800e606:	dc21      	bgt.n	800e64c <_strtod_l+0x52c>
 800e608:	b10b      	cbz	r3, 800e60e <_strtod_l+0x4ee>
 800e60a:	4682      	mov	sl, r0
 800e60c:	468b      	mov	fp, r1
 800e60e:	4b2e      	ldr	r3, [pc, #184]	; (800e6c8 <_strtod_l+0x5a8>)
 800e610:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e614:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e618:	4652      	mov	r2, sl
 800e61a:	465b      	mov	r3, fp
 800e61c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e620:	f7f2 f812 	bl	8000648 <__aeabi_dmul>
 800e624:	4b29      	ldr	r3, [pc, #164]	; (800e6cc <_strtod_l+0x5ac>)
 800e626:	460a      	mov	r2, r1
 800e628:	400b      	ands	r3, r1
 800e62a:	4929      	ldr	r1, [pc, #164]	; (800e6d0 <_strtod_l+0x5b0>)
 800e62c:	428b      	cmp	r3, r1
 800e62e:	4682      	mov	sl, r0
 800e630:	d8be      	bhi.n	800e5b0 <_strtod_l+0x490>
 800e632:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e636:	428b      	cmp	r3, r1
 800e638:	bf86      	itte	hi
 800e63a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800e6d4 <_strtod_l+0x5b4>
 800e63e:	f04f 3aff 	movhi.w	sl, #4294967295
 800e642:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e646:	2300      	movs	r3, #0
 800e648:	9304      	str	r3, [sp, #16]
 800e64a:	e081      	b.n	800e750 <_strtod_l+0x630>
 800e64c:	f018 0f01 	tst.w	r8, #1
 800e650:	d007      	beq.n	800e662 <_strtod_l+0x542>
 800e652:	4b1d      	ldr	r3, [pc, #116]	; (800e6c8 <_strtod_l+0x5a8>)
 800e654:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e65c:	f7f1 fff4 	bl	8000648 <__aeabi_dmul>
 800e660:	2301      	movs	r3, #1
 800e662:	f109 0901 	add.w	r9, r9, #1
 800e666:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e66a:	e7ca      	b.n	800e602 <_strtod_l+0x4e2>
 800e66c:	d0eb      	beq.n	800e646 <_strtod_l+0x526>
 800e66e:	f1c8 0800 	rsb	r8, r8, #0
 800e672:	f018 020f 	ands.w	r2, r8, #15
 800e676:	d00a      	beq.n	800e68e <_strtod_l+0x56e>
 800e678:	4b12      	ldr	r3, [pc, #72]	; (800e6c4 <_strtod_l+0x5a4>)
 800e67a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e67e:	4650      	mov	r0, sl
 800e680:	4659      	mov	r1, fp
 800e682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e686:	f7f2 f909 	bl	800089c <__aeabi_ddiv>
 800e68a:	4682      	mov	sl, r0
 800e68c:	468b      	mov	fp, r1
 800e68e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e692:	d0d8      	beq.n	800e646 <_strtod_l+0x526>
 800e694:	f1b8 0f1f 	cmp.w	r8, #31
 800e698:	dd1e      	ble.n	800e6d8 <_strtod_l+0x5b8>
 800e69a:	2500      	movs	r5, #0
 800e69c:	462e      	mov	r6, r5
 800e69e:	9509      	str	r5, [sp, #36]	; 0x24
 800e6a0:	9507      	str	r5, [sp, #28]
 800e6a2:	2322      	movs	r3, #34	; 0x22
 800e6a4:	f04f 0a00 	mov.w	sl, #0
 800e6a8:	f04f 0b00 	mov.w	fp, #0
 800e6ac:	6023      	str	r3, [r4, #0]
 800e6ae:	e789      	b.n	800e5c4 <_strtod_l+0x4a4>
 800e6b0:	08012f21 	.word	0x08012f21
 800e6b4:	08012f5c 	.word	0x08012f5c
 800e6b8:	08012f19 	.word	0x08012f19
 800e6bc:	0801309c 	.word	0x0801309c
 800e6c0:	080133b8 	.word	0x080133b8
 800e6c4:	08013298 	.word	0x08013298
 800e6c8:	08013270 	.word	0x08013270
 800e6cc:	7ff00000 	.word	0x7ff00000
 800e6d0:	7ca00000 	.word	0x7ca00000
 800e6d4:	7fefffff 	.word	0x7fefffff
 800e6d8:	f018 0310 	ands.w	r3, r8, #16
 800e6dc:	bf18      	it	ne
 800e6de:	236a      	movne	r3, #106	; 0x6a
 800e6e0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800ea98 <_strtod_l+0x978>
 800e6e4:	9304      	str	r3, [sp, #16]
 800e6e6:	4650      	mov	r0, sl
 800e6e8:	4659      	mov	r1, fp
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	f018 0f01 	tst.w	r8, #1
 800e6f0:	d004      	beq.n	800e6fc <_strtod_l+0x5dc>
 800e6f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e6f6:	f7f1 ffa7 	bl	8000648 <__aeabi_dmul>
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e700:	f109 0908 	add.w	r9, r9, #8
 800e704:	d1f2      	bne.n	800e6ec <_strtod_l+0x5cc>
 800e706:	b10b      	cbz	r3, 800e70c <_strtod_l+0x5ec>
 800e708:	4682      	mov	sl, r0
 800e70a:	468b      	mov	fp, r1
 800e70c:	9b04      	ldr	r3, [sp, #16]
 800e70e:	b1bb      	cbz	r3, 800e740 <_strtod_l+0x620>
 800e710:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800e714:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e718:	2b00      	cmp	r3, #0
 800e71a:	4659      	mov	r1, fp
 800e71c:	dd10      	ble.n	800e740 <_strtod_l+0x620>
 800e71e:	2b1f      	cmp	r3, #31
 800e720:	f340 8128 	ble.w	800e974 <_strtod_l+0x854>
 800e724:	2b34      	cmp	r3, #52	; 0x34
 800e726:	bfde      	ittt	le
 800e728:	3b20      	suble	r3, #32
 800e72a:	f04f 32ff 	movle.w	r2, #4294967295
 800e72e:	fa02 f303 	lslle.w	r3, r2, r3
 800e732:	f04f 0a00 	mov.w	sl, #0
 800e736:	bfcc      	ite	gt
 800e738:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e73c:	ea03 0b01 	andle.w	fp, r3, r1
 800e740:	2200      	movs	r2, #0
 800e742:	2300      	movs	r3, #0
 800e744:	4650      	mov	r0, sl
 800e746:	4659      	mov	r1, fp
 800e748:	f7f2 f9e6 	bl	8000b18 <__aeabi_dcmpeq>
 800e74c:	2800      	cmp	r0, #0
 800e74e:	d1a4      	bne.n	800e69a <_strtod_l+0x57a>
 800e750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e752:	9300      	str	r3, [sp, #0]
 800e754:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e756:	462b      	mov	r3, r5
 800e758:	463a      	mov	r2, r7
 800e75a:	4620      	mov	r0, r4
 800e75c:	f002 f914 	bl	8010988 <__s2b>
 800e760:	9009      	str	r0, [sp, #36]	; 0x24
 800e762:	2800      	cmp	r0, #0
 800e764:	f43f af24 	beq.w	800e5b0 <_strtod_l+0x490>
 800e768:	9b07      	ldr	r3, [sp, #28]
 800e76a:	1b9e      	subs	r6, r3, r6
 800e76c:	9b08      	ldr	r3, [sp, #32]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	bfb4      	ite	lt
 800e772:	4633      	movlt	r3, r6
 800e774:	2300      	movge	r3, #0
 800e776:	9310      	str	r3, [sp, #64]	; 0x40
 800e778:	9b08      	ldr	r3, [sp, #32]
 800e77a:	2500      	movs	r5, #0
 800e77c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e780:	9318      	str	r3, [sp, #96]	; 0x60
 800e782:	462e      	mov	r6, r5
 800e784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e786:	4620      	mov	r0, r4
 800e788:	6859      	ldr	r1, [r3, #4]
 800e78a:	f002 f851 	bl	8010830 <_Balloc>
 800e78e:	9007      	str	r0, [sp, #28]
 800e790:	2800      	cmp	r0, #0
 800e792:	f43f af11 	beq.w	800e5b8 <_strtod_l+0x498>
 800e796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e798:	691a      	ldr	r2, [r3, #16]
 800e79a:	3202      	adds	r2, #2
 800e79c:	f103 010c 	add.w	r1, r3, #12
 800e7a0:	0092      	lsls	r2, r2, #2
 800e7a2:	300c      	adds	r0, #12
 800e7a4:	f7fe ff90 	bl	800d6c8 <memcpy>
 800e7a8:	ec4b ab10 	vmov	d0, sl, fp
 800e7ac:	aa20      	add	r2, sp, #128	; 0x80
 800e7ae:	a91f      	add	r1, sp, #124	; 0x7c
 800e7b0:	4620      	mov	r0, r4
 800e7b2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800e7b6:	f002 fc23 	bl	8011000 <__d2b>
 800e7ba:	901e      	str	r0, [sp, #120]	; 0x78
 800e7bc:	2800      	cmp	r0, #0
 800e7be:	f43f aefb 	beq.w	800e5b8 <_strtod_l+0x498>
 800e7c2:	2101      	movs	r1, #1
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	f002 f979 	bl	8010abc <__i2b>
 800e7ca:	4606      	mov	r6, r0
 800e7cc:	2800      	cmp	r0, #0
 800e7ce:	f43f aef3 	beq.w	800e5b8 <_strtod_l+0x498>
 800e7d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e7d4:	9904      	ldr	r1, [sp, #16]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	bfab      	itete	ge
 800e7da:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800e7dc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800e7de:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800e7e0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800e7e4:	bfac      	ite	ge
 800e7e6:	eb03 0902 	addge.w	r9, r3, r2
 800e7ea:	1ad7      	sublt	r7, r2, r3
 800e7ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e7ee:	eba3 0801 	sub.w	r8, r3, r1
 800e7f2:	4490      	add	r8, r2
 800e7f4:	4ba3      	ldr	r3, [pc, #652]	; (800ea84 <_strtod_l+0x964>)
 800e7f6:	f108 38ff 	add.w	r8, r8, #4294967295
 800e7fa:	4598      	cmp	r8, r3
 800e7fc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e800:	f280 80cc 	bge.w	800e99c <_strtod_l+0x87c>
 800e804:	eba3 0308 	sub.w	r3, r3, r8
 800e808:	2b1f      	cmp	r3, #31
 800e80a:	eba2 0203 	sub.w	r2, r2, r3
 800e80e:	f04f 0101 	mov.w	r1, #1
 800e812:	f300 80b6 	bgt.w	800e982 <_strtod_l+0x862>
 800e816:	fa01 f303 	lsl.w	r3, r1, r3
 800e81a:	9311      	str	r3, [sp, #68]	; 0x44
 800e81c:	2300      	movs	r3, #0
 800e81e:	930c      	str	r3, [sp, #48]	; 0x30
 800e820:	eb09 0802 	add.w	r8, r9, r2
 800e824:	9b04      	ldr	r3, [sp, #16]
 800e826:	45c1      	cmp	r9, r8
 800e828:	4417      	add	r7, r2
 800e82a:	441f      	add	r7, r3
 800e82c:	464b      	mov	r3, r9
 800e82e:	bfa8      	it	ge
 800e830:	4643      	movge	r3, r8
 800e832:	42bb      	cmp	r3, r7
 800e834:	bfa8      	it	ge
 800e836:	463b      	movge	r3, r7
 800e838:	2b00      	cmp	r3, #0
 800e83a:	bfc2      	ittt	gt
 800e83c:	eba8 0803 	subgt.w	r8, r8, r3
 800e840:	1aff      	subgt	r7, r7, r3
 800e842:	eba9 0903 	subgt.w	r9, r9, r3
 800e846:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e848:	2b00      	cmp	r3, #0
 800e84a:	dd17      	ble.n	800e87c <_strtod_l+0x75c>
 800e84c:	4631      	mov	r1, r6
 800e84e:	461a      	mov	r2, r3
 800e850:	4620      	mov	r0, r4
 800e852:	f002 f9ef 	bl	8010c34 <__pow5mult>
 800e856:	4606      	mov	r6, r0
 800e858:	2800      	cmp	r0, #0
 800e85a:	f43f aead 	beq.w	800e5b8 <_strtod_l+0x498>
 800e85e:	4601      	mov	r1, r0
 800e860:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e862:	4620      	mov	r0, r4
 800e864:	f002 f940 	bl	8010ae8 <__multiply>
 800e868:	900f      	str	r0, [sp, #60]	; 0x3c
 800e86a:	2800      	cmp	r0, #0
 800e86c:	f43f aea4 	beq.w	800e5b8 <_strtod_l+0x498>
 800e870:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e872:	4620      	mov	r0, r4
 800e874:	f002 f81c 	bl	80108b0 <_Bfree>
 800e878:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e87a:	931e      	str	r3, [sp, #120]	; 0x78
 800e87c:	f1b8 0f00 	cmp.w	r8, #0
 800e880:	f300 8091 	bgt.w	800e9a6 <_strtod_l+0x886>
 800e884:	9b08      	ldr	r3, [sp, #32]
 800e886:	2b00      	cmp	r3, #0
 800e888:	dd08      	ble.n	800e89c <_strtod_l+0x77c>
 800e88a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e88c:	9907      	ldr	r1, [sp, #28]
 800e88e:	4620      	mov	r0, r4
 800e890:	f002 f9d0 	bl	8010c34 <__pow5mult>
 800e894:	9007      	str	r0, [sp, #28]
 800e896:	2800      	cmp	r0, #0
 800e898:	f43f ae8e 	beq.w	800e5b8 <_strtod_l+0x498>
 800e89c:	2f00      	cmp	r7, #0
 800e89e:	dd08      	ble.n	800e8b2 <_strtod_l+0x792>
 800e8a0:	9907      	ldr	r1, [sp, #28]
 800e8a2:	463a      	mov	r2, r7
 800e8a4:	4620      	mov	r0, r4
 800e8a6:	f002 fa1f 	bl	8010ce8 <__lshift>
 800e8aa:	9007      	str	r0, [sp, #28]
 800e8ac:	2800      	cmp	r0, #0
 800e8ae:	f43f ae83 	beq.w	800e5b8 <_strtod_l+0x498>
 800e8b2:	f1b9 0f00 	cmp.w	r9, #0
 800e8b6:	dd08      	ble.n	800e8ca <_strtod_l+0x7aa>
 800e8b8:	4631      	mov	r1, r6
 800e8ba:	464a      	mov	r2, r9
 800e8bc:	4620      	mov	r0, r4
 800e8be:	f002 fa13 	bl	8010ce8 <__lshift>
 800e8c2:	4606      	mov	r6, r0
 800e8c4:	2800      	cmp	r0, #0
 800e8c6:	f43f ae77 	beq.w	800e5b8 <_strtod_l+0x498>
 800e8ca:	9a07      	ldr	r2, [sp, #28]
 800e8cc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	f002 fa92 	bl	8010df8 <__mdiff>
 800e8d4:	4605      	mov	r5, r0
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	f43f ae6e 	beq.w	800e5b8 <_strtod_l+0x498>
 800e8dc:	68c3      	ldr	r3, [r0, #12]
 800e8de:	930f      	str	r3, [sp, #60]	; 0x3c
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	60c3      	str	r3, [r0, #12]
 800e8e4:	4631      	mov	r1, r6
 800e8e6:	f002 fa6b 	bl	8010dc0 <__mcmp>
 800e8ea:	2800      	cmp	r0, #0
 800e8ec:	da65      	bge.n	800e9ba <_strtod_l+0x89a>
 800e8ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e8f0:	ea53 030a 	orrs.w	r3, r3, sl
 800e8f4:	f040 8087 	bne.w	800ea06 <_strtod_l+0x8e6>
 800e8f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	f040 8082 	bne.w	800ea06 <_strtod_l+0x8e6>
 800e902:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e906:	0d1b      	lsrs	r3, r3, #20
 800e908:	051b      	lsls	r3, r3, #20
 800e90a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e90e:	d97a      	bls.n	800ea06 <_strtod_l+0x8e6>
 800e910:	696b      	ldr	r3, [r5, #20]
 800e912:	b913      	cbnz	r3, 800e91a <_strtod_l+0x7fa>
 800e914:	692b      	ldr	r3, [r5, #16]
 800e916:	2b01      	cmp	r3, #1
 800e918:	dd75      	ble.n	800ea06 <_strtod_l+0x8e6>
 800e91a:	4629      	mov	r1, r5
 800e91c:	2201      	movs	r2, #1
 800e91e:	4620      	mov	r0, r4
 800e920:	f002 f9e2 	bl	8010ce8 <__lshift>
 800e924:	4631      	mov	r1, r6
 800e926:	4605      	mov	r5, r0
 800e928:	f002 fa4a 	bl	8010dc0 <__mcmp>
 800e92c:	2800      	cmp	r0, #0
 800e92e:	dd6a      	ble.n	800ea06 <_strtod_l+0x8e6>
 800e930:	9904      	ldr	r1, [sp, #16]
 800e932:	4a55      	ldr	r2, [pc, #340]	; (800ea88 <_strtod_l+0x968>)
 800e934:	465b      	mov	r3, fp
 800e936:	2900      	cmp	r1, #0
 800e938:	f000 8085 	beq.w	800ea46 <_strtod_l+0x926>
 800e93c:	ea02 010b 	and.w	r1, r2, fp
 800e940:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e944:	dc7f      	bgt.n	800ea46 <_strtod_l+0x926>
 800e946:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e94a:	f77f aeaa 	ble.w	800e6a2 <_strtod_l+0x582>
 800e94e:	4a4f      	ldr	r2, [pc, #316]	; (800ea8c <_strtod_l+0x96c>)
 800e950:	2300      	movs	r3, #0
 800e952:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800e956:	4650      	mov	r0, sl
 800e958:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800e95c:	4659      	mov	r1, fp
 800e95e:	f7f1 fe73 	bl	8000648 <__aeabi_dmul>
 800e962:	460b      	mov	r3, r1
 800e964:	4303      	orrs	r3, r0
 800e966:	bf08      	it	eq
 800e968:	2322      	moveq	r3, #34	; 0x22
 800e96a:	4682      	mov	sl, r0
 800e96c:	468b      	mov	fp, r1
 800e96e:	bf08      	it	eq
 800e970:	6023      	streq	r3, [r4, #0]
 800e972:	e62b      	b.n	800e5cc <_strtod_l+0x4ac>
 800e974:	f04f 32ff 	mov.w	r2, #4294967295
 800e978:	fa02 f303 	lsl.w	r3, r2, r3
 800e97c:	ea03 0a0a 	and.w	sl, r3, sl
 800e980:	e6de      	b.n	800e740 <_strtod_l+0x620>
 800e982:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e986:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e98a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e98e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e992:	fa01 f308 	lsl.w	r3, r1, r8
 800e996:	930c      	str	r3, [sp, #48]	; 0x30
 800e998:	9111      	str	r1, [sp, #68]	; 0x44
 800e99a:	e741      	b.n	800e820 <_strtod_l+0x700>
 800e99c:	2300      	movs	r3, #0
 800e99e:	930c      	str	r3, [sp, #48]	; 0x30
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	9311      	str	r3, [sp, #68]	; 0x44
 800e9a4:	e73c      	b.n	800e820 <_strtod_l+0x700>
 800e9a6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e9a8:	4642      	mov	r2, r8
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	f002 f99c 	bl	8010ce8 <__lshift>
 800e9b0:	901e      	str	r0, [sp, #120]	; 0x78
 800e9b2:	2800      	cmp	r0, #0
 800e9b4:	f47f af66 	bne.w	800e884 <_strtod_l+0x764>
 800e9b8:	e5fe      	b.n	800e5b8 <_strtod_l+0x498>
 800e9ba:	465f      	mov	r7, fp
 800e9bc:	d16e      	bne.n	800ea9c <_strtod_l+0x97c>
 800e9be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e9c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e9c4:	b342      	cbz	r2, 800ea18 <_strtod_l+0x8f8>
 800e9c6:	4a32      	ldr	r2, [pc, #200]	; (800ea90 <_strtod_l+0x970>)
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	d128      	bne.n	800ea1e <_strtod_l+0x8fe>
 800e9cc:	9b04      	ldr	r3, [sp, #16]
 800e9ce:	4650      	mov	r0, sl
 800e9d0:	b1eb      	cbz	r3, 800ea0e <_strtod_l+0x8ee>
 800e9d2:	4a2d      	ldr	r2, [pc, #180]	; (800ea88 <_strtod_l+0x968>)
 800e9d4:	403a      	ands	r2, r7
 800e9d6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800e9da:	f04f 31ff 	mov.w	r1, #4294967295
 800e9de:	d819      	bhi.n	800ea14 <_strtod_l+0x8f4>
 800e9e0:	0d12      	lsrs	r2, r2, #20
 800e9e2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e9e6:	fa01 f303 	lsl.w	r3, r1, r3
 800e9ea:	4298      	cmp	r0, r3
 800e9ec:	d117      	bne.n	800ea1e <_strtod_l+0x8fe>
 800e9ee:	4b29      	ldr	r3, [pc, #164]	; (800ea94 <_strtod_l+0x974>)
 800e9f0:	429f      	cmp	r7, r3
 800e9f2:	d102      	bne.n	800e9fa <_strtod_l+0x8da>
 800e9f4:	3001      	adds	r0, #1
 800e9f6:	f43f addf 	beq.w	800e5b8 <_strtod_l+0x498>
 800e9fa:	4b23      	ldr	r3, [pc, #140]	; (800ea88 <_strtod_l+0x968>)
 800e9fc:	403b      	ands	r3, r7
 800e9fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ea02:	f04f 0a00 	mov.w	sl, #0
 800ea06:	9b04      	ldr	r3, [sp, #16]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d1a0      	bne.n	800e94e <_strtod_l+0x82e>
 800ea0c:	e5de      	b.n	800e5cc <_strtod_l+0x4ac>
 800ea0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ea12:	e7ea      	b.n	800e9ea <_strtod_l+0x8ca>
 800ea14:	460b      	mov	r3, r1
 800ea16:	e7e8      	b.n	800e9ea <_strtod_l+0x8ca>
 800ea18:	ea53 030a 	orrs.w	r3, r3, sl
 800ea1c:	d088      	beq.n	800e930 <_strtod_l+0x810>
 800ea1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea20:	b1db      	cbz	r3, 800ea5a <_strtod_l+0x93a>
 800ea22:	423b      	tst	r3, r7
 800ea24:	d0ef      	beq.n	800ea06 <_strtod_l+0x8e6>
 800ea26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea28:	9a04      	ldr	r2, [sp, #16]
 800ea2a:	4650      	mov	r0, sl
 800ea2c:	4659      	mov	r1, fp
 800ea2e:	b1c3      	cbz	r3, 800ea62 <_strtod_l+0x942>
 800ea30:	f7ff fb58 	bl	800e0e4 <sulp>
 800ea34:	4602      	mov	r2, r0
 800ea36:	460b      	mov	r3, r1
 800ea38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ea3c:	f7f1 fc4e 	bl	80002dc <__adddf3>
 800ea40:	4682      	mov	sl, r0
 800ea42:	468b      	mov	fp, r1
 800ea44:	e7df      	b.n	800ea06 <_strtod_l+0x8e6>
 800ea46:	4013      	ands	r3, r2
 800ea48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ea4c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ea50:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ea54:	f04f 3aff 	mov.w	sl, #4294967295
 800ea58:	e7d5      	b.n	800ea06 <_strtod_l+0x8e6>
 800ea5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea5c:	ea13 0f0a 	tst.w	r3, sl
 800ea60:	e7e0      	b.n	800ea24 <_strtod_l+0x904>
 800ea62:	f7ff fb3f 	bl	800e0e4 <sulp>
 800ea66:	4602      	mov	r2, r0
 800ea68:	460b      	mov	r3, r1
 800ea6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ea6e:	f7f1 fc33 	bl	80002d8 <__aeabi_dsub>
 800ea72:	2200      	movs	r2, #0
 800ea74:	2300      	movs	r3, #0
 800ea76:	4682      	mov	sl, r0
 800ea78:	468b      	mov	fp, r1
 800ea7a:	f7f2 f84d 	bl	8000b18 <__aeabi_dcmpeq>
 800ea7e:	2800      	cmp	r0, #0
 800ea80:	d0c1      	beq.n	800ea06 <_strtod_l+0x8e6>
 800ea82:	e60e      	b.n	800e6a2 <_strtod_l+0x582>
 800ea84:	fffffc02 	.word	0xfffffc02
 800ea88:	7ff00000 	.word	0x7ff00000
 800ea8c:	39500000 	.word	0x39500000
 800ea90:	000fffff 	.word	0x000fffff
 800ea94:	7fefffff 	.word	0x7fefffff
 800ea98:	08012f70 	.word	0x08012f70
 800ea9c:	4631      	mov	r1, r6
 800ea9e:	4628      	mov	r0, r5
 800eaa0:	f002 fb0a 	bl	80110b8 <__ratio>
 800eaa4:	ec59 8b10 	vmov	r8, r9, d0
 800eaa8:	ee10 0a10 	vmov	r0, s0
 800eaac:	2200      	movs	r2, #0
 800eaae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eab2:	4649      	mov	r1, r9
 800eab4:	f7f2 f844 	bl	8000b40 <__aeabi_dcmple>
 800eab8:	2800      	cmp	r0, #0
 800eaba:	d07c      	beq.n	800ebb6 <_strtod_l+0xa96>
 800eabc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d04c      	beq.n	800eb5c <_strtod_l+0xa3c>
 800eac2:	4b95      	ldr	r3, [pc, #596]	; (800ed18 <_strtod_l+0xbf8>)
 800eac4:	2200      	movs	r2, #0
 800eac6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800eaca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ed18 <_strtod_l+0xbf8>
 800eace:	f04f 0800 	mov.w	r8, #0
 800ead2:	4b92      	ldr	r3, [pc, #584]	; (800ed1c <_strtod_l+0xbfc>)
 800ead4:	403b      	ands	r3, r7
 800ead6:	9311      	str	r3, [sp, #68]	; 0x44
 800ead8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800eada:	4b91      	ldr	r3, [pc, #580]	; (800ed20 <_strtod_l+0xc00>)
 800eadc:	429a      	cmp	r2, r3
 800eade:	f040 80b2 	bne.w	800ec46 <_strtod_l+0xb26>
 800eae2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800eae6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eaea:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800eaee:	ec4b ab10 	vmov	d0, sl, fp
 800eaf2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800eaf6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800eafa:	f002 fa05 	bl	8010f08 <__ulp>
 800eafe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb02:	ec53 2b10 	vmov	r2, r3, d0
 800eb06:	f7f1 fd9f 	bl	8000648 <__aeabi_dmul>
 800eb0a:	4652      	mov	r2, sl
 800eb0c:	465b      	mov	r3, fp
 800eb0e:	f7f1 fbe5 	bl	80002dc <__adddf3>
 800eb12:	460b      	mov	r3, r1
 800eb14:	4981      	ldr	r1, [pc, #516]	; (800ed1c <_strtod_l+0xbfc>)
 800eb16:	4a83      	ldr	r2, [pc, #524]	; (800ed24 <_strtod_l+0xc04>)
 800eb18:	4019      	ands	r1, r3
 800eb1a:	4291      	cmp	r1, r2
 800eb1c:	4682      	mov	sl, r0
 800eb1e:	d95e      	bls.n	800ebde <_strtod_l+0xabe>
 800eb20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb22:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800eb26:	4293      	cmp	r3, r2
 800eb28:	d103      	bne.n	800eb32 <_strtod_l+0xa12>
 800eb2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb2c:	3301      	adds	r3, #1
 800eb2e:	f43f ad43 	beq.w	800e5b8 <_strtod_l+0x498>
 800eb32:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800ed30 <_strtod_l+0xc10>
 800eb36:	f04f 3aff 	mov.w	sl, #4294967295
 800eb3a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	f001 feb7 	bl	80108b0 <_Bfree>
 800eb42:	9907      	ldr	r1, [sp, #28]
 800eb44:	4620      	mov	r0, r4
 800eb46:	f001 feb3 	bl	80108b0 <_Bfree>
 800eb4a:	4631      	mov	r1, r6
 800eb4c:	4620      	mov	r0, r4
 800eb4e:	f001 feaf 	bl	80108b0 <_Bfree>
 800eb52:	4629      	mov	r1, r5
 800eb54:	4620      	mov	r0, r4
 800eb56:	f001 feab 	bl	80108b0 <_Bfree>
 800eb5a:	e613      	b.n	800e784 <_strtod_l+0x664>
 800eb5c:	f1ba 0f00 	cmp.w	sl, #0
 800eb60:	d11b      	bne.n	800eb9a <_strtod_l+0xa7a>
 800eb62:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eb66:	b9f3      	cbnz	r3, 800eba6 <_strtod_l+0xa86>
 800eb68:	4b6b      	ldr	r3, [pc, #428]	; (800ed18 <_strtod_l+0xbf8>)
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	4640      	mov	r0, r8
 800eb6e:	4649      	mov	r1, r9
 800eb70:	f7f1 ffdc 	bl	8000b2c <__aeabi_dcmplt>
 800eb74:	b9d0      	cbnz	r0, 800ebac <_strtod_l+0xa8c>
 800eb76:	4640      	mov	r0, r8
 800eb78:	4649      	mov	r1, r9
 800eb7a:	4b6b      	ldr	r3, [pc, #428]	; (800ed28 <_strtod_l+0xc08>)
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	f7f1 fd63 	bl	8000648 <__aeabi_dmul>
 800eb82:	4680      	mov	r8, r0
 800eb84:	4689      	mov	r9, r1
 800eb86:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800eb8a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800eb8e:	931b      	str	r3, [sp, #108]	; 0x6c
 800eb90:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800eb94:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800eb98:	e79b      	b.n	800ead2 <_strtod_l+0x9b2>
 800eb9a:	f1ba 0f01 	cmp.w	sl, #1
 800eb9e:	d102      	bne.n	800eba6 <_strtod_l+0xa86>
 800eba0:	2f00      	cmp	r7, #0
 800eba2:	f43f ad7e 	beq.w	800e6a2 <_strtod_l+0x582>
 800eba6:	4b61      	ldr	r3, [pc, #388]	; (800ed2c <_strtod_l+0xc0c>)
 800eba8:	2200      	movs	r2, #0
 800ebaa:	e78c      	b.n	800eac6 <_strtod_l+0x9a6>
 800ebac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ed28 <_strtod_l+0xc08>
 800ebb0:	f04f 0800 	mov.w	r8, #0
 800ebb4:	e7e7      	b.n	800eb86 <_strtod_l+0xa66>
 800ebb6:	4b5c      	ldr	r3, [pc, #368]	; (800ed28 <_strtod_l+0xc08>)
 800ebb8:	4640      	mov	r0, r8
 800ebba:	4649      	mov	r1, r9
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	f7f1 fd43 	bl	8000648 <__aeabi_dmul>
 800ebc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebc4:	4680      	mov	r8, r0
 800ebc6:	4689      	mov	r9, r1
 800ebc8:	b933      	cbnz	r3, 800ebd8 <_strtod_l+0xab8>
 800ebca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ebce:	9012      	str	r0, [sp, #72]	; 0x48
 800ebd0:	9313      	str	r3, [sp, #76]	; 0x4c
 800ebd2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ebd6:	e7dd      	b.n	800eb94 <_strtod_l+0xa74>
 800ebd8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800ebdc:	e7f9      	b.n	800ebd2 <_strtod_l+0xab2>
 800ebde:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ebe2:	9b04      	ldr	r3, [sp, #16]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d1a8      	bne.n	800eb3a <_strtod_l+0xa1a>
 800ebe8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ebec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ebee:	0d1b      	lsrs	r3, r3, #20
 800ebf0:	051b      	lsls	r3, r3, #20
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d1a1      	bne.n	800eb3a <_strtod_l+0xa1a>
 800ebf6:	4640      	mov	r0, r8
 800ebf8:	4649      	mov	r1, r9
 800ebfa:	f7f2 f885 	bl	8000d08 <__aeabi_d2lz>
 800ebfe:	f7f1 fcf5 	bl	80005ec <__aeabi_l2d>
 800ec02:	4602      	mov	r2, r0
 800ec04:	460b      	mov	r3, r1
 800ec06:	4640      	mov	r0, r8
 800ec08:	4649      	mov	r1, r9
 800ec0a:	f7f1 fb65 	bl	80002d8 <__aeabi_dsub>
 800ec0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ec10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec14:	ea43 030a 	orr.w	r3, r3, sl
 800ec18:	4313      	orrs	r3, r2
 800ec1a:	4680      	mov	r8, r0
 800ec1c:	4689      	mov	r9, r1
 800ec1e:	d053      	beq.n	800ecc8 <_strtod_l+0xba8>
 800ec20:	a335      	add	r3, pc, #212	; (adr r3, 800ecf8 <_strtod_l+0xbd8>)
 800ec22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec26:	f7f1 ff81 	bl	8000b2c <__aeabi_dcmplt>
 800ec2a:	2800      	cmp	r0, #0
 800ec2c:	f47f acce 	bne.w	800e5cc <_strtod_l+0x4ac>
 800ec30:	a333      	add	r3, pc, #204	; (adr r3, 800ed00 <_strtod_l+0xbe0>)
 800ec32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec36:	4640      	mov	r0, r8
 800ec38:	4649      	mov	r1, r9
 800ec3a:	f7f1 ff95 	bl	8000b68 <__aeabi_dcmpgt>
 800ec3e:	2800      	cmp	r0, #0
 800ec40:	f43f af7b 	beq.w	800eb3a <_strtod_l+0xa1a>
 800ec44:	e4c2      	b.n	800e5cc <_strtod_l+0x4ac>
 800ec46:	9b04      	ldr	r3, [sp, #16]
 800ec48:	b333      	cbz	r3, 800ec98 <_strtod_l+0xb78>
 800ec4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ec4c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ec50:	d822      	bhi.n	800ec98 <_strtod_l+0xb78>
 800ec52:	a32d      	add	r3, pc, #180	; (adr r3, 800ed08 <_strtod_l+0xbe8>)
 800ec54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec58:	4640      	mov	r0, r8
 800ec5a:	4649      	mov	r1, r9
 800ec5c:	f7f1 ff70 	bl	8000b40 <__aeabi_dcmple>
 800ec60:	b1a0      	cbz	r0, 800ec8c <_strtod_l+0xb6c>
 800ec62:	4649      	mov	r1, r9
 800ec64:	4640      	mov	r0, r8
 800ec66:	f7f1 ffc7 	bl	8000bf8 <__aeabi_d2uiz>
 800ec6a:	2801      	cmp	r0, #1
 800ec6c:	bf38      	it	cc
 800ec6e:	2001      	movcc	r0, #1
 800ec70:	f7f1 fc70 	bl	8000554 <__aeabi_ui2d>
 800ec74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec76:	4680      	mov	r8, r0
 800ec78:	4689      	mov	r9, r1
 800ec7a:	bb13      	cbnz	r3, 800ecc2 <_strtod_l+0xba2>
 800ec7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec80:	9014      	str	r0, [sp, #80]	; 0x50
 800ec82:	9315      	str	r3, [sp, #84]	; 0x54
 800ec84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ec88:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ec8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ec90:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ec94:	1a9b      	subs	r3, r3, r2
 800ec96:	930d      	str	r3, [sp, #52]	; 0x34
 800ec98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ec9c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800eca0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800eca4:	f002 f930 	bl	8010f08 <__ulp>
 800eca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ecac:	ec53 2b10 	vmov	r2, r3, d0
 800ecb0:	f7f1 fcca 	bl	8000648 <__aeabi_dmul>
 800ecb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ecb8:	f7f1 fb10 	bl	80002dc <__adddf3>
 800ecbc:	4682      	mov	sl, r0
 800ecbe:	468b      	mov	fp, r1
 800ecc0:	e78f      	b.n	800ebe2 <_strtod_l+0xac2>
 800ecc2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800ecc6:	e7dd      	b.n	800ec84 <_strtod_l+0xb64>
 800ecc8:	a311      	add	r3, pc, #68	; (adr r3, 800ed10 <_strtod_l+0xbf0>)
 800ecca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecce:	f7f1 ff2d 	bl	8000b2c <__aeabi_dcmplt>
 800ecd2:	e7b4      	b.n	800ec3e <_strtod_l+0xb1e>
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	930e      	str	r3, [sp, #56]	; 0x38
 800ecd8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ecda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ecdc:	6013      	str	r3, [r2, #0]
 800ecde:	f7ff ba65 	b.w	800e1ac <_strtod_l+0x8c>
 800ece2:	2b65      	cmp	r3, #101	; 0x65
 800ece4:	f43f ab5d 	beq.w	800e3a2 <_strtod_l+0x282>
 800ece8:	2b45      	cmp	r3, #69	; 0x45
 800ecea:	f43f ab5a 	beq.w	800e3a2 <_strtod_l+0x282>
 800ecee:	2201      	movs	r2, #1
 800ecf0:	f7ff bb92 	b.w	800e418 <_strtod_l+0x2f8>
 800ecf4:	f3af 8000 	nop.w
 800ecf8:	94a03595 	.word	0x94a03595
 800ecfc:	3fdfffff 	.word	0x3fdfffff
 800ed00:	35afe535 	.word	0x35afe535
 800ed04:	3fe00000 	.word	0x3fe00000
 800ed08:	ffc00000 	.word	0xffc00000
 800ed0c:	41dfffff 	.word	0x41dfffff
 800ed10:	94a03595 	.word	0x94a03595
 800ed14:	3fcfffff 	.word	0x3fcfffff
 800ed18:	3ff00000 	.word	0x3ff00000
 800ed1c:	7ff00000 	.word	0x7ff00000
 800ed20:	7fe00000 	.word	0x7fe00000
 800ed24:	7c9fffff 	.word	0x7c9fffff
 800ed28:	3fe00000 	.word	0x3fe00000
 800ed2c:	bff00000 	.word	0xbff00000
 800ed30:	7fefffff 	.word	0x7fefffff

0800ed34 <strtod>:
 800ed34:	460a      	mov	r2, r1
 800ed36:	4601      	mov	r1, r0
 800ed38:	4802      	ldr	r0, [pc, #8]	; (800ed44 <strtod+0x10>)
 800ed3a:	4b03      	ldr	r3, [pc, #12]	; (800ed48 <strtod+0x14>)
 800ed3c:	6800      	ldr	r0, [r0, #0]
 800ed3e:	f7ff b9ef 	b.w	800e120 <_strtod_l>
 800ed42:	bf00      	nop
 800ed44:	2000002c 	.word	0x2000002c
 800ed48:	20000094 	.word	0x20000094

0800ed4c <_strtol_l.isra.0>:
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed52:	d001      	beq.n	800ed58 <_strtol_l.isra.0+0xc>
 800ed54:	2b24      	cmp	r3, #36	; 0x24
 800ed56:	d906      	bls.n	800ed66 <_strtol_l.isra.0+0x1a>
 800ed58:	f7fe fc8c 	bl	800d674 <__errno>
 800ed5c:	2316      	movs	r3, #22
 800ed5e:	6003      	str	r3, [r0, #0]
 800ed60:	2000      	movs	r0, #0
 800ed62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed66:	4f3a      	ldr	r7, [pc, #232]	; (800ee50 <_strtol_l.isra.0+0x104>)
 800ed68:	468e      	mov	lr, r1
 800ed6a:	4676      	mov	r6, lr
 800ed6c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ed70:	5de5      	ldrb	r5, [r4, r7]
 800ed72:	f015 0508 	ands.w	r5, r5, #8
 800ed76:	d1f8      	bne.n	800ed6a <_strtol_l.isra.0+0x1e>
 800ed78:	2c2d      	cmp	r4, #45	; 0x2d
 800ed7a:	d134      	bne.n	800ede6 <_strtol_l.isra.0+0x9a>
 800ed7c:	f89e 4000 	ldrb.w	r4, [lr]
 800ed80:	f04f 0801 	mov.w	r8, #1
 800ed84:	f106 0e02 	add.w	lr, r6, #2
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d05c      	beq.n	800ee46 <_strtol_l.isra.0+0xfa>
 800ed8c:	2b10      	cmp	r3, #16
 800ed8e:	d10c      	bne.n	800edaa <_strtol_l.isra.0+0x5e>
 800ed90:	2c30      	cmp	r4, #48	; 0x30
 800ed92:	d10a      	bne.n	800edaa <_strtol_l.isra.0+0x5e>
 800ed94:	f89e 4000 	ldrb.w	r4, [lr]
 800ed98:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ed9c:	2c58      	cmp	r4, #88	; 0x58
 800ed9e:	d14d      	bne.n	800ee3c <_strtol_l.isra.0+0xf0>
 800eda0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800eda4:	2310      	movs	r3, #16
 800eda6:	f10e 0e02 	add.w	lr, lr, #2
 800edaa:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800edae:	f10c 3cff 	add.w	ip, ip, #4294967295
 800edb2:	2600      	movs	r6, #0
 800edb4:	fbbc f9f3 	udiv	r9, ip, r3
 800edb8:	4635      	mov	r5, r6
 800edba:	fb03 ca19 	mls	sl, r3, r9, ip
 800edbe:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800edc2:	2f09      	cmp	r7, #9
 800edc4:	d818      	bhi.n	800edf8 <_strtol_l.isra.0+0xac>
 800edc6:	463c      	mov	r4, r7
 800edc8:	42a3      	cmp	r3, r4
 800edca:	dd24      	ble.n	800ee16 <_strtol_l.isra.0+0xca>
 800edcc:	2e00      	cmp	r6, #0
 800edce:	db1f      	blt.n	800ee10 <_strtol_l.isra.0+0xc4>
 800edd0:	45a9      	cmp	r9, r5
 800edd2:	d31d      	bcc.n	800ee10 <_strtol_l.isra.0+0xc4>
 800edd4:	d101      	bne.n	800edda <_strtol_l.isra.0+0x8e>
 800edd6:	45a2      	cmp	sl, r4
 800edd8:	db1a      	blt.n	800ee10 <_strtol_l.isra.0+0xc4>
 800edda:	fb05 4503 	mla	r5, r5, r3, r4
 800edde:	2601      	movs	r6, #1
 800ede0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ede4:	e7eb      	b.n	800edbe <_strtol_l.isra.0+0x72>
 800ede6:	2c2b      	cmp	r4, #43	; 0x2b
 800ede8:	bf08      	it	eq
 800edea:	f89e 4000 	ldrbeq.w	r4, [lr]
 800edee:	46a8      	mov	r8, r5
 800edf0:	bf08      	it	eq
 800edf2:	f106 0e02 	addeq.w	lr, r6, #2
 800edf6:	e7c7      	b.n	800ed88 <_strtol_l.isra.0+0x3c>
 800edf8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800edfc:	2f19      	cmp	r7, #25
 800edfe:	d801      	bhi.n	800ee04 <_strtol_l.isra.0+0xb8>
 800ee00:	3c37      	subs	r4, #55	; 0x37
 800ee02:	e7e1      	b.n	800edc8 <_strtol_l.isra.0+0x7c>
 800ee04:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ee08:	2f19      	cmp	r7, #25
 800ee0a:	d804      	bhi.n	800ee16 <_strtol_l.isra.0+0xca>
 800ee0c:	3c57      	subs	r4, #87	; 0x57
 800ee0e:	e7db      	b.n	800edc8 <_strtol_l.isra.0+0x7c>
 800ee10:	f04f 36ff 	mov.w	r6, #4294967295
 800ee14:	e7e4      	b.n	800ede0 <_strtol_l.isra.0+0x94>
 800ee16:	2e00      	cmp	r6, #0
 800ee18:	da05      	bge.n	800ee26 <_strtol_l.isra.0+0xda>
 800ee1a:	2322      	movs	r3, #34	; 0x22
 800ee1c:	6003      	str	r3, [r0, #0]
 800ee1e:	4665      	mov	r5, ip
 800ee20:	b942      	cbnz	r2, 800ee34 <_strtol_l.isra.0+0xe8>
 800ee22:	4628      	mov	r0, r5
 800ee24:	e79d      	b.n	800ed62 <_strtol_l.isra.0+0x16>
 800ee26:	f1b8 0f00 	cmp.w	r8, #0
 800ee2a:	d000      	beq.n	800ee2e <_strtol_l.isra.0+0xe2>
 800ee2c:	426d      	negs	r5, r5
 800ee2e:	2a00      	cmp	r2, #0
 800ee30:	d0f7      	beq.n	800ee22 <_strtol_l.isra.0+0xd6>
 800ee32:	b10e      	cbz	r6, 800ee38 <_strtol_l.isra.0+0xec>
 800ee34:	f10e 31ff 	add.w	r1, lr, #4294967295
 800ee38:	6011      	str	r1, [r2, #0]
 800ee3a:	e7f2      	b.n	800ee22 <_strtol_l.isra.0+0xd6>
 800ee3c:	2430      	movs	r4, #48	; 0x30
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d1b3      	bne.n	800edaa <_strtol_l.isra.0+0x5e>
 800ee42:	2308      	movs	r3, #8
 800ee44:	e7b1      	b.n	800edaa <_strtol_l.isra.0+0x5e>
 800ee46:	2c30      	cmp	r4, #48	; 0x30
 800ee48:	d0a4      	beq.n	800ed94 <_strtol_l.isra.0+0x48>
 800ee4a:	230a      	movs	r3, #10
 800ee4c:	e7ad      	b.n	800edaa <_strtol_l.isra.0+0x5e>
 800ee4e:	bf00      	nop
 800ee50:	08012f99 	.word	0x08012f99

0800ee54 <strtol>:
 800ee54:	4613      	mov	r3, r2
 800ee56:	460a      	mov	r2, r1
 800ee58:	4601      	mov	r1, r0
 800ee5a:	4802      	ldr	r0, [pc, #8]	; (800ee64 <strtol+0x10>)
 800ee5c:	6800      	ldr	r0, [r0, #0]
 800ee5e:	f7ff bf75 	b.w	800ed4c <_strtol_l.isra.0>
 800ee62:	bf00      	nop
 800ee64:	2000002c 	.word	0x2000002c

0800ee68 <__swbuf_r>:
 800ee68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee6a:	460e      	mov	r6, r1
 800ee6c:	4614      	mov	r4, r2
 800ee6e:	4605      	mov	r5, r0
 800ee70:	b118      	cbz	r0, 800ee7a <__swbuf_r+0x12>
 800ee72:	6983      	ldr	r3, [r0, #24]
 800ee74:	b90b      	cbnz	r3, 800ee7a <__swbuf_r+0x12>
 800ee76:	f001 f849 	bl	800ff0c <__sinit>
 800ee7a:	4b21      	ldr	r3, [pc, #132]	; (800ef00 <__swbuf_r+0x98>)
 800ee7c:	429c      	cmp	r4, r3
 800ee7e:	d12b      	bne.n	800eed8 <__swbuf_r+0x70>
 800ee80:	686c      	ldr	r4, [r5, #4]
 800ee82:	69a3      	ldr	r3, [r4, #24]
 800ee84:	60a3      	str	r3, [r4, #8]
 800ee86:	89a3      	ldrh	r3, [r4, #12]
 800ee88:	071a      	lsls	r2, r3, #28
 800ee8a:	d52f      	bpl.n	800eeec <__swbuf_r+0x84>
 800ee8c:	6923      	ldr	r3, [r4, #16]
 800ee8e:	b36b      	cbz	r3, 800eeec <__swbuf_r+0x84>
 800ee90:	6923      	ldr	r3, [r4, #16]
 800ee92:	6820      	ldr	r0, [r4, #0]
 800ee94:	1ac0      	subs	r0, r0, r3
 800ee96:	6963      	ldr	r3, [r4, #20]
 800ee98:	b2f6      	uxtb	r6, r6
 800ee9a:	4283      	cmp	r3, r0
 800ee9c:	4637      	mov	r7, r6
 800ee9e:	dc04      	bgt.n	800eeaa <__swbuf_r+0x42>
 800eea0:	4621      	mov	r1, r4
 800eea2:	4628      	mov	r0, r5
 800eea4:	f000 ff9e 	bl	800fde4 <_fflush_r>
 800eea8:	bb30      	cbnz	r0, 800eef8 <__swbuf_r+0x90>
 800eeaa:	68a3      	ldr	r3, [r4, #8]
 800eeac:	3b01      	subs	r3, #1
 800eeae:	60a3      	str	r3, [r4, #8]
 800eeb0:	6823      	ldr	r3, [r4, #0]
 800eeb2:	1c5a      	adds	r2, r3, #1
 800eeb4:	6022      	str	r2, [r4, #0]
 800eeb6:	701e      	strb	r6, [r3, #0]
 800eeb8:	6963      	ldr	r3, [r4, #20]
 800eeba:	3001      	adds	r0, #1
 800eebc:	4283      	cmp	r3, r0
 800eebe:	d004      	beq.n	800eeca <__swbuf_r+0x62>
 800eec0:	89a3      	ldrh	r3, [r4, #12]
 800eec2:	07db      	lsls	r3, r3, #31
 800eec4:	d506      	bpl.n	800eed4 <__swbuf_r+0x6c>
 800eec6:	2e0a      	cmp	r6, #10
 800eec8:	d104      	bne.n	800eed4 <__swbuf_r+0x6c>
 800eeca:	4621      	mov	r1, r4
 800eecc:	4628      	mov	r0, r5
 800eece:	f000 ff89 	bl	800fde4 <_fflush_r>
 800eed2:	b988      	cbnz	r0, 800eef8 <__swbuf_r+0x90>
 800eed4:	4638      	mov	r0, r7
 800eed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eed8:	4b0a      	ldr	r3, [pc, #40]	; (800ef04 <__swbuf_r+0x9c>)
 800eeda:	429c      	cmp	r4, r3
 800eedc:	d101      	bne.n	800eee2 <__swbuf_r+0x7a>
 800eede:	68ac      	ldr	r4, [r5, #8]
 800eee0:	e7cf      	b.n	800ee82 <__swbuf_r+0x1a>
 800eee2:	4b09      	ldr	r3, [pc, #36]	; (800ef08 <__swbuf_r+0xa0>)
 800eee4:	429c      	cmp	r4, r3
 800eee6:	bf08      	it	eq
 800eee8:	68ec      	ldreq	r4, [r5, #12]
 800eeea:	e7ca      	b.n	800ee82 <__swbuf_r+0x1a>
 800eeec:	4621      	mov	r1, r4
 800eeee:	4628      	mov	r0, r5
 800eef0:	f000 f80c 	bl	800ef0c <__swsetup_r>
 800eef4:	2800      	cmp	r0, #0
 800eef6:	d0cb      	beq.n	800ee90 <__swbuf_r+0x28>
 800eef8:	f04f 37ff 	mov.w	r7, #4294967295
 800eefc:	e7ea      	b.n	800eed4 <__swbuf_r+0x6c>
 800eefe:	bf00      	nop
 800ef00:	08013150 	.word	0x08013150
 800ef04:	08013170 	.word	0x08013170
 800ef08:	08013130 	.word	0x08013130

0800ef0c <__swsetup_r>:
 800ef0c:	4b32      	ldr	r3, [pc, #200]	; (800efd8 <__swsetup_r+0xcc>)
 800ef0e:	b570      	push	{r4, r5, r6, lr}
 800ef10:	681d      	ldr	r5, [r3, #0]
 800ef12:	4606      	mov	r6, r0
 800ef14:	460c      	mov	r4, r1
 800ef16:	b125      	cbz	r5, 800ef22 <__swsetup_r+0x16>
 800ef18:	69ab      	ldr	r3, [r5, #24]
 800ef1a:	b913      	cbnz	r3, 800ef22 <__swsetup_r+0x16>
 800ef1c:	4628      	mov	r0, r5
 800ef1e:	f000 fff5 	bl	800ff0c <__sinit>
 800ef22:	4b2e      	ldr	r3, [pc, #184]	; (800efdc <__swsetup_r+0xd0>)
 800ef24:	429c      	cmp	r4, r3
 800ef26:	d10f      	bne.n	800ef48 <__swsetup_r+0x3c>
 800ef28:	686c      	ldr	r4, [r5, #4]
 800ef2a:	89a3      	ldrh	r3, [r4, #12]
 800ef2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef30:	0719      	lsls	r1, r3, #28
 800ef32:	d42c      	bmi.n	800ef8e <__swsetup_r+0x82>
 800ef34:	06dd      	lsls	r5, r3, #27
 800ef36:	d411      	bmi.n	800ef5c <__swsetup_r+0x50>
 800ef38:	2309      	movs	r3, #9
 800ef3a:	6033      	str	r3, [r6, #0]
 800ef3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ef40:	81a3      	strh	r3, [r4, #12]
 800ef42:	f04f 30ff 	mov.w	r0, #4294967295
 800ef46:	e03e      	b.n	800efc6 <__swsetup_r+0xba>
 800ef48:	4b25      	ldr	r3, [pc, #148]	; (800efe0 <__swsetup_r+0xd4>)
 800ef4a:	429c      	cmp	r4, r3
 800ef4c:	d101      	bne.n	800ef52 <__swsetup_r+0x46>
 800ef4e:	68ac      	ldr	r4, [r5, #8]
 800ef50:	e7eb      	b.n	800ef2a <__swsetup_r+0x1e>
 800ef52:	4b24      	ldr	r3, [pc, #144]	; (800efe4 <__swsetup_r+0xd8>)
 800ef54:	429c      	cmp	r4, r3
 800ef56:	bf08      	it	eq
 800ef58:	68ec      	ldreq	r4, [r5, #12]
 800ef5a:	e7e6      	b.n	800ef2a <__swsetup_r+0x1e>
 800ef5c:	0758      	lsls	r0, r3, #29
 800ef5e:	d512      	bpl.n	800ef86 <__swsetup_r+0x7a>
 800ef60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef62:	b141      	cbz	r1, 800ef76 <__swsetup_r+0x6a>
 800ef64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef68:	4299      	cmp	r1, r3
 800ef6a:	d002      	beq.n	800ef72 <__swsetup_r+0x66>
 800ef6c:	4630      	mov	r0, r6
 800ef6e:	f002 f929 	bl	80111c4 <_free_r>
 800ef72:	2300      	movs	r3, #0
 800ef74:	6363      	str	r3, [r4, #52]	; 0x34
 800ef76:	89a3      	ldrh	r3, [r4, #12]
 800ef78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ef7c:	81a3      	strh	r3, [r4, #12]
 800ef7e:	2300      	movs	r3, #0
 800ef80:	6063      	str	r3, [r4, #4]
 800ef82:	6923      	ldr	r3, [r4, #16]
 800ef84:	6023      	str	r3, [r4, #0]
 800ef86:	89a3      	ldrh	r3, [r4, #12]
 800ef88:	f043 0308 	orr.w	r3, r3, #8
 800ef8c:	81a3      	strh	r3, [r4, #12]
 800ef8e:	6923      	ldr	r3, [r4, #16]
 800ef90:	b94b      	cbnz	r3, 800efa6 <__swsetup_r+0x9a>
 800ef92:	89a3      	ldrh	r3, [r4, #12]
 800ef94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ef98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef9c:	d003      	beq.n	800efa6 <__swsetup_r+0x9a>
 800ef9e:	4621      	mov	r1, r4
 800efa0:	4630      	mov	r0, r6
 800efa2:	f001 fbeb 	bl	801077c <__smakebuf_r>
 800efa6:	89a0      	ldrh	r0, [r4, #12]
 800efa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800efac:	f010 0301 	ands.w	r3, r0, #1
 800efb0:	d00a      	beq.n	800efc8 <__swsetup_r+0xbc>
 800efb2:	2300      	movs	r3, #0
 800efb4:	60a3      	str	r3, [r4, #8]
 800efb6:	6963      	ldr	r3, [r4, #20]
 800efb8:	425b      	negs	r3, r3
 800efba:	61a3      	str	r3, [r4, #24]
 800efbc:	6923      	ldr	r3, [r4, #16]
 800efbe:	b943      	cbnz	r3, 800efd2 <__swsetup_r+0xc6>
 800efc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800efc4:	d1ba      	bne.n	800ef3c <__swsetup_r+0x30>
 800efc6:	bd70      	pop	{r4, r5, r6, pc}
 800efc8:	0781      	lsls	r1, r0, #30
 800efca:	bf58      	it	pl
 800efcc:	6963      	ldrpl	r3, [r4, #20]
 800efce:	60a3      	str	r3, [r4, #8]
 800efd0:	e7f4      	b.n	800efbc <__swsetup_r+0xb0>
 800efd2:	2000      	movs	r0, #0
 800efd4:	e7f7      	b.n	800efc6 <__swsetup_r+0xba>
 800efd6:	bf00      	nop
 800efd8:	2000002c 	.word	0x2000002c
 800efdc:	08013150 	.word	0x08013150
 800efe0:	08013170 	.word	0x08013170
 800efe4:	08013130 	.word	0x08013130

0800efe8 <quorem>:
 800efe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efec:	6903      	ldr	r3, [r0, #16]
 800efee:	690c      	ldr	r4, [r1, #16]
 800eff0:	42a3      	cmp	r3, r4
 800eff2:	4607      	mov	r7, r0
 800eff4:	f2c0 8081 	blt.w	800f0fa <quorem+0x112>
 800eff8:	3c01      	subs	r4, #1
 800effa:	f101 0814 	add.w	r8, r1, #20
 800effe:	f100 0514 	add.w	r5, r0, #20
 800f002:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f006:	9301      	str	r3, [sp, #4]
 800f008:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f00c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f010:	3301      	adds	r3, #1
 800f012:	429a      	cmp	r2, r3
 800f014:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f018:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f01c:	fbb2 f6f3 	udiv	r6, r2, r3
 800f020:	d331      	bcc.n	800f086 <quorem+0x9e>
 800f022:	f04f 0e00 	mov.w	lr, #0
 800f026:	4640      	mov	r0, r8
 800f028:	46ac      	mov	ip, r5
 800f02a:	46f2      	mov	sl, lr
 800f02c:	f850 2b04 	ldr.w	r2, [r0], #4
 800f030:	b293      	uxth	r3, r2
 800f032:	fb06 e303 	mla	r3, r6, r3, lr
 800f036:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f03a:	b29b      	uxth	r3, r3
 800f03c:	ebaa 0303 	sub.w	r3, sl, r3
 800f040:	0c12      	lsrs	r2, r2, #16
 800f042:	f8dc a000 	ldr.w	sl, [ip]
 800f046:	fb06 e202 	mla	r2, r6, r2, lr
 800f04a:	fa13 f38a 	uxtah	r3, r3, sl
 800f04e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f052:	fa1f fa82 	uxth.w	sl, r2
 800f056:	f8dc 2000 	ldr.w	r2, [ip]
 800f05a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f05e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f062:	b29b      	uxth	r3, r3
 800f064:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f068:	4581      	cmp	r9, r0
 800f06a:	f84c 3b04 	str.w	r3, [ip], #4
 800f06e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f072:	d2db      	bcs.n	800f02c <quorem+0x44>
 800f074:	f855 300b 	ldr.w	r3, [r5, fp]
 800f078:	b92b      	cbnz	r3, 800f086 <quorem+0x9e>
 800f07a:	9b01      	ldr	r3, [sp, #4]
 800f07c:	3b04      	subs	r3, #4
 800f07e:	429d      	cmp	r5, r3
 800f080:	461a      	mov	r2, r3
 800f082:	d32e      	bcc.n	800f0e2 <quorem+0xfa>
 800f084:	613c      	str	r4, [r7, #16]
 800f086:	4638      	mov	r0, r7
 800f088:	f001 fe9a 	bl	8010dc0 <__mcmp>
 800f08c:	2800      	cmp	r0, #0
 800f08e:	db24      	blt.n	800f0da <quorem+0xf2>
 800f090:	3601      	adds	r6, #1
 800f092:	4628      	mov	r0, r5
 800f094:	f04f 0c00 	mov.w	ip, #0
 800f098:	f858 2b04 	ldr.w	r2, [r8], #4
 800f09c:	f8d0 e000 	ldr.w	lr, [r0]
 800f0a0:	b293      	uxth	r3, r2
 800f0a2:	ebac 0303 	sub.w	r3, ip, r3
 800f0a6:	0c12      	lsrs	r2, r2, #16
 800f0a8:	fa13 f38e 	uxtah	r3, r3, lr
 800f0ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f0b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f0b4:	b29b      	uxth	r3, r3
 800f0b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f0ba:	45c1      	cmp	r9, r8
 800f0bc:	f840 3b04 	str.w	r3, [r0], #4
 800f0c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f0c4:	d2e8      	bcs.n	800f098 <quorem+0xb0>
 800f0c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f0ce:	b922      	cbnz	r2, 800f0da <quorem+0xf2>
 800f0d0:	3b04      	subs	r3, #4
 800f0d2:	429d      	cmp	r5, r3
 800f0d4:	461a      	mov	r2, r3
 800f0d6:	d30a      	bcc.n	800f0ee <quorem+0x106>
 800f0d8:	613c      	str	r4, [r7, #16]
 800f0da:	4630      	mov	r0, r6
 800f0dc:	b003      	add	sp, #12
 800f0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0e2:	6812      	ldr	r2, [r2, #0]
 800f0e4:	3b04      	subs	r3, #4
 800f0e6:	2a00      	cmp	r2, #0
 800f0e8:	d1cc      	bne.n	800f084 <quorem+0x9c>
 800f0ea:	3c01      	subs	r4, #1
 800f0ec:	e7c7      	b.n	800f07e <quorem+0x96>
 800f0ee:	6812      	ldr	r2, [r2, #0]
 800f0f0:	3b04      	subs	r3, #4
 800f0f2:	2a00      	cmp	r2, #0
 800f0f4:	d1f0      	bne.n	800f0d8 <quorem+0xf0>
 800f0f6:	3c01      	subs	r4, #1
 800f0f8:	e7eb      	b.n	800f0d2 <quorem+0xea>
 800f0fa:	2000      	movs	r0, #0
 800f0fc:	e7ee      	b.n	800f0dc <quorem+0xf4>
	...

0800f100 <_dtoa_r>:
 800f100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f104:	ed2d 8b02 	vpush	{d8}
 800f108:	ec57 6b10 	vmov	r6, r7, d0
 800f10c:	b095      	sub	sp, #84	; 0x54
 800f10e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f110:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f114:	9105      	str	r1, [sp, #20]
 800f116:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f11a:	4604      	mov	r4, r0
 800f11c:	9209      	str	r2, [sp, #36]	; 0x24
 800f11e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f120:	b975      	cbnz	r5, 800f140 <_dtoa_r+0x40>
 800f122:	2010      	movs	r0, #16
 800f124:	f001 fb6a 	bl	80107fc <malloc>
 800f128:	4602      	mov	r2, r0
 800f12a:	6260      	str	r0, [r4, #36]	; 0x24
 800f12c:	b920      	cbnz	r0, 800f138 <_dtoa_r+0x38>
 800f12e:	4bb2      	ldr	r3, [pc, #712]	; (800f3f8 <_dtoa_r+0x2f8>)
 800f130:	21ea      	movs	r1, #234	; 0xea
 800f132:	48b2      	ldr	r0, [pc, #712]	; (800f3fc <_dtoa_r+0x2fc>)
 800f134:	f002 fad8 	bl	80116e8 <__assert_func>
 800f138:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f13c:	6005      	str	r5, [r0, #0]
 800f13e:	60c5      	str	r5, [r0, #12]
 800f140:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f142:	6819      	ldr	r1, [r3, #0]
 800f144:	b151      	cbz	r1, 800f15c <_dtoa_r+0x5c>
 800f146:	685a      	ldr	r2, [r3, #4]
 800f148:	604a      	str	r2, [r1, #4]
 800f14a:	2301      	movs	r3, #1
 800f14c:	4093      	lsls	r3, r2
 800f14e:	608b      	str	r3, [r1, #8]
 800f150:	4620      	mov	r0, r4
 800f152:	f001 fbad 	bl	80108b0 <_Bfree>
 800f156:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f158:	2200      	movs	r2, #0
 800f15a:	601a      	str	r2, [r3, #0]
 800f15c:	1e3b      	subs	r3, r7, #0
 800f15e:	bfb9      	ittee	lt
 800f160:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f164:	9303      	strlt	r3, [sp, #12]
 800f166:	2300      	movge	r3, #0
 800f168:	f8c8 3000 	strge.w	r3, [r8]
 800f16c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f170:	4ba3      	ldr	r3, [pc, #652]	; (800f400 <_dtoa_r+0x300>)
 800f172:	bfbc      	itt	lt
 800f174:	2201      	movlt	r2, #1
 800f176:	f8c8 2000 	strlt.w	r2, [r8]
 800f17a:	ea33 0309 	bics.w	r3, r3, r9
 800f17e:	d11b      	bne.n	800f1b8 <_dtoa_r+0xb8>
 800f180:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f182:	f242 730f 	movw	r3, #9999	; 0x270f
 800f186:	6013      	str	r3, [r2, #0]
 800f188:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f18c:	4333      	orrs	r3, r6
 800f18e:	f000 857a 	beq.w	800fc86 <_dtoa_r+0xb86>
 800f192:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f194:	b963      	cbnz	r3, 800f1b0 <_dtoa_r+0xb0>
 800f196:	4b9b      	ldr	r3, [pc, #620]	; (800f404 <_dtoa_r+0x304>)
 800f198:	e024      	b.n	800f1e4 <_dtoa_r+0xe4>
 800f19a:	4b9b      	ldr	r3, [pc, #620]	; (800f408 <_dtoa_r+0x308>)
 800f19c:	9300      	str	r3, [sp, #0]
 800f19e:	3308      	adds	r3, #8
 800f1a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f1a2:	6013      	str	r3, [r2, #0]
 800f1a4:	9800      	ldr	r0, [sp, #0]
 800f1a6:	b015      	add	sp, #84	; 0x54
 800f1a8:	ecbd 8b02 	vpop	{d8}
 800f1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1b0:	4b94      	ldr	r3, [pc, #592]	; (800f404 <_dtoa_r+0x304>)
 800f1b2:	9300      	str	r3, [sp, #0]
 800f1b4:	3303      	adds	r3, #3
 800f1b6:	e7f3      	b.n	800f1a0 <_dtoa_r+0xa0>
 800f1b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	ec51 0b17 	vmov	r0, r1, d7
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f1c8:	f7f1 fca6 	bl	8000b18 <__aeabi_dcmpeq>
 800f1cc:	4680      	mov	r8, r0
 800f1ce:	b158      	cbz	r0, 800f1e8 <_dtoa_r+0xe8>
 800f1d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	6013      	str	r3, [r2, #0]
 800f1d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	f000 8551 	beq.w	800fc80 <_dtoa_r+0xb80>
 800f1de:	488b      	ldr	r0, [pc, #556]	; (800f40c <_dtoa_r+0x30c>)
 800f1e0:	6018      	str	r0, [r3, #0]
 800f1e2:	1e43      	subs	r3, r0, #1
 800f1e4:	9300      	str	r3, [sp, #0]
 800f1e6:	e7dd      	b.n	800f1a4 <_dtoa_r+0xa4>
 800f1e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f1ec:	aa12      	add	r2, sp, #72	; 0x48
 800f1ee:	a913      	add	r1, sp, #76	; 0x4c
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	f001 ff05 	bl	8011000 <__d2b>
 800f1f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f1fa:	4683      	mov	fp, r0
 800f1fc:	2d00      	cmp	r5, #0
 800f1fe:	d07c      	beq.n	800f2fa <_dtoa_r+0x1fa>
 800f200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f202:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f206:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f20a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f20e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f212:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f216:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f21a:	4b7d      	ldr	r3, [pc, #500]	; (800f410 <_dtoa_r+0x310>)
 800f21c:	2200      	movs	r2, #0
 800f21e:	4630      	mov	r0, r6
 800f220:	4639      	mov	r1, r7
 800f222:	f7f1 f859 	bl	80002d8 <__aeabi_dsub>
 800f226:	a36e      	add	r3, pc, #440	; (adr r3, 800f3e0 <_dtoa_r+0x2e0>)
 800f228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22c:	f7f1 fa0c 	bl	8000648 <__aeabi_dmul>
 800f230:	a36d      	add	r3, pc, #436	; (adr r3, 800f3e8 <_dtoa_r+0x2e8>)
 800f232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f236:	f7f1 f851 	bl	80002dc <__adddf3>
 800f23a:	4606      	mov	r6, r0
 800f23c:	4628      	mov	r0, r5
 800f23e:	460f      	mov	r7, r1
 800f240:	f7f1 f998 	bl	8000574 <__aeabi_i2d>
 800f244:	a36a      	add	r3, pc, #424	; (adr r3, 800f3f0 <_dtoa_r+0x2f0>)
 800f246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f24a:	f7f1 f9fd 	bl	8000648 <__aeabi_dmul>
 800f24e:	4602      	mov	r2, r0
 800f250:	460b      	mov	r3, r1
 800f252:	4630      	mov	r0, r6
 800f254:	4639      	mov	r1, r7
 800f256:	f7f1 f841 	bl	80002dc <__adddf3>
 800f25a:	4606      	mov	r6, r0
 800f25c:	460f      	mov	r7, r1
 800f25e:	f7f1 fca3 	bl	8000ba8 <__aeabi_d2iz>
 800f262:	2200      	movs	r2, #0
 800f264:	4682      	mov	sl, r0
 800f266:	2300      	movs	r3, #0
 800f268:	4630      	mov	r0, r6
 800f26a:	4639      	mov	r1, r7
 800f26c:	f7f1 fc5e 	bl	8000b2c <__aeabi_dcmplt>
 800f270:	b148      	cbz	r0, 800f286 <_dtoa_r+0x186>
 800f272:	4650      	mov	r0, sl
 800f274:	f7f1 f97e 	bl	8000574 <__aeabi_i2d>
 800f278:	4632      	mov	r2, r6
 800f27a:	463b      	mov	r3, r7
 800f27c:	f7f1 fc4c 	bl	8000b18 <__aeabi_dcmpeq>
 800f280:	b908      	cbnz	r0, 800f286 <_dtoa_r+0x186>
 800f282:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f286:	f1ba 0f16 	cmp.w	sl, #22
 800f28a:	d854      	bhi.n	800f336 <_dtoa_r+0x236>
 800f28c:	4b61      	ldr	r3, [pc, #388]	; (800f414 <_dtoa_r+0x314>)
 800f28e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f296:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f29a:	f7f1 fc47 	bl	8000b2c <__aeabi_dcmplt>
 800f29e:	2800      	cmp	r0, #0
 800f2a0:	d04b      	beq.n	800f33a <_dtoa_r+0x23a>
 800f2a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	930e      	str	r3, [sp, #56]	; 0x38
 800f2aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f2ac:	1b5d      	subs	r5, r3, r5
 800f2ae:	1e6b      	subs	r3, r5, #1
 800f2b0:	9304      	str	r3, [sp, #16]
 800f2b2:	bf43      	ittte	mi
 800f2b4:	2300      	movmi	r3, #0
 800f2b6:	f1c5 0801 	rsbmi	r8, r5, #1
 800f2ba:	9304      	strmi	r3, [sp, #16]
 800f2bc:	f04f 0800 	movpl.w	r8, #0
 800f2c0:	f1ba 0f00 	cmp.w	sl, #0
 800f2c4:	db3b      	blt.n	800f33e <_dtoa_r+0x23e>
 800f2c6:	9b04      	ldr	r3, [sp, #16]
 800f2c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f2cc:	4453      	add	r3, sl
 800f2ce:	9304      	str	r3, [sp, #16]
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	9306      	str	r3, [sp, #24]
 800f2d4:	9b05      	ldr	r3, [sp, #20]
 800f2d6:	2b09      	cmp	r3, #9
 800f2d8:	d869      	bhi.n	800f3ae <_dtoa_r+0x2ae>
 800f2da:	2b05      	cmp	r3, #5
 800f2dc:	bfc4      	itt	gt
 800f2de:	3b04      	subgt	r3, #4
 800f2e0:	9305      	strgt	r3, [sp, #20]
 800f2e2:	9b05      	ldr	r3, [sp, #20]
 800f2e4:	f1a3 0302 	sub.w	r3, r3, #2
 800f2e8:	bfcc      	ite	gt
 800f2ea:	2500      	movgt	r5, #0
 800f2ec:	2501      	movle	r5, #1
 800f2ee:	2b03      	cmp	r3, #3
 800f2f0:	d869      	bhi.n	800f3c6 <_dtoa_r+0x2c6>
 800f2f2:	e8df f003 	tbb	[pc, r3]
 800f2f6:	4e2c      	.short	0x4e2c
 800f2f8:	5a4c      	.short	0x5a4c
 800f2fa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f2fe:	441d      	add	r5, r3
 800f300:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f304:	2b20      	cmp	r3, #32
 800f306:	bfc1      	itttt	gt
 800f308:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f30c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f310:	fa09 f303 	lslgt.w	r3, r9, r3
 800f314:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f318:	bfda      	itte	le
 800f31a:	f1c3 0320 	rsble	r3, r3, #32
 800f31e:	fa06 f003 	lslle.w	r0, r6, r3
 800f322:	4318      	orrgt	r0, r3
 800f324:	f7f1 f916 	bl	8000554 <__aeabi_ui2d>
 800f328:	2301      	movs	r3, #1
 800f32a:	4606      	mov	r6, r0
 800f32c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f330:	3d01      	subs	r5, #1
 800f332:	9310      	str	r3, [sp, #64]	; 0x40
 800f334:	e771      	b.n	800f21a <_dtoa_r+0x11a>
 800f336:	2301      	movs	r3, #1
 800f338:	e7b6      	b.n	800f2a8 <_dtoa_r+0x1a8>
 800f33a:	900e      	str	r0, [sp, #56]	; 0x38
 800f33c:	e7b5      	b.n	800f2aa <_dtoa_r+0x1aa>
 800f33e:	f1ca 0300 	rsb	r3, sl, #0
 800f342:	9306      	str	r3, [sp, #24]
 800f344:	2300      	movs	r3, #0
 800f346:	eba8 080a 	sub.w	r8, r8, sl
 800f34a:	930d      	str	r3, [sp, #52]	; 0x34
 800f34c:	e7c2      	b.n	800f2d4 <_dtoa_r+0x1d4>
 800f34e:	2300      	movs	r3, #0
 800f350:	9308      	str	r3, [sp, #32]
 800f352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f354:	2b00      	cmp	r3, #0
 800f356:	dc39      	bgt.n	800f3cc <_dtoa_r+0x2cc>
 800f358:	f04f 0901 	mov.w	r9, #1
 800f35c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f360:	464b      	mov	r3, r9
 800f362:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f366:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f368:	2200      	movs	r2, #0
 800f36a:	6042      	str	r2, [r0, #4]
 800f36c:	2204      	movs	r2, #4
 800f36e:	f102 0614 	add.w	r6, r2, #20
 800f372:	429e      	cmp	r6, r3
 800f374:	6841      	ldr	r1, [r0, #4]
 800f376:	d92f      	bls.n	800f3d8 <_dtoa_r+0x2d8>
 800f378:	4620      	mov	r0, r4
 800f37a:	f001 fa59 	bl	8010830 <_Balloc>
 800f37e:	9000      	str	r0, [sp, #0]
 800f380:	2800      	cmp	r0, #0
 800f382:	d14b      	bne.n	800f41c <_dtoa_r+0x31c>
 800f384:	4b24      	ldr	r3, [pc, #144]	; (800f418 <_dtoa_r+0x318>)
 800f386:	4602      	mov	r2, r0
 800f388:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f38c:	e6d1      	b.n	800f132 <_dtoa_r+0x32>
 800f38e:	2301      	movs	r3, #1
 800f390:	e7de      	b.n	800f350 <_dtoa_r+0x250>
 800f392:	2300      	movs	r3, #0
 800f394:	9308      	str	r3, [sp, #32]
 800f396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f398:	eb0a 0903 	add.w	r9, sl, r3
 800f39c:	f109 0301 	add.w	r3, r9, #1
 800f3a0:	2b01      	cmp	r3, #1
 800f3a2:	9301      	str	r3, [sp, #4]
 800f3a4:	bfb8      	it	lt
 800f3a6:	2301      	movlt	r3, #1
 800f3a8:	e7dd      	b.n	800f366 <_dtoa_r+0x266>
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	e7f2      	b.n	800f394 <_dtoa_r+0x294>
 800f3ae:	2501      	movs	r5, #1
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	9305      	str	r3, [sp, #20]
 800f3b4:	9508      	str	r5, [sp, #32]
 800f3b6:	f04f 39ff 	mov.w	r9, #4294967295
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	f8cd 9004 	str.w	r9, [sp, #4]
 800f3c0:	2312      	movs	r3, #18
 800f3c2:	9209      	str	r2, [sp, #36]	; 0x24
 800f3c4:	e7cf      	b.n	800f366 <_dtoa_r+0x266>
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	9308      	str	r3, [sp, #32]
 800f3ca:	e7f4      	b.n	800f3b6 <_dtoa_r+0x2b6>
 800f3cc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f3d0:	f8cd 9004 	str.w	r9, [sp, #4]
 800f3d4:	464b      	mov	r3, r9
 800f3d6:	e7c6      	b.n	800f366 <_dtoa_r+0x266>
 800f3d8:	3101      	adds	r1, #1
 800f3da:	6041      	str	r1, [r0, #4]
 800f3dc:	0052      	lsls	r2, r2, #1
 800f3de:	e7c6      	b.n	800f36e <_dtoa_r+0x26e>
 800f3e0:	636f4361 	.word	0x636f4361
 800f3e4:	3fd287a7 	.word	0x3fd287a7
 800f3e8:	8b60c8b3 	.word	0x8b60c8b3
 800f3ec:	3fc68a28 	.word	0x3fc68a28
 800f3f0:	509f79fb 	.word	0x509f79fb
 800f3f4:	3fd34413 	.word	0x3fd34413
 800f3f8:	080130a6 	.word	0x080130a6
 800f3fc:	080130bd 	.word	0x080130bd
 800f400:	7ff00000 	.word	0x7ff00000
 800f404:	080130a2 	.word	0x080130a2
 800f408:	08013099 	.word	0x08013099
 800f40c:	08012f25 	.word	0x08012f25
 800f410:	3ff80000 	.word	0x3ff80000
 800f414:	08013298 	.word	0x08013298
 800f418:	0801311c 	.word	0x0801311c
 800f41c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f41e:	9a00      	ldr	r2, [sp, #0]
 800f420:	601a      	str	r2, [r3, #0]
 800f422:	9b01      	ldr	r3, [sp, #4]
 800f424:	2b0e      	cmp	r3, #14
 800f426:	f200 80ad 	bhi.w	800f584 <_dtoa_r+0x484>
 800f42a:	2d00      	cmp	r5, #0
 800f42c:	f000 80aa 	beq.w	800f584 <_dtoa_r+0x484>
 800f430:	f1ba 0f00 	cmp.w	sl, #0
 800f434:	dd36      	ble.n	800f4a4 <_dtoa_r+0x3a4>
 800f436:	4ac3      	ldr	r2, [pc, #780]	; (800f744 <_dtoa_r+0x644>)
 800f438:	f00a 030f 	and.w	r3, sl, #15
 800f43c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f440:	ed93 7b00 	vldr	d7, [r3]
 800f444:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f448:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f44c:	eeb0 8a47 	vmov.f32	s16, s14
 800f450:	eef0 8a67 	vmov.f32	s17, s15
 800f454:	d016      	beq.n	800f484 <_dtoa_r+0x384>
 800f456:	4bbc      	ldr	r3, [pc, #752]	; (800f748 <_dtoa_r+0x648>)
 800f458:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f45c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f460:	f7f1 fa1c 	bl	800089c <__aeabi_ddiv>
 800f464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f468:	f007 070f 	and.w	r7, r7, #15
 800f46c:	2503      	movs	r5, #3
 800f46e:	4eb6      	ldr	r6, [pc, #728]	; (800f748 <_dtoa_r+0x648>)
 800f470:	b957      	cbnz	r7, 800f488 <_dtoa_r+0x388>
 800f472:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f476:	ec53 2b18 	vmov	r2, r3, d8
 800f47a:	f7f1 fa0f 	bl	800089c <__aeabi_ddiv>
 800f47e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f482:	e029      	b.n	800f4d8 <_dtoa_r+0x3d8>
 800f484:	2502      	movs	r5, #2
 800f486:	e7f2      	b.n	800f46e <_dtoa_r+0x36e>
 800f488:	07f9      	lsls	r1, r7, #31
 800f48a:	d508      	bpl.n	800f49e <_dtoa_r+0x39e>
 800f48c:	ec51 0b18 	vmov	r0, r1, d8
 800f490:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f494:	f7f1 f8d8 	bl	8000648 <__aeabi_dmul>
 800f498:	ec41 0b18 	vmov	d8, r0, r1
 800f49c:	3501      	adds	r5, #1
 800f49e:	107f      	asrs	r7, r7, #1
 800f4a0:	3608      	adds	r6, #8
 800f4a2:	e7e5      	b.n	800f470 <_dtoa_r+0x370>
 800f4a4:	f000 80a6 	beq.w	800f5f4 <_dtoa_r+0x4f4>
 800f4a8:	f1ca 0600 	rsb	r6, sl, #0
 800f4ac:	4ba5      	ldr	r3, [pc, #660]	; (800f744 <_dtoa_r+0x644>)
 800f4ae:	4fa6      	ldr	r7, [pc, #664]	; (800f748 <_dtoa_r+0x648>)
 800f4b0:	f006 020f 	and.w	r2, r6, #15
 800f4b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f4c0:	f7f1 f8c2 	bl	8000648 <__aeabi_dmul>
 800f4c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4c8:	1136      	asrs	r6, r6, #4
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	2502      	movs	r5, #2
 800f4ce:	2e00      	cmp	r6, #0
 800f4d0:	f040 8085 	bne.w	800f5de <_dtoa_r+0x4de>
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d1d2      	bne.n	800f47e <_dtoa_r+0x37e>
 800f4d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	f000 808c 	beq.w	800f5f8 <_dtoa_r+0x4f8>
 800f4e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f4e4:	4b99      	ldr	r3, [pc, #612]	; (800f74c <_dtoa_r+0x64c>)
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	4630      	mov	r0, r6
 800f4ea:	4639      	mov	r1, r7
 800f4ec:	f7f1 fb1e 	bl	8000b2c <__aeabi_dcmplt>
 800f4f0:	2800      	cmp	r0, #0
 800f4f2:	f000 8081 	beq.w	800f5f8 <_dtoa_r+0x4f8>
 800f4f6:	9b01      	ldr	r3, [sp, #4]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d07d      	beq.n	800f5f8 <_dtoa_r+0x4f8>
 800f4fc:	f1b9 0f00 	cmp.w	r9, #0
 800f500:	dd3c      	ble.n	800f57c <_dtoa_r+0x47c>
 800f502:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f506:	9307      	str	r3, [sp, #28]
 800f508:	2200      	movs	r2, #0
 800f50a:	4b91      	ldr	r3, [pc, #580]	; (800f750 <_dtoa_r+0x650>)
 800f50c:	4630      	mov	r0, r6
 800f50e:	4639      	mov	r1, r7
 800f510:	f7f1 f89a 	bl	8000648 <__aeabi_dmul>
 800f514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f518:	3501      	adds	r5, #1
 800f51a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f51e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f522:	4628      	mov	r0, r5
 800f524:	f7f1 f826 	bl	8000574 <__aeabi_i2d>
 800f528:	4632      	mov	r2, r6
 800f52a:	463b      	mov	r3, r7
 800f52c:	f7f1 f88c 	bl	8000648 <__aeabi_dmul>
 800f530:	4b88      	ldr	r3, [pc, #544]	; (800f754 <_dtoa_r+0x654>)
 800f532:	2200      	movs	r2, #0
 800f534:	f7f0 fed2 	bl	80002dc <__adddf3>
 800f538:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f53c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f540:	9303      	str	r3, [sp, #12]
 800f542:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f544:	2b00      	cmp	r3, #0
 800f546:	d15c      	bne.n	800f602 <_dtoa_r+0x502>
 800f548:	4b83      	ldr	r3, [pc, #524]	; (800f758 <_dtoa_r+0x658>)
 800f54a:	2200      	movs	r2, #0
 800f54c:	4630      	mov	r0, r6
 800f54e:	4639      	mov	r1, r7
 800f550:	f7f0 fec2 	bl	80002d8 <__aeabi_dsub>
 800f554:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f558:	4606      	mov	r6, r0
 800f55a:	460f      	mov	r7, r1
 800f55c:	f7f1 fb04 	bl	8000b68 <__aeabi_dcmpgt>
 800f560:	2800      	cmp	r0, #0
 800f562:	f040 8296 	bne.w	800fa92 <_dtoa_r+0x992>
 800f566:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f56a:	4630      	mov	r0, r6
 800f56c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f570:	4639      	mov	r1, r7
 800f572:	f7f1 fadb 	bl	8000b2c <__aeabi_dcmplt>
 800f576:	2800      	cmp	r0, #0
 800f578:	f040 8288 	bne.w	800fa8c <_dtoa_r+0x98c>
 800f57c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f580:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f584:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f586:	2b00      	cmp	r3, #0
 800f588:	f2c0 8158 	blt.w	800f83c <_dtoa_r+0x73c>
 800f58c:	f1ba 0f0e 	cmp.w	sl, #14
 800f590:	f300 8154 	bgt.w	800f83c <_dtoa_r+0x73c>
 800f594:	4b6b      	ldr	r3, [pc, #428]	; (800f744 <_dtoa_r+0x644>)
 800f596:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f59a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f59e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	f280 80e3 	bge.w	800f76c <_dtoa_r+0x66c>
 800f5a6:	9b01      	ldr	r3, [sp, #4]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f300 80df 	bgt.w	800f76c <_dtoa_r+0x66c>
 800f5ae:	f040 826d 	bne.w	800fa8c <_dtoa_r+0x98c>
 800f5b2:	4b69      	ldr	r3, [pc, #420]	; (800f758 <_dtoa_r+0x658>)
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	4640      	mov	r0, r8
 800f5b8:	4649      	mov	r1, r9
 800f5ba:	f7f1 f845 	bl	8000648 <__aeabi_dmul>
 800f5be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f5c2:	f7f1 fac7 	bl	8000b54 <__aeabi_dcmpge>
 800f5c6:	9e01      	ldr	r6, [sp, #4]
 800f5c8:	4637      	mov	r7, r6
 800f5ca:	2800      	cmp	r0, #0
 800f5cc:	f040 8243 	bne.w	800fa56 <_dtoa_r+0x956>
 800f5d0:	9d00      	ldr	r5, [sp, #0]
 800f5d2:	2331      	movs	r3, #49	; 0x31
 800f5d4:	f805 3b01 	strb.w	r3, [r5], #1
 800f5d8:	f10a 0a01 	add.w	sl, sl, #1
 800f5dc:	e23f      	b.n	800fa5e <_dtoa_r+0x95e>
 800f5de:	07f2      	lsls	r2, r6, #31
 800f5e0:	d505      	bpl.n	800f5ee <_dtoa_r+0x4ee>
 800f5e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5e6:	f7f1 f82f 	bl	8000648 <__aeabi_dmul>
 800f5ea:	3501      	adds	r5, #1
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	1076      	asrs	r6, r6, #1
 800f5f0:	3708      	adds	r7, #8
 800f5f2:	e76c      	b.n	800f4ce <_dtoa_r+0x3ce>
 800f5f4:	2502      	movs	r5, #2
 800f5f6:	e76f      	b.n	800f4d8 <_dtoa_r+0x3d8>
 800f5f8:	9b01      	ldr	r3, [sp, #4]
 800f5fa:	f8cd a01c 	str.w	sl, [sp, #28]
 800f5fe:	930c      	str	r3, [sp, #48]	; 0x30
 800f600:	e78d      	b.n	800f51e <_dtoa_r+0x41e>
 800f602:	9900      	ldr	r1, [sp, #0]
 800f604:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f606:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f608:	4b4e      	ldr	r3, [pc, #312]	; (800f744 <_dtoa_r+0x644>)
 800f60a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f60e:	4401      	add	r1, r0
 800f610:	9102      	str	r1, [sp, #8]
 800f612:	9908      	ldr	r1, [sp, #32]
 800f614:	eeb0 8a47 	vmov.f32	s16, s14
 800f618:	eef0 8a67 	vmov.f32	s17, s15
 800f61c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f620:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f624:	2900      	cmp	r1, #0
 800f626:	d045      	beq.n	800f6b4 <_dtoa_r+0x5b4>
 800f628:	494c      	ldr	r1, [pc, #304]	; (800f75c <_dtoa_r+0x65c>)
 800f62a:	2000      	movs	r0, #0
 800f62c:	f7f1 f936 	bl	800089c <__aeabi_ddiv>
 800f630:	ec53 2b18 	vmov	r2, r3, d8
 800f634:	f7f0 fe50 	bl	80002d8 <__aeabi_dsub>
 800f638:	9d00      	ldr	r5, [sp, #0]
 800f63a:	ec41 0b18 	vmov	d8, r0, r1
 800f63e:	4639      	mov	r1, r7
 800f640:	4630      	mov	r0, r6
 800f642:	f7f1 fab1 	bl	8000ba8 <__aeabi_d2iz>
 800f646:	900c      	str	r0, [sp, #48]	; 0x30
 800f648:	f7f0 ff94 	bl	8000574 <__aeabi_i2d>
 800f64c:	4602      	mov	r2, r0
 800f64e:	460b      	mov	r3, r1
 800f650:	4630      	mov	r0, r6
 800f652:	4639      	mov	r1, r7
 800f654:	f7f0 fe40 	bl	80002d8 <__aeabi_dsub>
 800f658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f65a:	3330      	adds	r3, #48	; 0x30
 800f65c:	f805 3b01 	strb.w	r3, [r5], #1
 800f660:	ec53 2b18 	vmov	r2, r3, d8
 800f664:	4606      	mov	r6, r0
 800f666:	460f      	mov	r7, r1
 800f668:	f7f1 fa60 	bl	8000b2c <__aeabi_dcmplt>
 800f66c:	2800      	cmp	r0, #0
 800f66e:	d165      	bne.n	800f73c <_dtoa_r+0x63c>
 800f670:	4632      	mov	r2, r6
 800f672:	463b      	mov	r3, r7
 800f674:	4935      	ldr	r1, [pc, #212]	; (800f74c <_dtoa_r+0x64c>)
 800f676:	2000      	movs	r0, #0
 800f678:	f7f0 fe2e 	bl	80002d8 <__aeabi_dsub>
 800f67c:	ec53 2b18 	vmov	r2, r3, d8
 800f680:	f7f1 fa54 	bl	8000b2c <__aeabi_dcmplt>
 800f684:	2800      	cmp	r0, #0
 800f686:	f040 80b9 	bne.w	800f7fc <_dtoa_r+0x6fc>
 800f68a:	9b02      	ldr	r3, [sp, #8]
 800f68c:	429d      	cmp	r5, r3
 800f68e:	f43f af75 	beq.w	800f57c <_dtoa_r+0x47c>
 800f692:	4b2f      	ldr	r3, [pc, #188]	; (800f750 <_dtoa_r+0x650>)
 800f694:	ec51 0b18 	vmov	r0, r1, d8
 800f698:	2200      	movs	r2, #0
 800f69a:	f7f0 ffd5 	bl	8000648 <__aeabi_dmul>
 800f69e:	4b2c      	ldr	r3, [pc, #176]	; (800f750 <_dtoa_r+0x650>)
 800f6a0:	ec41 0b18 	vmov	d8, r0, r1
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	4630      	mov	r0, r6
 800f6a8:	4639      	mov	r1, r7
 800f6aa:	f7f0 ffcd 	bl	8000648 <__aeabi_dmul>
 800f6ae:	4606      	mov	r6, r0
 800f6b0:	460f      	mov	r7, r1
 800f6b2:	e7c4      	b.n	800f63e <_dtoa_r+0x53e>
 800f6b4:	ec51 0b17 	vmov	r0, r1, d7
 800f6b8:	f7f0 ffc6 	bl	8000648 <__aeabi_dmul>
 800f6bc:	9b02      	ldr	r3, [sp, #8]
 800f6be:	9d00      	ldr	r5, [sp, #0]
 800f6c0:	930c      	str	r3, [sp, #48]	; 0x30
 800f6c2:	ec41 0b18 	vmov	d8, r0, r1
 800f6c6:	4639      	mov	r1, r7
 800f6c8:	4630      	mov	r0, r6
 800f6ca:	f7f1 fa6d 	bl	8000ba8 <__aeabi_d2iz>
 800f6ce:	9011      	str	r0, [sp, #68]	; 0x44
 800f6d0:	f7f0 ff50 	bl	8000574 <__aeabi_i2d>
 800f6d4:	4602      	mov	r2, r0
 800f6d6:	460b      	mov	r3, r1
 800f6d8:	4630      	mov	r0, r6
 800f6da:	4639      	mov	r1, r7
 800f6dc:	f7f0 fdfc 	bl	80002d8 <__aeabi_dsub>
 800f6e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f6e2:	3330      	adds	r3, #48	; 0x30
 800f6e4:	f805 3b01 	strb.w	r3, [r5], #1
 800f6e8:	9b02      	ldr	r3, [sp, #8]
 800f6ea:	429d      	cmp	r5, r3
 800f6ec:	4606      	mov	r6, r0
 800f6ee:	460f      	mov	r7, r1
 800f6f0:	f04f 0200 	mov.w	r2, #0
 800f6f4:	d134      	bne.n	800f760 <_dtoa_r+0x660>
 800f6f6:	4b19      	ldr	r3, [pc, #100]	; (800f75c <_dtoa_r+0x65c>)
 800f6f8:	ec51 0b18 	vmov	r0, r1, d8
 800f6fc:	f7f0 fdee 	bl	80002dc <__adddf3>
 800f700:	4602      	mov	r2, r0
 800f702:	460b      	mov	r3, r1
 800f704:	4630      	mov	r0, r6
 800f706:	4639      	mov	r1, r7
 800f708:	f7f1 fa2e 	bl	8000b68 <__aeabi_dcmpgt>
 800f70c:	2800      	cmp	r0, #0
 800f70e:	d175      	bne.n	800f7fc <_dtoa_r+0x6fc>
 800f710:	ec53 2b18 	vmov	r2, r3, d8
 800f714:	4911      	ldr	r1, [pc, #68]	; (800f75c <_dtoa_r+0x65c>)
 800f716:	2000      	movs	r0, #0
 800f718:	f7f0 fdde 	bl	80002d8 <__aeabi_dsub>
 800f71c:	4602      	mov	r2, r0
 800f71e:	460b      	mov	r3, r1
 800f720:	4630      	mov	r0, r6
 800f722:	4639      	mov	r1, r7
 800f724:	f7f1 fa02 	bl	8000b2c <__aeabi_dcmplt>
 800f728:	2800      	cmp	r0, #0
 800f72a:	f43f af27 	beq.w	800f57c <_dtoa_r+0x47c>
 800f72e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f730:	1e6b      	subs	r3, r5, #1
 800f732:	930c      	str	r3, [sp, #48]	; 0x30
 800f734:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f738:	2b30      	cmp	r3, #48	; 0x30
 800f73a:	d0f8      	beq.n	800f72e <_dtoa_r+0x62e>
 800f73c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f740:	e04a      	b.n	800f7d8 <_dtoa_r+0x6d8>
 800f742:	bf00      	nop
 800f744:	08013298 	.word	0x08013298
 800f748:	08013270 	.word	0x08013270
 800f74c:	3ff00000 	.word	0x3ff00000
 800f750:	40240000 	.word	0x40240000
 800f754:	401c0000 	.word	0x401c0000
 800f758:	40140000 	.word	0x40140000
 800f75c:	3fe00000 	.word	0x3fe00000
 800f760:	4baf      	ldr	r3, [pc, #700]	; (800fa20 <_dtoa_r+0x920>)
 800f762:	f7f0 ff71 	bl	8000648 <__aeabi_dmul>
 800f766:	4606      	mov	r6, r0
 800f768:	460f      	mov	r7, r1
 800f76a:	e7ac      	b.n	800f6c6 <_dtoa_r+0x5c6>
 800f76c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f770:	9d00      	ldr	r5, [sp, #0]
 800f772:	4642      	mov	r2, r8
 800f774:	464b      	mov	r3, r9
 800f776:	4630      	mov	r0, r6
 800f778:	4639      	mov	r1, r7
 800f77a:	f7f1 f88f 	bl	800089c <__aeabi_ddiv>
 800f77e:	f7f1 fa13 	bl	8000ba8 <__aeabi_d2iz>
 800f782:	9002      	str	r0, [sp, #8]
 800f784:	f7f0 fef6 	bl	8000574 <__aeabi_i2d>
 800f788:	4642      	mov	r2, r8
 800f78a:	464b      	mov	r3, r9
 800f78c:	f7f0 ff5c 	bl	8000648 <__aeabi_dmul>
 800f790:	4602      	mov	r2, r0
 800f792:	460b      	mov	r3, r1
 800f794:	4630      	mov	r0, r6
 800f796:	4639      	mov	r1, r7
 800f798:	f7f0 fd9e 	bl	80002d8 <__aeabi_dsub>
 800f79c:	9e02      	ldr	r6, [sp, #8]
 800f79e:	9f01      	ldr	r7, [sp, #4]
 800f7a0:	3630      	adds	r6, #48	; 0x30
 800f7a2:	f805 6b01 	strb.w	r6, [r5], #1
 800f7a6:	9e00      	ldr	r6, [sp, #0]
 800f7a8:	1bae      	subs	r6, r5, r6
 800f7aa:	42b7      	cmp	r7, r6
 800f7ac:	4602      	mov	r2, r0
 800f7ae:	460b      	mov	r3, r1
 800f7b0:	d137      	bne.n	800f822 <_dtoa_r+0x722>
 800f7b2:	f7f0 fd93 	bl	80002dc <__adddf3>
 800f7b6:	4642      	mov	r2, r8
 800f7b8:	464b      	mov	r3, r9
 800f7ba:	4606      	mov	r6, r0
 800f7bc:	460f      	mov	r7, r1
 800f7be:	f7f1 f9d3 	bl	8000b68 <__aeabi_dcmpgt>
 800f7c2:	b9c8      	cbnz	r0, 800f7f8 <_dtoa_r+0x6f8>
 800f7c4:	4642      	mov	r2, r8
 800f7c6:	464b      	mov	r3, r9
 800f7c8:	4630      	mov	r0, r6
 800f7ca:	4639      	mov	r1, r7
 800f7cc:	f7f1 f9a4 	bl	8000b18 <__aeabi_dcmpeq>
 800f7d0:	b110      	cbz	r0, 800f7d8 <_dtoa_r+0x6d8>
 800f7d2:	9b02      	ldr	r3, [sp, #8]
 800f7d4:	07d9      	lsls	r1, r3, #31
 800f7d6:	d40f      	bmi.n	800f7f8 <_dtoa_r+0x6f8>
 800f7d8:	4620      	mov	r0, r4
 800f7da:	4659      	mov	r1, fp
 800f7dc:	f001 f868 	bl	80108b0 <_Bfree>
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	702b      	strb	r3, [r5, #0]
 800f7e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f7e6:	f10a 0001 	add.w	r0, sl, #1
 800f7ea:	6018      	str	r0, [r3, #0]
 800f7ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	f43f acd8 	beq.w	800f1a4 <_dtoa_r+0xa4>
 800f7f4:	601d      	str	r5, [r3, #0]
 800f7f6:	e4d5      	b.n	800f1a4 <_dtoa_r+0xa4>
 800f7f8:	f8cd a01c 	str.w	sl, [sp, #28]
 800f7fc:	462b      	mov	r3, r5
 800f7fe:	461d      	mov	r5, r3
 800f800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f804:	2a39      	cmp	r2, #57	; 0x39
 800f806:	d108      	bne.n	800f81a <_dtoa_r+0x71a>
 800f808:	9a00      	ldr	r2, [sp, #0]
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d1f7      	bne.n	800f7fe <_dtoa_r+0x6fe>
 800f80e:	9a07      	ldr	r2, [sp, #28]
 800f810:	9900      	ldr	r1, [sp, #0]
 800f812:	3201      	adds	r2, #1
 800f814:	9207      	str	r2, [sp, #28]
 800f816:	2230      	movs	r2, #48	; 0x30
 800f818:	700a      	strb	r2, [r1, #0]
 800f81a:	781a      	ldrb	r2, [r3, #0]
 800f81c:	3201      	adds	r2, #1
 800f81e:	701a      	strb	r2, [r3, #0]
 800f820:	e78c      	b.n	800f73c <_dtoa_r+0x63c>
 800f822:	4b7f      	ldr	r3, [pc, #508]	; (800fa20 <_dtoa_r+0x920>)
 800f824:	2200      	movs	r2, #0
 800f826:	f7f0 ff0f 	bl	8000648 <__aeabi_dmul>
 800f82a:	2200      	movs	r2, #0
 800f82c:	2300      	movs	r3, #0
 800f82e:	4606      	mov	r6, r0
 800f830:	460f      	mov	r7, r1
 800f832:	f7f1 f971 	bl	8000b18 <__aeabi_dcmpeq>
 800f836:	2800      	cmp	r0, #0
 800f838:	d09b      	beq.n	800f772 <_dtoa_r+0x672>
 800f83a:	e7cd      	b.n	800f7d8 <_dtoa_r+0x6d8>
 800f83c:	9a08      	ldr	r2, [sp, #32]
 800f83e:	2a00      	cmp	r2, #0
 800f840:	f000 80c4 	beq.w	800f9cc <_dtoa_r+0x8cc>
 800f844:	9a05      	ldr	r2, [sp, #20]
 800f846:	2a01      	cmp	r2, #1
 800f848:	f300 80a8 	bgt.w	800f99c <_dtoa_r+0x89c>
 800f84c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f84e:	2a00      	cmp	r2, #0
 800f850:	f000 80a0 	beq.w	800f994 <_dtoa_r+0x894>
 800f854:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f858:	9e06      	ldr	r6, [sp, #24]
 800f85a:	4645      	mov	r5, r8
 800f85c:	9a04      	ldr	r2, [sp, #16]
 800f85e:	2101      	movs	r1, #1
 800f860:	441a      	add	r2, r3
 800f862:	4620      	mov	r0, r4
 800f864:	4498      	add	r8, r3
 800f866:	9204      	str	r2, [sp, #16]
 800f868:	f001 f928 	bl	8010abc <__i2b>
 800f86c:	4607      	mov	r7, r0
 800f86e:	2d00      	cmp	r5, #0
 800f870:	dd0b      	ble.n	800f88a <_dtoa_r+0x78a>
 800f872:	9b04      	ldr	r3, [sp, #16]
 800f874:	2b00      	cmp	r3, #0
 800f876:	dd08      	ble.n	800f88a <_dtoa_r+0x78a>
 800f878:	42ab      	cmp	r3, r5
 800f87a:	9a04      	ldr	r2, [sp, #16]
 800f87c:	bfa8      	it	ge
 800f87e:	462b      	movge	r3, r5
 800f880:	eba8 0803 	sub.w	r8, r8, r3
 800f884:	1aed      	subs	r5, r5, r3
 800f886:	1ad3      	subs	r3, r2, r3
 800f888:	9304      	str	r3, [sp, #16]
 800f88a:	9b06      	ldr	r3, [sp, #24]
 800f88c:	b1fb      	cbz	r3, 800f8ce <_dtoa_r+0x7ce>
 800f88e:	9b08      	ldr	r3, [sp, #32]
 800f890:	2b00      	cmp	r3, #0
 800f892:	f000 809f 	beq.w	800f9d4 <_dtoa_r+0x8d4>
 800f896:	2e00      	cmp	r6, #0
 800f898:	dd11      	ble.n	800f8be <_dtoa_r+0x7be>
 800f89a:	4639      	mov	r1, r7
 800f89c:	4632      	mov	r2, r6
 800f89e:	4620      	mov	r0, r4
 800f8a0:	f001 f9c8 	bl	8010c34 <__pow5mult>
 800f8a4:	465a      	mov	r2, fp
 800f8a6:	4601      	mov	r1, r0
 800f8a8:	4607      	mov	r7, r0
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	f001 f91c 	bl	8010ae8 <__multiply>
 800f8b0:	4659      	mov	r1, fp
 800f8b2:	9007      	str	r0, [sp, #28]
 800f8b4:	4620      	mov	r0, r4
 800f8b6:	f000 fffb 	bl	80108b0 <_Bfree>
 800f8ba:	9b07      	ldr	r3, [sp, #28]
 800f8bc:	469b      	mov	fp, r3
 800f8be:	9b06      	ldr	r3, [sp, #24]
 800f8c0:	1b9a      	subs	r2, r3, r6
 800f8c2:	d004      	beq.n	800f8ce <_dtoa_r+0x7ce>
 800f8c4:	4659      	mov	r1, fp
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	f001 f9b4 	bl	8010c34 <__pow5mult>
 800f8cc:	4683      	mov	fp, r0
 800f8ce:	2101      	movs	r1, #1
 800f8d0:	4620      	mov	r0, r4
 800f8d2:	f001 f8f3 	bl	8010abc <__i2b>
 800f8d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	4606      	mov	r6, r0
 800f8dc:	dd7c      	ble.n	800f9d8 <_dtoa_r+0x8d8>
 800f8de:	461a      	mov	r2, r3
 800f8e0:	4601      	mov	r1, r0
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	f001 f9a6 	bl	8010c34 <__pow5mult>
 800f8e8:	9b05      	ldr	r3, [sp, #20]
 800f8ea:	2b01      	cmp	r3, #1
 800f8ec:	4606      	mov	r6, r0
 800f8ee:	dd76      	ble.n	800f9de <_dtoa_r+0x8de>
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	9306      	str	r3, [sp, #24]
 800f8f4:	6933      	ldr	r3, [r6, #16]
 800f8f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f8fa:	6918      	ldr	r0, [r3, #16]
 800f8fc:	f001 f88e 	bl	8010a1c <__hi0bits>
 800f900:	f1c0 0020 	rsb	r0, r0, #32
 800f904:	9b04      	ldr	r3, [sp, #16]
 800f906:	4418      	add	r0, r3
 800f908:	f010 001f 	ands.w	r0, r0, #31
 800f90c:	f000 8086 	beq.w	800fa1c <_dtoa_r+0x91c>
 800f910:	f1c0 0320 	rsb	r3, r0, #32
 800f914:	2b04      	cmp	r3, #4
 800f916:	dd7f      	ble.n	800fa18 <_dtoa_r+0x918>
 800f918:	f1c0 001c 	rsb	r0, r0, #28
 800f91c:	9b04      	ldr	r3, [sp, #16]
 800f91e:	4403      	add	r3, r0
 800f920:	4480      	add	r8, r0
 800f922:	4405      	add	r5, r0
 800f924:	9304      	str	r3, [sp, #16]
 800f926:	f1b8 0f00 	cmp.w	r8, #0
 800f92a:	dd05      	ble.n	800f938 <_dtoa_r+0x838>
 800f92c:	4659      	mov	r1, fp
 800f92e:	4642      	mov	r2, r8
 800f930:	4620      	mov	r0, r4
 800f932:	f001 f9d9 	bl	8010ce8 <__lshift>
 800f936:	4683      	mov	fp, r0
 800f938:	9b04      	ldr	r3, [sp, #16]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	dd05      	ble.n	800f94a <_dtoa_r+0x84a>
 800f93e:	4631      	mov	r1, r6
 800f940:	461a      	mov	r2, r3
 800f942:	4620      	mov	r0, r4
 800f944:	f001 f9d0 	bl	8010ce8 <__lshift>
 800f948:	4606      	mov	r6, r0
 800f94a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d069      	beq.n	800fa24 <_dtoa_r+0x924>
 800f950:	4631      	mov	r1, r6
 800f952:	4658      	mov	r0, fp
 800f954:	f001 fa34 	bl	8010dc0 <__mcmp>
 800f958:	2800      	cmp	r0, #0
 800f95a:	da63      	bge.n	800fa24 <_dtoa_r+0x924>
 800f95c:	2300      	movs	r3, #0
 800f95e:	4659      	mov	r1, fp
 800f960:	220a      	movs	r2, #10
 800f962:	4620      	mov	r0, r4
 800f964:	f000 ffc6 	bl	80108f4 <__multadd>
 800f968:	9b08      	ldr	r3, [sp, #32]
 800f96a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f96e:	4683      	mov	fp, r0
 800f970:	2b00      	cmp	r3, #0
 800f972:	f000 818f 	beq.w	800fc94 <_dtoa_r+0xb94>
 800f976:	4639      	mov	r1, r7
 800f978:	2300      	movs	r3, #0
 800f97a:	220a      	movs	r2, #10
 800f97c:	4620      	mov	r0, r4
 800f97e:	f000 ffb9 	bl	80108f4 <__multadd>
 800f982:	f1b9 0f00 	cmp.w	r9, #0
 800f986:	4607      	mov	r7, r0
 800f988:	f300 808e 	bgt.w	800faa8 <_dtoa_r+0x9a8>
 800f98c:	9b05      	ldr	r3, [sp, #20]
 800f98e:	2b02      	cmp	r3, #2
 800f990:	dc50      	bgt.n	800fa34 <_dtoa_r+0x934>
 800f992:	e089      	b.n	800faa8 <_dtoa_r+0x9a8>
 800f994:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f996:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f99a:	e75d      	b.n	800f858 <_dtoa_r+0x758>
 800f99c:	9b01      	ldr	r3, [sp, #4]
 800f99e:	1e5e      	subs	r6, r3, #1
 800f9a0:	9b06      	ldr	r3, [sp, #24]
 800f9a2:	42b3      	cmp	r3, r6
 800f9a4:	bfbf      	itttt	lt
 800f9a6:	9b06      	ldrlt	r3, [sp, #24]
 800f9a8:	9606      	strlt	r6, [sp, #24]
 800f9aa:	1af2      	sublt	r2, r6, r3
 800f9ac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f9ae:	bfb6      	itet	lt
 800f9b0:	189b      	addlt	r3, r3, r2
 800f9b2:	1b9e      	subge	r6, r3, r6
 800f9b4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f9b6:	9b01      	ldr	r3, [sp, #4]
 800f9b8:	bfb8      	it	lt
 800f9ba:	2600      	movlt	r6, #0
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	bfb5      	itete	lt
 800f9c0:	eba8 0503 	sublt.w	r5, r8, r3
 800f9c4:	9b01      	ldrge	r3, [sp, #4]
 800f9c6:	2300      	movlt	r3, #0
 800f9c8:	4645      	movge	r5, r8
 800f9ca:	e747      	b.n	800f85c <_dtoa_r+0x75c>
 800f9cc:	9e06      	ldr	r6, [sp, #24]
 800f9ce:	9f08      	ldr	r7, [sp, #32]
 800f9d0:	4645      	mov	r5, r8
 800f9d2:	e74c      	b.n	800f86e <_dtoa_r+0x76e>
 800f9d4:	9a06      	ldr	r2, [sp, #24]
 800f9d6:	e775      	b.n	800f8c4 <_dtoa_r+0x7c4>
 800f9d8:	9b05      	ldr	r3, [sp, #20]
 800f9da:	2b01      	cmp	r3, #1
 800f9dc:	dc18      	bgt.n	800fa10 <_dtoa_r+0x910>
 800f9de:	9b02      	ldr	r3, [sp, #8]
 800f9e0:	b9b3      	cbnz	r3, 800fa10 <_dtoa_r+0x910>
 800f9e2:	9b03      	ldr	r3, [sp, #12]
 800f9e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f9e8:	b9a3      	cbnz	r3, 800fa14 <_dtoa_r+0x914>
 800f9ea:	9b03      	ldr	r3, [sp, #12]
 800f9ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f9f0:	0d1b      	lsrs	r3, r3, #20
 800f9f2:	051b      	lsls	r3, r3, #20
 800f9f4:	b12b      	cbz	r3, 800fa02 <_dtoa_r+0x902>
 800f9f6:	9b04      	ldr	r3, [sp, #16]
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	9304      	str	r3, [sp, #16]
 800f9fc:	f108 0801 	add.w	r8, r8, #1
 800fa00:	2301      	movs	r3, #1
 800fa02:	9306      	str	r3, [sp, #24]
 800fa04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	f47f af74 	bne.w	800f8f4 <_dtoa_r+0x7f4>
 800fa0c:	2001      	movs	r0, #1
 800fa0e:	e779      	b.n	800f904 <_dtoa_r+0x804>
 800fa10:	2300      	movs	r3, #0
 800fa12:	e7f6      	b.n	800fa02 <_dtoa_r+0x902>
 800fa14:	9b02      	ldr	r3, [sp, #8]
 800fa16:	e7f4      	b.n	800fa02 <_dtoa_r+0x902>
 800fa18:	d085      	beq.n	800f926 <_dtoa_r+0x826>
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	301c      	adds	r0, #28
 800fa1e:	e77d      	b.n	800f91c <_dtoa_r+0x81c>
 800fa20:	40240000 	.word	0x40240000
 800fa24:	9b01      	ldr	r3, [sp, #4]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	dc38      	bgt.n	800fa9c <_dtoa_r+0x99c>
 800fa2a:	9b05      	ldr	r3, [sp, #20]
 800fa2c:	2b02      	cmp	r3, #2
 800fa2e:	dd35      	ble.n	800fa9c <_dtoa_r+0x99c>
 800fa30:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fa34:	f1b9 0f00 	cmp.w	r9, #0
 800fa38:	d10d      	bne.n	800fa56 <_dtoa_r+0x956>
 800fa3a:	4631      	mov	r1, r6
 800fa3c:	464b      	mov	r3, r9
 800fa3e:	2205      	movs	r2, #5
 800fa40:	4620      	mov	r0, r4
 800fa42:	f000 ff57 	bl	80108f4 <__multadd>
 800fa46:	4601      	mov	r1, r0
 800fa48:	4606      	mov	r6, r0
 800fa4a:	4658      	mov	r0, fp
 800fa4c:	f001 f9b8 	bl	8010dc0 <__mcmp>
 800fa50:	2800      	cmp	r0, #0
 800fa52:	f73f adbd 	bgt.w	800f5d0 <_dtoa_r+0x4d0>
 800fa56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa58:	9d00      	ldr	r5, [sp, #0]
 800fa5a:	ea6f 0a03 	mvn.w	sl, r3
 800fa5e:	f04f 0800 	mov.w	r8, #0
 800fa62:	4631      	mov	r1, r6
 800fa64:	4620      	mov	r0, r4
 800fa66:	f000 ff23 	bl	80108b0 <_Bfree>
 800fa6a:	2f00      	cmp	r7, #0
 800fa6c:	f43f aeb4 	beq.w	800f7d8 <_dtoa_r+0x6d8>
 800fa70:	f1b8 0f00 	cmp.w	r8, #0
 800fa74:	d005      	beq.n	800fa82 <_dtoa_r+0x982>
 800fa76:	45b8      	cmp	r8, r7
 800fa78:	d003      	beq.n	800fa82 <_dtoa_r+0x982>
 800fa7a:	4641      	mov	r1, r8
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	f000 ff17 	bl	80108b0 <_Bfree>
 800fa82:	4639      	mov	r1, r7
 800fa84:	4620      	mov	r0, r4
 800fa86:	f000 ff13 	bl	80108b0 <_Bfree>
 800fa8a:	e6a5      	b.n	800f7d8 <_dtoa_r+0x6d8>
 800fa8c:	2600      	movs	r6, #0
 800fa8e:	4637      	mov	r7, r6
 800fa90:	e7e1      	b.n	800fa56 <_dtoa_r+0x956>
 800fa92:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fa94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fa98:	4637      	mov	r7, r6
 800fa9a:	e599      	b.n	800f5d0 <_dtoa_r+0x4d0>
 800fa9c:	9b08      	ldr	r3, [sp, #32]
 800fa9e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	f000 80fd 	beq.w	800fca2 <_dtoa_r+0xba2>
 800faa8:	2d00      	cmp	r5, #0
 800faaa:	dd05      	ble.n	800fab8 <_dtoa_r+0x9b8>
 800faac:	4639      	mov	r1, r7
 800faae:	462a      	mov	r2, r5
 800fab0:	4620      	mov	r0, r4
 800fab2:	f001 f919 	bl	8010ce8 <__lshift>
 800fab6:	4607      	mov	r7, r0
 800fab8:	9b06      	ldr	r3, [sp, #24]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d05c      	beq.n	800fb78 <_dtoa_r+0xa78>
 800fabe:	6879      	ldr	r1, [r7, #4]
 800fac0:	4620      	mov	r0, r4
 800fac2:	f000 feb5 	bl	8010830 <_Balloc>
 800fac6:	4605      	mov	r5, r0
 800fac8:	b928      	cbnz	r0, 800fad6 <_dtoa_r+0x9d6>
 800faca:	4b80      	ldr	r3, [pc, #512]	; (800fccc <_dtoa_r+0xbcc>)
 800facc:	4602      	mov	r2, r0
 800face:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fad2:	f7ff bb2e 	b.w	800f132 <_dtoa_r+0x32>
 800fad6:	693a      	ldr	r2, [r7, #16]
 800fad8:	3202      	adds	r2, #2
 800fada:	0092      	lsls	r2, r2, #2
 800fadc:	f107 010c 	add.w	r1, r7, #12
 800fae0:	300c      	adds	r0, #12
 800fae2:	f7fd fdf1 	bl	800d6c8 <memcpy>
 800fae6:	2201      	movs	r2, #1
 800fae8:	4629      	mov	r1, r5
 800faea:	4620      	mov	r0, r4
 800faec:	f001 f8fc 	bl	8010ce8 <__lshift>
 800faf0:	9b00      	ldr	r3, [sp, #0]
 800faf2:	3301      	adds	r3, #1
 800faf4:	9301      	str	r3, [sp, #4]
 800faf6:	9b00      	ldr	r3, [sp, #0]
 800faf8:	444b      	add	r3, r9
 800fafa:	9307      	str	r3, [sp, #28]
 800fafc:	9b02      	ldr	r3, [sp, #8]
 800fafe:	f003 0301 	and.w	r3, r3, #1
 800fb02:	46b8      	mov	r8, r7
 800fb04:	9306      	str	r3, [sp, #24]
 800fb06:	4607      	mov	r7, r0
 800fb08:	9b01      	ldr	r3, [sp, #4]
 800fb0a:	4631      	mov	r1, r6
 800fb0c:	3b01      	subs	r3, #1
 800fb0e:	4658      	mov	r0, fp
 800fb10:	9302      	str	r3, [sp, #8]
 800fb12:	f7ff fa69 	bl	800efe8 <quorem>
 800fb16:	4603      	mov	r3, r0
 800fb18:	3330      	adds	r3, #48	; 0x30
 800fb1a:	9004      	str	r0, [sp, #16]
 800fb1c:	4641      	mov	r1, r8
 800fb1e:	4658      	mov	r0, fp
 800fb20:	9308      	str	r3, [sp, #32]
 800fb22:	f001 f94d 	bl	8010dc0 <__mcmp>
 800fb26:	463a      	mov	r2, r7
 800fb28:	4681      	mov	r9, r0
 800fb2a:	4631      	mov	r1, r6
 800fb2c:	4620      	mov	r0, r4
 800fb2e:	f001 f963 	bl	8010df8 <__mdiff>
 800fb32:	68c2      	ldr	r2, [r0, #12]
 800fb34:	9b08      	ldr	r3, [sp, #32]
 800fb36:	4605      	mov	r5, r0
 800fb38:	bb02      	cbnz	r2, 800fb7c <_dtoa_r+0xa7c>
 800fb3a:	4601      	mov	r1, r0
 800fb3c:	4658      	mov	r0, fp
 800fb3e:	f001 f93f 	bl	8010dc0 <__mcmp>
 800fb42:	9b08      	ldr	r3, [sp, #32]
 800fb44:	4602      	mov	r2, r0
 800fb46:	4629      	mov	r1, r5
 800fb48:	4620      	mov	r0, r4
 800fb4a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800fb4e:	f000 feaf 	bl	80108b0 <_Bfree>
 800fb52:	9b05      	ldr	r3, [sp, #20]
 800fb54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb56:	9d01      	ldr	r5, [sp, #4]
 800fb58:	ea43 0102 	orr.w	r1, r3, r2
 800fb5c:	9b06      	ldr	r3, [sp, #24]
 800fb5e:	430b      	orrs	r3, r1
 800fb60:	9b08      	ldr	r3, [sp, #32]
 800fb62:	d10d      	bne.n	800fb80 <_dtoa_r+0xa80>
 800fb64:	2b39      	cmp	r3, #57	; 0x39
 800fb66:	d029      	beq.n	800fbbc <_dtoa_r+0xabc>
 800fb68:	f1b9 0f00 	cmp.w	r9, #0
 800fb6c:	dd01      	ble.n	800fb72 <_dtoa_r+0xa72>
 800fb6e:	9b04      	ldr	r3, [sp, #16]
 800fb70:	3331      	adds	r3, #49	; 0x31
 800fb72:	9a02      	ldr	r2, [sp, #8]
 800fb74:	7013      	strb	r3, [r2, #0]
 800fb76:	e774      	b.n	800fa62 <_dtoa_r+0x962>
 800fb78:	4638      	mov	r0, r7
 800fb7a:	e7b9      	b.n	800faf0 <_dtoa_r+0x9f0>
 800fb7c:	2201      	movs	r2, #1
 800fb7e:	e7e2      	b.n	800fb46 <_dtoa_r+0xa46>
 800fb80:	f1b9 0f00 	cmp.w	r9, #0
 800fb84:	db06      	blt.n	800fb94 <_dtoa_r+0xa94>
 800fb86:	9905      	ldr	r1, [sp, #20]
 800fb88:	ea41 0909 	orr.w	r9, r1, r9
 800fb8c:	9906      	ldr	r1, [sp, #24]
 800fb8e:	ea59 0101 	orrs.w	r1, r9, r1
 800fb92:	d120      	bne.n	800fbd6 <_dtoa_r+0xad6>
 800fb94:	2a00      	cmp	r2, #0
 800fb96:	ddec      	ble.n	800fb72 <_dtoa_r+0xa72>
 800fb98:	4659      	mov	r1, fp
 800fb9a:	2201      	movs	r2, #1
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	9301      	str	r3, [sp, #4]
 800fba0:	f001 f8a2 	bl	8010ce8 <__lshift>
 800fba4:	4631      	mov	r1, r6
 800fba6:	4683      	mov	fp, r0
 800fba8:	f001 f90a 	bl	8010dc0 <__mcmp>
 800fbac:	2800      	cmp	r0, #0
 800fbae:	9b01      	ldr	r3, [sp, #4]
 800fbb0:	dc02      	bgt.n	800fbb8 <_dtoa_r+0xab8>
 800fbb2:	d1de      	bne.n	800fb72 <_dtoa_r+0xa72>
 800fbb4:	07da      	lsls	r2, r3, #31
 800fbb6:	d5dc      	bpl.n	800fb72 <_dtoa_r+0xa72>
 800fbb8:	2b39      	cmp	r3, #57	; 0x39
 800fbba:	d1d8      	bne.n	800fb6e <_dtoa_r+0xa6e>
 800fbbc:	9a02      	ldr	r2, [sp, #8]
 800fbbe:	2339      	movs	r3, #57	; 0x39
 800fbc0:	7013      	strb	r3, [r2, #0]
 800fbc2:	462b      	mov	r3, r5
 800fbc4:	461d      	mov	r5, r3
 800fbc6:	3b01      	subs	r3, #1
 800fbc8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fbcc:	2a39      	cmp	r2, #57	; 0x39
 800fbce:	d050      	beq.n	800fc72 <_dtoa_r+0xb72>
 800fbd0:	3201      	adds	r2, #1
 800fbd2:	701a      	strb	r2, [r3, #0]
 800fbd4:	e745      	b.n	800fa62 <_dtoa_r+0x962>
 800fbd6:	2a00      	cmp	r2, #0
 800fbd8:	dd03      	ble.n	800fbe2 <_dtoa_r+0xae2>
 800fbda:	2b39      	cmp	r3, #57	; 0x39
 800fbdc:	d0ee      	beq.n	800fbbc <_dtoa_r+0xabc>
 800fbde:	3301      	adds	r3, #1
 800fbe0:	e7c7      	b.n	800fb72 <_dtoa_r+0xa72>
 800fbe2:	9a01      	ldr	r2, [sp, #4]
 800fbe4:	9907      	ldr	r1, [sp, #28]
 800fbe6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fbea:	428a      	cmp	r2, r1
 800fbec:	d02a      	beq.n	800fc44 <_dtoa_r+0xb44>
 800fbee:	4659      	mov	r1, fp
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	220a      	movs	r2, #10
 800fbf4:	4620      	mov	r0, r4
 800fbf6:	f000 fe7d 	bl	80108f4 <__multadd>
 800fbfa:	45b8      	cmp	r8, r7
 800fbfc:	4683      	mov	fp, r0
 800fbfe:	f04f 0300 	mov.w	r3, #0
 800fc02:	f04f 020a 	mov.w	r2, #10
 800fc06:	4641      	mov	r1, r8
 800fc08:	4620      	mov	r0, r4
 800fc0a:	d107      	bne.n	800fc1c <_dtoa_r+0xb1c>
 800fc0c:	f000 fe72 	bl	80108f4 <__multadd>
 800fc10:	4680      	mov	r8, r0
 800fc12:	4607      	mov	r7, r0
 800fc14:	9b01      	ldr	r3, [sp, #4]
 800fc16:	3301      	adds	r3, #1
 800fc18:	9301      	str	r3, [sp, #4]
 800fc1a:	e775      	b.n	800fb08 <_dtoa_r+0xa08>
 800fc1c:	f000 fe6a 	bl	80108f4 <__multadd>
 800fc20:	4639      	mov	r1, r7
 800fc22:	4680      	mov	r8, r0
 800fc24:	2300      	movs	r3, #0
 800fc26:	220a      	movs	r2, #10
 800fc28:	4620      	mov	r0, r4
 800fc2a:	f000 fe63 	bl	80108f4 <__multadd>
 800fc2e:	4607      	mov	r7, r0
 800fc30:	e7f0      	b.n	800fc14 <_dtoa_r+0xb14>
 800fc32:	f1b9 0f00 	cmp.w	r9, #0
 800fc36:	9a00      	ldr	r2, [sp, #0]
 800fc38:	bfcc      	ite	gt
 800fc3a:	464d      	movgt	r5, r9
 800fc3c:	2501      	movle	r5, #1
 800fc3e:	4415      	add	r5, r2
 800fc40:	f04f 0800 	mov.w	r8, #0
 800fc44:	4659      	mov	r1, fp
 800fc46:	2201      	movs	r2, #1
 800fc48:	4620      	mov	r0, r4
 800fc4a:	9301      	str	r3, [sp, #4]
 800fc4c:	f001 f84c 	bl	8010ce8 <__lshift>
 800fc50:	4631      	mov	r1, r6
 800fc52:	4683      	mov	fp, r0
 800fc54:	f001 f8b4 	bl	8010dc0 <__mcmp>
 800fc58:	2800      	cmp	r0, #0
 800fc5a:	dcb2      	bgt.n	800fbc2 <_dtoa_r+0xac2>
 800fc5c:	d102      	bne.n	800fc64 <_dtoa_r+0xb64>
 800fc5e:	9b01      	ldr	r3, [sp, #4]
 800fc60:	07db      	lsls	r3, r3, #31
 800fc62:	d4ae      	bmi.n	800fbc2 <_dtoa_r+0xac2>
 800fc64:	462b      	mov	r3, r5
 800fc66:	461d      	mov	r5, r3
 800fc68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc6c:	2a30      	cmp	r2, #48	; 0x30
 800fc6e:	d0fa      	beq.n	800fc66 <_dtoa_r+0xb66>
 800fc70:	e6f7      	b.n	800fa62 <_dtoa_r+0x962>
 800fc72:	9a00      	ldr	r2, [sp, #0]
 800fc74:	429a      	cmp	r2, r3
 800fc76:	d1a5      	bne.n	800fbc4 <_dtoa_r+0xac4>
 800fc78:	f10a 0a01 	add.w	sl, sl, #1
 800fc7c:	2331      	movs	r3, #49	; 0x31
 800fc7e:	e779      	b.n	800fb74 <_dtoa_r+0xa74>
 800fc80:	4b13      	ldr	r3, [pc, #76]	; (800fcd0 <_dtoa_r+0xbd0>)
 800fc82:	f7ff baaf 	b.w	800f1e4 <_dtoa_r+0xe4>
 800fc86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	f47f aa86 	bne.w	800f19a <_dtoa_r+0x9a>
 800fc8e:	4b11      	ldr	r3, [pc, #68]	; (800fcd4 <_dtoa_r+0xbd4>)
 800fc90:	f7ff baa8 	b.w	800f1e4 <_dtoa_r+0xe4>
 800fc94:	f1b9 0f00 	cmp.w	r9, #0
 800fc98:	dc03      	bgt.n	800fca2 <_dtoa_r+0xba2>
 800fc9a:	9b05      	ldr	r3, [sp, #20]
 800fc9c:	2b02      	cmp	r3, #2
 800fc9e:	f73f aec9 	bgt.w	800fa34 <_dtoa_r+0x934>
 800fca2:	9d00      	ldr	r5, [sp, #0]
 800fca4:	4631      	mov	r1, r6
 800fca6:	4658      	mov	r0, fp
 800fca8:	f7ff f99e 	bl	800efe8 <quorem>
 800fcac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fcb0:	f805 3b01 	strb.w	r3, [r5], #1
 800fcb4:	9a00      	ldr	r2, [sp, #0]
 800fcb6:	1aaa      	subs	r2, r5, r2
 800fcb8:	4591      	cmp	r9, r2
 800fcba:	ddba      	ble.n	800fc32 <_dtoa_r+0xb32>
 800fcbc:	4659      	mov	r1, fp
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	220a      	movs	r2, #10
 800fcc2:	4620      	mov	r0, r4
 800fcc4:	f000 fe16 	bl	80108f4 <__multadd>
 800fcc8:	4683      	mov	fp, r0
 800fcca:	e7eb      	b.n	800fca4 <_dtoa_r+0xba4>
 800fccc:	0801311c 	.word	0x0801311c
 800fcd0:	08012f24 	.word	0x08012f24
 800fcd4:	08013099 	.word	0x08013099

0800fcd8 <__sflush_r>:
 800fcd8:	898a      	ldrh	r2, [r1, #12]
 800fcda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcde:	4605      	mov	r5, r0
 800fce0:	0710      	lsls	r0, r2, #28
 800fce2:	460c      	mov	r4, r1
 800fce4:	d458      	bmi.n	800fd98 <__sflush_r+0xc0>
 800fce6:	684b      	ldr	r3, [r1, #4]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	dc05      	bgt.n	800fcf8 <__sflush_r+0x20>
 800fcec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	dc02      	bgt.n	800fcf8 <__sflush_r+0x20>
 800fcf2:	2000      	movs	r0, #0
 800fcf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fcfa:	2e00      	cmp	r6, #0
 800fcfc:	d0f9      	beq.n	800fcf2 <__sflush_r+0x1a>
 800fcfe:	2300      	movs	r3, #0
 800fd00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fd04:	682f      	ldr	r7, [r5, #0]
 800fd06:	602b      	str	r3, [r5, #0]
 800fd08:	d032      	beq.n	800fd70 <__sflush_r+0x98>
 800fd0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fd0c:	89a3      	ldrh	r3, [r4, #12]
 800fd0e:	075a      	lsls	r2, r3, #29
 800fd10:	d505      	bpl.n	800fd1e <__sflush_r+0x46>
 800fd12:	6863      	ldr	r3, [r4, #4]
 800fd14:	1ac0      	subs	r0, r0, r3
 800fd16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fd18:	b10b      	cbz	r3, 800fd1e <__sflush_r+0x46>
 800fd1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd1c:	1ac0      	subs	r0, r0, r3
 800fd1e:	2300      	movs	r3, #0
 800fd20:	4602      	mov	r2, r0
 800fd22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd24:	6a21      	ldr	r1, [r4, #32]
 800fd26:	4628      	mov	r0, r5
 800fd28:	47b0      	blx	r6
 800fd2a:	1c43      	adds	r3, r0, #1
 800fd2c:	89a3      	ldrh	r3, [r4, #12]
 800fd2e:	d106      	bne.n	800fd3e <__sflush_r+0x66>
 800fd30:	6829      	ldr	r1, [r5, #0]
 800fd32:	291d      	cmp	r1, #29
 800fd34:	d82c      	bhi.n	800fd90 <__sflush_r+0xb8>
 800fd36:	4a2a      	ldr	r2, [pc, #168]	; (800fde0 <__sflush_r+0x108>)
 800fd38:	40ca      	lsrs	r2, r1
 800fd3a:	07d6      	lsls	r6, r2, #31
 800fd3c:	d528      	bpl.n	800fd90 <__sflush_r+0xb8>
 800fd3e:	2200      	movs	r2, #0
 800fd40:	6062      	str	r2, [r4, #4]
 800fd42:	04d9      	lsls	r1, r3, #19
 800fd44:	6922      	ldr	r2, [r4, #16]
 800fd46:	6022      	str	r2, [r4, #0]
 800fd48:	d504      	bpl.n	800fd54 <__sflush_r+0x7c>
 800fd4a:	1c42      	adds	r2, r0, #1
 800fd4c:	d101      	bne.n	800fd52 <__sflush_r+0x7a>
 800fd4e:	682b      	ldr	r3, [r5, #0]
 800fd50:	b903      	cbnz	r3, 800fd54 <__sflush_r+0x7c>
 800fd52:	6560      	str	r0, [r4, #84]	; 0x54
 800fd54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd56:	602f      	str	r7, [r5, #0]
 800fd58:	2900      	cmp	r1, #0
 800fd5a:	d0ca      	beq.n	800fcf2 <__sflush_r+0x1a>
 800fd5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd60:	4299      	cmp	r1, r3
 800fd62:	d002      	beq.n	800fd6a <__sflush_r+0x92>
 800fd64:	4628      	mov	r0, r5
 800fd66:	f001 fa2d 	bl	80111c4 <_free_r>
 800fd6a:	2000      	movs	r0, #0
 800fd6c:	6360      	str	r0, [r4, #52]	; 0x34
 800fd6e:	e7c1      	b.n	800fcf4 <__sflush_r+0x1c>
 800fd70:	6a21      	ldr	r1, [r4, #32]
 800fd72:	2301      	movs	r3, #1
 800fd74:	4628      	mov	r0, r5
 800fd76:	47b0      	blx	r6
 800fd78:	1c41      	adds	r1, r0, #1
 800fd7a:	d1c7      	bne.n	800fd0c <__sflush_r+0x34>
 800fd7c:	682b      	ldr	r3, [r5, #0]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d0c4      	beq.n	800fd0c <__sflush_r+0x34>
 800fd82:	2b1d      	cmp	r3, #29
 800fd84:	d001      	beq.n	800fd8a <__sflush_r+0xb2>
 800fd86:	2b16      	cmp	r3, #22
 800fd88:	d101      	bne.n	800fd8e <__sflush_r+0xb6>
 800fd8a:	602f      	str	r7, [r5, #0]
 800fd8c:	e7b1      	b.n	800fcf2 <__sflush_r+0x1a>
 800fd8e:	89a3      	ldrh	r3, [r4, #12]
 800fd90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd94:	81a3      	strh	r3, [r4, #12]
 800fd96:	e7ad      	b.n	800fcf4 <__sflush_r+0x1c>
 800fd98:	690f      	ldr	r7, [r1, #16]
 800fd9a:	2f00      	cmp	r7, #0
 800fd9c:	d0a9      	beq.n	800fcf2 <__sflush_r+0x1a>
 800fd9e:	0793      	lsls	r3, r2, #30
 800fda0:	680e      	ldr	r6, [r1, #0]
 800fda2:	bf08      	it	eq
 800fda4:	694b      	ldreq	r3, [r1, #20]
 800fda6:	600f      	str	r7, [r1, #0]
 800fda8:	bf18      	it	ne
 800fdaa:	2300      	movne	r3, #0
 800fdac:	eba6 0807 	sub.w	r8, r6, r7
 800fdb0:	608b      	str	r3, [r1, #8]
 800fdb2:	f1b8 0f00 	cmp.w	r8, #0
 800fdb6:	dd9c      	ble.n	800fcf2 <__sflush_r+0x1a>
 800fdb8:	6a21      	ldr	r1, [r4, #32]
 800fdba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fdbc:	4643      	mov	r3, r8
 800fdbe:	463a      	mov	r2, r7
 800fdc0:	4628      	mov	r0, r5
 800fdc2:	47b0      	blx	r6
 800fdc4:	2800      	cmp	r0, #0
 800fdc6:	dc06      	bgt.n	800fdd6 <__sflush_r+0xfe>
 800fdc8:	89a3      	ldrh	r3, [r4, #12]
 800fdca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdce:	81a3      	strh	r3, [r4, #12]
 800fdd0:	f04f 30ff 	mov.w	r0, #4294967295
 800fdd4:	e78e      	b.n	800fcf4 <__sflush_r+0x1c>
 800fdd6:	4407      	add	r7, r0
 800fdd8:	eba8 0800 	sub.w	r8, r8, r0
 800fddc:	e7e9      	b.n	800fdb2 <__sflush_r+0xda>
 800fdde:	bf00      	nop
 800fde0:	20400001 	.word	0x20400001

0800fde4 <_fflush_r>:
 800fde4:	b538      	push	{r3, r4, r5, lr}
 800fde6:	690b      	ldr	r3, [r1, #16]
 800fde8:	4605      	mov	r5, r0
 800fdea:	460c      	mov	r4, r1
 800fdec:	b913      	cbnz	r3, 800fdf4 <_fflush_r+0x10>
 800fdee:	2500      	movs	r5, #0
 800fdf0:	4628      	mov	r0, r5
 800fdf2:	bd38      	pop	{r3, r4, r5, pc}
 800fdf4:	b118      	cbz	r0, 800fdfe <_fflush_r+0x1a>
 800fdf6:	6983      	ldr	r3, [r0, #24]
 800fdf8:	b90b      	cbnz	r3, 800fdfe <_fflush_r+0x1a>
 800fdfa:	f000 f887 	bl	800ff0c <__sinit>
 800fdfe:	4b14      	ldr	r3, [pc, #80]	; (800fe50 <_fflush_r+0x6c>)
 800fe00:	429c      	cmp	r4, r3
 800fe02:	d11b      	bne.n	800fe3c <_fflush_r+0x58>
 800fe04:	686c      	ldr	r4, [r5, #4]
 800fe06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d0ef      	beq.n	800fdee <_fflush_r+0xa>
 800fe0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fe10:	07d0      	lsls	r0, r2, #31
 800fe12:	d404      	bmi.n	800fe1e <_fflush_r+0x3a>
 800fe14:	0599      	lsls	r1, r3, #22
 800fe16:	d402      	bmi.n	800fe1e <_fflush_r+0x3a>
 800fe18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe1a:	f000 fc88 	bl	801072e <__retarget_lock_acquire_recursive>
 800fe1e:	4628      	mov	r0, r5
 800fe20:	4621      	mov	r1, r4
 800fe22:	f7ff ff59 	bl	800fcd8 <__sflush_r>
 800fe26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe28:	07da      	lsls	r2, r3, #31
 800fe2a:	4605      	mov	r5, r0
 800fe2c:	d4e0      	bmi.n	800fdf0 <_fflush_r+0xc>
 800fe2e:	89a3      	ldrh	r3, [r4, #12]
 800fe30:	059b      	lsls	r3, r3, #22
 800fe32:	d4dd      	bmi.n	800fdf0 <_fflush_r+0xc>
 800fe34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe36:	f000 fc7b 	bl	8010730 <__retarget_lock_release_recursive>
 800fe3a:	e7d9      	b.n	800fdf0 <_fflush_r+0xc>
 800fe3c:	4b05      	ldr	r3, [pc, #20]	; (800fe54 <_fflush_r+0x70>)
 800fe3e:	429c      	cmp	r4, r3
 800fe40:	d101      	bne.n	800fe46 <_fflush_r+0x62>
 800fe42:	68ac      	ldr	r4, [r5, #8]
 800fe44:	e7df      	b.n	800fe06 <_fflush_r+0x22>
 800fe46:	4b04      	ldr	r3, [pc, #16]	; (800fe58 <_fflush_r+0x74>)
 800fe48:	429c      	cmp	r4, r3
 800fe4a:	bf08      	it	eq
 800fe4c:	68ec      	ldreq	r4, [r5, #12]
 800fe4e:	e7da      	b.n	800fe06 <_fflush_r+0x22>
 800fe50:	08013150 	.word	0x08013150
 800fe54:	08013170 	.word	0x08013170
 800fe58:	08013130 	.word	0x08013130

0800fe5c <std>:
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	b510      	push	{r4, lr}
 800fe60:	4604      	mov	r4, r0
 800fe62:	e9c0 3300 	strd	r3, r3, [r0]
 800fe66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe6a:	6083      	str	r3, [r0, #8]
 800fe6c:	8181      	strh	r1, [r0, #12]
 800fe6e:	6643      	str	r3, [r0, #100]	; 0x64
 800fe70:	81c2      	strh	r2, [r0, #14]
 800fe72:	6183      	str	r3, [r0, #24]
 800fe74:	4619      	mov	r1, r3
 800fe76:	2208      	movs	r2, #8
 800fe78:	305c      	adds	r0, #92	; 0x5c
 800fe7a:	f7fd fc33 	bl	800d6e4 <memset>
 800fe7e:	4b05      	ldr	r3, [pc, #20]	; (800fe94 <std+0x38>)
 800fe80:	6263      	str	r3, [r4, #36]	; 0x24
 800fe82:	4b05      	ldr	r3, [pc, #20]	; (800fe98 <std+0x3c>)
 800fe84:	62a3      	str	r3, [r4, #40]	; 0x28
 800fe86:	4b05      	ldr	r3, [pc, #20]	; (800fe9c <std+0x40>)
 800fe88:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fe8a:	4b05      	ldr	r3, [pc, #20]	; (800fea0 <std+0x44>)
 800fe8c:	6224      	str	r4, [r4, #32]
 800fe8e:	6323      	str	r3, [r4, #48]	; 0x30
 800fe90:	bd10      	pop	{r4, pc}
 800fe92:	bf00      	nop
 800fe94:	08011601 	.word	0x08011601
 800fe98:	08011623 	.word	0x08011623
 800fe9c:	0801165b 	.word	0x0801165b
 800fea0:	0801167f 	.word	0x0801167f

0800fea4 <_cleanup_r>:
 800fea4:	4901      	ldr	r1, [pc, #4]	; (800feac <_cleanup_r+0x8>)
 800fea6:	f000 b8af 	b.w	8010008 <_fwalk_reent>
 800feaa:	bf00      	nop
 800feac:	0800fde5 	.word	0x0800fde5

0800feb0 <__sfmoreglue>:
 800feb0:	b570      	push	{r4, r5, r6, lr}
 800feb2:	1e4a      	subs	r2, r1, #1
 800feb4:	2568      	movs	r5, #104	; 0x68
 800feb6:	4355      	muls	r5, r2
 800feb8:	460e      	mov	r6, r1
 800feba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800febe:	f001 f9d1 	bl	8011264 <_malloc_r>
 800fec2:	4604      	mov	r4, r0
 800fec4:	b140      	cbz	r0, 800fed8 <__sfmoreglue+0x28>
 800fec6:	2100      	movs	r1, #0
 800fec8:	e9c0 1600 	strd	r1, r6, [r0]
 800fecc:	300c      	adds	r0, #12
 800fece:	60a0      	str	r0, [r4, #8]
 800fed0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fed4:	f7fd fc06 	bl	800d6e4 <memset>
 800fed8:	4620      	mov	r0, r4
 800feda:	bd70      	pop	{r4, r5, r6, pc}

0800fedc <__sfp_lock_acquire>:
 800fedc:	4801      	ldr	r0, [pc, #4]	; (800fee4 <__sfp_lock_acquire+0x8>)
 800fede:	f000 bc26 	b.w	801072e <__retarget_lock_acquire_recursive>
 800fee2:	bf00      	nop
 800fee4:	200054cc 	.word	0x200054cc

0800fee8 <__sfp_lock_release>:
 800fee8:	4801      	ldr	r0, [pc, #4]	; (800fef0 <__sfp_lock_release+0x8>)
 800feea:	f000 bc21 	b.w	8010730 <__retarget_lock_release_recursive>
 800feee:	bf00      	nop
 800fef0:	200054cc 	.word	0x200054cc

0800fef4 <__sinit_lock_acquire>:
 800fef4:	4801      	ldr	r0, [pc, #4]	; (800fefc <__sinit_lock_acquire+0x8>)
 800fef6:	f000 bc1a 	b.w	801072e <__retarget_lock_acquire_recursive>
 800fefa:	bf00      	nop
 800fefc:	200054c7 	.word	0x200054c7

0800ff00 <__sinit_lock_release>:
 800ff00:	4801      	ldr	r0, [pc, #4]	; (800ff08 <__sinit_lock_release+0x8>)
 800ff02:	f000 bc15 	b.w	8010730 <__retarget_lock_release_recursive>
 800ff06:	bf00      	nop
 800ff08:	200054c7 	.word	0x200054c7

0800ff0c <__sinit>:
 800ff0c:	b510      	push	{r4, lr}
 800ff0e:	4604      	mov	r4, r0
 800ff10:	f7ff fff0 	bl	800fef4 <__sinit_lock_acquire>
 800ff14:	69a3      	ldr	r3, [r4, #24]
 800ff16:	b11b      	cbz	r3, 800ff20 <__sinit+0x14>
 800ff18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff1c:	f7ff bff0 	b.w	800ff00 <__sinit_lock_release>
 800ff20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ff24:	6523      	str	r3, [r4, #80]	; 0x50
 800ff26:	4b13      	ldr	r3, [pc, #76]	; (800ff74 <__sinit+0x68>)
 800ff28:	4a13      	ldr	r2, [pc, #76]	; (800ff78 <__sinit+0x6c>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ff2e:	42a3      	cmp	r3, r4
 800ff30:	bf04      	itt	eq
 800ff32:	2301      	moveq	r3, #1
 800ff34:	61a3      	streq	r3, [r4, #24]
 800ff36:	4620      	mov	r0, r4
 800ff38:	f000 f820 	bl	800ff7c <__sfp>
 800ff3c:	6060      	str	r0, [r4, #4]
 800ff3e:	4620      	mov	r0, r4
 800ff40:	f000 f81c 	bl	800ff7c <__sfp>
 800ff44:	60a0      	str	r0, [r4, #8]
 800ff46:	4620      	mov	r0, r4
 800ff48:	f000 f818 	bl	800ff7c <__sfp>
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	60e0      	str	r0, [r4, #12]
 800ff50:	2104      	movs	r1, #4
 800ff52:	6860      	ldr	r0, [r4, #4]
 800ff54:	f7ff ff82 	bl	800fe5c <std>
 800ff58:	68a0      	ldr	r0, [r4, #8]
 800ff5a:	2201      	movs	r2, #1
 800ff5c:	2109      	movs	r1, #9
 800ff5e:	f7ff ff7d 	bl	800fe5c <std>
 800ff62:	68e0      	ldr	r0, [r4, #12]
 800ff64:	2202      	movs	r2, #2
 800ff66:	2112      	movs	r1, #18
 800ff68:	f7ff ff78 	bl	800fe5c <std>
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	61a3      	str	r3, [r4, #24]
 800ff70:	e7d2      	b.n	800ff18 <__sinit+0xc>
 800ff72:	bf00      	nop
 800ff74:	08012f10 	.word	0x08012f10
 800ff78:	0800fea5 	.word	0x0800fea5

0800ff7c <__sfp>:
 800ff7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff7e:	4607      	mov	r7, r0
 800ff80:	f7ff ffac 	bl	800fedc <__sfp_lock_acquire>
 800ff84:	4b1e      	ldr	r3, [pc, #120]	; (8010000 <__sfp+0x84>)
 800ff86:	681e      	ldr	r6, [r3, #0]
 800ff88:	69b3      	ldr	r3, [r6, #24]
 800ff8a:	b913      	cbnz	r3, 800ff92 <__sfp+0x16>
 800ff8c:	4630      	mov	r0, r6
 800ff8e:	f7ff ffbd 	bl	800ff0c <__sinit>
 800ff92:	3648      	adds	r6, #72	; 0x48
 800ff94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ff98:	3b01      	subs	r3, #1
 800ff9a:	d503      	bpl.n	800ffa4 <__sfp+0x28>
 800ff9c:	6833      	ldr	r3, [r6, #0]
 800ff9e:	b30b      	cbz	r3, 800ffe4 <__sfp+0x68>
 800ffa0:	6836      	ldr	r6, [r6, #0]
 800ffa2:	e7f7      	b.n	800ff94 <__sfp+0x18>
 800ffa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ffa8:	b9d5      	cbnz	r5, 800ffe0 <__sfp+0x64>
 800ffaa:	4b16      	ldr	r3, [pc, #88]	; (8010004 <__sfp+0x88>)
 800ffac:	60e3      	str	r3, [r4, #12]
 800ffae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ffb2:	6665      	str	r5, [r4, #100]	; 0x64
 800ffb4:	f000 fbba 	bl	801072c <__retarget_lock_init_recursive>
 800ffb8:	f7ff ff96 	bl	800fee8 <__sfp_lock_release>
 800ffbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ffc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ffc4:	6025      	str	r5, [r4, #0]
 800ffc6:	61a5      	str	r5, [r4, #24]
 800ffc8:	2208      	movs	r2, #8
 800ffca:	4629      	mov	r1, r5
 800ffcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ffd0:	f7fd fb88 	bl	800d6e4 <memset>
 800ffd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ffd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ffdc:	4620      	mov	r0, r4
 800ffde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffe0:	3468      	adds	r4, #104	; 0x68
 800ffe2:	e7d9      	b.n	800ff98 <__sfp+0x1c>
 800ffe4:	2104      	movs	r1, #4
 800ffe6:	4638      	mov	r0, r7
 800ffe8:	f7ff ff62 	bl	800feb0 <__sfmoreglue>
 800ffec:	4604      	mov	r4, r0
 800ffee:	6030      	str	r0, [r6, #0]
 800fff0:	2800      	cmp	r0, #0
 800fff2:	d1d5      	bne.n	800ffa0 <__sfp+0x24>
 800fff4:	f7ff ff78 	bl	800fee8 <__sfp_lock_release>
 800fff8:	230c      	movs	r3, #12
 800fffa:	603b      	str	r3, [r7, #0]
 800fffc:	e7ee      	b.n	800ffdc <__sfp+0x60>
 800fffe:	bf00      	nop
 8010000:	08012f10 	.word	0x08012f10
 8010004:	ffff0001 	.word	0xffff0001

08010008 <_fwalk_reent>:
 8010008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801000c:	4606      	mov	r6, r0
 801000e:	4688      	mov	r8, r1
 8010010:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010014:	2700      	movs	r7, #0
 8010016:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801001a:	f1b9 0901 	subs.w	r9, r9, #1
 801001e:	d505      	bpl.n	801002c <_fwalk_reent+0x24>
 8010020:	6824      	ldr	r4, [r4, #0]
 8010022:	2c00      	cmp	r4, #0
 8010024:	d1f7      	bne.n	8010016 <_fwalk_reent+0xe>
 8010026:	4638      	mov	r0, r7
 8010028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801002c:	89ab      	ldrh	r3, [r5, #12]
 801002e:	2b01      	cmp	r3, #1
 8010030:	d907      	bls.n	8010042 <_fwalk_reent+0x3a>
 8010032:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010036:	3301      	adds	r3, #1
 8010038:	d003      	beq.n	8010042 <_fwalk_reent+0x3a>
 801003a:	4629      	mov	r1, r5
 801003c:	4630      	mov	r0, r6
 801003e:	47c0      	blx	r8
 8010040:	4307      	orrs	r7, r0
 8010042:	3568      	adds	r5, #104	; 0x68
 8010044:	e7e9      	b.n	801001a <_fwalk_reent+0x12>

08010046 <rshift>:
 8010046:	6903      	ldr	r3, [r0, #16]
 8010048:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801004c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010050:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010054:	f100 0414 	add.w	r4, r0, #20
 8010058:	dd45      	ble.n	80100e6 <rshift+0xa0>
 801005a:	f011 011f 	ands.w	r1, r1, #31
 801005e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010062:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010066:	d10c      	bne.n	8010082 <rshift+0x3c>
 8010068:	f100 0710 	add.w	r7, r0, #16
 801006c:	4629      	mov	r1, r5
 801006e:	42b1      	cmp	r1, r6
 8010070:	d334      	bcc.n	80100dc <rshift+0x96>
 8010072:	1a9b      	subs	r3, r3, r2
 8010074:	009b      	lsls	r3, r3, #2
 8010076:	1eea      	subs	r2, r5, #3
 8010078:	4296      	cmp	r6, r2
 801007a:	bf38      	it	cc
 801007c:	2300      	movcc	r3, #0
 801007e:	4423      	add	r3, r4
 8010080:	e015      	b.n	80100ae <rshift+0x68>
 8010082:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010086:	f1c1 0820 	rsb	r8, r1, #32
 801008a:	40cf      	lsrs	r7, r1
 801008c:	f105 0e04 	add.w	lr, r5, #4
 8010090:	46a1      	mov	r9, r4
 8010092:	4576      	cmp	r6, lr
 8010094:	46f4      	mov	ip, lr
 8010096:	d815      	bhi.n	80100c4 <rshift+0x7e>
 8010098:	1a9b      	subs	r3, r3, r2
 801009a:	009a      	lsls	r2, r3, #2
 801009c:	3a04      	subs	r2, #4
 801009e:	3501      	adds	r5, #1
 80100a0:	42ae      	cmp	r6, r5
 80100a2:	bf38      	it	cc
 80100a4:	2200      	movcc	r2, #0
 80100a6:	18a3      	adds	r3, r4, r2
 80100a8:	50a7      	str	r7, [r4, r2]
 80100aa:	b107      	cbz	r7, 80100ae <rshift+0x68>
 80100ac:	3304      	adds	r3, #4
 80100ae:	1b1a      	subs	r2, r3, r4
 80100b0:	42a3      	cmp	r3, r4
 80100b2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80100b6:	bf08      	it	eq
 80100b8:	2300      	moveq	r3, #0
 80100ba:	6102      	str	r2, [r0, #16]
 80100bc:	bf08      	it	eq
 80100be:	6143      	streq	r3, [r0, #20]
 80100c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100c4:	f8dc c000 	ldr.w	ip, [ip]
 80100c8:	fa0c fc08 	lsl.w	ip, ip, r8
 80100cc:	ea4c 0707 	orr.w	r7, ip, r7
 80100d0:	f849 7b04 	str.w	r7, [r9], #4
 80100d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80100d8:	40cf      	lsrs	r7, r1
 80100da:	e7da      	b.n	8010092 <rshift+0x4c>
 80100dc:	f851 cb04 	ldr.w	ip, [r1], #4
 80100e0:	f847 cf04 	str.w	ip, [r7, #4]!
 80100e4:	e7c3      	b.n	801006e <rshift+0x28>
 80100e6:	4623      	mov	r3, r4
 80100e8:	e7e1      	b.n	80100ae <rshift+0x68>

080100ea <__hexdig_fun>:
 80100ea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80100ee:	2b09      	cmp	r3, #9
 80100f0:	d802      	bhi.n	80100f8 <__hexdig_fun+0xe>
 80100f2:	3820      	subs	r0, #32
 80100f4:	b2c0      	uxtb	r0, r0
 80100f6:	4770      	bx	lr
 80100f8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80100fc:	2b05      	cmp	r3, #5
 80100fe:	d801      	bhi.n	8010104 <__hexdig_fun+0x1a>
 8010100:	3847      	subs	r0, #71	; 0x47
 8010102:	e7f7      	b.n	80100f4 <__hexdig_fun+0xa>
 8010104:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010108:	2b05      	cmp	r3, #5
 801010a:	d801      	bhi.n	8010110 <__hexdig_fun+0x26>
 801010c:	3827      	subs	r0, #39	; 0x27
 801010e:	e7f1      	b.n	80100f4 <__hexdig_fun+0xa>
 8010110:	2000      	movs	r0, #0
 8010112:	4770      	bx	lr

08010114 <__gethex>:
 8010114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010118:	ed2d 8b02 	vpush	{d8}
 801011c:	b089      	sub	sp, #36	; 0x24
 801011e:	ee08 0a10 	vmov	s16, r0
 8010122:	9304      	str	r3, [sp, #16]
 8010124:	4bbc      	ldr	r3, [pc, #752]	; (8010418 <__gethex+0x304>)
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	9301      	str	r3, [sp, #4]
 801012a:	4618      	mov	r0, r3
 801012c:	468b      	mov	fp, r1
 801012e:	4690      	mov	r8, r2
 8010130:	f7f0 f876 	bl	8000220 <strlen>
 8010134:	9b01      	ldr	r3, [sp, #4]
 8010136:	f8db 2000 	ldr.w	r2, [fp]
 801013a:	4403      	add	r3, r0
 801013c:	4682      	mov	sl, r0
 801013e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010142:	9305      	str	r3, [sp, #20]
 8010144:	1c93      	adds	r3, r2, #2
 8010146:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801014a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801014e:	32fe      	adds	r2, #254	; 0xfe
 8010150:	18d1      	adds	r1, r2, r3
 8010152:	461f      	mov	r7, r3
 8010154:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010158:	9100      	str	r1, [sp, #0]
 801015a:	2830      	cmp	r0, #48	; 0x30
 801015c:	d0f8      	beq.n	8010150 <__gethex+0x3c>
 801015e:	f7ff ffc4 	bl	80100ea <__hexdig_fun>
 8010162:	4604      	mov	r4, r0
 8010164:	2800      	cmp	r0, #0
 8010166:	d13a      	bne.n	80101de <__gethex+0xca>
 8010168:	9901      	ldr	r1, [sp, #4]
 801016a:	4652      	mov	r2, sl
 801016c:	4638      	mov	r0, r7
 801016e:	f001 fa8a 	bl	8011686 <strncmp>
 8010172:	4605      	mov	r5, r0
 8010174:	2800      	cmp	r0, #0
 8010176:	d168      	bne.n	801024a <__gethex+0x136>
 8010178:	f817 000a 	ldrb.w	r0, [r7, sl]
 801017c:	eb07 060a 	add.w	r6, r7, sl
 8010180:	f7ff ffb3 	bl	80100ea <__hexdig_fun>
 8010184:	2800      	cmp	r0, #0
 8010186:	d062      	beq.n	801024e <__gethex+0x13a>
 8010188:	4633      	mov	r3, r6
 801018a:	7818      	ldrb	r0, [r3, #0]
 801018c:	2830      	cmp	r0, #48	; 0x30
 801018e:	461f      	mov	r7, r3
 8010190:	f103 0301 	add.w	r3, r3, #1
 8010194:	d0f9      	beq.n	801018a <__gethex+0x76>
 8010196:	f7ff ffa8 	bl	80100ea <__hexdig_fun>
 801019a:	2301      	movs	r3, #1
 801019c:	fab0 f480 	clz	r4, r0
 80101a0:	0964      	lsrs	r4, r4, #5
 80101a2:	4635      	mov	r5, r6
 80101a4:	9300      	str	r3, [sp, #0]
 80101a6:	463a      	mov	r2, r7
 80101a8:	4616      	mov	r6, r2
 80101aa:	3201      	adds	r2, #1
 80101ac:	7830      	ldrb	r0, [r6, #0]
 80101ae:	f7ff ff9c 	bl	80100ea <__hexdig_fun>
 80101b2:	2800      	cmp	r0, #0
 80101b4:	d1f8      	bne.n	80101a8 <__gethex+0x94>
 80101b6:	9901      	ldr	r1, [sp, #4]
 80101b8:	4652      	mov	r2, sl
 80101ba:	4630      	mov	r0, r6
 80101bc:	f001 fa63 	bl	8011686 <strncmp>
 80101c0:	b980      	cbnz	r0, 80101e4 <__gethex+0xd0>
 80101c2:	b94d      	cbnz	r5, 80101d8 <__gethex+0xc4>
 80101c4:	eb06 050a 	add.w	r5, r6, sl
 80101c8:	462a      	mov	r2, r5
 80101ca:	4616      	mov	r6, r2
 80101cc:	3201      	adds	r2, #1
 80101ce:	7830      	ldrb	r0, [r6, #0]
 80101d0:	f7ff ff8b 	bl	80100ea <__hexdig_fun>
 80101d4:	2800      	cmp	r0, #0
 80101d6:	d1f8      	bne.n	80101ca <__gethex+0xb6>
 80101d8:	1bad      	subs	r5, r5, r6
 80101da:	00ad      	lsls	r5, r5, #2
 80101dc:	e004      	b.n	80101e8 <__gethex+0xd4>
 80101de:	2400      	movs	r4, #0
 80101e0:	4625      	mov	r5, r4
 80101e2:	e7e0      	b.n	80101a6 <__gethex+0x92>
 80101e4:	2d00      	cmp	r5, #0
 80101e6:	d1f7      	bne.n	80101d8 <__gethex+0xc4>
 80101e8:	7833      	ldrb	r3, [r6, #0]
 80101ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80101ee:	2b50      	cmp	r3, #80	; 0x50
 80101f0:	d13b      	bne.n	801026a <__gethex+0x156>
 80101f2:	7873      	ldrb	r3, [r6, #1]
 80101f4:	2b2b      	cmp	r3, #43	; 0x2b
 80101f6:	d02c      	beq.n	8010252 <__gethex+0x13e>
 80101f8:	2b2d      	cmp	r3, #45	; 0x2d
 80101fa:	d02e      	beq.n	801025a <__gethex+0x146>
 80101fc:	1c71      	adds	r1, r6, #1
 80101fe:	f04f 0900 	mov.w	r9, #0
 8010202:	7808      	ldrb	r0, [r1, #0]
 8010204:	f7ff ff71 	bl	80100ea <__hexdig_fun>
 8010208:	1e43      	subs	r3, r0, #1
 801020a:	b2db      	uxtb	r3, r3
 801020c:	2b18      	cmp	r3, #24
 801020e:	d82c      	bhi.n	801026a <__gethex+0x156>
 8010210:	f1a0 0210 	sub.w	r2, r0, #16
 8010214:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010218:	f7ff ff67 	bl	80100ea <__hexdig_fun>
 801021c:	1e43      	subs	r3, r0, #1
 801021e:	b2db      	uxtb	r3, r3
 8010220:	2b18      	cmp	r3, #24
 8010222:	d91d      	bls.n	8010260 <__gethex+0x14c>
 8010224:	f1b9 0f00 	cmp.w	r9, #0
 8010228:	d000      	beq.n	801022c <__gethex+0x118>
 801022a:	4252      	negs	r2, r2
 801022c:	4415      	add	r5, r2
 801022e:	f8cb 1000 	str.w	r1, [fp]
 8010232:	b1e4      	cbz	r4, 801026e <__gethex+0x15a>
 8010234:	9b00      	ldr	r3, [sp, #0]
 8010236:	2b00      	cmp	r3, #0
 8010238:	bf14      	ite	ne
 801023a:	2700      	movne	r7, #0
 801023c:	2706      	moveq	r7, #6
 801023e:	4638      	mov	r0, r7
 8010240:	b009      	add	sp, #36	; 0x24
 8010242:	ecbd 8b02 	vpop	{d8}
 8010246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801024a:	463e      	mov	r6, r7
 801024c:	4625      	mov	r5, r4
 801024e:	2401      	movs	r4, #1
 8010250:	e7ca      	b.n	80101e8 <__gethex+0xd4>
 8010252:	f04f 0900 	mov.w	r9, #0
 8010256:	1cb1      	adds	r1, r6, #2
 8010258:	e7d3      	b.n	8010202 <__gethex+0xee>
 801025a:	f04f 0901 	mov.w	r9, #1
 801025e:	e7fa      	b.n	8010256 <__gethex+0x142>
 8010260:	230a      	movs	r3, #10
 8010262:	fb03 0202 	mla	r2, r3, r2, r0
 8010266:	3a10      	subs	r2, #16
 8010268:	e7d4      	b.n	8010214 <__gethex+0x100>
 801026a:	4631      	mov	r1, r6
 801026c:	e7df      	b.n	801022e <__gethex+0x11a>
 801026e:	1bf3      	subs	r3, r6, r7
 8010270:	3b01      	subs	r3, #1
 8010272:	4621      	mov	r1, r4
 8010274:	2b07      	cmp	r3, #7
 8010276:	dc0b      	bgt.n	8010290 <__gethex+0x17c>
 8010278:	ee18 0a10 	vmov	r0, s16
 801027c:	f000 fad8 	bl	8010830 <_Balloc>
 8010280:	4604      	mov	r4, r0
 8010282:	b940      	cbnz	r0, 8010296 <__gethex+0x182>
 8010284:	4b65      	ldr	r3, [pc, #404]	; (801041c <__gethex+0x308>)
 8010286:	4602      	mov	r2, r0
 8010288:	21de      	movs	r1, #222	; 0xde
 801028a:	4865      	ldr	r0, [pc, #404]	; (8010420 <__gethex+0x30c>)
 801028c:	f001 fa2c 	bl	80116e8 <__assert_func>
 8010290:	3101      	adds	r1, #1
 8010292:	105b      	asrs	r3, r3, #1
 8010294:	e7ee      	b.n	8010274 <__gethex+0x160>
 8010296:	f100 0914 	add.w	r9, r0, #20
 801029a:	f04f 0b00 	mov.w	fp, #0
 801029e:	f1ca 0301 	rsb	r3, sl, #1
 80102a2:	f8cd 9008 	str.w	r9, [sp, #8]
 80102a6:	f8cd b000 	str.w	fp, [sp]
 80102aa:	9306      	str	r3, [sp, #24]
 80102ac:	42b7      	cmp	r7, r6
 80102ae:	d340      	bcc.n	8010332 <__gethex+0x21e>
 80102b0:	9802      	ldr	r0, [sp, #8]
 80102b2:	9b00      	ldr	r3, [sp, #0]
 80102b4:	f840 3b04 	str.w	r3, [r0], #4
 80102b8:	eba0 0009 	sub.w	r0, r0, r9
 80102bc:	1080      	asrs	r0, r0, #2
 80102be:	0146      	lsls	r6, r0, #5
 80102c0:	6120      	str	r0, [r4, #16]
 80102c2:	4618      	mov	r0, r3
 80102c4:	f000 fbaa 	bl	8010a1c <__hi0bits>
 80102c8:	1a30      	subs	r0, r6, r0
 80102ca:	f8d8 6000 	ldr.w	r6, [r8]
 80102ce:	42b0      	cmp	r0, r6
 80102d0:	dd63      	ble.n	801039a <__gethex+0x286>
 80102d2:	1b87      	subs	r7, r0, r6
 80102d4:	4639      	mov	r1, r7
 80102d6:	4620      	mov	r0, r4
 80102d8:	f000 ff44 	bl	8011164 <__any_on>
 80102dc:	4682      	mov	sl, r0
 80102de:	b1a8      	cbz	r0, 801030c <__gethex+0x1f8>
 80102e0:	1e7b      	subs	r3, r7, #1
 80102e2:	1159      	asrs	r1, r3, #5
 80102e4:	f003 021f 	and.w	r2, r3, #31
 80102e8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80102ec:	f04f 0a01 	mov.w	sl, #1
 80102f0:	fa0a f202 	lsl.w	r2, sl, r2
 80102f4:	420a      	tst	r2, r1
 80102f6:	d009      	beq.n	801030c <__gethex+0x1f8>
 80102f8:	4553      	cmp	r3, sl
 80102fa:	dd05      	ble.n	8010308 <__gethex+0x1f4>
 80102fc:	1eb9      	subs	r1, r7, #2
 80102fe:	4620      	mov	r0, r4
 8010300:	f000 ff30 	bl	8011164 <__any_on>
 8010304:	2800      	cmp	r0, #0
 8010306:	d145      	bne.n	8010394 <__gethex+0x280>
 8010308:	f04f 0a02 	mov.w	sl, #2
 801030c:	4639      	mov	r1, r7
 801030e:	4620      	mov	r0, r4
 8010310:	f7ff fe99 	bl	8010046 <rshift>
 8010314:	443d      	add	r5, r7
 8010316:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801031a:	42ab      	cmp	r3, r5
 801031c:	da4c      	bge.n	80103b8 <__gethex+0x2a4>
 801031e:	ee18 0a10 	vmov	r0, s16
 8010322:	4621      	mov	r1, r4
 8010324:	f000 fac4 	bl	80108b0 <_Bfree>
 8010328:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801032a:	2300      	movs	r3, #0
 801032c:	6013      	str	r3, [r2, #0]
 801032e:	27a3      	movs	r7, #163	; 0xa3
 8010330:	e785      	b.n	801023e <__gethex+0x12a>
 8010332:	1e73      	subs	r3, r6, #1
 8010334:	9a05      	ldr	r2, [sp, #20]
 8010336:	9303      	str	r3, [sp, #12]
 8010338:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801033c:	4293      	cmp	r3, r2
 801033e:	d019      	beq.n	8010374 <__gethex+0x260>
 8010340:	f1bb 0f20 	cmp.w	fp, #32
 8010344:	d107      	bne.n	8010356 <__gethex+0x242>
 8010346:	9b02      	ldr	r3, [sp, #8]
 8010348:	9a00      	ldr	r2, [sp, #0]
 801034a:	f843 2b04 	str.w	r2, [r3], #4
 801034e:	9302      	str	r3, [sp, #8]
 8010350:	2300      	movs	r3, #0
 8010352:	9300      	str	r3, [sp, #0]
 8010354:	469b      	mov	fp, r3
 8010356:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801035a:	f7ff fec6 	bl	80100ea <__hexdig_fun>
 801035e:	9b00      	ldr	r3, [sp, #0]
 8010360:	f000 000f 	and.w	r0, r0, #15
 8010364:	fa00 f00b 	lsl.w	r0, r0, fp
 8010368:	4303      	orrs	r3, r0
 801036a:	9300      	str	r3, [sp, #0]
 801036c:	f10b 0b04 	add.w	fp, fp, #4
 8010370:	9b03      	ldr	r3, [sp, #12]
 8010372:	e00d      	b.n	8010390 <__gethex+0x27c>
 8010374:	9b03      	ldr	r3, [sp, #12]
 8010376:	9a06      	ldr	r2, [sp, #24]
 8010378:	4413      	add	r3, r2
 801037a:	42bb      	cmp	r3, r7
 801037c:	d3e0      	bcc.n	8010340 <__gethex+0x22c>
 801037e:	4618      	mov	r0, r3
 8010380:	9901      	ldr	r1, [sp, #4]
 8010382:	9307      	str	r3, [sp, #28]
 8010384:	4652      	mov	r2, sl
 8010386:	f001 f97e 	bl	8011686 <strncmp>
 801038a:	9b07      	ldr	r3, [sp, #28]
 801038c:	2800      	cmp	r0, #0
 801038e:	d1d7      	bne.n	8010340 <__gethex+0x22c>
 8010390:	461e      	mov	r6, r3
 8010392:	e78b      	b.n	80102ac <__gethex+0x198>
 8010394:	f04f 0a03 	mov.w	sl, #3
 8010398:	e7b8      	b.n	801030c <__gethex+0x1f8>
 801039a:	da0a      	bge.n	80103b2 <__gethex+0x29e>
 801039c:	1a37      	subs	r7, r6, r0
 801039e:	4621      	mov	r1, r4
 80103a0:	ee18 0a10 	vmov	r0, s16
 80103a4:	463a      	mov	r2, r7
 80103a6:	f000 fc9f 	bl	8010ce8 <__lshift>
 80103aa:	1bed      	subs	r5, r5, r7
 80103ac:	4604      	mov	r4, r0
 80103ae:	f100 0914 	add.w	r9, r0, #20
 80103b2:	f04f 0a00 	mov.w	sl, #0
 80103b6:	e7ae      	b.n	8010316 <__gethex+0x202>
 80103b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80103bc:	42a8      	cmp	r0, r5
 80103be:	dd72      	ble.n	80104a6 <__gethex+0x392>
 80103c0:	1b45      	subs	r5, r0, r5
 80103c2:	42ae      	cmp	r6, r5
 80103c4:	dc36      	bgt.n	8010434 <__gethex+0x320>
 80103c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80103ca:	2b02      	cmp	r3, #2
 80103cc:	d02a      	beq.n	8010424 <__gethex+0x310>
 80103ce:	2b03      	cmp	r3, #3
 80103d0:	d02c      	beq.n	801042c <__gethex+0x318>
 80103d2:	2b01      	cmp	r3, #1
 80103d4:	d115      	bne.n	8010402 <__gethex+0x2ee>
 80103d6:	42ae      	cmp	r6, r5
 80103d8:	d113      	bne.n	8010402 <__gethex+0x2ee>
 80103da:	2e01      	cmp	r6, #1
 80103dc:	d10b      	bne.n	80103f6 <__gethex+0x2e2>
 80103de:	9a04      	ldr	r2, [sp, #16]
 80103e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80103e4:	6013      	str	r3, [r2, #0]
 80103e6:	2301      	movs	r3, #1
 80103e8:	6123      	str	r3, [r4, #16]
 80103ea:	f8c9 3000 	str.w	r3, [r9]
 80103ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80103f0:	2762      	movs	r7, #98	; 0x62
 80103f2:	601c      	str	r4, [r3, #0]
 80103f4:	e723      	b.n	801023e <__gethex+0x12a>
 80103f6:	1e71      	subs	r1, r6, #1
 80103f8:	4620      	mov	r0, r4
 80103fa:	f000 feb3 	bl	8011164 <__any_on>
 80103fe:	2800      	cmp	r0, #0
 8010400:	d1ed      	bne.n	80103de <__gethex+0x2ca>
 8010402:	ee18 0a10 	vmov	r0, s16
 8010406:	4621      	mov	r1, r4
 8010408:	f000 fa52 	bl	80108b0 <_Bfree>
 801040c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801040e:	2300      	movs	r3, #0
 8010410:	6013      	str	r3, [r2, #0]
 8010412:	2750      	movs	r7, #80	; 0x50
 8010414:	e713      	b.n	801023e <__gethex+0x12a>
 8010416:	bf00      	nop
 8010418:	080131fc 	.word	0x080131fc
 801041c:	0801311c 	.word	0x0801311c
 8010420:	08013190 	.word	0x08013190
 8010424:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010426:	2b00      	cmp	r3, #0
 8010428:	d1eb      	bne.n	8010402 <__gethex+0x2ee>
 801042a:	e7d8      	b.n	80103de <__gethex+0x2ca>
 801042c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801042e:	2b00      	cmp	r3, #0
 8010430:	d1d5      	bne.n	80103de <__gethex+0x2ca>
 8010432:	e7e6      	b.n	8010402 <__gethex+0x2ee>
 8010434:	1e6f      	subs	r7, r5, #1
 8010436:	f1ba 0f00 	cmp.w	sl, #0
 801043a:	d131      	bne.n	80104a0 <__gethex+0x38c>
 801043c:	b127      	cbz	r7, 8010448 <__gethex+0x334>
 801043e:	4639      	mov	r1, r7
 8010440:	4620      	mov	r0, r4
 8010442:	f000 fe8f 	bl	8011164 <__any_on>
 8010446:	4682      	mov	sl, r0
 8010448:	117b      	asrs	r3, r7, #5
 801044a:	2101      	movs	r1, #1
 801044c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010450:	f007 071f 	and.w	r7, r7, #31
 8010454:	fa01 f707 	lsl.w	r7, r1, r7
 8010458:	421f      	tst	r7, r3
 801045a:	4629      	mov	r1, r5
 801045c:	4620      	mov	r0, r4
 801045e:	bf18      	it	ne
 8010460:	f04a 0a02 	orrne.w	sl, sl, #2
 8010464:	1b76      	subs	r6, r6, r5
 8010466:	f7ff fdee 	bl	8010046 <rshift>
 801046a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801046e:	2702      	movs	r7, #2
 8010470:	f1ba 0f00 	cmp.w	sl, #0
 8010474:	d048      	beq.n	8010508 <__gethex+0x3f4>
 8010476:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801047a:	2b02      	cmp	r3, #2
 801047c:	d015      	beq.n	80104aa <__gethex+0x396>
 801047e:	2b03      	cmp	r3, #3
 8010480:	d017      	beq.n	80104b2 <__gethex+0x39e>
 8010482:	2b01      	cmp	r3, #1
 8010484:	d109      	bne.n	801049a <__gethex+0x386>
 8010486:	f01a 0f02 	tst.w	sl, #2
 801048a:	d006      	beq.n	801049a <__gethex+0x386>
 801048c:	f8d9 0000 	ldr.w	r0, [r9]
 8010490:	ea4a 0a00 	orr.w	sl, sl, r0
 8010494:	f01a 0f01 	tst.w	sl, #1
 8010498:	d10e      	bne.n	80104b8 <__gethex+0x3a4>
 801049a:	f047 0710 	orr.w	r7, r7, #16
 801049e:	e033      	b.n	8010508 <__gethex+0x3f4>
 80104a0:	f04f 0a01 	mov.w	sl, #1
 80104a4:	e7d0      	b.n	8010448 <__gethex+0x334>
 80104a6:	2701      	movs	r7, #1
 80104a8:	e7e2      	b.n	8010470 <__gethex+0x35c>
 80104aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104ac:	f1c3 0301 	rsb	r3, r3, #1
 80104b0:	9315      	str	r3, [sp, #84]	; 0x54
 80104b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d0f0      	beq.n	801049a <__gethex+0x386>
 80104b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80104bc:	f104 0314 	add.w	r3, r4, #20
 80104c0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80104c4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80104c8:	f04f 0c00 	mov.w	ip, #0
 80104cc:	4618      	mov	r0, r3
 80104ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80104d2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80104d6:	d01c      	beq.n	8010512 <__gethex+0x3fe>
 80104d8:	3201      	adds	r2, #1
 80104da:	6002      	str	r2, [r0, #0]
 80104dc:	2f02      	cmp	r7, #2
 80104de:	f104 0314 	add.w	r3, r4, #20
 80104e2:	d13f      	bne.n	8010564 <__gethex+0x450>
 80104e4:	f8d8 2000 	ldr.w	r2, [r8]
 80104e8:	3a01      	subs	r2, #1
 80104ea:	42b2      	cmp	r2, r6
 80104ec:	d10a      	bne.n	8010504 <__gethex+0x3f0>
 80104ee:	1171      	asrs	r1, r6, #5
 80104f0:	2201      	movs	r2, #1
 80104f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80104f6:	f006 061f 	and.w	r6, r6, #31
 80104fa:	fa02 f606 	lsl.w	r6, r2, r6
 80104fe:	421e      	tst	r6, r3
 8010500:	bf18      	it	ne
 8010502:	4617      	movne	r7, r2
 8010504:	f047 0720 	orr.w	r7, r7, #32
 8010508:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801050a:	601c      	str	r4, [r3, #0]
 801050c:	9b04      	ldr	r3, [sp, #16]
 801050e:	601d      	str	r5, [r3, #0]
 8010510:	e695      	b.n	801023e <__gethex+0x12a>
 8010512:	4299      	cmp	r1, r3
 8010514:	f843 cc04 	str.w	ip, [r3, #-4]
 8010518:	d8d8      	bhi.n	80104cc <__gethex+0x3b8>
 801051a:	68a3      	ldr	r3, [r4, #8]
 801051c:	459b      	cmp	fp, r3
 801051e:	db19      	blt.n	8010554 <__gethex+0x440>
 8010520:	6861      	ldr	r1, [r4, #4]
 8010522:	ee18 0a10 	vmov	r0, s16
 8010526:	3101      	adds	r1, #1
 8010528:	f000 f982 	bl	8010830 <_Balloc>
 801052c:	4681      	mov	r9, r0
 801052e:	b918      	cbnz	r0, 8010538 <__gethex+0x424>
 8010530:	4b1a      	ldr	r3, [pc, #104]	; (801059c <__gethex+0x488>)
 8010532:	4602      	mov	r2, r0
 8010534:	2184      	movs	r1, #132	; 0x84
 8010536:	e6a8      	b.n	801028a <__gethex+0x176>
 8010538:	6922      	ldr	r2, [r4, #16]
 801053a:	3202      	adds	r2, #2
 801053c:	f104 010c 	add.w	r1, r4, #12
 8010540:	0092      	lsls	r2, r2, #2
 8010542:	300c      	adds	r0, #12
 8010544:	f7fd f8c0 	bl	800d6c8 <memcpy>
 8010548:	4621      	mov	r1, r4
 801054a:	ee18 0a10 	vmov	r0, s16
 801054e:	f000 f9af 	bl	80108b0 <_Bfree>
 8010552:	464c      	mov	r4, r9
 8010554:	6923      	ldr	r3, [r4, #16]
 8010556:	1c5a      	adds	r2, r3, #1
 8010558:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801055c:	6122      	str	r2, [r4, #16]
 801055e:	2201      	movs	r2, #1
 8010560:	615a      	str	r2, [r3, #20]
 8010562:	e7bb      	b.n	80104dc <__gethex+0x3c8>
 8010564:	6922      	ldr	r2, [r4, #16]
 8010566:	455a      	cmp	r2, fp
 8010568:	dd0b      	ble.n	8010582 <__gethex+0x46e>
 801056a:	2101      	movs	r1, #1
 801056c:	4620      	mov	r0, r4
 801056e:	f7ff fd6a 	bl	8010046 <rshift>
 8010572:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010576:	3501      	adds	r5, #1
 8010578:	42ab      	cmp	r3, r5
 801057a:	f6ff aed0 	blt.w	801031e <__gethex+0x20a>
 801057e:	2701      	movs	r7, #1
 8010580:	e7c0      	b.n	8010504 <__gethex+0x3f0>
 8010582:	f016 061f 	ands.w	r6, r6, #31
 8010586:	d0fa      	beq.n	801057e <__gethex+0x46a>
 8010588:	449a      	add	sl, r3
 801058a:	f1c6 0620 	rsb	r6, r6, #32
 801058e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010592:	f000 fa43 	bl	8010a1c <__hi0bits>
 8010596:	42b0      	cmp	r0, r6
 8010598:	dbe7      	blt.n	801056a <__gethex+0x456>
 801059a:	e7f0      	b.n	801057e <__gethex+0x46a>
 801059c:	0801311c 	.word	0x0801311c

080105a0 <L_shift>:
 80105a0:	f1c2 0208 	rsb	r2, r2, #8
 80105a4:	0092      	lsls	r2, r2, #2
 80105a6:	b570      	push	{r4, r5, r6, lr}
 80105a8:	f1c2 0620 	rsb	r6, r2, #32
 80105ac:	6843      	ldr	r3, [r0, #4]
 80105ae:	6804      	ldr	r4, [r0, #0]
 80105b0:	fa03 f506 	lsl.w	r5, r3, r6
 80105b4:	432c      	orrs	r4, r5
 80105b6:	40d3      	lsrs	r3, r2
 80105b8:	6004      	str	r4, [r0, #0]
 80105ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80105be:	4288      	cmp	r0, r1
 80105c0:	d3f4      	bcc.n	80105ac <L_shift+0xc>
 80105c2:	bd70      	pop	{r4, r5, r6, pc}

080105c4 <__match>:
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	6803      	ldr	r3, [r0, #0]
 80105c8:	3301      	adds	r3, #1
 80105ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105ce:	b914      	cbnz	r4, 80105d6 <__match+0x12>
 80105d0:	6003      	str	r3, [r0, #0]
 80105d2:	2001      	movs	r0, #1
 80105d4:	bd30      	pop	{r4, r5, pc}
 80105d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80105de:	2d19      	cmp	r5, #25
 80105e0:	bf98      	it	ls
 80105e2:	3220      	addls	r2, #32
 80105e4:	42a2      	cmp	r2, r4
 80105e6:	d0f0      	beq.n	80105ca <__match+0x6>
 80105e8:	2000      	movs	r0, #0
 80105ea:	e7f3      	b.n	80105d4 <__match+0x10>

080105ec <__hexnan>:
 80105ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105f0:	680b      	ldr	r3, [r1, #0]
 80105f2:	6801      	ldr	r1, [r0, #0]
 80105f4:	115e      	asrs	r6, r3, #5
 80105f6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80105fa:	f013 031f 	ands.w	r3, r3, #31
 80105fe:	b087      	sub	sp, #28
 8010600:	bf18      	it	ne
 8010602:	3604      	addne	r6, #4
 8010604:	2500      	movs	r5, #0
 8010606:	1f37      	subs	r7, r6, #4
 8010608:	4682      	mov	sl, r0
 801060a:	4690      	mov	r8, r2
 801060c:	9301      	str	r3, [sp, #4]
 801060e:	f846 5c04 	str.w	r5, [r6, #-4]
 8010612:	46b9      	mov	r9, r7
 8010614:	463c      	mov	r4, r7
 8010616:	9502      	str	r5, [sp, #8]
 8010618:	46ab      	mov	fp, r5
 801061a:	784a      	ldrb	r2, [r1, #1]
 801061c:	1c4b      	adds	r3, r1, #1
 801061e:	9303      	str	r3, [sp, #12]
 8010620:	b342      	cbz	r2, 8010674 <__hexnan+0x88>
 8010622:	4610      	mov	r0, r2
 8010624:	9105      	str	r1, [sp, #20]
 8010626:	9204      	str	r2, [sp, #16]
 8010628:	f7ff fd5f 	bl	80100ea <__hexdig_fun>
 801062c:	2800      	cmp	r0, #0
 801062e:	d14f      	bne.n	80106d0 <__hexnan+0xe4>
 8010630:	9a04      	ldr	r2, [sp, #16]
 8010632:	9905      	ldr	r1, [sp, #20]
 8010634:	2a20      	cmp	r2, #32
 8010636:	d818      	bhi.n	801066a <__hexnan+0x7e>
 8010638:	9b02      	ldr	r3, [sp, #8]
 801063a:	459b      	cmp	fp, r3
 801063c:	dd13      	ble.n	8010666 <__hexnan+0x7a>
 801063e:	454c      	cmp	r4, r9
 8010640:	d206      	bcs.n	8010650 <__hexnan+0x64>
 8010642:	2d07      	cmp	r5, #7
 8010644:	dc04      	bgt.n	8010650 <__hexnan+0x64>
 8010646:	462a      	mov	r2, r5
 8010648:	4649      	mov	r1, r9
 801064a:	4620      	mov	r0, r4
 801064c:	f7ff ffa8 	bl	80105a0 <L_shift>
 8010650:	4544      	cmp	r4, r8
 8010652:	d950      	bls.n	80106f6 <__hexnan+0x10a>
 8010654:	2300      	movs	r3, #0
 8010656:	f1a4 0904 	sub.w	r9, r4, #4
 801065a:	f844 3c04 	str.w	r3, [r4, #-4]
 801065e:	f8cd b008 	str.w	fp, [sp, #8]
 8010662:	464c      	mov	r4, r9
 8010664:	461d      	mov	r5, r3
 8010666:	9903      	ldr	r1, [sp, #12]
 8010668:	e7d7      	b.n	801061a <__hexnan+0x2e>
 801066a:	2a29      	cmp	r2, #41	; 0x29
 801066c:	d156      	bne.n	801071c <__hexnan+0x130>
 801066e:	3102      	adds	r1, #2
 8010670:	f8ca 1000 	str.w	r1, [sl]
 8010674:	f1bb 0f00 	cmp.w	fp, #0
 8010678:	d050      	beq.n	801071c <__hexnan+0x130>
 801067a:	454c      	cmp	r4, r9
 801067c:	d206      	bcs.n	801068c <__hexnan+0xa0>
 801067e:	2d07      	cmp	r5, #7
 8010680:	dc04      	bgt.n	801068c <__hexnan+0xa0>
 8010682:	462a      	mov	r2, r5
 8010684:	4649      	mov	r1, r9
 8010686:	4620      	mov	r0, r4
 8010688:	f7ff ff8a 	bl	80105a0 <L_shift>
 801068c:	4544      	cmp	r4, r8
 801068e:	d934      	bls.n	80106fa <__hexnan+0x10e>
 8010690:	f1a8 0204 	sub.w	r2, r8, #4
 8010694:	4623      	mov	r3, r4
 8010696:	f853 1b04 	ldr.w	r1, [r3], #4
 801069a:	f842 1f04 	str.w	r1, [r2, #4]!
 801069e:	429f      	cmp	r7, r3
 80106a0:	d2f9      	bcs.n	8010696 <__hexnan+0xaa>
 80106a2:	1b3b      	subs	r3, r7, r4
 80106a4:	f023 0303 	bic.w	r3, r3, #3
 80106a8:	3304      	adds	r3, #4
 80106aa:	3401      	adds	r4, #1
 80106ac:	3e03      	subs	r6, #3
 80106ae:	42b4      	cmp	r4, r6
 80106b0:	bf88      	it	hi
 80106b2:	2304      	movhi	r3, #4
 80106b4:	4443      	add	r3, r8
 80106b6:	2200      	movs	r2, #0
 80106b8:	f843 2b04 	str.w	r2, [r3], #4
 80106bc:	429f      	cmp	r7, r3
 80106be:	d2fb      	bcs.n	80106b8 <__hexnan+0xcc>
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	b91b      	cbnz	r3, 80106cc <__hexnan+0xe0>
 80106c4:	4547      	cmp	r7, r8
 80106c6:	d127      	bne.n	8010718 <__hexnan+0x12c>
 80106c8:	2301      	movs	r3, #1
 80106ca:	603b      	str	r3, [r7, #0]
 80106cc:	2005      	movs	r0, #5
 80106ce:	e026      	b.n	801071e <__hexnan+0x132>
 80106d0:	3501      	adds	r5, #1
 80106d2:	2d08      	cmp	r5, #8
 80106d4:	f10b 0b01 	add.w	fp, fp, #1
 80106d8:	dd06      	ble.n	80106e8 <__hexnan+0xfc>
 80106da:	4544      	cmp	r4, r8
 80106dc:	d9c3      	bls.n	8010666 <__hexnan+0x7a>
 80106de:	2300      	movs	r3, #0
 80106e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80106e4:	2501      	movs	r5, #1
 80106e6:	3c04      	subs	r4, #4
 80106e8:	6822      	ldr	r2, [r4, #0]
 80106ea:	f000 000f 	and.w	r0, r0, #15
 80106ee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80106f2:	6022      	str	r2, [r4, #0]
 80106f4:	e7b7      	b.n	8010666 <__hexnan+0x7a>
 80106f6:	2508      	movs	r5, #8
 80106f8:	e7b5      	b.n	8010666 <__hexnan+0x7a>
 80106fa:	9b01      	ldr	r3, [sp, #4]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d0df      	beq.n	80106c0 <__hexnan+0xd4>
 8010700:	f04f 32ff 	mov.w	r2, #4294967295
 8010704:	f1c3 0320 	rsb	r3, r3, #32
 8010708:	fa22 f303 	lsr.w	r3, r2, r3
 801070c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010710:	401a      	ands	r2, r3
 8010712:	f846 2c04 	str.w	r2, [r6, #-4]
 8010716:	e7d3      	b.n	80106c0 <__hexnan+0xd4>
 8010718:	3f04      	subs	r7, #4
 801071a:	e7d1      	b.n	80106c0 <__hexnan+0xd4>
 801071c:	2004      	movs	r0, #4
 801071e:	b007      	add	sp, #28
 8010720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010724 <_localeconv_r>:
 8010724:	4800      	ldr	r0, [pc, #0]	; (8010728 <_localeconv_r+0x4>)
 8010726:	4770      	bx	lr
 8010728:	20000184 	.word	0x20000184

0801072c <__retarget_lock_init_recursive>:
 801072c:	4770      	bx	lr

0801072e <__retarget_lock_acquire_recursive>:
 801072e:	4770      	bx	lr

08010730 <__retarget_lock_release_recursive>:
 8010730:	4770      	bx	lr

08010732 <__swhatbuf_r>:
 8010732:	b570      	push	{r4, r5, r6, lr}
 8010734:	460e      	mov	r6, r1
 8010736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801073a:	2900      	cmp	r1, #0
 801073c:	b096      	sub	sp, #88	; 0x58
 801073e:	4614      	mov	r4, r2
 8010740:	461d      	mov	r5, r3
 8010742:	da07      	bge.n	8010754 <__swhatbuf_r+0x22>
 8010744:	2300      	movs	r3, #0
 8010746:	602b      	str	r3, [r5, #0]
 8010748:	89b3      	ldrh	r3, [r6, #12]
 801074a:	061a      	lsls	r2, r3, #24
 801074c:	d410      	bmi.n	8010770 <__swhatbuf_r+0x3e>
 801074e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010752:	e00e      	b.n	8010772 <__swhatbuf_r+0x40>
 8010754:	466a      	mov	r2, sp
 8010756:	f001 f807 	bl	8011768 <_fstat_r>
 801075a:	2800      	cmp	r0, #0
 801075c:	dbf2      	blt.n	8010744 <__swhatbuf_r+0x12>
 801075e:	9a01      	ldr	r2, [sp, #4]
 8010760:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010764:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010768:	425a      	negs	r2, r3
 801076a:	415a      	adcs	r2, r3
 801076c:	602a      	str	r2, [r5, #0]
 801076e:	e7ee      	b.n	801074e <__swhatbuf_r+0x1c>
 8010770:	2340      	movs	r3, #64	; 0x40
 8010772:	2000      	movs	r0, #0
 8010774:	6023      	str	r3, [r4, #0]
 8010776:	b016      	add	sp, #88	; 0x58
 8010778:	bd70      	pop	{r4, r5, r6, pc}
	...

0801077c <__smakebuf_r>:
 801077c:	898b      	ldrh	r3, [r1, #12]
 801077e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010780:	079d      	lsls	r5, r3, #30
 8010782:	4606      	mov	r6, r0
 8010784:	460c      	mov	r4, r1
 8010786:	d507      	bpl.n	8010798 <__smakebuf_r+0x1c>
 8010788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801078c:	6023      	str	r3, [r4, #0]
 801078e:	6123      	str	r3, [r4, #16]
 8010790:	2301      	movs	r3, #1
 8010792:	6163      	str	r3, [r4, #20]
 8010794:	b002      	add	sp, #8
 8010796:	bd70      	pop	{r4, r5, r6, pc}
 8010798:	ab01      	add	r3, sp, #4
 801079a:	466a      	mov	r2, sp
 801079c:	f7ff ffc9 	bl	8010732 <__swhatbuf_r>
 80107a0:	9900      	ldr	r1, [sp, #0]
 80107a2:	4605      	mov	r5, r0
 80107a4:	4630      	mov	r0, r6
 80107a6:	f000 fd5d 	bl	8011264 <_malloc_r>
 80107aa:	b948      	cbnz	r0, 80107c0 <__smakebuf_r+0x44>
 80107ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107b0:	059a      	lsls	r2, r3, #22
 80107b2:	d4ef      	bmi.n	8010794 <__smakebuf_r+0x18>
 80107b4:	f023 0303 	bic.w	r3, r3, #3
 80107b8:	f043 0302 	orr.w	r3, r3, #2
 80107bc:	81a3      	strh	r3, [r4, #12]
 80107be:	e7e3      	b.n	8010788 <__smakebuf_r+0xc>
 80107c0:	4b0d      	ldr	r3, [pc, #52]	; (80107f8 <__smakebuf_r+0x7c>)
 80107c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80107c4:	89a3      	ldrh	r3, [r4, #12]
 80107c6:	6020      	str	r0, [r4, #0]
 80107c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107cc:	81a3      	strh	r3, [r4, #12]
 80107ce:	9b00      	ldr	r3, [sp, #0]
 80107d0:	6163      	str	r3, [r4, #20]
 80107d2:	9b01      	ldr	r3, [sp, #4]
 80107d4:	6120      	str	r0, [r4, #16]
 80107d6:	b15b      	cbz	r3, 80107f0 <__smakebuf_r+0x74>
 80107d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107dc:	4630      	mov	r0, r6
 80107de:	f000 ffd5 	bl	801178c <_isatty_r>
 80107e2:	b128      	cbz	r0, 80107f0 <__smakebuf_r+0x74>
 80107e4:	89a3      	ldrh	r3, [r4, #12]
 80107e6:	f023 0303 	bic.w	r3, r3, #3
 80107ea:	f043 0301 	orr.w	r3, r3, #1
 80107ee:	81a3      	strh	r3, [r4, #12]
 80107f0:	89a0      	ldrh	r0, [r4, #12]
 80107f2:	4305      	orrs	r5, r0
 80107f4:	81a5      	strh	r5, [r4, #12]
 80107f6:	e7cd      	b.n	8010794 <__smakebuf_r+0x18>
 80107f8:	0800fea5 	.word	0x0800fea5

080107fc <malloc>:
 80107fc:	4b02      	ldr	r3, [pc, #8]	; (8010808 <malloc+0xc>)
 80107fe:	4601      	mov	r1, r0
 8010800:	6818      	ldr	r0, [r3, #0]
 8010802:	f000 bd2f 	b.w	8011264 <_malloc_r>
 8010806:	bf00      	nop
 8010808:	2000002c 	.word	0x2000002c

0801080c <__ascii_mbtowc>:
 801080c:	b082      	sub	sp, #8
 801080e:	b901      	cbnz	r1, 8010812 <__ascii_mbtowc+0x6>
 8010810:	a901      	add	r1, sp, #4
 8010812:	b142      	cbz	r2, 8010826 <__ascii_mbtowc+0x1a>
 8010814:	b14b      	cbz	r3, 801082a <__ascii_mbtowc+0x1e>
 8010816:	7813      	ldrb	r3, [r2, #0]
 8010818:	600b      	str	r3, [r1, #0]
 801081a:	7812      	ldrb	r2, [r2, #0]
 801081c:	1e10      	subs	r0, r2, #0
 801081e:	bf18      	it	ne
 8010820:	2001      	movne	r0, #1
 8010822:	b002      	add	sp, #8
 8010824:	4770      	bx	lr
 8010826:	4610      	mov	r0, r2
 8010828:	e7fb      	b.n	8010822 <__ascii_mbtowc+0x16>
 801082a:	f06f 0001 	mvn.w	r0, #1
 801082e:	e7f8      	b.n	8010822 <__ascii_mbtowc+0x16>

08010830 <_Balloc>:
 8010830:	b570      	push	{r4, r5, r6, lr}
 8010832:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010834:	4604      	mov	r4, r0
 8010836:	460d      	mov	r5, r1
 8010838:	b976      	cbnz	r6, 8010858 <_Balloc+0x28>
 801083a:	2010      	movs	r0, #16
 801083c:	f7ff ffde 	bl	80107fc <malloc>
 8010840:	4602      	mov	r2, r0
 8010842:	6260      	str	r0, [r4, #36]	; 0x24
 8010844:	b920      	cbnz	r0, 8010850 <_Balloc+0x20>
 8010846:	4b18      	ldr	r3, [pc, #96]	; (80108a8 <_Balloc+0x78>)
 8010848:	4818      	ldr	r0, [pc, #96]	; (80108ac <_Balloc+0x7c>)
 801084a:	2166      	movs	r1, #102	; 0x66
 801084c:	f000 ff4c 	bl	80116e8 <__assert_func>
 8010850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010854:	6006      	str	r6, [r0, #0]
 8010856:	60c6      	str	r6, [r0, #12]
 8010858:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801085a:	68f3      	ldr	r3, [r6, #12]
 801085c:	b183      	cbz	r3, 8010880 <_Balloc+0x50>
 801085e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010860:	68db      	ldr	r3, [r3, #12]
 8010862:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010866:	b9b8      	cbnz	r0, 8010898 <_Balloc+0x68>
 8010868:	2101      	movs	r1, #1
 801086a:	fa01 f605 	lsl.w	r6, r1, r5
 801086e:	1d72      	adds	r2, r6, #5
 8010870:	0092      	lsls	r2, r2, #2
 8010872:	4620      	mov	r0, r4
 8010874:	f000 fc97 	bl	80111a6 <_calloc_r>
 8010878:	b160      	cbz	r0, 8010894 <_Balloc+0x64>
 801087a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801087e:	e00e      	b.n	801089e <_Balloc+0x6e>
 8010880:	2221      	movs	r2, #33	; 0x21
 8010882:	2104      	movs	r1, #4
 8010884:	4620      	mov	r0, r4
 8010886:	f000 fc8e 	bl	80111a6 <_calloc_r>
 801088a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801088c:	60f0      	str	r0, [r6, #12]
 801088e:	68db      	ldr	r3, [r3, #12]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d1e4      	bne.n	801085e <_Balloc+0x2e>
 8010894:	2000      	movs	r0, #0
 8010896:	bd70      	pop	{r4, r5, r6, pc}
 8010898:	6802      	ldr	r2, [r0, #0]
 801089a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801089e:	2300      	movs	r3, #0
 80108a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80108a4:	e7f7      	b.n	8010896 <_Balloc+0x66>
 80108a6:	bf00      	nop
 80108a8:	080130a6 	.word	0x080130a6
 80108ac:	08013210 	.word	0x08013210

080108b0 <_Bfree>:
 80108b0:	b570      	push	{r4, r5, r6, lr}
 80108b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80108b4:	4605      	mov	r5, r0
 80108b6:	460c      	mov	r4, r1
 80108b8:	b976      	cbnz	r6, 80108d8 <_Bfree+0x28>
 80108ba:	2010      	movs	r0, #16
 80108bc:	f7ff ff9e 	bl	80107fc <malloc>
 80108c0:	4602      	mov	r2, r0
 80108c2:	6268      	str	r0, [r5, #36]	; 0x24
 80108c4:	b920      	cbnz	r0, 80108d0 <_Bfree+0x20>
 80108c6:	4b09      	ldr	r3, [pc, #36]	; (80108ec <_Bfree+0x3c>)
 80108c8:	4809      	ldr	r0, [pc, #36]	; (80108f0 <_Bfree+0x40>)
 80108ca:	218a      	movs	r1, #138	; 0x8a
 80108cc:	f000 ff0c 	bl	80116e8 <__assert_func>
 80108d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80108d4:	6006      	str	r6, [r0, #0]
 80108d6:	60c6      	str	r6, [r0, #12]
 80108d8:	b13c      	cbz	r4, 80108ea <_Bfree+0x3a>
 80108da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80108dc:	6862      	ldr	r2, [r4, #4]
 80108de:	68db      	ldr	r3, [r3, #12]
 80108e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80108e4:	6021      	str	r1, [r4, #0]
 80108e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80108ea:	bd70      	pop	{r4, r5, r6, pc}
 80108ec:	080130a6 	.word	0x080130a6
 80108f0:	08013210 	.word	0x08013210

080108f4 <__multadd>:
 80108f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108f8:	690e      	ldr	r6, [r1, #16]
 80108fa:	4607      	mov	r7, r0
 80108fc:	4698      	mov	r8, r3
 80108fe:	460c      	mov	r4, r1
 8010900:	f101 0014 	add.w	r0, r1, #20
 8010904:	2300      	movs	r3, #0
 8010906:	6805      	ldr	r5, [r0, #0]
 8010908:	b2a9      	uxth	r1, r5
 801090a:	fb02 8101 	mla	r1, r2, r1, r8
 801090e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010912:	0c2d      	lsrs	r5, r5, #16
 8010914:	fb02 c505 	mla	r5, r2, r5, ip
 8010918:	b289      	uxth	r1, r1
 801091a:	3301      	adds	r3, #1
 801091c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010920:	429e      	cmp	r6, r3
 8010922:	f840 1b04 	str.w	r1, [r0], #4
 8010926:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801092a:	dcec      	bgt.n	8010906 <__multadd+0x12>
 801092c:	f1b8 0f00 	cmp.w	r8, #0
 8010930:	d022      	beq.n	8010978 <__multadd+0x84>
 8010932:	68a3      	ldr	r3, [r4, #8]
 8010934:	42b3      	cmp	r3, r6
 8010936:	dc19      	bgt.n	801096c <__multadd+0x78>
 8010938:	6861      	ldr	r1, [r4, #4]
 801093a:	4638      	mov	r0, r7
 801093c:	3101      	adds	r1, #1
 801093e:	f7ff ff77 	bl	8010830 <_Balloc>
 8010942:	4605      	mov	r5, r0
 8010944:	b928      	cbnz	r0, 8010952 <__multadd+0x5e>
 8010946:	4602      	mov	r2, r0
 8010948:	4b0d      	ldr	r3, [pc, #52]	; (8010980 <__multadd+0x8c>)
 801094a:	480e      	ldr	r0, [pc, #56]	; (8010984 <__multadd+0x90>)
 801094c:	21b5      	movs	r1, #181	; 0xb5
 801094e:	f000 fecb 	bl	80116e8 <__assert_func>
 8010952:	6922      	ldr	r2, [r4, #16]
 8010954:	3202      	adds	r2, #2
 8010956:	f104 010c 	add.w	r1, r4, #12
 801095a:	0092      	lsls	r2, r2, #2
 801095c:	300c      	adds	r0, #12
 801095e:	f7fc feb3 	bl	800d6c8 <memcpy>
 8010962:	4621      	mov	r1, r4
 8010964:	4638      	mov	r0, r7
 8010966:	f7ff ffa3 	bl	80108b0 <_Bfree>
 801096a:	462c      	mov	r4, r5
 801096c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010970:	3601      	adds	r6, #1
 8010972:	f8c3 8014 	str.w	r8, [r3, #20]
 8010976:	6126      	str	r6, [r4, #16]
 8010978:	4620      	mov	r0, r4
 801097a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801097e:	bf00      	nop
 8010980:	0801311c 	.word	0x0801311c
 8010984:	08013210 	.word	0x08013210

08010988 <__s2b>:
 8010988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801098c:	460c      	mov	r4, r1
 801098e:	4615      	mov	r5, r2
 8010990:	461f      	mov	r7, r3
 8010992:	2209      	movs	r2, #9
 8010994:	3308      	adds	r3, #8
 8010996:	4606      	mov	r6, r0
 8010998:	fb93 f3f2 	sdiv	r3, r3, r2
 801099c:	2100      	movs	r1, #0
 801099e:	2201      	movs	r2, #1
 80109a0:	429a      	cmp	r2, r3
 80109a2:	db09      	blt.n	80109b8 <__s2b+0x30>
 80109a4:	4630      	mov	r0, r6
 80109a6:	f7ff ff43 	bl	8010830 <_Balloc>
 80109aa:	b940      	cbnz	r0, 80109be <__s2b+0x36>
 80109ac:	4602      	mov	r2, r0
 80109ae:	4b19      	ldr	r3, [pc, #100]	; (8010a14 <__s2b+0x8c>)
 80109b0:	4819      	ldr	r0, [pc, #100]	; (8010a18 <__s2b+0x90>)
 80109b2:	21ce      	movs	r1, #206	; 0xce
 80109b4:	f000 fe98 	bl	80116e8 <__assert_func>
 80109b8:	0052      	lsls	r2, r2, #1
 80109ba:	3101      	adds	r1, #1
 80109bc:	e7f0      	b.n	80109a0 <__s2b+0x18>
 80109be:	9b08      	ldr	r3, [sp, #32]
 80109c0:	6143      	str	r3, [r0, #20]
 80109c2:	2d09      	cmp	r5, #9
 80109c4:	f04f 0301 	mov.w	r3, #1
 80109c8:	6103      	str	r3, [r0, #16]
 80109ca:	dd16      	ble.n	80109fa <__s2b+0x72>
 80109cc:	f104 0909 	add.w	r9, r4, #9
 80109d0:	46c8      	mov	r8, r9
 80109d2:	442c      	add	r4, r5
 80109d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80109d8:	4601      	mov	r1, r0
 80109da:	3b30      	subs	r3, #48	; 0x30
 80109dc:	220a      	movs	r2, #10
 80109de:	4630      	mov	r0, r6
 80109e0:	f7ff ff88 	bl	80108f4 <__multadd>
 80109e4:	45a0      	cmp	r8, r4
 80109e6:	d1f5      	bne.n	80109d4 <__s2b+0x4c>
 80109e8:	f1a5 0408 	sub.w	r4, r5, #8
 80109ec:	444c      	add	r4, r9
 80109ee:	1b2d      	subs	r5, r5, r4
 80109f0:	1963      	adds	r3, r4, r5
 80109f2:	42bb      	cmp	r3, r7
 80109f4:	db04      	blt.n	8010a00 <__s2b+0x78>
 80109f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109fa:	340a      	adds	r4, #10
 80109fc:	2509      	movs	r5, #9
 80109fe:	e7f6      	b.n	80109ee <__s2b+0x66>
 8010a00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010a04:	4601      	mov	r1, r0
 8010a06:	3b30      	subs	r3, #48	; 0x30
 8010a08:	220a      	movs	r2, #10
 8010a0a:	4630      	mov	r0, r6
 8010a0c:	f7ff ff72 	bl	80108f4 <__multadd>
 8010a10:	e7ee      	b.n	80109f0 <__s2b+0x68>
 8010a12:	bf00      	nop
 8010a14:	0801311c 	.word	0x0801311c
 8010a18:	08013210 	.word	0x08013210

08010a1c <__hi0bits>:
 8010a1c:	0c03      	lsrs	r3, r0, #16
 8010a1e:	041b      	lsls	r3, r3, #16
 8010a20:	b9d3      	cbnz	r3, 8010a58 <__hi0bits+0x3c>
 8010a22:	0400      	lsls	r0, r0, #16
 8010a24:	2310      	movs	r3, #16
 8010a26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010a2a:	bf04      	itt	eq
 8010a2c:	0200      	lsleq	r0, r0, #8
 8010a2e:	3308      	addeq	r3, #8
 8010a30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010a34:	bf04      	itt	eq
 8010a36:	0100      	lsleq	r0, r0, #4
 8010a38:	3304      	addeq	r3, #4
 8010a3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010a3e:	bf04      	itt	eq
 8010a40:	0080      	lsleq	r0, r0, #2
 8010a42:	3302      	addeq	r3, #2
 8010a44:	2800      	cmp	r0, #0
 8010a46:	db05      	blt.n	8010a54 <__hi0bits+0x38>
 8010a48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010a4c:	f103 0301 	add.w	r3, r3, #1
 8010a50:	bf08      	it	eq
 8010a52:	2320      	moveq	r3, #32
 8010a54:	4618      	mov	r0, r3
 8010a56:	4770      	bx	lr
 8010a58:	2300      	movs	r3, #0
 8010a5a:	e7e4      	b.n	8010a26 <__hi0bits+0xa>

08010a5c <__lo0bits>:
 8010a5c:	6803      	ldr	r3, [r0, #0]
 8010a5e:	f013 0207 	ands.w	r2, r3, #7
 8010a62:	4601      	mov	r1, r0
 8010a64:	d00b      	beq.n	8010a7e <__lo0bits+0x22>
 8010a66:	07da      	lsls	r2, r3, #31
 8010a68:	d424      	bmi.n	8010ab4 <__lo0bits+0x58>
 8010a6a:	0798      	lsls	r0, r3, #30
 8010a6c:	bf49      	itett	mi
 8010a6e:	085b      	lsrmi	r3, r3, #1
 8010a70:	089b      	lsrpl	r3, r3, #2
 8010a72:	2001      	movmi	r0, #1
 8010a74:	600b      	strmi	r3, [r1, #0]
 8010a76:	bf5c      	itt	pl
 8010a78:	600b      	strpl	r3, [r1, #0]
 8010a7a:	2002      	movpl	r0, #2
 8010a7c:	4770      	bx	lr
 8010a7e:	b298      	uxth	r0, r3
 8010a80:	b9b0      	cbnz	r0, 8010ab0 <__lo0bits+0x54>
 8010a82:	0c1b      	lsrs	r3, r3, #16
 8010a84:	2010      	movs	r0, #16
 8010a86:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010a8a:	bf04      	itt	eq
 8010a8c:	0a1b      	lsreq	r3, r3, #8
 8010a8e:	3008      	addeq	r0, #8
 8010a90:	071a      	lsls	r2, r3, #28
 8010a92:	bf04      	itt	eq
 8010a94:	091b      	lsreq	r3, r3, #4
 8010a96:	3004      	addeq	r0, #4
 8010a98:	079a      	lsls	r2, r3, #30
 8010a9a:	bf04      	itt	eq
 8010a9c:	089b      	lsreq	r3, r3, #2
 8010a9e:	3002      	addeq	r0, #2
 8010aa0:	07da      	lsls	r2, r3, #31
 8010aa2:	d403      	bmi.n	8010aac <__lo0bits+0x50>
 8010aa4:	085b      	lsrs	r3, r3, #1
 8010aa6:	f100 0001 	add.w	r0, r0, #1
 8010aaa:	d005      	beq.n	8010ab8 <__lo0bits+0x5c>
 8010aac:	600b      	str	r3, [r1, #0]
 8010aae:	4770      	bx	lr
 8010ab0:	4610      	mov	r0, r2
 8010ab2:	e7e8      	b.n	8010a86 <__lo0bits+0x2a>
 8010ab4:	2000      	movs	r0, #0
 8010ab6:	4770      	bx	lr
 8010ab8:	2020      	movs	r0, #32
 8010aba:	4770      	bx	lr

08010abc <__i2b>:
 8010abc:	b510      	push	{r4, lr}
 8010abe:	460c      	mov	r4, r1
 8010ac0:	2101      	movs	r1, #1
 8010ac2:	f7ff feb5 	bl	8010830 <_Balloc>
 8010ac6:	4602      	mov	r2, r0
 8010ac8:	b928      	cbnz	r0, 8010ad6 <__i2b+0x1a>
 8010aca:	4b05      	ldr	r3, [pc, #20]	; (8010ae0 <__i2b+0x24>)
 8010acc:	4805      	ldr	r0, [pc, #20]	; (8010ae4 <__i2b+0x28>)
 8010ace:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010ad2:	f000 fe09 	bl	80116e8 <__assert_func>
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	6144      	str	r4, [r0, #20]
 8010ada:	6103      	str	r3, [r0, #16]
 8010adc:	bd10      	pop	{r4, pc}
 8010ade:	bf00      	nop
 8010ae0:	0801311c 	.word	0x0801311c
 8010ae4:	08013210 	.word	0x08013210

08010ae8 <__multiply>:
 8010ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aec:	4614      	mov	r4, r2
 8010aee:	690a      	ldr	r2, [r1, #16]
 8010af0:	6923      	ldr	r3, [r4, #16]
 8010af2:	429a      	cmp	r2, r3
 8010af4:	bfb8      	it	lt
 8010af6:	460b      	movlt	r3, r1
 8010af8:	460d      	mov	r5, r1
 8010afa:	bfbc      	itt	lt
 8010afc:	4625      	movlt	r5, r4
 8010afe:	461c      	movlt	r4, r3
 8010b00:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010b04:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010b08:	68ab      	ldr	r3, [r5, #8]
 8010b0a:	6869      	ldr	r1, [r5, #4]
 8010b0c:	eb0a 0709 	add.w	r7, sl, r9
 8010b10:	42bb      	cmp	r3, r7
 8010b12:	b085      	sub	sp, #20
 8010b14:	bfb8      	it	lt
 8010b16:	3101      	addlt	r1, #1
 8010b18:	f7ff fe8a 	bl	8010830 <_Balloc>
 8010b1c:	b930      	cbnz	r0, 8010b2c <__multiply+0x44>
 8010b1e:	4602      	mov	r2, r0
 8010b20:	4b42      	ldr	r3, [pc, #264]	; (8010c2c <__multiply+0x144>)
 8010b22:	4843      	ldr	r0, [pc, #268]	; (8010c30 <__multiply+0x148>)
 8010b24:	f240 115d 	movw	r1, #349	; 0x15d
 8010b28:	f000 fdde 	bl	80116e8 <__assert_func>
 8010b2c:	f100 0614 	add.w	r6, r0, #20
 8010b30:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010b34:	4633      	mov	r3, r6
 8010b36:	2200      	movs	r2, #0
 8010b38:	4543      	cmp	r3, r8
 8010b3a:	d31e      	bcc.n	8010b7a <__multiply+0x92>
 8010b3c:	f105 0c14 	add.w	ip, r5, #20
 8010b40:	f104 0314 	add.w	r3, r4, #20
 8010b44:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010b48:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010b4c:	9202      	str	r2, [sp, #8]
 8010b4e:	ebac 0205 	sub.w	r2, ip, r5
 8010b52:	3a15      	subs	r2, #21
 8010b54:	f022 0203 	bic.w	r2, r2, #3
 8010b58:	3204      	adds	r2, #4
 8010b5a:	f105 0115 	add.w	r1, r5, #21
 8010b5e:	458c      	cmp	ip, r1
 8010b60:	bf38      	it	cc
 8010b62:	2204      	movcc	r2, #4
 8010b64:	9201      	str	r2, [sp, #4]
 8010b66:	9a02      	ldr	r2, [sp, #8]
 8010b68:	9303      	str	r3, [sp, #12]
 8010b6a:	429a      	cmp	r2, r3
 8010b6c:	d808      	bhi.n	8010b80 <__multiply+0x98>
 8010b6e:	2f00      	cmp	r7, #0
 8010b70:	dc55      	bgt.n	8010c1e <__multiply+0x136>
 8010b72:	6107      	str	r7, [r0, #16]
 8010b74:	b005      	add	sp, #20
 8010b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b7a:	f843 2b04 	str.w	r2, [r3], #4
 8010b7e:	e7db      	b.n	8010b38 <__multiply+0x50>
 8010b80:	f8b3 a000 	ldrh.w	sl, [r3]
 8010b84:	f1ba 0f00 	cmp.w	sl, #0
 8010b88:	d020      	beq.n	8010bcc <__multiply+0xe4>
 8010b8a:	f105 0e14 	add.w	lr, r5, #20
 8010b8e:	46b1      	mov	r9, r6
 8010b90:	2200      	movs	r2, #0
 8010b92:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010b96:	f8d9 b000 	ldr.w	fp, [r9]
 8010b9a:	b2a1      	uxth	r1, r4
 8010b9c:	fa1f fb8b 	uxth.w	fp, fp
 8010ba0:	fb0a b101 	mla	r1, sl, r1, fp
 8010ba4:	4411      	add	r1, r2
 8010ba6:	f8d9 2000 	ldr.w	r2, [r9]
 8010baa:	0c24      	lsrs	r4, r4, #16
 8010bac:	0c12      	lsrs	r2, r2, #16
 8010bae:	fb0a 2404 	mla	r4, sl, r4, r2
 8010bb2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010bb6:	b289      	uxth	r1, r1
 8010bb8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010bbc:	45f4      	cmp	ip, lr
 8010bbe:	f849 1b04 	str.w	r1, [r9], #4
 8010bc2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010bc6:	d8e4      	bhi.n	8010b92 <__multiply+0xaa>
 8010bc8:	9901      	ldr	r1, [sp, #4]
 8010bca:	5072      	str	r2, [r6, r1]
 8010bcc:	9a03      	ldr	r2, [sp, #12]
 8010bce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010bd2:	3304      	adds	r3, #4
 8010bd4:	f1b9 0f00 	cmp.w	r9, #0
 8010bd8:	d01f      	beq.n	8010c1a <__multiply+0x132>
 8010bda:	6834      	ldr	r4, [r6, #0]
 8010bdc:	f105 0114 	add.w	r1, r5, #20
 8010be0:	46b6      	mov	lr, r6
 8010be2:	f04f 0a00 	mov.w	sl, #0
 8010be6:	880a      	ldrh	r2, [r1, #0]
 8010be8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010bec:	fb09 b202 	mla	r2, r9, r2, fp
 8010bf0:	4492      	add	sl, r2
 8010bf2:	b2a4      	uxth	r4, r4
 8010bf4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010bf8:	f84e 4b04 	str.w	r4, [lr], #4
 8010bfc:	f851 4b04 	ldr.w	r4, [r1], #4
 8010c00:	f8be 2000 	ldrh.w	r2, [lr]
 8010c04:	0c24      	lsrs	r4, r4, #16
 8010c06:	fb09 2404 	mla	r4, r9, r4, r2
 8010c0a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010c0e:	458c      	cmp	ip, r1
 8010c10:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010c14:	d8e7      	bhi.n	8010be6 <__multiply+0xfe>
 8010c16:	9a01      	ldr	r2, [sp, #4]
 8010c18:	50b4      	str	r4, [r6, r2]
 8010c1a:	3604      	adds	r6, #4
 8010c1c:	e7a3      	b.n	8010b66 <__multiply+0x7e>
 8010c1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d1a5      	bne.n	8010b72 <__multiply+0x8a>
 8010c26:	3f01      	subs	r7, #1
 8010c28:	e7a1      	b.n	8010b6e <__multiply+0x86>
 8010c2a:	bf00      	nop
 8010c2c:	0801311c 	.word	0x0801311c
 8010c30:	08013210 	.word	0x08013210

08010c34 <__pow5mult>:
 8010c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c38:	4615      	mov	r5, r2
 8010c3a:	f012 0203 	ands.w	r2, r2, #3
 8010c3e:	4606      	mov	r6, r0
 8010c40:	460f      	mov	r7, r1
 8010c42:	d007      	beq.n	8010c54 <__pow5mult+0x20>
 8010c44:	4c25      	ldr	r4, [pc, #148]	; (8010cdc <__pow5mult+0xa8>)
 8010c46:	3a01      	subs	r2, #1
 8010c48:	2300      	movs	r3, #0
 8010c4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010c4e:	f7ff fe51 	bl	80108f4 <__multadd>
 8010c52:	4607      	mov	r7, r0
 8010c54:	10ad      	asrs	r5, r5, #2
 8010c56:	d03d      	beq.n	8010cd4 <__pow5mult+0xa0>
 8010c58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010c5a:	b97c      	cbnz	r4, 8010c7c <__pow5mult+0x48>
 8010c5c:	2010      	movs	r0, #16
 8010c5e:	f7ff fdcd 	bl	80107fc <malloc>
 8010c62:	4602      	mov	r2, r0
 8010c64:	6270      	str	r0, [r6, #36]	; 0x24
 8010c66:	b928      	cbnz	r0, 8010c74 <__pow5mult+0x40>
 8010c68:	4b1d      	ldr	r3, [pc, #116]	; (8010ce0 <__pow5mult+0xac>)
 8010c6a:	481e      	ldr	r0, [pc, #120]	; (8010ce4 <__pow5mult+0xb0>)
 8010c6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010c70:	f000 fd3a 	bl	80116e8 <__assert_func>
 8010c74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010c78:	6004      	str	r4, [r0, #0]
 8010c7a:	60c4      	str	r4, [r0, #12]
 8010c7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010c80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010c84:	b94c      	cbnz	r4, 8010c9a <__pow5mult+0x66>
 8010c86:	f240 2171 	movw	r1, #625	; 0x271
 8010c8a:	4630      	mov	r0, r6
 8010c8c:	f7ff ff16 	bl	8010abc <__i2b>
 8010c90:	2300      	movs	r3, #0
 8010c92:	f8c8 0008 	str.w	r0, [r8, #8]
 8010c96:	4604      	mov	r4, r0
 8010c98:	6003      	str	r3, [r0, #0]
 8010c9a:	f04f 0900 	mov.w	r9, #0
 8010c9e:	07eb      	lsls	r3, r5, #31
 8010ca0:	d50a      	bpl.n	8010cb8 <__pow5mult+0x84>
 8010ca2:	4639      	mov	r1, r7
 8010ca4:	4622      	mov	r2, r4
 8010ca6:	4630      	mov	r0, r6
 8010ca8:	f7ff ff1e 	bl	8010ae8 <__multiply>
 8010cac:	4639      	mov	r1, r7
 8010cae:	4680      	mov	r8, r0
 8010cb0:	4630      	mov	r0, r6
 8010cb2:	f7ff fdfd 	bl	80108b0 <_Bfree>
 8010cb6:	4647      	mov	r7, r8
 8010cb8:	106d      	asrs	r5, r5, #1
 8010cba:	d00b      	beq.n	8010cd4 <__pow5mult+0xa0>
 8010cbc:	6820      	ldr	r0, [r4, #0]
 8010cbe:	b938      	cbnz	r0, 8010cd0 <__pow5mult+0x9c>
 8010cc0:	4622      	mov	r2, r4
 8010cc2:	4621      	mov	r1, r4
 8010cc4:	4630      	mov	r0, r6
 8010cc6:	f7ff ff0f 	bl	8010ae8 <__multiply>
 8010cca:	6020      	str	r0, [r4, #0]
 8010ccc:	f8c0 9000 	str.w	r9, [r0]
 8010cd0:	4604      	mov	r4, r0
 8010cd2:	e7e4      	b.n	8010c9e <__pow5mult+0x6a>
 8010cd4:	4638      	mov	r0, r7
 8010cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cda:	bf00      	nop
 8010cdc:	08013360 	.word	0x08013360
 8010ce0:	080130a6 	.word	0x080130a6
 8010ce4:	08013210 	.word	0x08013210

08010ce8 <__lshift>:
 8010ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cec:	460c      	mov	r4, r1
 8010cee:	6849      	ldr	r1, [r1, #4]
 8010cf0:	6923      	ldr	r3, [r4, #16]
 8010cf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010cf6:	68a3      	ldr	r3, [r4, #8]
 8010cf8:	4607      	mov	r7, r0
 8010cfa:	4691      	mov	r9, r2
 8010cfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010d00:	f108 0601 	add.w	r6, r8, #1
 8010d04:	42b3      	cmp	r3, r6
 8010d06:	db0b      	blt.n	8010d20 <__lshift+0x38>
 8010d08:	4638      	mov	r0, r7
 8010d0a:	f7ff fd91 	bl	8010830 <_Balloc>
 8010d0e:	4605      	mov	r5, r0
 8010d10:	b948      	cbnz	r0, 8010d26 <__lshift+0x3e>
 8010d12:	4602      	mov	r2, r0
 8010d14:	4b28      	ldr	r3, [pc, #160]	; (8010db8 <__lshift+0xd0>)
 8010d16:	4829      	ldr	r0, [pc, #164]	; (8010dbc <__lshift+0xd4>)
 8010d18:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010d1c:	f000 fce4 	bl	80116e8 <__assert_func>
 8010d20:	3101      	adds	r1, #1
 8010d22:	005b      	lsls	r3, r3, #1
 8010d24:	e7ee      	b.n	8010d04 <__lshift+0x1c>
 8010d26:	2300      	movs	r3, #0
 8010d28:	f100 0114 	add.w	r1, r0, #20
 8010d2c:	f100 0210 	add.w	r2, r0, #16
 8010d30:	4618      	mov	r0, r3
 8010d32:	4553      	cmp	r3, sl
 8010d34:	db33      	blt.n	8010d9e <__lshift+0xb6>
 8010d36:	6920      	ldr	r0, [r4, #16]
 8010d38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010d3c:	f104 0314 	add.w	r3, r4, #20
 8010d40:	f019 091f 	ands.w	r9, r9, #31
 8010d44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010d48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010d4c:	d02b      	beq.n	8010da6 <__lshift+0xbe>
 8010d4e:	f1c9 0e20 	rsb	lr, r9, #32
 8010d52:	468a      	mov	sl, r1
 8010d54:	2200      	movs	r2, #0
 8010d56:	6818      	ldr	r0, [r3, #0]
 8010d58:	fa00 f009 	lsl.w	r0, r0, r9
 8010d5c:	4302      	orrs	r2, r0
 8010d5e:	f84a 2b04 	str.w	r2, [sl], #4
 8010d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d66:	459c      	cmp	ip, r3
 8010d68:	fa22 f20e 	lsr.w	r2, r2, lr
 8010d6c:	d8f3      	bhi.n	8010d56 <__lshift+0x6e>
 8010d6e:	ebac 0304 	sub.w	r3, ip, r4
 8010d72:	3b15      	subs	r3, #21
 8010d74:	f023 0303 	bic.w	r3, r3, #3
 8010d78:	3304      	adds	r3, #4
 8010d7a:	f104 0015 	add.w	r0, r4, #21
 8010d7e:	4584      	cmp	ip, r0
 8010d80:	bf38      	it	cc
 8010d82:	2304      	movcc	r3, #4
 8010d84:	50ca      	str	r2, [r1, r3]
 8010d86:	b10a      	cbz	r2, 8010d8c <__lshift+0xa4>
 8010d88:	f108 0602 	add.w	r6, r8, #2
 8010d8c:	3e01      	subs	r6, #1
 8010d8e:	4638      	mov	r0, r7
 8010d90:	612e      	str	r6, [r5, #16]
 8010d92:	4621      	mov	r1, r4
 8010d94:	f7ff fd8c 	bl	80108b0 <_Bfree>
 8010d98:	4628      	mov	r0, r5
 8010d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010da2:	3301      	adds	r3, #1
 8010da4:	e7c5      	b.n	8010d32 <__lshift+0x4a>
 8010da6:	3904      	subs	r1, #4
 8010da8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010dac:	f841 2f04 	str.w	r2, [r1, #4]!
 8010db0:	459c      	cmp	ip, r3
 8010db2:	d8f9      	bhi.n	8010da8 <__lshift+0xc0>
 8010db4:	e7ea      	b.n	8010d8c <__lshift+0xa4>
 8010db6:	bf00      	nop
 8010db8:	0801311c 	.word	0x0801311c
 8010dbc:	08013210 	.word	0x08013210

08010dc0 <__mcmp>:
 8010dc0:	b530      	push	{r4, r5, lr}
 8010dc2:	6902      	ldr	r2, [r0, #16]
 8010dc4:	690c      	ldr	r4, [r1, #16]
 8010dc6:	1b12      	subs	r2, r2, r4
 8010dc8:	d10e      	bne.n	8010de8 <__mcmp+0x28>
 8010dca:	f100 0314 	add.w	r3, r0, #20
 8010dce:	3114      	adds	r1, #20
 8010dd0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010dd4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010dd8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010ddc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010de0:	42a5      	cmp	r5, r4
 8010de2:	d003      	beq.n	8010dec <__mcmp+0x2c>
 8010de4:	d305      	bcc.n	8010df2 <__mcmp+0x32>
 8010de6:	2201      	movs	r2, #1
 8010de8:	4610      	mov	r0, r2
 8010dea:	bd30      	pop	{r4, r5, pc}
 8010dec:	4283      	cmp	r3, r0
 8010dee:	d3f3      	bcc.n	8010dd8 <__mcmp+0x18>
 8010df0:	e7fa      	b.n	8010de8 <__mcmp+0x28>
 8010df2:	f04f 32ff 	mov.w	r2, #4294967295
 8010df6:	e7f7      	b.n	8010de8 <__mcmp+0x28>

08010df8 <__mdiff>:
 8010df8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dfc:	460c      	mov	r4, r1
 8010dfe:	4606      	mov	r6, r0
 8010e00:	4611      	mov	r1, r2
 8010e02:	4620      	mov	r0, r4
 8010e04:	4617      	mov	r7, r2
 8010e06:	f7ff ffdb 	bl	8010dc0 <__mcmp>
 8010e0a:	1e05      	subs	r5, r0, #0
 8010e0c:	d110      	bne.n	8010e30 <__mdiff+0x38>
 8010e0e:	4629      	mov	r1, r5
 8010e10:	4630      	mov	r0, r6
 8010e12:	f7ff fd0d 	bl	8010830 <_Balloc>
 8010e16:	b930      	cbnz	r0, 8010e26 <__mdiff+0x2e>
 8010e18:	4b39      	ldr	r3, [pc, #228]	; (8010f00 <__mdiff+0x108>)
 8010e1a:	4602      	mov	r2, r0
 8010e1c:	f240 2132 	movw	r1, #562	; 0x232
 8010e20:	4838      	ldr	r0, [pc, #224]	; (8010f04 <__mdiff+0x10c>)
 8010e22:	f000 fc61 	bl	80116e8 <__assert_func>
 8010e26:	2301      	movs	r3, #1
 8010e28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010e2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e30:	bfa4      	itt	ge
 8010e32:	463b      	movge	r3, r7
 8010e34:	4627      	movge	r7, r4
 8010e36:	4630      	mov	r0, r6
 8010e38:	6879      	ldr	r1, [r7, #4]
 8010e3a:	bfa6      	itte	ge
 8010e3c:	461c      	movge	r4, r3
 8010e3e:	2500      	movge	r5, #0
 8010e40:	2501      	movlt	r5, #1
 8010e42:	f7ff fcf5 	bl	8010830 <_Balloc>
 8010e46:	b920      	cbnz	r0, 8010e52 <__mdiff+0x5a>
 8010e48:	4b2d      	ldr	r3, [pc, #180]	; (8010f00 <__mdiff+0x108>)
 8010e4a:	4602      	mov	r2, r0
 8010e4c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010e50:	e7e6      	b.n	8010e20 <__mdiff+0x28>
 8010e52:	693e      	ldr	r6, [r7, #16]
 8010e54:	60c5      	str	r5, [r0, #12]
 8010e56:	6925      	ldr	r5, [r4, #16]
 8010e58:	f107 0114 	add.w	r1, r7, #20
 8010e5c:	f104 0914 	add.w	r9, r4, #20
 8010e60:	f100 0e14 	add.w	lr, r0, #20
 8010e64:	f107 0210 	add.w	r2, r7, #16
 8010e68:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010e6c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010e70:	46f2      	mov	sl, lr
 8010e72:	2700      	movs	r7, #0
 8010e74:	f859 3b04 	ldr.w	r3, [r9], #4
 8010e78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010e7c:	fa1f f883 	uxth.w	r8, r3
 8010e80:	fa17 f78b 	uxtah	r7, r7, fp
 8010e84:	0c1b      	lsrs	r3, r3, #16
 8010e86:	eba7 0808 	sub.w	r8, r7, r8
 8010e8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010e8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010e92:	fa1f f888 	uxth.w	r8, r8
 8010e96:	141f      	asrs	r7, r3, #16
 8010e98:	454d      	cmp	r5, r9
 8010e9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010e9e:	f84a 3b04 	str.w	r3, [sl], #4
 8010ea2:	d8e7      	bhi.n	8010e74 <__mdiff+0x7c>
 8010ea4:	1b2b      	subs	r3, r5, r4
 8010ea6:	3b15      	subs	r3, #21
 8010ea8:	f023 0303 	bic.w	r3, r3, #3
 8010eac:	3304      	adds	r3, #4
 8010eae:	3415      	adds	r4, #21
 8010eb0:	42a5      	cmp	r5, r4
 8010eb2:	bf38      	it	cc
 8010eb4:	2304      	movcc	r3, #4
 8010eb6:	4419      	add	r1, r3
 8010eb8:	4473      	add	r3, lr
 8010eba:	469e      	mov	lr, r3
 8010ebc:	460d      	mov	r5, r1
 8010ebe:	4565      	cmp	r5, ip
 8010ec0:	d30e      	bcc.n	8010ee0 <__mdiff+0xe8>
 8010ec2:	f10c 0203 	add.w	r2, ip, #3
 8010ec6:	1a52      	subs	r2, r2, r1
 8010ec8:	f022 0203 	bic.w	r2, r2, #3
 8010ecc:	3903      	subs	r1, #3
 8010ece:	458c      	cmp	ip, r1
 8010ed0:	bf38      	it	cc
 8010ed2:	2200      	movcc	r2, #0
 8010ed4:	441a      	add	r2, r3
 8010ed6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010eda:	b17b      	cbz	r3, 8010efc <__mdiff+0x104>
 8010edc:	6106      	str	r6, [r0, #16]
 8010ede:	e7a5      	b.n	8010e2c <__mdiff+0x34>
 8010ee0:	f855 8b04 	ldr.w	r8, [r5], #4
 8010ee4:	fa17 f488 	uxtah	r4, r7, r8
 8010ee8:	1422      	asrs	r2, r4, #16
 8010eea:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010eee:	b2a4      	uxth	r4, r4
 8010ef0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010ef4:	f84e 4b04 	str.w	r4, [lr], #4
 8010ef8:	1417      	asrs	r7, r2, #16
 8010efa:	e7e0      	b.n	8010ebe <__mdiff+0xc6>
 8010efc:	3e01      	subs	r6, #1
 8010efe:	e7ea      	b.n	8010ed6 <__mdiff+0xde>
 8010f00:	0801311c 	.word	0x0801311c
 8010f04:	08013210 	.word	0x08013210

08010f08 <__ulp>:
 8010f08:	b082      	sub	sp, #8
 8010f0a:	ed8d 0b00 	vstr	d0, [sp]
 8010f0e:	9b01      	ldr	r3, [sp, #4]
 8010f10:	4912      	ldr	r1, [pc, #72]	; (8010f5c <__ulp+0x54>)
 8010f12:	4019      	ands	r1, r3
 8010f14:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010f18:	2900      	cmp	r1, #0
 8010f1a:	dd05      	ble.n	8010f28 <__ulp+0x20>
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	460b      	mov	r3, r1
 8010f20:	ec43 2b10 	vmov	d0, r2, r3
 8010f24:	b002      	add	sp, #8
 8010f26:	4770      	bx	lr
 8010f28:	4249      	negs	r1, r1
 8010f2a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010f2e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010f32:	f04f 0200 	mov.w	r2, #0
 8010f36:	f04f 0300 	mov.w	r3, #0
 8010f3a:	da04      	bge.n	8010f46 <__ulp+0x3e>
 8010f3c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010f40:	fa41 f300 	asr.w	r3, r1, r0
 8010f44:	e7ec      	b.n	8010f20 <__ulp+0x18>
 8010f46:	f1a0 0114 	sub.w	r1, r0, #20
 8010f4a:	291e      	cmp	r1, #30
 8010f4c:	bfda      	itte	le
 8010f4e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010f52:	fa20 f101 	lsrle.w	r1, r0, r1
 8010f56:	2101      	movgt	r1, #1
 8010f58:	460a      	mov	r2, r1
 8010f5a:	e7e1      	b.n	8010f20 <__ulp+0x18>
 8010f5c:	7ff00000 	.word	0x7ff00000

08010f60 <__b2d>:
 8010f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f62:	6905      	ldr	r5, [r0, #16]
 8010f64:	f100 0714 	add.w	r7, r0, #20
 8010f68:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010f6c:	1f2e      	subs	r6, r5, #4
 8010f6e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010f72:	4620      	mov	r0, r4
 8010f74:	f7ff fd52 	bl	8010a1c <__hi0bits>
 8010f78:	f1c0 0320 	rsb	r3, r0, #32
 8010f7c:	280a      	cmp	r0, #10
 8010f7e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010ffc <__b2d+0x9c>
 8010f82:	600b      	str	r3, [r1, #0]
 8010f84:	dc14      	bgt.n	8010fb0 <__b2d+0x50>
 8010f86:	f1c0 0e0b 	rsb	lr, r0, #11
 8010f8a:	fa24 f10e 	lsr.w	r1, r4, lr
 8010f8e:	42b7      	cmp	r7, r6
 8010f90:	ea41 030c 	orr.w	r3, r1, ip
 8010f94:	bf34      	ite	cc
 8010f96:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010f9a:	2100      	movcs	r1, #0
 8010f9c:	3015      	adds	r0, #21
 8010f9e:	fa04 f000 	lsl.w	r0, r4, r0
 8010fa2:	fa21 f10e 	lsr.w	r1, r1, lr
 8010fa6:	ea40 0201 	orr.w	r2, r0, r1
 8010faa:	ec43 2b10 	vmov	d0, r2, r3
 8010fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fb0:	42b7      	cmp	r7, r6
 8010fb2:	bf3a      	itte	cc
 8010fb4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010fb8:	f1a5 0608 	subcc.w	r6, r5, #8
 8010fbc:	2100      	movcs	r1, #0
 8010fbe:	380b      	subs	r0, #11
 8010fc0:	d017      	beq.n	8010ff2 <__b2d+0x92>
 8010fc2:	f1c0 0c20 	rsb	ip, r0, #32
 8010fc6:	fa04 f500 	lsl.w	r5, r4, r0
 8010fca:	42be      	cmp	r6, r7
 8010fcc:	fa21 f40c 	lsr.w	r4, r1, ip
 8010fd0:	ea45 0504 	orr.w	r5, r5, r4
 8010fd4:	bf8c      	ite	hi
 8010fd6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010fda:	2400      	movls	r4, #0
 8010fdc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010fe0:	fa01 f000 	lsl.w	r0, r1, r0
 8010fe4:	fa24 f40c 	lsr.w	r4, r4, ip
 8010fe8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010fec:	ea40 0204 	orr.w	r2, r0, r4
 8010ff0:	e7db      	b.n	8010faa <__b2d+0x4a>
 8010ff2:	ea44 030c 	orr.w	r3, r4, ip
 8010ff6:	460a      	mov	r2, r1
 8010ff8:	e7d7      	b.n	8010faa <__b2d+0x4a>
 8010ffa:	bf00      	nop
 8010ffc:	3ff00000 	.word	0x3ff00000

08011000 <__d2b>:
 8011000:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011004:	4689      	mov	r9, r1
 8011006:	2101      	movs	r1, #1
 8011008:	ec57 6b10 	vmov	r6, r7, d0
 801100c:	4690      	mov	r8, r2
 801100e:	f7ff fc0f 	bl	8010830 <_Balloc>
 8011012:	4604      	mov	r4, r0
 8011014:	b930      	cbnz	r0, 8011024 <__d2b+0x24>
 8011016:	4602      	mov	r2, r0
 8011018:	4b25      	ldr	r3, [pc, #148]	; (80110b0 <__d2b+0xb0>)
 801101a:	4826      	ldr	r0, [pc, #152]	; (80110b4 <__d2b+0xb4>)
 801101c:	f240 310a 	movw	r1, #778	; 0x30a
 8011020:	f000 fb62 	bl	80116e8 <__assert_func>
 8011024:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011028:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801102c:	bb35      	cbnz	r5, 801107c <__d2b+0x7c>
 801102e:	2e00      	cmp	r6, #0
 8011030:	9301      	str	r3, [sp, #4]
 8011032:	d028      	beq.n	8011086 <__d2b+0x86>
 8011034:	4668      	mov	r0, sp
 8011036:	9600      	str	r6, [sp, #0]
 8011038:	f7ff fd10 	bl	8010a5c <__lo0bits>
 801103c:	9900      	ldr	r1, [sp, #0]
 801103e:	b300      	cbz	r0, 8011082 <__d2b+0x82>
 8011040:	9a01      	ldr	r2, [sp, #4]
 8011042:	f1c0 0320 	rsb	r3, r0, #32
 8011046:	fa02 f303 	lsl.w	r3, r2, r3
 801104a:	430b      	orrs	r3, r1
 801104c:	40c2      	lsrs	r2, r0
 801104e:	6163      	str	r3, [r4, #20]
 8011050:	9201      	str	r2, [sp, #4]
 8011052:	9b01      	ldr	r3, [sp, #4]
 8011054:	61a3      	str	r3, [r4, #24]
 8011056:	2b00      	cmp	r3, #0
 8011058:	bf14      	ite	ne
 801105a:	2202      	movne	r2, #2
 801105c:	2201      	moveq	r2, #1
 801105e:	6122      	str	r2, [r4, #16]
 8011060:	b1d5      	cbz	r5, 8011098 <__d2b+0x98>
 8011062:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011066:	4405      	add	r5, r0
 8011068:	f8c9 5000 	str.w	r5, [r9]
 801106c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011070:	f8c8 0000 	str.w	r0, [r8]
 8011074:	4620      	mov	r0, r4
 8011076:	b003      	add	sp, #12
 8011078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801107c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011080:	e7d5      	b.n	801102e <__d2b+0x2e>
 8011082:	6161      	str	r1, [r4, #20]
 8011084:	e7e5      	b.n	8011052 <__d2b+0x52>
 8011086:	a801      	add	r0, sp, #4
 8011088:	f7ff fce8 	bl	8010a5c <__lo0bits>
 801108c:	9b01      	ldr	r3, [sp, #4]
 801108e:	6163      	str	r3, [r4, #20]
 8011090:	2201      	movs	r2, #1
 8011092:	6122      	str	r2, [r4, #16]
 8011094:	3020      	adds	r0, #32
 8011096:	e7e3      	b.n	8011060 <__d2b+0x60>
 8011098:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801109c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80110a0:	f8c9 0000 	str.w	r0, [r9]
 80110a4:	6918      	ldr	r0, [r3, #16]
 80110a6:	f7ff fcb9 	bl	8010a1c <__hi0bits>
 80110aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80110ae:	e7df      	b.n	8011070 <__d2b+0x70>
 80110b0:	0801311c 	.word	0x0801311c
 80110b4:	08013210 	.word	0x08013210

080110b8 <__ratio>:
 80110b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110bc:	4688      	mov	r8, r1
 80110be:	4669      	mov	r1, sp
 80110c0:	4681      	mov	r9, r0
 80110c2:	f7ff ff4d 	bl	8010f60 <__b2d>
 80110c6:	a901      	add	r1, sp, #4
 80110c8:	4640      	mov	r0, r8
 80110ca:	ec55 4b10 	vmov	r4, r5, d0
 80110ce:	f7ff ff47 	bl	8010f60 <__b2d>
 80110d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80110d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80110da:	eba3 0c02 	sub.w	ip, r3, r2
 80110de:	e9dd 3200 	ldrd	r3, r2, [sp]
 80110e2:	1a9b      	subs	r3, r3, r2
 80110e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80110e8:	ec51 0b10 	vmov	r0, r1, d0
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	bfd6      	itet	le
 80110f0:	460a      	movle	r2, r1
 80110f2:	462a      	movgt	r2, r5
 80110f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80110f8:	468b      	mov	fp, r1
 80110fa:	462f      	mov	r7, r5
 80110fc:	bfd4      	ite	le
 80110fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011102:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011106:	4620      	mov	r0, r4
 8011108:	ee10 2a10 	vmov	r2, s0
 801110c:	465b      	mov	r3, fp
 801110e:	4639      	mov	r1, r7
 8011110:	f7ef fbc4 	bl	800089c <__aeabi_ddiv>
 8011114:	ec41 0b10 	vmov	d0, r0, r1
 8011118:	b003      	add	sp, #12
 801111a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801111e <__copybits>:
 801111e:	3901      	subs	r1, #1
 8011120:	b570      	push	{r4, r5, r6, lr}
 8011122:	1149      	asrs	r1, r1, #5
 8011124:	6914      	ldr	r4, [r2, #16]
 8011126:	3101      	adds	r1, #1
 8011128:	f102 0314 	add.w	r3, r2, #20
 801112c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011130:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011134:	1f05      	subs	r5, r0, #4
 8011136:	42a3      	cmp	r3, r4
 8011138:	d30c      	bcc.n	8011154 <__copybits+0x36>
 801113a:	1aa3      	subs	r3, r4, r2
 801113c:	3b11      	subs	r3, #17
 801113e:	f023 0303 	bic.w	r3, r3, #3
 8011142:	3211      	adds	r2, #17
 8011144:	42a2      	cmp	r2, r4
 8011146:	bf88      	it	hi
 8011148:	2300      	movhi	r3, #0
 801114a:	4418      	add	r0, r3
 801114c:	2300      	movs	r3, #0
 801114e:	4288      	cmp	r0, r1
 8011150:	d305      	bcc.n	801115e <__copybits+0x40>
 8011152:	bd70      	pop	{r4, r5, r6, pc}
 8011154:	f853 6b04 	ldr.w	r6, [r3], #4
 8011158:	f845 6f04 	str.w	r6, [r5, #4]!
 801115c:	e7eb      	b.n	8011136 <__copybits+0x18>
 801115e:	f840 3b04 	str.w	r3, [r0], #4
 8011162:	e7f4      	b.n	801114e <__copybits+0x30>

08011164 <__any_on>:
 8011164:	f100 0214 	add.w	r2, r0, #20
 8011168:	6900      	ldr	r0, [r0, #16]
 801116a:	114b      	asrs	r3, r1, #5
 801116c:	4298      	cmp	r0, r3
 801116e:	b510      	push	{r4, lr}
 8011170:	db11      	blt.n	8011196 <__any_on+0x32>
 8011172:	dd0a      	ble.n	801118a <__any_on+0x26>
 8011174:	f011 011f 	ands.w	r1, r1, #31
 8011178:	d007      	beq.n	801118a <__any_on+0x26>
 801117a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801117e:	fa24 f001 	lsr.w	r0, r4, r1
 8011182:	fa00 f101 	lsl.w	r1, r0, r1
 8011186:	428c      	cmp	r4, r1
 8011188:	d10b      	bne.n	80111a2 <__any_on+0x3e>
 801118a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801118e:	4293      	cmp	r3, r2
 8011190:	d803      	bhi.n	801119a <__any_on+0x36>
 8011192:	2000      	movs	r0, #0
 8011194:	bd10      	pop	{r4, pc}
 8011196:	4603      	mov	r3, r0
 8011198:	e7f7      	b.n	801118a <__any_on+0x26>
 801119a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801119e:	2900      	cmp	r1, #0
 80111a0:	d0f5      	beq.n	801118e <__any_on+0x2a>
 80111a2:	2001      	movs	r0, #1
 80111a4:	e7f6      	b.n	8011194 <__any_on+0x30>

080111a6 <_calloc_r>:
 80111a6:	b513      	push	{r0, r1, r4, lr}
 80111a8:	434a      	muls	r2, r1
 80111aa:	4611      	mov	r1, r2
 80111ac:	9201      	str	r2, [sp, #4]
 80111ae:	f000 f859 	bl	8011264 <_malloc_r>
 80111b2:	4604      	mov	r4, r0
 80111b4:	b118      	cbz	r0, 80111be <_calloc_r+0x18>
 80111b6:	9a01      	ldr	r2, [sp, #4]
 80111b8:	2100      	movs	r1, #0
 80111ba:	f7fc fa93 	bl	800d6e4 <memset>
 80111be:	4620      	mov	r0, r4
 80111c0:	b002      	add	sp, #8
 80111c2:	bd10      	pop	{r4, pc}

080111c4 <_free_r>:
 80111c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80111c6:	2900      	cmp	r1, #0
 80111c8:	d048      	beq.n	801125c <_free_r+0x98>
 80111ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111ce:	9001      	str	r0, [sp, #4]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	f1a1 0404 	sub.w	r4, r1, #4
 80111d6:	bfb8      	it	lt
 80111d8:	18e4      	addlt	r4, r4, r3
 80111da:	f000 faf9 	bl	80117d0 <__malloc_lock>
 80111de:	4a20      	ldr	r2, [pc, #128]	; (8011260 <_free_r+0x9c>)
 80111e0:	9801      	ldr	r0, [sp, #4]
 80111e2:	6813      	ldr	r3, [r2, #0]
 80111e4:	4615      	mov	r5, r2
 80111e6:	b933      	cbnz	r3, 80111f6 <_free_r+0x32>
 80111e8:	6063      	str	r3, [r4, #4]
 80111ea:	6014      	str	r4, [r2, #0]
 80111ec:	b003      	add	sp, #12
 80111ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80111f2:	f000 baf3 	b.w	80117dc <__malloc_unlock>
 80111f6:	42a3      	cmp	r3, r4
 80111f8:	d90b      	bls.n	8011212 <_free_r+0x4e>
 80111fa:	6821      	ldr	r1, [r4, #0]
 80111fc:	1862      	adds	r2, r4, r1
 80111fe:	4293      	cmp	r3, r2
 8011200:	bf04      	itt	eq
 8011202:	681a      	ldreq	r2, [r3, #0]
 8011204:	685b      	ldreq	r3, [r3, #4]
 8011206:	6063      	str	r3, [r4, #4]
 8011208:	bf04      	itt	eq
 801120a:	1852      	addeq	r2, r2, r1
 801120c:	6022      	streq	r2, [r4, #0]
 801120e:	602c      	str	r4, [r5, #0]
 8011210:	e7ec      	b.n	80111ec <_free_r+0x28>
 8011212:	461a      	mov	r2, r3
 8011214:	685b      	ldr	r3, [r3, #4]
 8011216:	b10b      	cbz	r3, 801121c <_free_r+0x58>
 8011218:	42a3      	cmp	r3, r4
 801121a:	d9fa      	bls.n	8011212 <_free_r+0x4e>
 801121c:	6811      	ldr	r1, [r2, #0]
 801121e:	1855      	adds	r5, r2, r1
 8011220:	42a5      	cmp	r5, r4
 8011222:	d10b      	bne.n	801123c <_free_r+0x78>
 8011224:	6824      	ldr	r4, [r4, #0]
 8011226:	4421      	add	r1, r4
 8011228:	1854      	adds	r4, r2, r1
 801122a:	42a3      	cmp	r3, r4
 801122c:	6011      	str	r1, [r2, #0]
 801122e:	d1dd      	bne.n	80111ec <_free_r+0x28>
 8011230:	681c      	ldr	r4, [r3, #0]
 8011232:	685b      	ldr	r3, [r3, #4]
 8011234:	6053      	str	r3, [r2, #4]
 8011236:	4421      	add	r1, r4
 8011238:	6011      	str	r1, [r2, #0]
 801123a:	e7d7      	b.n	80111ec <_free_r+0x28>
 801123c:	d902      	bls.n	8011244 <_free_r+0x80>
 801123e:	230c      	movs	r3, #12
 8011240:	6003      	str	r3, [r0, #0]
 8011242:	e7d3      	b.n	80111ec <_free_r+0x28>
 8011244:	6825      	ldr	r5, [r4, #0]
 8011246:	1961      	adds	r1, r4, r5
 8011248:	428b      	cmp	r3, r1
 801124a:	bf04      	itt	eq
 801124c:	6819      	ldreq	r1, [r3, #0]
 801124e:	685b      	ldreq	r3, [r3, #4]
 8011250:	6063      	str	r3, [r4, #4]
 8011252:	bf04      	itt	eq
 8011254:	1949      	addeq	r1, r1, r5
 8011256:	6021      	streq	r1, [r4, #0]
 8011258:	6054      	str	r4, [r2, #4]
 801125a:	e7c7      	b.n	80111ec <_free_r+0x28>
 801125c:	b003      	add	sp, #12
 801125e:	bd30      	pop	{r4, r5, pc}
 8011260:	2000022c 	.word	0x2000022c

08011264 <_malloc_r>:
 8011264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011266:	1ccd      	adds	r5, r1, #3
 8011268:	f025 0503 	bic.w	r5, r5, #3
 801126c:	3508      	adds	r5, #8
 801126e:	2d0c      	cmp	r5, #12
 8011270:	bf38      	it	cc
 8011272:	250c      	movcc	r5, #12
 8011274:	2d00      	cmp	r5, #0
 8011276:	4606      	mov	r6, r0
 8011278:	db01      	blt.n	801127e <_malloc_r+0x1a>
 801127a:	42a9      	cmp	r1, r5
 801127c:	d903      	bls.n	8011286 <_malloc_r+0x22>
 801127e:	230c      	movs	r3, #12
 8011280:	6033      	str	r3, [r6, #0]
 8011282:	2000      	movs	r0, #0
 8011284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011286:	f000 faa3 	bl	80117d0 <__malloc_lock>
 801128a:	4921      	ldr	r1, [pc, #132]	; (8011310 <_malloc_r+0xac>)
 801128c:	680a      	ldr	r2, [r1, #0]
 801128e:	4614      	mov	r4, r2
 8011290:	b99c      	cbnz	r4, 80112ba <_malloc_r+0x56>
 8011292:	4f20      	ldr	r7, [pc, #128]	; (8011314 <_malloc_r+0xb0>)
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	b923      	cbnz	r3, 80112a2 <_malloc_r+0x3e>
 8011298:	4621      	mov	r1, r4
 801129a:	4630      	mov	r0, r6
 801129c:	f000 f9a0 	bl	80115e0 <_sbrk_r>
 80112a0:	6038      	str	r0, [r7, #0]
 80112a2:	4629      	mov	r1, r5
 80112a4:	4630      	mov	r0, r6
 80112a6:	f000 f99b 	bl	80115e0 <_sbrk_r>
 80112aa:	1c43      	adds	r3, r0, #1
 80112ac:	d123      	bne.n	80112f6 <_malloc_r+0x92>
 80112ae:	230c      	movs	r3, #12
 80112b0:	6033      	str	r3, [r6, #0]
 80112b2:	4630      	mov	r0, r6
 80112b4:	f000 fa92 	bl	80117dc <__malloc_unlock>
 80112b8:	e7e3      	b.n	8011282 <_malloc_r+0x1e>
 80112ba:	6823      	ldr	r3, [r4, #0]
 80112bc:	1b5b      	subs	r3, r3, r5
 80112be:	d417      	bmi.n	80112f0 <_malloc_r+0x8c>
 80112c0:	2b0b      	cmp	r3, #11
 80112c2:	d903      	bls.n	80112cc <_malloc_r+0x68>
 80112c4:	6023      	str	r3, [r4, #0]
 80112c6:	441c      	add	r4, r3
 80112c8:	6025      	str	r5, [r4, #0]
 80112ca:	e004      	b.n	80112d6 <_malloc_r+0x72>
 80112cc:	6863      	ldr	r3, [r4, #4]
 80112ce:	42a2      	cmp	r2, r4
 80112d0:	bf0c      	ite	eq
 80112d2:	600b      	streq	r3, [r1, #0]
 80112d4:	6053      	strne	r3, [r2, #4]
 80112d6:	4630      	mov	r0, r6
 80112d8:	f000 fa80 	bl	80117dc <__malloc_unlock>
 80112dc:	f104 000b 	add.w	r0, r4, #11
 80112e0:	1d23      	adds	r3, r4, #4
 80112e2:	f020 0007 	bic.w	r0, r0, #7
 80112e6:	1ac2      	subs	r2, r0, r3
 80112e8:	d0cc      	beq.n	8011284 <_malloc_r+0x20>
 80112ea:	1a1b      	subs	r3, r3, r0
 80112ec:	50a3      	str	r3, [r4, r2]
 80112ee:	e7c9      	b.n	8011284 <_malloc_r+0x20>
 80112f0:	4622      	mov	r2, r4
 80112f2:	6864      	ldr	r4, [r4, #4]
 80112f4:	e7cc      	b.n	8011290 <_malloc_r+0x2c>
 80112f6:	1cc4      	adds	r4, r0, #3
 80112f8:	f024 0403 	bic.w	r4, r4, #3
 80112fc:	42a0      	cmp	r0, r4
 80112fe:	d0e3      	beq.n	80112c8 <_malloc_r+0x64>
 8011300:	1a21      	subs	r1, r4, r0
 8011302:	4630      	mov	r0, r6
 8011304:	f000 f96c 	bl	80115e0 <_sbrk_r>
 8011308:	3001      	adds	r0, #1
 801130a:	d1dd      	bne.n	80112c8 <_malloc_r+0x64>
 801130c:	e7cf      	b.n	80112ae <_malloc_r+0x4a>
 801130e:	bf00      	nop
 8011310:	2000022c 	.word	0x2000022c
 8011314:	20000230 	.word	0x20000230

08011318 <__sfputc_r>:
 8011318:	6893      	ldr	r3, [r2, #8]
 801131a:	3b01      	subs	r3, #1
 801131c:	2b00      	cmp	r3, #0
 801131e:	b410      	push	{r4}
 8011320:	6093      	str	r3, [r2, #8]
 8011322:	da08      	bge.n	8011336 <__sfputc_r+0x1e>
 8011324:	6994      	ldr	r4, [r2, #24]
 8011326:	42a3      	cmp	r3, r4
 8011328:	db01      	blt.n	801132e <__sfputc_r+0x16>
 801132a:	290a      	cmp	r1, #10
 801132c:	d103      	bne.n	8011336 <__sfputc_r+0x1e>
 801132e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011332:	f7fd bd99 	b.w	800ee68 <__swbuf_r>
 8011336:	6813      	ldr	r3, [r2, #0]
 8011338:	1c58      	adds	r0, r3, #1
 801133a:	6010      	str	r0, [r2, #0]
 801133c:	7019      	strb	r1, [r3, #0]
 801133e:	4608      	mov	r0, r1
 8011340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011344:	4770      	bx	lr

08011346 <__sfputs_r>:
 8011346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011348:	4606      	mov	r6, r0
 801134a:	460f      	mov	r7, r1
 801134c:	4614      	mov	r4, r2
 801134e:	18d5      	adds	r5, r2, r3
 8011350:	42ac      	cmp	r4, r5
 8011352:	d101      	bne.n	8011358 <__sfputs_r+0x12>
 8011354:	2000      	movs	r0, #0
 8011356:	e007      	b.n	8011368 <__sfputs_r+0x22>
 8011358:	f814 1b01 	ldrb.w	r1, [r4], #1
 801135c:	463a      	mov	r2, r7
 801135e:	4630      	mov	r0, r6
 8011360:	f7ff ffda 	bl	8011318 <__sfputc_r>
 8011364:	1c43      	adds	r3, r0, #1
 8011366:	d1f3      	bne.n	8011350 <__sfputs_r+0xa>
 8011368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801136c <_vfiprintf_r>:
 801136c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011370:	460d      	mov	r5, r1
 8011372:	b09d      	sub	sp, #116	; 0x74
 8011374:	4614      	mov	r4, r2
 8011376:	4698      	mov	r8, r3
 8011378:	4606      	mov	r6, r0
 801137a:	b118      	cbz	r0, 8011384 <_vfiprintf_r+0x18>
 801137c:	6983      	ldr	r3, [r0, #24]
 801137e:	b90b      	cbnz	r3, 8011384 <_vfiprintf_r+0x18>
 8011380:	f7fe fdc4 	bl	800ff0c <__sinit>
 8011384:	4b89      	ldr	r3, [pc, #548]	; (80115ac <_vfiprintf_r+0x240>)
 8011386:	429d      	cmp	r5, r3
 8011388:	d11b      	bne.n	80113c2 <_vfiprintf_r+0x56>
 801138a:	6875      	ldr	r5, [r6, #4]
 801138c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801138e:	07d9      	lsls	r1, r3, #31
 8011390:	d405      	bmi.n	801139e <_vfiprintf_r+0x32>
 8011392:	89ab      	ldrh	r3, [r5, #12]
 8011394:	059a      	lsls	r2, r3, #22
 8011396:	d402      	bmi.n	801139e <_vfiprintf_r+0x32>
 8011398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801139a:	f7ff f9c8 	bl	801072e <__retarget_lock_acquire_recursive>
 801139e:	89ab      	ldrh	r3, [r5, #12]
 80113a0:	071b      	lsls	r3, r3, #28
 80113a2:	d501      	bpl.n	80113a8 <_vfiprintf_r+0x3c>
 80113a4:	692b      	ldr	r3, [r5, #16]
 80113a6:	b9eb      	cbnz	r3, 80113e4 <_vfiprintf_r+0x78>
 80113a8:	4629      	mov	r1, r5
 80113aa:	4630      	mov	r0, r6
 80113ac:	f7fd fdae 	bl	800ef0c <__swsetup_r>
 80113b0:	b1c0      	cbz	r0, 80113e4 <_vfiprintf_r+0x78>
 80113b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80113b4:	07dc      	lsls	r4, r3, #31
 80113b6:	d50e      	bpl.n	80113d6 <_vfiprintf_r+0x6a>
 80113b8:	f04f 30ff 	mov.w	r0, #4294967295
 80113bc:	b01d      	add	sp, #116	; 0x74
 80113be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113c2:	4b7b      	ldr	r3, [pc, #492]	; (80115b0 <_vfiprintf_r+0x244>)
 80113c4:	429d      	cmp	r5, r3
 80113c6:	d101      	bne.n	80113cc <_vfiprintf_r+0x60>
 80113c8:	68b5      	ldr	r5, [r6, #8]
 80113ca:	e7df      	b.n	801138c <_vfiprintf_r+0x20>
 80113cc:	4b79      	ldr	r3, [pc, #484]	; (80115b4 <_vfiprintf_r+0x248>)
 80113ce:	429d      	cmp	r5, r3
 80113d0:	bf08      	it	eq
 80113d2:	68f5      	ldreq	r5, [r6, #12]
 80113d4:	e7da      	b.n	801138c <_vfiprintf_r+0x20>
 80113d6:	89ab      	ldrh	r3, [r5, #12]
 80113d8:	0598      	lsls	r0, r3, #22
 80113da:	d4ed      	bmi.n	80113b8 <_vfiprintf_r+0x4c>
 80113dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113de:	f7ff f9a7 	bl	8010730 <__retarget_lock_release_recursive>
 80113e2:	e7e9      	b.n	80113b8 <_vfiprintf_r+0x4c>
 80113e4:	2300      	movs	r3, #0
 80113e6:	9309      	str	r3, [sp, #36]	; 0x24
 80113e8:	2320      	movs	r3, #32
 80113ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80113ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80113f2:	2330      	movs	r3, #48	; 0x30
 80113f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80115b8 <_vfiprintf_r+0x24c>
 80113f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80113fc:	f04f 0901 	mov.w	r9, #1
 8011400:	4623      	mov	r3, r4
 8011402:	469a      	mov	sl, r3
 8011404:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011408:	b10a      	cbz	r2, 801140e <_vfiprintf_r+0xa2>
 801140a:	2a25      	cmp	r2, #37	; 0x25
 801140c:	d1f9      	bne.n	8011402 <_vfiprintf_r+0x96>
 801140e:	ebba 0b04 	subs.w	fp, sl, r4
 8011412:	d00b      	beq.n	801142c <_vfiprintf_r+0xc0>
 8011414:	465b      	mov	r3, fp
 8011416:	4622      	mov	r2, r4
 8011418:	4629      	mov	r1, r5
 801141a:	4630      	mov	r0, r6
 801141c:	f7ff ff93 	bl	8011346 <__sfputs_r>
 8011420:	3001      	adds	r0, #1
 8011422:	f000 80aa 	beq.w	801157a <_vfiprintf_r+0x20e>
 8011426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011428:	445a      	add	r2, fp
 801142a:	9209      	str	r2, [sp, #36]	; 0x24
 801142c:	f89a 3000 	ldrb.w	r3, [sl]
 8011430:	2b00      	cmp	r3, #0
 8011432:	f000 80a2 	beq.w	801157a <_vfiprintf_r+0x20e>
 8011436:	2300      	movs	r3, #0
 8011438:	f04f 32ff 	mov.w	r2, #4294967295
 801143c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011440:	f10a 0a01 	add.w	sl, sl, #1
 8011444:	9304      	str	r3, [sp, #16]
 8011446:	9307      	str	r3, [sp, #28]
 8011448:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801144c:	931a      	str	r3, [sp, #104]	; 0x68
 801144e:	4654      	mov	r4, sl
 8011450:	2205      	movs	r2, #5
 8011452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011456:	4858      	ldr	r0, [pc, #352]	; (80115b8 <_vfiprintf_r+0x24c>)
 8011458:	f7ee feea 	bl	8000230 <memchr>
 801145c:	9a04      	ldr	r2, [sp, #16]
 801145e:	b9d8      	cbnz	r0, 8011498 <_vfiprintf_r+0x12c>
 8011460:	06d1      	lsls	r1, r2, #27
 8011462:	bf44      	itt	mi
 8011464:	2320      	movmi	r3, #32
 8011466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801146a:	0713      	lsls	r3, r2, #28
 801146c:	bf44      	itt	mi
 801146e:	232b      	movmi	r3, #43	; 0x2b
 8011470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011474:	f89a 3000 	ldrb.w	r3, [sl]
 8011478:	2b2a      	cmp	r3, #42	; 0x2a
 801147a:	d015      	beq.n	80114a8 <_vfiprintf_r+0x13c>
 801147c:	9a07      	ldr	r2, [sp, #28]
 801147e:	4654      	mov	r4, sl
 8011480:	2000      	movs	r0, #0
 8011482:	f04f 0c0a 	mov.w	ip, #10
 8011486:	4621      	mov	r1, r4
 8011488:	f811 3b01 	ldrb.w	r3, [r1], #1
 801148c:	3b30      	subs	r3, #48	; 0x30
 801148e:	2b09      	cmp	r3, #9
 8011490:	d94e      	bls.n	8011530 <_vfiprintf_r+0x1c4>
 8011492:	b1b0      	cbz	r0, 80114c2 <_vfiprintf_r+0x156>
 8011494:	9207      	str	r2, [sp, #28]
 8011496:	e014      	b.n	80114c2 <_vfiprintf_r+0x156>
 8011498:	eba0 0308 	sub.w	r3, r0, r8
 801149c:	fa09 f303 	lsl.w	r3, r9, r3
 80114a0:	4313      	orrs	r3, r2
 80114a2:	9304      	str	r3, [sp, #16]
 80114a4:	46a2      	mov	sl, r4
 80114a6:	e7d2      	b.n	801144e <_vfiprintf_r+0xe2>
 80114a8:	9b03      	ldr	r3, [sp, #12]
 80114aa:	1d19      	adds	r1, r3, #4
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	9103      	str	r1, [sp, #12]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	bfbb      	ittet	lt
 80114b4:	425b      	neglt	r3, r3
 80114b6:	f042 0202 	orrlt.w	r2, r2, #2
 80114ba:	9307      	strge	r3, [sp, #28]
 80114bc:	9307      	strlt	r3, [sp, #28]
 80114be:	bfb8      	it	lt
 80114c0:	9204      	strlt	r2, [sp, #16]
 80114c2:	7823      	ldrb	r3, [r4, #0]
 80114c4:	2b2e      	cmp	r3, #46	; 0x2e
 80114c6:	d10c      	bne.n	80114e2 <_vfiprintf_r+0x176>
 80114c8:	7863      	ldrb	r3, [r4, #1]
 80114ca:	2b2a      	cmp	r3, #42	; 0x2a
 80114cc:	d135      	bne.n	801153a <_vfiprintf_r+0x1ce>
 80114ce:	9b03      	ldr	r3, [sp, #12]
 80114d0:	1d1a      	adds	r2, r3, #4
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	9203      	str	r2, [sp, #12]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	bfb8      	it	lt
 80114da:	f04f 33ff 	movlt.w	r3, #4294967295
 80114de:	3402      	adds	r4, #2
 80114e0:	9305      	str	r3, [sp, #20]
 80114e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80115c8 <_vfiprintf_r+0x25c>
 80114e6:	7821      	ldrb	r1, [r4, #0]
 80114e8:	2203      	movs	r2, #3
 80114ea:	4650      	mov	r0, sl
 80114ec:	f7ee fea0 	bl	8000230 <memchr>
 80114f0:	b140      	cbz	r0, 8011504 <_vfiprintf_r+0x198>
 80114f2:	2340      	movs	r3, #64	; 0x40
 80114f4:	eba0 000a 	sub.w	r0, r0, sl
 80114f8:	fa03 f000 	lsl.w	r0, r3, r0
 80114fc:	9b04      	ldr	r3, [sp, #16]
 80114fe:	4303      	orrs	r3, r0
 8011500:	3401      	adds	r4, #1
 8011502:	9304      	str	r3, [sp, #16]
 8011504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011508:	482c      	ldr	r0, [pc, #176]	; (80115bc <_vfiprintf_r+0x250>)
 801150a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801150e:	2206      	movs	r2, #6
 8011510:	f7ee fe8e 	bl	8000230 <memchr>
 8011514:	2800      	cmp	r0, #0
 8011516:	d03f      	beq.n	8011598 <_vfiprintf_r+0x22c>
 8011518:	4b29      	ldr	r3, [pc, #164]	; (80115c0 <_vfiprintf_r+0x254>)
 801151a:	bb1b      	cbnz	r3, 8011564 <_vfiprintf_r+0x1f8>
 801151c:	9b03      	ldr	r3, [sp, #12]
 801151e:	3307      	adds	r3, #7
 8011520:	f023 0307 	bic.w	r3, r3, #7
 8011524:	3308      	adds	r3, #8
 8011526:	9303      	str	r3, [sp, #12]
 8011528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801152a:	443b      	add	r3, r7
 801152c:	9309      	str	r3, [sp, #36]	; 0x24
 801152e:	e767      	b.n	8011400 <_vfiprintf_r+0x94>
 8011530:	fb0c 3202 	mla	r2, ip, r2, r3
 8011534:	460c      	mov	r4, r1
 8011536:	2001      	movs	r0, #1
 8011538:	e7a5      	b.n	8011486 <_vfiprintf_r+0x11a>
 801153a:	2300      	movs	r3, #0
 801153c:	3401      	adds	r4, #1
 801153e:	9305      	str	r3, [sp, #20]
 8011540:	4619      	mov	r1, r3
 8011542:	f04f 0c0a 	mov.w	ip, #10
 8011546:	4620      	mov	r0, r4
 8011548:	f810 2b01 	ldrb.w	r2, [r0], #1
 801154c:	3a30      	subs	r2, #48	; 0x30
 801154e:	2a09      	cmp	r2, #9
 8011550:	d903      	bls.n	801155a <_vfiprintf_r+0x1ee>
 8011552:	2b00      	cmp	r3, #0
 8011554:	d0c5      	beq.n	80114e2 <_vfiprintf_r+0x176>
 8011556:	9105      	str	r1, [sp, #20]
 8011558:	e7c3      	b.n	80114e2 <_vfiprintf_r+0x176>
 801155a:	fb0c 2101 	mla	r1, ip, r1, r2
 801155e:	4604      	mov	r4, r0
 8011560:	2301      	movs	r3, #1
 8011562:	e7f0      	b.n	8011546 <_vfiprintf_r+0x1da>
 8011564:	ab03      	add	r3, sp, #12
 8011566:	9300      	str	r3, [sp, #0]
 8011568:	462a      	mov	r2, r5
 801156a:	4b16      	ldr	r3, [pc, #88]	; (80115c4 <_vfiprintf_r+0x258>)
 801156c:	a904      	add	r1, sp, #16
 801156e:	4630      	mov	r0, r6
 8011570:	f7fc f960 	bl	800d834 <_printf_float>
 8011574:	4607      	mov	r7, r0
 8011576:	1c78      	adds	r0, r7, #1
 8011578:	d1d6      	bne.n	8011528 <_vfiprintf_r+0x1bc>
 801157a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801157c:	07d9      	lsls	r1, r3, #31
 801157e:	d405      	bmi.n	801158c <_vfiprintf_r+0x220>
 8011580:	89ab      	ldrh	r3, [r5, #12]
 8011582:	059a      	lsls	r2, r3, #22
 8011584:	d402      	bmi.n	801158c <_vfiprintf_r+0x220>
 8011586:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011588:	f7ff f8d2 	bl	8010730 <__retarget_lock_release_recursive>
 801158c:	89ab      	ldrh	r3, [r5, #12]
 801158e:	065b      	lsls	r3, r3, #25
 8011590:	f53f af12 	bmi.w	80113b8 <_vfiprintf_r+0x4c>
 8011594:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011596:	e711      	b.n	80113bc <_vfiprintf_r+0x50>
 8011598:	ab03      	add	r3, sp, #12
 801159a:	9300      	str	r3, [sp, #0]
 801159c:	462a      	mov	r2, r5
 801159e:	4b09      	ldr	r3, [pc, #36]	; (80115c4 <_vfiprintf_r+0x258>)
 80115a0:	a904      	add	r1, sp, #16
 80115a2:	4630      	mov	r0, r6
 80115a4:	f7fc fbea 	bl	800dd7c <_printf_i>
 80115a8:	e7e4      	b.n	8011574 <_vfiprintf_r+0x208>
 80115aa:	bf00      	nop
 80115ac:	08013150 	.word	0x08013150
 80115b0:	08013170 	.word	0x08013170
 80115b4:	08013130 	.word	0x08013130
 80115b8:	0801336c 	.word	0x0801336c
 80115bc:	08013376 	.word	0x08013376
 80115c0:	0800d835 	.word	0x0800d835
 80115c4:	08011347 	.word	0x08011347
 80115c8:	08013372 	.word	0x08013372
 80115cc:	00000000 	.word	0x00000000

080115d0 <nan>:
 80115d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80115d8 <nan+0x8>
 80115d4:	4770      	bx	lr
 80115d6:	bf00      	nop
 80115d8:	00000000 	.word	0x00000000
 80115dc:	7ff80000 	.word	0x7ff80000

080115e0 <_sbrk_r>:
 80115e0:	b538      	push	{r3, r4, r5, lr}
 80115e2:	4d06      	ldr	r5, [pc, #24]	; (80115fc <_sbrk_r+0x1c>)
 80115e4:	2300      	movs	r3, #0
 80115e6:	4604      	mov	r4, r0
 80115e8:	4608      	mov	r0, r1
 80115ea:	602b      	str	r3, [r5, #0]
 80115ec:	f7f3 fd38 	bl	8005060 <_sbrk>
 80115f0:	1c43      	adds	r3, r0, #1
 80115f2:	d102      	bne.n	80115fa <_sbrk_r+0x1a>
 80115f4:	682b      	ldr	r3, [r5, #0]
 80115f6:	b103      	cbz	r3, 80115fa <_sbrk_r+0x1a>
 80115f8:	6023      	str	r3, [r4, #0]
 80115fa:	bd38      	pop	{r3, r4, r5, pc}
 80115fc:	200054d0 	.word	0x200054d0

08011600 <__sread>:
 8011600:	b510      	push	{r4, lr}
 8011602:	460c      	mov	r4, r1
 8011604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011608:	f000 f8ee 	bl	80117e8 <_read_r>
 801160c:	2800      	cmp	r0, #0
 801160e:	bfab      	itete	ge
 8011610:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011612:	89a3      	ldrhlt	r3, [r4, #12]
 8011614:	181b      	addge	r3, r3, r0
 8011616:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801161a:	bfac      	ite	ge
 801161c:	6563      	strge	r3, [r4, #84]	; 0x54
 801161e:	81a3      	strhlt	r3, [r4, #12]
 8011620:	bd10      	pop	{r4, pc}

08011622 <__swrite>:
 8011622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011626:	461f      	mov	r7, r3
 8011628:	898b      	ldrh	r3, [r1, #12]
 801162a:	05db      	lsls	r3, r3, #23
 801162c:	4605      	mov	r5, r0
 801162e:	460c      	mov	r4, r1
 8011630:	4616      	mov	r6, r2
 8011632:	d505      	bpl.n	8011640 <__swrite+0x1e>
 8011634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011638:	2302      	movs	r3, #2
 801163a:	2200      	movs	r2, #0
 801163c:	f000 f8b6 	bl	80117ac <_lseek_r>
 8011640:	89a3      	ldrh	r3, [r4, #12]
 8011642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011646:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801164a:	81a3      	strh	r3, [r4, #12]
 801164c:	4632      	mov	r2, r6
 801164e:	463b      	mov	r3, r7
 8011650:	4628      	mov	r0, r5
 8011652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011656:	f000 b835 	b.w	80116c4 <_write_r>

0801165a <__sseek>:
 801165a:	b510      	push	{r4, lr}
 801165c:	460c      	mov	r4, r1
 801165e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011662:	f000 f8a3 	bl	80117ac <_lseek_r>
 8011666:	1c43      	adds	r3, r0, #1
 8011668:	89a3      	ldrh	r3, [r4, #12]
 801166a:	bf15      	itete	ne
 801166c:	6560      	strne	r0, [r4, #84]	; 0x54
 801166e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011672:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011676:	81a3      	strheq	r3, [r4, #12]
 8011678:	bf18      	it	ne
 801167a:	81a3      	strhne	r3, [r4, #12]
 801167c:	bd10      	pop	{r4, pc}

0801167e <__sclose>:
 801167e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011682:	f000 b84f 	b.w	8011724 <_close_r>

08011686 <strncmp>:
 8011686:	b510      	push	{r4, lr}
 8011688:	b16a      	cbz	r2, 80116a6 <strncmp+0x20>
 801168a:	3901      	subs	r1, #1
 801168c:	1884      	adds	r4, r0, r2
 801168e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011692:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011696:	4293      	cmp	r3, r2
 8011698:	d103      	bne.n	80116a2 <strncmp+0x1c>
 801169a:	42a0      	cmp	r0, r4
 801169c:	d001      	beq.n	80116a2 <strncmp+0x1c>
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d1f5      	bne.n	801168e <strncmp+0x8>
 80116a2:	1a98      	subs	r0, r3, r2
 80116a4:	bd10      	pop	{r4, pc}
 80116a6:	4610      	mov	r0, r2
 80116a8:	e7fc      	b.n	80116a4 <strncmp+0x1e>

080116aa <__ascii_wctomb>:
 80116aa:	b149      	cbz	r1, 80116c0 <__ascii_wctomb+0x16>
 80116ac:	2aff      	cmp	r2, #255	; 0xff
 80116ae:	bf85      	ittet	hi
 80116b0:	238a      	movhi	r3, #138	; 0x8a
 80116b2:	6003      	strhi	r3, [r0, #0]
 80116b4:	700a      	strbls	r2, [r1, #0]
 80116b6:	f04f 30ff 	movhi.w	r0, #4294967295
 80116ba:	bf98      	it	ls
 80116bc:	2001      	movls	r0, #1
 80116be:	4770      	bx	lr
 80116c0:	4608      	mov	r0, r1
 80116c2:	4770      	bx	lr

080116c4 <_write_r>:
 80116c4:	b538      	push	{r3, r4, r5, lr}
 80116c6:	4d07      	ldr	r5, [pc, #28]	; (80116e4 <_write_r+0x20>)
 80116c8:	4604      	mov	r4, r0
 80116ca:	4608      	mov	r0, r1
 80116cc:	4611      	mov	r1, r2
 80116ce:	2200      	movs	r2, #0
 80116d0:	602a      	str	r2, [r5, #0]
 80116d2:	461a      	mov	r2, r3
 80116d4:	f7f3 fc73 	bl	8004fbe <_write>
 80116d8:	1c43      	adds	r3, r0, #1
 80116da:	d102      	bne.n	80116e2 <_write_r+0x1e>
 80116dc:	682b      	ldr	r3, [r5, #0]
 80116de:	b103      	cbz	r3, 80116e2 <_write_r+0x1e>
 80116e0:	6023      	str	r3, [r4, #0]
 80116e2:	bd38      	pop	{r3, r4, r5, pc}
 80116e4:	200054d0 	.word	0x200054d0

080116e8 <__assert_func>:
 80116e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80116ea:	4614      	mov	r4, r2
 80116ec:	461a      	mov	r2, r3
 80116ee:	4b09      	ldr	r3, [pc, #36]	; (8011714 <__assert_func+0x2c>)
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	4605      	mov	r5, r0
 80116f4:	68d8      	ldr	r0, [r3, #12]
 80116f6:	b14c      	cbz	r4, 801170c <__assert_func+0x24>
 80116f8:	4b07      	ldr	r3, [pc, #28]	; (8011718 <__assert_func+0x30>)
 80116fa:	9100      	str	r1, [sp, #0]
 80116fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011700:	4906      	ldr	r1, [pc, #24]	; (801171c <__assert_func+0x34>)
 8011702:	462b      	mov	r3, r5
 8011704:	f000 f81e 	bl	8011744 <fiprintf>
 8011708:	f000 f880 	bl	801180c <abort>
 801170c:	4b04      	ldr	r3, [pc, #16]	; (8011720 <__assert_func+0x38>)
 801170e:	461c      	mov	r4, r3
 8011710:	e7f3      	b.n	80116fa <__assert_func+0x12>
 8011712:	bf00      	nop
 8011714:	2000002c 	.word	0x2000002c
 8011718:	0801337d 	.word	0x0801337d
 801171c:	0801338a 	.word	0x0801338a
 8011720:	080133b8 	.word	0x080133b8

08011724 <_close_r>:
 8011724:	b538      	push	{r3, r4, r5, lr}
 8011726:	4d06      	ldr	r5, [pc, #24]	; (8011740 <_close_r+0x1c>)
 8011728:	2300      	movs	r3, #0
 801172a:	4604      	mov	r4, r0
 801172c:	4608      	mov	r0, r1
 801172e:	602b      	str	r3, [r5, #0]
 8011730:	f7f3 fc61 	bl	8004ff6 <_close>
 8011734:	1c43      	adds	r3, r0, #1
 8011736:	d102      	bne.n	801173e <_close_r+0x1a>
 8011738:	682b      	ldr	r3, [r5, #0]
 801173a:	b103      	cbz	r3, 801173e <_close_r+0x1a>
 801173c:	6023      	str	r3, [r4, #0]
 801173e:	bd38      	pop	{r3, r4, r5, pc}
 8011740:	200054d0 	.word	0x200054d0

08011744 <fiprintf>:
 8011744:	b40e      	push	{r1, r2, r3}
 8011746:	b503      	push	{r0, r1, lr}
 8011748:	4601      	mov	r1, r0
 801174a:	ab03      	add	r3, sp, #12
 801174c:	4805      	ldr	r0, [pc, #20]	; (8011764 <fiprintf+0x20>)
 801174e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011752:	6800      	ldr	r0, [r0, #0]
 8011754:	9301      	str	r3, [sp, #4]
 8011756:	f7ff fe09 	bl	801136c <_vfiprintf_r>
 801175a:	b002      	add	sp, #8
 801175c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011760:	b003      	add	sp, #12
 8011762:	4770      	bx	lr
 8011764:	2000002c 	.word	0x2000002c

08011768 <_fstat_r>:
 8011768:	b538      	push	{r3, r4, r5, lr}
 801176a:	4d07      	ldr	r5, [pc, #28]	; (8011788 <_fstat_r+0x20>)
 801176c:	2300      	movs	r3, #0
 801176e:	4604      	mov	r4, r0
 8011770:	4608      	mov	r0, r1
 8011772:	4611      	mov	r1, r2
 8011774:	602b      	str	r3, [r5, #0]
 8011776:	f7f3 fc4a 	bl	800500e <_fstat>
 801177a:	1c43      	adds	r3, r0, #1
 801177c:	d102      	bne.n	8011784 <_fstat_r+0x1c>
 801177e:	682b      	ldr	r3, [r5, #0]
 8011780:	b103      	cbz	r3, 8011784 <_fstat_r+0x1c>
 8011782:	6023      	str	r3, [r4, #0]
 8011784:	bd38      	pop	{r3, r4, r5, pc}
 8011786:	bf00      	nop
 8011788:	200054d0 	.word	0x200054d0

0801178c <_isatty_r>:
 801178c:	b538      	push	{r3, r4, r5, lr}
 801178e:	4d06      	ldr	r5, [pc, #24]	; (80117a8 <_isatty_r+0x1c>)
 8011790:	2300      	movs	r3, #0
 8011792:	4604      	mov	r4, r0
 8011794:	4608      	mov	r0, r1
 8011796:	602b      	str	r3, [r5, #0]
 8011798:	f7f3 fc49 	bl	800502e <_isatty>
 801179c:	1c43      	adds	r3, r0, #1
 801179e:	d102      	bne.n	80117a6 <_isatty_r+0x1a>
 80117a0:	682b      	ldr	r3, [r5, #0]
 80117a2:	b103      	cbz	r3, 80117a6 <_isatty_r+0x1a>
 80117a4:	6023      	str	r3, [r4, #0]
 80117a6:	bd38      	pop	{r3, r4, r5, pc}
 80117a8:	200054d0 	.word	0x200054d0

080117ac <_lseek_r>:
 80117ac:	b538      	push	{r3, r4, r5, lr}
 80117ae:	4d07      	ldr	r5, [pc, #28]	; (80117cc <_lseek_r+0x20>)
 80117b0:	4604      	mov	r4, r0
 80117b2:	4608      	mov	r0, r1
 80117b4:	4611      	mov	r1, r2
 80117b6:	2200      	movs	r2, #0
 80117b8:	602a      	str	r2, [r5, #0]
 80117ba:	461a      	mov	r2, r3
 80117bc:	f7f3 fc42 	bl	8005044 <_lseek>
 80117c0:	1c43      	adds	r3, r0, #1
 80117c2:	d102      	bne.n	80117ca <_lseek_r+0x1e>
 80117c4:	682b      	ldr	r3, [r5, #0]
 80117c6:	b103      	cbz	r3, 80117ca <_lseek_r+0x1e>
 80117c8:	6023      	str	r3, [r4, #0]
 80117ca:	bd38      	pop	{r3, r4, r5, pc}
 80117cc:	200054d0 	.word	0x200054d0

080117d0 <__malloc_lock>:
 80117d0:	4801      	ldr	r0, [pc, #4]	; (80117d8 <__malloc_lock+0x8>)
 80117d2:	f7fe bfac 	b.w	801072e <__retarget_lock_acquire_recursive>
 80117d6:	bf00      	nop
 80117d8:	200054c8 	.word	0x200054c8

080117dc <__malloc_unlock>:
 80117dc:	4801      	ldr	r0, [pc, #4]	; (80117e4 <__malloc_unlock+0x8>)
 80117de:	f7fe bfa7 	b.w	8010730 <__retarget_lock_release_recursive>
 80117e2:	bf00      	nop
 80117e4:	200054c8 	.word	0x200054c8

080117e8 <_read_r>:
 80117e8:	b538      	push	{r3, r4, r5, lr}
 80117ea:	4d07      	ldr	r5, [pc, #28]	; (8011808 <_read_r+0x20>)
 80117ec:	4604      	mov	r4, r0
 80117ee:	4608      	mov	r0, r1
 80117f0:	4611      	mov	r1, r2
 80117f2:	2200      	movs	r2, #0
 80117f4:	602a      	str	r2, [r5, #0]
 80117f6:	461a      	mov	r2, r3
 80117f8:	f7f3 fbc4 	bl	8004f84 <_read>
 80117fc:	1c43      	adds	r3, r0, #1
 80117fe:	d102      	bne.n	8011806 <_read_r+0x1e>
 8011800:	682b      	ldr	r3, [r5, #0]
 8011802:	b103      	cbz	r3, 8011806 <_read_r+0x1e>
 8011804:	6023      	str	r3, [r4, #0]
 8011806:	bd38      	pop	{r3, r4, r5, pc}
 8011808:	200054d0 	.word	0x200054d0

0801180c <abort>:
 801180c:	b508      	push	{r3, lr}
 801180e:	2006      	movs	r0, #6
 8011810:	f000 f82c 	bl	801186c <raise>
 8011814:	2001      	movs	r0, #1
 8011816:	f7f3 fbab 	bl	8004f70 <_exit>

0801181a <_raise_r>:
 801181a:	291f      	cmp	r1, #31
 801181c:	b538      	push	{r3, r4, r5, lr}
 801181e:	4604      	mov	r4, r0
 8011820:	460d      	mov	r5, r1
 8011822:	d904      	bls.n	801182e <_raise_r+0x14>
 8011824:	2316      	movs	r3, #22
 8011826:	6003      	str	r3, [r0, #0]
 8011828:	f04f 30ff 	mov.w	r0, #4294967295
 801182c:	bd38      	pop	{r3, r4, r5, pc}
 801182e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011830:	b112      	cbz	r2, 8011838 <_raise_r+0x1e>
 8011832:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011836:	b94b      	cbnz	r3, 801184c <_raise_r+0x32>
 8011838:	4620      	mov	r0, r4
 801183a:	f000 f831 	bl	80118a0 <_getpid_r>
 801183e:	462a      	mov	r2, r5
 8011840:	4601      	mov	r1, r0
 8011842:	4620      	mov	r0, r4
 8011844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011848:	f000 b818 	b.w	801187c <_kill_r>
 801184c:	2b01      	cmp	r3, #1
 801184e:	d00a      	beq.n	8011866 <_raise_r+0x4c>
 8011850:	1c59      	adds	r1, r3, #1
 8011852:	d103      	bne.n	801185c <_raise_r+0x42>
 8011854:	2316      	movs	r3, #22
 8011856:	6003      	str	r3, [r0, #0]
 8011858:	2001      	movs	r0, #1
 801185a:	e7e7      	b.n	801182c <_raise_r+0x12>
 801185c:	2400      	movs	r4, #0
 801185e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011862:	4628      	mov	r0, r5
 8011864:	4798      	blx	r3
 8011866:	2000      	movs	r0, #0
 8011868:	e7e0      	b.n	801182c <_raise_r+0x12>
	...

0801186c <raise>:
 801186c:	4b02      	ldr	r3, [pc, #8]	; (8011878 <raise+0xc>)
 801186e:	4601      	mov	r1, r0
 8011870:	6818      	ldr	r0, [r3, #0]
 8011872:	f7ff bfd2 	b.w	801181a <_raise_r>
 8011876:	bf00      	nop
 8011878:	2000002c 	.word	0x2000002c

0801187c <_kill_r>:
 801187c:	b538      	push	{r3, r4, r5, lr}
 801187e:	4d07      	ldr	r5, [pc, #28]	; (801189c <_kill_r+0x20>)
 8011880:	2300      	movs	r3, #0
 8011882:	4604      	mov	r4, r0
 8011884:	4608      	mov	r0, r1
 8011886:	4611      	mov	r1, r2
 8011888:	602b      	str	r3, [r5, #0]
 801188a:	f7f3 fb61 	bl	8004f50 <_kill>
 801188e:	1c43      	adds	r3, r0, #1
 8011890:	d102      	bne.n	8011898 <_kill_r+0x1c>
 8011892:	682b      	ldr	r3, [r5, #0]
 8011894:	b103      	cbz	r3, 8011898 <_kill_r+0x1c>
 8011896:	6023      	str	r3, [r4, #0]
 8011898:	bd38      	pop	{r3, r4, r5, pc}
 801189a:	bf00      	nop
 801189c:	200054d0 	.word	0x200054d0

080118a0 <_getpid_r>:
 80118a0:	f7f3 bb4e 	b.w	8004f40 <_getpid>

080118a4 <round>:
 80118a4:	ec51 0b10 	vmov	r0, r1, d0
 80118a8:	b570      	push	{r4, r5, r6, lr}
 80118aa:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80118ae:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80118b2:	2c13      	cmp	r4, #19
 80118b4:	ee10 2a10 	vmov	r2, s0
 80118b8:	460b      	mov	r3, r1
 80118ba:	dc19      	bgt.n	80118f0 <round+0x4c>
 80118bc:	2c00      	cmp	r4, #0
 80118be:	da09      	bge.n	80118d4 <round+0x30>
 80118c0:	3401      	adds	r4, #1
 80118c2:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80118c6:	d103      	bne.n	80118d0 <round+0x2c>
 80118c8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80118cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80118d0:	2100      	movs	r1, #0
 80118d2:	e028      	b.n	8011926 <round+0x82>
 80118d4:	4d15      	ldr	r5, [pc, #84]	; (801192c <round+0x88>)
 80118d6:	4125      	asrs	r5, r4
 80118d8:	ea01 0605 	and.w	r6, r1, r5
 80118dc:	4332      	orrs	r2, r6
 80118de:	d00e      	beq.n	80118fe <round+0x5a>
 80118e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80118e4:	fa42 f404 	asr.w	r4, r2, r4
 80118e8:	4423      	add	r3, r4
 80118ea:	ea23 0305 	bic.w	r3, r3, r5
 80118ee:	e7ef      	b.n	80118d0 <round+0x2c>
 80118f0:	2c33      	cmp	r4, #51	; 0x33
 80118f2:	dd07      	ble.n	8011904 <round+0x60>
 80118f4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80118f8:	d101      	bne.n	80118fe <round+0x5a>
 80118fa:	f7ee fcef 	bl	80002dc <__adddf3>
 80118fe:	ec41 0b10 	vmov	d0, r0, r1
 8011902:	bd70      	pop	{r4, r5, r6, pc}
 8011904:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8011908:	f04f 35ff 	mov.w	r5, #4294967295
 801190c:	40f5      	lsrs	r5, r6
 801190e:	4228      	tst	r0, r5
 8011910:	d0f5      	beq.n	80118fe <round+0x5a>
 8011912:	2101      	movs	r1, #1
 8011914:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8011918:	fa01 f404 	lsl.w	r4, r1, r4
 801191c:	1912      	adds	r2, r2, r4
 801191e:	bf28      	it	cs
 8011920:	185b      	addcs	r3, r3, r1
 8011922:	ea22 0105 	bic.w	r1, r2, r5
 8011926:	4608      	mov	r0, r1
 8011928:	4619      	mov	r1, r3
 801192a:	e7e8      	b.n	80118fe <round+0x5a>
 801192c:	000fffff 	.word	0x000fffff

08011930 <fmaxf>:
 8011930:	b508      	push	{r3, lr}
 8011932:	ed2d 8b02 	vpush	{d8}
 8011936:	eeb0 8a40 	vmov.f32	s16, s0
 801193a:	eef0 8a60 	vmov.f32	s17, s1
 801193e:	f000 f82d 	bl	801199c <__fpclassifyf>
 8011942:	b148      	cbz	r0, 8011958 <fmaxf+0x28>
 8011944:	eeb0 0a68 	vmov.f32	s0, s17
 8011948:	f000 f828 	bl	801199c <__fpclassifyf>
 801194c:	b130      	cbz	r0, 801195c <fmaxf+0x2c>
 801194e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011956:	dc01      	bgt.n	801195c <fmaxf+0x2c>
 8011958:	eeb0 8a68 	vmov.f32	s16, s17
 801195c:	eeb0 0a48 	vmov.f32	s0, s16
 8011960:	ecbd 8b02 	vpop	{d8}
 8011964:	bd08      	pop	{r3, pc}

08011966 <fminf>:
 8011966:	b508      	push	{r3, lr}
 8011968:	ed2d 8b02 	vpush	{d8}
 801196c:	eeb0 8a40 	vmov.f32	s16, s0
 8011970:	eef0 8a60 	vmov.f32	s17, s1
 8011974:	f000 f812 	bl	801199c <__fpclassifyf>
 8011978:	b148      	cbz	r0, 801198e <fminf+0x28>
 801197a:	eeb0 0a68 	vmov.f32	s0, s17
 801197e:	f000 f80d 	bl	801199c <__fpclassifyf>
 8011982:	b130      	cbz	r0, 8011992 <fminf+0x2c>
 8011984:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801198c:	d401      	bmi.n	8011992 <fminf+0x2c>
 801198e:	eeb0 8a68 	vmov.f32	s16, s17
 8011992:	eeb0 0a48 	vmov.f32	s0, s16
 8011996:	ecbd 8b02 	vpop	{d8}
 801199a:	bd08      	pop	{r3, pc}

0801199c <__fpclassifyf>:
 801199c:	ee10 3a10 	vmov	r3, s0
 80119a0:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80119a4:	d00d      	beq.n	80119c2 <__fpclassifyf+0x26>
 80119a6:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80119aa:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80119ae:	d30a      	bcc.n	80119c6 <__fpclassifyf+0x2a>
 80119b0:	4b07      	ldr	r3, [pc, #28]	; (80119d0 <__fpclassifyf+0x34>)
 80119b2:	1e42      	subs	r2, r0, #1
 80119b4:	429a      	cmp	r2, r3
 80119b6:	d908      	bls.n	80119ca <__fpclassifyf+0x2e>
 80119b8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 80119bc:	4258      	negs	r0, r3
 80119be:	4158      	adcs	r0, r3
 80119c0:	4770      	bx	lr
 80119c2:	2002      	movs	r0, #2
 80119c4:	4770      	bx	lr
 80119c6:	2004      	movs	r0, #4
 80119c8:	4770      	bx	lr
 80119ca:	2003      	movs	r0, #3
 80119cc:	4770      	bx	lr
 80119ce:	bf00      	nop
 80119d0:	007ffffe 	.word	0x007ffffe
 80119d4:	00000000 	.word	0x00000000

080119d8 <exp>:
 80119d8:	b538      	push	{r3, r4, r5, lr}
 80119da:	ed2d 8b02 	vpush	{d8}
 80119de:	ec55 4b10 	vmov	r4, r5, d0
 80119e2:	f000 f899 	bl	8011b18 <__ieee754_exp>
 80119e6:	4b22      	ldr	r3, [pc, #136]	; (8011a70 <exp+0x98>)
 80119e8:	eeb0 8a40 	vmov.f32	s16, s0
 80119ec:	eef0 8a60 	vmov.f32	s17, s1
 80119f0:	f993 3000 	ldrsb.w	r3, [r3]
 80119f4:	3301      	adds	r3, #1
 80119f6:	d012      	beq.n	8011a1e <exp+0x46>
 80119f8:	ec45 4b10 	vmov	d0, r4, r5
 80119fc:	f000 fa8b 	bl	8011f16 <finite>
 8011a00:	b168      	cbz	r0, 8011a1e <exp+0x46>
 8011a02:	a313      	add	r3, pc, #76	; (adr r3, 8011a50 <exp+0x78>)
 8011a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a08:	4620      	mov	r0, r4
 8011a0a:	4629      	mov	r1, r5
 8011a0c:	f7ef f8ac 	bl	8000b68 <__aeabi_dcmpgt>
 8011a10:	b160      	cbz	r0, 8011a2c <exp+0x54>
 8011a12:	f7fb fe2f 	bl	800d674 <__errno>
 8011a16:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8011a58 <exp+0x80>
 8011a1a:	2322      	movs	r3, #34	; 0x22
 8011a1c:	6003      	str	r3, [r0, #0]
 8011a1e:	eeb0 0a48 	vmov.f32	s0, s16
 8011a22:	eef0 0a68 	vmov.f32	s1, s17
 8011a26:	ecbd 8b02 	vpop	{d8}
 8011a2a:	bd38      	pop	{r3, r4, r5, pc}
 8011a2c:	a30c      	add	r3, pc, #48	; (adr r3, 8011a60 <exp+0x88>)
 8011a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a32:	4620      	mov	r0, r4
 8011a34:	4629      	mov	r1, r5
 8011a36:	f7ef f879 	bl	8000b2c <__aeabi_dcmplt>
 8011a3a:	2800      	cmp	r0, #0
 8011a3c:	d0ef      	beq.n	8011a1e <exp+0x46>
 8011a3e:	f7fb fe19 	bl	800d674 <__errno>
 8011a42:	2322      	movs	r3, #34	; 0x22
 8011a44:	ed9f 8b08 	vldr	d8, [pc, #32]	; 8011a68 <exp+0x90>
 8011a48:	6003      	str	r3, [r0, #0]
 8011a4a:	e7e8      	b.n	8011a1e <exp+0x46>
 8011a4c:	f3af 8000 	nop.w
 8011a50:	fefa39ef 	.word	0xfefa39ef
 8011a54:	40862e42 	.word	0x40862e42
 8011a58:	00000000 	.word	0x00000000
 8011a5c:	7ff00000 	.word	0x7ff00000
 8011a60:	d52d3051 	.word	0xd52d3051
 8011a64:	c0874910 	.word	0xc0874910
	...
 8011a70:	20000200 	.word	0x20000200

08011a74 <fmodf>:
 8011a74:	b508      	push	{r3, lr}
 8011a76:	ed2d 8b02 	vpush	{d8}
 8011a7a:	eef0 8a40 	vmov.f32	s17, s0
 8011a7e:	eeb0 8a60 	vmov.f32	s16, s1
 8011a82:	f000 f9c3 	bl	8011e0c <__ieee754_fmodf>
 8011a86:	4b0f      	ldr	r3, [pc, #60]	; (8011ac4 <fmodf+0x50>)
 8011a88:	f993 3000 	ldrsb.w	r3, [r3]
 8011a8c:	3301      	adds	r3, #1
 8011a8e:	d016      	beq.n	8011abe <fmodf+0x4a>
 8011a90:	eeb4 8a48 	vcmp.f32	s16, s16
 8011a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a98:	d611      	bvs.n	8011abe <fmodf+0x4a>
 8011a9a:	eef4 8a68 	vcmp.f32	s17, s17
 8011a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aa2:	d60c      	bvs.n	8011abe <fmodf+0x4a>
 8011aa4:	eddf 8a08 	vldr	s17, [pc, #32]	; 8011ac8 <fmodf+0x54>
 8011aa8:	eeb4 8a68 	vcmp.f32	s16, s17
 8011aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ab0:	d105      	bne.n	8011abe <fmodf+0x4a>
 8011ab2:	f7fb fddf 	bl	800d674 <__errno>
 8011ab6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011aba:	2321      	movs	r3, #33	; 0x21
 8011abc:	6003      	str	r3, [r0, #0]
 8011abe:	ecbd 8b02 	vpop	{d8}
 8011ac2:	bd08      	pop	{r3, pc}
 8011ac4:	20000200 	.word	0x20000200
 8011ac8:	00000000 	.word	0x00000000

08011acc <sqrtf>:
 8011acc:	b508      	push	{r3, lr}
 8011ace:	ed2d 8b02 	vpush	{d8}
 8011ad2:	eeb0 8a40 	vmov.f32	s16, s0
 8011ad6:	f000 fa1b 	bl	8011f10 <__ieee754_sqrtf>
 8011ada:	4b0d      	ldr	r3, [pc, #52]	; (8011b10 <sqrtf+0x44>)
 8011adc:	f993 3000 	ldrsb.w	r3, [r3]
 8011ae0:	3301      	adds	r3, #1
 8011ae2:	d011      	beq.n	8011b08 <sqrtf+0x3c>
 8011ae4:	eeb4 8a48 	vcmp.f32	s16, s16
 8011ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aec:	d60c      	bvs.n	8011b08 <sqrtf+0x3c>
 8011aee:	eddf 8a09 	vldr	s17, [pc, #36]	; 8011b14 <sqrtf+0x48>
 8011af2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011afa:	d505      	bpl.n	8011b08 <sqrtf+0x3c>
 8011afc:	f7fb fdba 	bl	800d674 <__errno>
 8011b00:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011b04:	2321      	movs	r3, #33	; 0x21
 8011b06:	6003      	str	r3, [r0, #0]
 8011b08:	ecbd 8b02 	vpop	{d8}
 8011b0c:	bd08      	pop	{r3, pc}
 8011b0e:	bf00      	nop
 8011b10:	20000200 	.word	0x20000200
 8011b14:	00000000 	.word	0x00000000

08011b18 <__ieee754_exp>:
 8011b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b1c:	ec55 4b10 	vmov	r4, r5, d0
 8011b20:	49b1      	ldr	r1, [pc, #708]	; (8011de8 <__ieee754_exp+0x2d0>)
 8011b22:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011b26:	428b      	cmp	r3, r1
 8011b28:	ed2d 8b04 	vpush	{d8-d9}
 8011b2c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8011b30:	d937      	bls.n	8011ba2 <__ieee754_exp+0x8a>
 8011b32:	49ae      	ldr	r1, [pc, #696]	; (8011dec <__ieee754_exp+0x2d4>)
 8011b34:	428b      	cmp	r3, r1
 8011b36:	d916      	bls.n	8011b66 <__ieee754_exp+0x4e>
 8011b38:	ee10 3a10 	vmov	r3, s0
 8011b3c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8011b40:	4313      	orrs	r3, r2
 8011b42:	d009      	beq.n	8011b58 <__ieee754_exp+0x40>
 8011b44:	ee10 2a10 	vmov	r2, s0
 8011b48:	462b      	mov	r3, r5
 8011b4a:	4620      	mov	r0, r4
 8011b4c:	4629      	mov	r1, r5
 8011b4e:	f7ee fbc5 	bl	80002dc <__adddf3>
 8011b52:	4604      	mov	r4, r0
 8011b54:	460d      	mov	r5, r1
 8011b56:	e000      	b.n	8011b5a <__ieee754_exp+0x42>
 8011b58:	bb06      	cbnz	r6, 8011b9c <__ieee754_exp+0x84>
 8011b5a:	ecbd 8b04 	vpop	{d8-d9}
 8011b5e:	ec45 4b10 	vmov	d0, r4, r5
 8011b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b66:	a38a      	add	r3, pc, #552	; (adr r3, 8011d90 <__ieee754_exp+0x278>)
 8011b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b6c:	ee10 0a10 	vmov	r0, s0
 8011b70:	4629      	mov	r1, r5
 8011b72:	f7ee fff9 	bl	8000b68 <__aeabi_dcmpgt>
 8011b76:	b138      	cbz	r0, 8011b88 <__ieee754_exp+0x70>
 8011b78:	a387      	add	r3, pc, #540	; (adr r3, 8011d98 <__ieee754_exp+0x280>)
 8011b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b7e:	4610      	mov	r0, r2
 8011b80:	4619      	mov	r1, r3
 8011b82:	f7ee fd61 	bl	8000648 <__aeabi_dmul>
 8011b86:	e7e4      	b.n	8011b52 <__ieee754_exp+0x3a>
 8011b88:	a385      	add	r3, pc, #532	; (adr r3, 8011da0 <__ieee754_exp+0x288>)
 8011b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b8e:	4620      	mov	r0, r4
 8011b90:	4629      	mov	r1, r5
 8011b92:	f7ee ffcb 	bl	8000b2c <__aeabi_dcmplt>
 8011b96:	2800      	cmp	r0, #0
 8011b98:	f000 8087 	beq.w	8011caa <__ieee754_exp+0x192>
 8011b9c:	2400      	movs	r4, #0
 8011b9e:	2500      	movs	r5, #0
 8011ba0:	e7db      	b.n	8011b5a <__ieee754_exp+0x42>
 8011ba2:	4a93      	ldr	r2, [pc, #588]	; (8011df0 <__ieee754_exp+0x2d8>)
 8011ba4:	4293      	cmp	r3, r2
 8011ba6:	f240 80ac 	bls.w	8011d02 <__ieee754_exp+0x1ea>
 8011baa:	4a92      	ldr	r2, [pc, #584]	; (8011df4 <__ieee754_exp+0x2dc>)
 8011bac:	4293      	cmp	r3, r2
 8011bae:	d87c      	bhi.n	8011caa <__ieee754_exp+0x192>
 8011bb0:	4b91      	ldr	r3, [pc, #580]	; (8011df8 <__ieee754_exp+0x2e0>)
 8011bb2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bba:	ee10 0a10 	vmov	r0, s0
 8011bbe:	4629      	mov	r1, r5
 8011bc0:	f7ee fb8a 	bl	80002d8 <__aeabi_dsub>
 8011bc4:	4b8d      	ldr	r3, [pc, #564]	; (8011dfc <__ieee754_exp+0x2e4>)
 8011bc6:	00f7      	lsls	r7, r6, #3
 8011bc8:	443b      	add	r3, r7
 8011bca:	ed93 7b00 	vldr	d7, [r3]
 8011bce:	f1c6 0a01 	rsb	sl, r6, #1
 8011bd2:	4680      	mov	r8, r0
 8011bd4:	4689      	mov	r9, r1
 8011bd6:	ebaa 0a06 	sub.w	sl, sl, r6
 8011bda:	eeb0 8a47 	vmov.f32	s16, s14
 8011bde:	eef0 8a67 	vmov.f32	s17, s15
 8011be2:	ec53 2b18 	vmov	r2, r3, d8
 8011be6:	4640      	mov	r0, r8
 8011be8:	4649      	mov	r1, r9
 8011bea:	f7ee fb75 	bl	80002d8 <__aeabi_dsub>
 8011bee:	4604      	mov	r4, r0
 8011bf0:	460d      	mov	r5, r1
 8011bf2:	4622      	mov	r2, r4
 8011bf4:	462b      	mov	r3, r5
 8011bf6:	4620      	mov	r0, r4
 8011bf8:	4629      	mov	r1, r5
 8011bfa:	f7ee fd25 	bl	8000648 <__aeabi_dmul>
 8011bfe:	a36a      	add	r3, pc, #424	; (adr r3, 8011da8 <__ieee754_exp+0x290>)
 8011c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c04:	4606      	mov	r6, r0
 8011c06:	460f      	mov	r7, r1
 8011c08:	f7ee fd1e 	bl	8000648 <__aeabi_dmul>
 8011c0c:	a368      	add	r3, pc, #416	; (adr r3, 8011db0 <__ieee754_exp+0x298>)
 8011c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c12:	f7ee fb61 	bl	80002d8 <__aeabi_dsub>
 8011c16:	4632      	mov	r2, r6
 8011c18:	463b      	mov	r3, r7
 8011c1a:	f7ee fd15 	bl	8000648 <__aeabi_dmul>
 8011c1e:	a366      	add	r3, pc, #408	; (adr r3, 8011db8 <__ieee754_exp+0x2a0>)
 8011c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c24:	f7ee fb5a 	bl	80002dc <__adddf3>
 8011c28:	4632      	mov	r2, r6
 8011c2a:	463b      	mov	r3, r7
 8011c2c:	f7ee fd0c 	bl	8000648 <__aeabi_dmul>
 8011c30:	a363      	add	r3, pc, #396	; (adr r3, 8011dc0 <__ieee754_exp+0x2a8>)
 8011c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c36:	f7ee fb4f 	bl	80002d8 <__aeabi_dsub>
 8011c3a:	4632      	mov	r2, r6
 8011c3c:	463b      	mov	r3, r7
 8011c3e:	f7ee fd03 	bl	8000648 <__aeabi_dmul>
 8011c42:	a361      	add	r3, pc, #388	; (adr r3, 8011dc8 <__ieee754_exp+0x2b0>)
 8011c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c48:	f7ee fb48 	bl	80002dc <__adddf3>
 8011c4c:	4632      	mov	r2, r6
 8011c4e:	463b      	mov	r3, r7
 8011c50:	f7ee fcfa 	bl	8000648 <__aeabi_dmul>
 8011c54:	4602      	mov	r2, r0
 8011c56:	460b      	mov	r3, r1
 8011c58:	4620      	mov	r0, r4
 8011c5a:	4629      	mov	r1, r5
 8011c5c:	f7ee fb3c 	bl	80002d8 <__aeabi_dsub>
 8011c60:	4602      	mov	r2, r0
 8011c62:	460b      	mov	r3, r1
 8011c64:	4606      	mov	r6, r0
 8011c66:	460f      	mov	r7, r1
 8011c68:	4620      	mov	r0, r4
 8011c6a:	4629      	mov	r1, r5
 8011c6c:	f7ee fcec 	bl	8000648 <__aeabi_dmul>
 8011c70:	ec41 0b19 	vmov	d9, r0, r1
 8011c74:	f1ba 0f00 	cmp.w	sl, #0
 8011c78:	d15d      	bne.n	8011d36 <__ieee754_exp+0x21e>
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011c80:	4630      	mov	r0, r6
 8011c82:	4639      	mov	r1, r7
 8011c84:	f7ee fb28 	bl	80002d8 <__aeabi_dsub>
 8011c88:	4602      	mov	r2, r0
 8011c8a:	460b      	mov	r3, r1
 8011c8c:	ec51 0b19 	vmov	r0, r1, d9
 8011c90:	f7ee fe04 	bl	800089c <__aeabi_ddiv>
 8011c94:	4622      	mov	r2, r4
 8011c96:	462b      	mov	r3, r5
 8011c98:	f7ee fb1e 	bl	80002d8 <__aeabi_dsub>
 8011c9c:	4602      	mov	r2, r0
 8011c9e:	460b      	mov	r3, r1
 8011ca0:	2000      	movs	r0, #0
 8011ca2:	4957      	ldr	r1, [pc, #348]	; (8011e00 <__ieee754_exp+0x2e8>)
 8011ca4:	f7ee fb18 	bl	80002d8 <__aeabi_dsub>
 8011ca8:	e753      	b.n	8011b52 <__ieee754_exp+0x3a>
 8011caa:	4856      	ldr	r0, [pc, #344]	; (8011e04 <__ieee754_exp+0x2ec>)
 8011cac:	a348      	add	r3, pc, #288	; (adr r3, 8011dd0 <__ieee754_exp+0x2b8>)
 8011cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb2:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8011cb6:	4629      	mov	r1, r5
 8011cb8:	4620      	mov	r0, r4
 8011cba:	f7ee fcc5 	bl	8000648 <__aeabi_dmul>
 8011cbe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011cc2:	f7ee fb0b 	bl	80002dc <__adddf3>
 8011cc6:	f7ee ff6f 	bl	8000ba8 <__aeabi_d2iz>
 8011cca:	4682      	mov	sl, r0
 8011ccc:	f7ee fc52 	bl	8000574 <__aeabi_i2d>
 8011cd0:	a341      	add	r3, pc, #260	; (adr r3, 8011dd8 <__ieee754_exp+0x2c0>)
 8011cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd6:	4606      	mov	r6, r0
 8011cd8:	460f      	mov	r7, r1
 8011cda:	f7ee fcb5 	bl	8000648 <__aeabi_dmul>
 8011cde:	4602      	mov	r2, r0
 8011ce0:	460b      	mov	r3, r1
 8011ce2:	4620      	mov	r0, r4
 8011ce4:	4629      	mov	r1, r5
 8011ce6:	f7ee faf7 	bl	80002d8 <__aeabi_dsub>
 8011cea:	a33d      	add	r3, pc, #244	; (adr r3, 8011de0 <__ieee754_exp+0x2c8>)
 8011cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf0:	4680      	mov	r8, r0
 8011cf2:	4689      	mov	r9, r1
 8011cf4:	4630      	mov	r0, r6
 8011cf6:	4639      	mov	r1, r7
 8011cf8:	f7ee fca6 	bl	8000648 <__aeabi_dmul>
 8011cfc:	ec41 0b18 	vmov	d8, r0, r1
 8011d00:	e76f      	b.n	8011be2 <__ieee754_exp+0xca>
 8011d02:	4a41      	ldr	r2, [pc, #260]	; (8011e08 <__ieee754_exp+0x2f0>)
 8011d04:	4293      	cmp	r3, r2
 8011d06:	d811      	bhi.n	8011d2c <__ieee754_exp+0x214>
 8011d08:	a323      	add	r3, pc, #140	; (adr r3, 8011d98 <__ieee754_exp+0x280>)
 8011d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d0e:	ee10 0a10 	vmov	r0, s0
 8011d12:	4629      	mov	r1, r5
 8011d14:	f7ee fae2 	bl	80002dc <__adddf3>
 8011d18:	4b39      	ldr	r3, [pc, #228]	; (8011e00 <__ieee754_exp+0x2e8>)
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	f7ee ff24 	bl	8000b68 <__aeabi_dcmpgt>
 8011d20:	b138      	cbz	r0, 8011d32 <__ieee754_exp+0x21a>
 8011d22:	4b37      	ldr	r3, [pc, #220]	; (8011e00 <__ieee754_exp+0x2e8>)
 8011d24:	2200      	movs	r2, #0
 8011d26:	4620      	mov	r0, r4
 8011d28:	4629      	mov	r1, r5
 8011d2a:	e710      	b.n	8011b4e <__ieee754_exp+0x36>
 8011d2c:	f04f 0a00 	mov.w	sl, #0
 8011d30:	e75f      	b.n	8011bf2 <__ieee754_exp+0xda>
 8011d32:	4682      	mov	sl, r0
 8011d34:	e75d      	b.n	8011bf2 <__ieee754_exp+0xda>
 8011d36:	4632      	mov	r2, r6
 8011d38:	463b      	mov	r3, r7
 8011d3a:	2000      	movs	r0, #0
 8011d3c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8011d40:	f7ee faca 	bl	80002d8 <__aeabi_dsub>
 8011d44:	4602      	mov	r2, r0
 8011d46:	460b      	mov	r3, r1
 8011d48:	ec51 0b19 	vmov	r0, r1, d9
 8011d4c:	f7ee fda6 	bl	800089c <__aeabi_ddiv>
 8011d50:	4602      	mov	r2, r0
 8011d52:	460b      	mov	r3, r1
 8011d54:	ec51 0b18 	vmov	r0, r1, d8
 8011d58:	f7ee fabe 	bl	80002d8 <__aeabi_dsub>
 8011d5c:	4642      	mov	r2, r8
 8011d5e:	464b      	mov	r3, r9
 8011d60:	f7ee faba 	bl	80002d8 <__aeabi_dsub>
 8011d64:	4602      	mov	r2, r0
 8011d66:	460b      	mov	r3, r1
 8011d68:	2000      	movs	r0, #0
 8011d6a:	4925      	ldr	r1, [pc, #148]	; (8011e00 <__ieee754_exp+0x2e8>)
 8011d6c:	f7ee fab4 	bl	80002d8 <__aeabi_dsub>
 8011d70:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8011d74:	4592      	cmp	sl, r2
 8011d76:	db02      	blt.n	8011d7e <__ieee754_exp+0x266>
 8011d78:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8011d7c:	e6e9      	b.n	8011b52 <__ieee754_exp+0x3a>
 8011d7e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8011d82:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8011d86:	2200      	movs	r2, #0
 8011d88:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8011d8c:	e6f9      	b.n	8011b82 <__ieee754_exp+0x6a>
 8011d8e:	bf00      	nop
 8011d90:	fefa39ef 	.word	0xfefa39ef
 8011d94:	40862e42 	.word	0x40862e42
 8011d98:	8800759c 	.word	0x8800759c
 8011d9c:	7e37e43c 	.word	0x7e37e43c
 8011da0:	d52d3051 	.word	0xd52d3051
 8011da4:	c0874910 	.word	0xc0874910
 8011da8:	72bea4d0 	.word	0x72bea4d0
 8011dac:	3e663769 	.word	0x3e663769
 8011db0:	c5d26bf1 	.word	0xc5d26bf1
 8011db4:	3ebbbd41 	.word	0x3ebbbd41
 8011db8:	af25de2c 	.word	0xaf25de2c
 8011dbc:	3f11566a 	.word	0x3f11566a
 8011dc0:	16bebd93 	.word	0x16bebd93
 8011dc4:	3f66c16c 	.word	0x3f66c16c
 8011dc8:	5555553e 	.word	0x5555553e
 8011dcc:	3fc55555 	.word	0x3fc55555
 8011dd0:	652b82fe 	.word	0x652b82fe
 8011dd4:	3ff71547 	.word	0x3ff71547
 8011dd8:	fee00000 	.word	0xfee00000
 8011ddc:	3fe62e42 	.word	0x3fe62e42
 8011de0:	35793c76 	.word	0x35793c76
 8011de4:	3dea39ef 	.word	0x3dea39ef
 8011de8:	40862e41 	.word	0x40862e41
 8011dec:	7fefffff 	.word	0x7fefffff
 8011df0:	3fd62e42 	.word	0x3fd62e42
 8011df4:	3ff0a2b1 	.word	0x3ff0a2b1
 8011df8:	080133d0 	.word	0x080133d0
 8011dfc:	080133e0 	.word	0x080133e0
 8011e00:	3ff00000 	.word	0x3ff00000
 8011e04:	080133c0 	.word	0x080133c0
 8011e08:	3e2fffff 	.word	0x3e2fffff

08011e0c <__ieee754_fmodf>:
 8011e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e0e:	ee10 6a90 	vmov	r6, s1
 8011e12:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8011e16:	d009      	beq.n	8011e2c <__ieee754_fmodf+0x20>
 8011e18:	ee10 2a10 	vmov	r2, s0
 8011e1c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8011e20:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011e24:	da02      	bge.n	8011e2c <__ieee754_fmodf+0x20>
 8011e26:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8011e2a:	dd04      	ble.n	8011e36 <__ieee754_fmodf+0x2a>
 8011e2c:	ee60 0a20 	vmul.f32	s1, s0, s1
 8011e30:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8011e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e36:	42ab      	cmp	r3, r5
 8011e38:	dbfc      	blt.n	8011e34 <__ieee754_fmodf+0x28>
 8011e3a:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 8011e3e:	d106      	bne.n	8011e4e <__ieee754_fmodf+0x42>
 8011e40:	4a32      	ldr	r2, [pc, #200]	; (8011f0c <__ieee754_fmodf+0x100>)
 8011e42:	0fe3      	lsrs	r3, r4, #31
 8011e44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011e48:	ed93 0a00 	vldr	s0, [r3]
 8011e4c:	e7f2      	b.n	8011e34 <__ieee754_fmodf+0x28>
 8011e4e:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8011e52:	d13f      	bne.n	8011ed4 <__ieee754_fmodf+0xc8>
 8011e54:	0219      	lsls	r1, r3, #8
 8011e56:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8011e5a:	2900      	cmp	r1, #0
 8011e5c:	dc37      	bgt.n	8011ece <__ieee754_fmodf+0xc2>
 8011e5e:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8011e62:	d13d      	bne.n	8011ee0 <__ieee754_fmodf+0xd4>
 8011e64:	022f      	lsls	r7, r5, #8
 8011e66:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8011e6a:	2f00      	cmp	r7, #0
 8011e6c:	da35      	bge.n	8011eda <__ieee754_fmodf+0xce>
 8011e6e:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8011e72:	bfbb      	ittet	lt
 8011e74:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8011e78:	1a12      	sublt	r2, r2, r0
 8011e7a:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8011e7e:	4093      	lsllt	r3, r2
 8011e80:	bfa8      	it	ge
 8011e82:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8011e86:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8011e8a:	bfb5      	itete	lt
 8011e8c:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8011e90:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8011e94:	1a52      	sublt	r2, r2, r1
 8011e96:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8011e9a:	bfb8      	it	lt
 8011e9c:	4095      	lsllt	r5, r2
 8011e9e:	1a40      	subs	r0, r0, r1
 8011ea0:	1b5a      	subs	r2, r3, r5
 8011ea2:	bb00      	cbnz	r0, 8011ee6 <__ieee754_fmodf+0xda>
 8011ea4:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8011ea8:	bf38      	it	cc
 8011eaa:	4613      	movcc	r3, r2
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d0c7      	beq.n	8011e40 <__ieee754_fmodf+0x34>
 8011eb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011eb4:	db1f      	blt.n	8011ef6 <__ieee754_fmodf+0xea>
 8011eb6:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8011eba:	db1f      	blt.n	8011efc <__ieee754_fmodf+0xf0>
 8011ebc:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8011ec0:	317f      	adds	r1, #127	; 0x7f
 8011ec2:	4323      	orrs	r3, r4
 8011ec4:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8011ec8:	ee00 3a10 	vmov	s0, r3
 8011ecc:	e7b2      	b.n	8011e34 <__ieee754_fmodf+0x28>
 8011ece:	3801      	subs	r0, #1
 8011ed0:	0049      	lsls	r1, r1, #1
 8011ed2:	e7c2      	b.n	8011e5a <__ieee754_fmodf+0x4e>
 8011ed4:	15d8      	asrs	r0, r3, #23
 8011ed6:	387f      	subs	r0, #127	; 0x7f
 8011ed8:	e7c1      	b.n	8011e5e <__ieee754_fmodf+0x52>
 8011eda:	3901      	subs	r1, #1
 8011edc:	007f      	lsls	r7, r7, #1
 8011ede:	e7c4      	b.n	8011e6a <__ieee754_fmodf+0x5e>
 8011ee0:	15e9      	asrs	r1, r5, #23
 8011ee2:	397f      	subs	r1, #127	; 0x7f
 8011ee4:	e7c3      	b.n	8011e6e <__ieee754_fmodf+0x62>
 8011ee6:	2a00      	cmp	r2, #0
 8011ee8:	da02      	bge.n	8011ef0 <__ieee754_fmodf+0xe4>
 8011eea:	005b      	lsls	r3, r3, #1
 8011eec:	3801      	subs	r0, #1
 8011eee:	e7d7      	b.n	8011ea0 <__ieee754_fmodf+0x94>
 8011ef0:	d0a6      	beq.n	8011e40 <__ieee754_fmodf+0x34>
 8011ef2:	0053      	lsls	r3, r2, #1
 8011ef4:	e7fa      	b.n	8011eec <__ieee754_fmodf+0xe0>
 8011ef6:	005b      	lsls	r3, r3, #1
 8011ef8:	3901      	subs	r1, #1
 8011efa:	e7d9      	b.n	8011eb0 <__ieee754_fmodf+0xa4>
 8011efc:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8011f00:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8011f04:	3182      	adds	r1, #130	; 0x82
 8011f06:	410b      	asrs	r3, r1
 8011f08:	4323      	orrs	r3, r4
 8011f0a:	e7dd      	b.n	8011ec8 <__ieee754_fmodf+0xbc>
 8011f0c:	080133f0 	.word	0x080133f0

08011f10 <__ieee754_sqrtf>:
 8011f10:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011f14:	4770      	bx	lr

08011f16 <finite>:
 8011f16:	b082      	sub	sp, #8
 8011f18:	ed8d 0b00 	vstr	d0, [sp]
 8011f1c:	9801      	ldr	r0, [sp, #4]
 8011f1e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011f22:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011f26:	0fc0      	lsrs	r0, r0, #31
 8011f28:	b002      	add	sp, #8
 8011f2a:	4770      	bx	lr

08011f2c <_init>:
 8011f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f2e:	bf00      	nop
 8011f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f32:	bc08      	pop	{r3}
 8011f34:	469e      	mov	lr, r3
 8011f36:	4770      	bx	lr

08011f38 <_fini>:
 8011f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f3a:	bf00      	nop
 8011f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f3e:	bc08      	pop	{r3}
 8011f40:	469e      	mov	lr, r3
 8011f42:	4770      	bx	lr
