
G431B_ESC_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011cbc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014b8  08011ea0  08011ea0  00021ea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013358  08013358  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08013358  08013358  00023358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013360  08013360  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013360  08013360  00023360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013364  08013364  00023364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08013368  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f1c  20000200  08013568  00030200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000511c  08013568  0003511c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026c33  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055f7  00000000  00000000  00056e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f38  00000000  00000000  0005c460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ce8  00000000  00000000  0005e398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000266a8  00000000  00000000  00060080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027752  00000000  00000000  00086728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e78c3  00000000  00000000  000ade7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019573d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b78  00000000  00000000  00195790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000200 	.word	0x20000200
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011e84 	.word	0x08011e84

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000204 	.word	0x20000204
 800021c:	08011e84 	.word	0x08011e84

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2220      	movs	r2, #32
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f00c fa8d 	bl	800d580 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001066:	4b39      	ldr	r3, [pc, #228]	; (800114c <MX_ADC1_Init+0x104>)
 8001068:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800106c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106e:	4b37      	ldr	r3, [pc, #220]	; (800114c <MX_ADC1_Init+0x104>)
 8001070:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001074:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001076:	4b35      	ldr	r3, [pc, #212]	; (800114c <MX_ADC1_Init+0x104>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107c:	4b33      	ldr	r3, [pc, #204]	; (800114c <MX_ADC1_Init+0x104>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001082:	4b32      	ldr	r3, [pc, #200]	; (800114c <MX_ADC1_Init+0x104>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001088:	4b30      	ldr	r3, [pc, #192]	; (800114c <MX_ADC1_Init+0x104>)
 800108a:	2201      	movs	r2, #1
 800108c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800108e:	4b2f      	ldr	r3, [pc, #188]	; (800114c <MX_ADC1_Init+0x104>)
 8001090:	2208      	movs	r2, #8
 8001092:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001094:	4b2d      	ldr	r3, [pc, #180]	; (800114c <MX_ADC1_Init+0x104>)
 8001096:	2200      	movs	r2, #0
 8001098:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800109a:	4b2c      	ldr	r3, [pc, #176]	; (800114c <MX_ADC1_Init+0x104>)
 800109c:	2200      	movs	r2, #0
 800109e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80010a0:	4b2a      	ldr	r3, [pc, #168]	; (800114c <MX_ADC1_Init+0x104>)
 80010a2:	2202      	movs	r2, #2
 80010a4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a6:	4b29      	ldr	r3, [pc, #164]	; (800114c <MX_ADC1_Init+0x104>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ae:	4b27      	ldr	r3, [pc, #156]	; (800114c <MX_ADC1_Init+0x104>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <MX_ADC1_Init+0x104>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <MX_ADC1_Init+0x104>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010c2:	4b22      	ldr	r3, [pc, #136]	; (800114c <MX_ADC1_Init+0x104>)
 80010c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010ca:	4b20      	ldr	r3, [pc, #128]	; (800114c <MX_ADC1_Init+0x104>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d2:	481e      	ldr	r0, [pc, #120]	; (800114c <MX_ADC1_Init+0x104>)
 80010d4:	f004 fd5e 	bl	8005b94 <HAL_ADC_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80010de:	f003 fa4c 	bl	800457a <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ea:	4619      	mov	r1, r3
 80010ec:	4817      	ldr	r0, [pc, #92]	; (800114c <MX_ADC1_Init+0x104>)
 80010ee:	f005 fcb9 	bl	8006a64 <HAL_ADCEx_MultiModeConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80010f8:	f003 fa3f 	bl	800457a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_ADC1_Init+0x108>)
 80010fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001100:	2306      	movs	r3, #6
 8001102:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001108:	237f      	movs	r3, #127	; 0x7f
 800110a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800110c:	2304      	movs	r3, #4
 800110e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	4619      	mov	r1, r3
 8001118:	480c      	ldr	r0, [pc, #48]	; (800114c <MX_ADC1_Init+0x104>)
 800111a:	f004 ff97 	bl	800604c <HAL_ADC_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001124:	f003 fa29 	bl	800457a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <MX_ADC1_Init+0x10c>)
 800112a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800112c:	230c      	movs	r3, #12
 800112e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_ADC1_Init+0x104>)
 8001136:	f004 ff89 	bl	800604c <HAL_ADC_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001140:	f003 fa1b 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	3730      	adds	r7, #48	; 0x30
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000021c 	.word	0x2000021c
 8001150:	b6902000 	.word	0xb6902000
 8001154:	04300002 	.word	0x04300002

08001158 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800115e:	463b      	mov	r3, r7
 8001160:	2220      	movs	r2, #32
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f00c fa0b 	bl	800d580 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800116a:	4b32      	ldr	r3, [pc, #200]	; (8001234 <MX_ADC2_Init+0xdc>)
 800116c:	4a32      	ldr	r2, [pc, #200]	; (8001238 <MX_ADC2_Init+0xe0>)
 800116e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001170:	4b30      	ldr	r3, [pc, #192]	; (8001234 <MX_ADC2_Init+0xdc>)
 8001172:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001176:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001178:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <MX_ADC2_Init+0xdc>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117e:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <MX_ADC2_Init+0xdc>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001184:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <MX_ADC2_Init+0xdc>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800118a:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <MX_ADC2_Init+0xdc>)
 800118c:	2201      	movs	r2, #1
 800118e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <MX_ADC2_Init+0xdc>)
 8001192:	2208      	movs	r2, #8
 8001194:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001196:	4b27      	ldr	r3, [pc, #156]	; (8001234 <MX_ADC2_Init+0xdc>)
 8001198:	2200      	movs	r2, #0
 800119a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800119c:	4b25      	ldr	r3, [pc, #148]	; (8001234 <MX_ADC2_Init+0xdc>)
 800119e:	2200      	movs	r2, #0
 80011a0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80011a2:	4b24      	ldr	r3, [pc, #144]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011a4:	2202      	movs	r2, #2
 80011a6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011a8:	4b22      	ldr	r3, [pc, #136]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b0:	4b20      	ldr	r3, [pc, #128]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b6:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011d4:	4817      	ldr	r0, [pc, #92]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011d6:	f004 fcdd 	bl	8005b94 <HAL_ADC_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 80011e0:	f003 f9cb 	bl	800457a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_ADC2_Init+0xe4>)
 80011e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011e8:	2306      	movs	r3, #6
 80011ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011f0:	237f      	movs	r3, #127	; 0x7f
 80011f2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011f4:	2304      	movs	r3, #4
 80011f6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011fc:	463b      	mov	r3, r7
 80011fe:	4619      	mov	r1, r3
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <MX_ADC2_Init+0xdc>)
 8001202:	f004 ff23 	bl	800604c <HAL_ADC_ConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 800120c:	f003 f9b5 	bl	800457a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_ADC2_Init+0xe8>)
 8001212:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001214:	230c      	movs	r3, #12
 8001216:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001218:	463b      	mov	r3, r7
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_ADC2_Init+0xdc>)
 800121e:	f004 ff15 	bl	800604c <HAL_ADC_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8001228:	f003 f9a7 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	3720      	adds	r7, #32
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000288 	.word	0x20000288
 8001238:	50000100 	.word	0x50000100
 800123c:	c3290000 	.word	0xc3290000
 8001240:	cb8c0000 	.word	0xcb8c0000

08001244 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001264:	d159      	bne.n	800131a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001266:	4b51      	ldr	r3, [pc, #324]	; (80013ac <HAL_ADC_MspInit+0x168>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	4a4f      	ldr	r2, [pc, #316]	; (80013ac <HAL_ADC_MspInit+0x168>)
 800126e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001270:	4b4e      	ldr	r3, [pc, #312]	; (80013ac <HAL_ADC_MspInit+0x168>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d10b      	bne.n	8001290 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001278:	4b4d      	ldr	r3, [pc, #308]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	4a4c      	ldr	r2, [pc, #304]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 800127e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001282:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001284:	4b4a      	ldr	r3, [pc, #296]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	4b47      	ldr	r3, [pc, #284]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001294:	4a46      	ldr	r2, [pc, #280]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129c:	4b44      	ldr	r3, [pc, #272]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a8:	2301      	movs	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ac:	2303      	movs	r3, #3
 80012ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012be:	f006 fe87 	bl	8007fd0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012c2:	4b3c      	ldr	r3, [pc, #240]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012c4:	4a3c      	ldr	r2, [pc, #240]	; (80013b8 <HAL_ADC_MspInit+0x174>)
 80012c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012c8:	4b3a      	ldr	r3, [pc, #232]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012ca:	2205      	movs	r2, #5
 80012cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ce:	4b39      	ldr	r3, [pc, #228]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012d4:	4b37      	ldr	r3, [pc, #220]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012da:	4b36      	ldr	r3, [pc, #216]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012dc:	2280      	movs	r2, #128	; 0x80
 80012de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012e0:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012e8:	4b32      	ldr	r3, [pc, #200]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80012f0:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012f6:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012fc:	482d      	ldr	r0, [pc, #180]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012fe:	f005 fd65 	bl	8006dcc <HAL_DMA_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001308:	f003 f937 	bl	800457a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a29      	ldr	r2, [pc, #164]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 8001310:	655a      	str	r2, [r3, #84]	; 0x54
 8001312:	4a28      	ldr	r2, [pc, #160]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001318:	e044      	b.n	80013a4 <HAL_ADC_MspInit+0x160>
  else if(adcHandle->Instance==ADC2)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a27      	ldr	r2, [pc, #156]	; (80013bc <HAL_ADC_MspInit+0x178>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d13f      	bne.n	80013a4 <HAL_ADC_MspInit+0x160>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <HAL_ADC_MspInit+0x168>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	3301      	adds	r3, #1
 800132a:	4a20      	ldr	r2, [pc, #128]	; (80013ac <HAL_ADC_MspInit+0x168>)
 800132c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800132e:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <HAL_ADC_MspInit+0x168>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d10b      	bne.n	800134e <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	4a1d      	ldr	r2, [pc, #116]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 800133c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
    hdma_adc2.Instance = DMA1_Channel2;
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 8001350:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <HAL_ADC_MspInit+0x180>)
 8001352:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001354:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 8001356:	2224      	movs	r2, #36	; 0x24
 8001358:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001360:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 8001368:	2280      	movs	r2, #128	; 0x80
 800136a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 800136e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001372:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 8001376:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800137a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800137c:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001388:	480d      	ldr	r0, [pc, #52]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 800138a:	f005 fd1f 	bl	8006dcc <HAL_DMA_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_ADC_MspInit+0x154>
      Error_Handler();
 8001394:	f003 f8f1 	bl	800457a <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 800139c:	655a      	str	r2, [r3, #84]	; 0x54
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6293      	str	r3, [r2, #40]	; 0x28
}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	; 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200003b4 	.word	0x200003b4
 80013b0:	40021000 	.word	0x40021000
 80013b4:	200002f4 	.word	0x200002f4
 80013b8:	40020008 	.word	0x40020008
 80013bc:	50000100 	.word	0x50000100
 80013c0:	20000354 	.word	0x20000354
 80013c4:	4002001c 	.word	0x4002001c

080013c8 <order_phases>:
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"
#include "tim.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 80013c8:	b5b0      	push	{r4, r5, r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 80013d6:	4b7d      	ldr	r3, [pc, #500]	; (80015cc <order_phases+0x204>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
	if(!cal->started){
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7c1b      	ldrb	r3, [r3, #16]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d108      	bne.n	80013f6 <order_phases+0x2e>
		printf("Checking phase sign, pole pairs\r\n");
 80013e4:	487a      	ldr	r0, [pc, #488]	; (80015d0 <order_phases+0x208>)
 80013e6:	f00c fdc3 	bl	800df70 <puts>
		cal->started = 1;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001406:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80015d4 <order_phases+0x20c>
 800140a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	edd3 7a05 	vldr	s15, [r3, #20]
 800141a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800141e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001426:	d529      	bpl.n	800147c <order_phases+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800143a:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
        cal->cal_position.elec_velocity = 0;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001444:	461a      	mov	r2, r3
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
        controller->i_d_des = I_CAL;
 800144e:	4b62      	ldr	r3, [pc, #392]	; (80015d8 <order_phases+0x210>)
 8001450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8001468:	332c      	adds	r3, #44	; 0x2c
 800146a:	4619      	mov	r1, r3
 800146c:	68b8      	ldr	r0, [r7, #8]
 800146e:	f001 fa4d 	bl	800290c <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	619a      	str	r2, [r3, #24]
    	return;
 800147a:	e0a4      	b.n	80015c6 <order_phases+0x1fe>
    }
    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001482:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80015dc <order_phases+0x214>
 8001486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	d51d      	bpl.n	80014cc <order_phases+0x104>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	edd3 7a05 	vldr	s15, [r3, #20]
 8001496:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800149a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800149e:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80015e0 <order_phases+0x218>
 80014a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80014b6:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
		commutate(controller, &cal->cal_position);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80014c0:	332c      	adds	r3, #44	; 0x2c
 80014c2:	4619      	mov	r1, r3
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f001 fa21 	bl	800290c <commutate>
    	return;
 80014ca:	e07c      	b.n	80015c6 <order_phases+0x1fe>
    }
	reset_foc(controller);
 80014cc:	68b8      	ldr	r0, [r7, #8]
 80014ce:	f001 f9a9 	bl	8002824 <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	edd3 7a06 	vldr	s15, [r3, #24]
 80014de:	ed97 7a05 	vldr	s14, [r7, #20]
 80014e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e6:	eef0 7ae7 	vabs.f32	s15, s15
 80014ea:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80015e4 <order_phases+0x21c>
 80014ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014f2:	ee16 0a90 	vmov	r0, s13
 80014f6:	f7ff f84f 	bl	8000598 <__aeabi_f2d>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	ec43 2b10 	vmov	d0, r2, r3
 8001502:	f010 f95d 	bl	80117c0 <round>
 8001506:	ec53 2b10 	vmov	r2, r3, d0
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f7ff fb73 	bl	8000bf8 <__aeabi_d2uiz>
 8001512:	4603      	mov	r3, r0
 8001514:	b2da      	uxtb	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001520:	ed97 7a05 	vldr	s14, [r7, #20]
 8001524:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	dd07      	ble.n	800153e <order_phases+0x176>
		cal->phase_order = 0;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 8001536:	482c      	ldr	r0, [pc, #176]	; (80015e8 <order_phases+0x220>)
 8001538:	f00c fd1a 	bl	800df70 <puts>
 800153c:	e014      	b.n	8001568 <order_phases+0x1a0>
	}
	else{
		cal->phase_order = 1;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2020 	strb.w	r2, [r3, #32]
		int offsetATemp = controller->adc_a_offset;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800154c:	613b      	str	r3, [r7, #16]
		controller->adc_a_offset = controller->adc_b_offset;
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		controller->adc_b_offset = offsetATemp;
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		printf("Swapping phase sign\r\n");
 8001562:	4822      	ldr	r0, [pc, #136]	; (80015ec <order_phases+0x224>)
 8001564:	f00c fd04 	bl	800df70 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	4820      	ldr	r0, [pc, #128]	; (80015f0 <order_phases+0x228>)
 8001570:	f00c fc78 	bl	800de64 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff f80d 	bl	8000598 <__aeabi_f2d>
 800157e:	4604      	mov	r4, r0
 8001580:	460d      	mov	r5, r1
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff f808 	bl	8000598 <__aeabi_f2d>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	e9cd 2300 	strd	r2, r3, [sp]
 8001590:	4622      	mov	r2, r4
 8001592:	462b      	mov	r3, r5
 8001594:	4817      	ldr	r0, [pc, #92]	; (80015f4 <order_phases+0x22c>)
 8001596:	f00c fc65 	bl	800de64 <iprintf>
    PHASE_ORDER = cal->phase_order;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <order_phases+0x204>)
 80015a4:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	ee07 3a90 	vmov	s15, r3
 80015ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <order_phases+0x210>)
 80015b4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    cal->started = 0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bdb0      	pop	{r4, r5, r7, pc}
 80015cc:	20004d74 	.word	0x20004d74
 80015d0:	08011ea0 	.word	0x08011ea0
 80015d4:	388bcf64 	.word	0x388bcf64
 80015d8:	20004c74 	.word	0x20004c74
 80015dc:	3f8d6775 	.word	0x3f8d6775
 80015e0:	42700000 	.word	0x42700000
 80015e4:	40c90fdb 	.word	0x40c90fdb
 80015e8:	08011ec4 	.word	0x08011ec4
 80015ec:	08011edc 	.word	0x08011edc
 80015f0:	08011ef4 	.word	0x08011ef4
 80015f4:	08011f08 	.word	0x08011f08

080015f8 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	b094      	sub	sp, #80	; 0x50
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7c1b      	ldrb	r3, [r3, #16]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10f      	bne.n	800162e <calibrate_encoder+0x36>
		printf("Starting offset cal and linearization\r\n");
 800160e:	489e      	ldr	r0, [pc, #632]	; (8001888 <calibrate_encoder+0x290>)
 8001610:	f00c fcae 	bl	800df70 <puts>
		cal->started = 1;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	60da      	str	r2, [r3, #12]
		cal->next_sample_time = T1;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
		cal->sample_count = 0;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	849a      	strh	r2, [r3, #36]	; 0x24
	}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	ee07 3a90 	vmov	s15, r3
 800163a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800163e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800188c <calibrate_encoder+0x294>
 8001642:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001652:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001656:	eef4 7ac7 	vcmpe.f32	s15, s14
 800165a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165e:	d525      	bpl.n	80016ac <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001672:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
        controller->i_d_des = I_CAL;
 8001676:	4b86      	ldr	r3, [pc, #536]	; (8001890 <calibrate_encoder+0x298>)
 8001678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8001690:	332c      	adds	r3, #44	; 0x2c
 8001692:	4619      	mov	r1, r3
 8001694:	68b8      	ldr	r0, [r7, #8]
 8001696:	f001 f939 	bl	800290c <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 80016aa:	e258      	b.n	8001b5e <calibrate_encoder+0x566>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	ed93 7a05 	vldr	s14, [r3, #20]
 80016b2:	4b77      	ldr	r3, [pc, #476]	; (8001890 <calibrate_encoder+0x298>)
 80016b4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016b8:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001894 <calibrate_encoder+0x29c>
 80016bc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80016c0:	ed9f 6a75 	vldr	s12, [pc, #468]	; 8001898 <calibrate_encoder+0x2a0>
 80016c4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80016c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80016d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d8:	f140 808f 	bpl.w	80017fa <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	edd3 7a02 	vldr	s15, [r3, #8]
 80016e2:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800189c <calibrate_encoder+0x2a4>
 80016e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80016fa:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
		commutate(controller, &cal->cal_position);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8001704:	332c      	adds	r3, #44	; 0x2c
 8001706:	4619      	mov	r1, r3
 8001708:	68b8      	ldr	r0, [r7, #8]
 800170a:	f001 f8ff 	bl	800290c <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	ed93 7a05 	vldr	s14, [r3, #20]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800171a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800171e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001722:	dc00      	bgt.n	8001726 <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 8001724:	e21b      	b.n	8001b5e <calibrate_encoder+0x566>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	edd3 7a02 	vldr	s15, [r3, #8]
 800172c:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80018b0 <calibrate_encoder+0x2b8>
 8001730:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001734:	4b56      	ldr	r3, [pc, #344]	; (8001890 <calibrate_encoder+0x298>)
 8001736:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800173a:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001894 <calibrate_encoder+0x29c>
 800173e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001746:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800174a:	ee17 3a90 	vmov	r3, s15
 800174e:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	14db      	asrs	r3, r3, #19
 800175e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001766:	4618      	mov	r0, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	441a      	add	r2, r3
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	f100 030a 	add.w	r3, r0, #10
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800177c:	461d      	mov	r5, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	330a      	adds	r3, #10
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	685c      	ldr	r4, [r3, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe ff01 	bl	8000598 <__aeabi_f2d>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	e9cd 2300 	strd	r2, r3, [sp]
 800179e:	4623      	mov	r3, r4
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4629      	mov	r1, r5
 80017a4:	483e      	ldr	r0, [pc, #248]	; (80018a0 <calibrate_encoder+0x2a8>)
 80017a6:	f00c fb5d 	bl	800de64 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80017b0:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80018a4 <calibrate_encoder+0x2ac>
 80017b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ca:	4b31      	ldr	r3, [pc, #196]	; (8001890 <calibrate_encoder+0x298>)
 80017cc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80017d0:	eddf 6a35 	vldr	s13, [pc, #212]	; 80018a8 <calibrate_encoder+0x2b0>
 80017d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80017e0:	eeb4 7a67 	vcmp.f32	s14, s15
 80017e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e8:	f000 81b6 	beq.w	8001b58 <calibrate_encoder+0x560>
			cal->sample_count++;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017f0:	3301      	adds	r3, #1
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 80017f8:	e1b1      	b.n	8001b5e <calibrate_encoder+0x566>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	ed93 7a05 	vldr	s14, [r3, #20]
 8001800:	4b23      	ldr	r3, [pc, #140]	; (8001890 <calibrate_encoder+0x298>)
 8001802:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001806:	eddf 6a29 	vldr	s13, [pc, #164]	; 80018ac <calibrate_encoder+0x2b4>
 800180a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800180e:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8001898 <calibrate_encoder+0x2a0>
 8001812:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800181a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800181e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001826:	f140 80ab 	bpl.w	8001980 <calibrate_encoder+0x388>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001830:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800189c <calibrate_encoder+0x2a4>
 8001834:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <calibrate_encoder+0x298>)
 8001840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		controller->i_q_des = 0.0f;
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		cal->cal_position.elec_angle = cal->theta_ref;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800185c:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
		commutate(controller, &cal->cal_position);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8001866:	332c      	adds	r3, #44	; 0x2c
 8001868:	4619      	mov	r1, r3
 800186a:	68b8      	ldr	r0, [r7, #8]
 800186c:	f001 f84e 	bl	800290c <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	ed93 7a05 	vldr	s14, [r3, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800187c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001884:	dc16      	bgt.n	80018b4 <calibrate_encoder+0x2bc>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 8001886:	e169      	b.n	8001b5c <calibrate_encoder+0x564>
 8001888:	08011f24 	.word	0x08011f24
 800188c:	388bcf64 	.word	0x388bcf64
 8001890:	20004c74 	.word	0x20004c74
 8001894:	40c90fdb 	.word	0x40c90fdb
 8001898:	42700000 	.word	0x42700000
 800189c:	3b83126e 	.word	0x3b83126e
 80018a0:	08011f4c 	.word	0x08011f4c
 80018a4:	3ad67750 	.word	0x3ad67750
 80018a8:	42800000 	.word	0x42800000
 80018ac:	41490fdb 	.word	0x41490fdb
 80018b0:	45800000 	.word	0x45800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 814f 	beq.w	8001b5c <calibrate_encoder+0x564>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80018c4:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80018b0 <calibrate_encoder+0x2b8>
 80018c8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80018cc:	4ba5      	ldr	r3, [pc, #660]	; (8001b64 <calibrate_encoder+0x56c>)
 80018ce:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018d2:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8001b68 <calibrate_encoder+0x570>
 80018d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e2:	ee17 3a90 	vmov	r3, s15
 80018e6:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	14db      	asrs	r3, r3, #19
 80018f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	4413      	add	r3, r2
 80018fe:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	330a      	adds	r3, #10
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	4413      	add	r3, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001916:	4610      	mov	r0, r2
 8001918:	0fda      	lsrs	r2, r3, #31
 800191a:	4413      	add	r3, r2
 800191c:	105b      	asrs	r3, r3, #1
 800191e:	4619      	mov	r1, r3
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	f100 030a 	add.w	r3, r0, #10
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001930:	461d      	mov	r5, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	330a      	adds	r3, #10
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	685c      	ldr	r4, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fe27 	bl	8000598 <__aeabi_f2d>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	e9cd 2300 	strd	r2, r3, [sp]
 8001952:	4623      	mov	r3, r4
 8001954:	6a3a      	ldr	r2, [r7, #32]
 8001956:	4629      	mov	r1, r5
 8001958:	4884      	ldr	r0, [pc, #528]	; (8001b6c <calibrate_encoder+0x574>)
 800195a:	f00c fa83 	bl	800de64 <iprintf>
			cal->sample_count--;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001962:	3b01      	subs	r3, #1
 8001964:	b29a      	uxth	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	849a      	strh	r2, [r3, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001970:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001b70 <calibrate_encoder+0x578>
 8001974:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 800197e:	e0ed      	b.n	8001b5c <calibrate_encoder+0x564>
    }

    reset_foc(controller);
 8001980:	68b8      	ldr	r0, [r7, #8]
 8001982:	f000 ff4f 	bl	8002824 <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 800198a:	2300      	movs	r3, #0
 800198c:	643b      	str	r3, [r7, #64]	; 0x40
 800198e:	e00b      	b.n	80019a8 <calibrate_encoder+0x3b0>
		ezero_mean += cal->error_arr[i];
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001994:	330a      	adds	r3, #10
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800199e:	4413      	add	r3, r2
 80019a0:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80019a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019a4:	3301      	adds	r3, #1
 80019a6:	643b      	str	r3, [r7, #64]	; 0x40
 80019a8:	4b6e      	ldr	r3, [pc, #440]	; (8001b64 <calibrate_encoder+0x56c>)
 80019aa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b2:	ee17 3a90 	vmov	r3, s15
 80019b6:	019b      	lsls	r3, r3, #6
 80019b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019ba:	429a      	cmp	r2, r3
 80019bc:	dbe8      	blt.n	8001990 <calibrate_encoder+0x398>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 80019be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019c8:	4b66      	ldr	r3, [pc, #408]	; (8001b64 <calibrate_encoder+0x56c>)
 80019ca:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019ce:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001b74 <calibrate_encoder+0x57c>
 80019d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019de:	ee17 2a90 	vmov	r2, s15
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 80019e6:	2340      	movs	r3, #64	; 0x40
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
	int lut_offset = (cal->error_arr[0])*N_LUT/ENC_CPR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	da00      	bge.n	80019f4 <calibrate_encoder+0x3fc>
 80019f2:	333f      	adds	r3, #63	; 0x3f
 80019f4:	119b      	asrs	r3, r3, #6
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<N_LUT; i++){
 80019f8:	2300      	movs	r3, #0
 80019fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019fc:	e0a0      	b.n	8001b40 <calibrate_encoder+0x548>
			int moving_avg = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a04:	0fda      	lsrs	r2, r3, #31
 8001a06:	4413      	add	r3, r2
 8001a08:	105b      	asrs	r3, r3, #1
 8001a0a:	425b      	negs	r3, r3
 8001a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a0e:	e068      	b.n	8001ae2 <calibrate_encoder+0x4ea>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a1a:	4b52      	ldr	r3, [pc, #328]	; (8001b64 <calibrate_encoder+0x56c>)
 8001a1c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a24:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001b74 <calibrate_encoder+0x57c>
 8001a28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a2c:	eddf 6a51 	vldr	s13, [pc, #324]	; 8001b74 <calibrate_encoder+0x57c>
 8001a30:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a36:	ee07 3a90 	vmov	s15, r3
 8001a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a46:	ee17 3a90 	vmov	r3, s15
 8001a4a:	633b      	str	r3, [r7, #48]	; 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8001a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	da13      	bge.n	8001a7a <calibrate_encoder+0x482>
 8001a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a54:	ee07 3a90 	vmov	s15, r3
 8001a58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a5c:	4b41      	ldr	r3, [pc, #260]	; (8001b64 <calibrate_encoder+0x56c>)
 8001a5e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a62:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001b74 <calibrate_encoder+0x57c>
 8001a66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a72:	ee17 3a90 	vmov	r3, s15
 8001a76:	633b      	str	r3, [r7, #48]	; 0x30
 8001a78:	e027      	b.n	8001aca <calibrate_encoder+0x4d2>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7c:	ee07 3a90 	vmov	s15, r3
 8001a80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a84:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <calibrate_encoder+0x56c>)
 8001a86:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a8a:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001b74 <calibrate_encoder+0x57c>
 8001a8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa2:	dd12      	ble.n	8001aca <calibrate_encoder+0x4d2>
 8001aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa6:	ee07 3a90 	vmov	s15, r3
 8001aaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aae:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <calibrate_encoder+0x56c>)
 8001ab0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ab4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001b74 <calibrate_encoder+0x57c>
 8001ab8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001abc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ac0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ac4:	ee17 3a90 	vmov	r3, s15
 8001ac8:	633b      	str	r3, [r7, #48]	; 0x30
				moving_avg += cal->error_arr[index];
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ace:	330a      	adds	r3, #10
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ad8:	4413      	add	r3, r2
 8001ada:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ade:	3301      	adds	r3, #1
 8001ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae4:	0fda      	lsrs	r2, r3, #31
 8001ae6:	4413      	add	r3, r2
 8001ae8:	105b      	asrs	r3, r3, #1
 8001aea:	461a      	mov	r2, r3
 8001aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aee:	4293      	cmp	r3, r2
 8001af0:	db8e      	blt.n	8001a10 <calibrate_encoder+0x418>
			}
			moving_avg = moving_avg/window;
 8001af2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001afa:	63bb      	str	r3, [r7, #56]	; 0x38
			int lut_index = lut_offset + i;
 8001afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b00:	4413      	add	r3, r2
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b06:	2b3f      	cmp	r3, #63	; 0x3f
 8001b08:	dd02      	ble.n	8001b10 <calibrate_encoder+0x518>
 8001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0c:	3b40      	subs	r3, #64	; 0x40
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b16:	1ad2      	subs	r2, r2, r3
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b20:	330a      	adds	r3, #10
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	461a      	mov	r2, r3
 8001b32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b34:	4810      	ldr	r0, [pc, #64]	; (8001b78 <calibrate_encoder+0x580>)
 8001b36:	f00c f995 	bl	800de64 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8001b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b42:	2b3f      	cmp	r3, #63	; 0x3f
 8001b44:	f77f af5b 	ble.w	80019fe <calibrate_encoder+0x406>

		}

	cal->started = 0;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001b56:	e002      	b.n	8001b5e <calibrate_encoder+0x566>
				return;
 8001b58:	bf00      	nop
 8001b5a:	e000      	b.n	8001b5e <calibrate_encoder+0x566>
		return;
 8001b5c:	bf00      	nop
}
 8001b5e:	3748      	adds	r7, #72	; 0x48
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bdb0      	pop	{r4, r5, r7, pc}
 8001b64:	20004c74 	.word	0x20004c74
 8001b68:	40c90fdb 	.word	0x40c90fdb
 8001b6c:	08011f4c 	.word	0x08011f4c
 8001b70:	3ad67750 	.word	0x3ad67750
 8001b74:	42800000 	.word	0x42800000
 8001b78:	08011f5c 	.word	0x08011f5c

08001b7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b82:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <MX_DMA_Init+0x60>)
 8001b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b86:	4a15      	ldr	r2, [pc, #84]	; (8001bdc <MX_DMA_Init+0x60>)
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	6493      	str	r3, [r2, #72]	; 0x48
 8001b8e:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <MX_DMA_Init+0x60>)
 8001b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <MX_DMA_Init+0x60>)
 8001b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b9e:	4a0f      	ldr	r2, [pc, #60]	; (8001bdc <MX_DMA_Init+0x60>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6493      	str	r3, [r2, #72]	; 0x48
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <MX_DMA_Init+0x60>)
 8001ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	200b      	movs	r0, #11
 8001bb8:	f005 f8d3 	bl	8006d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bbc:	200b      	movs	r0, #11
 8001bbe:	f005 f8ea 	bl	8006d96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	200c      	movs	r0, #12
 8001bc8:	f005 f8cb 	bl	8006d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001bcc:	200c      	movs	r0, #12
 8001bce:	f005 f8e2 	bl	8006d96 <HAL_NVIC_EnableIRQ>

}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000

08001be0 <eeprom_restore>:

static uint32_t const page_nb = 58U; //(uint32_t)FLASH_PAGE_NB-1;
static uint32_t const start_address = 0x08000000UL+58*0x800U; //(FLASH_BASE)+page_nb*(FLASH_PAGE_SIZE);

HAL_StatusTypeDef eeprom_restore(float * float_regs, uint32_t float_size, int * int_regs, uint32_t int_size)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b090      	sub	sp, #64	; 0x40
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
 8001bec:	603b      	str	r3, [r7, #0]
	uint64_t data = 0xDEADBEEF;
 8001bee:	a33b      	add	r3, pc, #236	; (adr r3, 8001cdc <eeprom_restore+0xfc>)
 8001bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bfc:	e02c      	b.n	8001c58 <eeprom_restore+0x78>
	{
		memcpy(&data, (uint32_t *)(start_address+32*index), sizeof(uint64_t));
 8001bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c00:	015b      	lsls	r3, r3, #5
 8001c02:	4a35      	ldr	r2, [pc, #212]	; (8001cd8 <eeprom_restore+0xf8>)
 8001c04:	4413      	add	r3, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c0c:	2208      	movs	r2, #8
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f00b fca8 	bl	800d564 <memcpy>
		uint32_t temp = data&0xFFFFFFFF;
 8001c14:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c18:	4613      	mov	r3, r2
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t temp2 = data>>32;
 8001c1c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	000a      	movs	r2, r1
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		float value;
		float value2;
		memcpy(&value,&temp,sizeof(uint32_t));
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
 8001c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
		memcpy(&value2,&temp2,sizeof(uint32_t));
 8001c36:	623b      	str	r3, [r7, #32]
		float_regs[index] = value;
 8001c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4413      	add	r3, r2
 8001c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c42:	601a      	str	r2, [r3, #0]
		float_regs[index+1] = value2;
 8001c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c46:	3301      	adds	r3, #1
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	6a3a      	ldr	r2, [r7, #32]
 8001c50:	601a      	str	r2, [r3, #0]
	for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8001c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c54:	3302      	adds	r3, #2
 8001c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d3ce      	bcc.n	8001bfe <eeprom_restore+0x1e>
	}
	for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8001c60:	2300      	movs	r3, #0
 8001c62:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c64:	e02e      	b.n	8001cc4 <eeprom_restore+0xe4>
	{

		memcpy(&data, (uint32_t *)(start_address+32*(index+float_size)), sizeof(uint64_t));
 8001c66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	015b      	lsls	r3, r3, #5
 8001c6e:	4a1a      	ldr	r2, [pc, #104]	; (8001cd8 <eeprom_restore+0xf8>)
 8001c70:	4413      	add	r3, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c78:	2208      	movs	r2, #8
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f00b fc72 	bl	800d564 <memcpy>
		uint32_t temp = data&0xFFFFFFFF;
 8001c80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c84:	4613      	mov	r3, r2
 8001c86:	61fb      	str	r3, [r7, #28]
		uint32_t temp2 = data>>32;
 8001c88:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	000a      	movs	r2, r1
 8001c96:	2300      	movs	r3, #0
 8001c98:	4613      	mov	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
		int value;
		int value2;
		memcpy(&value,&temp,sizeof(uint32_t));
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	69bb      	ldr	r3, [r7, #24]
		memcpy(&value2,&temp2,sizeof(uint32_t));
 8001ca2:	613b      	str	r3, [r7, #16]
		int_regs[index] = value;
 8001ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	4413      	add	r3, r2
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	601a      	str	r2, [r3, #0]
		int_regs[index+1] = value2;
 8001cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	601a      	str	r2, [r3, #0]
	for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8001cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc0:	3302      	adds	r3, #2
 8001cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d3cc      	bcc.n	8001c66 <eeprom_restore+0x86>
	}

	return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3740      	adds	r7, #64	; 0x40
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	0801d000 	.word	0x0801d000
 8001cdc:	deadbeef 	.word	0xdeadbeef
	...

08001ce8 <eeprom_store>:

HAL_StatusTypeDef eeprom_store(float const * float_regs, uint32_t float_size, int const * int_regs, uint32_t int_size)
{
 8001ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cec:	b0a2      	sub	sp, #136	; 0x88
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6278      	str	r0, [r7, #36]	; 0x24
 8001cf2:	6239      	str	r1, [r7, #32]
 8001cf4:	61fa      	str	r2, [r7, #28]
 8001cf6:	61bb      	str	r3, [r7, #24]
	HAL_FLASH_Unlock();
 8001cf8:	f005 ff4e 	bl	8007b98 <HAL_FLASH_Unlock>
	// erase the last page of bank1 (STM32G43x : 1 bank, 64 pages, 2kB per page, 64-bit data)
	{
		FLASH_EraseInitTypeDef erase ={FLASH_TYPEERASE_PAGES,FLASH_BANK_1,page_nb,5};
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	643b      	str	r3, [r7, #64]	; 0x40
 8001d00:	2301      	movs	r3, #1
 8001d02:	647b      	str	r3, [r7, #68]	; 0x44
 8001d04:	233a      	movs	r3, #58	; 0x3a
 8001d06:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d08:	2305      	movs	r3, #5
 8001d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
		uint32_t page_error = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&erase, &page_error);
 8001d10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d14:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	f006 f834 	bl	8007d88 <HAL_FLASHEx_Erase>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if(result!=HAL_OK)
 8001d26:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d004      	beq.n	8001d38 <eeprom_store+0x50>
		{
			HAL_FLASH_Lock();
 8001d2e:	f005 ff55 	bl	8007bdc <HAL_FLASH_Lock>
			return result;
 8001d32:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d36:	e0bd      	b.n	8001eb4 <eeprom_store+0x1cc>
		}
	}
	// write the last page
	{
		uint64_t data = 0xDEADBEEF;
 8001d38:	a362      	add	r3, pc, #392	; (adr r3, 8001ec4 <eeprom_store+0x1dc>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001d48:	e052      	b.n	8001df0 <eeprom_store+0x108>
		{
			union UN {float a; uint32_t b;};
			union UN un1;
			union UN un2;
			un1.a = float_regs[index];
 8001d4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d52:	4413      	add	r3, r2
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	63bb      	str	r3, [r7, #56]	; 0x38
			un2.a = float_regs[index+1];
 8001d58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d62:	4413      	add	r3, r2
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
			uint64_t temp = un2.b;
 8001d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	617a      	str	r2, [r7, #20]
 8001d70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d74:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			data = (temp<<32)|un1.b;
 8001d78:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d7c:	f04f 0000 	mov.w	r0, #0
 8001d80:	f04f 0100 	mov.w	r1, #0
 8001d84:	0011      	movs	r1, r2
 8001d86:	2000      	movs	r0, #0
 8001d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	4698      	mov	r8, r3
 8001d8e:	4691      	mov	r9, r2
 8001d90:	ea40 0308 	orr.w	r3, r0, r8
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	ea41 0309 	orr.w	r3, r1, r9
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001da0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			HAL_StatusTypeDef result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,start_address+index*32,data);
 8001da4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001da8:	015b      	lsls	r3, r3, #5
 8001daa:	4a45      	ldr	r2, [pc, #276]	; (8001ec0 <eeprom_store+0x1d8>)
 8001dac:	1899      	adds	r1, r3, r2
 8001dae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001db2:	2000      	movs	r0, #0
 8001db4:	f005 fe9a 	bl	8007aec <HAL_FLASH_Program>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(result!=HAL_OK)
 8001dbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00f      	beq.n	8001de6 <eeprom_store+0xfe>
			{
				uint32_t error = HAL_FLASH_GetError();
 8001dc6:	f005 ff23 	bl	8007c10 <HAL_FLASH_GetError>
 8001dca:	6538      	str	r0, [r7, #80]	; 0x50
				if(error)
 8001dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d004      	beq.n	8001ddc <eeprom_store+0xf4>
				{
					HAL_FLASH_Lock();
 8001dd2:	f005 ff03 	bl	8007bdc <HAL_FLASH_Lock>
					return error;
 8001dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	e06b      	b.n	8001eb4 <eeprom_store+0x1cc>
				}
				HAL_FLASH_Lock();
 8001ddc:	f005 fefe 	bl	8007bdc <HAL_FLASH_Lock>
				return result;
 8001de0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001de4:	e066      	b.n	8001eb4 <eeprom_store+0x1cc>
		for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8001de6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dea:	3302      	adds	r3, #2
 8001dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001df0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d3a7      	bcc.n	8001d4a <eeprom_store+0x62>
			}
		}
		for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e00:	e050      	b.n	8001ea4 <eeprom_store+0x1bc>
		{
			union UN {int a; uint32_t b;};
			union UN un1;
			union UN un2;
			un1.a = int_regs[index];
 8001e02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	69fa      	ldr	r2, [r7, #28]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
			un2.a = int_regs[index+1];
 8001e10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e14:	3301      	adds	r3, #1
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
			uint64_t temp = un2.b;
 8001e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e22:	2200      	movs	r2, #0
 8001e24:	603b      	str	r3, [r7, #0]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e2c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			data = (temp<<32)|un1.b;
 8001e30:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	2200      	movs	r2, #0
 8001e40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e42:	2000      	movs	r0, #0
 8001e44:	460c      	mov	r4, r1
 8001e46:	4605      	mov	r5, r0
 8001e48:	ea42 0a04 	orr.w	sl, r2, r4
 8001e4c:	ea43 0b05 	orr.w	fp, r3, r5
 8001e50:	e9c7 ab1c 	strd	sl, fp, [r7, #112]	; 0x70
			HAL_StatusTypeDef result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,start_address+(float_size+index)*32,data);
 8001e54:	6a3a      	ldr	r2, [r7, #32]
 8001e56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e5a:	4413      	add	r3, r2
 8001e5c:	015b      	lsls	r3, r3, #5
 8001e5e:	4a18      	ldr	r2, [pc, #96]	; (8001ec0 <eeprom_store+0x1d8>)
 8001e60:	1899      	adds	r1, r3, r2
 8001e62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001e66:	2000      	movs	r0, #0
 8001e68:	f005 fe40 	bl	8007aec <HAL_FLASH_Program>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			if(result!=HAL_OK)
 8001e72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00f      	beq.n	8001e9a <eeprom_store+0x1b2>
			{
				uint32_t error = HAL_FLASH_GetError();
 8001e7a:	f005 fec9 	bl	8007c10 <HAL_FLASH_GetError>
 8001e7e:	6638      	str	r0, [r7, #96]	; 0x60
				if(error)
 8001e80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d004      	beq.n	8001e90 <eeprom_store+0x1a8>
				{
					HAL_FLASH_Lock();
 8001e86:	f005 fea9 	bl	8007bdc <HAL_FLASH_Lock>
					return error;
 8001e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	e011      	b.n	8001eb4 <eeprom_store+0x1cc>
				}
				HAL_FLASH_Lock();
 8001e90:	f005 fea4 	bl	8007bdc <HAL_FLASH_Lock>
				return result;
 8001e94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e98:	e00c      	b.n	8001eb4 <eeprom_store+0x1cc>
		for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8001e9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e9e:	3302      	adds	r3, #2
 8001ea0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ea4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d3a9      	bcc.n	8001e02 <eeprom_store+0x11a>
			}
		}
	}
	HAL_FLASH_Lock();
 8001eae:	f005 fe95 	bl	8007bdc <HAL_FLASH_Lock>
	return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3788      	adds	r7, #136	; 0x88
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ebe:	bf00      	nop
 8001ec0:	0801d000 	.word	0x0801d000
 8001ec4:	deadbeef 	.word	0xdeadbeef
 8001ec8:	00000000 	.word	0x00000000

08001ecc <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001ed0:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001ed2:	4a20      	ldr	r2, [pc, #128]	; (8001f54 <MX_FDCAN1_Init+0x88>)
 8001ed4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001edc:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001ee8:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001eee:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001ef4:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001efc:	2203      	movs	r2, #3
 8001efe:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001f00:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001f08:	220b      	movs	r2, #11
 8001f0a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001f0c:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001f0e:	2202      	movs	r2, #2
 8001f10:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001f12:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001f18:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001f24:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001f2a:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001f30:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001f3c:	4804      	ldr	r0, [pc, #16]	; (8001f50 <MX_FDCAN1_Init+0x84>)
 8001f3e:	f005 fa77 	bl	8007430 <HAL_FDCAN_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001f48:	f002 fb17 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	200003b8 	.word	0x200003b8
 8001f54:	40006400 	.word	0x40006400

08001f58 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a2d      	ldr	r2, [pc, #180]	; (800202c <HAL_FDCAN_MspInit+0xd4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d154      	bne.n	8002024 <HAL_FDCAN_MspInit+0xcc>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f7a:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_FDCAN_MspInit+0xd8>)
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	4a2c      	ldr	r2, [pc, #176]	; (8002030 <HAL_FDCAN_MspInit+0xd8>)
 8001f80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f84:	6593      	str	r3, [r2, #88]	; 0x58
 8001f86:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <HAL_FDCAN_MspInit+0xd8>)
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	4b27      	ldr	r3, [pc, #156]	; (8002030 <HAL_FDCAN_MspInit+0xd8>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	4a26      	ldr	r2, [pc, #152]	; (8002030 <HAL_FDCAN_MspInit+0xd8>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9e:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_FDCAN_MspInit+0xd8>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001faa:	4b21      	ldr	r3, [pc, #132]	; (8002030 <HAL_FDCAN_MspInit+0xd8>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	4a20      	ldr	r2, [pc, #128]	; (8002030 <HAL_FDCAN_MspInit+0xd8>)
 8001fb0:	f043 0302 	orr.w	r3, r3, #2
 8001fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb6:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <HAL_FDCAN_MspInit+0xd8>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001fc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001fd4:	2309      	movs	r3, #9
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe2:	f005 fff5 	bl	8007fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001ff8:	2309      	movs	r3, #9
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4619      	mov	r1, r3
 8002002:	480c      	ldr	r0, [pc, #48]	; (8002034 <HAL_FDCAN_MspInit+0xdc>)
 8002004:	f005 ffe4 	bl	8007fd0 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_FDCAN_MspInit+0xe0>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <HAL_FDCAN_MspInit+0xe0>)
 800200e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002012:	6053      	str	r3, [r2, #4]

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002014:	2200      	movs	r2, #0
 8002016:	2100      	movs	r1, #0
 8002018:	2015      	movs	r0, #21
 800201a:	f004 fea2 	bl	8006d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800201e:	2015      	movs	r0, #21
 8002020:	f004 feb9 	bl	8006d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002024:	bf00      	nop
 8002026:	3728      	adds	r7, #40	; 0x28
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40006400 	.word	0x40006400
 8002030:	40021000 	.word	0x40021000
 8002034:	48000400 	.word	0x48000400
 8002038:	40010000 	.word	0x40010000

0800203c <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002048:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204e:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002054:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800205c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002064:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800206e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002072:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002076:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002080:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002084:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002088:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 800208c:	4b3b      	ldr	r3, [pc, #236]	; (800217c <set_dtc+0x140>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d136      	bne.n	8002102 <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002094:	4b3a      	ldr	r3, [pc, #232]	; (8002180 <set_dtc+0x144>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80020a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020aa:	4b35      	ldr	r3, [pc, #212]	; (8002180 <set_dtc+0x144>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020b2:	ee17 2a90 	vmov	r2, s15
 80020b6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 80020b8:	4b31      	ldr	r3, [pc, #196]	; (8002180 <set_dtc+0x144>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020be:	ee07 3a90 	vmov	s15, r3
 80020c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80020ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ce:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <set_dtc+0x144>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020d6:	ee17 2a90 	vmov	r2, s15
 80020da:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 80020dc:	4b28      	ldr	r3, [pc, #160]	; (8002180 <set_dtc+0x144>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	ee07 3a90 	vmov	s15, r3
 80020e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80020ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f2:	4b23      	ldr	r3, [pc, #140]	; (8002180 <set_dtc+0x144>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020fa:	ee17 2a90 	vmov	r2, s15
 80020fe:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 8002100:	e035      	b.n	800216e <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002102:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <set_dtc+0x144>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	ee07 3a90 	vmov	s15, r3
 800210c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002110:	edd7 7a05 	vldr	s15, [r7, #20]
 8002114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <set_dtc+0x144>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002120:	ee17 2a90 	vmov	r2, s15
 8002124:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002126:	4b16      	ldr	r3, [pc, #88]	; (8002180 <set_dtc+0x144>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	ee07 3a90 	vmov	s15, r3
 8002130:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002134:	edd7 7a04 	vldr	s15, [r7, #16]
 8002138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213c:	4b10      	ldr	r3, [pc, #64]	; (8002180 <set_dtc+0x144>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002144:	ee17 2a90 	vmov	r2, s15
 8002148:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 800214a:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <set_dtc+0x144>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	ee07 3a90 	vmov	s15, r3
 8002154:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002158:	edd7 7a03 	vldr	s15, [r7, #12]
 800215c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <set_dtc+0x144>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002168:	ee17 2a90 	vmov	r2, s15
 800216c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800216e:	bf00      	nop
 8002170:	371c      	adds	r7, #28
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20004d74 	.word	0x20004d74
 8002180:	2000502c 	.word	0x2000502c

08002184 <analog_sample>:

void analog_sample (ControllerStruct *controller){
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	/* Sample ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 800218c:	4b41      	ldr	r3, [pc, #260]	; (8002294 <analog_sample+0x110>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d112      	bne.n	80021ba <analog_sample+0x36>
		controller->adc_a_raw = controller->ADC1_Val[0];
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 800219a:	461a      	mov	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = controller->ADC2_Val[0];
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 80021a6:	461a      	mov	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	609a      	str	r2, [r3, #8]
		controller->adc_c_raw = controller->ADC2_Val[1];
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 80021b2:	461a      	mov	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	60da      	str	r2, [r3, #12]
 80021b8:	e011      	b.n	80021de <analog_sample+0x5a>
	}
	else{
		controller->adc_a_raw = controller->ADC2_Val[0];
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 80021c0:	461a      	mov	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = controller->ADC1_Val[0];
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 80021cc:	461a      	mov	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	609a      	str	r2, [r3, #8]
		controller->adc_c_raw = controller->ADC2_Val[1];
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 80021d8:	461a      	mov	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	60da      	str	r2, [r3, #12]
	}

    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)controller->ADC1_Val, 2);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 80021e4:	2202      	movs	r2, #2
 80021e6:	4619      	mov	r1, r3
 80021e8:	482b      	ldr	r0, [pc, #172]	; (8002298 <analog_sample+0x114>)
 80021ea:	f003 fe5d 	bl	8005ea8 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc2, (uint32_t *)controller->ADC2_Val, 2);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80021f4:	2202      	movs	r2, #2
 80021f6:	4619      	mov	r1, r3
 80021f8:	4828      	ldr	r0, [pc, #160]	; (800229c <analog_sample+0x118>)
 80021fa:	f003 fe55 	bl	8005ea8 <HAL_ADC_Start_DMA>

	controller->adc_vbus_raw = controller->ADC1_Val[1];
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	; 0x2fa
 8002204:	461a      	mov	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	ee07 3a90 	vmov	s15, r3
 8002212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002216:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80022a0 <analog_sample+0x11c>
 800221a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	edc3 7a08 	vstr	s15, [r3, #32]

	controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	ee07 3a90 	vmov	s15, r3
 8002234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002238:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80022a4 <analog_sample+0x120>
 800223c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	edc3 7a05 	vstr	s15, [r3, #20]
	controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800225a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80022a4 <analog_sample+0x120>
 800225e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	edc3 7a06 	vstr	s15, [r3, #24]
	controller->i_c = I_SCALE*(float)(controller->adc_c_raw - controller->adc_c_offset);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	ee07 3a90 	vmov	s15, r3
 8002278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800227c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80022a4 <analog_sample+0x120>
 8002280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	edc3 7a07 	vstr	s15, [r3, #28]

}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20004d74 	.word	0x20004d74
 8002298:	2000021c 	.word	0x2000021c
 800229c:	20000288 	.word	0x20000288
 80022a0:	3c092822 	.word	0x3c092822
 80022a4:	bcf0aa87 	.word	0xbcf0aa87

080022a8 <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	ed87 0a05 	vstr	s0, [r7, #20]
 80022b2:	edc7 0a04 	vstr	s1, [r7, #16]
 80022b6:	ed87 1a03 	vstr	s2, [r7, #12]
 80022ba:	60b8      	str	r0, [r7, #8]
 80022bc:	6079      	str	r1, [r7, #4]
 80022be:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 80022c0:	ed97 0a05 	vldr	s0, [r7, #20]
 80022c4:	f002 fa82 	bl	80047cc <cos_lut>
 80022c8:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 80022cc:	ed97 0a05 	vldr	s0, [r7, #20]
 80022d0:	f002 fa42 	bl	8004758 <sin_lut>
 80022d4:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 80022d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80022dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80022e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022e4:	edd7 6a06 	vldr	s13, [r7, #24]
 80022e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80022ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 80022fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80022fe:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80023a8 <abc+0x100>
 8002302:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002306:	edd7 7a07 	vldr	s15, [r7, #28]
 800230a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800230e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002312:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002316:	edd7 7a04 	vldr	s15, [r7, #16]
 800231a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800231e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002322:	eddf 6a22 	vldr	s13, [pc, #136]	; 80023ac <abc+0x104>
 8002326:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800232a:	edd7 7a06 	vldr	s15, [r7, #24]
 800232e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002332:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002336:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800233a:	edd7 7a03 	vldr	s15, [r7, #12]
 800233e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002342:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 800234c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002350:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80023ac <abc+0x104>
 8002354:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002358:	edd7 7a07 	vldr	s15, [r7, #28]
 800235c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002360:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002364:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002368:	edd7 7a04 	vldr	s15, [r7, #16]
 800236c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002370:	edd7 7a07 	vldr	s15, [r7, #28]
 8002374:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80023a8 <abc+0x100>
 8002378:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800237c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002380:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002384:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002388:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800238c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002390:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	edc3 7a00 	vstr	s15, [r3]
    }
 800239e:	bf00      	nop
 80023a0:	3720      	adds	r7, #32
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	3f5db3d7 	.word	0x3f5db3d7
 80023ac:	bf5db3d7 	.word	0xbf5db3d7

080023b0 <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	ed87 0a05 	vstr	s0, [r7, #20]
 80023ba:	edc7 0a04 	vstr	s1, [r7, #16]
 80023be:	ed87 1a03 	vstr	s2, [r7, #12]
 80023c2:	edc7 1a02 	vstr	s3, [r7, #8]
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 80023ca:	ed97 0a05 	vldr	s0, [r7, #20]
 80023ce:	f002 f9fd 	bl	80047cc <cos_lut>
 80023d2:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 80023d6:	ed97 0a05 	vldr	s0, [r7, #20]
 80023da:	f002 f9bd 	bl	8004758 <sin_lut>
 80023de:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80023e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80023e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80023ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80023f2:	eddf 6a34 	vldr	s13, [pc, #208]	; 80024c4 <dq0+0x114>
 80023f6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80023fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80023fe:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002402:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002406:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800240a:	edd7 7a03 	vldr	s15, [r7, #12]
 800240e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002412:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002416:	edd7 7a06 	vldr	s15, [r7, #24]
 800241a:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80024c8 <dq0+0x118>
 800241e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002422:	edd7 7a07 	vldr	s15, [r7, #28]
 8002426:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800242a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800242e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002432:	edd7 7a02 	vldr	s15, [r7, #8]
 8002436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800243a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800243e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80024cc <dq0+0x11c>
 8002442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 800244c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002450:	eeb1 7a67 	vneg.f32	s14, s15
 8002454:	edd7 7a04 	vldr	s15, [r7, #16]
 8002458:	ee27 7a27 	vmul.f32	s14, s14, s15
 800245c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002460:	eddf 6a19 	vldr	s13, [pc, #100]	; 80024c8 <dq0+0x118>
 8002464:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002468:	edd7 7a06 	vldr	s15, [r7, #24]
 800246c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002470:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002474:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002478:	edd7 7a03 	vldr	s15, [r7, #12]
 800247c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002480:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002484:	edd7 7a07 	vldr	s15, [r7, #28]
 8002488:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80024c4 <dq0+0x114>
 800248c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002490:	edd7 7a06 	vldr	s15, [r7, #24]
 8002494:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002498:	ee67 7a86 	vmul.f32	s15, s15, s12
 800249c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80024a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ac:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80024cc <dq0+0x11c>
 80024b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	edc3 7a00 	vstr	s15, [r3]

    }
 80024ba:	bf00      	nop
 80024bc:	3720      	adds	r7, #32
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	3f5db3d7 	.word	0x3f5db3d7
 80024c8:	bf5db3d7 	.word	0xbf5db3d7
 80024cc:	3f2aaaab 	.word	0x3f2aaaab

080024d0 <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 80024d0:	b580      	push	{r7, lr}
 80024d2:	ed2d 8b02 	vpush	{d8}
 80024d6:	b08a      	sub	sp, #40	; 0x28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	ed87 0a07 	vstr	s0, [r7, #28]
 80024de:	edc7 0a06 	vstr	s1, [r7, #24]
 80024e2:	ed87 1a05 	vstr	s2, [r7, #20]
 80024e6:	edc7 1a04 	vstr	s3, [r7, #16]
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 80024f0:	ed97 1a04 	vldr	s2, [r7, #16]
 80024f4:	edd7 0a05 	vldr	s1, [r7, #20]
 80024f8:	ed97 0a06 	vldr	s0, [r7, #24]
 80024fc:	f002 f8ae 	bl	800465c <fminf3>
 8002500:	eeb0 8a40 	vmov.f32	s16, s0
 8002504:	ed97 1a04 	vldr	s2, [r7, #16]
 8002508:	edd7 0a05 	vldr	s1, [r7, #20]
 800250c:	ed97 0a06 	vldr	s0, [r7, #24]
 8002510:	f002 f870 	bl	80045f4 <fmaxf3>
 8002514:	eef0 7a40 	vmov.f32	s15, s0
 8002518:	ee78 7a27 	vadd.f32	s15, s16, s15
 800251c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002524:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 8002528:	4b41      	ldr	r3, [pc, #260]	; (8002630 <svm+0x160>)
 800252a:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 800252c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002530:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002538:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800253c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002540:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002634 <svm+0x164>
 8002544:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002548:	edd7 7a07 	vldr	s15, [r7, #28]
 800254c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002550:	edd7 7a08 	vldr	s15, [r7, #32]
 8002554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002558:	eddf 0a37 	vldr	s1, [pc, #220]	; 8002638 <svm+0x168>
 800255c:	eeb0 0a67 	vmov.f32	s0, s15
 8002560:	f002 f810 	bl	8004584 <fast_fmaxf>
 8002564:	eef0 7a40 	vmov.f32	s15, s0
 8002568:	eddf 0a34 	vldr	s1, [pc, #208]	; 800263c <svm+0x16c>
 800256c:	eeb0 0a67 	vmov.f32	s0, s15
 8002570:	f002 f824 	bl	80045bc <fast_fminf>
 8002574:	eef0 7a40 	vmov.f32	s15, s0
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 800257e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002582:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800258a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800258e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002592:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002634 <svm+0x164>
 8002596:	ee67 6a87 	vmul.f32	s13, s15, s14
 800259a:	edd7 7a07 	vldr	s15, [r7, #28]
 800259e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80025a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025aa:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002638 <svm+0x168>
 80025ae:	eeb0 0a67 	vmov.f32	s0, s15
 80025b2:	f001 ffe7 	bl	8004584 <fast_fmaxf>
 80025b6:	eef0 7a40 	vmov.f32	s15, s0
 80025ba:	eddf 0a20 	vldr	s1, [pc, #128]	; 800263c <svm+0x16c>
 80025be:	eeb0 0a67 	vmov.f32	s0, s15
 80025c2:	f001 fffb 	bl	80045bc <fast_fminf>
 80025c6:	eef0 7a40 	vmov.f32	s15, s0
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80025d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80025d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80025e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002634 <svm+0x164>
 80025e8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80025ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80025f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80025f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fc:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002638 <svm+0x168>
 8002600:	eeb0 0a67 	vmov.f32	s0, s15
 8002604:	f001 ffbe 	bl	8004584 <fast_fmaxf>
 8002608:	eef0 7a40 	vmov.f32	s15, s0
 800260c:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800263c <svm+0x16c>
 8002610:	eeb0 0a67 	vmov.f32	s0, s15
 8002614:	f001 ffd2 	bl	80045bc <fast_fminf>
 8002618:	eef0 7a40 	vmov.f32	s15, s0
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	edc3 7a00 	vstr	s15, [r3]

    }
 8002622:	bf00      	nop
 8002624:	3728      	adds	r7, #40	; 0x28
 8002626:	46bd      	mov	sp, r7
 8002628:	ecbd 8b02 	vpop	{d8}
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	3ef0a3d7 	.word	0x3ef0a3d7
 8002634:	3f933333 	.word	0x3f933333
 8002638:	00000000 	.word	0x00000000
 800263c:	3f70a3d7 	.word	0x3f70a3d7

08002640 <zero_current>:

void zero_current(ControllerStruct *controller){
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	61fb      	str	r3, [r7, #28]
    int adc_b_offset = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	61bb      	str	r3, [r7, #24]
    int adc_c_offset = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
    int n = 1000;
 8002654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002658:	60fb      	str	r3, [r7, #12]
    controller->dtc_u = 0.f;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	659a      	str	r2, [r3, #88]	; 0x58
    controller->dtc_v = 0.f;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_w = 0.f;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	661a      	str	r2, [r3, #96]	; 0x60
    set_dtc(controller);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff fce2 	bl	800203c <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8002678:	2300      	movs	r3, #0
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	e014      	b.n	80026a8 <zero_current+0x68>
    	analog_sample(controller);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff fd80 	bl	8002184 <analog_sample>
    	adc_a_offset += controller->adc_a_raw;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	4413      	add	r3, r2
 800268c:	61fb      	str	r3, [r7, #28]
    	adc_b_offset += controller->adc_b_raw;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4413      	add	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
    	adc_c_offset += controller->adc_c_raw;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	4413      	add	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]
    for (int i = 0; i<n; i++){               // Average n samples
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	3301      	adds	r3, #1
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	dbe6      	blt.n	800267e <zero_current+0x3e>
     }
    controller->adc_a_offset = adc_a_offset/n;
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	fb92 f2f3 	sdiv	r2, r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    controller->adc_b_offset = adc_b_offset/n;
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	fb92 f2f3 	sdiv	r2, r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    controller->adc_c_offset = adc_c_offset/n;
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	fb92 f2f3 	sdiv	r2, r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    }
 80026da:	bf00      	nop
 80026dc:	3720      	adds	r7, #32
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a42      	ldr	r2, [pc, #264]	; (80027f8 <init_controller_params+0x114>)
 80026f0:	679a      	str	r2, [r3, #120]	; 0x78
    controller->ki_q = KI_Q;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a40      	ldr	r2, [pc, #256]	; (80027f8 <init_controller_params+0x114>)
 80026f6:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->k_d = K_SCALE*I_BW;
 80026f8:	4b40      	ldr	r3, [pc, #256]	; (80027fc <init_controller_params+0x118>)
 80026fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80026fe:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002800 <init_controller_params+0x11c>
 8002702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    controller->k_q = K_SCALE*I_BW;
 800270c:	4b3b      	ldr	r3, [pc, #236]	; (80027fc <init_controller_params+0x118>)
 800270e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002712:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002800 <init_controller_params+0x11c>
 8002716:	ee67 7a87 	vmul.f32	s15, s15, s14
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002720:	4b36      	ldr	r3, [pc, #216]	; (80027fc <init_controller_params+0x118>)
 8002722:	edd3 7a02 	vldr	s15, [r3, #8]
 8002726:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002804 <init_controller_params+0x120>
 800272a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800272e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002808 <init_controller_params+0x124>
 8002732:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002736:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800273a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800273e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002746:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800274a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->ki_fw = .1f*controller->ki_d;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800275a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800280c <init_controller_params+0x128>
 800275e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
    controller->phase_order = PHASE_ORDER;
 8002768:	4b29      	ldr	r3, [pc, #164]	; (8002810 <init_controller_params+0x12c>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	e036      	b.n	80027e6 <init_controller_params+0x102>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002782:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002814 <init_controller_params+0x130>
 8002786:	ee67 7a87 	vmul.f32	s15, s15, s14
 800278a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002818 <init_controller_params+0x134>
 800278e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002792:	ee16 0a90 	vmov	r0, s13
 8002796:	f7fd feff 	bl	8000598 <__aeabi_f2d>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	ec43 2b10 	vmov	d0, r2, r3
 80027a2:	f00f f8a5 	bl	80118f0 <exp>
 80027a6:	ec51 0b10 	vmov	r0, r1, d0
 80027aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027ae:	4b1b      	ldr	r3, [pc, #108]	; (800281c <init_controller_params+0x138>)
 80027b0:	f7fd ff4a 	bl	8000648 <__aeabi_dmul>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	4b17      	ldr	r3, [pc, #92]	; (8002820 <init_controller_params+0x13c>)
 80027c2:	f7fd fd8b 	bl	80002dc <__adddf3>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4610      	mov	r0, r2
 80027cc:	4619      	mov	r1, r3
 80027ce:	f7fe fa33 	bl	8000c38 <__aeabi_d2f>
 80027d2:	4601      	mov	r1, r0
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	333c      	adds	r3, #60	; 0x3c
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	3301      	adds	r3, #1
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b7f      	cmp	r3, #127	; 0x7f
 80027ea:	ddc5      	ble.n	8002778 <init_controller_params+0x94>
    }
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	3d3851ec 	.word	0x3d3851ec
 80027fc:	20004c74 	.word	0x20004c74
 8002800:	38d1b717 	.word	0x38d1b717
 8002804:	388bcf64 	.word	0x388bcf64
 8002808:	40c90fdb 	.word	0x40c90fdb
 800280c:	3dcccccd 	.word	0x3dcccccd
 8002810:	20004d74 	.word	0x20004d74
 8002814:	bc000000 	.word	0xbc000000
 8002818:	3d03126f 	.word	0x3d03126f
 800281c:	3ff33333 	.word	0x3ff33333
 8002820:	3ff00000 	.word	0x3ff00000

08002824 <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 800282c:	4b36      	ldr	r3, [pc, #216]	; (8002908 <reset_foc+0xe4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002832:	ee07 3a90 	vmov	s15, r3
 8002836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800283a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800283e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002842:	4b31      	ldr	r3, [pc, #196]	; (8002908 <reset_foc+0xe4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800284a:	ee17 2a90 	vmov	r2, s15
 800284e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002850:	4b2d      	ldr	r3, [pc, #180]	; (8002908 <reset_foc+0xe4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	ee07 3a90 	vmov	s15, r3
 800285a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800285e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002862:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002866:	4b28      	ldr	r3, [pc, #160]	; (8002908 <reset_foc+0xe4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800286e:	ee17 2a90 	vmov	r2, s15
 8002872:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002874:	4b24      	ldr	r3, [pc, #144]	; (8002908 <reset_foc+0xe4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	ee07 3a90 	vmov	s15, r3
 800287e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002882:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800288a:	4b1f      	ldr	r3, [pc, #124]	; (8002908 <reset_foc+0xe4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002892:	ee17 2a90 	vmov	r2, s15
 8002896:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    controller->i_q_des = 0;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller->i_d = 0;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    controller->d_int = 0;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    controller->v_q = 0;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	655a      	str	r2, [r3, #84]	; 0x54
    controller->v_d = 0;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	651a      	str	r2, [r3, #80]	; 0x50
    controller->fw_int = 0;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    controller->otw_flag = 0;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

    }
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	2000502c 	.word	0x2000502c

0800290c <commutate>:


}

void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity/GR;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 800292c:	4bd7      	ldr	r3, [pc, #860]	; (8002c8c <commutate+0x380>)
 800292e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	edd3 6a03 	vldr	s13, [r3, #12]
 8002942:	4bd2      	ldr	r3, [pc, #840]	; (8002c8c <commutate+0x380>)
 8002944:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	ed93 7a05 	vldr	s14, [r3, #20]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	edd3 6a06 	vldr	s13, [r3, #24]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	ed93 6a07 	vldr	s12, [r3, #28]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3340      	adds	r3, #64	; 0x40
 8002974:	4619      	mov	r1, r3
 8002976:	4610      	mov	r0, r2
 8002978:	eef0 1a46 	vmov.f32	s3, s12
 800297c:	eeb0 1a66 	vmov.f32	s2, s13
 8002980:	eef0 0a47 	vmov.f32	s1, s14
 8002984:	eeb0 0a67 	vmov.f32	s0, s15
 8002988:	f7ff fd12 	bl	80023b0 <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002992:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8002c90 <commutate+0x384>
 8002996:	ee27 7a87 	vmul.f32	s14, s15, s14
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80029a0:	eddf 6abc 	vldr	s13, [pc, #752]	; 8002c94 <commutate+0x388>
 80029a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80029b8:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002c90 <commutate+0x384>
 80029bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80029c6:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8002c94 <commutate+0x388>
 80029ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80029de:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8002c98 <commutate+0x38c>
 80029e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80029ec:	eddf 6aab 	vldr	s13, [pc, #684]	; 8002c9c <commutate+0x390>
 80029f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a04:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002ca0 <commutate+0x394>
 8002a08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a0c:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002ca4 <commutate+0x398>
 8002a10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a14:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8002ca8 <commutate+0x39c>
 8002a18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 8002a22:	4b9a      	ldr	r3, [pc, #616]	; (8002c8c <commutate+0x380>)
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f103 01a4 	add.w	r1, r3, #164	; 0xa4
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8002a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a42:	4610      	mov	r0, r2
 8002a44:	f001 fe3e 	bl	80046c4 <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002a54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a58:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a6c:	edc7 7a06 	vstr	s15, [r7, #24]


       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8002a82:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002a90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a94:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002aae:	eef0 0a47 	vmov.f32	s1, s14
 8002ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ab6:	f001 fd81 	bl	80045bc <fast_fminf>
 8002aba:	eeb0 7a40 	vmov.f32	s14, s0
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002ac4:	eef1 7a67 	vneg.f32	s15, s15
 8002ac8:	eef0 0a67 	vmov.f32	s1, s15
 8002acc:	eeb0 0a47 	vmov.f32	s0, s14
 8002ad0:	f001 fd58 	bl	8004584 <fast_fmaxf>
 8002ad4:	eef0 7a40 	vmov.f32	s15, s0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002af0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002af4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002af8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002b12:	eef0 0a47 	vmov.f32	s1, s14
 8002b16:	eeb0 0a67 	vmov.f32	s0, s15
 8002b1a:	f001 fd4f 	bl	80045bc <fast_fminf>
 8002b1e:	eeb0 7a40 	vmov.f32	s14, s0
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002b28:	eef1 7a67 	vneg.f32	s15, s15
 8002b2c:	eef0 0a67 	vmov.f32	s1, s15
 8002b30:	eeb0 0a47 	vmov.f32	s0, s14
 8002b34:	f001 fd26 	bl	8004584 <fast_fmaxf>
 8002b38:	eef0 7a40 	vmov.f32	s15, s0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b66:	eeb0 0a67 	vmov.f32	s0, s15
 8002b6a:	f00e ff29 	bl	80119c0 <sqrtf>
 8002b6e:	ed87 0a03 	vstr	s0, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002b78:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002b86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8002baa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bae:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002bcc:	eef0 0a47 	vmov.f32	s1, s14
 8002bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8002bd4:	f001 fcf2 	bl	80045bc <fast_fminf>
 8002bd8:	eeb0 7a40 	vmov.f32	s14, s0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002be2:	eef1 7a67 	vneg.f32	s15, s15
 8002be6:	eef0 0a67 	vmov.f32	s1, s15
 8002bea:	eeb0 0a47 	vmov.f32	s0, s14
 8002bee:	f001 fcc9 	bl	8004584 <fast_fmaxf>
 8002bf2:	eef0 7a40 	vmov.f32	s15, s0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002c08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002c18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c20:	eeb0 0a67 	vmov.f32	s0, s15
 8002c24:	f00e fecc 	bl	80119c0 <sqrtf>
 8002c28:	eef0 7a40 	vmov.f32	s15, s0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002c38:	edd7 0a03 	vldr	s1, [r7, #12]
 8002c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c40:	f001 fcbc 	bl	80045bc <fast_fminf>
 8002c44:	eeb0 7a40 	vmov.f32	s14, s0
 8002c48:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c4c:	eef1 7a67 	vneg.f32	s15, s15
 8002c50:	eef0 0a67 	vmov.f32	s1, s15
 8002c54:	eeb0 0a47 	vmov.f32	s0, s14
 8002c58:	f001 fc94 	bl	8004584 <fast_fmaxf>
 8002c5c:	eef0 7a40 	vmov.f32	s15, s0
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002c78:	eeb0 0a67 	vmov.f32	s0, s15
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	f001 fd21 	bl	80046c4 <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	e011      	b.n	8002cb0 <commutate+0x3a4>
 8002c8c:	20004c74 	.word	0x20004c74
 8002c90:	3f7d70a4 	.word	0x3f7d70a4
 8002c94:	3c23d70a 	.word	0x3c23d70a
 8002c98:	3f666666 	.word	0x3f666666
 8002c9c:	3dcccccd 	.word	0x3dcccccd
 8002ca0:	3f933333 	.word	0x3f933333
 8002ca4:	3f70a3d7 	.word	0x3f70a3d7
 8002ca8:	3f13cd3a 	.word	0x3f13cd3a
 8002cac:	38d1b716 	.word	0x38d1b716
 8002cb0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002cb4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8002cac <commutate+0x3a0>
 8002cb8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	336c      	adds	r3, #108	; 0x6c
 8002cdc:	461a      	mov	r2, r3
 8002cde:	eeb0 1a66 	vmov.f32	s2, s13
 8002ce2:	eef0 0a47 	vmov.f32	s1, s14
 8002ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cea:	f7ff fadd 	bl	80022a8 <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	ed93 6a1b 	vldr	s12, [r3, #108]	; 0x6c
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3360      	adds	r3, #96	; 0x60
 8002d16:	461a      	mov	r2, r3
 8002d18:	eef0 1a46 	vmov.f32	s3, s12
 8002d1c:	eeb0 1a66 	vmov.f32	s2, s13
 8002d20:	eef0 0a47 	vmov.f32	s1, s14
 8002d24:	eeb0 0a67 	vmov.f32	s0, s15
 8002d28:	f7ff fbd2 	bl	80024d0 <svm>
       set_dtc(controller);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff f985 	bl	800203c <set_dtc>

    }
 8002d32:	bf00      	nop
 8002d34:	3720      	adds	r7, #32
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop

08002d3c <torque_control>:
void torque_control(ControllerStruct *controller){
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]

	controller->kp = 1.0f;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002d4a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	controller->kd = 0.04f;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a24      	ldr	r2, [pc, #144]	; (8002de4 <torque_control+0xa8>)
 8002d52:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
//	controller->p_des = 0.0f;
	controller->v_des = 0.0f;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	controller->t_ff = 0.0f;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	edd3 6a32 	vldr	s13, [r3, #200]	; 0xc8
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002d7c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8002d8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	ed93 6a33 	vldr	s12, [r3, #204]	; 0xcc
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002da0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002da4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dac:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = torque_des/(KT*GR);
 8002db0:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <torque_control+0xac>)
 8002db2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002db6:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <torque_control+0xac>)
 8002db8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002dbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dc0:	edd7 6a03 	vldr	s13, [r7, #12]
 8002dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    controller->i_d_des = 0.0f;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	3d23d70a 	.word	0x3d23d70a
 8002de8:	20004c74 	.word	0x20004c74

08002dec <zero_commands>:



void zero_commands(ControllerStruct * controller){
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->kp = 0;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	controller->kd = 0;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	controller->p_des = 0;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	controller->v_des = 0;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	controller->i_q_des = 0;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "gatedrive.h"

 void run_fsm(FSMStruct * fsmstate){
 8002e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */
	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	785a      	ldrb	r2, [r3, #1]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d00d      	beq.n	8002e6c <run_fsm+0x30>
//		 printf("trans %i %i \r\n",fsmstate->state, fsmstate->next_state);
		 fsm_exit_state(fsmstate);		// safely exit the old state
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f923 	bl	800309c <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	78db      	ldrb	r3, [r3, #3]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d006      	beq.n	8002e6c <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	785a      	ldrb	r2, [r3, #1]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f8be 	bl	8002fe8 <fsm_enter_state>
		 }

	 }

	 switch(fsmstate->state){
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b06      	cmp	r3, #6
 8002e72:	f200 80a5 	bhi.w	8002fc0 <run_fsm+0x184>
 8002e76:	a201      	add	r2, pc, #4	; (adr r2, 8002e7c <run_fsm+0x40>)
 8002e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7c:	08002fbf 	.word	0x08002fbf
 8002e80:	08002e99 	.word	0x08002e99
 8002e84:	08002f81 	.word	0x08002f81
 8002e88:	08002fc1 	.word	0x08002fc1
 8002e8c:	08002fbf 	.word	0x08002fbf
 8002e90:	08002fb5 	.word	0x08002fb5
 8002e94:	08002fbf 	.word	0x08002fbf
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 8002e98:	4b4b      	ldr	r3, [pc, #300]	; (8002fc8 <run_fsm+0x18c>)
 8002e9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d108      	bne.n	8002eb4 <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8002ea2:	4b4a      	ldr	r3, [pc, #296]	; (8002fcc <run_fsm+0x190>)
 8002ea4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ea8:	4a47      	ldr	r2, [pc, #284]	; (8002fc8 <run_fsm+0x18c>)
 8002eaa:	4948      	ldr	r1, [pc, #288]	; (8002fcc <run_fsm+0x190>)
 8002eac:	4848      	ldr	r0, [pc, #288]	; (8002fd0 <run_fsm+0x194>)
 8002eae:	f7fe fa8b 	bl	80013c8 <order_phases>
//				HAL_Delay(10);
//				zero_current(&controller);
//				HAL_Delay(100);
			 }

			 break;
 8002eb2:	e085      	b.n	8002fc0 <run_fsm+0x184>
			 else if(!comm_encoder_cal.done_cal){
 8002eb4:	4b44      	ldr	r3, [pc, #272]	; (8002fc8 <run_fsm+0x18c>)
 8002eb6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d108      	bne.n	8002ed0 <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8002ebe:	4b43      	ldr	r3, [pc, #268]	; (8002fcc <run_fsm+0x190>)
 8002ec0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ec4:	4a40      	ldr	r2, [pc, #256]	; (8002fc8 <run_fsm+0x18c>)
 8002ec6:	4941      	ldr	r1, [pc, #260]	; (8002fcc <run_fsm+0x190>)
 8002ec8:	4841      	ldr	r0, [pc, #260]	; (8002fd0 <run_fsm+0x194>)
 8002eca:	f7fe fb95 	bl	80015f8 <calibrate_encoder>
			 break;
 8002ece:	e077      	b.n	8002fc0 <run_fsm+0x184>
				 E_ZERO = comm_encoder_cal.ezero;
 8002ed0:	4b3d      	ldr	r3, [pc, #244]	; (8002fc8 <run_fsm+0x18c>)
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	4a3f      	ldr	r2, [pc, #252]	; (8002fd4 <run_fsm+0x198>)
 8002ed6:	6153      	str	r3, [r2, #20]
				 printf("E_ZERO: %d  PP: %.3f %f\r\n", E_ZERO, PPAIRS, TWO_PI_F*fmodf((PPAIRS*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8002ed8:	4b3e      	ldr	r3, [pc, #248]	; (8002fd4 <run_fsm+0x198>)
 8002eda:	695e      	ldr	r6, [r3, #20]
 8002edc:	4b3e      	ldr	r3, [pc, #248]	; (8002fd8 <run_fsm+0x19c>)
 8002ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fd fb59 	bl	8000598 <__aeabi_f2d>
 8002ee6:	4604      	mov	r4, r0
 8002ee8:	460d      	mov	r5, r1
 8002eea:	4b3b      	ldr	r3, [pc, #236]	; (8002fd8 <run_fsm+0x19c>)
 8002eec:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002ef0:	4b38      	ldr	r3, [pc, #224]	; (8002fd4 <run_fsm+0x198>)
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	425b      	negs	r3, r3
 8002ef6:	ee07 3a90 	vmov	s15, r3
 8002efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f02:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002fdc <run_fsm+0x1a0>
 8002f06:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f0a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002f0e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f12:	f00e fd35 	bl	8011980 <fmodf>
 8002f16:	eef0 7a40 	vmov.f32	s15, s0
 8002f1a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002fe0 <run_fsm+0x1a4>
 8002f1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f22:	ee17 0a90 	vmov	r0, s15
 8002f26:	f7fd fb37 	bl	8000598 <__aeabi_f2d>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	e9cd 2300 	strd	r2, r3, [sp]
 8002f32:	4622      	mov	r2, r4
 8002f34:	462b      	mov	r3, r5
 8002f36:	4631      	mov	r1, r6
 8002f38:	482a      	ldr	r0, [pc, #168]	; (8002fe4 <run_fsm+0x1a8>)
 8002f3a:	f00a ff93 	bl	800de64 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 8002f3e:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <run_fsm+0x194>)
 8002f40:	4a21      	ldr	r2, [pc, #132]	; (8002fc8 <run_fsm+0x18c>)
 8002f42:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002f46:	33dc      	adds	r3, #220	; 0xdc
 8002f48:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 8002f4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f50:	4618      	mov	r0, r3
 8002f52:	f00a fb07 	bl	800d564 <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 8002f56:	4b1f      	ldr	r3, [pc, #124]	; (8002fd4 <run_fsm+0x198>)
 8002f58:	4a1b      	ldr	r2, [pc, #108]	; (8002fc8 <run_fsm+0x18c>)
 8002f5a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002f5e:	331c      	adds	r3, #28
 8002f60:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 8002f64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f00a fafb 	bl	800d564 <memcpy>
				 store_eeprom_regs();
 8002f6e:	f002 fb1b 	bl	80055a8 <store_eeprom_regs>
				 load_eeprom_regs();
 8002f72:	f002 fb27 	bl	80055c4 <load_eeprom_regs>
				 update_fsm(fsmstate, 27);
 8002f76:	211b      	movs	r1, #27
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f8d5 	bl	8003128 <update_fsm>
			 break;
 8002f7e:	e01f      	b.n	8002fc0 <run_fsm+0x184>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <run_fsm+0x198>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	dd06      	ble.n	8002f96 <run_fsm+0x15a>
 8002f88:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <run_fsm+0x190>)
 8002f8a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8002f8e:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <run_fsm+0x198>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	dc02      	bgt.n	8002f9c <run_fsm+0x160>
//				 zero_commands(&controller);
			 }
			 /* Otherwise, commutate */
			 else{
				 torque_control(&controller);
 8002f96:	480d      	ldr	r0, [pc, #52]	; (8002fcc <run_fsm+0x190>)
 8002f98:	f7ff fed0 	bl	8002d3c <torque_control>
//				 field_weaken(&controller);
			 }
			 commutate(&controller, &comm_encoder);
 8002f9c:	490c      	ldr	r1, [pc, #48]	; (8002fd0 <run_fsm+0x194>)
 8002f9e:	480b      	ldr	r0, [pc, #44]	; (8002fcc <run_fsm+0x190>)
 8002fa0:	f7ff fcb4 	bl	800290c <commutate>
			 controller.timeout ++;
 8002fa4:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <run_fsm+0x190>)
 8002fa6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002faa:	3301      	adds	r3, #1
 8002fac:	4a07      	ldr	r2, [pc, #28]	; (8002fcc <run_fsm+0x190>)
 8002fae:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
			 break;
 8002fb2:	e005      	b.n	8002fc0 <run_fsm+0x184>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 8002fb4:	2164      	movs	r1, #100	; 0x64
 8002fb6:	4806      	ldr	r0, [pc, #24]	; (8002fd0 <run_fsm+0x194>)
 8002fb8:	f001 fee8 	bl	8004d8c <ps_print>
			 break;
 8002fbc:	e000      	b.n	8002fc0 <run_fsm+0x184>
			 break;
 8002fbe:	bf00      	nop

		 case INIT_TEMP_MODE:
			 break;
	 }

 }
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fc8:	2000095c 	.word	0x2000095c
 8002fcc:	20000468 	.word	0x20000468
 8002fd0:	20000778 	.word	0x20000778
 8002fd4:	20004d74 	.word	0x20004d74
 8002fd8:	20004c74 	.word	0x20004c74
 8002fdc:	45800000 	.word	0x45800000
 8002fe0:	40c90fdb 	.word	0x40c90fdb
 8002fe4:	08011f68 	.word	0x08011f68

08002fe8 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b05      	cmp	r3, #5
 8002ff6:	d841      	bhi.n	800307c <fsm_enter_state+0x94>
 8002ff8:	a201      	add	r2, pc, #4	; (adr r2, 8003000 <fsm_enter_state+0x18>)
 8002ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffe:	bf00      	nop
 8003000:	08003019 	.word	0x08003019
 8003004:	0800303d 	.word	0x0800303d
 8003008:	08003025 	.word	0x08003025
 800300c:	0800307d 	.word	0x0800307d
 8003010:	0800301f 	.word	0x0800301f
 8003014:	0800307b 	.word	0x0800307b
				case MENU_MODE:
//				printf("Entering Main Menu\r\n");
				enter_menu_state();
 8003018:	f000 f950 	bl	80032bc <enter_menu_state>
				break;
 800301c:	e02e      	b.n	800307c <fsm_enter_state+0x94>
			case SETUP_MODE:
//				printf("Entering Setup\r\n");
				enter_setup_state();
 800301e:	f000 f979 	bl	8003314 <enter_setup_state>
				break;
 8003022:	e02b      	b.n	800307c <fsm_enter_state+0x94>
			case ENCODER_MODE:
//				printf("Entering Encoder Mode\r\n");
				break;
			case MOTOR_MODE:
//				printf("Entering Motor Mode\r\n");
				HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 8003024:	2201      	movs	r2, #1
 8003026:	2140      	movs	r1, #64	; 0x40
 8003028:	4816      	ldr	r0, [pc, #88]	; (8003084 <fsm_enter_state+0x9c>)
 800302a:	f005 f953 	bl	80082d4 <HAL_GPIO_WritePin>
				reset_foc(&controller);
 800302e:	4816      	ldr	r0, [pc, #88]	; (8003088 <fsm_enter_state+0xa0>)
 8003030:	f7ff fbf8 	bl	8002824 <reset_foc>
//				drv_enable_gd(drv);
				enable_gd(&controller);
 8003034:	4814      	ldr	r0, [pc, #80]	; (8003088 <fsm_enter_state+0xa0>)
 8003036:	f000 fda1 	bl	8003b7c <enable_gd>

				break;
 800303a:	e01f      	b.n	800307c <fsm_enter_state+0x94>
			case CALIBRATION_MODE:
//				printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 800303c:	4b13      	ldr	r3, [pc, #76]	; (800308c <fsm_enter_state+0xa4>)
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 8003044:	4b11      	ldr	r3, [pc, #68]	; (800308c <fsm_enter_state+0xa4>)
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 800304c:	4b0f      	ldr	r3, [pc, #60]	; (800308c <fsm_enter_state+0xa4>)
 800304e:	2200      	movs	r2, #0
 8003050:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 8003052:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <fsm_enter_state+0xa8>)
 8003054:	2200      	movs	r2, #0
 8003056:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 800305a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800305e:	2100      	movs	r1, #0
 8003060:	480c      	ldr	r0, [pc, #48]	; (8003094 <fsm_enter_state+0xac>)
 8003062:	f00a fa8d 	bl	800d580 <memset>
				PHASE_ORDER = 0;
 8003066:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <fsm_enter_state+0xb0>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
//			   disable_gd(&controller);
//			   HAL_Delay(10);
			   zero_current(&controller);
 800306c:	4806      	ldr	r0, [pc, #24]	; (8003088 <fsm_enter_state+0xa0>)
 800306e:	f7ff fae7 	bl	8002640 <zero_current>
//			   HAL_Delay(100);

//				drv_enable_gd(drv);
				enable_gd(&controller);
 8003072:	4805      	ldr	r0, [pc, #20]	; (8003088 <fsm_enter_state+0xa0>)
 8003074:	f000 fd82 	bl	8003b7c <enable_gd>
				break;
 8003078:	e000      	b.n	800307c <fsm_enter_state+0x94>
				break;
 800307a:	bf00      	nop

		}
 }
 800307c:	bf00      	nop
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	48000800 	.word	0x48000800
 8003088:	20000468 	.word	0x20000468
 800308c:	2000095c 	.word	0x2000095c
 8003090:	20000778 	.word	0x20000778
 8003094:	20000854 	.word	0x20000854
 8003098:	20004d74 	.word	0x20004d74

0800309c <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b05      	cmp	r3, #5
 80030aa:	d834      	bhi.n	8003116 <fsm_exit_state+0x7a>
 80030ac:	a201      	add	r2, pc, #4	; (adr r2, 80030b4 <fsm_exit_state+0x18>)
 80030ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b2:	bf00      	nop
 80030b4:	080030cd 	.word	0x080030cd
 80030b8:	08003109 	.word	0x08003109
 80030bc:	080030e5 	.word	0x080030e5
 80030c0:	08003117 	.word	0x08003117
 80030c4:	080030d5 	.word	0x080030d5
 80030c8:	080030dd 	.word	0x080030dd
			case MENU_MODE:
//				printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	70da      	strb	r2, [r3, #3]
				break;
 80030d2:	e020      	b.n	8003116 <fsm_exit_state+0x7a>
			case SETUP_MODE:
//				printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	70da      	strb	r2, [r3, #3]
				break;
 80030da:	e01c      	b.n	8003116 <fsm_exit_state+0x7a>
			case ENCODER_MODE:
//				printf("Leaving Encoder Mode\r\n");
				fsmstate->ready = 1;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	70da      	strb	r2, [r3, #3]
				break;
 80030e2:	e018      	b.n	8003116 <fsm_exit_state+0x7a>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
//				if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
					fsmstate->ready = 1;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	70da      	strb	r2, [r3, #3]
//					drv_disable_gd(drv);
					reset_foc(&controller);
 80030ea:	480d      	ldr	r0, [pc, #52]	; (8003120 <fsm_exit_state+0x84>)
 80030ec:	f7ff fb9a 	bl	8002824 <reset_foc>
					disable_gd(&controller);
 80030f0:	480b      	ldr	r0, [pc, #44]	; (8003120 <fsm_exit_state+0x84>)
 80030f2:	f000 fd69 	bl	8003bc8 <disable_gd>
					HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 80030f6:	2200      	movs	r2, #0
 80030f8:	2140      	movs	r1, #64	; 0x40
 80030fa:	480a      	ldr	r0, [pc, #40]	; (8003124 <fsm_exit_state+0x88>)
 80030fc:	f005 f8ea 	bl	80082d4 <HAL_GPIO_WritePin>
//				}
				zero_commands(&controller);		// Set commands to zero
 8003100:	4807      	ldr	r0, [pc, #28]	; (8003120 <fsm_exit_state+0x84>)
 8003102:	f7ff fe73 	bl	8002dec <zero_commands>
//				printf("Exiting Motor Mode\r\n");

				break;
 8003106:	e006      	b.n	8003116 <fsm_exit_state+0x7a>
			case CALIBRATION_MODE:
//				printf("Exiting Calibration Mode\r\n");
//				drv_disable_gd(drv);
				disable_gd(&controller);
 8003108:	4805      	ldr	r0, [pc, #20]	; (8003120 <fsm_exit_state+0x84>)
 800310a:	f000 fd5d 	bl	8003bc8 <disable_gd>
				//free(error_array);
				//free(lut_array);
				fsmstate->ready = 1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	70da      	strb	r2, [r3, #3]
				break;
 8003114:	bf00      	nop
		}

 }
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000468 	.word	0x20000468
 8003124:	48000800 	.word	0x48000800

08003128 <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
//	 printf("%i %i %i\r\n",fsmstate->state, fsm_input, fsmstate->next_state);
	if(fsm_input == MENU_CMD){	// escape to exit do rest mode
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	2b1b      	cmp	r3, #27
 8003138:	d106      	bne.n	8003148 <update_fsm+0x20>
		fsmstate->next_state = MENU_MODE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	70da      	strb	r2, [r3, #3]
		return;
 8003146:	e0ad      	b.n	80032a4 <update_fsm+0x17c>
	}
	switch(fsmstate->state){
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b05      	cmp	r3, #5
 800314e:	f200 80a9 	bhi.w	80032a4 <update_fsm+0x17c>
 8003152:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <update_fsm+0x30>)
 8003154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003158:	08003171 	.word	0x08003171
 800315c:	080032a5 	.word	0x080032a5
 8003160:	080032a5 	.word	0x080032a5
 8003164:	080032a5 	.word	0x080032a5
 8003168:	08003269 	.word	0x08003269
 800316c:	080032a5 	.word	0x080032a5
		case MENU_MODE:
			switch (fsm_input){
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	3b63      	subs	r3, #99	; 0x63
 8003174:	2b17      	cmp	r3, #23
 8003176:	f200 8094 	bhi.w	80032a2 <update_fsm+0x17a>
 800317a:	a201      	add	r2, pc, #4	; (adr r2, 8003180 <update_fsm+0x58>)
 800317c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003180:	080031e1 	.word	0x080031e1
 8003184:	080032a3 	.word	0x080032a3
 8003188:	080031fd 	.word	0x080031fd
 800318c:	080032a3 	.word	0x080032a3
 8003190:	080032a3 	.word	0x080032a3
 8003194:	080032a3 	.word	0x080032a3
 8003198:	080032a3 	.word	0x080032a3
 800319c:	080032a3 	.word	0x080032a3
 80031a0:	080032a3 	.word	0x080032a3
 80031a4:	080032a3 	.word	0x080032a3
 80031a8:	080031ef 	.word	0x080031ef
 80031ac:	080032a3 	.word	0x080032a3
 80031b0:	080032a3 	.word	0x080032a3
 80031b4:	080032a3 	.word	0x080032a3
 80031b8:	080032a3 	.word	0x080032a3
 80031bc:	080032a3 	.word	0x080032a3
 80031c0:	0800320b 	.word	0x0800320b
 80031c4:	080032a3 	.word	0x080032a3
 80031c8:	080032a3 	.word	0x080032a3
 80031cc:	080032a3 	.word	0x080032a3
 80031d0:	080032a3 	.word	0x080032a3
 80031d4:	080032a3 	.word	0x080032a3
 80031d8:	080032a3 	.word	0x080032a3
 80031dc:	08003219 	.word	0x08003219
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	70da      	strb	r2, [r3, #3]
					break;
 80031ec:	e03b      	b.n	8003266 <update_fsm+0x13e>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2202      	movs	r2, #2
 80031f2:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	70da      	strb	r2, [r3, #3]
					break;
 80031fa:	e034      	b.n	8003266 <update_fsm+0x13e>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2205      	movs	r2, #5
 8003200:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	70da      	strb	r2, [r3, #3]
					break;
 8003208:	e02d      	b.n	8003266 <update_fsm+0x13e>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2204      	movs	r2, #4
 800320e:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	70da      	strb	r2, [r3, #3]
					break;
 8003216:	e026      	b.n	8003266 <update_fsm+0x13e>
				case ZERO_CMD:
					comm_encoder.m_zero = 0;
 8003218:	4b24      	ldr	r3, [pc, #144]	; (80032ac <update_fsm+0x184>)
 800321a:	2200      	movs	r2, #0
 800321c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
					comm_encoder.mech_zero = 0.0f;
 8003220:	4b22      	ldr	r3, [pc, #136]	; (80032ac <update_fsm+0x184>)
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
					ps_sample(&comm_encoder, DT);
 800322a:	ed9f 0a21 	vldr	s0, [pc, #132]	; 80032b0 <update_fsm+0x188>
 800322e:	481f      	ldr	r0, [pc, #124]	; (80032ac <update_fsm+0x184>)
 8003230:	f001 fc3c 	bl	8004aac <ps_sample>
//					int zero_count = comm_encoder.count;
//					M_ZERO = zero_count;
					MECH_ZERO = comm_encoder.angle_multiturn[0];
 8003234:	4b1d      	ldr	r3, [pc, #116]	; (80032ac <update_fsm+0x184>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	4a1e      	ldr	r2, [pc, #120]	; (80032b4 <update_fsm+0x18c>)
 800323a:	65d3      	str	r3, [r2, #92]	; 0x5c
					comm_encoder.mech_zero = MECH_ZERO;
 800323c:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <update_fsm+0x18c>)
 800323e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003240:	4a1a      	ldr	r2, [pc, #104]	; (80032ac <update_fsm+0x184>)
 8003242:	f8c2 31e0 	str.w	r3, [r2, #480]	; 0x1e0
					store_eeprom_regs();
 8003246:	f002 f9af 	bl	80055a8 <store_eeprom_regs>
					load_eeprom_regs();
 800324a:	f002 f9bb 	bl	80055c4 <load_eeprom_regs>
					printf("\n\r  Saved new zero position:  %.3f\n\r\n\r", comm_encoder.mech_zero);
 800324e:	4b17      	ldr	r3, [pc, #92]	; (80032ac <update_fsm+0x184>)
 8003250:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8003254:	4618      	mov	r0, r3
 8003256:	f7fd f99f 	bl	8000598 <__aeabi_f2d>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4816      	ldr	r0, [pc, #88]	; (80032b8 <update_fsm+0x190>)
 8003260:	f00a fe00 	bl	800de64 <iprintf>
					break;
 8003264:	bf00      	nop
				}
			break;
 8003266:	e01c      	b.n	80032a2 <update_fsm+0x17a>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	2b0d      	cmp	r3, #13
 800326c:	d103      	bne.n	8003276 <update_fsm+0x14e>
				process_user_input(fsmstate);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f9c4 	bl	80035fc <process_user_input>
				break;
 8003274:	e016      	b.n	80032a4 <update_fsm+0x17c>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	7b1b      	ldrb	r3, [r3, #12]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <update_fsm+0x15e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	735a      	strb	r2, [r3, #13]
 8003284:	e006      	b.n	8003294 <update_fsm+0x16c>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	7b1b      	ldrb	r3, [r3, #12]
 800328a:	3b01      	subs	r3, #1
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	4413      	add	r3, r2
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	711a      	strb	r2, [r3, #4]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	7b1b      	ldrb	r3, [r3, #12]
 8003298:	3301      	adds	r3, #1
 800329a:	b2da      	uxtb	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	731a      	strb	r2, [r3, #12]
			/* If enter is typed, process user input */

			break;
 80032a0:	e000      	b.n	80032a4 <update_fsm+0x17c>
			break;
 80032a2:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000778 	.word	0x20000778
 80032b0:	388bcf64 	.word	0x388bcf64
 80032b4:	20004c74 	.word	0x20004c74
 80032b8:	08011f84 	.word	0x08011f84

080032bc <enter_menu_state>:


 void enter_menu_state(void){
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 80032c0:	480c      	ldr	r0, [pc, #48]	; (80032f4 <enter_menu_state+0x38>)
 80032c2:	f00a fdcf 	bl	800de64 <iprintf>
	    printf(" Commands:\n\r");
 80032c6:	480c      	ldr	r0, [pc, #48]	; (80032f8 <enter_menu_state+0x3c>)
 80032c8:	f00a fdcc 	bl	800de64 <iprintf>
	    printf(" m - Motor Mode\n\r");
 80032cc:	480b      	ldr	r0, [pc, #44]	; (80032fc <enter_menu_state+0x40>)
 80032ce:	f00a fdc9 	bl	800de64 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 80032d2:	480b      	ldr	r0, [pc, #44]	; (8003300 <enter_menu_state+0x44>)
 80032d4:	f00a fdc6 	bl	800de64 <iprintf>
	    printf(" s - Setup\n\r");
 80032d8:	480a      	ldr	r0, [pc, #40]	; (8003304 <enter_menu_state+0x48>)
 80032da:	f00a fdc3 	bl	800de64 <iprintf>
	    printf(" e - Display Encoder\n\r");
 80032de:	480a      	ldr	r0, [pc, #40]	; (8003308 <enter_menu_state+0x4c>)
 80032e0:	f00a fdc0 	bl	800de64 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 80032e4:	4809      	ldr	r0, [pc, #36]	; (800330c <enter_menu_state+0x50>)
 80032e6:	f00a fdbd 	bl	800de64 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 80032ea:	4809      	ldr	r0, [pc, #36]	; (8003310 <enter_menu_state+0x54>)
 80032ec:	f00a fdba 	bl	800de64 <iprintf>

	    //gpio.led->write(0);
 }
 80032f0:	bf00      	nop
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	08011fac 	.word	0x08011fac
 80032f8:	08011fb4 	.word	0x08011fb4
 80032fc:	08011fc4 	.word	0x08011fc4
 8003300:	08011fd8 	.word	0x08011fd8
 8003304:	08011ff4 	.word	0x08011ff4
 8003308:	08012004 	.word	0x08012004
 800330c:	0801201c 	.word	0x0801201c
 8003310:	08012038 	.word	0x08012038

08003314 <enter_setup_state>:

 void enter_setup_state(void){
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 800331a:	487d      	ldr	r0, [pc, #500]	; (8003510 <enter_setup_state+0x1fc>)
 800331c:	f00a fda2 	bl	800de64 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8003320:	4b7c      	ldr	r3, [pc, #496]	; (8003514 <enter_setup_state+0x200>)
 8003322:	9301      	str	r3, [sp, #4]
 8003324:	4b7c      	ldr	r3, [pc, #496]	; (8003518 <enter_setup_state+0x204>)
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	4b7c      	ldr	r3, [pc, #496]	; (800351c <enter_setup_state+0x208>)
 800332a:	4a7d      	ldr	r2, [pc, #500]	; (8003520 <enter_setup_state+0x20c>)
 800332c:	497d      	ldr	r1, [pc, #500]	; (8003524 <enter_setup_state+0x210>)
 800332e:	487e      	ldr	r0, [pc, #504]	; (8003528 <enter_setup_state+0x214>)
 8003330:	f00a fd98 	bl	800de64 <iprintf>
	    printf("\r\n Motor:\r\n");
 8003334:	487d      	ldr	r0, [pc, #500]	; (800352c <enter_setup_state+0x218>)
 8003336:	f00a fe1b 	bl	800df70 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 800333a:	4b7d      	ldr	r3, [pc, #500]	; (8003530 <enter_setup_state+0x21c>)
 800333c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333e:	4618      	mov	r0, r3
 8003340:	f7fd f92a 	bl	8000598 <__aeabi_f2d>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800334c:	4b79      	ldr	r3, [pc, #484]	; (8003534 <enter_setup_state+0x220>)
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	4b79      	ldr	r3, [pc, #484]	; (8003538 <enter_setup_state+0x224>)
 8003352:	4a7a      	ldr	r2, [pc, #488]	; (800353c <enter_setup_state+0x228>)
 8003354:	497a      	ldr	r1, [pc, #488]	; (8003540 <enter_setup_state+0x22c>)
 8003356:	487b      	ldr	r0, [pc, #492]	; (8003544 <enter_setup_state+0x230>)
 8003358:	f00a fd84 	bl	800de64 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 800335c:	4b74      	ldr	r3, [pc, #464]	; (8003530 <enter_setup_state+0x21c>)
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	4618      	mov	r0, r3
 8003362:	f7fd f919 	bl	8000598 <__aeabi_f2d>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800336e:	4b71      	ldr	r3, [pc, #452]	; (8003534 <enter_setup_state+0x220>)
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	4b71      	ldr	r3, [pc, #452]	; (8003538 <enter_setup_state+0x224>)
 8003374:	4a74      	ldr	r2, [pc, #464]	; (8003548 <enter_setup_state+0x234>)
 8003376:	4975      	ldr	r1, [pc, #468]	; (800354c <enter_setup_state+0x238>)
 8003378:	4875      	ldr	r0, [pc, #468]	; (8003550 <enter_setup_state+0x23c>)
 800337a:	f00a fd73 	bl	800de64 <iprintf>
	    printf("\r\n Control:\r\n");
 800337e:	4875      	ldr	r0, [pc, #468]	; (8003554 <enter_setup_state+0x240>)
 8003380:	f00a fdf6 	bl	800df70 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8003384:	4b6a      	ldr	r3, [pc, #424]	; (8003530 <enter_setup_state+0x21c>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	4618      	mov	r0, r3
 800338a:	f7fd f905 	bl	8000598 <__aeabi_f2d>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003396:	4b70      	ldr	r3, [pc, #448]	; (8003558 <enter_setup_state+0x244>)
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	4b70      	ldr	r3, [pc, #448]	; (800355c <enter_setup_state+0x248>)
 800339c:	4a70      	ldr	r2, [pc, #448]	; (8003560 <enter_setup_state+0x24c>)
 800339e:	4971      	ldr	r1, [pc, #452]	; (8003564 <enter_setup_state+0x250>)
 80033a0:	4871      	ldr	r0, [pc, #452]	; (8003568 <enter_setup_state+0x254>)
 80033a2:	f00a fd5f 	bl	800de64 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "60.0", I_MAX);
 80033a6:	4b62      	ldr	r3, [pc, #392]	; (8003530 <enter_setup_state+0x21c>)
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd f8f4 	bl	8000598 <__aeabi_f2d>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80033b8:	4b6c      	ldr	r3, [pc, #432]	; (800356c <enter_setup_state+0x258>)
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	4b6c      	ldr	r3, [pc, #432]	; (8003570 <enter_setup_state+0x25c>)
 80033be:	4a6d      	ldr	r2, [pc, #436]	; (8003574 <enter_setup_state+0x260>)
 80033c0:	496d      	ldr	r1, [pc, #436]	; (8003578 <enter_setup_state+0x264>)
 80033c2:	4869      	ldr	r0, [pc, #420]	; (8003568 <enter_setup_state+0x254>)
 80033c4:	f00a fd4e 	bl	800de64 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 80033c8:	4b59      	ldr	r3, [pc, #356]	; (8003530 <enter_setup_state+0x21c>)
 80033ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd f8e3 	bl	8000598 <__aeabi_f2d>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80033da:	4b56      	ldr	r3, [pc, #344]	; (8003534 <enter_setup_state+0x220>)
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	4b55      	ldr	r3, [pc, #340]	; (8003534 <enter_setup_state+0x220>)
 80033e0:	4a66      	ldr	r2, [pc, #408]	; (800357c <enter_setup_state+0x268>)
 80033e2:	4967      	ldr	r1, [pc, #412]	; (8003580 <enter_setup_state+0x26c>)
 80033e4:	4860      	ldr	r0, [pc, #384]	; (8003568 <enter_setup_state+0x254>)
 80033e6:	f00a fd3d 	bl	800de64 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 80033ea:	4b51      	ldr	r3, [pc, #324]	; (8003530 <enter_setup_state+0x21c>)
 80033ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd f8d2 	bl	8000598 <__aeabi_f2d>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80033fc:	4b4d      	ldr	r3, [pc, #308]	; (8003534 <enter_setup_state+0x220>)
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	4b4c      	ldr	r3, [pc, #304]	; (8003534 <enter_setup_state+0x220>)
 8003402:	4a60      	ldr	r2, [pc, #384]	; (8003584 <enter_setup_state+0x270>)
 8003404:	4960      	ldr	r1, [pc, #384]	; (8003588 <enter_setup_state+0x274>)
 8003406:	4858      	ldr	r0, [pc, #352]	; (8003568 <enter_setup_state+0x254>)
 8003408:	f00a fd2c 	bl	800de64 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 800340c:	4b48      	ldr	r3, [pc, #288]	; (8003530 <enter_setup_state+0x21c>)
 800340e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003410:	4618      	mov	r0, r3
 8003412:	f7fd f8c1 	bl	8000598 <__aeabi_f2d>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800341e:	4b5b      	ldr	r3, [pc, #364]	; (800358c <enter_setup_state+0x278>)
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	4b53      	ldr	r3, [pc, #332]	; (8003570 <enter_setup_state+0x25c>)
 8003424:	4a5a      	ldr	r2, [pc, #360]	; (8003590 <enter_setup_state+0x27c>)
 8003426:	495b      	ldr	r1, [pc, #364]	; (8003594 <enter_setup_state+0x280>)
 8003428:	484f      	ldr	r0, [pc, #316]	; (8003568 <enter_setup_state+0x254>)
 800342a:	f00a fd1b 	bl	800de64 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 800342e:	4b40      	ldr	r3, [pc, #256]	; (8003530 <enter_setup_state+0x21c>)
 8003430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003432:	4618      	mov	r0, r3
 8003434:	f7fd f8b0 	bl	8000598 <__aeabi_f2d>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003440:	4b55      	ldr	r3, [pc, #340]	; (8003598 <enter_setup_state+0x284>)
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	4b4a      	ldr	r3, [pc, #296]	; (8003570 <enter_setup_state+0x25c>)
 8003446:	4a55      	ldr	r2, [pc, #340]	; (800359c <enter_setup_state+0x288>)
 8003448:	4955      	ldr	r1, [pc, #340]	; (80035a0 <enter_setup_state+0x28c>)
 800344a:	4847      	ldr	r0, [pc, #284]	; (8003568 <enter_setup_state+0x254>)
 800344c:	f00a fd0a 	bl	800de64 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 8003450:	4b37      	ldr	r3, [pc, #220]	; (8003530 <enter_setup_state+0x21c>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd f89f 	bl	8000598 <__aeabi_f2d>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003462:	4b50      	ldr	r3, [pc, #320]	; (80035a4 <enter_setup_state+0x290>)
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	4b42      	ldr	r3, [pc, #264]	; (8003570 <enter_setup_state+0x25c>)
 8003468:	4a4f      	ldr	r2, [pc, #316]	; (80035a8 <enter_setup_state+0x294>)
 800346a:	4950      	ldr	r1, [pc, #320]	; (80035ac <enter_setup_state+0x298>)
 800346c:	483e      	ldr	r0, [pc, #248]	; (8003568 <enter_setup_state+0x254>)
 800346e:	f00a fcf9 	bl	800de64 <iprintf>
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
//	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 8003472:	4b2f      	ldr	r3, [pc, #188]	; (8003530 <enter_setup_state+0x21c>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd f88e 	bl	8000598 <__aeabi_f2d>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003484:	4b4a      	ldr	r3, [pc, #296]	; (80035b0 <enter_setup_state+0x29c>)
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	4b39      	ldr	r3, [pc, #228]	; (8003570 <enter_setup_state+0x25c>)
 800348a:	4a4a      	ldr	r2, [pc, #296]	; (80035b4 <enter_setup_state+0x2a0>)
 800348c:	494a      	ldr	r1, [pc, #296]	; (80035b8 <enter_setup_state+0x2a4>)
 800348e:	4836      	ldr	r0, [pc, #216]	; (8003568 <enter_setup_state+0x254>)
 8003490:	f00a fce8 	bl	800de64 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "o", "Max Torque Setpoint (N-m)", "0.0", "-", T_MAX);
 8003494:	4b26      	ldr	r3, [pc, #152]	; (8003530 <enter_setup_state+0x21c>)
 8003496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003498:	4618      	mov	r0, r3
 800349a:	f7fd f87d 	bl	8000598 <__aeabi_f2d>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80034a6:	4b23      	ldr	r3, [pc, #140]	; (8003534 <enter_setup_state+0x220>)
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	4b31      	ldr	r3, [pc, #196]	; (8003570 <enter_setup_state+0x25c>)
 80034ac:	4a43      	ldr	r2, [pc, #268]	; (80035bc <enter_setup_state+0x2a8>)
 80034ae:	4944      	ldr	r1, [pc, #272]	; (80035c0 <enter_setup_state+0x2ac>)
 80034b0:	482d      	ldr	r0, [pc, #180]	; (8003568 <enter_setup_state+0x254>)
 80034b2:	f00a fcd7 	bl	800de64 <iprintf>
	    printf("\r\n CAN:\r\n");
 80034b6:	4843      	ldr	r0, [pc, #268]	; (80035c4 <enter_setup_state+0x2b0>)
 80034b8:	f00a fd5a 	bl	800df70 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 80034bc:	4b42      	ldr	r3, [pc, #264]	; (80035c8 <enter_setup_state+0x2b4>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	4b42      	ldr	r3, [pc, #264]	; (80035cc <enter_setup_state+0x2b8>)
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	4b1c      	ldr	r3, [pc, #112]	; (8003538 <enter_setup_state+0x224>)
 80034c8:	4a41      	ldr	r2, [pc, #260]	; (80035d0 <enter_setup_state+0x2bc>)
 80034ca:	4942      	ldr	r1, [pc, #264]	; (80035d4 <enter_setup_state+0x2c0>)
 80034cc:	4842      	ldr	r0, [pc, #264]	; (80035d8 <enter_setup_state+0x2c4>)
 80034ce:	f00a fcc9 	bl	800de64 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN Master ID", "0", "127", CAN_MASTER);
 80034d2:	4b3d      	ldr	r3, [pc, #244]	; (80035c8 <enter_setup_state+0x2b4>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	9301      	str	r3, [sp, #4]
 80034d8:	4b3c      	ldr	r3, [pc, #240]	; (80035cc <enter_setup_state+0x2b8>)
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	4b16      	ldr	r3, [pc, #88]	; (8003538 <enter_setup_state+0x224>)
 80034de:	4a3f      	ldr	r2, [pc, #252]	; (80035dc <enter_setup_state+0x2c8>)
 80034e0:	493f      	ldr	r1, [pc, #252]	; (80035e0 <enter_setup_state+0x2cc>)
 80034e2:	483d      	ldr	r0, [pc, #244]	; (80035d8 <enter_setup_state+0x2c4>)
 80034e4:	f00a fcbe 	bl	800de64 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 80034e8:	4b37      	ldr	r3, [pc, #220]	; (80035c8 <enter_setup_state+0x2b4>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	4b3d      	ldr	r3, [pc, #244]	; (80035e4 <enter_setup_state+0x2d0>)
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	4b11      	ldr	r3, [pc, #68]	; (8003538 <enter_setup_state+0x224>)
 80034f4:	4a3c      	ldr	r2, [pc, #240]	; (80035e8 <enter_setup_state+0x2d4>)
 80034f6:	493d      	ldr	r1, [pc, #244]	; (80035ec <enter_setup_state+0x2d8>)
 80034f8:	483d      	ldr	r0, [pc, #244]	; (80035f0 <enter_setup_state+0x2dc>)
 80034fa:	f00a fcb3 	bl	800de64 <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 80034fe:	483d      	ldr	r0, [pc, #244]	; (80035f4 <enter_setup_state+0x2e0>)
 8003500:	f00a fcb0 	bl	800de64 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8003504:	483c      	ldr	r0, [pc, #240]	; (80035f8 <enter_setup_state+0x2e4>)
 8003506:	f00a fcad 	bl	800de64 <iprintf>
 }
 800350a:	bf00      	nop
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	08012050 	.word	0x08012050
 8003514:	080120a4 	.word	0x080120a4
 8003518:	080120b4 	.word	0x080120b4
 800351c:	0801206c 	.word	0x0801206c
 8003520:	08012070 	.word	0x08012070
 8003524:	0801207c 	.word	0x0801207c
 8003528:	08012084 	.word	0x08012084
 800352c:	080120b8 	.word	0x080120b8
 8003530:	20004c74 	.word	0x20004c74
 8003534:	080120f8 	.word	0x080120f8
 8003538:	080120c4 	.word	0x080120c4
 800353c:	080120c8 	.word	0x080120c8
 8003540:	080120d4 	.word	0x080120d4
 8003544:	080120d8 	.word	0x080120d8
 8003548:	080120fc 	.word	0x080120fc
 800354c:	08012114 	.word	0x08012114
 8003550:	08012118 	.word	0x08012118
 8003554:	08012138 	.word	0x08012138
 8003558:	08012188 	.word	0x08012188
 800355c:	08012148 	.word	0x08012148
 8003560:	0801214c 	.word	0x0801214c
 8003564:	08012164 	.word	0x08012164
 8003568:	08012168 	.word	0x08012168
 800356c:	080121ac 	.word	0x080121ac
 8003570:	08012190 	.word	0x08012190
 8003574:	08012194 	.word	0x08012194
 8003578:	080121a8 	.word	0x080121a8
 800357c:	080121b4 	.word	0x080121b4
 8003580:	080121d0 	.word	0x080121d0
 8003584:	080121d4 	.word	0x080121d4
 8003588:	080121f4 	.word	0x080121f4
 800358c:	08012218 	.word	0x08012218
 8003590:	080121f8 	.word	0x080121f8
 8003594:	08012214 	.word	0x08012214
 8003598:	08012244 	.word	0x08012244
 800359c:	08012220 	.word	0x08012220
 80035a0:	08012240 	.word	0x08012240
 80035a4:	08012264 	.word	0x08012264
 80035a8:	08012248 	.word	0x08012248
 80035ac:	08012260 	.word	0x08012260
 80035b0:	08012288 	.word	0x08012288
 80035b4:	0801226c 	.word	0x0801226c
 80035b8:	08012284 	.word	0x08012284
 80035bc:	08012290 	.word	0x08012290
 80035c0:	080122ac 	.word	0x080122ac
 80035c4:	080122b0 	.word	0x080122b0
 80035c8:	20004d74 	.word	0x20004d74
 80035cc:	080122e8 	.word	0x080122e8
 80035d0:	080122bc 	.word	0x080122bc
 80035d4:	080122c4 	.word	0x080122c4
 80035d8:	080122c8 	.word	0x080122c8
 80035dc:	080122ec 	.word	0x080122ec
 80035e0:	080122fc 	.word	0x080122fc
 80035e4:	08012340 	.word	0x08012340
 80035e8:	08012300 	.word	0x08012300
 80035ec:	08012320 	.word	0x08012320
 80035f0:	08012324 	.word	0x08012324
 80035f4:	08012348 	.word	0x08012348
 80035f8:	08012394 	.word	0x08012394

080035fc <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	7b5b      	ldrb	r3, [r3, #13]
 8003608:	3b61      	subs	r3, #97	; 0x61
 800360a:	2b17      	cmp	r3, #23
 800360c:	f200 828a 	bhi.w	8003b24 <process_user_input+0x528>
 8003610:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <process_user_input+0x1c>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	08003877 	.word	0x08003877
 800361c:	08003679 	.word	0x08003679
 8003620:	08003823 	.word	0x08003823
 8003624:	080039f5 	.word	0x080039f5
 8003628:	08003b25 	.word	0x08003b25
 800362c:	0800375d 	.word	0x0800375d
 8003630:	080038cb 	.word	0x080038cb
 8003634:	080037cf 	.word	0x080037cf
 8003638:	080036cd 	.word	0x080036cd
 800363c:	08003b25 	.word	0x08003b25
 8003640:	0800390f 	.word	0x0800390f
 8003644:	08003709 	.word	0x08003709
 8003648:	080036eb 	.word	0x080036eb
 800364c:	08003b25 	.word	0x08003b25
 8003650:	08003ae1 	.word	0x08003ae1
 8003654:	08003a39 	.word	0x08003a39
 8003658:	08003b25 	.word	0x08003b25
 800365c:	08003b25 	.word	0x08003b25
 8003660:	08003b25 	.word	0x08003b25
 8003664:	080037b1 	.word	0x080037b1
 8003668:	08003b25 	.word	0x08003b25
 800366c:	08003a8d 	.word	0x08003a8d
 8003670:	08003b25 	.word	0x08003b25
 8003674:	08003953 	.word	0x08003953
		 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3304      	adds	r3, #4
 800367c:	4618      	mov	r0, r3
 800367e:	f009 ff3f 	bl	800d500 <atof>
 8003682:	ec53 2b10 	vmov	r2, r3, d0
 8003686:	4610      	mov	r0, r2
 8003688:	4619      	mov	r1, r3
 800368a:	f7fd fad5 	bl	8000c38 <__aeabi_d2f>
 800368e:	4603      	mov	r3, r0
 8003690:	eddf 0ac1 	vldr	s1, [pc, #772]	; 8003998 <process_user_input+0x39c>
 8003694:	ee00 3a10 	vmov	s0, r3
 8003698:	f00e f8f3 	bl	8011882 <fminf>
 800369c:	eef0 7a40 	vmov.f32	s15, s0
 80036a0:	eddf 0abe 	vldr	s1, [pc, #760]	; 800399c <process_user_input+0x3a0>
 80036a4:	eeb0 0a67 	vmov.f32	s0, s15
 80036a8:	f00e f8d0 	bl	801184c <fmaxf>
 80036ac:	eef0 7a40 	vmov.f32	s15, s0
 80036b0:	4bbb      	ldr	r3, [pc, #748]	; (80039a0 <process_user_input+0x3a4>)
 80036b2:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 80036b6:	4bba      	ldr	r3, [pc, #744]	; (80039a0 <process_user_input+0x3a4>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fc ff6c 	bl	8000598 <__aeabi_f2d>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	48b7      	ldr	r0, [pc, #732]	; (80039a4 <process_user_input+0x3a8>)
 80036c6:	f00a fbcd 	bl	800de64 <iprintf>
			 break;
 80036ca:	e232      	b.n	8003b32 <process_user_input+0x536>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3304      	adds	r3, #4
 80036d0:	4618      	mov	r0, r3
 80036d2:	f009 ff18 	bl	800d506 <atoi>
 80036d6:	4603      	mov	r3, r0
 80036d8:	4ab3      	ldr	r2, [pc, #716]	; (80039a8 <process_user_input+0x3ac>)
 80036da:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 80036dc:	4bb2      	ldr	r3, [pc, #712]	; (80039a8 <process_user_input+0x3ac>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4619      	mov	r1, r3
 80036e2:	48b2      	ldr	r0, [pc, #712]	; (80039ac <process_user_input+0x3b0>)
 80036e4:	f00a fbbe 	bl	800de64 <iprintf>
			 break;
 80036e8:	e223      	b.n	8003b32 <process_user_input+0x536>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3304      	adds	r3, #4
 80036ee:	4618      	mov	r0, r3
 80036f0:	f009 ff09 	bl	800d506 <atoi>
 80036f4:	4603      	mov	r3, r0
 80036f6:	4aac      	ldr	r2, [pc, #688]	; (80039a8 <process_user_input+0x3ac>)
 80036f8:	6093      	str	r3, [r2, #8]
			 printf("CAN_MASTER set to %d\r\n", CAN_MASTER);
 80036fa:	4bab      	ldr	r3, [pc, #684]	; (80039a8 <process_user_input+0x3ac>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	4619      	mov	r1, r3
 8003700:	48ab      	ldr	r0, [pc, #684]	; (80039b0 <process_user_input+0x3b4>)
 8003702:	f00a fbaf 	bl	800de64 <iprintf>
			 break;
 8003706:	e214      	b.n	8003b32 <process_user_input+0x536>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 60.0f), 0.0f);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	4618      	mov	r0, r3
 800370e:	f009 fef7 	bl	800d500 <atof>
 8003712:	ec53 2b10 	vmov	r2, r3, d0
 8003716:	4610      	mov	r0, r2
 8003718:	4619      	mov	r1, r3
 800371a:	f7fd fa8d 	bl	8000c38 <__aeabi_d2f>
 800371e:	4603      	mov	r3, r0
 8003720:	eddf 0aa4 	vldr	s1, [pc, #656]	; 80039b4 <process_user_input+0x3b8>
 8003724:	ee00 3a10 	vmov	s0, r3
 8003728:	f00e f8ab 	bl	8011882 <fminf>
 800372c:	eef0 7a40 	vmov.f32	s15, s0
 8003730:	eddf 0aaf 	vldr	s1, [pc, #700]	; 80039f0 <process_user_input+0x3f4>
 8003734:	eeb0 0a67 	vmov.f32	s0, s15
 8003738:	f00e f888 	bl	801184c <fmaxf>
 800373c:	eef0 7a40 	vmov.f32	s15, s0
 8003740:	4b97      	ldr	r3, [pc, #604]	; (80039a0 <process_user_input+0x3a4>)
 8003742:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 8003746:	4b96      	ldr	r3, [pc, #600]	; (80039a0 <process_user_input+0x3a4>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	4618      	mov	r0, r3
 800374c:	f7fc ff24 	bl	8000598 <__aeabi_f2d>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4898      	ldr	r0, [pc, #608]	; (80039b8 <process_user_input+0x3bc>)
 8003756:	f00a fb85 	bl	800de64 <iprintf>
			 break;
 800375a:	e1ea      	b.n	8003b32 <process_user_input+0x536>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3304      	adds	r3, #4
 8003760:	4618      	mov	r0, r3
 8003762:	f009 fecd 	bl	800d500 <atof>
 8003766:	ec53 2b10 	vmov	r2, r3, d0
 800376a:	4610      	mov	r0, r2
 800376c:	4619      	mov	r1, r3
 800376e:	f7fd fa63 	bl	8000c38 <__aeabi_d2f>
 8003772:	4603      	mov	r3, r0
 8003774:	eddf 0a91 	vldr	s1, [pc, #580]	; 80039bc <process_user_input+0x3c0>
 8003778:	ee00 3a10 	vmov	s0, r3
 800377c:	f00e f881 	bl	8011882 <fminf>
 8003780:	eef0 7a40 	vmov.f32	s15, s0
 8003784:	eddf 0a9a 	vldr	s1, [pc, #616]	; 80039f0 <process_user_input+0x3f4>
 8003788:	eeb0 0a67 	vmov.f32	s0, s15
 800378c:	f00e f85e 	bl	801184c <fmaxf>
 8003790:	eef0 7a40 	vmov.f32	s15, s0
 8003794:	4b82      	ldr	r3, [pc, #520]	; (80039a0 <process_user_input+0x3a4>)
 8003796:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 800379a:	4b81      	ldr	r3, [pc, #516]	; (80039a0 <process_user_input+0x3a4>)
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fc fefa 	bl	8000598 <__aeabi_f2d>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4885      	ldr	r0, [pc, #532]	; (80039c0 <process_user_input+0x3c4>)
 80037aa:	f00a fb5b 	bl	800de64 <iprintf>
			 break;
 80037ae:	e1c0      	b.n	8003b32 <process_user_input+0x536>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3304      	adds	r3, #4
 80037b4:	4618      	mov	r0, r3
 80037b6:	f009 fea6 	bl	800d506 <atoi>
 80037ba:	4603      	mov	r3, r0
 80037bc:	4a7a      	ldr	r2, [pc, #488]	; (80039a8 <process_user_input+0x3ac>)
 80037be:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 80037c0:	4b79      	ldr	r3, [pc, #484]	; (80039a8 <process_user_input+0x3ac>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	4619      	mov	r1, r3
 80037c6:	487f      	ldr	r0, [pc, #508]	; (80039c4 <process_user_input+0x3c8>)
 80037c8:	f00a fb4c 	bl	800de64 <iprintf>
			 break;
 80037cc:	e1b1      	b.n	8003b32 <process_user_input+0x536>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	4618      	mov	r0, r3
 80037d4:	f009 fe94 	bl	800d500 <atof>
 80037d8:	ec53 2b10 	vmov	r2, r3, d0
 80037dc:	4610      	mov	r0, r2
 80037de:	4619      	mov	r1, r3
 80037e0:	f7fd fa2a 	bl	8000c38 <__aeabi_d2f>
 80037e4:	4603      	mov	r3, r0
 80037e6:	eddf 0a78 	vldr	s1, [pc, #480]	; 80039c8 <process_user_input+0x3cc>
 80037ea:	ee00 3a10 	vmov	s0, r3
 80037ee:	f00e f848 	bl	8011882 <fminf>
 80037f2:	eef0 7a40 	vmov.f32	s15, s0
 80037f6:	eddf 0a7e 	vldr	s1, [pc, #504]	; 80039f0 <process_user_input+0x3f4>
 80037fa:	eeb0 0a67 	vmov.f32	s0, s15
 80037fe:	f00e f825 	bl	801184c <fmaxf>
 8003802:	eef0 7a40 	vmov.f32	s15, s0
 8003806:	4b66      	ldr	r3, [pc, #408]	; (80039a0 <process_user_input+0x3a4>)
 8003808:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 800380c:	4b64      	ldr	r3, [pc, #400]	; (80039a0 <process_user_input+0x3a4>)
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	4618      	mov	r0, r3
 8003812:	f7fc fec1 	bl	8000598 <__aeabi_f2d>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	486c      	ldr	r0, [pc, #432]	; (80039cc <process_user_input+0x3d0>)
 800381c:	f00a fb22 	bl	800de64 <iprintf>
			 break;
 8003820:	e187      	b.n	8003b32 <process_user_input+0x536>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3304      	adds	r3, #4
 8003826:	4618      	mov	r0, r3
 8003828:	f009 fe6a 	bl	800d500 <atof>
 800382c:	ec53 2b10 	vmov	r2, r3, d0
 8003830:	4610      	mov	r0, r2
 8003832:	4619      	mov	r1, r3
 8003834:	f7fd fa00 	bl	8000c38 <__aeabi_d2f>
 8003838:	4603      	mov	r3, r0
 800383a:	eddf 0a65 	vldr	s1, [pc, #404]	; 80039d0 <process_user_input+0x3d4>
 800383e:	ee00 3a10 	vmov	s0, r3
 8003842:	f00e f81e 	bl	8011882 <fminf>
 8003846:	eef0 7a40 	vmov.f32	s15, s0
 800384a:	eddf 0a69 	vldr	s1, [pc, #420]	; 80039f0 <process_user_input+0x3f4>
 800384e:	eeb0 0a67 	vmov.f32	s0, s15
 8003852:	f00d fffb 	bl	801184c <fmaxf>
 8003856:	eef0 7a40 	vmov.f32	s15, s0
 800385a:	4b51      	ldr	r3, [pc, #324]	; (80039a0 <process_user_input+0x3a4>)
 800385c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 8003860:	4b4f      	ldr	r3, [pc, #316]	; (80039a0 <process_user_input+0x3a4>)
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	4618      	mov	r0, r3
 8003866:	f7fc fe97 	bl	8000598 <__aeabi_f2d>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4859      	ldr	r0, [pc, #356]	; (80039d4 <process_user_input+0x3d8>)
 8003870:	f00a faf8 	bl	800de64 <iprintf>
			 break;
 8003874:	e15d      	b.n	8003b32 <process_user_input+0x536>
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	4618      	mov	r0, r3
 800387c:	f009 fe40 	bl	800d500 <atof>
 8003880:	ec53 2b10 	vmov	r2, r3, d0
 8003884:	4610      	mov	r0, r2
 8003886:	4619      	mov	r1, r3
 8003888:	f7fd f9d6 	bl	8000c38 <__aeabi_d2f>
 800388c:	4603      	mov	r3, r0
 800388e:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8003892:	ee00 3a10 	vmov	s0, r3
 8003896:	f00d fff4 	bl	8011882 <fminf>
 800389a:	eef0 7a40 	vmov.f32	s15, s0
 800389e:	eddf 0a54 	vldr	s1, [pc, #336]	; 80039f0 <process_user_input+0x3f4>
 80038a2:	eeb0 0a67 	vmov.f32	s0, s15
 80038a6:	f00d ffd1 	bl	801184c <fmaxf>
 80038aa:	eef0 7a40 	vmov.f32	s15, s0
 80038ae:	4b3c      	ldr	r3, [pc, #240]	; (80039a0 <process_user_input+0x3a4>)
 80038b0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			 printf("I_CAL set to %f\r\n", I_CAL);
 80038b4:	4b3a      	ldr	r3, [pc, #232]	; (80039a0 <process_user_input+0x3a4>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fc fe6d 	bl	8000598 <__aeabi_f2d>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4845      	ldr	r0, [pc, #276]	; (80039d8 <process_user_input+0x3dc>)
 80038c4:	f00a face 	bl	800de64 <iprintf>
			 break;
 80038c8:	e133      	b.n	8003b32 <process_user_input+0x536>
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3304      	adds	r3, #4
 80038ce:	4618      	mov	r0, r3
 80038d0:	f009 fe16 	bl	800d500 <atof>
 80038d4:	ec53 2b10 	vmov	r2, r3, d0
 80038d8:	4610      	mov	r0, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	f7fd f9ac 	bl	8000c38 <__aeabi_d2f>
 80038e0:	4603      	mov	r3, r0
 80038e2:	eddf 0a3e 	vldr	s1, [pc, #248]	; 80039dc <process_user_input+0x3e0>
 80038e6:	ee00 3a10 	vmov	s0, r3
 80038ea:	f00d ffaf 	bl	801184c <fmaxf>
 80038ee:	eef0 7a40 	vmov.f32	s15, s0
 80038f2:	4b2b      	ldr	r3, [pc, #172]	; (80039a0 <process_user_input+0x3a4>)
 80038f4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			 printf("GR set to %f\r\n", GR);
 80038f8:	4b29      	ldr	r3, [pc, #164]	; (80039a0 <process_user_input+0x3a4>)
 80038fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fc fe4b 	bl	8000598 <__aeabi_f2d>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4836      	ldr	r0, [pc, #216]	; (80039e0 <process_user_input+0x3e4>)
 8003908:	f00a faac 	bl	800de64 <iprintf>
			 break;
 800390c:	e111      	b.n	8003b32 <process_user_input+0x536>
		 case 'k':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3304      	adds	r3, #4
 8003912:	4618      	mov	r0, r3
 8003914:	f009 fdf4 	bl	800d500 <atof>
 8003918:	ec53 2b10 	vmov	r2, r3, d0
 800391c:	4610      	mov	r0, r2
 800391e:	4619      	mov	r1, r3
 8003920:	f7fd f98a 	bl	8000c38 <__aeabi_d2f>
 8003924:	4603      	mov	r3, r0
 8003926:	eddf 0a2f 	vldr	s1, [pc, #188]	; 80039e4 <process_user_input+0x3e8>
 800392a:	ee00 3a10 	vmov	s0, r3
 800392e:	f00d ff8d 	bl	801184c <fmaxf>
 8003932:	eef0 7a40 	vmov.f32	s15, s0
 8003936:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <process_user_input+0x3a4>)
 8003938:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			 printf("KT set to %f\r\n", KT);
 800393c:	4b18      	ldr	r3, [pc, #96]	; (80039a0 <process_user_input+0x3a4>)
 800393e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003940:	4618      	mov	r0, r3
 8003942:	f7fc fe29 	bl	8000598 <__aeabi_f2d>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4827      	ldr	r0, [pc, #156]	; (80039e8 <process_user_input+0x3ec>)
 800394c:	f00a fa8a 	bl	800de64 <iprintf>
			 break;
 8003950:	e0ef      	b.n	8003b32 <process_user_input+0x536>
		 case 'x':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3304      	adds	r3, #4
 8003956:	4618      	mov	r0, r3
 8003958:	f009 fdd2 	bl	800d500 <atof>
 800395c:	ec53 2b10 	vmov	r2, r3, d0
 8003960:	4610      	mov	r0, r2
 8003962:	4619      	mov	r1, r3
 8003964:	f7fd f968 	bl	8000c38 <__aeabi_d2f>
 8003968:	4603      	mov	r3, r0
 800396a:	eddf 0a21 	vldr	s1, [pc, #132]	; 80039f0 <process_user_input+0x3f4>
 800396e:	ee00 3a10 	vmov	s0, r3
 8003972:	f00d ff6b 	bl	801184c <fmaxf>
 8003976:	eef0 7a40 	vmov.f32	s15, s0
 800397a:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <process_user_input+0x3a4>)
 800397c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 8003980:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <process_user_input+0x3a4>)
 8003982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003984:	4618      	mov	r0, r3
 8003986:	f7fc fe07 	bl	8000598 <__aeabi_f2d>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4817      	ldr	r0, [pc, #92]	; (80039ec <process_user_input+0x3f0>)
 8003990:	f00a fa68 	bl	800de64 <iprintf>
			 break;
 8003994:	e0cd      	b.n	8003b32 <process_user_input+0x536>
 8003996:	bf00      	nop
 8003998:	44fa0000 	.word	0x44fa0000
 800399c:	42c80000 	.word	0x42c80000
 80039a0:	20004c74 	.word	0x20004c74
 80039a4:	080123c0 	.word	0x080123c0
 80039a8:	20004d74 	.word	0x20004d74
 80039ac:	080123d4 	.word	0x080123d4
 80039b0:	080123e8 	.word	0x080123e8
 80039b4:	42700000 	.word	0x42700000
 80039b8:	08012400 	.word	0x08012400
 80039bc:	42040000 	.word	0x42040000
 80039c0:	08012414 	.word	0x08012414
 80039c4:	0801242c 	.word	0x0801242c
 80039c8:	43160000 	.word	0x43160000
 80039cc:	08012444 	.word	0x08012444
 80039d0:	42200000 	.word	0x42200000
 80039d4:	0801245c 	.word	0x0801245c
 80039d8:	08012474 	.word	0x08012474
 80039dc:	3a83126f 	.word	0x3a83126f
 80039e0:	08012488 	.word	0x08012488
 80039e4:	38d1b717 	.word	0x38d1b717
 80039e8:	08012498 	.word	0x08012498
 80039ec:	080124a8 	.word	0x080124a8
 80039f0:	00000000 	.word	0x00000000
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3304      	adds	r3, #4
 80039f8:	4618      	mov	r0, r3
 80039fa:	f009 fd81 	bl	800d500 <atof>
 80039fe:	ec53 2b10 	vmov	r2, r3, d0
 8003a02:	4610      	mov	r0, r2
 8003a04:	4619      	mov	r1, r3
 8003a06:	f7fd f917 	bl	8000c38 <__aeabi_d2f>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 80039f0 <process_user_input+0x3f4>
 8003a10:	ee00 3a10 	vmov	s0, r3
 8003a14:	f00d ff1a 	bl	801184c <fmaxf>
 8003a18:	eef0 7a40 	vmov.f32	s15, s0
 8003a1c:	4b50      	ldr	r3, [pc, #320]	; (8003b60 <process_user_input+0x564>)
 8003a1e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 8003a22:	4b4f      	ldr	r3, [pc, #316]	; (8003b60 <process_user_input+0x564>)
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fc fdb6 	bl	8000598 <__aeabi_f2d>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	484c      	ldr	r0, [pc, #304]	; (8003b64 <process_user_input+0x568>)
 8003a32:	f00a fa17 	bl	800de64 <iprintf>
			 break;
 8003a36:	e07c      	b.n	8003b32 <process_user_input+0x536>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f009 fd5f 	bl	800d500 <atof>
 8003a42:	ec53 2b10 	vmov	r2, r3, d0
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f7fd f8f5 	bl	8000c38 <__aeabi_d2f>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	eddf 0a45 	vldr	s1, [pc, #276]	; 8003b68 <process_user_input+0x56c>
 8003a54:	ee00 3a10 	vmov	s0, r3
 8003a58:	f00d fef8 	bl	801184c <fmaxf>
 8003a5c:	eef0 7a40 	vmov.f32	s15, s0
 8003a60:	4b3f      	ldr	r3, [pc, #252]	; (8003b60 <process_user_input+0x564>)
 8003a62:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 P_MIN = -P_MAX;
 8003a66:	4b3e      	ldr	r3, [pc, #248]	; (8003b60 <process_user_input+0x564>)
 8003a68:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003a6c:	eef1 7a67 	vneg.f32	s15, s15
 8003a70:	4b3b      	ldr	r3, [pc, #236]	; (8003b60 <process_user_input+0x564>)
 8003a72:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("P_MAX set to %f\r\n", P_MAX);
 8003a76:	4b3a      	ldr	r3, [pc, #232]	; (8003b60 <process_user_input+0x564>)
 8003a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fc fd8c 	bl	8000598 <__aeabi_f2d>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4839      	ldr	r0, [pc, #228]	; (8003b6c <process_user_input+0x570>)
 8003a86:	f00a f9ed 	bl	800de64 <iprintf>
			 break;
 8003a8a:	e052      	b.n	8003b32 <process_user_input+0x536>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	4618      	mov	r0, r3
 8003a92:	f009 fd35 	bl	800d500 <atof>
 8003a96:	ec53 2b10 	vmov	r2, r3, d0
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	f7fd f8cb 	bl	8000c38 <__aeabi_d2f>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	eddf 0a30 	vldr	s1, [pc, #192]	; 8003b68 <process_user_input+0x56c>
 8003aa8:	ee00 3a10 	vmov	s0, r3
 8003aac:	f00d fece 	bl	801184c <fmaxf>
 8003ab0:	eef0 7a40 	vmov.f32	s15, s0
 8003ab4:	4b2a      	ldr	r3, [pc, #168]	; (8003b60 <process_user_input+0x564>)
 8003ab6:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 V_MIN = -V_MAX;
 8003aba:	4b29      	ldr	r3, [pc, #164]	; (8003b60 <process_user_input+0x564>)
 8003abc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003ac0:	eef1 7a67 	vneg.f32	s15, s15
 8003ac4:	4b26      	ldr	r3, [pc, #152]	; (8003b60 <process_user_input+0x564>)
 8003ac6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			 printf("V_MAX set to %f\r\n", V_MAX);
 8003aca:	4b25      	ldr	r3, [pc, #148]	; (8003b60 <process_user_input+0x564>)
 8003acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fc fd62 	bl	8000598 <__aeabi_f2d>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4825      	ldr	r0, [pc, #148]	; (8003b70 <process_user_input+0x574>)
 8003ada:	f00a f9c3 	bl	800de64 <iprintf>
			 break;
 8003ade:	e028      	b.n	8003b32 <process_user_input+0x536>
		 case 'o':
			 T_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f009 fd0b 	bl	800d500 <atof>
 8003aea:	ec53 2b10 	vmov	r2, r3, d0
 8003aee:	4610      	mov	r0, r2
 8003af0:	4619      	mov	r1, r3
 8003af2:	f7fd f8a1 	bl	8000c38 <__aeabi_d2f>
 8003af6:	4603      	mov	r3, r0
 8003af8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8003b68 <process_user_input+0x56c>
 8003afc:	ee00 3a10 	vmov	s0, r3
 8003b00:	f00d fea4 	bl	801184c <fmaxf>
 8003b04:	eef0 7a40 	vmov.f32	s15, s0
 8003b08:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <process_user_input+0x564>)
 8003b0a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("T_MAX set to %f\r\n", T_MAX);
 8003b0e:	4b14      	ldr	r3, [pc, #80]	; (8003b60 <process_user_input+0x564>)
 8003b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fc fd40 	bl	8000598 <__aeabi_f2d>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4815      	ldr	r0, [pc, #84]	; (8003b74 <process_user_input+0x578>)
 8003b1e:	f00a f9a1 	bl	800de64 <iprintf>
			 break;
 8003b22:	e006      	b.n	8003b32 <process_user_input+0x536>
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3304      	adds	r3, #4
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4813      	ldr	r0, [pc, #76]	; (8003b78 <process_user_input+0x57c>)
 8003b2c:	f00a f99a 	bl	800de64 <iprintf>
			 break;
 8003b30:	bf00      	nop

		 }

	 /* Write new settings to flash */
	 store_eeprom_regs();
 8003b32:	f001 fd39 	bl	80055a8 <store_eeprom_regs>
	 load_eeprom_regs();
 8003b36:	f001 fd45 	bl	80055c4 <load_eeprom_regs>

	 enter_setup_state();
 8003b3a:	f7ff fbeb 	bl	8003314 <enter_setup_state>

	 fsmstate->bytecount = 0;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	731a      	strb	r2, [r3, #12]
	 fsmstate->cmd_id = 0;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	735a      	strb	r2, [r3, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	2208      	movs	r2, #8
 8003b50:	2100      	movs	r1, #0
 8003b52:	4618      	mov	r0, r3
 8003b54:	f009 fd14 	bl	800d580 <memset>
 }
 8003b58:	bf00      	nop
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20004c74 	.word	0x20004c74
 8003b64:	080124bc 	.word	0x080124bc
 8003b68:	00000000 	.word	0x00000000
 8003b6c:	080124d0 	.word	0x080124d0
 8003b70:	080124e4 	.word	0x080124e4
 8003b74:	080124f8 	.word	0x080124f8
 8003b78:	0801250c 	.word	0x0801250c

08003b7c <enable_gd>:
 */
#include "gatedrive.h"
#include <stdio.h>


void enable_gd(ControllerStruct *controller){
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	//Restart PWM
	controller->isEnabled = 1;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
    HAL_TIM_PWM_Start(&TIM_PWM, TIM_CHANNEL_1);
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	480d      	ldr	r0, [pc, #52]	; (8003bc4 <enable_gd+0x48>)
 8003b90:	f006 fc8a 	bl	800a4a8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&TIM_PWM, TIM_CHANNEL_2);
 8003b94:	2104      	movs	r1, #4
 8003b96:	480b      	ldr	r0, [pc, #44]	; (8003bc4 <enable_gd+0x48>)
 8003b98:	f006 fc86 	bl	800a4a8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&TIM_PWM, TIM_CHANNEL_3);
 8003b9c:	2108      	movs	r1, #8
 8003b9e:	4809      	ldr	r0, [pc, #36]	; (8003bc4 <enable_gd+0x48>)
 8003ba0:	f006 fc82 	bl	800a4a8 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&TIM_PWM, TIM_CHANNEL_1);
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	4807      	ldr	r0, [pc, #28]	; (8003bc4 <enable_gd+0x48>)
 8003ba8:	f007 fd7e 	bl	800b6a8 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&TIM_PWM, TIM_CHANNEL_2);
 8003bac:	2104      	movs	r1, #4
 8003bae:	4805      	ldr	r0, [pc, #20]	; (8003bc4 <enable_gd+0x48>)
 8003bb0:	f007 fd7a 	bl	800b6a8 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&TIM_PWM, TIM_CHANNEL_3);
 8003bb4:	2108      	movs	r1, #8
 8003bb6:	4803      	ldr	r0, [pc, #12]	; (8003bc4 <enable_gd+0x48>)
 8003bb8:	f007 fd76 	bl	800b6a8 <HAL_TIMEx_PWMN_Start>
//    printf("enabled\r\n");
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	2000502c 	.word	0x2000502c

08003bc8 <disable_gd>:
void disable_gd(ControllerStruct *controller){
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
	//Drive all gates low
	controller->isEnabled = 0;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.0f);
 8003bd8:	4b30      	ldr	r3, [pc, #192]	; (8003c9c <disable_gd+0xd4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	ee07 3a90 	vmov	s15, r3
 8003be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003ca0 <disable_gd+0xd8>
 8003bea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bee:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <disable_gd+0xd4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bf6:	ee17 2a90 	vmov	r2, s15
 8003bfa:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.0f);
 8003bfc:	4b27      	ldr	r3, [pc, #156]	; (8003c9c <disable_gd+0xd4>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003ca0 <disable_gd+0xd8>
 8003c0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c12:	4b22      	ldr	r3, [pc, #136]	; (8003c9c <disable_gd+0xd4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c1a:	ee17 2a90 	vmov	r2, s15
 8003c1e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.0f);
 8003c20:	4b1e      	ldr	r3, [pc, #120]	; (8003c9c <disable_gd+0xd4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c2e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003ca0 <disable_gd+0xd8>
 8003c32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c36:	4b19      	ldr	r3, [pc, #100]	; (8003c9c <disable_gd+0xd4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c3e:	ee17 2a90 	vmov	r2, s15
 8003c42:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(DRV_HA, GPIO_PIN_RESET );
 8003c44:	2200      	movs	r2, #0
 8003c46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c4e:	f004 fb41 	bl	80082d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_HB, GPIO_PIN_RESET );
 8003c52:	2200      	movs	r2, #0
 8003c54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c5c:	f004 fb3a 	bl	80082d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_HC, GPIO_PIN_RESET );
 8003c60:	2200      	movs	r2, #0
 8003c62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c6a:	f004 fb33 	bl	80082d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_LA, GPIO_PIN_RESET );
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c74:	480b      	ldr	r0, [pc, #44]	; (8003ca4 <disable_gd+0xdc>)
 8003c76:	f004 fb2d 	bl	80082d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_LB, GPIO_PIN_RESET );
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c84:	f004 fb26 	bl	80082d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_LC, GPIO_PIN_RESET );
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c8e:	4806      	ldr	r0, [pc, #24]	; (8003ca8 <disable_gd+0xe0>)
 8003c90:	f004 fb20 	bl	80082d4 <HAL_GPIO_WritePin>

}
 8003c94:	bf00      	nop
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	2000502c 	.word	0x2000502c
 8003ca0:	00000000 	.word	0x00000000
 8003ca4:	48000800 	.word	0x48000800
 8003ca8:	48000400 	.word	0x48000400

08003cac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08a      	sub	sp, #40	; 0x28
 8003cb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb2:	f107 0314 	add.w	r3, r7, #20
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	605a      	str	r2, [r3, #4]
 8003cbc:	609a      	str	r2, [r3, #8]
 8003cbe:	60da      	str	r2, [r3, #12]
 8003cc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cc2:	4b30      	ldr	r3, [pc, #192]	; (8003d84 <MX_GPIO_Init+0xd8>)
 8003cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc6:	4a2f      	ldr	r2, [pc, #188]	; (8003d84 <MX_GPIO_Init+0xd8>)
 8003cc8:	f043 0304 	orr.w	r3, r3, #4
 8003ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cce:	4b2d      	ldr	r3, [pc, #180]	; (8003d84 <MX_GPIO_Init+0xd8>)
 8003cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003cda:	4b2a      	ldr	r3, [pc, #168]	; (8003d84 <MX_GPIO_Init+0xd8>)
 8003cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cde:	4a29      	ldr	r2, [pc, #164]	; (8003d84 <MX_GPIO_Init+0xd8>)
 8003ce0:	f043 0320 	orr.w	r3, r3, #32
 8003ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ce6:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <MX_GPIO_Init+0xd8>)
 8003ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cea:	f003 0320 	and.w	r3, r3, #32
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cf2:	4b24      	ldr	r3, [pc, #144]	; (8003d84 <MX_GPIO_Init+0xd8>)
 8003cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf6:	4a23      	ldr	r2, [pc, #140]	; (8003d84 <MX_GPIO_Init+0xd8>)
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cfe:	4b21      	ldr	r3, [pc, #132]	; (8003d84 <MX_GPIO_Init+0xd8>)
 8003d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	60bb      	str	r3, [r7, #8]
 8003d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d0a:	4b1e      	ldr	r3, [pc, #120]	; (8003d84 <MX_GPIO_Init+0xd8>)
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0e:	4a1d      	ldr	r2, [pc, #116]	; (8003d84 <MX_GPIO_Init+0xd8>)
 8003d10:	f043 0302 	orr.w	r3, r3, #2
 8003d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d16:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <MX_GPIO_Init+0xd8>)
 8003d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	607b      	str	r3, [r7, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_11, GPIO_PIN_RESET);
 8003d22:	2200      	movs	r2, #0
 8003d24:	f644 0140 	movw	r1, #18496	; 0x4840
 8003d28:	4817      	ldr	r0, [pc, #92]	; (8003d88 <MX_GPIO_Init+0xdc>)
 8003d2a:	f004 fad3 	bl	80082d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d38:	f004 facc 	bl	80082d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC6 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_11;
 8003d3c:	f644 0340 	movw	r3, #18496	; 0x4840
 8003d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d42:	2301      	movs	r3, #1
 8003d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d4e:	f107 0314 	add.w	r3, r7, #20
 8003d52:	4619      	mov	r1, r3
 8003d54:	480c      	ldr	r0, [pc, #48]	; (8003d88 <MX_GPIO_Init+0xdc>)
 8003d56:	f004 f93b 	bl	8007fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d60:	2301      	movs	r3, #1
 8003d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d6c:	f107 0314 	add.w	r3, r7, #20
 8003d70:	4619      	mov	r1, r3
 8003d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d76:	f004 f92b 	bl	8007fd0 <HAL_GPIO_Init>

}
 8003d7a:	bf00      	nop
 8003d7c:	3728      	adds	r7, #40	; 0x28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40021000 	.word	0x40021000
 8003d88:	48000800 	.word	0x48000800

08003d8c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003d90:	4b1e      	ldr	r3, [pc, #120]	; (8003e0c <MX_I2C1_Init+0x80>)
 8003d92:	4a1f      	ldr	r2, [pc, #124]	; (8003e10 <MX_I2C1_Init+0x84>)
 8003d94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00802F62;
 8003d96:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <MX_I2C1_Init+0x80>)
 8003d98:	4a1e      	ldr	r2, [pc, #120]	; (8003e14 <MX_I2C1_Init+0x88>)
 8003d9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003d9c:	4b1b      	ldr	r3, [pc, #108]	; (8003e0c <MX_I2C1_Init+0x80>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003da2:	4b1a      	ldr	r3, [pc, #104]	; (8003e0c <MX_I2C1_Init+0x80>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003da8:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <MX_I2C1_Init+0x80>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003dae:	4b17      	ldr	r3, [pc, #92]	; (8003e0c <MX_I2C1_Init+0x80>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003db4:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <MX_I2C1_Init+0x80>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003dba:	4b14      	ldr	r3, [pc, #80]	; (8003e0c <MX_I2C1_Init+0x80>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003dc0:	4b12      	ldr	r3, [pc, #72]	; (8003e0c <MX_I2C1_Init+0x80>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003dc6:	4811      	ldr	r0, [pc, #68]	; (8003e0c <MX_I2C1_Init+0x80>)
 8003dc8:	f004 fa9c 	bl	8008304 <HAL_I2C_Init>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003dd2:	f000 fbd2 	bl	800457a <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	480c      	ldr	r0, [pc, #48]	; (8003e0c <MX_I2C1_Init+0x80>)
 8003dda:	f005 f8cf 	bl	8008f7c <HAL_I2CEx_ConfigAnalogFilter>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003de4:	f000 fbc9 	bl	800457a <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003de8:	2100      	movs	r1, #0
 8003dea:	4808      	ldr	r0, [pc, #32]	; (8003e0c <MX_I2C1_Init+0x80>)
 8003dec:	f005 f911 	bl	8009012 <HAL_I2CEx_ConfigDigitalFilter>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003df6:	f000 fbc0 	bl	800457a <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 8003dfa:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <MX_I2C1_Init+0x8c>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	4a06      	ldr	r2, [pc, #24]	; (8003e18 <MX_I2C1_Init+0x8c>)
 8003e00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e04:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003e06:	bf00      	nop
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	2000041c 	.word	0x2000041c
 8003e10:	40005400 	.word	0x40005400
 8003e14:	00802f62 	.word	0x00802f62
 8003e18:	40010000 	.word	0x40010000

08003e1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08a      	sub	sp, #40	; 0x28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e24:	f107 0314 	add.w	r3, r7, #20
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	605a      	str	r2, [r3, #4]
 8003e2e:	609a      	str	r2, [r3, #8]
 8003e30:	60da      	str	r2, [r3, #12]
 8003e32:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a17      	ldr	r2, [pc, #92]	; (8003e98 <HAL_I2C_MspInit+0x7c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d128      	bne.n	8003e90 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e3e:	4b17      	ldr	r3, [pc, #92]	; (8003e9c <HAL_I2C_MspInit+0x80>)
 8003e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e42:	4a16      	ldr	r2, [pc, #88]	; (8003e9c <HAL_I2C_MspInit+0x80>)
 8003e44:	f043 0302 	orr.w	r3, r3, #2
 8003e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e4a:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <HAL_I2C_MspInit+0x80>)
 8003e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003e56:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e5c:	2312      	movs	r3, #18
 8003e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e60:	2301      	movs	r3, #1
 8003e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e64:	2300      	movs	r3, #0
 8003e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e68:	2304      	movs	r3, #4
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e6c:	f107 0314 	add.w	r3, r7, #20
 8003e70:	4619      	mov	r1, r3
 8003e72:	480b      	ldr	r0, [pc, #44]	; (8003ea0 <HAL_I2C_MspInit+0x84>)
 8003e74:	f004 f8ac 	bl	8007fd0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e78:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <HAL_I2C_MspInit+0x80>)
 8003e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7c:	4a07      	ldr	r2, [pc, #28]	; (8003e9c <HAL_I2C_MspInit+0x80>)
 8003e7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e82:	6593      	str	r3, [r2, #88]	; 0x58
 8003e84:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <HAL_I2C_MspInit+0x80>)
 8003e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003e90:	bf00      	nop
 8003e92:	3728      	adds	r7, #40	; 0x28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40005400 	.word	0x40005400
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	48000400 	.word	0x48000400

08003ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	6039      	str	r1, [r7, #0]
 8003eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	db0a      	blt.n	8003ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	490c      	ldr	r1, [pc, #48]	; (8003ef0 <__NVIC_SetPriority+0x4c>)
 8003ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec2:	0112      	lsls	r2, r2, #4
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ecc:	e00a      	b.n	8003ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	4908      	ldr	r1, [pc, #32]	; (8003ef4 <__NVIC_SetPriority+0x50>)
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	3b04      	subs	r3, #4
 8003edc:	0112      	lsls	r2, r2, #4
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	761a      	strb	r2, [r3, #24]
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	e000e100 	.word	0xe000e100
 8003ef4:	e000ed00 	.word	0xe000ed00

08003ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003efc:	f001 fb99 	bl	8005632 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f00:	f000 fad0 	bl	80044a4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(100);
 8003f04:	2064      	movs	r0, #100	; 0x64
 8003f06:	f001 fc05 	bl	8005714 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f0a:	f7ff fecf 	bl	8003cac <MX_GPIO_Init>
  MX_DMA_Init();
 8003f0e:	f7fd fe35 	bl	8001b7c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003f12:	f001 fa8d 	bl	8005430 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8003f16:	f001 f921 	bl	800515c <MX_TIM1_Init>
  MX_I2C1_Init();
 8003f1a:	f7ff ff37 	bl	8003d8c <MX_I2C1_Init>
  MX_OPAMP1_Init();
 8003f1e:	f000 fc6d 	bl	80047fc <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8003f22:	f000 fc99 	bl	8004858 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8003f26:	f000 fcc5 	bl	80048b4 <MX_OPAMP3_Init>
  MX_ADC1_Init();
 8003f2a:	f7fd f88d 	bl	8001048 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003f2e:	f7fd f913 	bl	8001158 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8003f32:	f7fd ffcb 	bl	8001ecc <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  load_eeprom_regs();
 8003f36:	f001 fb45 	bl	80055c4 <load_eeprom_regs>
  /* Sanitize configs in case flash is empty*/
  if(E_ZERO==-1){E_ZERO = 0;}
 8003f3a:	4bae      	ldr	r3, [pc, #696]	; (80041f4 <main+0x2fc>)
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f42:	d102      	bne.n	8003f4a <main+0x52>
 8003f44:	4bab      	ldr	r3, [pc, #684]	; (80041f4 <main+0x2fc>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	615a      	str	r2, [r3, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 8003f4a:	4baa      	ldr	r3, [pc, #680]	; (80041f4 <main+0x2fc>)
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f52:	d102      	bne.n	8003f5a <main+0x62>
 8003f54:	4ba7      	ldr	r3, [pc, #668]	; (80041f4 <main+0x2fc>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	611a      	str	r2, [r3, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8003f5a:	4ba7      	ldr	r3, [pc, #668]	; (80041f8 <main+0x300>)
 8003f5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f60:	eef4 7a67 	vcmp.f32	s15, s15
 8003f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f68:	d609      	bvs.n	8003f7e <main+0x86>
 8003f6a:	4ba3      	ldr	r3, [pc, #652]	; (80041f8 <main+0x300>)
 8003f6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f70:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003f74:	eef4 7a47 	vcmp.f32	s15, s14
 8003f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f7c:	d102      	bne.n	8003f84 <main+0x8c>
 8003f7e:	4b9e      	ldr	r3, [pc, #632]	; (80041f8 <main+0x300>)
 8003f80:	4a9e      	ldr	r2, [pc, #632]	; (80041fc <main+0x304>)
 8003f82:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8003f84:	4b9c      	ldr	r3, [pc, #624]	; (80041f8 <main+0x300>)
 8003f86:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f8a:	eef4 7a67 	vcmp.f32	s15, s15
 8003f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f92:	d609      	bvs.n	8003fa8 <main+0xb0>
 8003f94:	4b98      	ldr	r3, [pc, #608]	; (80041f8 <main+0x300>)
 8003f96:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f9a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003f9e:	eef4 7a47 	vcmp.f32	s15, s14
 8003fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa6:	d102      	bne.n	8003fae <main+0xb6>
 8003fa8:	4b93      	ldr	r3, [pc, #588]	; (80041f8 <main+0x300>)
 8003faa:	4a95      	ldr	r2, [pc, #596]	; (8004200 <main+0x308>)
 8003fac:	60da      	str	r2, [r3, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8003fae:	4b92      	ldr	r3, [pc, #584]	; (80041f8 <main+0x300>)
 8003fb0:	edd3 7a06 	vldr	s15, [r3, #24]
 8003fb4:	eef4 7a67 	vcmp.f32	s15, s15
 8003fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fbc:	d609      	bvs.n	8003fd2 <main+0xda>
 8003fbe:	4b8e      	ldr	r3, [pc, #568]	; (80041f8 <main+0x300>)
 8003fc0:	edd3 7a06 	vldr	s15, [r3, #24]
 8003fc4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003fc8:	eef4 7a47 	vcmp.f32	s15, s14
 8003fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd0:	d103      	bne.n	8003fda <main+0xe2>
 8003fd2:	4b89      	ldr	r3, [pc, #548]	; (80041f8 <main+0x300>)
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	619a      	str	r2, [r3, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 8003fda:	4b86      	ldr	r3, [pc, #536]	; (80041f4 <main+0x2fc>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe2:	d102      	bne.n	8003fea <main+0xf2>
 8003fe4:	4b83      	ldr	r3, [pc, #524]	; (80041f4 <main+0x2fc>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 8003fea:	4b82      	ldr	r3, [pc, #520]	; (80041f4 <main+0x2fc>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff2:	d102      	bne.n	8003ffa <main+0x102>
 8003ff4:	4b7f      	ldr	r3, [pc, #508]	; (80041f4 <main+0x2fc>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 0;}
 8003ffa:	4b7e      	ldr	r3, [pc, #504]	; (80041f4 <main+0x2fc>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d102      	bne.n	800400a <main+0x112>
 8004004:	4b7b      	ldr	r3, [pc, #492]	; (80041f4 <main+0x2fc>)
 8004006:	2200      	movs	r2, #0
 8004008:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 800400a:	4b7b      	ldr	r3, [pc, #492]	; (80041f8 <main+0x300>)
 800400c:	edd3 7a07 	vldr	s15, [r3, #28]
 8004010:	eef4 7a67 	vcmp.f32	s15, s15
 8004014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004018:	d609      	bvs.n	800402e <main+0x136>
 800401a:	4b77      	ldr	r3, [pc, #476]	; (80041f8 <main+0x300>)
 800401c:	edd3 7a07 	vldr	s15, [r3, #28]
 8004020:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004024:	eef4 7a47 	vcmp.f32	s15, s14
 8004028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800402c:	d103      	bne.n	8004036 <main+0x13e>
 800402e:	4b72      	ldr	r3, [pc, #456]	; (80041f8 <main+0x300>)
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 8004036:	4b70      	ldr	r3, [pc, #448]	; (80041f8 <main+0x300>)
 8004038:	edd3 7a08 	vldr	s15, [r3, #32]
 800403c:	eef4 7a67 	vcmp.f32	s15, s15
 8004040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004044:	d609      	bvs.n	800405a <main+0x162>
 8004046:	4b6c      	ldr	r3, [pc, #432]	; (80041f8 <main+0x300>)
 8004048:	edd3 7a08 	vldr	s15, [r3, #32]
 800404c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004050:	eef4 7a47 	vcmp.f32	s15, s14
 8004054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004058:	d102      	bne.n	8004060 <main+0x168>
 800405a:	4b67      	ldr	r3, [pc, #412]	; (80041f8 <main+0x300>)
 800405c:	4a69      	ldr	r2, [pc, #420]	; (8004204 <main+0x30c>)
 800405e:	621a      	str	r2, [r3, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8004060:	4b65      	ldr	r3, [pc, #404]	; (80041f8 <main+0x300>)
 8004062:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004066:	eef4 7a67 	vcmp.f32	s15, s15
 800406a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406e:	d609      	bvs.n	8004084 <main+0x18c>
 8004070:	4b61      	ldr	r3, [pc, #388]	; (80041f8 <main+0x300>)
 8004072:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004076:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800407a:	eef4 7a47 	vcmp.f32	s15, s14
 800407e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004082:	d102      	bne.n	800408a <main+0x192>
 8004084:	4b5c      	ldr	r3, [pc, #368]	; (80041f8 <main+0x300>)
 8004086:	4a60      	ldr	r2, [pc, #384]	; (8004208 <main+0x310>)
 8004088:	625a      	str	r2, [r3, #36]	; 0x24
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 800408a:	4b5b      	ldr	r3, [pc, #364]	; (80041f8 <main+0x300>)
 800408c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004090:	eef4 7a67 	vcmp.f32	s15, s15
 8004094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004098:	d609      	bvs.n	80040ae <main+0x1b6>
 800409a:	4b57      	ldr	r3, [pc, #348]	; (80041f8 <main+0x300>)
 800409c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80040a0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80040a4:	eef4 7a47 	vcmp.f32	s15, s14
 80040a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ac:	d102      	bne.n	80040b4 <main+0x1bc>
 80040ae:	4b52      	ldr	r3, [pc, #328]	; (80041f8 <main+0x300>)
 80040b0:	4a56      	ldr	r2, [pc, #344]	; (800420c <main+0x314>)
 80040b2:	641a      	str	r2, [r3, #64]	; 0x40
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 80040b4:	4b50      	ldr	r3, [pc, #320]	; (80041f8 <main+0x300>)
 80040b6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80040ba:	eef4 7a67 	vcmp.f32	s15, s15
 80040be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c2:	d609      	bvs.n	80040d8 <main+0x1e0>
 80040c4:	4b4c      	ldr	r3, [pc, #304]	; (80041f8 <main+0x300>)
 80040c6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80040ca:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80040ce:	eef4 7a47 	vcmp.f32	s15, s14
 80040d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d6:	d102      	bne.n	80040de <main+0x1e6>
 80040d8:	4b47      	ldr	r3, [pc, #284]	; (80041f8 <main+0x300>)
 80040da:	4a4d      	ldr	r2, [pc, #308]	; (8004210 <main+0x318>)
 80040dc:	629a      	str	r2, [r3, #40]	; 0x28
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 80040de:	4b46      	ldr	r3, [pc, #280]	; (80041f8 <main+0x300>)
 80040e0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80040e4:	eef4 7a67 	vcmp.f32	s15, s15
 80040e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ec:	d609      	bvs.n	8004102 <main+0x20a>
 80040ee:	4b42      	ldr	r3, [pc, #264]	; (80041f8 <main+0x300>)
 80040f0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80040f4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80040f8:	eef4 7a47 	vcmp.f32	s15, s14
 80040fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004100:	d103      	bne.n	800410a <main+0x212>
 8004102:	4b3d      	ldr	r3, [pc, #244]	; (80041f8 <main+0x300>)
 8004104:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004108:	63da      	str	r2, [r3, #60]	; 0x3c
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 800410a:	4b3b      	ldr	r3, [pc, #236]	; (80041f8 <main+0x300>)
 800410c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004110:	eef4 7a67 	vcmp.f32	s15, s15
 8004114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004118:	d609      	bvs.n	800412e <main+0x236>
 800411a:	4b37      	ldr	r3, [pc, #220]	; (80041f8 <main+0x300>)
 800411c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004120:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004124:	eef4 7a47 	vcmp.f32	s15, s14
 8004128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800412c:	d103      	bne.n	8004136 <main+0x23e>
 800412e:	4b32      	ldr	r3, [pc, #200]	; (80041f8 <main+0x300>)
 8004130:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004134:	631a      	str	r2, [r3, #48]	; 0x30
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 8004136:	4b30      	ldr	r3, [pc, #192]	; (80041f8 <main+0x300>)
 8004138:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800413c:	eef4 7a67 	vcmp.f32	s15, s15
 8004140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004144:	d609      	bvs.n	800415a <main+0x262>
 8004146:	4b2c      	ldr	r3, [pc, #176]	; (80041f8 <main+0x300>)
 8004148:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800414c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004150:	eef4 7a47 	vcmp.f32	s15, s14
 8004154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004158:	d102      	bne.n	8004160 <main+0x268>
 800415a:	4b27      	ldr	r3, [pc, #156]	; (80041f8 <main+0x300>)
 800415c:	4a2d      	ldr	r2, [pc, #180]	; (8004214 <main+0x31c>)
 800415e:	655a      	str	r2, [r3, #84]	; 0x54
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 8004160:	4b25      	ldr	r3, [pc, #148]	; (80041f8 <main+0x300>)
 8004162:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004166:	eef4 7a67 	vcmp.f32	s15, s15
 800416a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800416e:	d609      	bvs.n	8004184 <main+0x28c>
 8004170:	4b21      	ldr	r3, [pc, #132]	; (80041f8 <main+0x300>)
 8004172:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004176:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800417a:	eef4 7a47 	vcmp.f32	s15, s14
 800417e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004182:	d102      	bne.n	800418a <main+0x292>
 8004184:	4b1c      	ldr	r3, [pc, #112]	; (80041f8 <main+0x300>)
 8004186:	4a21      	ldr	r2, [pc, #132]	; (800420c <main+0x314>)
 8004188:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(P_MAX)){P_MAX = 12.5f;}
 800418a:	4b1b      	ldr	r3, [pc, #108]	; (80041f8 <main+0x300>)
 800418c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004190:	eef4 7a67 	vcmp.f32	s15, s15
 8004194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004198:	d702      	bvc.n	80041a0 <main+0x2a8>
 800419a:	4b17      	ldr	r3, [pc, #92]	; (80041f8 <main+0x300>)
 800419c:	4a1e      	ldr	r2, [pc, #120]	; (8004218 <main+0x320>)
 800419e:	649a      	str	r2, [r3, #72]	; 0x48
  if(isnan(P_MIN)){P_MIN = -12.5f;}
 80041a0:	4b15      	ldr	r3, [pc, #84]	; (80041f8 <main+0x300>)
 80041a2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80041a6:	eef4 7a67 	vcmp.f32	s15, s15
 80041aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ae:	d702      	bvc.n	80041b6 <main+0x2be>
 80041b0:	4b11      	ldr	r3, [pc, #68]	; (80041f8 <main+0x300>)
 80041b2:	4a1a      	ldr	r2, [pc, #104]	; (800421c <main+0x324>)
 80041b4:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(V_MAX)){V_MAX = 200.0f;}
 80041b6:	4b10      	ldr	r3, [pc, #64]	; (80041f8 <main+0x300>)
 80041b8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80041bc:	eef4 7a67 	vcmp.f32	s15, s15
 80041c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c4:	d702      	bvc.n	80041cc <main+0x2d4>
 80041c6:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <main+0x300>)
 80041c8:	4a15      	ldr	r2, [pc, #84]	; (8004220 <main+0x328>)
 80041ca:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(V_MIN)){V_MIN = -200.0f;}
 80041cc:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <main+0x300>)
 80041ce:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80041d2:	eef4 7a67 	vcmp.f32	s15, s15
 80041d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041da:	d702      	bvc.n	80041e2 <main+0x2ea>
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <main+0x300>)
 80041de:	4a11      	ldr	r2, [pc, #68]	; (8004224 <main+0x32c>)
 80041e0:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(MECH_ZERO)){MECH_ZERO = 0.0f;}
 80041e2:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <main+0x300>)
 80041e4:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80041e8:	eef4 7a67 	vcmp.f32	s15, s15
 80041ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f0:	e01a      	b.n	8004228 <main+0x330>
 80041f2:	bf00      	nop
 80041f4:	20004d74 	.word	0x20004d74
 80041f8:	20004c74 	.word	0x20004c74
 80041fc:	447a0000 	.word	0x447a0000
 8004200:	42200000 	.word	0x42200000
 8004204:	42fa0000 	.word	0x42fa0000
 8004208:	41600000 	.word	0x41600000
 800420c:	40a00000 	.word	0x40a00000
 8004210:	41a80000 	.word	0x41a80000
 8004214:	43fa0000 	.word	0x43fa0000
 8004218:	41480000 	.word	0x41480000
 800421c:	c1480000 	.word	0xc1480000
 8004220:	43480000 	.word	0x43480000
 8004224:	c3480000 	.word	0xc3480000
 8004228:	d703      	bvc.n	8004232 <main+0x33a>
 800422a:	4b82      	ldr	r3, [pc, #520]	; (8004434 <main+0x53c>)
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	65da      	str	r2, [r3, #92]	; 0x5c
  if(isnan(T_MAX)){T_MAX = 10.0f;}
 8004232:	4b80      	ldr	r3, [pc, #512]	; (8004434 <main+0x53c>)
 8004234:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004238:	eef4 7a67 	vcmp.f32	s15, s15
 800423c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004240:	d702      	bvc.n	8004248 <main+0x350>
 8004242:	4b7c      	ldr	r3, [pc, #496]	; (8004434 <main+0x53c>)
 8004244:	4a7c      	ldr	r2, [pc, #496]	; (8004438 <main+0x540>)
 8004246:	661a      	str	r2, [r3, #96]	; 0x60

  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	4b7b      	ldr	r3, [pc, #492]	; (800443c <main+0x544>)
 800424e:	487c      	ldr	r0, [pc, #496]	; (8004440 <main+0x548>)
 8004250:	f009 fe08 	bl	800de64 <iprintf>
/* Controller Setup */
init_controller_params(&controller);
 8004254:	487b      	ldr	r0, [pc, #492]	; (8004444 <main+0x54c>)
 8004256:	f7fe fa45 	bl	80026e4 <init_controller_params>

/* calibration "encoder" zeroing */
memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 800425a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800425e:	2100      	movs	r1, #0
 8004260:	4879      	ldr	r0, [pc, #484]	; (8004448 <main+0x550>)
 8004262:	f009 f98d 	bl	800d580 <memset>

/* commutation encoder setup */
comm_encoder.m_zero = M_ZERO;
 8004266:	4b79      	ldr	r3, [pc, #484]	; (800444c <main+0x554>)
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	4a79      	ldr	r2, [pc, #484]	; (8004450 <main+0x558>)
 800426c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
comm_encoder.e_zero = E_ZERO;
 8004270:	4b76      	ldr	r3, [pc, #472]	; (800444c <main+0x554>)
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	4a76      	ldr	r2, [pc, #472]	; (8004450 <main+0x558>)
 8004276:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
comm_encoder.ppairs = PPAIRS;
 800427a:	4b6e      	ldr	r3, [pc, #440]	; (8004434 <main+0x53c>)
 800427c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427e:	4a74      	ldr	r2, [pc, #464]	; (8004450 <main+0x558>)
 8004280:	6693      	str	r3, [r2, #104]	; 0x68
comm_encoder.mech_zero = MECH_ZERO;
 8004282:	4b6c      	ldr	r3, [pc, #432]	; (8004434 <main+0x53c>)
 8004284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004286:	4a72      	ldr	r2, [pc, #456]	; (8004450 <main+0x558>)
 8004288:	f8c2 31e0 	str.w	r3, [r2, #480]	; 0x1e0
ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 800428c:	2164      	movs	r1, #100	; 0x64
 800428e:	4870      	ldr	r0, [pc, #448]	; (8004450 <main+0x558>)
 8004290:	f000 fbb4 	bl	80049fc <ps_warmup>
ps_sample(&comm_encoder, DT);
 8004294:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8004454 <main+0x55c>
 8004298:	486d      	ldr	r0, [pc, #436]	; (8004450 <main+0x558>)
 800429a:	f000 fc07 	bl	8004aac <ps_sample>
ps_sample(&comm_encoder, DT);
 800429e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8004454 <main+0x55c>
 80042a2:	486b      	ldr	r0, [pc, #428]	; (8004450 <main+0x558>)
 80042a4:	f000 fc02 	bl	8004aac <ps_sample>
ps_sample(&comm_encoder, DT);
 80042a8:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8004454 <main+0x55c>
 80042ac:	4868      	ldr	r0, [pc, #416]	; (8004450 <main+0x558>)
 80042ae:	f000 fbfd 	bl	8004aac <ps_sample>
if(comm_encoder.angle_multiturn[0]>PI_F){
 80042b2:	4b67      	ldr	r3, [pc, #412]	; (8004450 <main+0x558>)
 80042b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80042b8:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004458 <main+0x560>
 80042bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c4:	dd14      	ble.n	80042f0 <main+0x3f8>
  comm_encoder.angle_multiturn[0]-=TWO_PI_F;
 80042c6:	4b62      	ldr	r3, [pc, #392]	; (8004450 <main+0x558>)
 80042c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80042cc:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800445c <main+0x564>
 80042d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80042d4:	4b5e      	ldr	r3, [pc, #376]	; (8004450 <main+0x558>)
 80042d6:	edc3 7a03 	vstr	s15, [r3, #12]
  comm_encoder.turns--;
 80042da:	4b5d      	ldr	r3, [pc, #372]	; (8004450 <main+0x558>)
 80042dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e0:	3b01      	subs	r3, #1
 80042e2:	4a5b      	ldr	r2, [pc, #364]	; (8004450 <main+0x558>)
 80042e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  printf("Added\r\n");
 80042e8:	485d      	ldr	r0, [pc, #372]	; (8004460 <main+0x568>)
 80042ea:	f009 fe41 	bl	800df70 <puts>
 80042ee:	e01d      	b.n	800432c <main+0x434>
}
else if(comm_encoder.angle_multiturn[0]<-PI_F){
 80042f0:	4b57      	ldr	r3, [pc, #348]	; (8004450 <main+0x558>)
 80042f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80042f6:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8004464 <main+0x56c>
 80042fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004302:	d513      	bpl.n	800432c <main+0x434>
  comm_encoder.angle_multiturn[0] += TWO_PI_F;
 8004304:	4b52      	ldr	r3, [pc, #328]	; (8004450 <main+0x558>)
 8004306:	edd3 7a03 	vldr	s15, [r3, #12]
 800430a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800445c <main+0x564>
 800430e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004312:	4b4f      	ldr	r3, [pc, #316]	; (8004450 <main+0x558>)
 8004314:	edc3 7a03 	vstr	s15, [r3, #12]
  comm_encoder.turns++;
 8004318:	4b4d      	ldr	r3, [pc, #308]	; (8004450 <main+0x558>)
 800431a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800431e:	3301      	adds	r3, #1
 8004320:	4a4b      	ldr	r2, [pc, #300]	; (8004450 <main+0x558>)
 8004322:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  printf("Subtracted\r\n");
 8004326:	4850      	ldr	r0, [pc, #320]	; (8004468 <main+0x570>)
 8004328:	f009 fe22 	bl	800df70 <puts>
}


if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 800432c:	4b48      	ldr	r3, [pc, #288]	; (8004450 <main+0x558>)
 800432e:	4a47      	ldr	r2, [pc, #284]	; (800444c <main+0x554>)
 8004330:	33dc      	adds	r3, #220	; 0xdc
 8004332:	f102 011c 	add.w	r1, r2, #28
 8004336:	f44f 7280 	mov.w	r2, #256	; 0x100
 800433a:	4618      	mov	r0, r3
 800433c:	f009 f912 	bl	800d564 <memcpy>

/* Turn on ADCs */
//   HAL_ADC_Start(&hadc1);
//   HAL_Delay(10);
//   HAL_ADC_Start(&hadc2);
	HAL_OPAMP_Start(&hopamp1);
 8004340:	484a      	ldr	r0, [pc, #296]	; (800446c <main+0x574>)
 8004342:	f004 ff83 	bl	800924c <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp2);
 8004346:	484a      	ldr	r0, [pc, #296]	; (8004470 <main+0x578>)
 8004348:	f004 ff80 	bl	800924c <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 800434c:	4849      	ldr	r0, [pc, #292]	; (8004474 <main+0x57c>)
 800434e:	f004 ff7d 	bl	800924c <HAL_OPAMP_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)controller.ADC1_Val, 2);
 8004352:	2202      	movs	r2, #2
 8004354:	4948      	ldr	r1, [pc, #288]	; (8004478 <main+0x580>)
 8004356:	4849      	ldr	r0, [pc, #292]	; (800447c <main+0x584>)
 8004358:	f001 fda6 	bl	8005ea8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)controller.ADC2_Val, 2);
 800435c:	2202      	movs	r2, #2
 800435e:	4948      	ldr	r1, [pc, #288]	; (8004480 <main+0x588>)
 8004360:	4848      	ldr	r0, [pc, #288]	; (8004484 <main+0x58c>)
 8004362:	f001 fda1 	bl	8005ea8 <HAL_ADC_Start_DMA>

   disable_gd(&controller);
 8004366:	4837      	ldr	r0, [pc, #220]	; (8004444 <main+0x54c>)
 8004368:	f7ff fc2e 	bl	8003bc8 <disable_gd>
   HAL_Delay(10);
 800436c:	200a      	movs	r0, #10
 800436e:	f001 f9d1 	bl	8005714 <HAL_Delay>

   zero_current(&controller);
 8004372:	4834      	ldr	r0, [pc, #208]	; (8004444 <main+0x54c>)
 8004374:	f7fe f964 	bl	8002640 <zero_current>
   HAL_Delay(100);
 8004378:	2064      	movs	r0, #100	; 0x64
 800437a:	f001 f9cb 	bl	8005714 <HAL_Delay>
   printf("ADC A OFFSET: %d     ADC B OFFSET: %d     ADC C OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset, controller.adc_c_offset);
 800437e:	4b31      	ldr	r3, [pc, #196]	; (8004444 <main+0x54c>)
 8004380:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004384:	4b2f      	ldr	r3, [pc, #188]	; (8004444 <main+0x54c>)
 8004386:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800438a:	4b2e      	ldr	r3, [pc, #184]	; (8004444 <main+0x54c>)
 800438c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004390:	483d      	ldr	r0, [pc, #244]	; (8004488 <main+0x590>)
 8004392:	f009 fd67 	bl	800de64 <iprintf>
   printf("Vbus: %f\r\n",controller.v_bus);
 8004396:	4b2b      	ldr	r3, [pc, #172]	; (8004444 <main+0x54c>)
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	4618      	mov	r0, r3
 800439c:	f7fc f8fc 	bl	8000598 <__aeabi_f2d>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4839      	ldr	r0, [pc, #228]	; (800448c <main+0x594>)
 80043a6:	f009 fd5d 	bl	800de64 <iprintf>
   /* Turn on PWM */
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80043aa:	2100      	movs	r1, #0
 80043ac:	4838      	ldr	r0, [pc, #224]	; (8004490 <main+0x598>)
 80043ae:	f006 f87b 	bl	800a4a8 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80043b2:	2104      	movs	r1, #4
 80043b4:	4836      	ldr	r0, [pc, #216]	; (8004490 <main+0x598>)
 80043b6:	f006 f877 	bl	800a4a8 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80043ba:	2108      	movs	r1, #8
 80043bc:	4834      	ldr	r0, [pc, #208]	; (8004490 <main+0x598>)
 80043be:	f006 f873 	bl	800a4a8 <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80043c2:	2100      	movs	r1, #0
 80043c4:	4832      	ldr	r0, [pc, #200]	; (8004490 <main+0x598>)
 80043c6:	f007 f96f 	bl	800b6a8 <HAL_TIMEx_PWMN_Start>
      HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80043ca:	2104      	movs	r1, #4
 80043cc:	4830      	ldr	r0, [pc, #192]	; (8004490 <main+0x598>)
 80043ce:	f007 f96b 	bl	800b6a8 <HAL_TIMEx_PWMN_Start>
      HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80043d2:	2108      	movs	r1, #8
 80043d4:	482e      	ldr	r0, [pc, #184]	; (8004490 <main+0x598>)
 80043d6:	f007 f967 	bl	800b6a8 <HAL_TIMEx_PWMN_Start>

      disable_gd(&controller);
 80043da:	481a      	ldr	r0, [pc, #104]	; (8004444 <main+0x54c>)
 80043dc:	f7ff fbf4 	bl	8003bc8 <disable_gd>

	  /* CAN setup */
      HAL_GPIO_WritePin(CAN_SHDWN, GPIO_PIN_RESET); //Enable CAN
 80043e0:	2200      	movs	r2, #0
 80043e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80043e6:	482b      	ldr	r0, [pc, #172]	; (8004494 <main+0x59c>)
 80043e8:	f003 ff74 	bl	80082d4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(CAN_TERM, GPIO_PIN_RESET ); //Disable CAN termination resistor
 80043ec:	2200      	movs	r2, #0
 80043ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80043f2:	4828      	ldr	r0, [pc, #160]	; (8004494 <main+0x59c>)
 80043f4:	f003 ff6e 	bl	80082d4 <HAL_GPIO_WritePin>
	  can_tx_init(&can_tx);
	  HAL_CAN_Start(&CAN_H); //start CAN
	  __HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt  */

	  /* Set Interrupt Priorities */
	  NVIC_SetPriority(PWM_ISR, 1); // commutation > communication
 80043f8:	2101      	movs	r1, #1
 80043fa:	2019      	movs	r0, #25
 80043fc:	f7ff fd52 	bl	8003ea4 <__NVIC_SetPriority>
	  NVIC_SetPriority(CAN_ISR, 3);
 8004400:	2103      	movs	r1, #3
 8004402:	2015      	movs	r0, #21
 8004404:	f7ff fd4e 	bl	8003ea4 <__NVIC_SetPriority>

	  /* Start the FSM */
	  state.state = MENU_MODE;
 8004408:	4b23      	ldr	r3, [pc, #140]	; (8004498 <main+0x5a0>)
 800440a:	2200      	movs	r2, #0
 800440c:	701a      	strb	r2, [r3, #0]
	  state.next_state = MENU_MODE;
 800440e:	4b22      	ldr	r3, [pc, #136]	; (8004498 <main+0x5a0>)
 8004410:	2200      	movs	r2, #0
 8004412:	705a      	strb	r2, [r3, #1]
	  state.ready = 1;
 8004414:	4b20      	ldr	r3, [pc, #128]	; (8004498 <main+0x5a0>)
 8004416:	2201      	movs	r2, #1
 8004418:	70da      	strb	r2, [r3, #3]


  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 800441a:	2201      	movs	r2, #1
 800441c:	491f      	ldr	r1, [pc, #124]	; (800449c <main+0x5a4>)
 800441e:	4820      	ldr	r0, [pc, #128]	; (80044a0 <main+0x5a8>)
 8004420:	f007 fc7c 	bl	800bd1c <HAL_UART_Receive_IT>
   HAL_TIM_Base_Start_IT(&htim1);
 8004424:	481a      	ldr	r0, [pc, #104]	; (8004490 <main+0x598>)
 8004426:	f005 ff73 	bl	800a310 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	printf("A:%f B:%f C:%f V:%f \r\n",controller.i_a, controller.i_b, controller.i_c, controller.v_bus);
//	  printf("%f %f\r\n",controller.i_q, controller.i_q_des);
	HAL_Delay(100);
 800442a:	2064      	movs	r0, #100	; 0x64
 800442c:	f001 f972 	bl	8005714 <HAL_Delay>
 8004430:	e7fb      	b.n	800442a <main+0x532>
 8004432:	bf00      	nop
 8004434:	20004c74 	.word	0x20004c74
 8004438:	41200000 	.word	0x41200000
 800443c:	3ff00000 	.word	0x3ff00000
 8004440:	08012534 	.word	0x08012534
 8004444:	20000468 	.word	0x20000468
 8004448:	20004a88 	.word	0x20004a88
 800444c:	20004d74 	.word	0x20004d74
 8004450:	20000778 	.word	0x20000778
 8004454:	388bcf64 	.word	0x388bcf64
 8004458:	40490fdb 	.word	0x40490fdb
 800445c:	40c90fdb 	.word	0x40c90fdb
 8004460:	08012558 	.word	0x08012558
 8004464:	c0490fdb 	.word	0xc0490fdb
 8004468:	08012560 	.word	0x08012560
 800446c:	20004f74 	.word	0x20004f74
 8004470:	20004fb0 	.word	0x20004fb0
 8004474:	20004fec 	.word	0x20004fec
 8004478:	20000760 	.word	0x20000760
 800447c:	2000021c 	.word	0x2000021c
 8004480:	20000764 	.word	0x20000764
 8004484:	20000288 	.word	0x20000288
 8004488:	0801256c 	.word	0x0801256c
 800448c:	080125ac 	.word	0x080125ac
 8004490:	2000502c 	.word	0x2000502c
 8004494:	48000800 	.word	0x48000800
 8004498:	20000768 	.word	0x20000768
 800449c:	20004c70 	.word	0x20004c70
 80044a0:	20005078 	.word	0x20005078

080044a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b0a4      	sub	sp, #144	; 0x90
 80044a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044ae:	2238      	movs	r2, #56	; 0x38
 80044b0:	2100      	movs	r1, #0
 80044b2:	4618      	mov	r0, r3
 80044b4:	f009 f864 	bl	800d580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	605a      	str	r2, [r3, #4]
 80044c2:	609a      	str	r2, [r3, #8]
 80044c4:	60da      	str	r2, [r3, #12]
 80044c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044c8:	463b      	mov	r3, r7
 80044ca:	2244      	movs	r2, #68	; 0x44
 80044cc:	2100      	movs	r1, #0
 80044ce:	4618      	mov	r0, r3
 80044d0:	f009 f856 	bl	800d580 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80044d4:	2000      	movs	r0, #0
 80044d6:	f004 feeb 	bl	80092b0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80044da:	2301      	movs	r3, #1
 80044dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80044de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044e4:	2302      	movs	r3, #2
 80044e6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80044e8:	2303      	movs	r3, #3
 80044ea:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80044ec:	2302      	movs	r3, #2
 80044ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80044f0:	2354      	movs	r3, #84	; 0x54
 80044f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044f6:	2302      	movs	r3, #2
 80044f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80044fc:	2302      	movs	r3, #2
 80044fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004502:	2302      	movs	r3, #2
 8004504:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004508:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800450c:	4618      	mov	r0, r3
 800450e:	f004 ff83 	bl	8009418 <HAL_RCC_OscConfig>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8004518:	f000 f82f 	bl	800457a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800451c:	230f      	movs	r3, #15
 800451e:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004520:	2303      	movs	r3, #3
 8004522:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004524:	2300      	movs	r3, #0
 8004526:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004528:	2300      	movs	r3, #0
 800452a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800452c:	2300      	movs	r3, #0
 800452e:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004530:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004534:	2104      	movs	r1, #4
 8004536:	4618      	mov	r0, r3
 8004538:	f005 fa86 	bl	8009a48 <HAL_RCC_ClockConfig>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8004542:	f000 f81a 	bl	800457a <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8004546:	f249 0342 	movw	r3, #36930	; 0x9042
 800454a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800454c:	2300      	movs	r3, #0
 800454e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004550:	2300      	movs	r3, #0
 8004552:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004554:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004558:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800455a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800455e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004560:	463b      	mov	r3, r7
 8004562:	4618      	mov	r0, r3
 8004564:	f005 fc8c 	bl	8009e80 <HAL_RCCEx_PeriphCLKConfig>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800456e:	f000 f804 	bl	800457a <Error_Handler>
  }
}
 8004572:	bf00      	nop
 8004574:	3790      	adds	r7, #144	; 0x90
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800457a:	b480      	push	{r7}
 800457c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800457e:	b672      	cpsid	i
}
 8004580:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004582:	e7fe      	b.n	8004582 <Error_Handler+0x8>

08004584 <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	ed87 0a01 	vstr	s0, [r7, #4]
 800458e:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8004592:	ed97 7a01 	vldr	s14, [r7, #4]
 8004596:	edd7 7a00 	vldr	s15, [r7]
 800459a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800459e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a2:	dd01      	ble.n	80045a8 <fast_fmaxf+0x24>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	e000      	b.n	80045aa <fast_fmaxf+0x26>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	ee07 3a90 	vmov	s15, r3
    }
 80045ae:	eeb0 0a67 	vmov.f32	s0, s15
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <fast_fminf>:

float fast_fminf(float x, float y){
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80045c6:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 80045ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80045ce:	edd7 7a00 	vldr	s15, [r7]
 80045d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045da:	d501      	bpl.n	80045e0 <fast_fminf+0x24>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	e000      	b.n	80045e2 <fast_fminf+0x26>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	ee07 3a90 	vmov	s15, r3
    }
 80045e6:	eeb0 0a67 	vmov.f32	s0, s15
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <fmaxf3>:

float fmaxf3(float x, float y, float z){
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80045fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8004602:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 8004606:	ed97 7a03 	vldr	s14, [r7, #12]
 800460a:	edd7 7a02 	vldr	s15, [r7, #8]
 800460e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004616:	dd0c      	ble.n	8004632 <fmaxf3+0x3e>
 8004618:	ed97 7a03 	vldr	s14, [r7, #12]
 800461c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004620:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004628:	dd01      	ble.n	800462e <fmaxf3+0x3a>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	e00d      	b.n	800464a <fmaxf3+0x56>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	e00b      	b.n	800464a <fmaxf3+0x56>
 8004632:	ed97 7a02 	vldr	s14, [r7, #8]
 8004636:	edd7 7a01 	vldr	s15, [r7, #4]
 800463a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800463e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004642:	dd01      	ble.n	8004648 <fmaxf3+0x54>
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	e000      	b.n	800464a <fmaxf3+0x56>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	ee07 3a90 	vmov	s15, r3
    }
 800464e:	eeb0 0a67 	vmov.f32	s0, s15
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <fminf3>:

float fminf3(float x, float y, float z){
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	ed87 0a03 	vstr	s0, [r7, #12]
 8004666:	edc7 0a02 	vstr	s1, [r7, #8]
 800466a:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 800466e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004672:	edd7 7a02 	vldr	s15, [r7, #8]
 8004676:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800467a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800467e:	d50c      	bpl.n	800469a <fminf3+0x3e>
 8004680:	ed97 7a03 	vldr	s14, [r7, #12]
 8004684:	edd7 7a01 	vldr	s15, [r7, #4]
 8004688:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800468c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004690:	d501      	bpl.n	8004696 <fminf3+0x3a>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	e00d      	b.n	80046b2 <fminf3+0x56>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	e00b      	b.n	80046b2 <fminf3+0x56>
 800469a:	ed97 7a02 	vldr	s14, [r7, #8]
 800469e:	edd7 7a01 	vldr	s15, [r7, #4]
 80046a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046aa:	d501      	bpl.n	80046b0 <fminf3+0x54>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	e000      	b.n	80046b2 <fminf3+0x56>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	ee07 3a90 	vmov	s15, r3
    }
 80046b6:	eeb0 0a67 	vmov.f32	s0, s15
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	ed93 7a00 	vldr	s14, [r3]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	edd3 7a00 	vldr	s15, [r3]
 80046de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	edd3 6a00 	vldr	s13, [r3]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	edd3 7a00 	vldr	s15, [r3]
 80046ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046f6:	eeb0 0a67 	vmov.f32	s0, s15
 80046fa:	f00d f961 	bl	80119c0 <sqrtf>
 80046fe:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 8004702:	ed97 7a05 	vldr	s14, [r7, #20]
 8004706:	edd7 7a01 	vldr	s15, [r7, #4]
 800470a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800470e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004712:	dc00      	bgt.n	8004716 <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 8004714:	e01b      	b.n	800474e <limit_norm+0x8a>
        *x = *x * limit/norm;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	ed93 7a00 	vldr	s14, [r3]
 800471c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004720:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004724:	ed97 7a05 	vldr	s14, [r7, #20]
 8004728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	ed93 7a00 	vldr	s14, [r3]
 8004738:	edd7 7a01 	vldr	s15, [r7, #4]
 800473c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004740:	ed97 7a05 	vldr	s14, [r7, #20]
 8004744:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	edc3 7a00 	vstr	s15, [r3]
    }
 800474e:	bf00      	nop
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <sin_lut>:
    float span = x_max - x_min;
    float offset = x_min;
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
    }

float sin_lut(float theta){
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 8004762:	eddf 0a17 	vldr	s1, [pc, #92]	; 80047c0 <sin_lut+0x68>
 8004766:	ed97 0a01 	vldr	s0, [r7, #4]
 800476a:	f00d f909 	bl	8011980 <fmodf>
 800476e:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8004772:	edd7 7a01 	vldr	s15, [r7, #4]
 8004776:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800477a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477e:	d506      	bpl.n	800478e <sin_lut+0x36>
 8004780:	edd7 7a01 	vldr	s15, [r7, #4]
 8004784:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80047c0 <sin_lut+0x68>
 8004788:	ee77 7a87 	vadd.f32	s15, s15, s14
 800478c:	e001      	b.n	8004792 <sin_lut+0x3a>
 800478e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004792:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 8004796:	edd7 7a01 	vldr	s15, [r7, #4]
 800479a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80047c4 <sin_lut+0x6c>
 800479e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047a6:	ee17 3a90 	vmov	r3, s15
 80047aa:	4a07      	ldr	r2, [pc, #28]	; (80047c8 <sin_lut+0x70>)
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	ee07 3a90 	vmov	s15, r3
}
 80047b6:	eeb0 0a67 	vmov.f32	s0, s15
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40c90fdb 	.word	0x40c90fdb
 80047c4:	42a2f983 	.word	0x42a2f983
 80047c8:	08012634 	.word	0x08012634

080047cc <cos_lut>:

float cos_lut(float theta){
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 80047d6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80047f8 <cos_lut+0x2c>
 80047da:	edd7 7a01 	vldr	s15, [r7, #4]
 80047de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047e2:	eeb0 0a67 	vmov.f32	s0, s15
 80047e6:	f7ff ffb7 	bl	8004758 <sin_lut>
 80047ea:	eef0 7a40 	vmov.f32	s15, s0
}
 80047ee:	eeb0 0a67 	vmov.f32	s0, s15
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	3fc90fdb 	.word	0x3fc90fdb

080047fc <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8004800:	4b13      	ldr	r3, [pc, #76]	; (8004850 <MX_OPAMP1_Init+0x54>)
 8004802:	4a14      	ldr	r2, [pc, #80]	; (8004854 <MX_OPAMP1_Init+0x58>)
 8004804:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8004806:	4b12      	ldr	r3, [pc, #72]	; (8004850 <MX_OPAMP1_Init+0x54>)
 8004808:	2280      	movs	r2, #128	; 0x80
 800480a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 800480c:	4b10      	ldr	r3, [pc, #64]	; (8004850 <MX_OPAMP1_Init+0x54>)
 800480e:	2240      	movs	r2, #64	; 0x40
 8004810:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004812:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <MX_OPAMP1_Init+0x54>)
 8004814:	2200      	movs	r2, #0
 8004816:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8004818:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <MX_OPAMP1_Init+0x54>)
 800481a:	2201      	movs	r2, #1
 800481c:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800481e:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <MX_OPAMP1_Init+0x54>)
 8004820:	2200      	movs	r2, #0
 8004822:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004824:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <MX_OPAMP1_Init+0x54>)
 8004826:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800482a:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800482c:	4b08      	ldr	r3, [pc, #32]	; (8004850 <MX_OPAMP1_Init+0x54>)
 800482e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004832:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <MX_OPAMP1_Init+0x54>)
 8004836:	2200      	movs	r2, #0
 8004838:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800483a:	4805      	ldr	r0, [pc, #20]	; (8004850 <MX_OPAMP1_Init+0x54>)
 800483c:	f004 fc36 	bl	80090ac <HAL_OPAMP_Init>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8004846:	f7ff fe98 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 800484a:	bf00      	nop
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20004f74 	.word	0x20004f74
 8004854:	40010300 	.word	0x40010300

08004858 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 800485c:	4b13      	ldr	r3, [pc, #76]	; (80048ac <MX_OPAMP2_Init+0x54>)
 800485e:	4a14      	ldr	r2, [pc, #80]	; (80048b0 <MX_OPAMP2_Init+0x58>)
 8004860:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8004862:	4b12      	ldr	r3, [pc, #72]	; (80048ac <MX_OPAMP2_Init+0x54>)
 8004864:	2280      	movs	r2, #128	; 0x80
 8004866:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8004868:	4b10      	ldr	r3, [pc, #64]	; (80048ac <MX_OPAMP2_Init+0x54>)
 800486a:	2240      	movs	r2, #64	; 0x40
 800486c:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800486e:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <MX_OPAMP2_Init+0x54>)
 8004870:	2200      	movs	r2, #0
 8004872:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 8004874:	4b0d      	ldr	r3, [pc, #52]	; (80048ac <MX_OPAMP2_Init+0x54>)
 8004876:	2201      	movs	r2, #1
 8004878:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800487a:	4b0c      	ldr	r3, [pc, #48]	; (80048ac <MX_OPAMP2_Init+0x54>)
 800487c:	2200      	movs	r2, #0
 800487e:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004880:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <MX_OPAMP2_Init+0x54>)
 8004882:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004886:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8004888:	4b08      	ldr	r3, [pc, #32]	; (80048ac <MX_OPAMP2_Init+0x54>)
 800488a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800488e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004890:	4b06      	ldr	r3, [pc, #24]	; (80048ac <MX_OPAMP2_Init+0x54>)
 8004892:	2200      	movs	r2, #0
 8004894:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8004896:	4805      	ldr	r0, [pc, #20]	; (80048ac <MX_OPAMP2_Init+0x54>)
 8004898:	f004 fc08 	bl	80090ac <HAL_OPAMP_Init>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 80048a2:	f7ff fe6a 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 80048a6:	bf00      	nop
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20004fb0 	.word	0x20004fb0
 80048b0:	40010304 	.word	0x40010304

080048b4 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 80048b8:	4b13      	ldr	r3, [pc, #76]	; (8004908 <MX_OPAMP3_Init+0x54>)
 80048ba:	4a14      	ldr	r2, [pc, #80]	; (800490c <MX_OPAMP3_Init+0x58>)
 80048bc:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80048be:	4b12      	ldr	r3, [pc, #72]	; (8004908 <MX_OPAMP3_Init+0x54>)
 80048c0:	2280      	movs	r2, #128	; 0x80
 80048c2:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80048c4:	4b10      	ldr	r3, [pc, #64]	; (8004908 <MX_OPAMP3_Init+0x54>)
 80048c6:	2240      	movs	r2, #64	; 0x40
 80048c8:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80048ca:	4b0f      	ldr	r3, [pc, #60]	; (8004908 <MX_OPAMP3_Init+0x54>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 80048d0:	4b0d      	ldr	r3, [pc, #52]	; (8004908 <MX_OPAMP3_Init+0x54>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80048d6:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <MX_OPAMP3_Init+0x54>)
 80048d8:	2200      	movs	r2, #0
 80048da:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80048dc:	4b0a      	ldr	r3, [pc, #40]	; (8004908 <MX_OPAMP3_Init+0x54>)
 80048de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048e2:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80048e4:	4b08      	ldr	r3, [pc, #32]	; (8004908 <MX_OPAMP3_Init+0x54>)
 80048e6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80048ea:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80048ec:	4b06      	ldr	r3, [pc, #24]	; (8004908 <MX_OPAMP3_Init+0x54>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80048f2:	4805      	ldr	r0, [pc, #20]	; (8004908 <MX_OPAMP3_Init+0x54>)
 80048f4:	f004 fbda 	bl	80090ac <HAL_OPAMP_Init>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 80048fe:	f7ff fe3c 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8004902:	bf00      	nop
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	20004fec 	.word	0x20004fec
 800490c:	40010308 	.word	0x40010308

08004910 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08a      	sub	sp, #40	; 0x28
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004918:	f107 0314 	add.w	r3, r7, #20
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	609a      	str	r2, [r3, #8]
 8004924:	60da      	str	r2, [r3, #12]
 8004926:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a2e      	ldr	r2, [pc, #184]	; (80049e8 <HAL_OPAMP_MspInit+0xd8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d119      	bne.n	8004966 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004932:	4b2e      	ldr	r3, [pc, #184]	; (80049ec <HAL_OPAMP_MspInit+0xdc>)
 8004934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004936:	4a2d      	ldr	r2, [pc, #180]	; (80049ec <HAL_OPAMP_MspInit+0xdc>)
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800493e:	4b2b      	ldr	r3, [pc, #172]	; (80049ec <HAL_OPAMP_MspInit+0xdc>)
 8004940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800494a:	230a      	movs	r3, #10
 800494c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800494e:	2303      	movs	r3, #3
 8004950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004952:	2300      	movs	r3, #0
 8004954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004956:	f107 0314 	add.w	r3, r7, #20
 800495a:	4619      	mov	r1, r3
 800495c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004960:	f003 fb36 	bl	8007fd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8004964:	e03b      	b.n	80049de <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a21      	ldr	r2, [pc, #132]	; (80049f0 <HAL_OPAMP_MspInit+0xe0>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d119      	bne.n	80049a4 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004970:	4b1e      	ldr	r3, [pc, #120]	; (80049ec <HAL_OPAMP_MspInit+0xdc>)
 8004972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004974:	4a1d      	ldr	r2, [pc, #116]	; (80049ec <HAL_OPAMP_MspInit+0xdc>)
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800497c:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <HAL_OPAMP_MspInit+0xdc>)
 800497e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004988:	23a0      	movs	r3, #160	; 0xa0
 800498a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800498c:	2303      	movs	r3, #3
 800498e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004990:	2300      	movs	r3, #0
 8004992:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004994:	f107 0314 	add.w	r3, r7, #20
 8004998:	4619      	mov	r1, r3
 800499a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800499e:	f003 fb17 	bl	8007fd0 <HAL_GPIO_Init>
}
 80049a2:	e01c      	b.n	80049de <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a12      	ldr	r2, [pc, #72]	; (80049f4 <HAL_OPAMP_MspInit+0xe4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d117      	bne.n	80049de <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049ae:	4b0f      	ldr	r3, [pc, #60]	; (80049ec <HAL_OPAMP_MspInit+0xdc>)
 80049b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b2:	4a0e      	ldr	r2, [pc, #56]	; (80049ec <HAL_OPAMP_MspInit+0xdc>)
 80049b4:	f043 0302 	orr.w	r3, r3, #2
 80049b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049ba:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <HAL_OPAMP_MspInit+0xdc>)
 80049bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	60bb      	str	r3, [r7, #8]
 80049c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80049c6:	2305      	movs	r3, #5
 80049c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049ca:	2303      	movs	r3, #3
 80049cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049d2:	f107 0314 	add.w	r3, r7, #20
 80049d6:	4619      	mov	r1, r3
 80049d8:	4807      	ldr	r0, [pc, #28]	; (80049f8 <HAL_OPAMP_MspInit+0xe8>)
 80049da:	f003 faf9 	bl	8007fd0 <HAL_GPIO_Init>
}
 80049de:	bf00      	nop
 80049e0:	3728      	adds	r7, #40	; 0x28
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40010300 	.word	0x40010300
 80049ec:	40021000 	.word	0x40021000
 80049f0:	40010304 	.word	0x40010304
 80049f4:	40010308 	.word	0x40010308
 80049f8:	48000400 	.word	0x48000400

080049fc <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af04      	add	r7, sp, #16
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
	encoder->config.raw = 0;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	801a      	strh	r2, [r3, #0]
	encoder->config.bit.PM = 0;
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	8813      	ldrh	r3, [r2, #0]
 8004a10:	f36f 2309 	bfc	r3, #8, #2
 8004a14:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.HYST = 0;
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	8813      	ldrh	r3, [r2, #0]
 8004a1a:	f36f 238b 	bfc	r3, #10, #2
 8004a1e:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.OUTS = 0;
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	8813      	ldrh	r3, [r2, #0]
 8004a24:	f36f 330d 	bfc	r3, #12, #2
 8004a28:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.PWMF = 0;
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	8813      	ldrh	r3, [r2, #0]
 8004a2e:	f36f 338f 	bfc	r3, #14, #2
 8004a32:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.SF = 3;
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	8813      	ldrh	r3, [r2, #0]
 8004a38:	f043 0303 	orr.w	r3, r3, #3
 8004a3c:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.FTH = 7;
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	8813      	ldrh	r3, [r2, #0]
 8004a42:	f043 031c 	orr.w	r3, r3, #28
 8004a46:	8013      	strh	r3, [r2, #0]
	encoder->config.bit.WD = 0;
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	8813      	ldrh	r3, [r2, #0]
 8004a4c:	f36f 1345 	bfc	r3, #5, #1
 8004a50:	8013      	strh	r3, [r2, #0]
	HAL_I2C_Mem_Write(&ENC_I2C, ENC_ADDRESS,0x01,I2C_MEMADD_SIZE_8BIT, (uint8_t*)&encoder->config.raw, 2,2);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2202      	movs	r2, #2
 8004a56:	9202      	str	r2, [sp, #8]
 8004a58:	2202      	movs	r2, #2
 8004a5a:	9201      	str	r2, [sp, #4]
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	2301      	movs	r3, #1
 8004a60:	2201      	movs	r2, #1
 8004a62:	216c      	movs	r1, #108	; 0x6c
 8004a64:	4810      	ldr	r0, [pc, #64]	; (8004aa8 <ps_warmup+0xac>)
 8004a66:	f003 fdd3 	bl	8008610 <HAL_I2C_Mem_Write>
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	e012      	b.n	8004a96 <ps_warmup+0x9a>
		encoder->data.raw = 0;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	805a      	strh	r2, [r3, #2]
		HAL_I2C_Mem_Read(&ENC_I2C, ENC_ADDRESS,0x0C,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&encoder->data.raw, 2,2);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3302      	adds	r3, #2
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	9202      	str	r2, [sp, #8]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	9201      	str	r2, [sp, #4]
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	2301      	movs	r3, #1
 8004a86:	220c      	movs	r2, #12
 8004a88:	216c      	movs	r1, #108	; 0x6c
 8004a8a:	4807      	ldr	r0, [pc, #28]	; (8004aa8 <ps_warmup+0xac>)
 8004a8c:	f003 fed4 	bl	8008838 <HAL_I2C_Mem_Read>
	for(int i = 0; i<n; i++){
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	3301      	adds	r3, #1
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	dbe8      	blt.n	8004a70 <ps_warmup+0x74>
	}
}
 8004a9e:	bf00      	nop
 8004aa0:	bf00      	nop
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	2000041c 	.word	0x2000041c

08004aac <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08c      	sub	sp, #48	; 0x30
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	609a      	str	r2, [r3, #8]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 8004ac0:	2313      	movs	r3, #19
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac4:	e011      	b.n	8004aea <ps_sample+0x3e>
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	3302      	adds	r3, #2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	3302      	adds	r3, #2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	dcea      	bgt.n	8004ac6 <ps_sample+0x1a>
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->data.raw = 0;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	805a      	strh	r2, [r3, #2]
	HAL_I2C_Master_Receive(&ENC_I2C, ENC_ADDRESS,(uint8_t*)&encoder->data.raw, 2,2);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	1c9a      	adds	r2, r3, #2
 8004afa:	2302      	movs	r3, #2
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	2302      	movs	r3, #2
 8004b00:	216c      	movs	r1, #108	; 0x6c
 8004b02:	489c      	ldr	r0, [pc, #624]	; (8004d74 <ps_sample+0x2c8>)
 8004b04:	f003 fc8e 	bl	8008424 <HAL_I2C_Master_Receive>
	uint16_t angle = ((encoder->data.bit.angle8_12<<8)&0xF00)|encoder->data.bit.angle0_7;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	885b      	ldrh	r3, [r3, #2]
 8004b0c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	b21b      	sxth	r3, r3
 8004b16:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b1a:	b21a      	sxth	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	885b      	ldrh	r3, [r3, #2]
 8004b20:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	b21b      	sxth	r3, r3
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	b21b      	sxth	r3, r3
 8004b2c:	83fb      	strh	r3, [r7, #30]
	encoder->raw = angle;
 8004b2e:	8bfa      	ldrh	r2, [r7, #30]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	675a      	str	r2, [r3, #116]	; 0x74

	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>7];				// lookup table lower entry
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b38:	11db      	asrs	r3, r3, #7
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	3336      	adds	r3, #54	; 0x36
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	61bb      	str	r3, [r7, #24]
	int off_2 = encoder->offset_lut[((encoder->raw>>7)+1)%128];		// lookup table higher entry
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b4a:	11db      	asrs	r3, r3, #7
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	425a      	negs	r2, r3
 8004b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b58:	bf58      	it	pl
 8004b5a:	4253      	negpl	r3, r2
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	3336      	adds	r3, #54	; 0x36
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	617b      	str	r3, [r7, #20]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>7)<<7))>>7);     // Interpolate between lookup table entries
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b76:	fb02 f303 	mul.w	r3, r2, r3
 8004b7a:	11db      	asrs	r3, r3, #7
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4413      	add	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]
	encoder->count = encoder->raw - off_interp;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad2      	subs	r2, r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	679a      	str	r2, [r3, #120]	; 0x78


	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count))/((float)ENC_CPR);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b92:	ee07 3a90 	vmov	s15, r3
 8004b96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b9a:	eddf 6a77 	vldr	s13, [pc, #476]	; 8004d78 <ps_sample+0x2cc>
 8004b9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	edc3 7a01 	vstr	s15, [r3, #4]
	int int_angle = encoder->angle_singleturn;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	edd3 7a01 	vldr	s15, [r3, #4]
 8004bae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bb2:	ee17 3a90 	vmov	r3, s15
 8004bb6:	60fb      	str	r3, [r7, #12]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	ed93 7a01 	vldr	s14, [r3, #4]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	ee07 3a90 	vmov	s15, r3
 8004bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bcc:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8004d7c <ps_sample+0x2d0>
 8004bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	edc3 7a01 	vstr	s15, [r3, #4]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	edd3 7a01 	vldr	s15, [r3, #4]
 8004be0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be8:	d507      	bpl.n	8004bfa <ps_sample+0x14e>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	edd3 7a01 	vldr	s15, [r3, #4]
 8004bf0:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8004d7c <ps_sample+0x2d0>
 8004bf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004bf8:	e002      	b.n	8004c00 <ps_sample+0x154>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004c10:	4b5b      	ldr	r3, [pc, #364]	; (8004d80 <ps_sample+0x2d4>)
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	ee07 3a90 	vmov	s15, r3
 8004c1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c22:	eddf 6a55 	vldr	s13, [pc, #340]	; 8004d78 <ps_sample+0x2cc>
 8004c26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	int_angle = (int)encoder->elec_angle;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004c36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c3a:	ee17 3a90 	vmov	r3, s15
 8004c3e:	60fb      	str	r3, [r7, #12]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	ee07 3a90 	vmov	s15, r3
 8004c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c54:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8004d7c <ps_sample+0x2d0>
 8004c58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004c68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c70:	d507      	bpl.n	8004c82 <ps_sample+0x1d6>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004c78:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004d7c <ps_sample+0x2d0>
 8004c7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c80:	e002      	b.n	8004c88 <ps_sample+0x1dc>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	/* Rollover */
	int rollover = 0;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	623b      	str	r3, [r7, #32]
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ca2:	edc7 7a02 	vstr	s15, [r7, #8]
	if(angle_diff > PI_F){rollover = -1;}
 8004ca6:	edd7 7a02 	vldr	s15, [r7, #8]
 8004caa:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8004d84 <ps_sample+0x2d8>
 8004cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb6:	dd03      	ble.n	8004cc0 <ps_sample+0x214>
 8004cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cbc:	623b      	str	r3, [r7, #32]
 8004cbe:	e00a      	b.n	8004cd6 <ps_sample+0x22a>
	else if(angle_diff < -PI_F){rollover = 1;}
 8004cc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cc4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004d88 <ps_sample+0x2dc>
 8004cc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd0:	d501      	bpl.n	8004cd6 <ps_sample+0x22a>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	623b      	str	r3, [r7, #32]
	encoder->turns += rollover;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	441a      	add	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if(!encoder->first_sample){
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 31dc 	ldrb.w	r3, [r3, #476]	; 0x1dc
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d107      	bne.n	8004d00 <ps_sample+0x254>
		encoder->turns = 0;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		encoder->first_sample = 1;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
	}

	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns-encoder->mech_zero;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	ed93 7a01 	vldr	s14, [r3, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d0c:	ee07 3a90 	vmov	s15, r3
 8004d10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d14:	eddf 6a19 	vldr	s13, [pc, #100]	; 8004d7c <ps_sample+0x2d0>
 8004d18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004d1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8004d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	edc3 7a03 	vstr	s15, [r3, #12]

	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	ed93 7a03 	vldr	s14, [r3, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004d3c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004d40:	edd7 7a00 	vldr	s15, [r7]
 8004d44:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8004d48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

}
 8004d6c:	bf00      	nop
 8004d6e:	3728      	adds	r7, #40	; 0x28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	2000041c 	.word	0x2000041c
 8004d78:	45800000 	.word	0x45800000
 8004d7c:	40c90fdb 	.word	0x40c90fdb
 8004d80:	20004d74 	.word	0x20004d74
 8004d84:	40490fdb 	.word	0x40490fdb
 8004d88:	c0490fdb 	.word	0xc0490fdb

08004d8c <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
//	printf("Raw: %d\r\n", encoder->raw);
	printf("Raw: %d", encoder->raw);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	481d      	ldr	r0, [pc, #116]	; (8004e14 <ps_print+0x88>)
 8004d9e:	f009 f861 	bl	800de64 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004da6:	4619      	mov	r1, r3
 8004da8:	481b      	ldr	r0, [pc, #108]	; (8004e18 <ps_print+0x8c>)
 8004daa:	f009 f85b 	bl	800de64 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fb fbf0 	bl	8000598 <__aeabi_f2d>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4817      	ldr	r0, [pc, #92]	; (8004e1c <ps_print+0x90>)
 8004dbe:	f009 f851 	bl	800de64 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fb fbe6 	bl	8000598 <__aeabi_f2d>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4813      	ldr	r0, [pc, #76]	; (8004e20 <ps_print+0x94>)
 8004dd2:	f009 f847 	bl	800de64 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fb fbdc 	bl	8000598 <__aeabi_f2d>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	480f      	ldr	r0, [pc, #60]	; (8004e24 <ps_print+0x98>)
 8004de6:	f009 f83d 	bl	800de64 <iprintf>
	printf("   Turns:  %d", encoder->turns);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004df0:	4619      	mov	r1, r3
 8004df2:	480d      	ldr	r0, [pc, #52]	; (8004e28 <ps_print+0x9c>)
 8004df4:	f009 f836 	bl	800de64 <iprintf>
	printf("   CAN:   %f\r\n", encoder->angle_multiturn[0]);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fb fbcb 	bl	8000598 <__aeabi_f2d>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	4809      	ldr	r0, [pc, #36]	; (8004e2c <ps_print+0xa0>)
 8004e08:	f009 f82c 	bl	800de64 <iprintf>
	//HAL_Delay(dt_ms);
}
 8004e0c:	bf00      	nop
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	080125b8 	.word	0x080125b8
 8004e18:	080125c0 	.word	0x080125c0
 8004e1c:	080125d8 	.word	0x080125d8
 8004e20:	080125ec 	.word	0x080125ec
 8004e24:	08012600 	.word	0x08012600
 8004e28:	08012614 	.word	0x08012614
 8004e2c:	08012624 	.word	0x08012624

08004e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e36:	4b0f      	ldr	r3, [pc, #60]	; (8004e74 <HAL_MspInit+0x44>)
 8004e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e3a:	4a0e      	ldr	r2, [pc, #56]	; (8004e74 <HAL_MspInit+0x44>)
 8004e3c:	f043 0301 	orr.w	r3, r3, #1
 8004e40:	6613      	str	r3, [r2, #96]	; 0x60
 8004e42:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <HAL_MspInit+0x44>)
 8004e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	607b      	str	r3, [r7, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e4e:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <HAL_MspInit+0x44>)
 8004e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e52:	4a08      	ldr	r2, [pc, #32]	; (8004e74 <HAL_MspInit+0x44>)
 8004e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e58:	6593      	str	r3, [r2, #88]	; 0x58
 8004e5a:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <HAL_MspInit+0x44>)
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e62:	603b      	str	r3, [r7, #0]
 8004e64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004e66:	f004 fac7 	bl	80093f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40021000 	.word	0x40021000

08004e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e7c:	e7fe      	b.n	8004e7c <NMI_Handler+0x4>

08004e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e82:	e7fe      	b.n	8004e82 <HardFault_Handler+0x4>

08004e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e88:	e7fe      	b.n	8004e88 <MemManage_Handler+0x4>

08004e8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e8e:	e7fe      	b.n	8004e8e <BusFault_Handler+0x4>

08004e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e94:	e7fe      	b.n	8004e94 <UsageFault_Handler+0x4>

08004e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e96:	b480      	push	{r7}
 8004e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e9a:	bf00      	nop
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ea8:	bf00      	nop
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004eb6:	bf00      	nop
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ec4:	f000 fc08 	bl	80056d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ec8:	bf00      	nop
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004ed0:	4802      	ldr	r0, [pc, #8]	; (8004edc <DMA1_Channel1_IRQHandler+0x10>)
 8004ed2:	f002 f95e 	bl	8007192 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004ed6:	bf00      	nop
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	200002f4 	.word	0x200002f4

08004ee0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004ee4:	4802      	ldr	r0, [pc, #8]	; (8004ef0 <DMA1_Channel2_IRQHandler+0x10>)
 8004ee6:	f002 f954 	bl	8007192 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004eea:	bf00      	nop
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000354 	.word	0x20000354

08004ef4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004ef8:	4802      	ldr	r0, [pc, #8]	; (8004f04 <FDCAN1_IT0_IRQHandler+0x10>)
 8004efa:	f002 fbf3 	bl	80076e4 <HAL_FDCAN_IRQHandler>
//  else{
//	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
//	  controller.timeout = 0;					// Reset timeout counter
//  }
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004efe:	bf00      	nop
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	200003b8 	.word	0x200003b8

08004f08 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
//	HAL_GPIO_WritePin(PWM_PIN, GPIO_PIN_SET );	// Useful for timing
	analog_sample(&controller);
 8004f0c:	480b      	ldr	r0, [pc, #44]	; (8004f3c <TIM1_UP_TIM16_IRQHandler+0x34>)
 8004f0e:	f7fd f939 	bl	8002184 <analog_sample>
	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 8004f12:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8004f40 <TIM1_UP_TIM16_IRQHandler+0x38>
 8004f16:	480b      	ldr	r0, [pc, #44]	; (8004f44 <TIM1_UP_TIM16_IRQHandler+0x3c>)
 8004f18:	f7ff fdc8 	bl	8004aac <ps_sample>
//	  HAL_GPIO_WritePin(LoopTime, GPIO_PIN_SET );

	/* Run Finite State Machine */
	run_fsm(&state);
 8004f1c:	480a      	ldr	r0, [pc, #40]	; (8004f48 <TIM1_UP_TIM16_IRQHandler+0x40>)
 8004f1e:	f7fd ff8d 	bl	8002e3c <run_fsm>

	/* increment loop count */
	controller.loop_count++;
 8004f22:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <TIM1_UP_TIM16_IRQHandler+0x34>)
 8004f24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f28:	3301      	adds	r3, #1
 8004f2a:	4a04      	ldr	r2, [pc, #16]	; (8004f3c <TIM1_UP_TIM16_IRQHandler+0x34>)
 8004f2c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004f30:	4806      	ldr	r0, [pc, #24]	; (8004f4c <TIM1_UP_TIM16_IRQHandler+0x44>)
 8004f32:	f005 fbb9 	bl	800a6a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
//	HAL_GPIO_WritePin(PWM_PIN, GPIO_PIN_RESET );	// Useful for timing
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004f36:	bf00      	nop
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20000468 	.word	0x20000468
 8004f40:	388bcf64 	.word	0x388bcf64
 8004f44:	20000778 	.word	0x20000778
 8004f48:	20000768 	.word	0x20000768
 8004f4c:	2000502c 	.word	0x2000502c

08004f50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004f56:	4810      	ldr	r0, [pc, #64]	; (8004f98 <USART2_IRQHandler+0x48>)
 8004f58:	f006 ff26 	bl	800bda8 <HAL_UART_IRQHandler>

  char c = Serial2RxBuffer[0];
 8004f5c:	4b0f      	ldr	r3, [pc, #60]	; (8004f9c <USART2_IRQHandler+0x4c>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	71fb      	strb	r3, [r7, #7]
  update_fsm(&state, c);
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	4619      	mov	r1, r3
 8004f66:	480e      	ldr	r0, [pc, #56]	; (8004fa0 <USART2_IRQHandler+0x50>)
 8004f68:	f7fe f8de 	bl	8003128 <update_fsm>
  if(c == 'p'){
 8004f6c:	79fb      	ldrb	r3, [r7, #7]
 8004f6e:	2b70      	cmp	r3, #112	; 0x70
 8004f70:	d104      	bne.n	8004f7c <USART2_IRQHandler+0x2c>
	  controller.p_des = 0.0f;
 8004f72:	4b0c      	ldr	r3, [pc, #48]	; (8004fa4 <USART2_IRQHandler+0x54>)
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }
  if(c=='o'){
 8004f7c:	79fb      	ldrb	r3, [r7, #7]
 8004f7e:	2b6f      	cmp	r3, #111	; 0x6f
 8004f80:	d103      	bne.n	8004f8a <USART2_IRQHandler+0x3a>
	  controller.p_des = 3.14f;
 8004f82:	4b08      	ldr	r3, [pc, #32]	; (8004fa4 <USART2_IRQHandler+0x54>)
 8004f84:	4a08      	ldr	r2, [pc, #32]	; (8004fa8 <USART2_IRQHandler+0x58>)
 8004f86:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004f8a:	4803      	ldr	r0, [pc, #12]	; (8004f98 <USART2_IRQHandler+0x48>)
 8004f8c:	f006 ff0c 	bl	800bda8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004f90:	bf00      	nop
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	20005078 	.word	0x20005078
 8004f9c:	20004c70 	.word	0x20004c70
 8004fa0:	20000768 	.word	0x20000768
 8004fa4:	20000468 	.word	0x20000468
 8004fa8:	4048f5c3 	.word	0x4048f5c3

08004fac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
	return 1;
 8004fb0:	2301      	movs	r3, #1
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <_kill>:

int _kill(int pid, int sig)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004fc6:	f008 faa3 	bl	800d510 <__errno>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2216      	movs	r2, #22
 8004fce:	601a      	str	r2, [r3, #0]
	return -1;
 8004fd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <_exit>:

void _exit (int status)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff ffe7 	bl	8004fbc <_kill>
	while (1) {}		/* Make sure we hang here */
 8004fee:	e7fe      	b.n	8004fee <_exit+0x12>

08004ff0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	e00a      	b.n	8005018 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005002:	f3af 8000 	nop.w
 8005006:	4601      	mov	r1, r0
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	60ba      	str	r2, [r7, #8]
 800500e:	b2ca      	uxtb	r2, r1
 8005010:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	3301      	adds	r3, #1
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	429a      	cmp	r2, r3
 800501e:	dbf0      	blt.n	8005002 <_read+0x12>
	}

return len;
 8005020:	687b      	ldr	r3, [r7, #4]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b086      	sub	sp, #24
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	e009      	b.n	8005050 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	60ba      	str	r2, [r7, #8]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f000 fa8b 	bl	8005560 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	3301      	adds	r3, #1
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	429a      	cmp	r2, r3
 8005056:	dbf1      	blt.n	800503c <_write+0x12>
	}
	return len;
 8005058:	687b      	ldr	r3, [r7, #4]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <_close>:

int _close(int file)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
	return -1;
 800506a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800506e:	4618      	mov	r0, r3
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800508a:	605a      	str	r2, [r3, #4]
	return 0;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <_isatty>:

int _isatty(int file)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
	return 1;
 80050a2:	2301      	movs	r3, #1
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
	return 0;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
	...

080050cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050d4:	4a14      	ldr	r2, [pc, #80]	; (8005128 <_sbrk+0x5c>)
 80050d6:	4b15      	ldr	r3, [pc, #84]	; (800512c <_sbrk+0x60>)
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050e0:	4b13      	ldr	r3, [pc, #76]	; (8005130 <_sbrk+0x64>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d102      	bne.n	80050ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050e8:	4b11      	ldr	r3, [pc, #68]	; (8005130 <_sbrk+0x64>)
 80050ea:	4a12      	ldr	r2, [pc, #72]	; (8005134 <_sbrk+0x68>)
 80050ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050ee:	4b10      	ldr	r3, [pc, #64]	; (8005130 <_sbrk+0x64>)
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4413      	add	r3, r2
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d207      	bcs.n	800510c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050fc:	f008 fa08 	bl	800d510 <__errno>
 8005100:	4603      	mov	r3, r0
 8005102:	220c      	movs	r2, #12
 8005104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005106:	f04f 33ff 	mov.w	r3, #4294967295
 800510a:	e009      	b.n	8005120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800510c:	4b08      	ldr	r3, [pc, #32]	; (8005130 <_sbrk+0x64>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005112:	4b07      	ldr	r3, [pc, #28]	; (8005130 <_sbrk+0x64>)
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4413      	add	r3, r2
 800511a:	4a05      	ldr	r2, [pc, #20]	; (8005130 <_sbrk+0x64>)
 800511c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800511e:	68fb      	ldr	r3, [r7, #12]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	20008000 	.word	0x20008000
 800512c:	00000400 	.word	0x00000400
 8005130:	20005028 	.word	0x20005028
 8005134:	20005120 	.word	0x20005120

08005138 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800513c:	4b06      	ldr	r3, [pc, #24]	; (8005158 <SystemInit+0x20>)
 800513e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005142:	4a05      	ldr	r2, [pc, #20]	; (8005158 <SystemInit+0x20>)
 8005144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800514c:	bf00      	nop
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	e000ed00 	.word	0xe000ed00

0800515c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b09c      	sub	sp, #112	; 0x70
 8005160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005162:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005166:	2200      	movs	r2, #0
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	605a      	str	r2, [r3, #4]
 800516c:	609a      	str	r2, [r3, #8]
 800516e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005170:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	605a      	str	r2, [r3, #4]
 800517a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800517c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	605a      	str	r2, [r3, #4]
 8005186:	609a      	str	r2, [r3, #8]
 8005188:	60da      	str	r2, [r3, #12]
 800518a:	611a      	str	r2, [r3, #16]
 800518c:	615a      	str	r2, [r3, #20]
 800518e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005190:	1d3b      	adds	r3, r7, #4
 8005192:	2234      	movs	r2, #52	; 0x34
 8005194:	2100      	movs	r1, #0
 8005196:	4618      	mov	r0, r3
 8005198:	f008 f9f2 	bl	800d580 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800519c:	4b54      	ldr	r3, [pc, #336]	; (80052f0 <MX_TIM1_Init+0x194>)
 800519e:	4a55      	ldr	r2, [pc, #340]	; (80052f4 <MX_TIM1_Init+0x198>)
 80051a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80051a2:	4b53      	ldr	r3, [pc, #332]	; (80052f0 <MX_TIM1_Init+0x194>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80051a8:	4b51      	ldr	r3, [pc, #324]	; (80052f0 <MX_TIM1_Init+0x194>)
 80051aa:	2220      	movs	r2, #32
 80051ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5600;
 80051ae:	4b50      	ldr	r3, [pc, #320]	; (80052f0 <MX_TIM1_Init+0x194>)
 80051b0:	f44f 52af 	mov.w	r2, #5600	; 0x15e0
 80051b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051b6:	4b4e      	ldr	r3, [pc, #312]	; (80052f0 <MX_TIM1_Init+0x194>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80051bc:	4b4c      	ldr	r3, [pc, #304]	; (80052f0 <MX_TIM1_Init+0x194>)
 80051be:	2201      	movs	r2, #1
 80051c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80051c2:	4b4b      	ldr	r3, [pc, #300]	; (80052f0 <MX_TIM1_Init+0x194>)
 80051c4:	2280      	movs	r2, #128	; 0x80
 80051c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80051c8:	4849      	ldr	r0, [pc, #292]	; (80052f0 <MX_TIM1_Init+0x194>)
 80051ca:	f005 f849 	bl	800a260 <HAL_TIM_Base_Init>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80051d4:	f7ff f9d1 	bl	800457a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051dc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80051de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80051e2:	4619      	mov	r1, r3
 80051e4:	4842      	ldr	r0, [pc, #264]	; (80052f0 <MX_TIM1_Init+0x194>)
 80051e6:	f005 fcef 	bl	800abc8 <HAL_TIM_ConfigClockSource>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80051f0:	f7ff f9c3 	bl	800457a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80051f4:	483e      	ldr	r0, [pc, #248]	; (80052f0 <MX_TIM1_Init+0x194>)
 80051f6:	f005 f8f5 	bl	800a3e4 <HAL_TIM_PWM_Init>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005200:	f7ff f9bb 	bl	800457a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005204:	2300      	movs	r3, #0
 8005206:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005208:	2300      	movs	r3, #0
 800520a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800520c:	2300      	movs	r3, #0
 800520e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005210:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005214:	4619      	mov	r1, r3
 8005216:	4836      	ldr	r0, [pc, #216]	; (80052f0 <MX_TIM1_Init+0x194>)
 8005218:	f006 fafa 	bl	800b810 <HAL_TIMEx_MasterConfigSynchronization>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8005222:	f7ff f9aa 	bl	800457a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005226:	2360      	movs	r3, #96	; 0x60
 8005228:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800522a:	2300      	movs	r3, #0
 800522c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800522e:	2302      	movs	r3, #2
 8005230:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8005232:	2308      	movs	r3, #8
 8005234:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005236:	2304      	movs	r3, #4
 8005238:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800523a:	2300      	movs	r3, #0
 800523c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800523e:	2300      	movs	r3, #0
 8005240:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005242:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005246:	2200      	movs	r2, #0
 8005248:	4619      	mov	r1, r3
 800524a:	4829      	ldr	r0, [pc, #164]	; (80052f0 <MX_TIM1_Init+0x194>)
 800524c:	f005 fbac 	bl	800a9a8 <HAL_TIM_PWM_ConfigChannel>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8005256:	f7ff f990 	bl	800457a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800525a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800525e:	2204      	movs	r2, #4
 8005260:	4619      	mov	r1, r3
 8005262:	4823      	ldr	r0, [pc, #140]	; (80052f0 <MX_TIM1_Init+0x194>)
 8005264:	f005 fba0 	bl	800a9a8 <HAL_TIM_PWM_ConfigChannel>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800526e:	f7ff f984 	bl	800457a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005272:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005276:	2208      	movs	r2, #8
 8005278:	4619      	mov	r1, r3
 800527a:	481d      	ldr	r0, [pc, #116]	; (80052f0 <MX_TIM1_Init+0x194>)
 800527c:	f005 fb94 	bl	800a9a8 <HAL_TIM_PWM_ConfigChannel>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8005286:	f7ff f978 	bl	800457a <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 800528a:	4819      	ldr	r0, [pc, #100]	; (80052f0 <MX_TIM1_Init+0x194>)
 800528c:	f006 fbe2 	bl	800ba54 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8005290:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005294:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8005296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800529a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800529c:	2300      	movs	r3, #0
 800529e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 80052a0:	2364      	movs	r3, #100	; 0x64
 80052a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80052a4:	2300      	movs	r3, #0
 80052a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80052a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80052b2:	2300      	movs	r3, #0
 80052b4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80052b6:	2300      	movs	r3, #0
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80052ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052be:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80052c4:	2300      	movs	r3, #0
 80052c6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80052c8:	2300      	movs	r3, #0
 80052ca:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80052cc:	1d3b      	adds	r3, r7, #4
 80052ce:	4619      	mov	r1, r3
 80052d0:	4807      	ldr	r0, [pc, #28]	; (80052f0 <MX_TIM1_Init+0x194>)
 80052d2:	f006 fb1f 	bl	800b914 <HAL_TIMEx_ConfigBreakDeadTime>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 80052dc:	f7ff f94d 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80052e0:	4803      	ldr	r0, [pc, #12]	; (80052f0 <MX_TIM1_Init+0x194>)
 80052e2:	f000 f82f 	bl	8005344 <HAL_TIM_MspPostInit>

}
 80052e6:	bf00      	nop
 80052e8:	3770      	adds	r7, #112	; 0x70
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	2000502c 	.word	0x2000502c
 80052f4:	40012c00 	.word	0x40012c00

080052f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a0d      	ldr	r2, [pc, #52]	; (800533c <HAL_TIM_Base_MspInit+0x44>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d113      	bne.n	8005332 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800530a:	4b0d      	ldr	r3, [pc, #52]	; (8005340 <HAL_TIM_Base_MspInit+0x48>)
 800530c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800530e:	4a0c      	ldr	r2, [pc, #48]	; (8005340 <HAL_TIM_Base_MspInit+0x48>)
 8005310:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005314:	6613      	str	r3, [r2, #96]	; 0x60
 8005316:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <HAL_TIM_Base_MspInit+0x48>)
 8005318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800531a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005322:	2200      	movs	r2, #0
 8005324:	2100      	movs	r1, #0
 8005326:	2019      	movs	r0, #25
 8005328:	f001 fd1b 	bl	8006d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800532c:	2019      	movs	r0, #25
 800532e:	f001 fd32 	bl	8006d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005332:	bf00      	nop
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40012c00 	.word	0x40012c00
 8005340:	40021000 	.word	0x40021000

08005344 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08a      	sub	sp, #40	; 0x28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800534c:	f107 0314 	add.w	r3, r7, #20
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	605a      	str	r2, [r3, #4]
 8005356:	609a      	str	r2, [r3, #8]
 8005358:	60da      	str	r2, [r3, #12]
 800535a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a2f      	ldr	r2, [pc, #188]	; (8005420 <HAL_TIM_MspPostInit+0xdc>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d157      	bne.n	8005416 <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005366:	4b2f      	ldr	r3, [pc, #188]	; (8005424 <HAL_TIM_MspPostInit+0xe0>)
 8005368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536a:	4a2e      	ldr	r2, [pc, #184]	; (8005424 <HAL_TIM_MspPostInit+0xe0>)
 800536c:	f043 0304 	orr.w	r3, r3, #4
 8005370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005372:	4b2c      	ldr	r3, [pc, #176]	; (8005424 <HAL_TIM_MspPostInit+0xe0>)
 8005374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005376:	f003 0304 	and.w	r3, r3, #4
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800537e:	4b29      	ldr	r3, [pc, #164]	; (8005424 <HAL_TIM_MspPostInit+0xe0>)
 8005380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005382:	4a28      	ldr	r2, [pc, #160]	; (8005424 <HAL_TIM_MspPostInit+0xe0>)
 8005384:	f043 0302 	orr.w	r3, r3, #2
 8005388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800538a:	4b26      	ldr	r3, [pc, #152]	; (8005424 <HAL_TIM_MspPostInit+0xe0>)
 800538c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005396:	4b23      	ldr	r3, [pc, #140]	; (8005424 <HAL_TIM_MspPostInit+0xe0>)
 8005398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539a:	4a22      	ldr	r2, [pc, #136]	; (8005424 <HAL_TIM_MspPostInit+0xe0>)
 800539c:	f043 0301 	orr.w	r3, r3, #1
 80053a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053a2:	4b20      	ldr	r3, [pc, #128]	; (8005424 <HAL_TIM_MspPostInit+0xe0>)
 80053a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	60bb      	str	r3, [r7, #8]
 80053ac:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80053ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b4:	2302      	movs	r3, #2
 80053b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b8:	2300      	movs	r3, #0
 80053ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053bc:	2300      	movs	r3, #0
 80053be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80053c0:	2304      	movs	r3, #4
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053c4:	f107 0314 	add.w	r3, r7, #20
 80053c8:	4619      	mov	r1, r3
 80053ca:	4817      	ldr	r0, [pc, #92]	; (8005428 <HAL_TIM_MspPostInit+0xe4>)
 80053cc:	f002 fe00 	bl	8007fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80053d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053d6:	2302      	movs	r3, #2
 80053d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053da:	2300      	movs	r3, #0
 80053dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053de:	2300      	movs	r3, #0
 80053e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80053e2:	2304      	movs	r3, #4
 80053e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053e6:	f107 0314 	add.w	r3, r7, #20
 80053ea:	4619      	mov	r1, r3
 80053ec:	480f      	ldr	r0, [pc, #60]	; (800542c <HAL_TIM_MspPostInit+0xe8>)
 80053ee:	f002 fdef 	bl	8007fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 80053f2:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 80053f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053f8:	2302      	movs	r3, #2
 80053fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053fc:	2300      	movs	r3, #0
 80053fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005400:	2300      	movs	r3, #0
 8005402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005404:	2306      	movs	r3, #6
 8005406:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005408:	f107 0314 	add.w	r3, r7, #20
 800540c:	4619      	mov	r1, r3
 800540e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005412:	f002 fddd 	bl	8007fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005416:	bf00      	nop
 8005418:	3728      	adds	r7, #40	; 0x28
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	40012c00 	.word	0x40012c00
 8005424:	40021000 	.word	0x40021000
 8005428:	48000800 	.word	0x48000800
 800542c:	48000400 	.word	0x48000400

08005430 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005434:	4b22      	ldr	r3, [pc, #136]	; (80054c0 <MX_USART2_UART_Init+0x90>)
 8005436:	4a23      	ldr	r2, [pc, #140]	; (80054c4 <MX_USART2_UART_Init+0x94>)
 8005438:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800543a:	4b21      	ldr	r3, [pc, #132]	; (80054c0 <MX_USART2_UART_Init+0x90>)
 800543c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005440:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005442:	4b1f      	ldr	r3, [pc, #124]	; (80054c0 <MX_USART2_UART_Init+0x90>)
 8005444:	2200      	movs	r2, #0
 8005446:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005448:	4b1d      	ldr	r3, [pc, #116]	; (80054c0 <MX_USART2_UART_Init+0x90>)
 800544a:	2200      	movs	r2, #0
 800544c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800544e:	4b1c      	ldr	r3, [pc, #112]	; (80054c0 <MX_USART2_UART_Init+0x90>)
 8005450:	2200      	movs	r2, #0
 8005452:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005454:	4b1a      	ldr	r3, [pc, #104]	; (80054c0 <MX_USART2_UART_Init+0x90>)
 8005456:	220c      	movs	r2, #12
 8005458:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800545a:	4b19      	ldr	r3, [pc, #100]	; (80054c0 <MX_USART2_UART_Init+0x90>)
 800545c:	2200      	movs	r2, #0
 800545e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005460:	4b17      	ldr	r3, [pc, #92]	; (80054c0 <MX_USART2_UART_Init+0x90>)
 8005462:	2200      	movs	r2, #0
 8005464:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005466:	4b16      	ldr	r3, [pc, #88]	; (80054c0 <MX_USART2_UART_Init+0x90>)
 8005468:	2200      	movs	r2, #0
 800546a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800546c:	4b14      	ldr	r3, [pc, #80]	; (80054c0 <MX_USART2_UART_Init+0x90>)
 800546e:	2200      	movs	r2, #0
 8005470:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005472:	4b13      	ldr	r3, [pc, #76]	; (80054c0 <MX_USART2_UART_Init+0x90>)
 8005474:	2200      	movs	r2, #0
 8005476:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005478:	4811      	ldr	r0, [pc, #68]	; (80054c0 <MX_USART2_UART_Init+0x90>)
 800547a:	f006 fb69 	bl	800bb50 <HAL_UART_Init>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005484:	f7ff f879 	bl	800457a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005488:	2100      	movs	r1, #0
 800548a:	480d      	ldr	r0, [pc, #52]	; (80054c0 <MX_USART2_UART_Init+0x90>)
 800548c:	f007 ff6d 	bl	800d36a <HAL_UARTEx_SetTxFifoThreshold>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005496:	f7ff f870 	bl	800457a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800549a:	2100      	movs	r1, #0
 800549c:	4808      	ldr	r0, [pc, #32]	; (80054c0 <MX_USART2_UART_Init+0x90>)
 800549e:	f007 ffa2 	bl	800d3e6 <HAL_UARTEx_SetRxFifoThreshold>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80054a8:	f7ff f867 	bl	800457a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80054ac:	4804      	ldr	r0, [pc, #16]	; (80054c0 <MX_USART2_UART_Init+0x90>)
 80054ae:	f007 ff23 	bl	800d2f8 <HAL_UARTEx_DisableFifoMode>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80054b8:	f7ff f85f 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80054bc:	bf00      	nop
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	20005078 	.word	0x20005078
 80054c4:	40004400 	.word	0x40004400

080054c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	; 0x28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054d0:	f107 0314 	add.w	r3, r7, #20
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	605a      	str	r2, [r3, #4]
 80054da:	609a      	str	r2, [r3, #8]
 80054dc:	60da      	str	r2, [r3, #12]
 80054de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1b      	ldr	r2, [pc, #108]	; (8005554 <HAL_UART_MspInit+0x8c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d12f      	bne.n	800554a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80054ea:	4b1b      	ldr	r3, [pc, #108]	; (8005558 <HAL_UART_MspInit+0x90>)
 80054ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ee:	4a1a      	ldr	r2, [pc, #104]	; (8005558 <HAL_UART_MspInit+0x90>)
 80054f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054f4:	6593      	str	r3, [r2, #88]	; 0x58
 80054f6:	4b18      	ldr	r3, [pc, #96]	; (8005558 <HAL_UART_MspInit+0x90>)
 80054f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fe:	613b      	str	r3, [r7, #16]
 8005500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005502:	4b15      	ldr	r3, [pc, #84]	; (8005558 <HAL_UART_MspInit+0x90>)
 8005504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005506:	4a14      	ldr	r2, [pc, #80]	; (8005558 <HAL_UART_MspInit+0x90>)
 8005508:	f043 0302 	orr.w	r3, r3, #2
 800550c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800550e:	4b12      	ldr	r3, [pc, #72]	; (8005558 <HAL_UART_MspInit+0x90>)
 8005510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800551a:	2318      	movs	r3, #24
 800551c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800551e:	2302      	movs	r3, #2
 8005520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005522:	2300      	movs	r3, #0
 8005524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005526:	2300      	movs	r3, #0
 8005528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800552a:	2307      	movs	r3, #7
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800552e:	f107 0314 	add.w	r3, r7, #20
 8005532:	4619      	mov	r1, r3
 8005534:	4809      	ldr	r0, [pc, #36]	; (800555c <HAL_UART_MspInit+0x94>)
 8005536:	f002 fd4b 	bl	8007fd0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800553a:	2200      	movs	r2, #0
 800553c:	2100      	movs	r1, #0
 800553e:	2026      	movs	r0, #38	; 0x26
 8005540:	f001 fc0f 	bl	8006d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005544:	2026      	movs	r0, #38	; 0x26
 8005546:	f001 fc26 	bl	8006d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800554a:	bf00      	nop
 800554c:	3728      	adds	r7, #40	; 0x28
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	40004400 	.word	0x40004400
 8005558:	40021000 	.word	0x40021000
 800555c:	48000400 	.word	0x48000400

08005560 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8005568:	1d39      	adds	r1, r7, #4
 800556a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800556e:	2201      	movs	r2, #1
 8005570:	4803      	ldr	r0, [pc, #12]	; (8005580 <__io_putchar+0x20>)
 8005572:	f006 fb3d 	bl	800bbf0 <HAL_UART_Transmit>
return 0;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20005078 	.word	0x20005078

08005584 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 800558c:	2201      	movs	r2, #1
 800558e:	4904      	ldr	r1, [pc, #16]	; (80055a0 <HAL_UART_RxCpltCallback+0x1c>)
 8005590:	4804      	ldr	r0, [pc, #16]	; (80055a4 <HAL_UART_RxCpltCallback+0x20>)
 8005592:	f006 fbc3 	bl	800bd1c <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005596:	bf00      	nop
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	20004c70 	.word	0x20004c70
 80055a4:	20005078 	.word	0x20005078

080055a8 <store_eeprom_regs>:

#include "user_config.h"
#include "eeprom.h"

void store_eeprom_regs()
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
	eeprom_store(__float_reg, FLOAT_REG_LEN, __int_reg, INT_REG_LEN);
 80055ac:	2380      	movs	r3, #128	; 0x80
 80055ae:	4a03      	ldr	r2, [pc, #12]	; (80055bc <store_eeprom_regs+0x14>)
 80055b0:	2140      	movs	r1, #64	; 0x40
 80055b2:	4803      	ldr	r0, [pc, #12]	; (80055c0 <store_eeprom_regs+0x18>)
 80055b4:	f7fc fb98 	bl	8001ce8 <eeprom_store>
}
 80055b8:	bf00      	nop
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	20004d74 	.word	0x20004d74
 80055c0:	20004c74 	.word	0x20004c74

080055c4 <load_eeprom_regs>:

void load_eeprom_regs()
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
	eeprom_restore(__float_reg, FLOAT_REG_LEN, __int_reg, INT_REG_LEN);
 80055c8:	2380      	movs	r3, #128	; 0x80
 80055ca:	4a03      	ldr	r2, [pc, #12]	; (80055d8 <load_eeprom_regs+0x14>)
 80055cc:	2140      	movs	r1, #64	; 0x40
 80055ce:	4803      	ldr	r0, [pc, #12]	; (80055dc <load_eeprom_regs+0x18>)
 80055d0:	f7fc fb06 	bl	8001be0 <eeprom_restore>
}
 80055d4:	bf00      	nop
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	20004d74 	.word	0x20004d74
 80055dc:	20004c74 	.word	0x20004c74

080055e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80055e0:	480d      	ldr	r0, [pc, #52]	; (8005618 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80055e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055e4:	480d      	ldr	r0, [pc, #52]	; (800561c <LoopForever+0x6>)
  ldr r1, =_edata
 80055e6:	490e      	ldr	r1, [pc, #56]	; (8005620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80055e8:	4a0e      	ldr	r2, [pc, #56]	; (8005624 <LoopForever+0xe>)
  movs r3, #0
 80055ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80055ec:	e002      	b.n	80055f4 <LoopCopyDataInit>

080055ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055f2:	3304      	adds	r3, #4

080055f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055f8:	d3f9      	bcc.n	80055ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055fa:	4a0b      	ldr	r2, [pc, #44]	; (8005628 <LoopForever+0x12>)
  ldr r4, =_ebss
 80055fc:	4c0b      	ldr	r4, [pc, #44]	; (800562c <LoopForever+0x16>)
  movs r3, #0
 80055fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005600:	e001      	b.n	8005606 <LoopFillZerobss>

08005602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005604:	3204      	adds	r2, #4

08005606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005608:	d3fb      	bcc.n	8005602 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800560a:	f7ff fd95 	bl	8005138 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800560e:	f007 ff85 	bl	800d51c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005612:	f7fe fc71 	bl	8003ef8 <main>

08005616 <LoopForever>:

LoopForever:
    b LoopForever
 8005616:	e7fe      	b.n	8005616 <LoopForever>
  ldr   r0, =_estack
 8005618:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800561c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005620:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8005624:	08013368 	.word	0x08013368
  ldr r2, =_sbss
 8005628:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 800562c:	2000511c 	.word	0x2000511c

08005630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005630:	e7fe      	b.n	8005630 <ADC1_2_IRQHandler>

08005632 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b082      	sub	sp, #8
 8005636:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800563c:	2003      	movs	r0, #3
 800563e:	f001 fb85 	bl	8006d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005642:	2000      	movs	r0, #0
 8005644:	f000 f80e 	bl	8005664 <HAL_InitTick>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	71fb      	strb	r3, [r7, #7]
 8005652:	e001      	b.n	8005658 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005654:	f7ff fbec 	bl	8004e30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005658:	79fb      	ldrb	r3, [r7, #7]

}
 800565a:	4618      	mov	r0, r3
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
	...

08005664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800566c:	2300      	movs	r3, #0
 800566e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005670:	4b16      	ldr	r3, [pc, #88]	; (80056cc <HAL_InitTick+0x68>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d022      	beq.n	80056be <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005678:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <HAL_InitTick+0x6c>)
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	4b13      	ldr	r3, [pc, #76]	; (80056cc <HAL_InitTick+0x68>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005684:	fbb1 f3f3 	udiv	r3, r1, r3
 8005688:	fbb2 f3f3 	udiv	r3, r2, r3
 800568c:	4618      	mov	r0, r3
 800568e:	f001 fb90 	bl	8006db2 <HAL_SYSTICK_Config>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10f      	bne.n	80056b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b0f      	cmp	r3, #15
 800569c:	d809      	bhi.n	80056b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800569e:	2200      	movs	r2, #0
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	f04f 30ff 	mov.w	r0, #4294967295
 80056a6:	f001 fb5c 	bl	8006d62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80056aa:	4a0a      	ldr	r2, [pc, #40]	; (80056d4 <HAL_InitTick+0x70>)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6013      	str	r3, [r2, #0]
 80056b0:	e007      	b.n	80056c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	73fb      	strb	r3, [r7, #15]
 80056b6:	e004      	b.n	80056c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	73fb      	strb	r3, [r7, #15]
 80056bc:	e001      	b.n	80056c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	20000008 	.word	0x20000008
 80056d0:	20000000 	.word	0x20000000
 80056d4:	20000004 	.word	0x20000004

080056d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056dc:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <HAL_IncTick+0x1c>)
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <HAL_IncTick+0x20>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4413      	add	r3, r2
 80056e6:	4a03      	ldr	r2, [pc, #12]	; (80056f4 <HAL_IncTick+0x1c>)
 80056e8:	6013      	str	r3, [r2, #0]
}
 80056ea:	bf00      	nop
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	20005108 	.word	0x20005108
 80056f8:	20000008 	.word	0x20000008

080056fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0
  return uwTick;
 8005700:	4b03      	ldr	r3, [pc, #12]	; (8005710 <HAL_GetTick+0x14>)
 8005702:	681b      	ldr	r3, [r3, #0]
}
 8005704:	4618      	mov	r0, r3
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	20005108 	.word	0x20005108

08005714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800571c:	f7ff ffee 	bl	80056fc <HAL_GetTick>
 8005720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572c:	d004      	beq.n	8005738 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800572e:	4b09      	ldr	r3, [pc, #36]	; (8005754 <HAL_Delay+0x40>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4413      	add	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005738:	bf00      	nop
 800573a:	f7ff ffdf 	bl	80056fc <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	429a      	cmp	r2, r3
 8005748:	d8f7      	bhi.n	800573a <HAL_Delay+0x26>
  {
  }
}
 800574a:	bf00      	nop
 800574c:	bf00      	nop
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20000008 	.word	0x20000008

08005758 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	609a      	str	r2, [r3, #8]
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	609a      	str	r2, [r3, #8]
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	3360      	adds	r3, #96	; 0x60
 80057d2:	461a      	mov	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	4b08      	ldr	r3, [pc, #32]	; (8005804 <LL_ADC_SetOffset+0x44>)
 80057e2:	4013      	ands	r3, r2
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80057f8:	bf00      	nop
 80057fa:	371c      	adds	r7, #28
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	03fff000 	.word	0x03fff000

08005808 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	3360      	adds	r3, #96	; 0x60
 8005816:	461a      	mov	r2, r3
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3360      	adds	r3, #96	; 0x60
 8005844:	461a      	mov	r2, r3
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	431a      	orrs	r2, r3
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800586a:	b480      	push	{r7}
 800586c:	b087      	sub	sp, #28
 800586e:	af00      	add	r7, sp, #0
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3360      	adds	r3, #96	; 0x60
 800587a:	461a      	mov	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	431a      	orrs	r2, r3
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005894:	bf00      	nop
 8005896:	371c      	adds	r7, #28
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	3360      	adds	r3, #96	; 0x60
 80058b0:	461a      	mov	r2, r3
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	431a      	orrs	r2, r3
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80058ca:	bf00      	nop
 80058cc:	371c      	adds	r7, #28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	615a      	str	r2, [r3, #20]
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005910:	2301      	movs	r3, #1
 8005912:	e000      	b.n	8005916 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005922:	b480      	push	{r7}
 8005924:	b087      	sub	sp, #28
 8005926:	af00      	add	r7, sp, #0
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	60b9      	str	r1, [r7, #8]
 800592c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	3330      	adds	r3, #48	; 0x30
 8005932:	461a      	mov	r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	0a1b      	lsrs	r3, r3, #8
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	f003 030c 	and.w	r3, r3, #12
 800593e:	4413      	add	r3, r2
 8005940:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f003 031f 	and.w	r3, r3, #31
 800594c:	211f      	movs	r1, #31
 800594e:	fa01 f303 	lsl.w	r3, r1, r3
 8005952:	43db      	mvns	r3, r3
 8005954:	401a      	ands	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	0e9b      	lsrs	r3, r3, #26
 800595a:	f003 011f 	and.w	r1, r3, #31
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	f003 031f 	and.w	r3, r3, #31
 8005964:	fa01 f303 	lsl.w	r3, r1, r3
 8005968:	431a      	orrs	r2, r3
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800596e:	bf00      	nop
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800597a:	b480      	push	{r7}
 800597c:	b087      	sub	sp, #28
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3314      	adds	r3, #20
 800598a:	461a      	mov	r2, r3
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	0e5b      	lsrs	r3, r3, #25
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	f003 0304 	and.w	r3, r3, #4
 8005996:	4413      	add	r3, r2
 8005998:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	0d1b      	lsrs	r3, r3, #20
 80059a2:	f003 031f 	and.w	r3, r3, #31
 80059a6:	2107      	movs	r1, #7
 80059a8:	fa01 f303 	lsl.w	r3, r1, r3
 80059ac:	43db      	mvns	r3, r3
 80059ae:	401a      	ands	r2, r3
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	0d1b      	lsrs	r3, r3, #20
 80059b4:	f003 031f 	and.w	r3, r3, #31
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	fa01 f303 	lsl.w	r3, r1, r3
 80059be:	431a      	orrs	r2, r3
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80059c4:	bf00      	nop
 80059c6:	371c      	adds	r7, #28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059e8:	43db      	mvns	r3, r3
 80059ea:	401a      	ands	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f003 0318 	and.w	r3, r3, #24
 80059f2:	4908      	ldr	r1, [pc, #32]	; (8005a14 <LL_ADC_SetChannelSingleDiff+0x44>)
 80059f4:	40d9      	lsrs	r1, r3
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	400b      	ands	r3, r1
 80059fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059fe:	431a      	orrs	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005a06:	bf00      	nop
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	0007ffff 	.word	0x0007ffff

08005a18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f003 031f 	and.w	r3, r3, #31
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005a44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6093      	str	r3, [r2, #8]
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a6c:	d101      	bne.n	8005a72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e000      	b.n	8005a74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005a90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005abc:	d101      	bne.n	8005ac2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ae0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ae4:	f043 0201 	orr.w	r2, r3, #1
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d101      	bne.n	8005b10 <LL_ADC_IsEnabled+0x18>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e000      	b.n	8005b12 <LL_ADC_IsEnabled+0x1a>
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b32:	f043 0204 	orr.w	r2, r3, #4
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005b3a:	bf00      	nop
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 0304 	and.w	r3, r3, #4
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d101      	bne.n	8005b5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e000      	b.n	8005b60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d101      	bne.n	8005b84 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005b80:	2301      	movs	r3, #1
 8005b82:	e000      	b.n	8005b86 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
	...

08005b94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005b94:	b590      	push	{r4, r7, lr}
 8005b96:	b089      	sub	sp, #36	; 0x24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e177      	b.n	8005e9e <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d109      	bne.n	8005bd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7fb fb41 	bl	8001244 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff ff3f 	bl	8005a58 <LL_ADC_IsDeepPowerDownEnabled>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d004      	beq.n	8005bea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff ff25 	bl	8005a34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff ff5a 	bl	8005aa8 <LL_ADC_IsInternalRegulatorEnabled>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d115      	bne.n	8005c26 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7ff ff3e 	bl	8005a80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c04:	4b9c      	ldr	r3, [pc, #624]	; (8005e78 <HAL_ADC_Init+0x2e4>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	099b      	lsrs	r3, r3, #6
 8005c0a:	4a9c      	ldr	r2, [pc, #624]	; (8005e7c <HAL_ADC_Init+0x2e8>)
 8005c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c10:	099b      	lsrs	r3, r3, #6
 8005c12:	3301      	adds	r3, #1
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005c18:	e002      	b.n	8005c20 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1f9      	bne.n	8005c1a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7ff ff3c 	bl	8005aa8 <LL_ADC_IsInternalRegulatorEnabled>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10d      	bne.n	8005c52 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c3a:	f043 0210 	orr.w	r2, r3, #16
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c46:	f043 0201 	orr.w	r2, r3, #1
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff ff75 	bl	8005b46 <LL_ADC_REG_IsConversionOngoing>
 8005c5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c62:	f003 0310 	and.w	r3, r3, #16
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f040 8110 	bne.w	8005e8c <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f040 810c 	bne.w	8005e8c <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c78:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005c7c:	f043 0202 	orr.w	r2, r3, #2
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff ff35 	bl	8005af8 <LL_ADC_IsEnabled>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d111      	bne.n	8005cb8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c94:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005c98:	f7ff ff2e 	bl	8005af8 <LL_ADC_IsEnabled>
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	4878      	ldr	r0, [pc, #480]	; (8005e80 <HAL_ADC_Init+0x2ec>)
 8005ca0:	f7ff ff2a 	bl	8005af8 <LL_ADC_IsEnabled>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	4323      	orrs	r3, r4
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d105      	bne.n	8005cb8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4874      	ldr	r0, [pc, #464]	; (8005e84 <HAL_ADC_Init+0x2f0>)
 8005cb4:	f7ff fd50 	bl	8005758 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	7f5b      	ldrb	r3, [r3, #29]
 8005cbc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005cc2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005cc8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005cce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cd6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d106      	bne.n	8005cf4 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cea:	3b01      	subs	r3, #1
 8005cec:	045b      	lsls	r3, r3, #17
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d009      	beq.n	8005d10 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d00:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d08:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	4b5c      	ldr	r3, [pc, #368]	; (8005e88 <HAL_ADC_Init+0x2f4>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6812      	ldr	r2, [r2, #0]
 8005d1e:	69b9      	ldr	r1, [r7, #24]
 8005d20:	430b      	orrs	r3, r1
 8005d22:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff ff01 	bl	8005b46 <LL_ADC_REG_IsConversionOngoing>
 8005d44:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7ff ff0e 	bl	8005b6c <LL_ADC_INJ_IsConversionOngoing>
 8005d50:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d16d      	bne.n	8005e34 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d16a      	bne.n	8005e34 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005d62:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d6a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d7a:	f023 0302 	bic.w	r3, r3, #2
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6812      	ldr	r2, [r2, #0]
 8005d82:	69b9      	ldr	r1, [r7, #24]
 8005d84:	430b      	orrs	r3, r1
 8005d86:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d017      	beq.n	8005dc0 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	691a      	ldr	r2, [r3, #16]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005d9e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005da8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005dac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6911      	ldr	r1, [r2, #16]
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	6812      	ldr	r2, [r2, #0]
 8005db8:	430b      	orrs	r3, r1
 8005dba:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005dbe:	e013      	b.n	8005de8 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691a      	ldr	r2, [r3, #16]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005dce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6812      	ldr	r2, [r2, #0]
 8005ddc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005de0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005de4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d118      	bne.n	8005e24 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005dfc:	f023 0304 	bic.w	r3, r3, #4
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e08:	4311      	orrs	r1, r2
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005e0e:	4311      	orrs	r1, r2
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005e14:	430a      	orrs	r2, r1
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f042 0201 	orr.w	r2, r2, #1
 8005e20:	611a      	str	r2, [r3, #16]
 8005e22:	e007      	b.n	8005e34 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691a      	ldr	r2, [r3, #16]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0201 	bic.w	r2, r2, #1
 8005e32:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d10c      	bne.n	8005e56 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e42:	f023 010f 	bic.w	r1, r3, #15
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	1e5a      	subs	r2, r3, #1
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	631a      	str	r2, [r3, #48]	; 0x30
 8005e54:	e007      	b.n	8005e66 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 020f 	bic.w	r2, r2, #15
 8005e64:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e6a:	f023 0303 	bic.w	r3, r3, #3
 8005e6e:	f043 0201 	orr.w	r2, r3, #1
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e76:	e011      	b.n	8005e9c <HAL_ADC_Init+0x308>
 8005e78:	20000000 	.word	0x20000000
 8005e7c:	053e2d63 	.word	0x053e2d63
 8005e80:	50000100 	.word	0x50000100
 8005e84:	50000300 	.word	0x50000300
 8005e88:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e90:	f043 0210 	orr.w	r2, r3, #16
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005e9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3724      	adds	r7, #36	; 0x24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd90      	pop	{r4, r7, pc}
 8005ea6:	bf00      	nop

08005ea8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005eb4:	4851      	ldr	r0, [pc, #324]	; (8005ffc <HAL_ADC_Start_DMA+0x154>)
 8005eb6:	f7ff fdaf 	bl	8005a18 <LL_ADC_GetMultimode>
 8005eba:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7ff fe40 	bl	8005b46 <LL_ADC_REG_IsConversionOngoing>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f040 808f 	bne.w	8005fec <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <HAL_ADC_Start_DMA+0x34>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e08a      	b.n	8005ff2 <HAL_ADC_Start_DMA+0x14a>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d005      	beq.n	8005ef6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	2b05      	cmp	r3, #5
 8005eee:	d002      	beq.n	8005ef6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2b09      	cmp	r3, #9
 8005ef4:	d173      	bne.n	8005fde <HAL_ADC_Start_DMA+0x136>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 fc98 	bl	800682c <ADC_Enable>
 8005efc:	4603      	mov	r3, r0
 8005efe:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005f00:	7dfb      	ldrb	r3, [r7, #23]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d166      	bne.n	8005fd4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f0a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005f0e:	f023 0301 	bic.w	r3, r3, #1
 8005f12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a38      	ldr	r2, [pc, #224]	; (8006000 <HAL_ADC_Start_DMA+0x158>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d002      	beq.n	8005f2a <HAL_ADC_Start_DMA+0x82>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	e001      	b.n	8005f2e <HAL_ADC_Start_DMA+0x86>
 8005f2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	6812      	ldr	r2, [r2, #0]
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d002      	beq.n	8005f3c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d105      	bne.n	8005f48 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f40:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d006      	beq.n	8005f62 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f58:	f023 0206 	bic.w	r2, r3, #6
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	661a      	str	r2, [r3, #96]	; 0x60
 8005f60:	e002      	b.n	8005f68 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6c:	4a25      	ldr	r2, [pc, #148]	; (8006004 <HAL_ADC_Start_DMA+0x15c>)
 8005f6e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f74:	4a24      	ldr	r2, [pc, #144]	; (8006008 <HAL_ADC_Start_DMA+0x160>)
 8005f76:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7c:	4a23      	ldr	r2, [pc, #140]	; (800600c <HAL_ADC_Start_DMA+0x164>)
 8005f7e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	221c      	movs	r2, #28
 8005f86:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 0210 	orr.w	r2, r2, #16
 8005f9e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f042 0201 	orr.w	r2, r2, #1
 8005fae:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3340      	adds	r3, #64	; 0x40
 8005fba:	4619      	mov	r1, r3
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f000 ffac 	bl	8006f1c <HAL_DMA_Start_IT>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7ff fda6 	bl	8005b1e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005fd2:	e00d      	b.n	8005ff0 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8005fdc:	e008      	b.n	8005ff0 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005fea:	e001      	b.n	8005ff0 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005fec:	2302      	movs	r3, #2
 8005fee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3718      	adds	r7, #24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	50000300 	.word	0x50000300
 8006000:	50000100 	.word	0x50000100
 8006004:	080068f1 	.word	0x080068f1
 8006008:	080069c9 	.word	0x080069c9
 800600c:	080069e5 	.word	0x080069e5

08006010 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b0b6      	sub	sp, #216	; 0xd8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800605c:	2300      	movs	r3, #0
 800605e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <HAL_ADC_ConfigChannel+0x22>
 800606a:	2302      	movs	r3, #2
 800606c:	e3c8      	b.n	8006800 <HAL_ADC_ConfigChannel+0x7b4>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff fd63 	bl	8005b46 <LL_ADC_REG_IsConversionOngoing>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	f040 83ad 	bne.w	80067e2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6818      	ldr	r0, [r3, #0]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	6859      	ldr	r1, [r3, #4]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	f7ff fc44 	bl	8005922 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff fd51 	bl	8005b46 <LL_ADC_REG_IsConversionOngoing>
 80060a4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff fd5d 	bl	8005b6c <LL_ADC_INJ_IsConversionOngoing>
 80060b2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80060b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f040 81d9 	bne.w	8006472 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80060c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f040 81d4 	bne.w	8006472 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060d2:	d10f      	bne.n	80060f4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6818      	ldr	r0, [r3, #0]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2200      	movs	r2, #0
 80060de:	4619      	mov	r1, r3
 80060e0:	f7ff fc4b 	bl	800597a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7ff fbf2 	bl	80058d6 <LL_ADC_SetSamplingTimeCommonConfig>
 80060f2:	e00e      	b.n	8006112 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6818      	ldr	r0, [r3, #0]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	6819      	ldr	r1, [r3, #0]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	461a      	mov	r2, r3
 8006102:	f7ff fc3a 	bl	800597a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2100      	movs	r1, #0
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff fbe2 	bl	80058d6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	695a      	ldr	r2, [r3, #20]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	08db      	lsrs	r3, r3, #3
 800611e:	f003 0303 	and.w	r3, r3, #3
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	fa02 f303 	lsl.w	r3, r2, r3
 8006128:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	2b04      	cmp	r3, #4
 8006132:	d022      	beq.n	800617a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6818      	ldr	r0, [r3, #0]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	6919      	ldr	r1, [r3, #16]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006144:	f7ff fb3c 	bl	80057c0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6818      	ldr	r0, [r3, #0]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	6919      	ldr	r1, [r3, #16]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	461a      	mov	r2, r3
 8006156:	f7ff fb88 	bl	800586a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6818      	ldr	r0, [r3, #0]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	6919      	ldr	r1, [r3, #16]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	7f1b      	ldrb	r3, [r3, #28]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d102      	bne.n	8006170 <HAL_ADC_ConfigChannel+0x124>
 800616a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800616e:	e000      	b.n	8006172 <HAL_ADC_ConfigChannel+0x126>
 8006170:	2300      	movs	r3, #0
 8006172:	461a      	mov	r2, r3
 8006174:	f7ff fb94 	bl	80058a0 <LL_ADC_SetOffsetSaturation>
 8006178:	e17b      	b.n	8006472 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2100      	movs	r1, #0
 8006180:	4618      	mov	r0, r3
 8006182:	f7ff fb41 	bl	8005808 <LL_ADC_GetOffsetChannel>
 8006186:	4603      	mov	r3, r0
 8006188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10a      	bne.n	80061a6 <HAL_ADC_ConfigChannel+0x15a>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2100      	movs	r1, #0
 8006196:	4618      	mov	r0, r3
 8006198:	f7ff fb36 	bl	8005808 <LL_ADC_GetOffsetChannel>
 800619c:	4603      	mov	r3, r0
 800619e:	0e9b      	lsrs	r3, r3, #26
 80061a0:	f003 021f 	and.w	r2, r3, #31
 80061a4:	e01e      	b.n	80061e4 <HAL_ADC_ConfigChannel+0x198>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2100      	movs	r1, #0
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7ff fb2b 	bl	8005808 <LL_ADC_GetOffsetChannel>
 80061b2:	4603      	mov	r3, r0
 80061b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80061bc:	fa93 f3a3 	rbit	r3, r3
 80061c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80061c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80061cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80061d4:	2320      	movs	r3, #32
 80061d6:	e004      	b.n	80061e2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80061d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061dc:	fab3 f383 	clz	r3, r3
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d105      	bne.n	80061fc <HAL_ADC_ConfigChannel+0x1b0>
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	0e9b      	lsrs	r3, r3, #26
 80061f6:	f003 031f 	and.w	r3, r3, #31
 80061fa:	e018      	b.n	800622e <HAL_ADC_ConfigChannel+0x1e2>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006204:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006208:	fa93 f3a3 	rbit	r3, r3
 800620c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006214:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006218:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8006220:	2320      	movs	r3, #32
 8006222:	e004      	b.n	800622e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8006224:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006228:	fab3 f383 	clz	r3, r3
 800622c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800622e:	429a      	cmp	r2, r3
 8006230:	d106      	bne.n	8006240 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2200      	movs	r2, #0
 8006238:	2100      	movs	r1, #0
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff fafa 	bl	8005834 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2101      	movs	r1, #1
 8006246:	4618      	mov	r0, r3
 8006248:	f7ff fade 	bl	8005808 <LL_ADC_GetOffsetChannel>
 800624c:	4603      	mov	r3, r0
 800624e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10a      	bne.n	800626c <HAL_ADC_ConfigChannel+0x220>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2101      	movs	r1, #1
 800625c:	4618      	mov	r0, r3
 800625e:	f7ff fad3 	bl	8005808 <LL_ADC_GetOffsetChannel>
 8006262:	4603      	mov	r3, r0
 8006264:	0e9b      	lsrs	r3, r3, #26
 8006266:	f003 021f 	and.w	r2, r3, #31
 800626a:	e01e      	b.n	80062aa <HAL_ADC_ConfigChannel+0x25e>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2101      	movs	r1, #1
 8006272:	4618      	mov	r0, r3
 8006274:	f7ff fac8 	bl	8005808 <LL_ADC_GetOffsetChannel>
 8006278:	4603      	mov	r3, r0
 800627a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800627e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006282:	fa93 f3a3 	rbit	r3, r3
 8006286:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800628a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800628e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006292:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800629a:	2320      	movs	r3, #32
 800629c:	e004      	b.n	80062a8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800629e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80062a2:	fab3 f383 	clz	r3, r3
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d105      	bne.n	80062c2 <HAL_ADC_ConfigChannel+0x276>
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	0e9b      	lsrs	r3, r3, #26
 80062bc:	f003 031f 	and.w	r3, r3, #31
 80062c0:	e018      	b.n	80062f4 <HAL_ADC_ConfigChannel+0x2a8>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062ce:	fa93 f3a3 	rbit	r3, r3
 80062d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80062d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80062da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80062de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80062e6:	2320      	movs	r3, #32
 80062e8:	e004      	b.n	80062f4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80062ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062ee:	fab3 f383 	clz	r3, r3
 80062f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d106      	bne.n	8006306 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2200      	movs	r2, #0
 80062fe:	2101      	movs	r1, #1
 8006300:	4618      	mov	r0, r3
 8006302:	f7ff fa97 	bl	8005834 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2102      	movs	r1, #2
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff fa7b 	bl	8005808 <LL_ADC_GetOffsetChannel>
 8006312:	4603      	mov	r3, r0
 8006314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10a      	bne.n	8006332 <HAL_ADC_ConfigChannel+0x2e6>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2102      	movs	r1, #2
 8006322:	4618      	mov	r0, r3
 8006324:	f7ff fa70 	bl	8005808 <LL_ADC_GetOffsetChannel>
 8006328:	4603      	mov	r3, r0
 800632a:	0e9b      	lsrs	r3, r3, #26
 800632c:	f003 021f 	and.w	r2, r3, #31
 8006330:	e01e      	b.n	8006370 <HAL_ADC_ConfigChannel+0x324>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2102      	movs	r1, #2
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff fa65 	bl	8005808 <LL_ADC_GetOffsetChannel>
 800633e:	4603      	mov	r3, r0
 8006340:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006344:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006348:	fa93 f3a3 	rbit	r3, r3
 800634c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006350:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006354:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006358:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8006360:	2320      	movs	r3, #32
 8006362:	e004      	b.n	800636e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8006364:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006368:	fab3 f383 	clz	r3, r3
 800636c:	b2db      	uxtb	r3, r3
 800636e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006378:	2b00      	cmp	r3, #0
 800637a:	d105      	bne.n	8006388 <HAL_ADC_ConfigChannel+0x33c>
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	0e9b      	lsrs	r3, r3, #26
 8006382:	f003 031f 	and.w	r3, r3, #31
 8006386:	e016      	b.n	80063b6 <HAL_ADC_ConfigChannel+0x36a>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006390:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006394:	fa93 f3a3 	rbit	r3, r3
 8006398:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800639a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800639c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80063a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80063a8:	2320      	movs	r3, #32
 80063aa:	e004      	b.n	80063b6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80063ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063b0:	fab3 f383 	clz	r3, r3
 80063b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d106      	bne.n	80063c8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2200      	movs	r2, #0
 80063c0:	2102      	movs	r1, #2
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff fa36 	bl	8005834 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2103      	movs	r1, #3
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7ff fa1a 	bl	8005808 <LL_ADC_GetOffsetChannel>
 80063d4:	4603      	mov	r3, r0
 80063d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10a      	bne.n	80063f4 <HAL_ADC_ConfigChannel+0x3a8>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2103      	movs	r1, #3
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7ff fa0f 	bl	8005808 <LL_ADC_GetOffsetChannel>
 80063ea:	4603      	mov	r3, r0
 80063ec:	0e9b      	lsrs	r3, r3, #26
 80063ee:	f003 021f 	and.w	r2, r3, #31
 80063f2:	e017      	b.n	8006424 <HAL_ADC_ConfigChannel+0x3d8>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2103      	movs	r1, #3
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7ff fa04 	bl	8005808 <LL_ADC_GetOffsetChannel>
 8006400:	4603      	mov	r3, r0
 8006402:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006406:	fa93 f3a3 	rbit	r3, r3
 800640a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800640c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800640e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8006416:	2320      	movs	r3, #32
 8006418:	e003      	b.n	8006422 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800641a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800641c:	fab3 f383 	clz	r3, r3
 8006420:	b2db      	uxtb	r3, r3
 8006422:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800642c:	2b00      	cmp	r3, #0
 800642e:	d105      	bne.n	800643c <HAL_ADC_ConfigChannel+0x3f0>
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	0e9b      	lsrs	r3, r3, #26
 8006436:	f003 031f 	and.w	r3, r3, #31
 800643a:	e011      	b.n	8006460 <HAL_ADC_ConfigChannel+0x414>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006442:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006444:	fa93 f3a3 	rbit	r3, r3
 8006448:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800644a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800644c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800644e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8006454:	2320      	movs	r3, #32
 8006456:	e003      	b.n	8006460 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8006458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800645a:	fab3 f383 	clz	r3, r3
 800645e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006460:	429a      	cmp	r2, r3
 8006462:	d106      	bne.n	8006472 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2200      	movs	r2, #0
 800646a:	2103      	movs	r1, #3
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff f9e1 	bl	8005834 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff fb3e 	bl	8005af8 <LL_ADC_IsEnabled>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	f040 8140 	bne.w	8006704 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6818      	ldr	r0, [r3, #0]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	6819      	ldr	r1, [r3, #0]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	461a      	mov	r2, r3
 8006492:	f7ff fa9d 	bl	80059d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	4a8f      	ldr	r2, [pc, #572]	; (80066d8 <HAL_ADC_ConfigChannel+0x68c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	f040 8131 	bne.w	8006704 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10b      	bne.n	80064ca <HAL_ADC_ConfigChannel+0x47e>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	0e9b      	lsrs	r3, r3, #26
 80064b8:	3301      	adds	r3, #1
 80064ba:	f003 031f 	and.w	r3, r3, #31
 80064be:	2b09      	cmp	r3, #9
 80064c0:	bf94      	ite	ls
 80064c2:	2301      	movls	r3, #1
 80064c4:	2300      	movhi	r3, #0
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	e019      	b.n	80064fe <HAL_ADC_ConfigChannel+0x4b2>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064d2:	fa93 f3a3 	rbit	r3, r3
 80064d6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80064d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064da:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80064dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80064e2:	2320      	movs	r3, #32
 80064e4:	e003      	b.n	80064ee <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80064e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064e8:	fab3 f383 	clz	r3, r3
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	3301      	adds	r3, #1
 80064f0:	f003 031f 	and.w	r3, r3, #31
 80064f4:	2b09      	cmp	r3, #9
 80064f6:	bf94      	ite	ls
 80064f8:	2301      	movls	r3, #1
 80064fa:	2300      	movhi	r3, #0
 80064fc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d079      	beq.n	80065f6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800650a:	2b00      	cmp	r3, #0
 800650c:	d107      	bne.n	800651e <HAL_ADC_ConfigChannel+0x4d2>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	0e9b      	lsrs	r3, r3, #26
 8006514:	3301      	adds	r3, #1
 8006516:	069b      	lsls	r3, r3, #26
 8006518:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800651c:	e015      	b.n	800654a <HAL_ADC_ConfigChannel+0x4fe>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006526:	fa93 f3a3 	rbit	r3, r3
 800652a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800652c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800652e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8006536:	2320      	movs	r3, #32
 8006538:	e003      	b.n	8006542 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800653a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800653c:	fab3 f383 	clz	r3, r3
 8006540:	b2db      	uxtb	r3, r3
 8006542:	3301      	adds	r3, #1
 8006544:	069b      	lsls	r3, r3, #26
 8006546:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006552:	2b00      	cmp	r3, #0
 8006554:	d109      	bne.n	800656a <HAL_ADC_ConfigChannel+0x51e>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	0e9b      	lsrs	r3, r3, #26
 800655c:	3301      	adds	r3, #1
 800655e:	f003 031f 	and.w	r3, r3, #31
 8006562:	2101      	movs	r1, #1
 8006564:	fa01 f303 	lsl.w	r3, r1, r3
 8006568:	e017      	b.n	800659a <HAL_ADC_ConfigChannel+0x54e>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006572:	fa93 f3a3 	rbit	r3, r3
 8006576:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800657a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800657c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8006582:	2320      	movs	r3, #32
 8006584:	e003      	b.n	800658e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8006586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006588:	fab3 f383 	clz	r3, r3
 800658c:	b2db      	uxtb	r3, r3
 800658e:	3301      	adds	r3, #1
 8006590:	f003 031f 	and.w	r3, r3, #31
 8006594:	2101      	movs	r1, #1
 8006596:	fa01 f303 	lsl.w	r3, r1, r3
 800659a:	ea42 0103 	orr.w	r1, r2, r3
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10a      	bne.n	80065c0 <HAL_ADC_ConfigChannel+0x574>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	0e9b      	lsrs	r3, r3, #26
 80065b0:	3301      	adds	r3, #1
 80065b2:	f003 021f 	and.w	r2, r3, #31
 80065b6:	4613      	mov	r3, r2
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	4413      	add	r3, r2
 80065bc:	051b      	lsls	r3, r3, #20
 80065be:	e018      	b.n	80065f2 <HAL_ADC_ConfigChannel+0x5a6>
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	fa93 f3a3 	rbit	r3, r3
 80065cc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80065ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80065d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80065d8:	2320      	movs	r3, #32
 80065da:	e003      	b.n	80065e4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80065dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065de:	fab3 f383 	clz	r3, r3
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	3301      	adds	r3, #1
 80065e6:	f003 021f 	and.w	r2, r3, #31
 80065ea:	4613      	mov	r3, r2
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	4413      	add	r3, r2
 80065f0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065f2:	430b      	orrs	r3, r1
 80065f4:	e081      	b.n	80066fa <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d107      	bne.n	8006612 <HAL_ADC_ConfigChannel+0x5c6>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	0e9b      	lsrs	r3, r3, #26
 8006608:	3301      	adds	r3, #1
 800660a:	069b      	lsls	r3, r3, #26
 800660c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006610:	e015      	b.n	800663e <HAL_ADC_ConfigChannel+0x5f2>
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661a:	fa93 f3a3 	rbit	r3, r3
 800661e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800662a:	2320      	movs	r3, #32
 800662c:	e003      	b.n	8006636 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	fab3 f383 	clz	r3, r3
 8006634:	b2db      	uxtb	r3, r3
 8006636:	3301      	adds	r3, #1
 8006638:	069b      	lsls	r3, r3, #26
 800663a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006646:	2b00      	cmp	r3, #0
 8006648:	d109      	bne.n	800665e <HAL_ADC_ConfigChannel+0x612>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	0e9b      	lsrs	r3, r3, #26
 8006650:	3301      	adds	r3, #1
 8006652:	f003 031f 	and.w	r3, r3, #31
 8006656:	2101      	movs	r1, #1
 8006658:	fa01 f303 	lsl.w	r3, r1, r3
 800665c:	e017      	b.n	800668e <HAL_ADC_ConfigChannel+0x642>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	fa93 f3a3 	rbit	r3, r3
 800666a:	61fb      	str	r3, [r7, #28]
  return result;
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8006676:	2320      	movs	r3, #32
 8006678:	e003      	b.n	8006682 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	fab3 f383 	clz	r3, r3
 8006680:	b2db      	uxtb	r3, r3
 8006682:	3301      	adds	r3, #1
 8006684:	f003 031f 	and.w	r3, r3, #31
 8006688:	2101      	movs	r1, #1
 800668a:	fa01 f303 	lsl.w	r3, r1, r3
 800668e:	ea42 0103 	orr.w	r1, r2, r3
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10d      	bne.n	80066ba <HAL_ADC_ConfigChannel+0x66e>
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	0e9b      	lsrs	r3, r3, #26
 80066a4:	3301      	adds	r3, #1
 80066a6:	f003 021f 	and.w	r2, r3, #31
 80066aa:	4613      	mov	r3, r2
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	4413      	add	r3, r2
 80066b0:	3b1e      	subs	r3, #30
 80066b2:	051b      	lsls	r3, r3, #20
 80066b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80066b8:	e01e      	b.n	80066f8 <HAL_ADC_ConfigChannel+0x6ac>
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	fa93 f3a3 	rbit	r3, r3
 80066c6:	613b      	str	r3, [r7, #16]
  return result;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d104      	bne.n	80066dc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80066d2:	2320      	movs	r3, #32
 80066d4:	e006      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x698>
 80066d6:	bf00      	nop
 80066d8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	fab3 f383 	clz	r3, r3
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	3301      	adds	r3, #1
 80066e6:	f003 021f 	and.w	r2, r3, #31
 80066ea:	4613      	mov	r3, r2
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	4413      	add	r3, r2
 80066f0:	3b1e      	subs	r3, #30
 80066f2:	051b      	lsls	r3, r3, #20
 80066f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066f8:	430b      	orrs	r3, r1
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	6892      	ldr	r2, [r2, #8]
 80066fe:	4619      	mov	r1, r3
 8006700:	f7ff f93b 	bl	800597a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	4b3f      	ldr	r3, [pc, #252]	; (8006808 <HAL_ADC_ConfigChannel+0x7bc>)
 800670a:	4013      	ands	r3, r2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d071      	beq.n	80067f4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006710:	483e      	ldr	r0, [pc, #248]	; (800680c <HAL_ADC_ConfigChannel+0x7c0>)
 8006712:	f7ff f847 	bl	80057a4 <LL_ADC_GetCommonPathInternalCh>
 8006716:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a3c      	ldr	r2, [pc, #240]	; (8006810 <HAL_ADC_ConfigChannel+0x7c4>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d004      	beq.n	800672e <HAL_ADC_ConfigChannel+0x6e2>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a3a      	ldr	r2, [pc, #232]	; (8006814 <HAL_ADC_ConfigChannel+0x7c8>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d127      	bne.n	800677e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800672e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d121      	bne.n	800677e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006742:	d157      	bne.n	80067f4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006744:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006748:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800674c:	4619      	mov	r1, r3
 800674e:	482f      	ldr	r0, [pc, #188]	; (800680c <HAL_ADC_ConfigChannel+0x7c0>)
 8006750:	f7ff f815 	bl	800577e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006754:	4b30      	ldr	r3, [pc, #192]	; (8006818 <HAL_ADC_ConfigChannel+0x7cc>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	099b      	lsrs	r3, r3, #6
 800675a:	4a30      	ldr	r2, [pc, #192]	; (800681c <HAL_ADC_ConfigChannel+0x7d0>)
 800675c:	fba2 2303 	umull	r2, r3, r2, r3
 8006760:	099b      	lsrs	r3, r3, #6
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	4613      	mov	r3, r2
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800676e:	e002      	b.n	8006776 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3b01      	subs	r3, #1
 8006774:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1f9      	bne.n	8006770 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800677c:	e03a      	b.n	80067f4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a27      	ldr	r2, [pc, #156]	; (8006820 <HAL_ADC_ConfigChannel+0x7d4>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d113      	bne.n	80067b0 <HAL_ADC_ConfigChannel+0x764>
 8006788:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800678c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10d      	bne.n	80067b0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a22      	ldr	r2, [pc, #136]	; (8006824 <HAL_ADC_ConfigChannel+0x7d8>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d02a      	beq.n	80067f4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800679e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067a6:	4619      	mov	r1, r3
 80067a8:	4818      	ldr	r0, [pc, #96]	; (800680c <HAL_ADC_ConfigChannel+0x7c0>)
 80067aa:	f7fe ffe8 	bl	800577e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80067ae:	e021      	b.n	80067f4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a1c      	ldr	r2, [pc, #112]	; (8006828 <HAL_ADC_ConfigChannel+0x7dc>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d11c      	bne.n	80067f4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80067ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d116      	bne.n	80067f4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a16      	ldr	r2, [pc, #88]	; (8006824 <HAL_ADC_ConfigChannel+0x7d8>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d011      	beq.n	80067f4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80067d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80067d8:	4619      	mov	r1, r3
 80067da:	480c      	ldr	r0, [pc, #48]	; (800680c <HAL_ADC_ConfigChannel+0x7c0>)
 80067dc:	f7fe ffcf 	bl	800577e <LL_ADC_SetCommonPathInternalCh>
 80067e0:	e008      	b.n	80067f4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e6:	f043 0220 	orr.w	r2, r3, #32
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80067fc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006800:	4618      	mov	r0, r3
 8006802:	37d8      	adds	r7, #216	; 0xd8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	80080000 	.word	0x80080000
 800680c:	50000300 	.word	0x50000300
 8006810:	c3210000 	.word	0xc3210000
 8006814:	90c00010 	.word	0x90c00010
 8006818:	20000000 	.word	0x20000000
 800681c:	053e2d63 	.word	0x053e2d63
 8006820:	c7520000 	.word	0xc7520000
 8006824:	50000100 	.word	0x50000100
 8006828:	cb840000 	.word	0xcb840000

0800682c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4618      	mov	r0, r3
 800683a:	f7ff f95d 	bl	8005af8 <LL_ADC_IsEnabled>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d14d      	bne.n	80068e0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689a      	ldr	r2, [r3, #8]
 800684a:	4b28      	ldr	r3, [pc, #160]	; (80068ec <ADC_Enable+0xc0>)
 800684c:	4013      	ands	r3, r2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00d      	beq.n	800686e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006856:	f043 0210 	orr.w	r2, r3, #16
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006862:	f043 0201 	orr.w	r2, r3, #1
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e039      	b.n	80068e2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4618      	mov	r0, r3
 8006874:	f7ff f92c 	bl	8005ad0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006878:	f7fe ff40 	bl	80056fc <HAL_GetTick>
 800687c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800687e:	e028      	b.n	80068d2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4618      	mov	r0, r3
 8006886:	f7ff f937 	bl	8005af8 <LL_ADC_IsEnabled>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d104      	bne.n	800689a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4618      	mov	r0, r3
 8006896:	f7ff f91b 	bl	8005ad0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800689a:	f7fe ff2f 	bl	80056fc <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d914      	bls.n	80068d2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d00d      	beq.n	80068d2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ba:	f043 0210 	orr.w	r2, r3, #16
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068c6:	f043 0201 	orr.w	r2, r3, #1
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e007      	b.n	80068e2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d1cf      	bne.n	8006880 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	8000003f 	.word	0x8000003f

080068f0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006902:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006906:	2b00      	cmp	r3, #0
 8006908:	d14b      	bne.n	80069a2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800690e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0308 	and.w	r3, r3, #8
 8006920:	2b00      	cmp	r3, #0
 8006922:	d021      	beq.n	8006968 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4618      	mov	r0, r3
 800692a:	f7fe ffe7 	bl	80058fc <LL_ADC_REG_IsTriggerSourceSWStart>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d032      	beq.n	800699a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d12b      	bne.n	800699a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006946:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d11f      	bne.n	800699a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800695e:	f043 0201 	orr.w	r2, r3, #1
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	65da      	str	r2, [r3, #92]	; 0x5c
 8006966:	e018      	b.n	800699a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d111      	bne.n	800699a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800697a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d105      	bne.n	800699a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006992:	f043 0201 	orr.w	r2, r3, #1
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f7ff fb38 	bl	8006010 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80069a0:	e00e      	b.n	80069c0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069a6:	f003 0310 	and.w	r3, r3, #16
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f7ff fb42 	bl	8006038 <HAL_ADC_ErrorCallback>
}
 80069b4:	e004      	b.n	80069c0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	4798      	blx	r3
}
 80069c0:	bf00      	nop
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f7ff fb24 	bl	8006024 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80069dc:	bf00      	nop
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a02:	f043 0204 	orr.w	r2, r3, #4
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f7ff fb14 	bl	8006038 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006a10:	bf00      	nop
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <LL_ADC_IsEnabled>:
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d101      	bne.n	8006a30 <LL_ADC_IsEnabled+0x18>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e000      	b.n	8006a32 <LL_ADC_IsEnabled+0x1a>
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <LL_ADC_REG_IsConversionOngoing>:
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f003 0304 	and.w	r3, r3, #4
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	d101      	bne.n	8006a56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e000      	b.n	8006a58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006a64:	b590      	push	{r4, r7, lr}
 8006a66:	b0a1      	sub	sp, #132	; 0x84
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d101      	bne.n	8006a82 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	e08b      	b.n	8006b9a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006a8e:	2300      	movs	r3, #0
 8006a90:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a9a:	d102      	bne.n	8006aa2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006a9c:	4b41      	ldr	r3, [pc, #260]	; (8006ba4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006a9e:	60bb      	str	r3, [r7, #8]
 8006aa0:	e001      	b.n	8006aa6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10b      	bne.n	8006ac4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab0:	f043 0220 	orr.w	r2, r3, #32
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e06a      	b.n	8006b9a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7ff ffb9 	bl	8006a3e <LL_ADC_REG_IsConversionOngoing>
 8006acc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7ff ffb3 	bl	8006a3e <LL_ADC_REG_IsConversionOngoing>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d14c      	bne.n	8006b78 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006ade:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d149      	bne.n	8006b78 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006ae4:	4b30      	ldr	r3, [pc, #192]	; (8006ba8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8006ae6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d028      	beq.n	8006b42 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006af0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	6859      	ldr	r1, [r3, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b02:	035b      	lsls	r3, r3, #13
 8006b04:	430b      	orrs	r3, r1
 8006b06:	431a      	orrs	r2, r3
 8006b08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b0a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b0c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006b10:	f7ff ff82 	bl	8006a18 <LL_ADC_IsEnabled>
 8006b14:	4604      	mov	r4, r0
 8006b16:	4823      	ldr	r0, [pc, #140]	; (8006ba4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006b18:	f7ff ff7e 	bl	8006a18 <LL_ADC_IsEnabled>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	4323      	orrs	r3, r4
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d133      	bne.n	8006b8c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006b2c:	f023 030f 	bic.w	r3, r3, #15
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	6811      	ldr	r1, [r2, #0]
 8006b34:	683a      	ldr	r2, [r7, #0]
 8006b36:	6892      	ldr	r2, [r2, #8]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b3e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b40:	e024      	b.n	8006b8c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b4c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b4e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006b52:	f7ff ff61 	bl	8006a18 <LL_ADC_IsEnabled>
 8006b56:	4604      	mov	r4, r0
 8006b58:	4812      	ldr	r0, [pc, #72]	; (8006ba4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006b5a:	f7ff ff5d 	bl	8006a18 <LL_ADC_IsEnabled>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	4323      	orrs	r3, r4
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d112      	bne.n	8006b8c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006b6e:	f023 030f 	bic.w	r3, r3, #15
 8006b72:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006b74:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b76:	e009      	b.n	8006b8c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b7c:	f043 0220 	orr.w	r2, r3, #32
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006b8a:	e000      	b.n	8006b8e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b8c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006b96:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3784      	adds	r7, #132	; 0x84
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd90      	pop	{r4, r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	50000100 	.word	0x50000100
 8006ba8:	50000300 	.word	0x50000300

08006bac <__NVIC_SetPriorityGrouping>:
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f003 0307 	and.w	r3, r3, #7
 8006bba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bbc:	4b0c      	ldr	r3, [pc, #48]	; (8006bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006bc8:	4013      	ands	r3, r2
 8006bca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006bde:	4a04      	ldr	r2, [pc, #16]	; (8006bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	60d3      	str	r3, [r2, #12]
}
 8006be4:	bf00      	nop
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	e000ed00 	.word	0xe000ed00

08006bf4 <__NVIC_GetPriorityGrouping>:
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006bf8:	4b04      	ldr	r3, [pc, #16]	; (8006c0c <__NVIC_GetPriorityGrouping+0x18>)
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	0a1b      	lsrs	r3, r3, #8
 8006bfe:	f003 0307 	and.w	r3, r3, #7
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	e000ed00 	.word	0xe000ed00

08006c10 <__NVIC_EnableIRQ>:
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	4603      	mov	r3, r0
 8006c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	db0b      	blt.n	8006c3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c22:	79fb      	ldrb	r3, [r7, #7]
 8006c24:	f003 021f 	and.w	r2, r3, #31
 8006c28:	4907      	ldr	r1, [pc, #28]	; (8006c48 <__NVIC_EnableIRQ+0x38>)
 8006c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c2e:	095b      	lsrs	r3, r3, #5
 8006c30:	2001      	movs	r0, #1
 8006c32:	fa00 f202 	lsl.w	r2, r0, r2
 8006c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006c3a:	bf00      	nop
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	e000e100 	.word	0xe000e100

08006c4c <__NVIC_SetPriority>:
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	4603      	mov	r3, r0
 8006c54:	6039      	str	r1, [r7, #0]
 8006c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	db0a      	blt.n	8006c76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	490c      	ldr	r1, [pc, #48]	; (8006c98 <__NVIC_SetPriority+0x4c>)
 8006c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c6a:	0112      	lsls	r2, r2, #4
 8006c6c:	b2d2      	uxtb	r2, r2
 8006c6e:	440b      	add	r3, r1
 8006c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006c74:	e00a      	b.n	8006c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	b2da      	uxtb	r2, r3
 8006c7a:	4908      	ldr	r1, [pc, #32]	; (8006c9c <__NVIC_SetPriority+0x50>)
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	f003 030f 	and.w	r3, r3, #15
 8006c82:	3b04      	subs	r3, #4
 8006c84:	0112      	lsls	r2, r2, #4
 8006c86:	b2d2      	uxtb	r2, r2
 8006c88:	440b      	add	r3, r1
 8006c8a:	761a      	strb	r2, [r3, #24]
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	e000e100 	.word	0xe000e100
 8006c9c:	e000ed00 	.word	0xe000ed00

08006ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b089      	sub	sp, #36	; 0x24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f003 0307 	and.w	r3, r3, #7
 8006cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	f1c3 0307 	rsb	r3, r3, #7
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	bf28      	it	cs
 8006cbe:	2304      	movcs	r3, #4
 8006cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	3304      	adds	r3, #4
 8006cc6:	2b06      	cmp	r3, #6
 8006cc8:	d902      	bls.n	8006cd0 <NVIC_EncodePriority+0x30>
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	3b03      	subs	r3, #3
 8006cce:	e000      	b.n	8006cd2 <NVIC_EncodePriority+0x32>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	fa02 f303 	lsl.w	r3, r2, r3
 8006cde:	43da      	mvns	r2, r3
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	401a      	ands	r2, r3
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf2:	43d9      	mvns	r1, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cf8:	4313      	orrs	r3, r2
         );
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3724      	adds	r7, #36	; 0x24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
	...

08006d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d18:	d301      	bcc.n	8006d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e00f      	b.n	8006d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d1e:	4a0a      	ldr	r2, [pc, #40]	; (8006d48 <SysTick_Config+0x40>)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d26:	210f      	movs	r1, #15
 8006d28:	f04f 30ff 	mov.w	r0, #4294967295
 8006d2c:	f7ff ff8e 	bl	8006c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d30:	4b05      	ldr	r3, [pc, #20]	; (8006d48 <SysTick_Config+0x40>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d36:	4b04      	ldr	r3, [pc, #16]	; (8006d48 <SysTick_Config+0x40>)
 8006d38:	2207      	movs	r2, #7
 8006d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	e000e010 	.word	0xe000e010

08006d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f7ff ff29 	bl	8006bac <__NVIC_SetPriorityGrouping>
}
 8006d5a:	bf00      	nop
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b086      	sub	sp, #24
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	4603      	mov	r3, r0
 8006d6a:	60b9      	str	r1, [r7, #8]
 8006d6c:	607a      	str	r2, [r7, #4]
 8006d6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006d70:	f7ff ff40 	bl	8006bf4 <__NVIC_GetPriorityGrouping>
 8006d74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	68b9      	ldr	r1, [r7, #8]
 8006d7a:	6978      	ldr	r0, [r7, #20]
 8006d7c:	f7ff ff90 	bl	8006ca0 <NVIC_EncodePriority>
 8006d80:	4602      	mov	r2, r0
 8006d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d86:	4611      	mov	r1, r2
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7ff ff5f 	bl	8006c4c <__NVIC_SetPriority>
}
 8006d8e:	bf00      	nop
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b082      	sub	sp, #8
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7ff ff33 	bl	8006c10 <__NVIC_EnableIRQ>
}
 8006daa:	bf00      	nop
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b082      	sub	sp, #8
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7ff ffa4 	bl	8006d08 <SysTick_Config>
 8006dc0:	4603      	mov	r3, r0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
	...

08006dcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e08d      	b.n	8006efa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	4b47      	ldr	r3, [pc, #284]	; (8006f04 <HAL_DMA_Init+0x138>)
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d80f      	bhi.n	8006e0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	461a      	mov	r2, r3
 8006df0:	4b45      	ldr	r3, [pc, #276]	; (8006f08 <HAL_DMA_Init+0x13c>)
 8006df2:	4413      	add	r3, r2
 8006df4:	4a45      	ldr	r2, [pc, #276]	; (8006f0c <HAL_DMA_Init+0x140>)
 8006df6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfa:	091b      	lsrs	r3, r3, #4
 8006dfc:	009a      	lsls	r2, r3, #2
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a42      	ldr	r2, [pc, #264]	; (8006f10 <HAL_DMA_Init+0x144>)
 8006e06:	641a      	str	r2, [r3, #64]	; 0x40
 8006e08:	e00e      	b.n	8006e28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	4b40      	ldr	r3, [pc, #256]	; (8006f14 <HAL_DMA_Init+0x148>)
 8006e12:	4413      	add	r3, r2
 8006e14:	4a3d      	ldr	r2, [pc, #244]	; (8006f0c <HAL_DMA_Init+0x140>)
 8006e16:	fba2 2303 	umull	r2, r3, r2, r3
 8006e1a:	091b      	lsrs	r3, r3, #4
 8006e1c:	009a      	lsls	r2, r3, #2
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a3c      	ldr	r2, [pc, #240]	; (8006f18 <HAL_DMA_Init+0x14c>)
 8006e26:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fa76 	bl	800736c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e88:	d102      	bne.n	8006e90 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e98:	b2d2      	uxtb	r2, r2
 8006e9a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006ea4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d010      	beq.n	8006ed0 <HAL_DMA_Init+0x104>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	d80c      	bhi.n	8006ed0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fa96 	bl	80073e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006ecc:	605a      	str	r2, [r3, #4]
 8006ece:	e008      	b.n	8006ee2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	40020407 	.word	0x40020407
 8006f08:	bffdfff8 	.word	0xbffdfff8
 8006f0c:	cccccccd 	.word	0xcccccccd
 8006f10:	40020000 	.word	0x40020000
 8006f14:	bffdfbf8 	.word	0xbffdfbf8
 8006f18:	40020400 	.word	0x40020400

08006f1c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d101      	bne.n	8006f3c <HAL_DMA_Start_IT+0x20>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	e066      	b.n	800700a <HAL_DMA_Start_IT+0xee>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d155      	bne.n	8006ffc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 0201 	bic.w	r2, r2, #1
 8006f6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	68b9      	ldr	r1, [r7, #8]
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f000 f9bb 	bl	80072f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d008      	beq.n	8006f94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f042 020e 	orr.w	r2, r2, #14
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	e00f      	b.n	8006fb4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0204 	bic.w	r2, r2, #4
 8006fa2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f042 020a 	orr.w	r2, r2, #10
 8006fb2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d007      	beq.n	8006fd2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fd0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d007      	beq.n	8006fea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fe8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f042 0201 	orr.w	r2, r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	e005      	b.n	8007008 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007004:	2302      	movs	r3, #2
 8007006:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007008:	7dfb      	ldrb	r3, [r7, #23]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007012:	b480      	push	{r7}
 8007014:	b085      	sub	sp, #20
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b02      	cmp	r3, #2
 8007028:	d005      	beq.n	8007036 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2204      	movs	r2, #4
 800702e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	73fb      	strb	r3, [r7, #15]
 8007034:	e037      	b.n	80070a6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f022 020e 	bic.w	r2, r2, #14
 8007044:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007054:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0201 	bic.w	r2, r2, #1
 8007064:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706a:	f003 021f 	and.w	r2, r3, #31
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007072:	2101      	movs	r1, #1
 8007074:	fa01 f202 	lsl.w	r2, r1, r2
 8007078:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007082:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00c      	beq.n	80070a6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007096:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800709a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80070a4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d00d      	beq.n	80070f8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2204      	movs	r2, #4
 80070e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	73fb      	strb	r3, [r7, #15]
 80070f6:	e047      	b.n	8007188 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 020e 	bic.w	r2, r2, #14
 8007106:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f022 0201 	bic.w	r2, r2, #1
 8007116:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007122:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007126:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712c:	f003 021f 	and.w	r2, r3, #31
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007134:	2101      	movs	r1, #1
 8007136:	fa01 f202 	lsl.w	r2, r1, r2
 800713a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007144:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00c      	beq.n	8007168 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007158:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800715c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007166:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	4798      	blx	r3
    }
  }
  return status;
 8007188:	7bfb      	ldrb	r3, [r7, #15]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b084      	sub	sp, #16
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ae:	f003 031f 	and.w	r3, r3, #31
 80071b2:	2204      	movs	r2, #4
 80071b4:	409a      	lsls	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4013      	ands	r3, r2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d026      	beq.n	800720c <HAL_DMA_IRQHandler+0x7a>
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d021      	beq.n	800720c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0320 	and.w	r3, r3, #32
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d107      	bne.n	80071e6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f022 0204 	bic.w	r2, r2, #4
 80071e4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ea:	f003 021f 	and.w	r2, r3, #31
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	2104      	movs	r1, #4
 80071f4:	fa01 f202 	lsl.w	r2, r1, r2
 80071f8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d071      	beq.n	80072e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800720a:	e06c      	b.n	80072e6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007210:	f003 031f 	and.w	r3, r3, #31
 8007214:	2202      	movs	r2, #2
 8007216:	409a      	lsls	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4013      	ands	r3, r2
 800721c:	2b00      	cmp	r3, #0
 800721e:	d02e      	beq.n	800727e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d029      	beq.n	800727e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0320 	and.w	r3, r3, #32
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10b      	bne.n	8007250 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f022 020a 	bic.w	r2, r2, #10
 8007246:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007254:	f003 021f 	and.w	r2, r3, #31
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725c:	2102      	movs	r1, #2
 800725e:	fa01 f202 	lsl.w	r2, r1, r2
 8007262:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007270:	2b00      	cmp	r3, #0
 8007272:	d038      	beq.n	80072e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800727c:	e033      	b.n	80072e6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007282:	f003 031f 	and.w	r3, r3, #31
 8007286:	2208      	movs	r2, #8
 8007288:	409a      	lsls	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4013      	ands	r3, r2
 800728e:	2b00      	cmp	r3, #0
 8007290:	d02a      	beq.n	80072e8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	f003 0308 	and.w	r3, r3, #8
 8007298:	2b00      	cmp	r3, #0
 800729a:	d025      	beq.n	80072e8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 020e 	bic.w	r2, r2, #14
 80072aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b0:	f003 021f 	and.w	r2, r3, #31
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b8:	2101      	movs	r1, #1
 80072ba:	fa01 f202 	lsl.w	r2, r1, r2
 80072be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d004      	beq.n	80072e8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80072e6:	bf00      	nop
 80072e8:	bf00      	nop
}
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007306:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800730c:	2b00      	cmp	r3, #0
 800730e:	d004      	beq.n	800731a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007318:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731e:	f003 021f 	and.w	r2, r3, #31
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007326:	2101      	movs	r1, #1
 8007328:	fa01 f202 	lsl.w	r2, r1, r2
 800732c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	2b10      	cmp	r3, #16
 800733c:	d108      	bne.n	8007350 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800734e:	e007      	b.n	8007360 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	60da      	str	r2, [r3, #12]
}
 8007360:	bf00      	nop
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	461a      	mov	r2, r3
 800737a:	4b16      	ldr	r3, [pc, #88]	; (80073d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800737c:	429a      	cmp	r2, r3
 800737e:	d802      	bhi.n	8007386 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007380:	4b15      	ldr	r3, [pc, #84]	; (80073d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007382:	617b      	str	r3, [r7, #20]
 8007384:	e001      	b.n	800738a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8007386:	4b15      	ldr	r3, [pc, #84]	; (80073dc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007388:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	b2db      	uxtb	r3, r3
 8007394:	3b08      	subs	r3, #8
 8007396:	4a12      	ldr	r2, [pc, #72]	; (80073e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007398:	fba2 2303 	umull	r2, r3, r2, r3
 800739c:	091b      	lsrs	r3, r3, #4
 800739e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a4:	089b      	lsrs	r3, r3, #2
 80073a6:	009a      	lsls	r2, r3, #2
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	4413      	add	r3, r2
 80073ac:	461a      	mov	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a0b      	ldr	r2, [pc, #44]	; (80073e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80073b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f003 031f 	and.w	r3, r3, #31
 80073be:	2201      	movs	r2, #1
 80073c0:	409a      	lsls	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80073c6:	bf00      	nop
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	40020407 	.word	0x40020407
 80073d8:	40020800 	.word	0x40020800
 80073dc:	40020820 	.word	0x40020820
 80073e0:	cccccccd 	.word	0xcccccccd
 80073e4:	40020880 	.word	0x40020880

080073e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	4b0b      	ldr	r3, [pc, #44]	; (8007428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80073fc:	4413      	add	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	461a      	mov	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a08      	ldr	r2, [pc, #32]	; (800742c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800740a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	3b01      	subs	r3, #1
 8007410:	f003 031f 	and.w	r3, r3, #31
 8007414:	2201      	movs	r2, #1
 8007416:	409a      	lsls	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800741c:	bf00      	nop
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	1000823f 	.word	0x1000823f
 800742c:	40020940 	.word	0x40020940

08007430 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e147      	b.n	80076d2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d106      	bne.n	800745c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7fa fd7e 	bl	8001f58 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	699a      	ldr	r2, [r3, #24]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f022 0210 	bic.w	r2, r2, #16
 800746a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800746c:	f7fe f946 	bl	80056fc <HAL_GetTick>
 8007470:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007472:	e012      	b.n	800749a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007474:	f7fe f942 	bl	80056fc <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	2b0a      	cmp	r3, #10
 8007480:	d90b      	bls.n	800749a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007486:	f043 0201 	orr.w	r2, r3, #1
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2203      	movs	r2, #3
 8007492:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e11b      	b.n	80076d2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	f003 0308 	and.w	r3, r3, #8
 80074a4:	2b08      	cmp	r3, #8
 80074a6:	d0e5      	beq.n	8007474 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	699a      	ldr	r2, [r3, #24]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f042 0201 	orr.w	r2, r2, #1
 80074b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074b8:	f7fe f920 	bl	80056fc <HAL_GetTick>
 80074bc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80074be:	e012      	b.n	80074e6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80074c0:	f7fe f91c 	bl	80056fc <HAL_GetTick>
 80074c4:	4602      	mov	r2, r0
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	2b0a      	cmp	r3, #10
 80074cc:	d90b      	bls.n	80074e6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074d2:	f043 0201 	orr.w	r2, r3, #1
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2203      	movs	r2, #3
 80074de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e0f5      	b.n	80076d2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	f003 0301 	and.w	r3, r3, #1
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d0e5      	beq.n	80074c0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	699a      	ldr	r2, [r3, #24]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f042 0202 	orr.w	r2, r2, #2
 8007502:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a74      	ldr	r2, [pc, #464]	; (80076dc <HAL_FDCAN_Init+0x2ac>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d103      	bne.n	8007516 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800750e:	4a74      	ldr	r2, [pc, #464]	; (80076e0 <HAL_FDCAN_Init+0x2b0>)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	7c1b      	ldrb	r3, [r3, #16]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d108      	bne.n	8007530 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	699a      	ldr	r2, [r3, #24]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800752c:	619a      	str	r2, [r3, #24]
 800752e:	e007      	b.n	8007540 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	699a      	ldr	r2, [r3, #24]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800753e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	7c5b      	ldrb	r3, [r3, #17]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d108      	bne.n	800755a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	699a      	ldr	r2, [r3, #24]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007556:	619a      	str	r2, [r3, #24]
 8007558:	e007      	b.n	800756a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	699a      	ldr	r2, [r3, #24]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007568:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	7c9b      	ldrb	r3, [r3, #18]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d108      	bne.n	8007584 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	699a      	ldr	r2, [r3, #24]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007580:	619a      	str	r2, [r3, #24]
 8007582:	e007      	b.n	8007594 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	699a      	ldr	r2, [r3, #24]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007592:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	689a      	ldr	r2, [r3, #8]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	699a      	ldr	r2, [r3, #24]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80075b8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	691a      	ldr	r2, [r3, #16]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 0210 	bic.w	r2, r2, #16
 80075c8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d108      	bne.n	80075e4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	699a      	ldr	r2, [r3, #24]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f042 0204 	orr.w	r2, r2, #4
 80075e0:	619a      	str	r2, [r3, #24]
 80075e2:	e02c      	b.n	800763e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d028      	beq.n	800763e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d01c      	beq.n	800762e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	699a      	ldr	r2, [r3, #24]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007602:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	691a      	ldr	r2, [r3, #16]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f042 0210 	orr.w	r2, r2, #16
 8007612:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	2b03      	cmp	r3, #3
 800761a:	d110      	bne.n	800763e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699a      	ldr	r2, [r3, #24]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f042 0220 	orr.w	r2, r2, #32
 800762a:	619a      	str	r2, [r3, #24]
 800762c:	e007      	b.n	800763e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	699a      	ldr	r2, [r3, #24]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f042 0220 	orr.w	r2, r2, #32
 800763c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	3b01      	subs	r3, #1
 8007644:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	3b01      	subs	r3, #1
 800764c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800764e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007656:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	3b01      	subs	r3, #1
 8007660:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007666:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007668:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007672:	d115      	bne.n	80076a0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007678:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767e:	3b01      	subs	r3, #1
 8007680:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007682:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007688:	3b01      	subs	r3, #1
 800768a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800768c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	3b01      	subs	r3, #1
 8007696:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800769c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800769e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f9c2 	bl	8007a40 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	40006400 	.word	0x40006400
 80076e0:	40006500 	.word	0x40006500

080076e4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08a      	sub	sp, #40	; 0x28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80076f6:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007700:	4013      	ands	r3, r2
 8007702:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800770a:	f003 0307 	and.w	r3, r3, #7
 800770e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007716:	6a3a      	ldr	r2, [r7, #32]
 8007718:	4013      	ands	r3, r2
 800771a:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007726:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800772e:	69fa      	ldr	r2, [r7, #28]
 8007730:	4013      	ands	r3, r2
 8007732:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800773e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007746:	69ba      	ldr	r2, [r7, #24]
 8007748:	4013      	ands	r3, r2
 800774a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007752:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007756:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	4013      	ands	r3, r2
 8007762:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800776a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00d      	beq.n	800778e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777c:	2b00      	cmp	r3, #0
 800777e:	d006      	beq.n	800778e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2240      	movs	r2, #64	; 0x40
 8007786:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f939 	bl	8007a00 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007798:	2b00      	cmp	r3, #0
 800779a:	d01b      	beq.n	80077d4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d014      	beq.n	80077d4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80077b2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	4013      	ands	r3, r2
 80077c0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077ca:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80077cc:	6939      	ldr	r1, [r7, #16]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f8f7 	bl	80079c2 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d007      	beq.n	80077ea <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80077e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f8b6 	bl	8007956 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d007      	beq.n	8007800 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6a3a      	ldr	r2, [r7, #32]
 80077f6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80077f8:	6a39      	ldr	r1, [r7, #32]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f8b6 	bl	800796c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d007      	beq.n	8007816 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	69fa      	ldr	r2, [r7, #28]
 800780c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800780e:	69f9      	ldr	r1, [r7, #28]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f8b6 	bl	8007982 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800781c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00e      	beq.n	8007842 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800782e:	2b00      	cmp	r3, #0
 8007830:	d007      	beq.n	8007842 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800783a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f8ab 	bl	8007998 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01a      	beq.n	8007886 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800785a:	2b00      	cmp	r3, #0
 800785c:	d013      	beq.n	8007886 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007866:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	4013      	ands	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2280      	movs	r2, #128	; 0x80
 800787c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800787e:	68f9      	ldr	r1, [r7, #12]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f893 	bl	80079ac <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800788c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00e      	beq.n	80078b2 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800789a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d007      	beq.n	80078b2 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80078aa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f893 	bl	80079d8 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00e      	beq.n	80078de <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d007      	beq.n	80078de <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80078d6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f887 	bl	80079ec <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d011      	beq.n	8007910 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007902:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007908:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d007      	beq.n	8007926 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800791e:	6979      	ldr	r1, [r7, #20]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f881 	bl	8007a28 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d009      	beq.n	8007940 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	431a      	orrs	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f863 	bl	8007a14 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800794e:	bf00      	nop
 8007950:	3728      	adds	r7, #40	; 0x28
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007982:	b480      	push	{r7}
 8007984:	b083      	sub	sp, #12
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80079b6:	bf00      	nop
 80079b8:	370c      	adds	r7, #12
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80079f4:	bf00      	nop
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007a32:	bf00      	nop
 8007a34:	370c      	adds	r7, #12
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
	...

08007a40 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007a48:	4b27      	ldr	r3, [pc, #156]	; (8007ae8 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8007a4a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a5a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a62:	041a      	lsls	r2, r3, #16
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a80:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a88:	061a      	lsls	r2, r3, #24
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	60fb      	str	r3, [r7, #12]
 8007ac0:	e005      	b.n	8007ace <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	3304      	adds	r3, #4
 8007acc:	60fb      	str	r3, [r7, #12]
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d3f3      	bcc.n	8007ac2 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8007ada:	bf00      	nop
 8007adc:	bf00      	nop
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	4000a400 	.word	0x4000a400

08007aec <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8007afa:	2300      	movs	r3, #0
 8007afc:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007afe:	4b24      	ldr	r3, [pc, #144]	; (8007b90 <HAL_FLASH_Program+0xa4>)
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d101      	bne.n	8007b0a <HAL_FLASH_Program+0x1e>
 8007b06:	2302      	movs	r3, #2
 8007b08:	e03e      	b.n	8007b88 <HAL_FLASH_Program+0x9c>
 8007b0a:	4b21      	ldr	r3, [pc, #132]	; (8007b90 <HAL_FLASH_Program+0xa4>)
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007b10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b14:	f000 f888 	bl	8007c28 <FLASH_WaitForLastOperation>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8007b1c:	7dfb      	ldrb	r3, [r7, #23]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d12e      	bne.n	8007b80 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007b22:	4b1b      	ldr	r3, [pc, #108]	; (8007b90 <HAL_FLASH_Program+0xa4>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d107      	bne.n	8007b3e <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8007b2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b32:	68b8      	ldr	r0, [r7, #8]
 8007b34:	f000 f8cc 	bl	8007cd0 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	613b      	str	r3, [r7, #16]
 8007b3c:	e010      	b.n	8007b60 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d002      	beq.n	8007b4a <HAL_FLASH_Program+0x5e>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d10a      	bne.n	8007b60 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	68b8      	ldr	r0, [r7, #8]
 8007b50:	f000 f8e4 	bl	8007d1c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d102      	bne.n	8007b60 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8007b5a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007b5e:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007b60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b64:	f000 f860 	bl	8007c28 <FLASH_WaitForLastOperation>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d006      	beq.n	8007b80 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8007b72:	4b08      	ldr	r3, [pc, #32]	; (8007b94 <HAL_FLASH_Program+0xa8>)
 8007b74:	695a      	ldr	r2, [r3, #20]
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	43db      	mvns	r3, r3
 8007b7a:	4906      	ldr	r1, [pc, #24]	; (8007b94 <HAL_FLASH_Program+0xa8>)
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007b80:	4b03      	ldr	r3, [pc, #12]	; (8007b90 <HAL_FLASH_Program+0xa4>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8007b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	2000000c 	.word	0x2000000c
 8007b94:	40022000 	.word	0x40022000

08007b98 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007ba2:	4b0b      	ldr	r3, [pc, #44]	; (8007bd0 <HAL_FLASH_Unlock+0x38>)
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	da0b      	bge.n	8007bc2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007baa:	4b09      	ldr	r3, [pc, #36]	; (8007bd0 <HAL_FLASH_Unlock+0x38>)
 8007bac:	4a09      	ldr	r2, [pc, #36]	; (8007bd4 <HAL_FLASH_Unlock+0x3c>)
 8007bae:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007bb0:	4b07      	ldr	r3, [pc, #28]	; (8007bd0 <HAL_FLASH_Unlock+0x38>)
 8007bb2:	4a09      	ldr	r2, [pc, #36]	; (8007bd8 <HAL_FLASH_Unlock+0x40>)
 8007bb4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007bb6:	4b06      	ldr	r3, [pc, #24]	; (8007bd0 <HAL_FLASH_Unlock+0x38>)
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	da01      	bge.n	8007bc2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007bc2:	79fb      	ldrb	r3, [r7, #7]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr
 8007bd0:	40022000 	.word	0x40022000
 8007bd4:	45670123 	.word	0x45670123
 8007bd8:	cdef89ab 	.word	0xcdef89ab

08007bdc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007be6:	4b09      	ldr	r3, [pc, #36]	; (8007c0c <HAL_FLASH_Lock+0x30>)
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	4a08      	ldr	r2, [pc, #32]	; (8007c0c <HAL_FLASH_Lock+0x30>)
 8007bec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bf0:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007bf2:	4b06      	ldr	r3, [pc, #24]	; (8007c0c <HAL_FLASH_Lock+0x30>)
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	da01      	bge.n	8007bfe <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	40022000 	.word	0x40022000

08007c10 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 8007c10:	b480      	push	{r7}
 8007c12:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8007c14:	4b03      	ldr	r3, [pc, #12]	; (8007c24 <HAL_FLASH_GetError+0x14>)
 8007c16:	685b      	ldr	r3, [r3, #4]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	2000000c 	.word	0x2000000c

08007c28 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8007c30:	f7fd fd64 	bl	80056fc <HAL_GetTick>
 8007c34:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007c36:	e009      	b.n	8007c4c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8007c38:	f7fd fd60 	bl	80056fc <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d201      	bcs.n	8007c4c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e038      	b.n	8007cbe <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007c4c:	4b1e      	ldr	r3, [pc, #120]	; (8007cc8 <FLASH_WaitForLastOperation+0xa0>)
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c58:	d0ee      	beq.n	8007c38 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8007c5a:	4b1b      	ldr	r3, [pc, #108]	; (8007cc8 <FLASH_WaitForLastOperation+0xa0>)
 8007c5c:	691a      	ldr	r2, [r3, #16]
 8007c5e:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8007c62:	4013      	ands	r3, r2
 8007c64:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d01e      	beq.n	8007caa <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8007c6c:	4b17      	ldr	r3, [pc, #92]	; (8007ccc <FLASH_WaitForLastOperation+0xa4>)
 8007c6e:	685a      	ldr	r2, [r3, #4]
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	4a15      	ldr	r2, [pc, #84]	; (8007ccc <FLASH_WaitForLastOperation+0xa4>)
 8007c76:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d007      	beq.n	8007c92 <FLASH_WaitForLastOperation+0x6a>
 8007c82:	4b11      	ldr	r3, [pc, #68]	; (8007cc8 <FLASH_WaitForLastOperation+0xa0>)
 8007c84:	699a      	ldr	r2, [r3, #24]
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007c8c:	490e      	ldr	r1, [pc, #56]	; (8007cc8 <FLASH_WaitForLastOperation+0xa0>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	618b      	str	r3, [r1, #24]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d004      	beq.n	8007ca6 <FLASH_WaitForLastOperation+0x7e>
 8007c9c:	4a0a      	ldr	r2, [pc, #40]	; (8007cc8 <FLASH_WaitForLastOperation+0xa0>)
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007ca4:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e009      	b.n	8007cbe <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007caa:	4b07      	ldr	r3, [pc, #28]	; (8007cc8 <FLASH_WaitForLastOperation+0xa0>)
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d102      	bne.n	8007cbc <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007cb6:	4b04      	ldr	r3, [pc, #16]	; (8007cc8 <FLASH_WaitForLastOperation+0xa0>)
 8007cb8:	2201      	movs	r2, #1
 8007cba:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	40022000 	.word	0x40022000
 8007ccc:	2000000c 	.word	0x2000000c

08007cd0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007cdc:	4b0e      	ldr	r3, [pc, #56]	; (8007d18 <FLASH_Program_DoubleWord+0x48>)
 8007cde:	695b      	ldr	r3, [r3, #20]
 8007ce0:	4a0d      	ldr	r2, [pc, #52]	; (8007d18 <FLASH_Program_DoubleWord+0x48>)
 8007ce2:	f043 0301 	orr.w	r3, r3, #1
 8007ce6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	683a      	ldr	r2, [r7, #0]
 8007cec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007cee:	f3bf 8f6f 	isb	sy
}
 8007cf2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8007cf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cf8:	f04f 0200 	mov.w	r2, #0
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	000a      	movs	r2, r1
 8007d02:	2300      	movs	r3, #0
 8007d04:	68f9      	ldr	r1, [r7, #12]
 8007d06:	3104      	adds	r1, #4
 8007d08:	4613      	mov	r3, r2
 8007d0a:	600b      	str	r3, [r1, #0]
}
 8007d0c:	bf00      	nop
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr
 8007d18:	40022000 	.word	0x40022000

08007d1c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b089      	sub	sp, #36	; 0x24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8007d26:	2340      	movs	r3, #64	; 0x40
 8007d28:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8007d32:	4b14      	ldr	r3, [pc, #80]	; (8007d84 <FLASH_Program_Fast+0x68>)
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	4a13      	ldr	r2, [pc, #76]	; (8007d84 <FLASH_Program_Fast+0x68>)
 8007d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d3c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d42:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d44:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8007d46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d48:	b672      	cpsid	i
}
 8007d4a:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	3304      	adds	r3, #4
 8007d58:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	617b      	str	r3, [r7, #20]
    row_index--;
 8007d60:	7ffb      	ldrb	r3, [r7, #31]
 8007d62:	3b01      	subs	r3, #1
 8007d64:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8007d66:	7ffb      	ldrb	r3, [r7, #31]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1ef      	bne.n	8007d4c <FLASH_Program_Fast+0x30>
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	f383 8810 	msr	PRIMASK, r3
}
 8007d76:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8007d78:	bf00      	nop
 8007d7a:	3724      	adds	r7, #36	; 0x24
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	40022000 	.word	0x40022000

08007d88 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007d92:	4b4a      	ldr	r3, [pc, #296]	; (8007ebc <HAL_FLASHEx_Erase+0x134>)
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d101      	bne.n	8007d9e <HAL_FLASHEx_Erase+0x16>
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	e089      	b.n	8007eb2 <HAL_FLASHEx_Erase+0x12a>
 8007d9e:	4b47      	ldr	r3, [pc, #284]	; (8007ebc <HAL_FLASHEx_Erase+0x134>)
 8007da0:	2201      	movs	r2, #1
 8007da2:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007da4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007da8:	f7ff ff3e 	bl	8007c28 <FLASH_WaitForLastOperation>
 8007dac:	4603      	mov	r3, r0
 8007dae:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d179      	bne.n	8007eaa <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007db6:	4b41      	ldr	r3, [pc, #260]	; (8007ebc <HAL_FLASHEx_Erase+0x134>)
 8007db8:	2200      	movs	r2, #0
 8007dba:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007dbc:	4b40      	ldr	r3, [pc, #256]	; (8007ec0 <HAL_FLASHEx_Erase+0x138>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d019      	beq.n	8007dfc <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007dc8:	4b3d      	ldr	r3, [pc, #244]	; (8007ec0 <HAL_FLASHEx_Erase+0x138>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a3c      	ldr	r2, [pc, #240]	; (8007ec0 <HAL_FLASHEx_Erase+0x138>)
 8007dce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dd2:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007dd4:	4b3a      	ldr	r3, [pc, #232]	; (8007ec0 <HAL_FLASHEx_Erase+0x138>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d009      	beq.n	8007df4 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8007de0:	4b37      	ldr	r3, [pc, #220]	; (8007ec0 <HAL_FLASHEx_Erase+0x138>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a36      	ldr	r2, [pc, #216]	; (8007ec0 <HAL_FLASHEx_Erase+0x138>)
 8007de6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007dea:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8007dec:	4b33      	ldr	r3, [pc, #204]	; (8007ebc <HAL_FLASHEx_Erase+0x134>)
 8007dee:	2203      	movs	r2, #3
 8007df0:	771a      	strb	r2, [r3, #28]
 8007df2:	e016      	b.n	8007e22 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8007df4:	4b31      	ldr	r3, [pc, #196]	; (8007ebc <HAL_FLASHEx_Erase+0x134>)
 8007df6:	2201      	movs	r2, #1
 8007df8:	771a      	strb	r2, [r3, #28]
 8007dfa:	e012      	b.n	8007e22 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007dfc:	4b30      	ldr	r3, [pc, #192]	; (8007ec0 <HAL_FLASHEx_Erase+0x138>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d009      	beq.n	8007e1c <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8007e08:	4b2d      	ldr	r3, [pc, #180]	; (8007ec0 <HAL_FLASHEx_Erase+0x138>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a2c      	ldr	r2, [pc, #176]	; (8007ec0 <HAL_FLASHEx_Erase+0x138>)
 8007e0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e12:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8007e14:	4b29      	ldr	r3, [pc, #164]	; (8007ebc <HAL_FLASHEx_Erase+0x134>)
 8007e16:	2202      	movs	r2, #2
 8007e18:	771a      	strb	r2, [r3, #28]
 8007e1a:	e002      	b.n	8007e22 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007e1c:	4b27      	ldr	r3, [pc, #156]	; (8007ebc <HAL_FLASHEx_Erase+0x134>)
 8007e1e:	2200      	movs	r2, #0
 8007e20:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d111      	bne.n	8007e4e <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 f848 	bl	8007ec4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007e34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007e38:	f7ff fef6 	bl	8007c28 <FLASH_WaitForLastOperation>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8007e40:	4b1f      	ldr	r3, [pc, #124]	; (8007ec0 <HAL_FLASHEx_Erase+0x138>)
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	4a1e      	ldr	r2, [pc, #120]	; (8007ec0 <HAL_FLASHEx_Erase+0x138>)
 8007e46:	f023 0304 	bic.w	r3, r3, #4
 8007e4a:	6153      	str	r3, [r2, #20]
 8007e4c:	e02b      	b.n	8007ea6 <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	f04f 32ff 	mov.w	r2, #4294967295
 8007e54:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	60bb      	str	r3, [r7, #8]
 8007e5c:	e01b      	b.n	8007e96 <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	4619      	mov	r1, r3
 8007e64:	68b8      	ldr	r0, [r7, #8]
 8007e66:	f000 f84b 	bl	8007f00 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007e6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007e6e:	f7ff fedb 	bl	8007c28 <FLASH_WaitForLastOperation>
 8007e72:	4603      	mov	r3, r0
 8007e74:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8007e76:	4b12      	ldr	r3, [pc, #72]	; (8007ec0 <HAL_FLASHEx_Erase+0x138>)
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	4a11      	ldr	r2, [pc, #68]	; (8007ec0 <HAL_FLASHEx_Erase+0x138>)
 8007e7c:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8007e80:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d003      	beq.n	8007e90 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	601a      	str	r2, [r3, #0]
          break;
 8007e8e:	e00a      	b.n	8007ea6 <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	3301      	adds	r3, #1
 8007e94:	60bb      	str	r3, [r7, #8]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689a      	ldr	r2, [r3, #8]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d3db      	bcc.n	8007e5e <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007ea6:	f000 f84f 	bl	8007f48 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007eaa:	4b04      	ldr	r3, [pc, #16]	; (8007ebc <HAL_FLASHEx_Erase+0x134>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	701a      	strb	r2, [r3, #0]

  return status;
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	2000000c 	.word	0x2000000c
 8007ec0:	40022000 	.word	0x40022000

08007ec4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d005      	beq.n	8007ee2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8007ed6:	4b09      	ldr	r3, [pc, #36]	; (8007efc <FLASH_MassErase+0x38>)
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	4a08      	ldr	r2, [pc, #32]	; (8007efc <FLASH_MassErase+0x38>)
 8007edc:	f043 0304 	orr.w	r3, r3, #4
 8007ee0:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007ee2:	4b06      	ldr	r3, [pc, #24]	; (8007efc <FLASH_MassErase+0x38>)
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	4a05      	ldr	r2, [pc, #20]	; (8007efc <FLASH_MassErase+0x38>)
 8007ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eec:	6153      	str	r3, [r2, #20]
}
 8007eee:	bf00      	nop
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	40022000 	.word	0x40022000

08007f00 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8007f0a:	4b0e      	ldr	r3, [pc, #56]	; (8007f44 <FLASH_PageErase+0x44>)
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	00db      	lsls	r3, r3, #3
 8007f16:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8007f1a:	490a      	ldr	r1, [pc, #40]	; (8007f44 <FLASH_PageErase+0x44>)
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007f20:	4b08      	ldr	r3, [pc, #32]	; (8007f44 <FLASH_PageErase+0x44>)
 8007f22:	695b      	ldr	r3, [r3, #20]
 8007f24:	4a07      	ldr	r2, [pc, #28]	; (8007f44 <FLASH_PageErase+0x44>)
 8007f26:	f043 0302 	orr.w	r3, r3, #2
 8007f2a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007f2c:	4b05      	ldr	r3, [pc, #20]	; (8007f44 <FLASH_PageErase+0x44>)
 8007f2e:	695b      	ldr	r3, [r3, #20]
 8007f30:	4a04      	ldr	r2, [pc, #16]	; (8007f44 <FLASH_PageErase+0x44>)
 8007f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f36:	6153      	str	r3, [r2, #20]
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr
 8007f44:	40022000 	.word	0x40022000

08007f48 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8007f4e:	4b1e      	ldr	r3, [pc, #120]	; (8007fc8 <FLASH_FlushCaches+0x80>)
 8007f50:	7f1b      	ldrb	r3, [r3, #28]
 8007f52:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8007f54:	79fb      	ldrb	r3, [r7, #7]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d002      	beq.n	8007f60 <FLASH_FlushCaches+0x18>
 8007f5a:	79fb      	ldrb	r3, [r7, #7]
 8007f5c:	2b03      	cmp	r3, #3
 8007f5e:	d111      	bne.n	8007f84 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007f60:	4b1a      	ldr	r3, [pc, #104]	; (8007fcc <FLASH_FlushCaches+0x84>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a19      	ldr	r2, [pc, #100]	; (8007fcc <FLASH_FlushCaches+0x84>)
 8007f66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007f6a:	6013      	str	r3, [r2, #0]
 8007f6c:	4b17      	ldr	r3, [pc, #92]	; (8007fcc <FLASH_FlushCaches+0x84>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a16      	ldr	r2, [pc, #88]	; (8007fcc <FLASH_FlushCaches+0x84>)
 8007f72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f76:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007f78:	4b14      	ldr	r3, [pc, #80]	; (8007fcc <FLASH_FlushCaches+0x84>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a13      	ldr	r2, [pc, #76]	; (8007fcc <FLASH_FlushCaches+0x84>)
 8007f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f82:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8007f84:	79fb      	ldrb	r3, [r7, #7]
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d002      	beq.n	8007f90 <FLASH_FlushCaches+0x48>
 8007f8a:	79fb      	ldrb	r3, [r7, #7]
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d111      	bne.n	8007fb4 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007f90:	4b0e      	ldr	r3, [pc, #56]	; (8007fcc <FLASH_FlushCaches+0x84>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a0d      	ldr	r2, [pc, #52]	; (8007fcc <FLASH_FlushCaches+0x84>)
 8007f96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	4b0b      	ldr	r3, [pc, #44]	; (8007fcc <FLASH_FlushCaches+0x84>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a0a      	ldr	r2, [pc, #40]	; (8007fcc <FLASH_FlushCaches+0x84>)
 8007fa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fa6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007fa8:	4b08      	ldr	r3, [pc, #32]	; (8007fcc <FLASH_FlushCaches+0x84>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a07      	ldr	r2, [pc, #28]	; (8007fcc <FLASH_FlushCaches+0x84>)
 8007fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007fb2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007fb4:	4b04      	ldr	r3, [pc, #16]	; (8007fc8 <FLASH_FlushCaches+0x80>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	771a      	strb	r2, [r3, #28]
}
 8007fba:	bf00      	nop
 8007fbc:	370c      	adds	r7, #12
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	2000000c 	.word	0x2000000c
 8007fcc:	40022000 	.word	0x40022000

08007fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b087      	sub	sp, #28
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007fde:	e15a      	b.n	8008296 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fec:	4013      	ands	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f000 814c 	beq.w	8008290 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d00b      	beq.n	8008018 <HAL_GPIO_Init+0x48>
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	2b02      	cmp	r3, #2
 8008006:	d007      	beq.n	8008018 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800800c:	2b11      	cmp	r3, #17
 800800e:	d003      	beq.n	8008018 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	2b12      	cmp	r3, #18
 8008016:	d130      	bne.n	800807a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	005b      	lsls	r3, r3, #1
 8008022:	2203      	movs	r2, #3
 8008024:	fa02 f303 	lsl.w	r3, r2, r3
 8008028:	43db      	mvns	r3, r3
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	4013      	ands	r3, r2
 800802e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	68da      	ldr	r2, [r3, #12]
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	005b      	lsls	r3, r3, #1
 8008038:	fa02 f303 	lsl.w	r3, r2, r3
 800803c:	693a      	ldr	r2, [r7, #16]
 800803e:	4313      	orrs	r3, r2
 8008040:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800804e:	2201      	movs	r2, #1
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	fa02 f303 	lsl.w	r3, r2, r3
 8008056:	43db      	mvns	r3, r3
 8008058:	693a      	ldr	r2, [r7, #16]
 800805a:	4013      	ands	r3, r2
 800805c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	091b      	lsrs	r3, r3, #4
 8008064:	f003 0201 	and.w	r2, r3, #1
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	fa02 f303 	lsl.w	r3, r2, r3
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	4313      	orrs	r3, r2
 8008072:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	005b      	lsls	r3, r3, #1
 8008084:	2203      	movs	r2, #3
 8008086:	fa02 f303 	lsl.w	r3, r2, r3
 800808a:	43db      	mvns	r3, r3
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	4013      	ands	r3, r2
 8008090:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	689a      	ldr	r2, [r3, #8]
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	fa02 f303 	lsl.w	r3, r2, r3
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d003      	beq.n	80080ba <HAL_GPIO_Init+0xea>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	2b12      	cmp	r3, #18
 80080b8:	d123      	bne.n	8008102 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	08da      	lsrs	r2, r3, #3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	3208      	adds	r2, #8
 80080c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	f003 0307 	and.w	r3, r3, #7
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	220f      	movs	r2, #15
 80080d2:	fa02 f303 	lsl.w	r3, r2, r3
 80080d6:	43db      	mvns	r3, r3
 80080d8:	693a      	ldr	r2, [r7, #16]
 80080da:	4013      	ands	r3, r2
 80080dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	691a      	ldr	r2, [r3, #16]
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f003 0307 	and.w	r3, r3, #7
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	fa02 f303 	lsl.w	r3, r2, r3
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	08da      	lsrs	r2, r3, #3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3208      	adds	r2, #8
 80080fc:	6939      	ldr	r1, [r7, #16]
 80080fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	2203      	movs	r2, #3
 800810e:	fa02 f303 	lsl.w	r3, r2, r3
 8008112:	43db      	mvns	r3, r3
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	4013      	ands	r3, r2
 8008118:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f003 0203 	and.w	r2, r3, #3
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	005b      	lsls	r3, r3, #1
 8008126:	fa02 f303 	lsl.w	r3, r2, r3
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4313      	orrs	r3, r2
 800812e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800813e:	2b00      	cmp	r3, #0
 8008140:	f000 80a6 	beq.w	8008290 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008144:	4b5b      	ldr	r3, [pc, #364]	; (80082b4 <HAL_GPIO_Init+0x2e4>)
 8008146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008148:	4a5a      	ldr	r2, [pc, #360]	; (80082b4 <HAL_GPIO_Init+0x2e4>)
 800814a:	f043 0301 	orr.w	r3, r3, #1
 800814e:	6613      	str	r3, [r2, #96]	; 0x60
 8008150:	4b58      	ldr	r3, [pc, #352]	; (80082b4 <HAL_GPIO_Init+0x2e4>)
 8008152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008154:	f003 0301 	and.w	r3, r3, #1
 8008158:	60bb      	str	r3, [r7, #8]
 800815a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800815c:	4a56      	ldr	r2, [pc, #344]	; (80082b8 <HAL_GPIO_Init+0x2e8>)
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	089b      	lsrs	r3, r3, #2
 8008162:	3302      	adds	r3, #2
 8008164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008168:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f003 0303 	and.w	r3, r3, #3
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	220f      	movs	r2, #15
 8008174:	fa02 f303 	lsl.w	r3, r2, r3
 8008178:	43db      	mvns	r3, r3
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	4013      	ands	r3, r2
 800817e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008186:	d01f      	beq.n	80081c8 <HAL_GPIO_Init+0x1f8>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a4c      	ldr	r2, [pc, #304]	; (80082bc <HAL_GPIO_Init+0x2ec>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d019      	beq.n	80081c4 <HAL_GPIO_Init+0x1f4>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a4b      	ldr	r2, [pc, #300]	; (80082c0 <HAL_GPIO_Init+0x2f0>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d013      	beq.n	80081c0 <HAL_GPIO_Init+0x1f0>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a4a      	ldr	r2, [pc, #296]	; (80082c4 <HAL_GPIO_Init+0x2f4>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d00d      	beq.n	80081bc <HAL_GPIO_Init+0x1ec>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a49      	ldr	r2, [pc, #292]	; (80082c8 <HAL_GPIO_Init+0x2f8>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d007      	beq.n	80081b8 <HAL_GPIO_Init+0x1e8>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a48      	ldr	r2, [pc, #288]	; (80082cc <HAL_GPIO_Init+0x2fc>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d101      	bne.n	80081b4 <HAL_GPIO_Init+0x1e4>
 80081b0:	2305      	movs	r3, #5
 80081b2:	e00a      	b.n	80081ca <HAL_GPIO_Init+0x1fa>
 80081b4:	2306      	movs	r3, #6
 80081b6:	e008      	b.n	80081ca <HAL_GPIO_Init+0x1fa>
 80081b8:	2304      	movs	r3, #4
 80081ba:	e006      	b.n	80081ca <HAL_GPIO_Init+0x1fa>
 80081bc:	2303      	movs	r3, #3
 80081be:	e004      	b.n	80081ca <HAL_GPIO_Init+0x1fa>
 80081c0:	2302      	movs	r3, #2
 80081c2:	e002      	b.n	80081ca <HAL_GPIO_Init+0x1fa>
 80081c4:	2301      	movs	r3, #1
 80081c6:	e000      	b.n	80081ca <HAL_GPIO_Init+0x1fa>
 80081c8:	2300      	movs	r3, #0
 80081ca:	697a      	ldr	r2, [r7, #20]
 80081cc:	f002 0203 	and.w	r2, r2, #3
 80081d0:	0092      	lsls	r2, r2, #2
 80081d2:	4093      	lsls	r3, r2
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80081da:	4937      	ldr	r1, [pc, #220]	; (80082b8 <HAL_GPIO_Init+0x2e8>)
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	089b      	lsrs	r3, r3, #2
 80081e0:	3302      	adds	r3, #2
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80081e8:	4b39      	ldr	r3, [pc, #228]	; (80082d0 <HAL_GPIO_Init+0x300>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	43db      	mvns	r3, r3
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	4013      	ands	r3, r2
 80081f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d003      	beq.n	800820c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4313      	orrs	r3, r2
 800820a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800820c:	4a30      	ldr	r2, [pc, #192]	; (80082d0 <HAL_GPIO_Init+0x300>)
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8008212:	4b2f      	ldr	r3, [pc, #188]	; (80082d0 <HAL_GPIO_Init+0x300>)
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	43db      	mvns	r3, r3
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	4013      	ands	r3, r2
 8008220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	4313      	orrs	r3, r2
 8008234:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008236:	4a26      	ldr	r2, [pc, #152]	; (80082d0 <HAL_GPIO_Init+0x300>)
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800823c:	4b24      	ldr	r3, [pc, #144]	; (80082d0 <HAL_GPIO_Init+0x300>)
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	43db      	mvns	r3, r3
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	4013      	ands	r3, r2
 800824a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d003      	beq.n	8008260 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	4313      	orrs	r3, r2
 800825e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008260:	4a1b      	ldr	r2, [pc, #108]	; (80082d0 <HAL_GPIO_Init+0x300>)
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008266:	4b1a      	ldr	r3, [pc, #104]	; (80082d0 <HAL_GPIO_Init+0x300>)
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	43db      	mvns	r3, r3
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	4013      	ands	r3, r2
 8008274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d003      	beq.n	800828a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	4313      	orrs	r3, r2
 8008288:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800828a:	4a11      	ldr	r2, [pc, #68]	; (80082d0 <HAL_GPIO_Init+0x300>)
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	3301      	adds	r3, #1
 8008294:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	fa22 f303 	lsr.w	r3, r2, r3
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f47f ae9d 	bne.w	8007fe0 <HAL_GPIO_Init+0x10>
  }
}
 80082a6:	bf00      	nop
 80082a8:	bf00      	nop
 80082aa:	371c      	adds	r7, #28
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr
 80082b4:	40021000 	.word	0x40021000
 80082b8:	40010000 	.word	0x40010000
 80082bc:	48000400 	.word	0x48000400
 80082c0:	48000800 	.word	0x48000800
 80082c4:	48000c00 	.word	0x48000c00
 80082c8:	48001000 	.word	0x48001000
 80082cc:	48001400 	.word	0x48001400
 80082d0:	40010400 	.word	0x40010400

080082d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	460b      	mov	r3, r1
 80082de:	807b      	strh	r3, [r7, #2]
 80082e0:	4613      	mov	r3, r2
 80082e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80082e4:	787b      	ldrb	r3, [r7, #1]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d003      	beq.n	80082f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80082ea:	887a      	ldrh	r2, [r7, #2]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80082f0:	e002      	b.n	80082f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80082f2:	887a      	ldrh	r2, [r7, #2]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e081      	b.n	800841a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	d106      	bne.n	8008330 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f7fb fd76 	bl	8003e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2224      	movs	r2, #36	; 0x24
 8008334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f022 0201 	bic.w	r2, r2, #1
 8008346:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008354:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	689a      	ldr	r2, [r3, #8]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008364:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d107      	bne.n	800837e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	689a      	ldr	r2, [r3, #8]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800837a:	609a      	str	r2, [r3, #8]
 800837c:	e006      	b.n	800838c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	689a      	ldr	r2, [r3, #8]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800838a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	2b02      	cmp	r3, #2
 8008392:	d104      	bne.n	800839e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800839c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	6812      	ldr	r2, [r2, #0]
 80083a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80083ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68da      	ldr	r2, [r3, #12]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80083c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	691a      	ldr	r2, [r3, #16]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	ea42 0103 	orr.w	r1, r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	021a      	lsls	r2, r3, #8
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	69d9      	ldr	r1, [r3, #28]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a1a      	ldr	r2, [r3, #32]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	430a      	orrs	r2, r1
 80083ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f042 0201 	orr.w	r2, r2, #1
 80083fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2220      	movs	r2, #32
 8008406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
	...

08008424 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b088      	sub	sp, #32
 8008428:	af02      	add	r7, sp, #8
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	607a      	str	r2, [r7, #4]
 800842e:	461a      	mov	r2, r3
 8008430:	460b      	mov	r3, r1
 8008432:	817b      	strh	r3, [r7, #10]
 8008434:	4613      	mov	r3, r2
 8008436:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b20      	cmp	r3, #32
 8008442:	f040 80db 	bne.w	80085fc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800844c:	2b01      	cmp	r3, #1
 800844e:	d101      	bne.n	8008454 <HAL_I2C_Master_Receive+0x30>
 8008450:	2302      	movs	r3, #2
 8008452:	e0d4      	b.n	80085fe <HAL_I2C_Master_Receive+0x1da>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800845c:	f7fd f94e 	bl	80056fc <HAL_GetTick>
 8008460:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	2319      	movs	r3, #25
 8008468:	2201      	movs	r2, #1
 800846a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f000 fbc8 	bl	8008c04 <I2C_WaitOnFlagUntilTimeout>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e0bf      	b.n	80085fe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2222      	movs	r2, #34	; 0x22
 8008482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2210      	movs	r2, #16
 800848a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	893a      	ldrh	r2, [r7, #8]
 800849e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	2bff      	cmp	r3, #255	; 0xff
 80084ae:	d90e      	bls.n	80084ce <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	22ff      	movs	r2, #255	; 0xff
 80084b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084ba:	b2da      	uxtb	r2, r3
 80084bc:	8979      	ldrh	r1, [r7, #10]
 80084be:	4b52      	ldr	r3, [pc, #328]	; (8008608 <HAL_I2C_Master_Receive+0x1e4>)
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f000 fd2a 	bl	8008f20 <I2C_TransferConfig>
 80084cc:	e06d      	b.n	80085aa <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	8979      	ldrh	r1, [r7, #10]
 80084e0:	4b49      	ldr	r3, [pc, #292]	; (8008608 <HAL_I2C_Master_Receive+0x1e4>)
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f000 fd19 	bl	8008f20 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80084ee:	e05c      	b.n	80085aa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	6a39      	ldr	r1, [r7, #32]
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f000 fc41 	bl	8008d7c <I2C_WaitOnRXNEFlagUntilTimeout>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	e07c      	b.n	80085fe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850e:	b2d2      	uxtb	r2, r2
 8008510:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008516:	1c5a      	adds	r2, r3, #1
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008520:	3b01      	subs	r3, #1
 8008522:	b29a      	uxth	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800852c:	b29b      	uxth	r3, r3
 800852e:	3b01      	subs	r3, #1
 8008530:	b29a      	uxth	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800853a:	b29b      	uxth	r3, r3
 800853c:	2b00      	cmp	r3, #0
 800853e:	d034      	beq.n	80085aa <HAL_I2C_Master_Receive+0x186>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008544:	2b00      	cmp	r3, #0
 8008546:	d130      	bne.n	80085aa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	6a3b      	ldr	r3, [r7, #32]
 800854e:	2200      	movs	r2, #0
 8008550:	2180      	movs	r1, #128	; 0x80
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f000 fb56 	bl	8008c04 <I2C_WaitOnFlagUntilTimeout>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d001      	beq.n	8008562 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e04d      	b.n	80085fe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008566:	b29b      	uxth	r3, r3
 8008568:	2bff      	cmp	r3, #255	; 0xff
 800856a:	d90e      	bls.n	800858a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	22ff      	movs	r2, #255	; 0xff
 8008570:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008576:	b2da      	uxtb	r2, r3
 8008578:	8979      	ldrh	r1, [r7, #10]
 800857a:	2300      	movs	r3, #0
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f000 fccc 	bl	8008f20 <I2C_TransferConfig>
 8008588:	e00f      	b.n	80085aa <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800858e:	b29a      	uxth	r2, r3
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008598:	b2da      	uxtb	r2, r3
 800859a:	8979      	ldrh	r1, [r7, #10]
 800859c:	2300      	movs	r3, #0
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f000 fcbb 	bl	8008f20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d19d      	bne.n	80084f0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085b4:	697a      	ldr	r2, [r7, #20]
 80085b6:	6a39      	ldr	r1, [r7, #32]
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f000 fba3 	bl	8008d04 <I2C_WaitOnSTOPFlagUntilTimeout>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d001      	beq.n	80085c8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e01a      	b.n	80085fe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2220      	movs	r2, #32
 80085ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6859      	ldr	r1, [r3, #4]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	4b0c      	ldr	r3, [pc, #48]	; (800860c <HAL_I2C_Master_Receive+0x1e8>)
 80085dc:	400b      	ands	r3, r1
 80085de:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2220      	movs	r2, #32
 80085e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	e000      	b.n	80085fe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80085fc:	2302      	movs	r3, #2
  }
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3718      	adds	r7, #24
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	80002400 	.word	0x80002400
 800860c:	fe00e800 	.word	0xfe00e800

08008610 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b088      	sub	sp, #32
 8008614:	af02      	add	r7, sp, #8
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	4608      	mov	r0, r1
 800861a:	4611      	mov	r1, r2
 800861c:	461a      	mov	r2, r3
 800861e:	4603      	mov	r3, r0
 8008620:	817b      	strh	r3, [r7, #10]
 8008622:	460b      	mov	r3, r1
 8008624:	813b      	strh	r3, [r7, #8]
 8008626:	4613      	mov	r3, r2
 8008628:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b20      	cmp	r3, #32
 8008634:	f040 80f9 	bne.w	800882a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008638:	6a3b      	ldr	r3, [r7, #32]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d002      	beq.n	8008644 <HAL_I2C_Mem_Write+0x34>
 800863e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008640:	2b00      	cmp	r3, #0
 8008642:	d105      	bne.n	8008650 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800864a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e0ed      	b.n	800882c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008656:	2b01      	cmp	r3, #1
 8008658:	d101      	bne.n	800865e <HAL_I2C_Mem_Write+0x4e>
 800865a:	2302      	movs	r3, #2
 800865c:	e0e6      	b.n	800882c <HAL_I2C_Mem_Write+0x21c>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008666:	f7fd f849 	bl	80056fc <HAL_GetTick>
 800866a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	2319      	movs	r3, #25
 8008672:	2201      	movs	r2, #1
 8008674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f000 fac3 	bl	8008c04 <I2C_WaitOnFlagUntilTimeout>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d001      	beq.n	8008688 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e0d1      	b.n	800882c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2221      	movs	r2, #33	; 0x21
 800868c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2240      	movs	r2, #64	; 0x40
 8008694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6a3a      	ldr	r2, [r7, #32]
 80086a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80086a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80086b0:	88f8      	ldrh	r0, [r7, #6]
 80086b2:	893a      	ldrh	r2, [r7, #8]
 80086b4:	8979      	ldrh	r1, [r7, #10]
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	4603      	mov	r3, r0
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 f9d3 	bl	8008a6c <I2C_RequestMemoryWrite>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d005      	beq.n	80086d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e0a9      	b.n	800882c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086dc:	b29b      	uxth	r3, r3
 80086de:	2bff      	cmp	r3, #255	; 0xff
 80086e0:	d90e      	bls.n	8008700 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	22ff      	movs	r2, #255	; 0xff
 80086e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	8979      	ldrh	r1, [r7, #10]
 80086f0:	2300      	movs	r3, #0
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f000 fc11 	bl	8008f20 <I2C_TransferConfig>
 80086fe:	e00f      	b.n	8008720 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008704:	b29a      	uxth	r2, r3
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800870e:	b2da      	uxtb	r2, r3
 8008710:	8979      	ldrh	r1, [r7, #10]
 8008712:	2300      	movs	r3, #0
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f000 fc00 	bl	8008f20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f000 faad 	bl	8008c84 <I2C_WaitOnTXISFlagUntilTimeout>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d001      	beq.n	8008734 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	e07b      	b.n	800882c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008738:	781a      	ldrb	r2, [r3, #0]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008744:	1c5a      	adds	r2, r3, #1
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800874e:	b29b      	uxth	r3, r3
 8008750:	3b01      	subs	r3, #1
 8008752:	b29a      	uxth	r2, r3
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800875c:	3b01      	subs	r3, #1
 800875e:	b29a      	uxth	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008768:	b29b      	uxth	r3, r3
 800876a:	2b00      	cmp	r3, #0
 800876c:	d034      	beq.n	80087d8 <HAL_I2C_Mem_Write+0x1c8>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008772:	2b00      	cmp	r3, #0
 8008774:	d130      	bne.n	80087d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877c:	2200      	movs	r2, #0
 800877e:	2180      	movs	r1, #128	; 0x80
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f000 fa3f 	bl	8008c04 <I2C_WaitOnFlagUntilTimeout>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	e04d      	b.n	800882c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008794:	b29b      	uxth	r3, r3
 8008796:	2bff      	cmp	r3, #255	; 0xff
 8008798:	d90e      	bls.n	80087b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	22ff      	movs	r2, #255	; 0xff
 800879e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	8979      	ldrh	r1, [r7, #10]
 80087a8:	2300      	movs	r3, #0
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f000 fbb5 	bl	8008f20 <I2C_TransferConfig>
 80087b6:	e00f      	b.n	80087d8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087bc:	b29a      	uxth	r2, r3
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087c6:	b2da      	uxtb	r2, r3
 80087c8:	8979      	ldrh	r1, [r7, #10]
 80087ca:	2300      	movs	r3, #0
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f000 fba4 	bl	8008f20 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087dc:	b29b      	uxth	r3, r3
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d19e      	bne.n	8008720 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f000 fa8c 	bl	8008d04 <I2C_WaitOnSTOPFlagUntilTimeout>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e01a      	b.n	800882c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2220      	movs	r2, #32
 80087fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	6859      	ldr	r1, [r3, #4]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	4b0a      	ldr	r3, [pc, #40]	; (8008834 <HAL_I2C_Mem_Write+0x224>)
 800880a:	400b      	ands	r3, r1
 800880c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2220      	movs	r2, #32
 8008812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008826:	2300      	movs	r3, #0
 8008828:	e000      	b.n	800882c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800882a:	2302      	movs	r3, #2
  }
}
 800882c:	4618      	mov	r0, r3
 800882e:	3718      	adds	r7, #24
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	fe00e800 	.word	0xfe00e800

08008838 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b088      	sub	sp, #32
 800883c:	af02      	add	r7, sp, #8
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	4608      	mov	r0, r1
 8008842:	4611      	mov	r1, r2
 8008844:	461a      	mov	r2, r3
 8008846:	4603      	mov	r3, r0
 8008848:	817b      	strh	r3, [r7, #10]
 800884a:	460b      	mov	r3, r1
 800884c:	813b      	strh	r3, [r7, #8]
 800884e:	4613      	mov	r3, r2
 8008850:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b20      	cmp	r3, #32
 800885c:	f040 80fd 	bne.w	8008a5a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008860:	6a3b      	ldr	r3, [r7, #32]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d002      	beq.n	800886c <HAL_I2C_Mem_Read+0x34>
 8008866:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008868:	2b00      	cmp	r3, #0
 800886a:	d105      	bne.n	8008878 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008872:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e0f1      	b.n	8008a5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800887e:	2b01      	cmp	r3, #1
 8008880:	d101      	bne.n	8008886 <HAL_I2C_Mem_Read+0x4e>
 8008882:	2302      	movs	r3, #2
 8008884:	e0ea      	b.n	8008a5c <HAL_I2C_Mem_Read+0x224>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800888e:	f7fc ff35 	bl	80056fc <HAL_GetTick>
 8008892:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	9300      	str	r3, [sp, #0]
 8008898:	2319      	movs	r3, #25
 800889a:	2201      	movs	r2, #1
 800889c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f000 f9af 	bl	8008c04 <I2C_WaitOnFlagUntilTimeout>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e0d5      	b.n	8008a5c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2222      	movs	r2, #34	; 0x22
 80088b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2240      	movs	r2, #64	; 0x40
 80088bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6a3a      	ldr	r2, [r7, #32]
 80088ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80088d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80088d8:	88f8      	ldrh	r0, [r7, #6]
 80088da:	893a      	ldrh	r2, [r7, #8]
 80088dc:	8979      	ldrh	r1, [r7, #10]
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	9301      	str	r3, [sp, #4]
 80088e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	4603      	mov	r3, r0
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 f913 	bl	8008b14 <I2C_RequestMemoryRead>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d005      	beq.n	8008900 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e0ad      	b.n	8008a5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008904:	b29b      	uxth	r3, r3
 8008906:	2bff      	cmp	r3, #255	; 0xff
 8008908:	d90e      	bls.n	8008928 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	22ff      	movs	r2, #255	; 0xff
 800890e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008914:	b2da      	uxtb	r2, r3
 8008916:	8979      	ldrh	r1, [r7, #10]
 8008918:	4b52      	ldr	r3, [pc, #328]	; (8008a64 <HAL_I2C_Mem_Read+0x22c>)
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f000 fafd 	bl	8008f20 <I2C_TransferConfig>
 8008926:	e00f      	b.n	8008948 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800892c:	b29a      	uxth	r2, r3
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008936:	b2da      	uxtb	r2, r3
 8008938:	8979      	ldrh	r1, [r7, #10]
 800893a:	4b4a      	ldr	r3, [pc, #296]	; (8008a64 <HAL_I2C_Mem_Read+0x22c>)
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f000 faec 	bl	8008f20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894e:	2200      	movs	r2, #0
 8008950:	2104      	movs	r1, #4
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f000 f956 	bl	8008c04 <I2C_WaitOnFlagUntilTimeout>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	e07c      	b.n	8008a5c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896c:	b2d2      	uxtb	r2, r2
 800896e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008974:	1c5a      	adds	r2, r3, #1
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800897e:	3b01      	subs	r3, #1
 8008980:	b29a      	uxth	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800898a:	b29b      	uxth	r3, r3
 800898c:	3b01      	subs	r3, #1
 800898e:	b29a      	uxth	r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008998:	b29b      	uxth	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	d034      	beq.n	8008a08 <HAL_I2C_Mem_Read+0x1d0>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d130      	bne.n	8008a08 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ac:	2200      	movs	r2, #0
 80089ae:	2180      	movs	r1, #128	; 0x80
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f000 f927 	bl	8008c04 <I2C_WaitOnFlagUntilTimeout>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e04d      	b.n	8008a5c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	2bff      	cmp	r3, #255	; 0xff
 80089c8:	d90e      	bls.n	80089e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	22ff      	movs	r2, #255	; 0xff
 80089ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089d4:	b2da      	uxtb	r2, r3
 80089d6:	8979      	ldrh	r1, [r7, #10]
 80089d8:	2300      	movs	r3, #0
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f000 fa9d 	bl	8008f20 <I2C_TransferConfig>
 80089e6:	e00f      	b.n	8008a08 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	8979      	ldrh	r1, [r7, #10]
 80089fa:	2300      	movs	r3, #0
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f000 fa8c 	bl	8008f20 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d19a      	bne.n	8008948 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f000 f974 	bl	8008d04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e01a      	b.n	8008a5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2220      	movs	r2, #32
 8008a2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	6859      	ldr	r1, [r3, #4]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	4b0b      	ldr	r3, [pc, #44]	; (8008a68 <HAL_I2C_Mem_Read+0x230>)
 8008a3a:	400b      	ands	r3, r1
 8008a3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2220      	movs	r2, #32
 8008a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	e000      	b.n	8008a5c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008a5a:	2302      	movs	r3, #2
  }
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	80002400 	.word	0x80002400
 8008a68:	fe00e800 	.word	0xfe00e800

08008a6c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af02      	add	r7, sp, #8
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	4608      	mov	r0, r1
 8008a76:	4611      	mov	r1, r2
 8008a78:	461a      	mov	r2, r3
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	817b      	strh	r3, [r7, #10]
 8008a7e:	460b      	mov	r3, r1
 8008a80:	813b      	strh	r3, [r7, #8]
 8008a82:	4613      	mov	r3, r2
 8008a84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008a86:	88fb      	ldrh	r3, [r7, #6]
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	8979      	ldrh	r1, [r7, #10]
 8008a8c:	4b20      	ldr	r3, [pc, #128]	; (8008b10 <I2C_RequestMemoryWrite+0xa4>)
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 fa43 	bl	8008f20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a9a:	69fa      	ldr	r2, [r7, #28]
 8008a9c:	69b9      	ldr	r1, [r7, #24]
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f000 f8f0 	bl	8008c84 <I2C_WaitOnTXISFlagUntilTimeout>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d001      	beq.n	8008aae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e02c      	b.n	8008b08 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008aae:	88fb      	ldrh	r3, [r7, #6]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d105      	bne.n	8008ac0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008ab4:	893b      	ldrh	r3, [r7, #8]
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	629a      	str	r2, [r3, #40]	; 0x28
 8008abe:	e015      	b.n	8008aec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008ac0:	893b      	ldrh	r3, [r7, #8]
 8008ac2:	0a1b      	lsrs	r3, r3, #8
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	b2da      	uxtb	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ace:	69fa      	ldr	r2, [r7, #28]
 8008ad0:	69b9      	ldr	r1, [r7, #24]
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f000 f8d6 	bl	8008c84 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e012      	b.n	8008b08 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008ae2:	893b      	ldrh	r3, [r7, #8]
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	2200      	movs	r2, #0
 8008af4:	2180      	movs	r1, #128	; 0x80
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f000 f884 	bl	8008c04 <I2C_WaitOnFlagUntilTimeout>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d001      	beq.n	8008b06 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e000      	b.n	8008b08 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	80002000 	.word	0x80002000

08008b14 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af02      	add	r7, sp, #8
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	4608      	mov	r0, r1
 8008b1e:	4611      	mov	r1, r2
 8008b20:	461a      	mov	r2, r3
 8008b22:	4603      	mov	r3, r0
 8008b24:	817b      	strh	r3, [r7, #10]
 8008b26:	460b      	mov	r3, r1
 8008b28:	813b      	strh	r3, [r7, #8]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008b2e:	88fb      	ldrh	r3, [r7, #6]
 8008b30:	b2da      	uxtb	r2, r3
 8008b32:	8979      	ldrh	r1, [r7, #10]
 8008b34:	4b20      	ldr	r3, [pc, #128]	; (8008bb8 <I2C_RequestMemoryRead+0xa4>)
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	2300      	movs	r3, #0
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f000 f9f0 	bl	8008f20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b40:	69fa      	ldr	r2, [r7, #28]
 8008b42:	69b9      	ldr	r1, [r7, #24]
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f000 f89d 	bl	8008c84 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d001      	beq.n	8008b54 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e02c      	b.n	8008bae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b54:	88fb      	ldrh	r3, [r7, #6]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d105      	bne.n	8008b66 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b5a:	893b      	ldrh	r3, [r7, #8]
 8008b5c:	b2da      	uxtb	r2, r3
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	629a      	str	r2, [r3, #40]	; 0x28
 8008b64:	e015      	b.n	8008b92 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008b66:	893b      	ldrh	r3, [r7, #8]
 8008b68:	0a1b      	lsrs	r3, r3, #8
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	b2da      	uxtb	r2, r3
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b74:	69fa      	ldr	r2, [r7, #28]
 8008b76:	69b9      	ldr	r1, [r7, #24]
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f000 f883 	bl	8008c84 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d001      	beq.n	8008b88 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e012      	b.n	8008bae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b88:	893b      	ldrh	r3, [r7, #8]
 8008b8a:	b2da      	uxtb	r2, r3
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	2140      	movs	r1, #64	; 0x40
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f000 f831 	bl	8008c04 <I2C_WaitOnFlagUntilTimeout>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e000      	b.n	8008bae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	80002000 	.word	0x80002000

08008bbc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	f003 0302 	and.w	r3, r3, #2
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d103      	bne.n	8008bda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d007      	beq.n	8008bf8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	699a      	ldr	r2, [r3, #24]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f042 0201 	orr.w	r2, r2, #1
 8008bf6:	619a      	str	r2, [r3, #24]
  }
}
 8008bf8:	bf00      	nop
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	603b      	str	r3, [r7, #0]
 8008c10:	4613      	mov	r3, r2
 8008c12:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c14:	e022      	b.n	8008c5c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1c:	d01e      	beq.n	8008c5c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c1e:	f7fc fd6d 	bl	80056fc <HAL_GetTick>
 8008c22:	4602      	mov	r2, r0
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	1ad3      	subs	r3, r2, r3
 8008c28:	683a      	ldr	r2, [r7, #0]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d302      	bcc.n	8008c34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d113      	bne.n	8008c5c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c38:	f043 0220 	orr.w	r2, r3, #32
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2220      	movs	r2, #32
 8008c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e00f      	b.n	8008c7c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	699a      	ldr	r2, [r3, #24]
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	4013      	ands	r3, r2
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	bf0c      	ite	eq
 8008c6c:	2301      	moveq	r3, #1
 8008c6e:	2300      	movne	r3, #0
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	461a      	mov	r2, r3
 8008c74:	79fb      	ldrb	r3, [r7, #7]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d0cd      	beq.n	8008c16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008c90:	e02c      	b.n	8008cec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	68b9      	ldr	r1, [r7, #8]
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f000 f8dc 	bl	8008e54 <I2C_IsAcknowledgeFailed>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e02a      	b.n	8008cfc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cac:	d01e      	beq.n	8008cec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cae:	f7fc fd25 	bl	80056fc <HAL_GetTick>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	68ba      	ldr	r2, [r7, #8]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d302      	bcc.n	8008cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d113      	bne.n	8008cec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cc8:	f043 0220 	orr.w	r2, r3, #32
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2220      	movs	r2, #32
 8008cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e007      	b.n	8008cfc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	f003 0302 	and.w	r3, r3, #2
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d1cb      	bne.n	8008c92 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d10:	e028      	b.n	8008d64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	68b9      	ldr	r1, [r7, #8]
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f000 f89c 	bl	8008e54 <I2C_IsAcknowledgeFailed>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e026      	b.n	8008d74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d26:	f7fc fce9 	bl	80056fc <HAL_GetTick>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d302      	bcc.n	8008d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d113      	bne.n	8008d64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d40:	f043 0220 	orr.w	r2, r3, #32
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2220      	movs	r2, #32
 8008d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	e007      	b.n	8008d74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	f003 0320 	and.w	r3, r3, #32
 8008d6e:	2b20      	cmp	r3, #32
 8008d70:	d1cf      	bne.n	8008d12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008d88:	e055      	b.n	8008e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	68b9      	ldr	r1, [r7, #8]
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f000 f860 	bl	8008e54 <I2C_IsAcknowledgeFailed>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e053      	b.n	8008e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	f003 0320 	and.w	r3, r3, #32
 8008da8:	2b20      	cmp	r3, #32
 8008daa:	d129      	bne.n	8008e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	f003 0304 	and.w	r3, r3, #4
 8008db6:	2b04      	cmp	r3, #4
 8008db8:	d105      	bne.n	8008dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	e03f      	b.n	8008e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2220      	movs	r2, #32
 8008dcc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	6859      	ldr	r1, [r3, #4]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	4b1d      	ldr	r3, [pc, #116]	; (8008e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8008dda:	400b      	ands	r3, r1
 8008ddc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2220      	movs	r2, #32
 8008de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e022      	b.n	8008e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e00:	f7fc fc7c 	bl	80056fc <HAL_GetTick>
 8008e04:	4602      	mov	r2, r0
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d302      	bcc.n	8008e16 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10f      	bne.n	8008e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e1a:	f043 0220 	orr.w	r2, r3, #32
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2220      	movs	r2, #32
 8008e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e007      	b.n	8008e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	f003 0304 	and.w	r3, r3, #4
 8008e40:	2b04      	cmp	r3, #4
 8008e42:	d1a2      	bne.n	8008d8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	fe00e800 	.word	0xfe00e800

08008e54 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	f003 0310 	and.w	r3, r3, #16
 8008e6a:	2b10      	cmp	r3, #16
 8008e6c:	d151      	bne.n	8008f12 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e6e:	e022      	b.n	8008eb6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e76:	d01e      	beq.n	8008eb6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e78:	f7fc fc40 	bl	80056fc <HAL_GetTick>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d302      	bcc.n	8008e8e <I2C_IsAcknowledgeFailed+0x3a>
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d113      	bne.n	8008eb6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e92:	f043 0220 	orr.w	r2, r3, #32
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2220      	movs	r2, #32
 8008e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e02e      	b.n	8008f14 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	f003 0320 	and.w	r3, r3, #32
 8008ec0:	2b20      	cmp	r3, #32
 8008ec2:	d1d5      	bne.n	8008e70 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2210      	movs	r2, #16
 8008eca:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2220      	movs	r2, #32
 8008ed2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f7ff fe71 	bl	8008bbc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	6859      	ldr	r1, [r3, #4]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	4b0d      	ldr	r3, [pc, #52]	; (8008f1c <I2C_IsAcknowledgeFailed+0xc8>)
 8008ee6:	400b      	ands	r3, r1
 8008ee8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eee:	f043 0204 	orr.w	r2, r3, #4
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2220      	movs	r2, #32
 8008efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e000      	b.n	8008f14 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	fe00e800 	.word	0xfe00e800

08008f20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	607b      	str	r3, [r7, #4]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	817b      	strh	r3, [r7, #10]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	685a      	ldr	r2, [r3, #4]
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	0d5b      	lsrs	r3, r3, #21
 8008f3c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008f40:	4b0d      	ldr	r3, [pc, #52]	; (8008f78 <I2C_TransferConfig+0x58>)
 8008f42:	430b      	orrs	r3, r1
 8008f44:	43db      	mvns	r3, r3
 8008f46:	ea02 0103 	and.w	r1, r2, r3
 8008f4a:	897b      	ldrh	r3, [r7, #10]
 8008f4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008f50:	7a7b      	ldrb	r3, [r7, #9]
 8008f52:	041b      	lsls	r3, r3, #16
 8008f54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f58:	431a      	orrs	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	431a      	orrs	r2, r3
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	431a      	orrs	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	430a      	orrs	r2, r1
 8008f68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008f6a:	bf00      	nop
 8008f6c:	3714      	adds	r7, #20
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	03ff63ff 	.word	0x03ff63ff

08008f7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	2b20      	cmp	r3, #32
 8008f90:	d138      	bne.n	8009004 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d101      	bne.n	8008fa0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	e032      	b.n	8009006 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2224      	movs	r2, #36	; 0x24
 8008fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f022 0201 	bic.w	r2, r2, #1
 8008fbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008fce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6819      	ldr	r1, [r3, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	683a      	ldr	r2, [r7, #0]
 8008fdc:	430a      	orrs	r2, r1
 8008fde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f042 0201 	orr.w	r2, r2, #1
 8008fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2220      	movs	r2, #32
 8008ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	e000      	b.n	8009006 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009004:	2302      	movs	r3, #2
  }
}
 8009006:	4618      	mov	r0, r3
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009012:	b480      	push	{r7}
 8009014:	b085      	sub	sp, #20
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009022:	b2db      	uxtb	r3, r3
 8009024:	2b20      	cmp	r3, #32
 8009026:	d139      	bne.n	800909c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800902e:	2b01      	cmp	r3, #1
 8009030:	d101      	bne.n	8009036 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009032:	2302      	movs	r3, #2
 8009034:	e033      	b.n	800909e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2224      	movs	r2, #36	; 0x24
 8009042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f022 0201 	bic.w	r2, r2, #1
 8009054:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009064:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	021b      	lsls	r3, r3, #8
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	4313      	orrs	r3, r2
 800906e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f042 0201 	orr.w	r2, r2, #1
 8009086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2220      	movs	r2, #32
 800908c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	e000      	b.n	800909e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800909c:	2302      	movs	r3, #2
  }
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3714      	adds	r7, #20
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
	...

080090ac <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d101      	bne.n	80090c2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e0bb      	b.n	800923a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	2b05      	cmp	r3, #5
 80090cc:	d101      	bne.n	80090d2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e0b3      	b.n	800923a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d101      	bne.n	80090e2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e0ab      	b.n	800923a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090e2:	4b58      	ldr	r3, [pc, #352]	; (8009244 <HAL_OPAMP_Init+0x198>)
 80090e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090e6:	4a57      	ldr	r2, [pc, #348]	; (8009244 <HAL_OPAMP_Init+0x198>)
 80090e8:	f043 0301 	orr.w	r3, r3, #1
 80090ec:	6613      	str	r3, [r2, #96]	; 0x60
 80090ee:	4b55      	ldr	r3, [pc, #340]	; (8009244 <HAL_OPAMP_Init+0x198>)
 80090f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090f2:	f003 0301 	and.w	r3, r3, #1
 80090f6:	60bb      	str	r3, [r7, #8]
 80090f8:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	d103      	bne.n	800910e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7fb fbfe 	bl	8004910 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	2b40      	cmp	r3, #64	; 0x40
 800911a:	d003      	beq.n	8009124 <HAL_OPAMP_Init+0x78>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	2b60      	cmp	r3, #96	; 0x60
 8009122:	d133      	bne.n	800918c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f023 0110 	bic.w	r1, r3, #16
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	430a      	orrs	r2, r1
 8009138:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	4b41      	ldr	r3, [pc, #260]	; (8009248 <HAL_OPAMP_Init+0x19c>)
 8009142:	4013      	ands	r3, r2
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	6851      	ldr	r1, [r2, #4]
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	6892      	ldr	r2, [r2, #8]
 800914c:	4311      	orrs	r1, r2
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	6912      	ldr	r2, [r2, #16]
 8009152:	430a      	orrs	r2, r1
 8009154:	6879      	ldr	r1, [r7, #4]
 8009156:	7d09      	ldrb	r1, [r1, #20]
 8009158:	2901      	cmp	r1, #1
 800915a:	d102      	bne.n	8009162 <HAL_OPAMP_Init+0xb6>
 800915c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009160:	e000      	b.n	8009164 <HAL_OPAMP_Init+0xb8>
 8009162:	2100      	movs	r1, #0
 8009164:	4311      	orrs	r1, r2
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800916a:	4311      	orrs	r1, r2
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009170:	4311      	orrs	r1, r2
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009176:	04d2      	lsls	r2, r2, #19
 8009178:	4311      	orrs	r1, r2
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800917e:	0612      	lsls	r2, r2, #24
 8009180:	4311      	orrs	r1, r2
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	6812      	ldr	r2, [r2, #0]
 8009186:	430b      	orrs	r3, r1
 8009188:	6013      	str	r3, [r2, #0]
 800918a:	e035      	b.n	80091f8 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f023 0110 	bic.w	r1, r3, #16
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	430a      	orrs	r2, r1
 80091a0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	4b27      	ldr	r3, [pc, #156]	; (8009248 <HAL_OPAMP_Init+0x19c>)
 80091aa:	4013      	ands	r3, r2
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	6851      	ldr	r1, [r2, #4]
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	6892      	ldr	r2, [r2, #8]
 80091b4:	4311      	orrs	r1, r2
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	68d2      	ldr	r2, [r2, #12]
 80091ba:	4311      	orrs	r1, r2
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	6912      	ldr	r2, [r2, #16]
 80091c0:	430a      	orrs	r2, r1
 80091c2:	6879      	ldr	r1, [r7, #4]
 80091c4:	7d09      	ldrb	r1, [r1, #20]
 80091c6:	2901      	cmp	r1, #1
 80091c8:	d102      	bne.n	80091d0 <HAL_OPAMP_Init+0x124>
 80091ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80091ce:	e000      	b.n	80091d2 <HAL_OPAMP_Init+0x126>
 80091d0:	2100      	movs	r1, #0
 80091d2:	4311      	orrs	r1, r2
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80091d8:	4311      	orrs	r1, r2
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80091de:	4311      	orrs	r1, r2
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80091e4:	04d2      	lsls	r2, r2, #19
 80091e6:	4311      	orrs	r1, r2
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80091ec:	0612      	lsls	r2, r2, #24
 80091ee:	4311      	orrs	r1, r2
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	6812      	ldr	r2, [r2, #0]
 80091f4:	430b      	orrs	r3, r1
 80091f6:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	db10      	blt.n	8009224 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	699a      	ldr	r2, [r3, #24]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	69db      	ldr	r3, [r3, #28]
 8009214:	431a      	orrs	r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	431a      	orrs	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	430a      	orrs	r2, r1
 8009222:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800922a:	b2db      	uxtb	r3, r3
 800922c:	2b00      	cmp	r3, #0
 800922e:	d103      	bne.n	8009238 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8009238:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800923a:	4618      	mov	r0, r3
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	40021000 	.word	0x40021000
 8009248:	e0003e11 	.word	0xe0003e11

0800924c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d102      	bne.n	8009264 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	73fb      	strb	r3, [r7, #15]
 8009262:	e01d      	b.n	80092a0 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800926a:	b2db      	uxtb	r3, r3
 800926c:	2b05      	cmp	r3, #5
 800926e:	d102      	bne.n	8009276 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	73fb      	strb	r3, [r7, #15]
 8009274:	e014      	b.n	80092a0 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800927c:	b2db      	uxtb	r3, r3
 800927e:	2b01      	cmp	r3, #1
 8009280:	d10c      	bne.n	800929c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f042 0201 	orr.w	r2, r2, #1
 8009290:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2204      	movs	r2, #4
 8009296:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800929a:	e001      	b.n	80092a0 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80092a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3714      	adds	r7, #20
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
	...

080092b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b085      	sub	sp, #20
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d141      	bne.n	8009342 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80092be:	4b4b      	ldr	r3, [pc, #300]	; (80093ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80092c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092ca:	d131      	bne.n	8009330 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80092cc:	4b47      	ldr	r3, [pc, #284]	; (80093ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092d2:	4a46      	ldr	r2, [pc, #280]	; (80093ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80092dc:	4b43      	ldr	r3, [pc, #268]	; (80093ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80092e4:	4a41      	ldr	r2, [pc, #260]	; (80093ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80092ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80092ec:	4b40      	ldr	r3, [pc, #256]	; (80093f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2232      	movs	r2, #50	; 0x32
 80092f2:	fb02 f303 	mul.w	r3, r2, r3
 80092f6:	4a3f      	ldr	r2, [pc, #252]	; (80093f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80092f8:	fba2 2303 	umull	r2, r3, r2, r3
 80092fc:	0c9b      	lsrs	r3, r3, #18
 80092fe:	3301      	adds	r3, #1
 8009300:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009302:	e002      	b.n	800930a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	3b01      	subs	r3, #1
 8009308:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800930a:	4b38      	ldr	r3, [pc, #224]	; (80093ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800930c:	695b      	ldr	r3, [r3, #20]
 800930e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009316:	d102      	bne.n	800931e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1f2      	bne.n	8009304 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800931e:	4b33      	ldr	r3, [pc, #204]	; (80093ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009320:	695b      	ldr	r3, [r3, #20]
 8009322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800932a:	d158      	bne.n	80093de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800932c:	2303      	movs	r3, #3
 800932e:	e057      	b.n	80093e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009330:	4b2e      	ldr	r3, [pc, #184]	; (80093ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009336:	4a2d      	ldr	r2, [pc, #180]	; (80093ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800933c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009340:	e04d      	b.n	80093de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009348:	d141      	bne.n	80093ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800934a:	4b28      	ldr	r3, [pc, #160]	; (80093ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009356:	d131      	bne.n	80093bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009358:	4b24      	ldr	r3, [pc, #144]	; (80093ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800935a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800935e:	4a23      	ldr	r2, [pc, #140]	; (80093ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009364:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009368:	4b20      	ldr	r3, [pc, #128]	; (80093ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009370:	4a1e      	ldr	r2, [pc, #120]	; (80093ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009376:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009378:	4b1d      	ldr	r3, [pc, #116]	; (80093f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2232      	movs	r2, #50	; 0x32
 800937e:	fb02 f303 	mul.w	r3, r2, r3
 8009382:	4a1c      	ldr	r2, [pc, #112]	; (80093f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009384:	fba2 2303 	umull	r2, r3, r2, r3
 8009388:	0c9b      	lsrs	r3, r3, #18
 800938a:	3301      	adds	r3, #1
 800938c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800938e:	e002      	b.n	8009396 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	3b01      	subs	r3, #1
 8009394:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009396:	4b15      	ldr	r3, [pc, #84]	; (80093ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009398:	695b      	ldr	r3, [r3, #20]
 800939a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800939e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093a2:	d102      	bne.n	80093aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1f2      	bne.n	8009390 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80093aa:	4b10      	ldr	r3, [pc, #64]	; (80093ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093b6:	d112      	bne.n	80093de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80093b8:	2303      	movs	r3, #3
 80093ba:	e011      	b.n	80093e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80093bc:	4b0b      	ldr	r3, [pc, #44]	; (80093ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80093be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093c2:	4a0a      	ldr	r2, [pc, #40]	; (80093ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80093c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80093cc:	e007      	b.n	80093de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80093ce:	4b07      	ldr	r3, [pc, #28]	; (80093ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80093d6:	4a05      	ldr	r2, [pc, #20]	; (80093ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80093d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80093dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3714      	adds	r7, #20
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr
 80093ec:	40007000 	.word	0x40007000
 80093f0:	20000000 	.word	0x20000000
 80093f4:	431bde83 	.word	0x431bde83

080093f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80093f8:	b480      	push	{r7}
 80093fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80093fc:	4b05      	ldr	r3, [pc, #20]	; (8009414 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	4a04      	ldr	r2, [pc, #16]	; (8009414 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009406:	6093      	str	r3, [r2, #8]
}
 8009408:	bf00      	nop
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	40007000 	.word	0x40007000

08009418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b088      	sub	sp, #32
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d101      	bne.n	800942a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e306      	b.n	8009a38 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 0301 	and.w	r3, r3, #1
 8009432:	2b00      	cmp	r3, #0
 8009434:	d075      	beq.n	8009522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009436:	4b97      	ldr	r3, [pc, #604]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	f003 030c 	and.w	r3, r3, #12
 800943e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009440:	4b94      	ldr	r3, [pc, #592]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	f003 0303 	and.w	r3, r3, #3
 8009448:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	2b0c      	cmp	r3, #12
 800944e:	d102      	bne.n	8009456 <HAL_RCC_OscConfig+0x3e>
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	2b03      	cmp	r3, #3
 8009454:	d002      	beq.n	800945c <HAL_RCC_OscConfig+0x44>
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	2b08      	cmp	r3, #8
 800945a:	d10b      	bne.n	8009474 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800945c:	4b8d      	ldr	r3, [pc, #564]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009464:	2b00      	cmp	r3, #0
 8009466:	d05b      	beq.n	8009520 <HAL_RCC_OscConfig+0x108>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d157      	bne.n	8009520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	e2e1      	b.n	8009a38 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800947c:	d106      	bne.n	800948c <HAL_RCC_OscConfig+0x74>
 800947e:	4b85      	ldr	r3, [pc, #532]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a84      	ldr	r2, [pc, #528]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 8009484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009488:	6013      	str	r3, [r2, #0]
 800948a:	e01d      	b.n	80094c8 <HAL_RCC_OscConfig+0xb0>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009494:	d10c      	bne.n	80094b0 <HAL_RCC_OscConfig+0x98>
 8009496:	4b7f      	ldr	r3, [pc, #508]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a7e      	ldr	r2, [pc, #504]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 800949c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80094a0:	6013      	str	r3, [r2, #0]
 80094a2:	4b7c      	ldr	r3, [pc, #496]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a7b      	ldr	r2, [pc, #492]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 80094a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094ac:	6013      	str	r3, [r2, #0]
 80094ae:	e00b      	b.n	80094c8 <HAL_RCC_OscConfig+0xb0>
 80094b0:	4b78      	ldr	r3, [pc, #480]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a77      	ldr	r2, [pc, #476]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 80094b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094ba:	6013      	str	r3, [r2, #0]
 80094bc:	4b75      	ldr	r3, [pc, #468]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a74      	ldr	r2, [pc, #464]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 80094c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d013      	beq.n	80094f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094d0:	f7fc f914 	bl	80056fc <HAL_GetTick>
 80094d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80094d6:	e008      	b.n	80094ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80094d8:	f7fc f910 	bl	80056fc <HAL_GetTick>
 80094dc:	4602      	mov	r2, r0
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	1ad3      	subs	r3, r2, r3
 80094e2:	2b64      	cmp	r3, #100	; 0x64
 80094e4:	d901      	bls.n	80094ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80094e6:	2303      	movs	r3, #3
 80094e8:	e2a6      	b.n	8009a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80094ea:	4b6a      	ldr	r3, [pc, #424]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d0f0      	beq.n	80094d8 <HAL_RCC_OscConfig+0xc0>
 80094f6:	e014      	b.n	8009522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094f8:	f7fc f900 	bl	80056fc <HAL_GetTick>
 80094fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80094fe:	e008      	b.n	8009512 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009500:	f7fc f8fc 	bl	80056fc <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	2b64      	cmp	r3, #100	; 0x64
 800950c:	d901      	bls.n	8009512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e292      	b.n	8009a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009512:	4b60      	ldr	r3, [pc, #384]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1f0      	bne.n	8009500 <HAL_RCC_OscConfig+0xe8>
 800951e:	e000      	b.n	8009522 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 0302 	and.w	r3, r3, #2
 800952a:	2b00      	cmp	r3, #0
 800952c:	d075      	beq.n	800961a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800952e:	4b59      	ldr	r3, [pc, #356]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	f003 030c 	and.w	r3, r3, #12
 8009536:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009538:	4b56      	ldr	r3, [pc, #344]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	f003 0303 	and.w	r3, r3, #3
 8009540:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	2b0c      	cmp	r3, #12
 8009546:	d102      	bne.n	800954e <HAL_RCC_OscConfig+0x136>
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	2b02      	cmp	r3, #2
 800954c:	d002      	beq.n	8009554 <HAL_RCC_OscConfig+0x13c>
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	2b04      	cmp	r3, #4
 8009552:	d11f      	bne.n	8009594 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009554:	4b4f      	ldr	r3, [pc, #316]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800955c:	2b00      	cmp	r3, #0
 800955e:	d005      	beq.n	800956c <HAL_RCC_OscConfig+0x154>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e265      	b.n	8009a38 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800956c:	4b49      	ldr	r3, [pc, #292]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	061b      	lsls	r3, r3, #24
 800957a:	4946      	ldr	r1, [pc, #280]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 800957c:	4313      	orrs	r3, r2
 800957e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009580:	4b45      	ldr	r3, [pc, #276]	; (8009698 <HAL_RCC_OscConfig+0x280>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4618      	mov	r0, r3
 8009586:	f7fc f86d 	bl	8005664 <HAL_InitTick>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d043      	beq.n	8009618 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	e251      	b.n	8009a38 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d023      	beq.n	80095e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800959c:	4b3d      	ldr	r3, [pc, #244]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a3c      	ldr	r2, [pc, #240]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 80095a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095a8:	f7fc f8a8 	bl	80056fc <HAL_GetTick>
 80095ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80095ae:	e008      	b.n	80095c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095b0:	f7fc f8a4 	bl	80056fc <HAL_GetTick>
 80095b4:	4602      	mov	r2, r0
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d901      	bls.n	80095c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80095be:	2303      	movs	r3, #3
 80095c0:	e23a      	b.n	8009a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80095c2:	4b34      	ldr	r3, [pc, #208]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d0f0      	beq.n	80095b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095ce:	4b31      	ldr	r3, [pc, #196]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	061b      	lsls	r3, r3, #24
 80095dc:	492d      	ldr	r1, [pc, #180]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 80095de:	4313      	orrs	r3, r2
 80095e0:	604b      	str	r3, [r1, #4]
 80095e2:	e01a      	b.n	800961a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80095e4:	4b2b      	ldr	r3, [pc, #172]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a2a      	ldr	r2, [pc, #168]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 80095ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095f0:	f7fc f884 	bl	80056fc <HAL_GetTick>
 80095f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80095f6:	e008      	b.n	800960a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095f8:	f7fc f880 	bl	80056fc <HAL_GetTick>
 80095fc:	4602      	mov	r2, r0
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	2b02      	cmp	r3, #2
 8009604:	d901      	bls.n	800960a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009606:	2303      	movs	r3, #3
 8009608:	e216      	b.n	8009a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800960a:	4b22      	ldr	r3, [pc, #136]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009612:	2b00      	cmp	r3, #0
 8009614:	d1f0      	bne.n	80095f8 <HAL_RCC_OscConfig+0x1e0>
 8009616:	e000      	b.n	800961a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009618:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 0308 	and.w	r3, r3, #8
 8009622:	2b00      	cmp	r3, #0
 8009624:	d041      	beq.n	80096aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	695b      	ldr	r3, [r3, #20]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d01c      	beq.n	8009668 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800962e:	4b19      	ldr	r3, [pc, #100]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 8009630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009634:	4a17      	ldr	r2, [pc, #92]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 8009636:	f043 0301 	orr.w	r3, r3, #1
 800963a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800963e:	f7fc f85d 	bl	80056fc <HAL_GetTick>
 8009642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009644:	e008      	b.n	8009658 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009646:	f7fc f859 	bl	80056fc <HAL_GetTick>
 800964a:	4602      	mov	r2, r0
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	2b02      	cmp	r3, #2
 8009652:	d901      	bls.n	8009658 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009654:	2303      	movs	r3, #3
 8009656:	e1ef      	b.n	8009a38 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009658:	4b0e      	ldr	r3, [pc, #56]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 800965a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800965e:	f003 0302 	and.w	r3, r3, #2
 8009662:	2b00      	cmp	r3, #0
 8009664:	d0ef      	beq.n	8009646 <HAL_RCC_OscConfig+0x22e>
 8009666:	e020      	b.n	80096aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009668:	4b0a      	ldr	r3, [pc, #40]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 800966a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800966e:	4a09      	ldr	r2, [pc, #36]	; (8009694 <HAL_RCC_OscConfig+0x27c>)
 8009670:	f023 0301 	bic.w	r3, r3, #1
 8009674:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009678:	f7fc f840 	bl	80056fc <HAL_GetTick>
 800967c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800967e:	e00d      	b.n	800969c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009680:	f7fc f83c 	bl	80056fc <HAL_GetTick>
 8009684:	4602      	mov	r2, r0
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	2b02      	cmp	r3, #2
 800968c:	d906      	bls.n	800969c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800968e:	2303      	movs	r3, #3
 8009690:	e1d2      	b.n	8009a38 <HAL_RCC_OscConfig+0x620>
 8009692:	bf00      	nop
 8009694:	40021000 	.word	0x40021000
 8009698:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800969c:	4b8c      	ldr	r3, [pc, #560]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 800969e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096a2:	f003 0302 	and.w	r3, r3, #2
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1ea      	bne.n	8009680 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f003 0304 	and.w	r3, r3, #4
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f000 80a6 	beq.w	8009804 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80096b8:	2300      	movs	r3, #0
 80096ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80096bc:	4b84      	ldr	r3, [pc, #528]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 80096be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d101      	bne.n	80096cc <HAL_RCC_OscConfig+0x2b4>
 80096c8:	2301      	movs	r3, #1
 80096ca:	e000      	b.n	80096ce <HAL_RCC_OscConfig+0x2b6>
 80096cc:	2300      	movs	r3, #0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00d      	beq.n	80096ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80096d2:	4b7f      	ldr	r3, [pc, #508]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 80096d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096d6:	4a7e      	ldr	r2, [pc, #504]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 80096d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096dc:	6593      	str	r3, [r2, #88]	; 0x58
 80096de:	4b7c      	ldr	r3, [pc, #496]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 80096e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096e6:	60fb      	str	r3, [r7, #12]
 80096e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80096ea:	2301      	movs	r3, #1
 80096ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80096ee:	4b79      	ldr	r3, [pc, #484]	; (80098d4 <HAL_RCC_OscConfig+0x4bc>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d118      	bne.n	800972c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80096fa:	4b76      	ldr	r3, [pc, #472]	; (80098d4 <HAL_RCC_OscConfig+0x4bc>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a75      	ldr	r2, [pc, #468]	; (80098d4 <HAL_RCC_OscConfig+0x4bc>)
 8009700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009706:	f7fb fff9 	bl	80056fc <HAL_GetTick>
 800970a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800970c:	e008      	b.n	8009720 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800970e:	f7fb fff5 	bl	80056fc <HAL_GetTick>
 8009712:	4602      	mov	r2, r0
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	2b02      	cmp	r3, #2
 800971a:	d901      	bls.n	8009720 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800971c:	2303      	movs	r3, #3
 800971e:	e18b      	b.n	8009a38 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009720:	4b6c      	ldr	r3, [pc, #432]	; (80098d4 <HAL_RCC_OscConfig+0x4bc>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009728:	2b00      	cmp	r3, #0
 800972a:	d0f0      	beq.n	800970e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	2b01      	cmp	r3, #1
 8009732:	d108      	bne.n	8009746 <HAL_RCC_OscConfig+0x32e>
 8009734:	4b66      	ldr	r3, [pc, #408]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 8009736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800973a:	4a65      	ldr	r2, [pc, #404]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 800973c:	f043 0301 	orr.w	r3, r3, #1
 8009740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009744:	e024      	b.n	8009790 <HAL_RCC_OscConfig+0x378>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	2b05      	cmp	r3, #5
 800974c:	d110      	bne.n	8009770 <HAL_RCC_OscConfig+0x358>
 800974e:	4b60      	ldr	r3, [pc, #384]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 8009750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009754:	4a5e      	ldr	r2, [pc, #376]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 8009756:	f043 0304 	orr.w	r3, r3, #4
 800975a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800975e:	4b5c      	ldr	r3, [pc, #368]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 8009760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009764:	4a5a      	ldr	r2, [pc, #360]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 8009766:	f043 0301 	orr.w	r3, r3, #1
 800976a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800976e:	e00f      	b.n	8009790 <HAL_RCC_OscConfig+0x378>
 8009770:	4b57      	ldr	r3, [pc, #348]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 8009772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009776:	4a56      	ldr	r2, [pc, #344]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 8009778:	f023 0301 	bic.w	r3, r3, #1
 800977c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009780:	4b53      	ldr	r3, [pc, #332]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 8009782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009786:	4a52      	ldr	r2, [pc, #328]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 8009788:	f023 0304 	bic.w	r3, r3, #4
 800978c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d016      	beq.n	80097c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009798:	f7fb ffb0 	bl	80056fc <HAL_GetTick>
 800979c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800979e:	e00a      	b.n	80097b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097a0:	f7fb ffac 	bl	80056fc <HAL_GetTick>
 80097a4:	4602      	mov	r2, r0
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d901      	bls.n	80097b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80097b2:	2303      	movs	r3, #3
 80097b4:	e140      	b.n	8009a38 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097b6:	4b46      	ldr	r3, [pc, #280]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 80097b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097bc:	f003 0302 	and.w	r3, r3, #2
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d0ed      	beq.n	80097a0 <HAL_RCC_OscConfig+0x388>
 80097c4:	e015      	b.n	80097f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097c6:	f7fb ff99 	bl	80056fc <HAL_GetTick>
 80097ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80097cc:	e00a      	b.n	80097e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097ce:	f7fb ff95 	bl	80056fc <HAL_GetTick>
 80097d2:	4602      	mov	r2, r0
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	1ad3      	subs	r3, r2, r3
 80097d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80097dc:	4293      	cmp	r3, r2
 80097de:	d901      	bls.n	80097e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80097e0:	2303      	movs	r3, #3
 80097e2:	e129      	b.n	8009a38 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80097e4:	4b3a      	ldr	r3, [pc, #232]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 80097e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097ea:	f003 0302 	and.w	r3, r3, #2
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1ed      	bne.n	80097ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80097f2:	7ffb      	ldrb	r3, [r7, #31]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d105      	bne.n	8009804 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097f8:	4b35      	ldr	r3, [pc, #212]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 80097fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097fc:	4a34      	ldr	r2, [pc, #208]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 80097fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009802:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 0320 	and.w	r3, r3, #32
 800980c:	2b00      	cmp	r3, #0
 800980e:	d03c      	beq.n	800988a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d01c      	beq.n	8009852 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009818:	4b2d      	ldr	r3, [pc, #180]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 800981a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800981e:	4a2c      	ldr	r2, [pc, #176]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 8009820:	f043 0301 	orr.w	r3, r3, #1
 8009824:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009828:	f7fb ff68 	bl	80056fc <HAL_GetTick>
 800982c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800982e:	e008      	b.n	8009842 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009830:	f7fb ff64 	bl	80056fc <HAL_GetTick>
 8009834:	4602      	mov	r2, r0
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	2b02      	cmp	r3, #2
 800983c:	d901      	bls.n	8009842 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800983e:	2303      	movs	r3, #3
 8009840:	e0fa      	b.n	8009a38 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009842:	4b23      	ldr	r3, [pc, #140]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 8009844:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009848:	f003 0302 	and.w	r3, r3, #2
 800984c:	2b00      	cmp	r3, #0
 800984e:	d0ef      	beq.n	8009830 <HAL_RCC_OscConfig+0x418>
 8009850:	e01b      	b.n	800988a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009852:	4b1f      	ldr	r3, [pc, #124]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 8009854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009858:	4a1d      	ldr	r2, [pc, #116]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 800985a:	f023 0301 	bic.w	r3, r3, #1
 800985e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009862:	f7fb ff4b 	bl	80056fc <HAL_GetTick>
 8009866:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009868:	e008      	b.n	800987c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800986a:	f7fb ff47 	bl	80056fc <HAL_GetTick>
 800986e:	4602      	mov	r2, r0
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	1ad3      	subs	r3, r2, r3
 8009874:	2b02      	cmp	r3, #2
 8009876:	d901      	bls.n	800987c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009878:	2303      	movs	r3, #3
 800987a:	e0dd      	b.n	8009a38 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800987c:	4b14      	ldr	r3, [pc, #80]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 800987e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009882:	f003 0302 	and.w	r3, r3, #2
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1ef      	bne.n	800986a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	69db      	ldr	r3, [r3, #28]
 800988e:	2b00      	cmp	r3, #0
 8009890:	f000 80d1 	beq.w	8009a36 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009894:	4b0e      	ldr	r3, [pc, #56]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f003 030c 	and.w	r3, r3, #12
 800989c:	2b0c      	cmp	r3, #12
 800989e:	f000 808b 	beq.w	80099b8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	69db      	ldr	r3, [r3, #28]
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	d15e      	bne.n	8009968 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098aa:	4b09      	ldr	r3, [pc, #36]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a08      	ldr	r2, [pc, #32]	; (80098d0 <HAL_RCC_OscConfig+0x4b8>)
 80098b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098b6:	f7fb ff21 	bl	80056fc <HAL_GetTick>
 80098ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80098bc:	e00c      	b.n	80098d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098be:	f7fb ff1d 	bl	80056fc <HAL_GetTick>
 80098c2:	4602      	mov	r2, r0
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	2b02      	cmp	r3, #2
 80098ca:	d905      	bls.n	80098d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80098cc:	2303      	movs	r3, #3
 80098ce:	e0b3      	b.n	8009a38 <HAL_RCC_OscConfig+0x620>
 80098d0:	40021000 	.word	0x40021000
 80098d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80098d8:	4b59      	ldr	r3, [pc, #356]	; (8009a40 <HAL_RCC_OscConfig+0x628>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1ec      	bne.n	80098be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098e4:	4b56      	ldr	r3, [pc, #344]	; (8009a40 <HAL_RCC_OscConfig+0x628>)
 80098e6:	68da      	ldr	r2, [r3, #12]
 80098e8:	4b56      	ldr	r3, [pc, #344]	; (8009a44 <HAL_RCC_OscConfig+0x62c>)
 80098ea:	4013      	ands	r3, r2
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	6a11      	ldr	r1, [r2, #32]
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80098f4:	3a01      	subs	r2, #1
 80098f6:	0112      	lsls	r2, r2, #4
 80098f8:	4311      	orrs	r1, r2
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80098fe:	0212      	lsls	r2, r2, #8
 8009900:	4311      	orrs	r1, r2
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009906:	0852      	lsrs	r2, r2, #1
 8009908:	3a01      	subs	r2, #1
 800990a:	0552      	lsls	r2, r2, #21
 800990c:	4311      	orrs	r1, r2
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009912:	0852      	lsrs	r2, r2, #1
 8009914:	3a01      	subs	r2, #1
 8009916:	0652      	lsls	r2, r2, #25
 8009918:	4311      	orrs	r1, r2
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800991e:	06d2      	lsls	r2, r2, #27
 8009920:	430a      	orrs	r2, r1
 8009922:	4947      	ldr	r1, [pc, #284]	; (8009a40 <HAL_RCC_OscConfig+0x628>)
 8009924:	4313      	orrs	r3, r2
 8009926:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009928:	4b45      	ldr	r3, [pc, #276]	; (8009a40 <HAL_RCC_OscConfig+0x628>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a44      	ldr	r2, [pc, #272]	; (8009a40 <HAL_RCC_OscConfig+0x628>)
 800992e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009932:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009934:	4b42      	ldr	r3, [pc, #264]	; (8009a40 <HAL_RCC_OscConfig+0x628>)
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	4a41      	ldr	r2, [pc, #260]	; (8009a40 <HAL_RCC_OscConfig+0x628>)
 800993a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800993e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009940:	f7fb fedc 	bl	80056fc <HAL_GetTick>
 8009944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009946:	e008      	b.n	800995a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009948:	f7fb fed8 	bl	80056fc <HAL_GetTick>
 800994c:	4602      	mov	r2, r0
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	2b02      	cmp	r3, #2
 8009954:	d901      	bls.n	800995a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009956:	2303      	movs	r3, #3
 8009958:	e06e      	b.n	8009a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800995a:	4b39      	ldr	r3, [pc, #228]	; (8009a40 <HAL_RCC_OscConfig+0x628>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009962:	2b00      	cmp	r3, #0
 8009964:	d0f0      	beq.n	8009948 <HAL_RCC_OscConfig+0x530>
 8009966:	e066      	b.n	8009a36 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009968:	4b35      	ldr	r3, [pc, #212]	; (8009a40 <HAL_RCC_OscConfig+0x628>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a34      	ldr	r2, [pc, #208]	; (8009a40 <HAL_RCC_OscConfig+0x628>)
 800996e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009972:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009974:	4b32      	ldr	r3, [pc, #200]	; (8009a40 <HAL_RCC_OscConfig+0x628>)
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	4a31      	ldr	r2, [pc, #196]	; (8009a40 <HAL_RCC_OscConfig+0x628>)
 800997a:	f023 0303 	bic.w	r3, r3, #3
 800997e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009980:	4b2f      	ldr	r3, [pc, #188]	; (8009a40 <HAL_RCC_OscConfig+0x628>)
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	4a2e      	ldr	r2, [pc, #184]	; (8009a40 <HAL_RCC_OscConfig+0x628>)
 8009986:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800998a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800998e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009990:	f7fb feb4 	bl	80056fc <HAL_GetTick>
 8009994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009996:	e008      	b.n	80099aa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009998:	f7fb feb0 	bl	80056fc <HAL_GetTick>
 800999c:	4602      	mov	r2, r0
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d901      	bls.n	80099aa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80099a6:	2303      	movs	r3, #3
 80099a8:	e046      	b.n	8009a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80099aa:	4b25      	ldr	r3, [pc, #148]	; (8009a40 <HAL_RCC_OscConfig+0x628>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1f0      	bne.n	8009998 <HAL_RCC_OscConfig+0x580>
 80099b6:	e03e      	b.n	8009a36 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	69db      	ldr	r3, [r3, #28]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d101      	bne.n	80099c4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	e039      	b.n	8009a38 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80099c4:	4b1e      	ldr	r3, [pc, #120]	; (8009a40 <HAL_RCC_OscConfig+0x628>)
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f003 0203 	and.w	r2, r3, #3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a1b      	ldr	r3, [r3, #32]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d12c      	bne.n	8009a32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e2:	3b01      	subs	r3, #1
 80099e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d123      	bne.n	8009a32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d11b      	bne.n	8009a32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a04:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d113      	bne.n	8009a32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a14:	085b      	lsrs	r3, r3, #1
 8009a16:	3b01      	subs	r3, #1
 8009a18:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d109      	bne.n	8009a32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a28:	085b      	lsrs	r3, r3, #1
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d001      	beq.n	8009a36 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e000      	b.n	8009a38 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3720      	adds	r7, #32
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	40021000 	.word	0x40021000
 8009a44:	019f800c 	.word	0x019f800c

08009a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b086      	sub	sp, #24
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009a52:	2300      	movs	r3, #0
 8009a54:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d101      	bne.n	8009a60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e11e      	b.n	8009c9e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009a60:	4b91      	ldr	r3, [pc, #580]	; (8009ca8 <HAL_RCC_ClockConfig+0x260>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 030f 	and.w	r3, r3, #15
 8009a68:	683a      	ldr	r2, [r7, #0]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d910      	bls.n	8009a90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a6e:	4b8e      	ldr	r3, [pc, #568]	; (8009ca8 <HAL_RCC_ClockConfig+0x260>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f023 020f 	bic.w	r2, r3, #15
 8009a76:	498c      	ldr	r1, [pc, #560]	; (8009ca8 <HAL_RCC_ClockConfig+0x260>)
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a7e:	4b8a      	ldr	r3, [pc, #552]	; (8009ca8 <HAL_RCC_ClockConfig+0x260>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f003 030f 	and.w	r3, r3, #15
 8009a86:	683a      	ldr	r2, [r7, #0]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d001      	beq.n	8009a90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e106      	b.n	8009c9e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f003 0301 	and.w	r3, r3, #1
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d073      	beq.n	8009b84 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	2b03      	cmp	r3, #3
 8009aa2:	d129      	bne.n	8009af8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009aa4:	4b81      	ldr	r3, [pc, #516]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d101      	bne.n	8009ab4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e0f4      	b.n	8009c9e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009ab4:	f000 f99e 	bl	8009df4 <RCC_GetSysClockFreqFromPLLSource>
 8009ab8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	4a7c      	ldr	r2, [pc, #496]	; (8009cb0 <HAL_RCC_ClockConfig+0x268>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d93f      	bls.n	8009b42 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009ac2:	4b7a      	ldr	r3, [pc, #488]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d009      	beq.n	8009ae2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d033      	beq.n	8009b42 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d12f      	bne.n	8009b42 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009ae2:	4b72      	ldr	r3, [pc, #456]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009aea:	4a70      	ldr	r2, [pc, #448]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009af0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009af2:	2380      	movs	r3, #128	; 0x80
 8009af4:	617b      	str	r3, [r7, #20]
 8009af6:	e024      	b.n	8009b42 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d107      	bne.n	8009b10 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009b00:	4b6a      	ldr	r3, [pc, #424]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d109      	bne.n	8009b20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e0c6      	b.n	8009c9e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009b10:	4b66      	ldr	r3, [pc, #408]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d101      	bne.n	8009b20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e0be      	b.n	8009c9e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009b20:	f000 f8ce 	bl	8009cc0 <HAL_RCC_GetSysClockFreq>
 8009b24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	4a61      	ldr	r2, [pc, #388]	; (8009cb0 <HAL_RCC_ClockConfig+0x268>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d909      	bls.n	8009b42 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009b2e:	4b5f      	ldr	r3, [pc, #380]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b36:	4a5d      	ldr	r2, [pc, #372]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b3c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009b3e:	2380      	movs	r3, #128	; 0x80
 8009b40:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009b42:	4b5a      	ldr	r3, [pc, #360]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	f023 0203 	bic.w	r2, r3, #3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	4957      	ldr	r1, [pc, #348]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009b50:	4313      	orrs	r3, r2
 8009b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b54:	f7fb fdd2 	bl	80056fc <HAL_GetTick>
 8009b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b5a:	e00a      	b.n	8009b72 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b5c:	f7fb fdce 	bl	80056fc <HAL_GetTick>
 8009b60:	4602      	mov	r2, r0
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d901      	bls.n	8009b72 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	e095      	b.n	8009c9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b72:	4b4e      	ldr	r3, [pc, #312]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	f003 020c 	and.w	r2, r3, #12
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d1eb      	bne.n	8009b5c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 0302 	and.w	r3, r3, #2
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d023      	beq.n	8009bd8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f003 0304 	and.w	r3, r3, #4
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d005      	beq.n	8009ba8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b9c:	4b43      	ldr	r3, [pc, #268]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	4a42      	ldr	r2, [pc, #264]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009ba2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009ba6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 0308 	and.w	r3, r3, #8
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d007      	beq.n	8009bc4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009bb4:	4b3d      	ldr	r3, [pc, #244]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009bbc:	4a3b      	ldr	r2, [pc, #236]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009bbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009bc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009bc4:	4b39      	ldr	r3, [pc, #228]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	4936      	ldr	r1, [pc, #216]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	608b      	str	r3, [r1, #8]
 8009bd6:	e008      	b.n	8009bea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	2b80      	cmp	r3, #128	; 0x80
 8009bdc:	d105      	bne.n	8009bea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009bde:	4b33      	ldr	r3, [pc, #204]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	4a32      	ldr	r2, [pc, #200]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009be4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009be8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009bea:	4b2f      	ldr	r3, [pc, #188]	; (8009ca8 <HAL_RCC_ClockConfig+0x260>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 030f 	and.w	r3, r3, #15
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d21d      	bcs.n	8009c34 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bf8:	4b2b      	ldr	r3, [pc, #172]	; (8009ca8 <HAL_RCC_ClockConfig+0x260>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f023 020f 	bic.w	r2, r3, #15
 8009c00:	4929      	ldr	r1, [pc, #164]	; (8009ca8 <HAL_RCC_ClockConfig+0x260>)
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009c08:	f7fb fd78 	bl	80056fc <HAL_GetTick>
 8009c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c0e:	e00a      	b.n	8009c26 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c10:	f7fb fd74 	bl	80056fc <HAL_GetTick>
 8009c14:	4602      	mov	r2, r0
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d901      	bls.n	8009c26 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009c22:	2303      	movs	r3, #3
 8009c24:	e03b      	b.n	8009c9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c26:	4b20      	ldr	r3, [pc, #128]	; (8009ca8 <HAL_RCC_ClockConfig+0x260>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 030f 	and.w	r3, r3, #15
 8009c2e:	683a      	ldr	r2, [r7, #0]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d1ed      	bne.n	8009c10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f003 0304 	and.w	r3, r3, #4
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d008      	beq.n	8009c52 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c40:	4b1a      	ldr	r3, [pc, #104]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	4917      	ldr	r1, [pc, #92]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 0308 	and.w	r3, r3, #8
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d009      	beq.n	8009c72 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009c5e:	4b13      	ldr	r3, [pc, #76]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	00db      	lsls	r3, r3, #3
 8009c6c:	490f      	ldr	r1, [pc, #60]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009c72:	f000 f825 	bl	8009cc0 <HAL_RCC_GetSysClockFreq>
 8009c76:	4602      	mov	r2, r0
 8009c78:	4b0c      	ldr	r3, [pc, #48]	; (8009cac <HAL_RCC_ClockConfig+0x264>)
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	091b      	lsrs	r3, r3, #4
 8009c7e:	f003 030f 	and.w	r3, r3, #15
 8009c82:	490c      	ldr	r1, [pc, #48]	; (8009cb4 <HAL_RCC_ClockConfig+0x26c>)
 8009c84:	5ccb      	ldrb	r3, [r1, r3]
 8009c86:	f003 031f 	and.w	r3, r3, #31
 8009c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c8e:	4a0a      	ldr	r2, [pc, #40]	; (8009cb8 <HAL_RCC_ClockConfig+0x270>)
 8009c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009c92:	4b0a      	ldr	r3, [pc, #40]	; (8009cbc <HAL_RCC_ClockConfig+0x274>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fb fce4 	bl	8005664 <HAL_InitTick>
 8009c9c:	4603      	mov	r3, r0
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3718      	adds	r7, #24
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	40022000 	.word	0x40022000
 8009cac:	40021000 	.word	0x40021000
 8009cb0:	04c4b400 	.word	0x04c4b400
 8009cb4:	08012e34 	.word	0x08012e34
 8009cb8:	20000000 	.word	0x20000000
 8009cbc:	20000004 	.word	0x20000004

08009cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b087      	sub	sp, #28
 8009cc4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009cc6:	4b2c      	ldr	r3, [pc, #176]	; (8009d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	f003 030c 	and.w	r3, r3, #12
 8009cce:	2b04      	cmp	r3, #4
 8009cd0:	d102      	bne.n	8009cd8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009cd2:	4b2a      	ldr	r3, [pc, #168]	; (8009d7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8009cd4:	613b      	str	r3, [r7, #16]
 8009cd6:	e047      	b.n	8009d68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009cd8:	4b27      	ldr	r3, [pc, #156]	; (8009d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	f003 030c 	and.w	r3, r3, #12
 8009ce0:	2b08      	cmp	r3, #8
 8009ce2:	d102      	bne.n	8009cea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009ce4:	4b26      	ldr	r3, [pc, #152]	; (8009d80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009ce6:	613b      	str	r3, [r7, #16]
 8009ce8:	e03e      	b.n	8009d68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009cea:	4b23      	ldr	r3, [pc, #140]	; (8009d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	f003 030c 	and.w	r3, r3, #12
 8009cf2:	2b0c      	cmp	r3, #12
 8009cf4:	d136      	bne.n	8009d64 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009cf6:	4b20      	ldr	r3, [pc, #128]	; (8009d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	f003 0303 	and.w	r3, r3, #3
 8009cfe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009d00:	4b1d      	ldr	r3, [pc, #116]	; (8009d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	091b      	lsrs	r3, r3, #4
 8009d06:	f003 030f 	and.w	r3, r3, #15
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2b03      	cmp	r3, #3
 8009d12:	d10c      	bne.n	8009d2e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009d14:	4a1a      	ldr	r2, [pc, #104]	; (8009d80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d1c:	4a16      	ldr	r2, [pc, #88]	; (8009d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009d1e:	68d2      	ldr	r2, [r2, #12]
 8009d20:	0a12      	lsrs	r2, r2, #8
 8009d22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009d26:	fb02 f303 	mul.w	r3, r2, r3
 8009d2a:	617b      	str	r3, [r7, #20]
      break;
 8009d2c:	e00c      	b.n	8009d48 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009d2e:	4a13      	ldr	r2, [pc, #76]	; (8009d7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d36:	4a10      	ldr	r2, [pc, #64]	; (8009d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009d38:	68d2      	ldr	r2, [r2, #12]
 8009d3a:	0a12      	lsrs	r2, r2, #8
 8009d3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009d40:	fb02 f303 	mul.w	r3, r2, r3
 8009d44:	617b      	str	r3, [r7, #20]
      break;
 8009d46:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009d48:	4b0b      	ldr	r3, [pc, #44]	; (8009d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	0e5b      	lsrs	r3, r3, #25
 8009d4e:	f003 0303 	and.w	r3, r3, #3
 8009d52:	3301      	adds	r3, #1
 8009d54:	005b      	lsls	r3, r3, #1
 8009d56:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009d58:	697a      	ldr	r2, [r7, #20]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d60:	613b      	str	r3, [r7, #16]
 8009d62:	e001      	b.n	8009d68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009d64:	2300      	movs	r3, #0
 8009d66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009d68:	693b      	ldr	r3, [r7, #16]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	371c      	adds	r7, #28
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	40021000 	.word	0x40021000
 8009d7c:	00f42400 	.word	0x00f42400
 8009d80:	007a1200 	.word	0x007a1200

08009d84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d84:	b480      	push	{r7}
 8009d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009d88:	4b03      	ldr	r3, [pc, #12]	; (8009d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	20000000 	.word	0x20000000

08009d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009da0:	f7ff fff0 	bl	8009d84 <HAL_RCC_GetHCLKFreq>
 8009da4:	4602      	mov	r2, r0
 8009da6:	4b06      	ldr	r3, [pc, #24]	; (8009dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	0a1b      	lsrs	r3, r3, #8
 8009dac:	f003 0307 	and.w	r3, r3, #7
 8009db0:	4904      	ldr	r1, [pc, #16]	; (8009dc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009db2:	5ccb      	ldrb	r3, [r1, r3]
 8009db4:	f003 031f 	and.w	r3, r3, #31
 8009db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	40021000 	.word	0x40021000
 8009dc4:	08012e44 	.word	0x08012e44

08009dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009dcc:	f7ff ffda 	bl	8009d84 <HAL_RCC_GetHCLKFreq>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	4b06      	ldr	r3, [pc, #24]	; (8009dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	0adb      	lsrs	r3, r3, #11
 8009dd8:	f003 0307 	and.w	r3, r3, #7
 8009ddc:	4904      	ldr	r1, [pc, #16]	; (8009df0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009dde:	5ccb      	ldrb	r3, [r1, r3]
 8009de0:	f003 031f 	and.w	r3, r3, #31
 8009de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	40021000 	.word	0x40021000
 8009df0:	08012e44 	.word	0x08012e44

08009df4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b087      	sub	sp, #28
 8009df8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009dfa:	4b1e      	ldr	r3, [pc, #120]	; (8009e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	f003 0303 	and.w	r3, r3, #3
 8009e02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009e04:	4b1b      	ldr	r3, [pc, #108]	; (8009e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	091b      	lsrs	r3, r3, #4
 8009e0a:	f003 030f 	and.w	r3, r3, #15
 8009e0e:	3301      	adds	r3, #1
 8009e10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	2b03      	cmp	r3, #3
 8009e16:	d10c      	bne.n	8009e32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009e18:	4a17      	ldr	r2, [pc, #92]	; (8009e78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e20:	4a14      	ldr	r2, [pc, #80]	; (8009e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009e22:	68d2      	ldr	r2, [r2, #12]
 8009e24:	0a12      	lsrs	r2, r2, #8
 8009e26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009e2a:	fb02 f303 	mul.w	r3, r2, r3
 8009e2e:	617b      	str	r3, [r7, #20]
    break;
 8009e30:	e00c      	b.n	8009e4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009e32:	4a12      	ldr	r2, [pc, #72]	; (8009e7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e3a:	4a0e      	ldr	r2, [pc, #56]	; (8009e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009e3c:	68d2      	ldr	r2, [r2, #12]
 8009e3e:	0a12      	lsrs	r2, r2, #8
 8009e40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009e44:	fb02 f303 	mul.w	r3, r2, r3
 8009e48:	617b      	str	r3, [r7, #20]
    break;
 8009e4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009e4c:	4b09      	ldr	r3, [pc, #36]	; (8009e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	0e5b      	lsrs	r3, r3, #25
 8009e52:	f003 0303 	and.w	r3, r3, #3
 8009e56:	3301      	adds	r3, #1
 8009e58:	005b      	lsls	r3, r3, #1
 8009e5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009e5c:	697a      	ldr	r2, [r7, #20]
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009e66:	687b      	ldr	r3, [r7, #4]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	371c      	adds	r7, #28
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr
 8009e74:	40021000 	.word	0x40021000
 8009e78:	007a1200 	.word	0x007a1200
 8009e7c:	00f42400 	.word	0x00f42400

08009e80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b086      	sub	sp, #24
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009e88:	2300      	movs	r3, #0
 8009e8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	f000 8098 	beq.w	8009fce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ea2:	4b43      	ldr	r3, [pc, #268]	; (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d10d      	bne.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009eae:	4b40      	ldr	r3, [pc, #256]	; (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eb2:	4a3f      	ldr	r2, [pc, #252]	; (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8009eba:	4b3d      	ldr	r3, [pc, #244]	; (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ec2:	60bb      	str	r3, [r7, #8]
 8009ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009eca:	4b3a      	ldr	r3, [pc, #232]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a39      	ldr	r2, [pc, #228]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ed4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ed6:	f7fb fc11 	bl	80056fc <HAL_GetTick>
 8009eda:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009edc:	e009      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ede:	f7fb fc0d 	bl	80056fc <HAL_GetTick>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	1ad3      	subs	r3, r2, r3
 8009ee8:	2b02      	cmp	r3, #2
 8009eea:	d902      	bls.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009eec:	2303      	movs	r3, #3
 8009eee:	74fb      	strb	r3, [r7, #19]
        break;
 8009ef0:	e005      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ef2:	4b30      	ldr	r3, [pc, #192]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d0ef      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009efe:	7cfb      	ldrb	r3, [r7, #19]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d159      	bne.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009f04:	4b2a      	ldr	r3, [pc, #168]	; (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f0e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d01e      	beq.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d019      	beq.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009f20:	4b23      	ldr	r3, [pc, #140]	; (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f2c:	4b20      	ldr	r3, [pc, #128]	; (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f32:	4a1f      	ldr	r2, [pc, #124]	; (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f3c:	4b1c      	ldr	r3, [pc, #112]	; (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f42:	4a1b      	ldr	r2, [pc, #108]	; (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009f4c:	4a18      	ldr	r2, [pc, #96]	; (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	f003 0301 	and.w	r3, r3, #1
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d016      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f5e:	f7fb fbcd 	bl	80056fc <HAL_GetTick>
 8009f62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f64:	e00b      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f66:	f7fb fbc9 	bl	80056fc <HAL_GetTick>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	1ad3      	subs	r3, r2, r3
 8009f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d902      	bls.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009f78:	2303      	movs	r3, #3
 8009f7a:	74fb      	strb	r3, [r7, #19]
            break;
 8009f7c:	e006      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f7e:	4b0c      	ldr	r3, [pc, #48]	; (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f84:	f003 0302 	and.w	r3, r3, #2
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d0ec      	beq.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009f8c:	7cfb      	ldrb	r3, [r7, #19]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10b      	bne.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f92:	4b07      	ldr	r3, [pc, #28]	; (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa0:	4903      	ldr	r1, [pc, #12]	; (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009fa8:	e008      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009faa:	7cfb      	ldrb	r3, [r7, #19]
 8009fac:	74bb      	strb	r3, [r7, #18]
 8009fae:	e005      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009fb0:	40021000 	.word	0x40021000
 8009fb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fb8:	7cfb      	ldrb	r3, [r7, #19]
 8009fba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009fbc:	7c7b      	ldrb	r3, [r7, #17]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d105      	bne.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009fc2:	4ba6      	ldr	r3, [pc, #664]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fc6:	4aa5      	ldr	r2, [pc, #660]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fcc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 0301 	and.w	r3, r3, #1
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00a      	beq.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009fda:	4ba0      	ldr	r3, [pc, #640]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fe0:	f023 0203 	bic.w	r2, r3, #3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	499c      	ldr	r1, [pc, #624]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009fea:	4313      	orrs	r3, r2
 8009fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 0302 	and.w	r3, r3, #2
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00a      	beq.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009ffc:	4b97      	ldr	r3, [pc, #604]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a002:	f023 020c 	bic.w	r2, r3, #12
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	4994      	ldr	r1, [pc, #592]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a00c:	4313      	orrs	r3, r2
 800a00e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f003 0304 	and.w	r3, r3, #4
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00a      	beq.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a01e:	4b8f      	ldr	r3, [pc, #572]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a024:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	498b      	ldr	r1, [pc, #556]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a02e:	4313      	orrs	r3, r2
 800a030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f003 0308 	and.w	r3, r3, #8
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00a      	beq.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a040:	4b86      	ldr	r3, [pc, #536]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a046:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	4983      	ldr	r1, [pc, #524]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a050:	4313      	orrs	r3, r2
 800a052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f003 0320 	and.w	r3, r3, #32
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00a      	beq.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a062:	4b7e      	ldr	r3, [pc, #504]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a068:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	695b      	ldr	r3, [r3, #20]
 800a070:	497a      	ldr	r1, [pc, #488]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a072:	4313      	orrs	r3, r2
 800a074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00a      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a084:	4b75      	ldr	r3, [pc, #468]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a08a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	4972      	ldr	r1, [pc, #456]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a094:	4313      	orrs	r3, r2
 800a096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00a      	beq.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a0a6:	4b6d      	ldr	r3, [pc, #436]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	69db      	ldr	r3, [r3, #28]
 800a0b4:	4969      	ldr	r1, [pc, #420]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d00a      	beq.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a0c8:	4b64      	ldr	r3, [pc, #400]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a1b      	ldr	r3, [r3, #32]
 800a0d6:	4961      	ldr	r1, [pc, #388]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d00a      	beq.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a0ea:	4b5c      	ldr	r3, [pc, #368]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f8:	4958      	ldr	r1, [pc, #352]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d015      	beq.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a10c:	4b53      	ldr	r3, [pc, #332]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a10e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a112:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a11a:	4950      	ldr	r1, [pc, #320]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a11c:	4313      	orrs	r3, r2
 800a11e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a12a:	d105      	bne.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a12c:	4b4b      	ldr	r3, [pc, #300]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	4a4a      	ldr	r2, [pc, #296]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a136:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a140:	2b00      	cmp	r3, #0
 800a142:	d015      	beq.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a144:	4b45      	ldr	r3, [pc, #276]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a14a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a152:	4942      	ldr	r1, [pc, #264]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a154:	4313      	orrs	r3, r2
 800a156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a162:	d105      	bne.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a164:	4b3d      	ldr	r3, [pc, #244]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	4a3c      	ldr	r2, [pc, #240]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a16a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a16e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d015      	beq.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a17c:	4b37      	ldr	r3, [pc, #220]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a17e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a182:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18a:	4934      	ldr	r1, [pc, #208]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a18c:	4313      	orrs	r3, r2
 800a18e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a196:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a19a:	d105      	bne.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a19c:	4b2f      	ldr	r3, [pc, #188]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	4a2e      	ldr	r2, [pc, #184]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d015      	beq.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a1b4:	4b29      	ldr	r3, [pc, #164]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c2:	4926      	ldr	r1, [pc, #152]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1d2:	d105      	bne.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a1d4:	4b21      	ldr	r3, [pc, #132]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	4a20      	ldr	r2, [pc, #128]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d015      	beq.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a1ec:	4b1b      	ldr	r3, [pc, #108]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fa:	4918      	ldr	r1, [pc, #96]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a20a:	d105      	bne.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a20c:	4b13      	ldr	r3, [pc, #76]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	4a12      	ldr	r2, [pc, #72]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a216:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a220:	2b00      	cmp	r3, #0
 800a222:	d015      	beq.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a224:	4b0d      	ldr	r3, [pc, #52]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a22a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a232:	490a      	ldr	r1, [pc, #40]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a234:	4313      	orrs	r3, r2
 800a236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a23e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a242:	d105      	bne.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a244:	4b05      	ldr	r3, [pc, #20]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	4a04      	ldr	r2, [pc, #16]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a24a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a24e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a250:	7cbb      	ldrb	r3, [r7, #18]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3718      	adds	r7, #24
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	40021000 	.word	0x40021000

0800a260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d101      	bne.n	800a272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	e049      	b.n	800a306 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d106      	bne.n	800a28c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f7fb f836 	bl	80052f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2202      	movs	r2, #2
 800a290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	3304      	adds	r3, #4
 800a29c:	4619      	mov	r1, r3
 800a29e:	4610      	mov	r0, r2
 800a2a0:	f000 fdba 	bl	800ae18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
	...

0800a310 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a310:	b480      	push	{r7}
 800a312:	b085      	sub	sp, #20
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	2b01      	cmp	r3, #1
 800a322:	d001      	beq.n	800a328 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a324:	2301      	movs	r3, #1
 800a326:	e04a      	b.n	800a3be <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2202      	movs	r2, #2
 800a32c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	68da      	ldr	r2, [r3, #12]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f042 0201 	orr.w	r2, r2, #1
 800a33e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a21      	ldr	r2, [pc, #132]	; (800a3cc <HAL_TIM_Base_Start_IT+0xbc>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d018      	beq.n	800a37c <HAL_TIM_Base_Start_IT+0x6c>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a352:	d013      	beq.n	800a37c <HAL_TIM_Base_Start_IT+0x6c>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a1d      	ldr	r2, [pc, #116]	; (800a3d0 <HAL_TIM_Base_Start_IT+0xc0>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d00e      	beq.n	800a37c <HAL_TIM_Base_Start_IT+0x6c>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a1c      	ldr	r2, [pc, #112]	; (800a3d4 <HAL_TIM_Base_Start_IT+0xc4>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d009      	beq.n	800a37c <HAL_TIM_Base_Start_IT+0x6c>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a1a      	ldr	r2, [pc, #104]	; (800a3d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d004      	beq.n	800a37c <HAL_TIM_Base_Start_IT+0x6c>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a19      	ldr	r2, [pc, #100]	; (800a3dc <HAL_TIM_Base_Start_IT+0xcc>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d115      	bne.n	800a3a8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	689a      	ldr	r2, [r3, #8]
 800a382:	4b17      	ldr	r3, [pc, #92]	; (800a3e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a384:	4013      	ands	r3, r2
 800a386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2b06      	cmp	r3, #6
 800a38c:	d015      	beq.n	800a3ba <HAL_TIM_Base_Start_IT+0xaa>
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a394:	d011      	beq.n	800a3ba <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f042 0201 	orr.w	r2, r2, #1
 800a3a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3a6:	e008      	b.n	800a3ba <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f042 0201 	orr.w	r2, r2, #1
 800a3b6:	601a      	str	r2, [r3, #0]
 800a3b8:	e000      	b.n	800a3bc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3714      	adds	r7, #20
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	40012c00 	.word	0x40012c00
 800a3d0:	40000400 	.word	0x40000400
 800a3d4:	40000800 	.word	0x40000800
 800a3d8:	40013400 	.word	0x40013400
 800a3dc:	40014000 	.word	0x40014000
 800a3e0:	00010007 	.word	0x00010007

0800a3e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d101      	bne.n	800a3f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e049      	b.n	800a48a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d106      	bne.n	800a410 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f841 	bl	800a492 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2202      	movs	r2, #2
 800a414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	3304      	adds	r3, #4
 800a420:	4619      	mov	r1, r3
 800a422:	4610      	mov	r0, r2
 800a424:	f000 fcf8 	bl	800ae18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2201      	movs	r2, #1
 800a434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2201      	movs	r2, #1
 800a43c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2201      	movs	r2, #1
 800a444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2201      	movs	r2, #1
 800a45c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2201      	movs	r2, #1
 800a464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2201      	movs	r2, #1
 800a47c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a492:	b480      	push	{r7}
 800a494:	b083      	sub	sp, #12
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a49a:	bf00      	nop
 800a49c:	370c      	adds	r7, #12
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr
	...

0800a4a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d109      	bne.n	800a4cc <HAL_TIM_PWM_Start+0x24>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	bf14      	ite	ne
 800a4c4:	2301      	movne	r3, #1
 800a4c6:	2300      	moveq	r3, #0
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	e03c      	b.n	800a546 <HAL_TIM_PWM_Start+0x9e>
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	2b04      	cmp	r3, #4
 800a4d0:	d109      	bne.n	800a4e6 <HAL_TIM_PWM_Start+0x3e>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	bf14      	ite	ne
 800a4de:	2301      	movne	r3, #1
 800a4e0:	2300      	moveq	r3, #0
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	e02f      	b.n	800a546 <HAL_TIM_PWM_Start+0x9e>
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2b08      	cmp	r3, #8
 800a4ea:	d109      	bne.n	800a500 <HAL_TIM_PWM_Start+0x58>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	bf14      	ite	ne
 800a4f8:	2301      	movne	r3, #1
 800a4fa:	2300      	moveq	r3, #0
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	e022      	b.n	800a546 <HAL_TIM_PWM_Start+0x9e>
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	2b0c      	cmp	r3, #12
 800a504:	d109      	bne.n	800a51a <HAL_TIM_PWM_Start+0x72>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	2b01      	cmp	r3, #1
 800a510:	bf14      	ite	ne
 800a512:	2301      	movne	r3, #1
 800a514:	2300      	moveq	r3, #0
 800a516:	b2db      	uxtb	r3, r3
 800a518:	e015      	b.n	800a546 <HAL_TIM_PWM_Start+0x9e>
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	2b10      	cmp	r3, #16
 800a51e:	d109      	bne.n	800a534 <HAL_TIM_PWM_Start+0x8c>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a526:	b2db      	uxtb	r3, r3
 800a528:	2b01      	cmp	r3, #1
 800a52a:	bf14      	ite	ne
 800a52c:	2301      	movne	r3, #1
 800a52e:	2300      	moveq	r3, #0
 800a530:	b2db      	uxtb	r3, r3
 800a532:	e008      	b.n	800a546 <HAL_TIM_PWM_Start+0x9e>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	bf14      	ite	ne
 800a540:	2301      	movne	r3, #1
 800a542:	2300      	moveq	r3, #0
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	e097      	b.n	800a67e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d104      	bne.n	800a55e <HAL_TIM_PWM_Start+0xb6>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2202      	movs	r2, #2
 800a558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a55c:	e023      	b.n	800a5a6 <HAL_TIM_PWM_Start+0xfe>
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	2b04      	cmp	r3, #4
 800a562:	d104      	bne.n	800a56e <HAL_TIM_PWM_Start+0xc6>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2202      	movs	r2, #2
 800a568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a56c:	e01b      	b.n	800a5a6 <HAL_TIM_PWM_Start+0xfe>
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	2b08      	cmp	r3, #8
 800a572:	d104      	bne.n	800a57e <HAL_TIM_PWM_Start+0xd6>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2202      	movs	r2, #2
 800a578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a57c:	e013      	b.n	800a5a6 <HAL_TIM_PWM_Start+0xfe>
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	2b0c      	cmp	r3, #12
 800a582:	d104      	bne.n	800a58e <HAL_TIM_PWM_Start+0xe6>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2202      	movs	r2, #2
 800a588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a58c:	e00b      	b.n	800a5a6 <HAL_TIM_PWM_Start+0xfe>
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	2b10      	cmp	r3, #16
 800a592:	d104      	bne.n	800a59e <HAL_TIM_PWM_Start+0xf6>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2202      	movs	r2, #2
 800a598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a59c:	e003      	b.n	800a5a6 <HAL_TIM_PWM_Start+0xfe>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2202      	movs	r2, #2
 800a5a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	6839      	ldr	r1, [r7, #0]
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f001 f854 	bl	800b65c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a33      	ldr	r2, [pc, #204]	; (800a688 <HAL_TIM_PWM_Start+0x1e0>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d013      	beq.n	800a5e6 <HAL_TIM_PWM_Start+0x13e>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a32      	ldr	r2, [pc, #200]	; (800a68c <HAL_TIM_PWM_Start+0x1e4>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d00e      	beq.n	800a5e6 <HAL_TIM_PWM_Start+0x13e>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a30      	ldr	r2, [pc, #192]	; (800a690 <HAL_TIM_PWM_Start+0x1e8>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d009      	beq.n	800a5e6 <HAL_TIM_PWM_Start+0x13e>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a2f      	ldr	r2, [pc, #188]	; (800a694 <HAL_TIM_PWM_Start+0x1ec>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d004      	beq.n	800a5e6 <HAL_TIM_PWM_Start+0x13e>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a2d      	ldr	r2, [pc, #180]	; (800a698 <HAL_TIM_PWM_Start+0x1f0>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d101      	bne.n	800a5ea <HAL_TIM_PWM_Start+0x142>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e000      	b.n	800a5ec <HAL_TIM_PWM_Start+0x144>
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d007      	beq.n	800a600 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a5fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a20      	ldr	r2, [pc, #128]	; (800a688 <HAL_TIM_PWM_Start+0x1e0>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d018      	beq.n	800a63c <HAL_TIM_PWM_Start+0x194>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a612:	d013      	beq.n	800a63c <HAL_TIM_PWM_Start+0x194>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a20      	ldr	r2, [pc, #128]	; (800a69c <HAL_TIM_PWM_Start+0x1f4>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d00e      	beq.n	800a63c <HAL_TIM_PWM_Start+0x194>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a1f      	ldr	r2, [pc, #124]	; (800a6a0 <HAL_TIM_PWM_Start+0x1f8>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d009      	beq.n	800a63c <HAL_TIM_PWM_Start+0x194>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a17      	ldr	r2, [pc, #92]	; (800a68c <HAL_TIM_PWM_Start+0x1e4>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d004      	beq.n	800a63c <HAL_TIM_PWM_Start+0x194>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a16      	ldr	r2, [pc, #88]	; (800a690 <HAL_TIM_PWM_Start+0x1e8>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d115      	bne.n	800a668 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	689a      	ldr	r2, [r3, #8]
 800a642:	4b18      	ldr	r3, [pc, #96]	; (800a6a4 <HAL_TIM_PWM_Start+0x1fc>)
 800a644:	4013      	ands	r3, r2
 800a646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2b06      	cmp	r3, #6
 800a64c:	d015      	beq.n	800a67a <HAL_TIM_PWM_Start+0x1d2>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a654:	d011      	beq.n	800a67a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f042 0201 	orr.w	r2, r2, #1
 800a664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a666:	e008      	b.n	800a67a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f042 0201 	orr.w	r2, r2, #1
 800a676:	601a      	str	r2, [r3, #0]
 800a678:	e000      	b.n	800a67c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a67a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	40012c00 	.word	0x40012c00
 800a68c:	40013400 	.word	0x40013400
 800a690:	40014000 	.word	0x40014000
 800a694:	40014400 	.word	0x40014400
 800a698:	40014800 	.word	0x40014800
 800a69c:	40000400 	.word	0x40000400
 800a6a0:	40000800 	.word	0x40000800
 800a6a4:	00010007 	.word	0x00010007

0800a6a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	f003 0302 	and.w	r3, r3, #2
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d122      	bne.n	800a704 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	f003 0302 	and.w	r3, r3, #2
 800a6c8:	2b02      	cmp	r3, #2
 800a6ca:	d11b      	bne.n	800a704 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f06f 0202 	mvn.w	r2, #2
 800a6d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2201      	movs	r2, #1
 800a6da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	699b      	ldr	r3, [r3, #24]
 800a6e2:	f003 0303 	and.w	r3, r3, #3
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d003      	beq.n	800a6f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 fb76 	bl	800addc <HAL_TIM_IC_CaptureCallback>
 800a6f0:	e005      	b.n	800a6fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fb68 	bl	800adc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fb79 	bl	800adf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	691b      	ldr	r3, [r3, #16]
 800a70a:	f003 0304 	and.w	r3, r3, #4
 800a70e:	2b04      	cmp	r3, #4
 800a710:	d122      	bne.n	800a758 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	f003 0304 	and.w	r3, r3, #4
 800a71c:	2b04      	cmp	r3, #4
 800a71e:	d11b      	bne.n	800a758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f06f 0204 	mvn.w	r2, #4
 800a728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2202      	movs	r2, #2
 800a72e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	699b      	ldr	r3, [r3, #24]
 800a736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d003      	beq.n	800a746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 fb4c 	bl	800addc <HAL_TIM_IC_CaptureCallback>
 800a744:	e005      	b.n	800a752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 fb3e 	bl	800adc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 fb4f 	bl	800adf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	691b      	ldr	r3, [r3, #16]
 800a75e:	f003 0308 	and.w	r3, r3, #8
 800a762:	2b08      	cmp	r3, #8
 800a764:	d122      	bne.n	800a7ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	68db      	ldr	r3, [r3, #12]
 800a76c:	f003 0308 	and.w	r3, r3, #8
 800a770:	2b08      	cmp	r3, #8
 800a772:	d11b      	bne.n	800a7ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f06f 0208 	mvn.w	r2, #8
 800a77c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2204      	movs	r2, #4
 800a782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	69db      	ldr	r3, [r3, #28]
 800a78a:	f003 0303 	and.w	r3, r3, #3
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d003      	beq.n	800a79a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 fb22 	bl	800addc <HAL_TIM_IC_CaptureCallback>
 800a798:	e005      	b.n	800a7a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 fb14 	bl	800adc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 fb25 	bl	800adf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	691b      	ldr	r3, [r3, #16]
 800a7b2:	f003 0310 	and.w	r3, r3, #16
 800a7b6:	2b10      	cmp	r3, #16
 800a7b8:	d122      	bne.n	800a800 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	f003 0310 	and.w	r3, r3, #16
 800a7c4:	2b10      	cmp	r3, #16
 800a7c6:	d11b      	bne.n	800a800 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f06f 0210 	mvn.w	r2, #16
 800a7d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2208      	movs	r2, #8
 800a7d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	69db      	ldr	r3, [r3, #28]
 800a7de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d003      	beq.n	800a7ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 faf8 	bl	800addc <HAL_TIM_IC_CaptureCallback>
 800a7ec:	e005      	b.n	800a7fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 faea 	bl	800adc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 fafb 	bl	800adf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	f003 0301 	and.w	r3, r3, #1
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d10e      	bne.n	800a82c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	f003 0301 	and.w	r3, r3, #1
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d107      	bne.n	800a82c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f06f 0201 	mvn.w	r2, #1
 800a824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 fac4 	bl	800adb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a836:	2b80      	cmp	r3, #128	; 0x80
 800a838:	d10e      	bne.n	800a858 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a844:	2b80      	cmp	r3, #128	; 0x80
 800a846:	d107      	bne.n	800a858 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f001 f91b 	bl	800ba8e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	691b      	ldr	r3, [r3, #16]
 800a85e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a866:	d10e      	bne.n	800a886 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a872:	2b80      	cmp	r3, #128	; 0x80
 800a874:	d107      	bne.n	800a886 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a87e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f001 f90e 	bl	800baa2 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a890:	2b40      	cmp	r3, #64	; 0x40
 800a892:	d10e      	bne.n	800a8b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a89e:	2b40      	cmp	r3, #64	; 0x40
 800a8a0:	d107      	bne.n	800a8b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a8aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 faa9 	bl	800ae04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	691b      	ldr	r3, [r3, #16]
 800a8b8:	f003 0320 	and.w	r3, r3, #32
 800a8bc:	2b20      	cmp	r3, #32
 800a8be:	d10e      	bne.n	800a8de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	f003 0320 	and.w	r3, r3, #32
 800a8ca:	2b20      	cmp	r3, #32
 800a8cc:	d107      	bne.n	800a8de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f06f 0220 	mvn.w	r2, #32
 800a8d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f001 f8ce 	bl	800ba7a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a8e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8ec:	d10f      	bne.n	800a90e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a8f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8fc:	d107      	bne.n	800a90e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f001 f8d4 	bl	800bab6 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	691b      	ldr	r3, [r3, #16]
 800a914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a918:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a91c:	d10f      	bne.n	800a93e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a928:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a92c:	d107      	bne.n	800a93e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f001 f8c6 	bl	800baca <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a94c:	d10f      	bne.n	800a96e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a95c:	d107      	bne.n	800a96e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f001 f8b8 	bl	800bade <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	691b      	ldr	r3, [r3, #16]
 800a974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a978:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a97c:	d10f      	bne.n	800a99e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a988:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a98c:	d107      	bne.n	800a99e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f001 f8aa 	bl	800baf2 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a99e:	bf00      	nop
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
	...

0800a9a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d101      	bne.n	800a9c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a9be:	2302      	movs	r3, #2
 800a9c0:	e0fd      	b.n	800abbe <HAL_TIM_PWM_ConfigChannel+0x216>
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2b14      	cmp	r3, #20
 800a9ce:	f200 80f0 	bhi.w	800abb2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a9d2:	a201      	add	r2, pc, #4	; (adr r2, 800a9d8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d8:	0800aa2d 	.word	0x0800aa2d
 800a9dc:	0800abb3 	.word	0x0800abb3
 800a9e0:	0800abb3 	.word	0x0800abb3
 800a9e4:	0800abb3 	.word	0x0800abb3
 800a9e8:	0800aa6d 	.word	0x0800aa6d
 800a9ec:	0800abb3 	.word	0x0800abb3
 800a9f0:	0800abb3 	.word	0x0800abb3
 800a9f4:	0800abb3 	.word	0x0800abb3
 800a9f8:	0800aaaf 	.word	0x0800aaaf
 800a9fc:	0800abb3 	.word	0x0800abb3
 800aa00:	0800abb3 	.word	0x0800abb3
 800aa04:	0800abb3 	.word	0x0800abb3
 800aa08:	0800aaef 	.word	0x0800aaef
 800aa0c:	0800abb3 	.word	0x0800abb3
 800aa10:	0800abb3 	.word	0x0800abb3
 800aa14:	0800abb3 	.word	0x0800abb3
 800aa18:	0800ab31 	.word	0x0800ab31
 800aa1c:	0800abb3 	.word	0x0800abb3
 800aa20:	0800abb3 	.word	0x0800abb3
 800aa24:	0800abb3 	.word	0x0800abb3
 800aa28:	0800ab71 	.word	0x0800ab71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	68b9      	ldr	r1, [r7, #8]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f000 fa80 	bl	800af38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	699a      	ldr	r2, [r3, #24]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f042 0208 	orr.w	r2, r2, #8
 800aa46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	699a      	ldr	r2, [r3, #24]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f022 0204 	bic.w	r2, r2, #4
 800aa56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	6999      	ldr	r1, [r3, #24]
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	691a      	ldr	r2, [r3, #16]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	430a      	orrs	r2, r1
 800aa68:	619a      	str	r2, [r3, #24]
      break;
 800aa6a:	e0a3      	b.n	800abb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	68b9      	ldr	r1, [r7, #8]
 800aa72:	4618      	mov	r0, r3
 800aa74:	f000 faf0 	bl	800b058 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	699a      	ldr	r2, [r3, #24]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	699a      	ldr	r2, [r3, #24]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	6999      	ldr	r1, [r3, #24]
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	691b      	ldr	r3, [r3, #16]
 800aaa2:	021a      	lsls	r2, r3, #8
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	430a      	orrs	r2, r1
 800aaaa:	619a      	str	r2, [r3, #24]
      break;
 800aaac:	e082      	b.n	800abb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	68b9      	ldr	r1, [r7, #8]
 800aab4:	4618      	mov	r0, r3
 800aab6:	f000 fb59 	bl	800b16c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	69da      	ldr	r2, [r3, #28]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f042 0208 	orr.w	r2, r2, #8
 800aac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	69da      	ldr	r2, [r3, #28]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f022 0204 	bic.w	r2, r2, #4
 800aad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	69d9      	ldr	r1, [r3, #28]
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	691a      	ldr	r2, [r3, #16]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	430a      	orrs	r2, r1
 800aaea:	61da      	str	r2, [r3, #28]
      break;
 800aaec:	e062      	b.n	800abb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	68b9      	ldr	r1, [r7, #8]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f000 fbc1 	bl	800b27c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	69da      	ldr	r2, [r3, #28]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	69da      	ldr	r2, [r3, #28]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	69d9      	ldr	r1, [r3, #28]
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	021a      	lsls	r2, r3, #8
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	430a      	orrs	r2, r1
 800ab2c:	61da      	str	r2, [r3, #28]
      break;
 800ab2e:	e041      	b.n	800abb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	68b9      	ldr	r1, [r7, #8]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 fc2a 	bl	800b390 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f042 0208 	orr.w	r2, r2, #8
 800ab4a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f022 0204 	bic.w	r2, r2, #4
 800ab5a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	691a      	ldr	r2, [r3, #16]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	430a      	orrs	r2, r1
 800ab6c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ab6e:	e021      	b.n	800abb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	68b9      	ldr	r1, [r7, #8]
 800ab76:	4618      	mov	r0, r3
 800ab78:	f000 fc6e 	bl	800b458 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab8a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab9a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	021a      	lsls	r2, r3, #8
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	430a      	orrs	r2, r1
 800abae:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800abb0:	e000      	b.n	800abb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800abb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2200      	movs	r2, #0
 800abb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop

0800abc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d101      	bne.n	800abe0 <HAL_TIM_ConfigClockSource+0x18>
 800abdc:	2302      	movs	r3, #2
 800abde:	e0dd      	b.n	800ad9c <HAL_TIM_ConfigClockSource+0x1d4>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2202      	movs	r2, #2
 800abec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800abfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ac02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a62      	ldr	r2, [pc, #392]	; (800ada4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	f000 80a9 	beq.w	800ad72 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac20:	4a60      	ldr	r2, [pc, #384]	; (800ada4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	f200 80ae 	bhi.w	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac28:	4a5f      	ldr	r2, [pc, #380]	; (800ada8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	f000 80a1 	beq.w	800ad72 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac30:	4a5d      	ldr	r2, [pc, #372]	; (800ada8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	f200 80a6 	bhi.w	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac38:	4a5c      	ldr	r2, [pc, #368]	; (800adac <HAL_TIM_ConfigClockSource+0x1e4>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	f000 8099 	beq.w	800ad72 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac40:	4a5a      	ldr	r2, [pc, #360]	; (800adac <HAL_TIM_ConfigClockSource+0x1e4>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	f200 809e 	bhi.w	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac48:	4a59      	ldr	r2, [pc, #356]	; (800adb0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	f000 8091 	beq.w	800ad72 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac50:	4a57      	ldr	r2, [pc, #348]	; (800adb0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	f200 8096 	bhi.w	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ac5c:	f000 8089 	beq.w	800ad72 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ac64:	f200 808e 	bhi.w	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac6c:	d03e      	beq.n	800acec <HAL_TIM_ConfigClockSource+0x124>
 800ac6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac72:	f200 8087 	bhi.w	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac7a:	f000 8085 	beq.w	800ad88 <HAL_TIM_ConfigClockSource+0x1c0>
 800ac7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac82:	d87f      	bhi.n	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac84:	2b70      	cmp	r3, #112	; 0x70
 800ac86:	d01a      	beq.n	800acbe <HAL_TIM_ConfigClockSource+0xf6>
 800ac88:	2b70      	cmp	r3, #112	; 0x70
 800ac8a:	d87b      	bhi.n	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac8c:	2b60      	cmp	r3, #96	; 0x60
 800ac8e:	d050      	beq.n	800ad32 <HAL_TIM_ConfigClockSource+0x16a>
 800ac90:	2b60      	cmp	r3, #96	; 0x60
 800ac92:	d877      	bhi.n	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac94:	2b50      	cmp	r3, #80	; 0x50
 800ac96:	d03c      	beq.n	800ad12 <HAL_TIM_ConfigClockSource+0x14a>
 800ac98:	2b50      	cmp	r3, #80	; 0x50
 800ac9a:	d873      	bhi.n	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac9c:	2b40      	cmp	r3, #64	; 0x40
 800ac9e:	d058      	beq.n	800ad52 <HAL_TIM_ConfigClockSource+0x18a>
 800aca0:	2b40      	cmp	r3, #64	; 0x40
 800aca2:	d86f      	bhi.n	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800aca4:	2b30      	cmp	r3, #48	; 0x30
 800aca6:	d064      	beq.n	800ad72 <HAL_TIM_ConfigClockSource+0x1aa>
 800aca8:	2b30      	cmp	r3, #48	; 0x30
 800acaa:	d86b      	bhi.n	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800acac:	2b20      	cmp	r3, #32
 800acae:	d060      	beq.n	800ad72 <HAL_TIM_ConfigClockSource+0x1aa>
 800acb0:	2b20      	cmp	r3, #32
 800acb2:	d867      	bhi.n	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d05c      	beq.n	800ad72 <HAL_TIM_ConfigClockSource+0x1aa>
 800acb8:	2b10      	cmp	r3, #16
 800acba:	d05a      	beq.n	800ad72 <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800acbc:	e062      	b.n	800ad84 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6818      	ldr	r0, [r3, #0]
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	6899      	ldr	r1, [r3, #8]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	685a      	ldr	r2, [r3, #4]
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	f000 fca5 	bl	800b61c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ace0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	609a      	str	r2, [r3, #8]
      break;
 800acea:	e04e      	b.n	800ad8a <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6818      	ldr	r0, [r3, #0]
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	6899      	ldr	r1, [r3, #8]
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	685a      	ldr	r2, [r3, #4]
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	f000 fc8e 	bl	800b61c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	689a      	ldr	r2, [r3, #8]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad0e:	609a      	str	r2, [r3, #8]
      break;
 800ad10:	e03b      	b.n	800ad8a <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6818      	ldr	r0, [r3, #0]
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	6859      	ldr	r1, [r3, #4]
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	f000 fc00 	bl	800b524 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2150      	movs	r1, #80	; 0x50
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f000 fc59 	bl	800b5e2 <TIM_ITRx_SetConfig>
      break;
 800ad30:	e02b      	b.n	800ad8a <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6818      	ldr	r0, [r3, #0]
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	6859      	ldr	r1, [r3, #4]
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	68db      	ldr	r3, [r3, #12]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	f000 fc1f 	bl	800b582 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2160      	movs	r1, #96	; 0x60
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f000 fc49 	bl	800b5e2 <TIM_ITRx_SetConfig>
      break;
 800ad50:	e01b      	b.n	800ad8a <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6818      	ldr	r0, [r3, #0]
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	6859      	ldr	r1, [r3, #4]
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	461a      	mov	r2, r3
 800ad60:	f000 fbe0 	bl	800b524 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2140      	movs	r1, #64	; 0x40
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f000 fc39 	bl	800b5e2 <TIM_ITRx_SetConfig>
      break;
 800ad70:	e00b      	b.n	800ad8a <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	4610      	mov	r0, r2
 800ad7e:	f000 fc30 	bl	800b5e2 <TIM_ITRx_SetConfig>
        break;
 800ad82:	e002      	b.n	800ad8a <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800ad84:	bf00      	nop
 800ad86:	e000      	b.n	800ad8a <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800ad88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3710      	adds	r7, #16
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	00100070 	.word	0x00100070
 800ada8:	00100040 	.word	0x00100040
 800adac:	00100030 	.word	0x00100030
 800adb0:	00100020 	.word	0x00100020

0800adb4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800adbc:	bf00      	nop
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800add0:	bf00      	nop
 800add2:	370c      	adds	r7, #12
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr

0800addc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800addc:	b480      	push	{r7}
 800adde:	b083      	sub	sp, #12
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ade4:	bf00      	nop
 800ade6:	370c      	adds	r7, #12
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr

0800adf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800adf8:	bf00      	nop
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae0c:	bf00      	nop
 800ae0e:	370c      	adds	r7, #12
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4a3c      	ldr	r2, [pc, #240]	; (800af1c <TIM_Base_SetConfig+0x104>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d00f      	beq.n	800ae50 <TIM_Base_SetConfig+0x38>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae36:	d00b      	beq.n	800ae50 <TIM_Base_SetConfig+0x38>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a39      	ldr	r2, [pc, #228]	; (800af20 <TIM_Base_SetConfig+0x108>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d007      	beq.n	800ae50 <TIM_Base_SetConfig+0x38>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a38      	ldr	r2, [pc, #224]	; (800af24 <TIM_Base_SetConfig+0x10c>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d003      	beq.n	800ae50 <TIM_Base_SetConfig+0x38>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4a37      	ldr	r2, [pc, #220]	; (800af28 <TIM_Base_SetConfig+0x110>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d108      	bne.n	800ae62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	68fa      	ldr	r2, [r7, #12]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	4a2d      	ldr	r2, [pc, #180]	; (800af1c <TIM_Base_SetConfig+0x104>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d01b      	beq.n	800aea2 <TIM_Base_SetConfig+0x8a>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae70:	d017      	beq.n	800aea2 <TIM_Base_SetConfig+0x8a>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4a2a      	ldr	r2, [pc, #168]	; (800af20 <TIM_Base_SetConfig+0x108>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d013      	beq.n	800aea2 <TIM_Base_SetConfig+0x8a>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4a29      	ldr	r2, [pc, #164]	; (800af24 <TIM_Base_SetConfig+0x10c>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d00f      	beq.n	800aea2 <TIM_Base_SetConfig+0x8a>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	4a28      	ldr	r2, [pc, #160]	; (800af28 <TIM_Base_SetConfig+0x110>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d00b      	beq.n	800aea2 <TIM_Base_SetConfig+0x8a>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4a27      	ldr	r2, [pc, #156]	; (800af2c <TIM_Base_SetConfig+0x114>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d007      	beq.n	800aea2 <TIM_Base_SetConfig+0x8a>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4a26      	ldr	r2, [pc, #152]	; (800af30 <TIM_Base_SetConfig+0x118>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d003      	beq.n	800aea2 <TIM_Base_SetConfig+0x8a>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4a25      	ldr	r2, [pc, #148]	; (800af34 <TIM_Base_SetConfig+0x11c>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d108      	bne.n	800aeb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	695b      	ldr	r3, [r3, #20]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	689a      	ldr	r2, [r3, #8]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4a10      	ldr	r2, [pc, #64]	; (800af1c <TIM_Base_SetConfig+0x104>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d00f      	beq.n	800af00 <TIM_Base_SetConfig+0xe8>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	4a11      	ldr	r2, [pc, #68]	; (800af28 <TIM_Base_SetConfig+0x110>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d00b      	beq.n	800af00 <TIM_Base_SetConfig+0xe8>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	4a10      	ldr	r2, [pc, #64]	; (800af2c <TIM_Base_SetConfig+0x114>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d007      	beq.n	800af00 <TIM_Base_SetConfig+0xe8>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4a0f      	ldr	r2, [pc, #60]	; (800af30 <TIM_Base_SetConfig+0x118>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d003      	beq.n	800af00 <TIM_Base_SetConfig+0xe8>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	4a0e      	ldr	r2, [pc, #56]	; (800af34 <TIM_Base_SetConfig+0x11c>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d103      	bne.n	800af08 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	691a      	ldr	r2, [r3, #16]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	615a      	str	r2, [r3, #20]
}
 800af0e:	bf00      	nop
 800af10:	3714      	adds	r7, #20
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	40012c00 	.word	0x40012c00
 800af20:	40000400 	.word	0x40000400
 800af24:	40000800 	.word	0x40000800
 800af28:	40013400 	.word	0x40013400
 800af2c:	40014000 	.word	0x40014000
 800af30:	40014400 	.word	0x40014400
 800af34:	40014800 	.word	0x40014800

0800af38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af38:	b480      	push	{r7}
 800af3a:	b087      	sub	sp, #28
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6a1b      	ldr	r3, [r3, #32]
 800af46:	f023 0201 	bic.w	r2, r3, #1
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6a1b      	ldr	r3, [r3, #32]
 800af52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	699b      	ldr	r3, [r3, #24]
 800af5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f023 0303 	bic.w	r3, r3, #3
 800af72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	f023 0302 	bic.w	r3, r3, #2
 800af84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	697a      	ldr	r2, [r7, #20]
 800af8c:	4313      	orrs	r3, r2
 800af8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4a2c      	ldr	r2, [pc, #176]	; (800b044 <TIM_OC1_SetConfig+0x10c>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d00f      	beq.n	800afb8 <TIM_OC1_SetConfig+0x80>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4a2b      	ldr	r2, [pc, #172]	; (800b048 <TIM_OC1_SetConfig+0x110>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d00b      	beq.n	800afb8 <TIM_OC1_SetConfig+0x80>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	4a2a      	ldr	r2, [pc, #168]	; (800b04c <TIM_OC1_SetConfig+0x114>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d007      	beq.n	800afb8 <TIM_OC1_SetConfig+0x80>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4a29      	ldr	r2, [pc, #164]	; (800b050 <TIM_OC1_SetConfig+0x118>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d003      	beq.n	800afb8 <TIM_OC1_SetConfig+0x80>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	4a28      	ldr	r2, [pc, #160]	; (800b054 <TIM_OC1_SetConfig+0x11c>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d10c      	bne.n	800afd2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	f023 0308 	bic.w	r3, r3, #8
 800afbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	697a      	ldr	r2, [r7, #20]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	f023 0304 	bic.w	r3, r3, #4
 800afd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	4a1b      	ldr	r2, [pc, #108]	; (800b044 <TIM_OC1_SetConfig+0x10c>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d00f      	beq.n	800affa <TIM_OC1_SetConfig+0xc2>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4a1a      	ldr	r2, [pc, #104]	; (800b048 <TIM_OC1_SetConfig+0x110>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d00b      	beq.n	800affa <TIM_OC1_SetConfig+0xc2>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	4a19      	ldr	r2, [pc, #100]	; (800b04c <TIM_OC1_SetConfig+0x114>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d007      	beq.n	800affa <TIM_OC1_SetConfig+0xc2>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	4a18      	ldr	r2, [pc, #96]	; (800b050 <TIM_OC1_SetConfig+0x118>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d003      	beq.n	800affa <TIM_OC1_SetConfig+0xc2>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	4a17      	ldr	r2, [pc, #92]	; (800b054 <TIM_OC1_SetConfig+0x11c>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d111      	bne.n	800b01e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	695b      	ldr	r3, [r3, #20]
 800b00e:	693a      	ldr	r2, [r7, #16]
 800b010:	4313      	orrs	r3, r2
 800b012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	699b      	ldr	r3, [r3, #24]
 800b018:	693a      	ldr	r2, [r7, #16]
 800b01a:	4313      	orrs	r3, r2
 800b01c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	693a      	ldr	r2, [r7, #16]
 800b022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	68fa      	ldr	r2, [r7, #12]
 800b028:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	685a      	ldr	r2, [r3, #4]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	697a      	ldr	r2, [r7, #20]
 800b036:	621a      	str	r2, [r3, #32]
}
 800b038:	bf00      	nop
 800b03a:	371c      	adds	r7, #28
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr
 800b044:	40012c00 	.word	0x40012c00
 800b048:	40013400 	.word	0x40013400
 800b04c:	40014000 	.word	0x40014000
 800b050:	40014400 	.word	0x40014400
 800b054:	40014800 	.word	0x40014800

0800b058 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b058:	b480      	push	{r7}
 800b05a:	b087      	sub	sp, #28
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a1b      	ldr	r3, [r3, #32]
 800b066:	f023 0210 	bic.w	r2, r3, #16
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a1b      	ldr	r3, [r3, #32]
 800b072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	699b      	ldr	r3, [r3, #24]
 800b07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b08a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	021b      	lsls	r3, r3, #8
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	4313      	orrs	r3, r2
 800b09e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	f023 0320 	bic.w	r3, r3, #32
 800b0a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	011b      	lsls	r3, r3, #4
 800b0ae:	697a      	ldr	r2, [r7, #20]
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	4a28      	ldr	r2, [pc, #160]	; (800b158 <TIM_OC2_SetConfig+0x100>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d003      	beq.n	800b0c4 <TIM_OC2_SetConfig+0x6c>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	4a27      	ldr	r2, [pc, #156]	; (800b15c <TIM_OC2_SetConfig+0x104>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d10d      	bne.n	800b0e0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	011b      	lsls	r3, r3, #4
 800b0d2:	697a      	ldr	r2, [r7, #20]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	4a1d      	ldr	r2, [pc, #116]	; (800b158 <TIM_OC2_SetConfig+0x100>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d00f      	beq.n	800b108 <TIM_OC2_SetConfig+0xb0>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	4a1c      	ldr	r2, [pc, #112]	; (800b15c <TIM_OC2_SetConfig+0x104>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d00b      	beq.n	800b108 <TIM_OC2_SetConfig+0xb0>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4a1b      	ldr	r2, [pc, #108]	; (800b160 <TIM_OC2_SetConfig+0x108>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d007      	beq.n	800b108 <TIM_OC2_SetConfig+0xb0>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4a1a      	ldr	r2, [pc, #104]	; (800b164 <TIM_OC2_SetConfig+0x10c>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d003      	beq.n	800b108 <TIM_OC2_SetConfig+0xb0>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	4a19      	ldr	r2, [pc, #100]	; (800b168 <TIM_OC2_SetConfig+0x110>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d113      	bne.n	800b130 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b10e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b116:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	695b      	ldr	r3, [r3, #20]
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	693a      	ldr	r2, [r7, #16]
 800b120:	4313      	orrs	r3, r2
 800b122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	699b      	ldr	r3, [r3, #24]
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	693a      	ldr	r2, [r7, #16]
 800b12c:	4313      	orrs	r3, r2
 800b12e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	693a      	ldr	r2, [r7, #16]
 800b134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	685a      	ldr	r2, [r3, #4]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	697a      	ldr	r2, [r7, #20]
 800b148:	621a      	str	r2, [r3, #32]
}
 800b14a:	bf00      	nop
 800b14c:	371c      	adds	r7, #28
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	40012c00 	.word	0x40012c00
 800b15c:	40013400 	.word	0x40013400
 800b160:	40014000 	.word	0x40014000
 800b164:	40014400 	.word	0x40014400
 800b168:	40014800 	.word	0x40014800

0800b16c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b087      	sub	sp, #28
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6a1b      	ldr	r3, [r3, #32]
 800b17a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6a1b      	ldr	r3, [r3, #32]
 800b186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	69db      	ldr	r3, [r3, #28]
 800b192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b19a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b19e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f023 0303 	bic.w	r3, r3, #3
 800b1a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b1b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	021b      	lsls	r3, r3, #8
 800b1c0:	697a      	ldr	r2, [r7, #20]
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4a27      	ldr	r2, [pc, #156]	; (800b268 <TIM_OC3_SetConfig+0xfc>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d003      	beq.n	800b1d6 <TIM_OC3_SetConfig+0x6a>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	4a26      	ldr	r2, [pc, #152]	; (800b26c <TIM_OC3_SetConfig+0x100>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d10d      	bne.n	800b1f2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	021b      	lsls	r3, r3, #8
 800b1e4:	697a      	ldr	r2, [r7, #20]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a1c      	ldr	r2, [pc, #112]	; (800b268 <TIM_OC3_SetConfig+0xfc>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d00f      	beq.n	800b21a <TIM_OC3_SetConfig+0xae>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4a1b      	ldr	r2, [pc, #108]	; (800b26c <TIM_OC3_SetConfig+0x100>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d00b      	beq.n	800b21a <TIM_OC3_SetConfig+0xae>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4a1a      	ldr	r2, [pc, #104]	; (800b270 <TIM_OC3_SetConfig+0x104>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d007      	beq.n	800b21a <TIM_OC3_SetConfig+0xae>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4a19      	ldr	r2, [pc, #100]	; (800b274 <TIM_OC3_SetConfig+0x108>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d003      	beq.n	800b21a <TIM_OC3_SetConfig+0xae>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a18      	ldr	r2, [pc, #96]	; (800b278 <TIM_OC3_SetConfig+0x10c>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d113      	bne.n	800b242 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	695b      	ldr	r3, [r3, #20]
 800b22e:	011b      	lsls	r3, r3, #4
 800b230:	693a      	ldr	r2, [r7, #16]
 800b232:	4313      	orrs	r3, r2
 800b234:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	699b      	ldr	r3, [r3, #24]
 800b23a:	011b      	lsls	r3, r3, #4
 800b23c:	693a      	ldr	r2, [r7, #16]
 800b23e:	4313      	orrs	r3, r2
 800b240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	693a      	ldr	r2, [r7, #16]
 800b246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	685a      	ldr	r2, [r3, #4]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	697a      	ldr	r2, [r7, #20]
 800b25a:	621a      	str	r2, [r3, #32]
}
 800b25c:	bf00      	nop
 800b25e:	371c      	adds	r7, #28
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr
 800b268:	40012c00 	.word	0x40012c00
 800b26c:	40013400 	.word	0x40013400
 800b270:	40014000 	.word	0x40014000
 800b274:	40014400 	.word	0x40014400
 800b278:	40014800 	.word	0x40014800

0800b27c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b087      	sub	sp, #28
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6a1b      	ldr	r3, [r3, #32]
 800b28a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a1b      	ldr	r3, [r3, #32]
 800b296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	69db      	ldr	r3, [r3, #28]
 800b2a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b2aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	021b      	lsls	r3, r3, #8
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	031b      	lsls	r3, r3, #12
 800b2d2:	697a      	ldr	r2, [r7, #20]
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4a28      	ldr	r2, [pc, #160]	; (800b37c <TIM_OC4_SetConfig+0x100>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d003      	beq.n	800b2e8 <TIM_OC4_SetConfig+0x6c>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a27      	ldr	r2, [pc, #156]	; (800b380 <TIM_OC4_SetConfig+0x104>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d10d      	bne.n	800b304 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b2ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	031b      	lsls	r3, r3, #12
 800b2f6:	697a      	ldr	r2, [r7, #20]
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b302:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	4a1d      	ldr	r2, [pc, #116]	; (800b37c <TIM_OC4_SetConfig+0x100>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d00f      	beq.n	800b32c <TIM_OC4_SetConfig+0xb0>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4a1c      	ldr	r2, [pc, #112]	; (800b380 <TIM_OC4_SetConfig+0x104>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d00b      	beq.n	800b32c <TIM_OC4_SetConfig+0xb0>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	4a1b      	ldr	r2, [pc, #108]	; (800b384 <TIM_OC4_SetConfig+0x108>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d007      	beq.n	800b32c <TIM_OC4_SetConfig+0xb0>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4a1a      	ldr	r2, [pc, #104]	; (800b388 <TIM_OC4_SetConfig+0x10c>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d003      	beq.n	800b32c <TIM_OC4_SetConfig+0xb0>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	4a19      	ldr	r2, [pc, #100]	; (800b38c <TIM_OC4_SetConfig+0x110>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d113      	bne.n	800b354 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b332:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b33a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	695b      	ldr	r3, [r3, #20]
 800b340:	019b      	lsls	r3, r3, #6
 800b342:	693a      	ldr	r2, [r7, #16]
 800b344:	4313      	orrs	r3, r2
 800b346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	699b      	ldr	r3, [r3, #24]
 800b34c:	019b      	lsls	r3, r3, #6
 800b34e:	693a      	ldr	r2, [r7, #16]
 800b350:	4313      	orrs	r3, r2
 800b352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	693a      	ldr	r2, [r7, #16]
 800b358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	68fa      	ldr	r2, [r7, #12]
 800b35e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	685a      	ldr	r2, [r3, #4]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	697a      	ldr	r2, [r7, #20]
 800b36c:	621a      	str	r2, [r3, #32]
}
 800b36e:	bf00      	nop
 800b370:	371c      	adds	r7, #28
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	40012c00 	.word	0x40012c00
 800b380:	40013400 	.word	0x40013400
 800b384:	40014000 	.word	0x40014000
 800b388:	40014400 	.word	0x40014400
 800b38c:	40014800 	.word	0x40014800

0800b390 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b390:	b480      	push	{r7}
 800b392:	b087      	sub	sp, #28
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a1b      	ldr	r3, [r3, #32]
 800b39e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6a1b      	ldr	r3, [r3, #32]
 800b3aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b3d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	041b      	lsls	r3, r3, #16
 800b3dc:	693a      	ldr	r2, [r7, #16]
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a17      	ldr	r2, [pc, #92]	; (800b444 <TIM_OC5_SetConfig+0xb4>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d00f      	beq.n	800b40a <TIM_OC5_SetConfig+0x7a>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4a16      	ldr	r2, [pc, #88]	; (800b448 <TIM_OC5_SetConfig+0xb8>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d00b      	beq.n	800b40a <TIM_OC5_SetConfig+0x7a>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	4a15      	ldr	r2, [pc, #84]	; (800b44c <TIM_OC5_SetConfig+0xbc>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d007      	beq.n	800b40a <TIM_OC5_SetConfig+0x7a>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4a14      	ldr	r2, [pc, #80]	; (800b450 <TIM_OC5_SetConfig+0xc0>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d003      	beq.n	800b40a <TIM_OC5_SetConfig+0x7a>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4a13      	ldr	r2, [pc, #76]	; (800b454 <TIM_OC5_SetConfig+0xc4>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d109      	bne.n	800b41e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b410:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	695b      	ldr	r3, [r3, #20]
 800b416:	021b      	lsls	r3, r3, #8
 800b418:	697a      	ldr	r2, [r7, #20]
 800b41a:	4313      	orrs	r3, r2
 800b41c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	697a      	ldr	r2, [r7, #20]
 800b422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	68fa      	ldr	r2, [r7, #12]
 800b428:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	685a      	ldr	r2, [r3, #4]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	693a      	ldr	r2, [r7, #16]
 800b436:	621a      	str	r2, [r3, #32]
}
 800b438:	bf00      	nop
 800b43a:	371c      	adds	r7, #28
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr
 800b444:	40012c00 	.word	0x40012c00
 800b448:	40013400 	.word	0x40013400
 800b44c:	40014000 	.word	0x40014000
 800b450:	40014400 	.word	0x40014400
 800b454:	40014800 	.word	0x40014800

0800b458 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b458:	b480      	push	{r7}
 800b45a:	b087      	sub	sp, #28
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a1b      	ldr	r3, [r3, #32]
 800b466:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a1b      	ldr	r3, [r3, #32]
 800b472:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b47e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b48a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	021b      	lsls	r3, r3, #8
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	4313      	orrs	r3, r2
 800b496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b49e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	689b      	ldr	r3, [r3, #8]
 800b4a4:	051b      	lsls	r3, r3, #20
 800b4a6:	693a      	ldr	r2, [r7, #16]
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4a18      	ldr	r2, [pc, #96]	; (800b510 <TIM_OC6_SetConfig+0xb8>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d00f      	beq.n	800b4d4 <TIM_OC6_SetConfig+0x7c>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4a17      	ldr	r2, [pc, #92]	; (800b514 <TIM_OC6_SetConfig+0xbc>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d00b      	beq.n	800b4d4 <TIM_OC6_SetConfig+0x7c>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4a16      	ldr	r2, [pc, #88]	; (800b518 <TIM_OC6_SetConfig+0xc0>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d007      	beq.n	800b4d4 <TIM_OC6_SetConfig+0x7c>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4a15      	ldr	r2, [pc, #84]	; (800b51c <TIM_OC6_SetConfig+0xc4>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d003      	beq.n	800b4d4 <TIM_OC6_SetConfig+0x7c>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a14      	ldr	r2, [pc, #80]	; (800b520 <TIM_OC6_SetConfig+0xc8>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d109      	bne.n	800b4e8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b4da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	695b      	ldr	r3, [r3, #20]
 800b4e0:	029b      	lsls	r3, r3, #10
 800b4e2:	697a      	ldr	r2, [r7, #20]
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	697a      	ldr	r2, [r7, #20]
 800b4ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	68fa      	ldr	r2, [r7, #12]
 800b4f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	685a      	ldr	r2, [r3, #4]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	693a      	ldr	r2, [r7, #16]
 800b500:	621a      	str	r2, [r3, #32]
}
 800b502:	bf00      	nop
 800b504:	371c      	adds	r7, #28
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	40012c00 	.word	0x40012c00
 800b514:	40013400 	.word	0x40013400
 800b518:	40014000 	.word	0x40014000
 800b51c:	40014400 	.word	0x40014400
 800b520:	40014800 	.word	0x40014800

0800b524 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b524:	b480      	push	{r7}
 800b526:	b087      	sub	sp, #28
 800b528:	af00      	add	r7, sp, #0
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	60b9      	str	r1, [r7, #8]
 800b52e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6a1b      	ldr	r3, [r3, #32]
 800b534:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	6a1b      	ldr	r3, [r3, #32]
 800b53a:	f023 0201 	bic.w	r2, r3, #1
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	699b      	ldr	r3, [r3, #24]
 800b546:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b54e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	011b      	lsls	r3, r3, #4
 800b554:	693a      	ldr	r2, [r7, #16]
 800b556:	4313      	orrs	r3, r2
 800b558:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	f023 030a 	bic.w	r3, r3, #10
 800b560:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b562:	697a      	ldr	r2, [r7, #20]
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	4313      	orrs	r3, r2
 800b568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	693a      	ldr	r2, [r7, #16]
 800b56e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	697a      	ldr	r2, [r7, #20]
 800b574:	621a      	str	r2, [r3, #32]
}
 800b576:	bf00      	nop
 800b578:	371c      	adds	r7, #28
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr

0800b582 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b582:	b480      	push	{r7}
 800b584:	b087      	sub	sp, #28
 800b586:	af00      	add	r7, sp, #0
 800b588:	60f8      	str	r0, [r7, #12]
 800b58a:	60b9      	str	r1, [r7, #8]
 800b58c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	6a1b      	ldr	r3, [r3, #32]
 800b592:	f023 0210 	bic.w	r2, r3, #16
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	699b      	ldr	r3, [r3, #24]
 800b59e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	6a1b      	ldr	r3, [r3, #32]
 800b5a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b5ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	031b      	lsls	r3, r3, #12
 800b5b2:	697a      	ldr	r2, [r7, #20]
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b5be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	011b      	lsls	r3, r3, #4
 800b5c4:	693a      	ldr	r2, [r7, #16]
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	697a      	ldr	r2, [r7, #20]
 800b5ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	693a      	ldr	r2, [r7, #16]
 800b5d4:	621a      	str	r2, [r3, #32]
}
 800b5d6:	bf00      	nop
 800b5d8:	371c      	adds	r7, #28
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr

0800b5e2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b5e2:	b480      	push	{r7}
 800b5e4:	b085      	sub	sp, #20
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
 800b5ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b5f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b5fe:	683a      	ldr	r2, [r7, #0]
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	4313      	orrs	r3, r2
 800b604:	f043 0307 	orr.w	r3, r3, #7
 800b608:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	609a      	str	r2, [r3, #8]
}
 800b610:	bf00      	nop
 800b612:	3714      	adds	r7, #20
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b087      	sub	sp, #28
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	607a      	str	r2, [r7, #4]
 800b628:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	689b      	ldr	r3, [r3, #8]
 800b62e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b636:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	021a      	lsls	r2, r3, #8
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	431a      	orrs	r2, r3
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	4313      	orrs	r3, r2
 800b644:	697a      	ldr	r2, [r7, #20]
 800b646:	4313      	orrs	r3, r2
 800b648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	697a      	ldr	r2, [r7, #20]
 800b64e:	609a      	str	r2, [r3, #8]
}
 800b650:	bf00      	nop
 800b652:	371c      	adds	r7, #28
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b087      	sub	sp, #28
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	f003 031f 	and.w	r3, r3, #31
 800b66e:	2201      	movs	r2, #1
 800b670:	fa02 f303 	lsl.w	r3, r2, r3
 800b674:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	6a1a      	ldr	r2, [r3, #32]
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	43db      	mvns	r3, r3
 800b67e:	401a      	ands	r2, r3
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6a1a      	ldr	r2, [r3, #32]
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	f003 031f 	and.w	r3, r3, #31
 800b68e:	6879      	ldr	r1, [r7, #4]
 800b690:	fa01 f303 	lsl.w	r3, r1, r3
 800b694:	431a      	orrs	r2, r3
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	621a      	str	r2, [r3, #32]
}
 800b69a:	bf00      	nop
 800b69c:	371c      	adds	r7, #28
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
	...

0800b6a8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d109      	bne.n	800b6cc <HAL_TIMEx_PWMN_Start+0x24>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	bf14      	ite	ne
 800b6c4:	2301      	movne	r3, #1
 800b6c6:	2300      	moveq	r3, #0
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	e022      	b.n	800b712 <HAL_TIMEx_PWMN_Start+0x6a>
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	2b04      	cmp	r3, #4
 800b6d0:	d109      	bne.n	800b6e6 <HAL_TIMEx_PWMN_Start+0x3e>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	bf14      	ite	ne
 800b6de:	2301      	movne	r3, #1
 800b6e0:	2300      	moveq	r3, #0
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	e015      	b.n	800b712 <HAL_TIMEx_PWMN_Start+0x6a>
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	2b08      	cmp	r3, #8
 800b6ea:	d109      	bne.n	800b700 <HAL_TIMEx_PWMN_Start+0x58>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	bf14      	ite	ne
 800b6f8:	2301      	movne	r3, #1
 800b6fa:	2300      	moveq	r3, #0
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	e008      	b.n	800b712 <HAL_TIMEx_PWMN_Start+0x6a>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b706:	b2db      	uxtb	r3, r3
 800b708:	2b01      	cmp	r3, #1
 800b70a:	bf14      	ite	ne
 800b70c:	2301      	movne	r3, #1
 800b70e:	2300      	moveq	r3, #0
 800b710:	b2db      	uxtb	r3, r3
 800b712:	2b00      	cmp	r3, #0
 800b714:	d001      	beq.n	800b71a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b716:	2301      	movs	r3, #1
 800b718:	e069      	b.n	800b7ee <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d104      	bne.n	800b72a <HAL_TIMEx_PWMN_Start+0x82>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2202      	movs	r2, #2
 800b724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b728:	e013      	b.n	800b752 <HAL_TIMEx_PWMN_Start+0xaa>
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	2b04      	cmp	r3, #4
 800b72e:	d104      	bne.n	800b73a <HAL_TIMEx_PWMN_Start+0x92>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2202      	movs	r2, #2
 800b734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b738:	e00b      	b.n	800b752 <HAL_TIMEx_PWMN_Start+0xaa>
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	2b08      	cmp	r3, #8
 800b73e:	d104      	bne.n	800b74a <HAL_TIMEx_PWMN_Start+0xa2>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2202      	movs	r2, #2
 800b744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b748:	e003      	b.n	800b752 <HAL_TIMEx_PWMN_Start+0xaa>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2202      	movs	r2, #2
 800b74e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2204      	movs	r2, #4
 800b758:	6839      	ldr	r1, [r7, #0]
 800b75a:	4618      	mov	r0, r3
 800b75c:	f000 f9d3 	bl	800bb06 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b76e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a20      	ldr	r2, [pc, #128]	; (800b7f8 <HAL_TIMEx_PWMN_Start+0x150>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d018      	beq.n	800b7ac <HAL_TIMEx_PWMN_Start+0x104>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b782:	d013      	beq.n	800b7ac <HAL_TIMEx_PWMN_Start+0x104>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a1c      	ldr	r2, [pc, #112]	; (800b7fc <HAL_TIMEx_PWMN_Start+0x154>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d00e      	beq.n	800b7ac <HAL_TIMEx_PWMN_Start+0x104>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a1b      	ldr	r2, [pc, #108]	; (800b800 <HAL_TIMEx_PWMN_Start+0x158>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d009      	beq.n	800b7ac <HAL_TIMEx_PWMN_Start+0x104>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a19      	ldr	r2, [pc, #100]	; (800b804 <HAL_TIMEx_PWMN_Start+0x15c>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d004      	beq.n	800b7ac <HAL_TIMEx_PWMN_Start+0x104>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a18      	ldr	r2, [pc, #96]	; (800b808 <HAL_TIMEx_PWMN_Start+0x160>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d115      	bne.n	800b7d8 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	689a      	ldr	r2, [r3, #8]
 800b7b2:	4b16      	ldr	r3, [pc, #88]	; (800b80c <HAL_TIMEx_PWMN_Start+0x164>)
 800b7b4:	4013      	ands	r3, r2
 800b7b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2b06      	cmp	r3, #6
 800b7bc:	d015      	beq.n	800b7ea <HAL_TIMEx_PWMN_Start+0x142>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7c4:	d011      	beq.n	800b7ea <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f042 0201 	orr.w	r2, r2, #1
 800b7d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7d6:	e008      	b.n	800b7ea <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f042 0201 	orr.w	r2, r2, #1
 800b7e6:	601a      	str	r2, [r3, #0]
 800b7e8:	e000      	b.n	800b7ec <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b7ec:	2300      	movs	r3, #0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	40012c00 	.word	0x40012c00
 800b7fc:	40000400 	.word	0x40000400
 800b800:	40000800 	.word	0x40000800
 800b804:	40013400 	.word	0x40013400
 800b808:	40014000 	.word	0x40014000
 800b80c:	00010007 	.word	0x00010007

0800b810 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b810:	b480      	push	{r7}
 800b812:	b085      	sub	sp, #20
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b820:	2b01      	cmp	r3, #1
 800b822:	d101      	bne.n	800b828 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b824:	2302      	movs	r3, #2
 800b826:	e065      	b.n	800b8f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2202      	movs	r2, #2
 800b834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a2c      	ldr	r2, [pc, #176]	; (800b900 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d004      	beq.n	800b85c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a2b      	ldr	r2, [pc, #172]	; (800b904 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d108      	bne.n	800b86e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b862:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b878:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	4313      	orrs	r3, r2
 800b882:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a1b      	ldr	r2, [pc, #108]	; (800b900 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d018      	beq.n	800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b89e:	d013      	beq.n	800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a18      	ldr	r2, [pc, #96]	; (800b908 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d00e      	beq.n	800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a17      	ldr	r2, [pc, #92]	; (800b90c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d009      	beq.n	800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a12      	ldr	r2, [pc, #72]	; (800b904 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d004      	beq.n	800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a13      	ldr	r2, [pc, #76]	; (800b910 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d10c      	bne.n	800b8e2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	68ba      	ldr	r2, [r7, #8]
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	68ba      	ldr	r2, [r7, #8]
 800b8e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8f2:	2300      	movs	r3, #0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3714      	adds	r7, #20
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr
 800b900:	40012c00 	.word	0x40012c00
 800b904:	40013400 	.word	0x40013400
 800b908:	40000400 	.word	0x40000400
 800b90c:	40000800 	.word	0x40000800
 800b910:	40014000 	.word	0x40014000

0800b914 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b914:	b480      	push	{r7}
 800b916:	b085      	sub	sp, #20
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b91e:	2300      	movs	r3, #0
 800b920:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d101      	bne.n	800b930 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b92c:	2302      	movs	r3, #2
 800b92e:	e087      	b.n	800ba40 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2201      	movs	r2, #1
 800b934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	4313      	orrs	r3, r2
 800b944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	4313      	orrs	r3, r2
 800b952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	4313      	orrs	r3, r2
 800b960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4313      	orrs	r3, r2
 800b96e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	691b      	ldr	r3, [r3, #16]
 800b97a:	4313      	orrs	r3, r2
 800b97c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	695b      	ldr	r3, [r3, #20]
 800b988:	4313      	orrs	r3, r2
 800b98a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b996:	4313      	orrs	r3, r2
 800b998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	699b      	ldr	r3, [r3, #24]
 800b9a4:	041b      	lsls	r3, r3, #16
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4a27      	ldr	r2, [pc, #156]	; (800ba4c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d004      	beq.n	800b9be <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4a25      	ldr	r2, [pc, #148]	; (800ba50 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d106      	bne.n	800b9cc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	69db      	ldr	r3, [r3, #28]
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a1e      	ldr	r2, [pc, #120]	; (800ba4c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d004      	beq.n	800b9e0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a1d      	ldr	r2, [pc, #116]	; (800ba50 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d126      	bne.n	800ba2e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ea:	051b      	lsls	r3, r3, #20
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	6a1b      	ldr	r3, [r3, #32]
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a0e      	ldr	r2, [pc, #56]	; (800ba4c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d004      	beq.n	800ba20 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4a0d      	ldr	r2, [pc, #52]	; (800ba50 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d106      	bne.n	800ba2e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba3e:	2300      	movs	r3, #0
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3714      	adds	r7, #20
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr
 800ba4c:	40012c00 	.word	0x40012c00
 800ba50:	40013400 	.word	0x40013400

0800ba54 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b083      	sub	sp, #12
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ba6a:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	370c      	adds	r7, #12
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr

0800ba7a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ba7a:	b480      	push	{r7}
 800ba7c:	b083      	sub	sp, #12
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ba82:	bf00      	nop
 800ba84:	370c      	adds	r7, #12
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr

0800ba8e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ba8e:	b480      	push	{r7}
 800ba90:	b083      	sub	sp, #12
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ba96:	bf00      	nop
 800ba98:	370c      	adds	r7, #12
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr

0800baa2 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800baa2:	b480      	push	{r7}
 800baa4:	b083      	sub	sp, #12
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800baaa:	bf00      	nop
 800baac:	370c      	adds	r7, #12
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr

0800bab6 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bab6:	b480      	push	{r7}
 800bab8:	b083      	sub	sp, #12
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800babe:	bf00      	nop
 800bac0:	370c      	adds	r7, #12
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr

0800baca <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800baca:	b480      	push	{r7}
 800bacc:	b083      	sub	sp, #12
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bad2:	bf00      	nop
 800bad4:	370c      	adds	r7, #12
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr

0800bade <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bade:	b480      	push	{r7}
 800bae0:	b083      	sub	sp, #12
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bae6:	bf00      	nop
 800bae8:	370c      	adds	r7, #12
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr

0800baf2 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800baf2:	b480      	push	{r7}
 800baf4:	b083      	sub	sp, #12
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bafa:	bf00      	nop
 800bafc:	370c      	adds	r7, #12
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr

0800bb06 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800bb06:	b480      	push	{r7}
 800bb08:	b087      	sub	sp, #28
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	60f8      	str	r0, [r7, #12]
 800bb0e:	60b9      	str	r1, [r7, #8]
 800bb10:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	f003 031f 	and.w	r3, r3, #31
 800bb18:	2204      	movs	r2, #4
 800bb1a:	fa02 f303 	lsl.w	r3, r2, r3
 800bb1e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6a1a      	ldr	r2, [r3, #32]
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	43db      	mvns	r3, r3
 800bb28:	401a      	ands	r2, r3
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	6a1a      	ldr	r2, [r3, #32]
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	f003 031f 	and.w	r3, r3, #31
 800bb38:	6879      	ldr	r1, [r7, #4]
 800bb3a:	fa01 f303 	lsl.w	r3, r1, r3
 800bb3e:	431a      	orrs	r2, r3
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	621a      	str	r2, [r3, #32]
}
 800bb44:	bf00      	nop
 800bb46:	371c      	adds	r7, #28
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr

0800bb50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d101      	bne.n	800bb62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e042      	b.n	800bbe8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d106      	bne.n	800bb7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f7f9 fca7 	bl	80054c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2224      	movs	r2, #36	; 0x24
 800bb7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f022 0201 	bic.w	r2, r2, #1
 800bb90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 fb5c 	bl	800c250 <UART_SetConfig>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d101      	bne.n	800bba2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	e022      	b.n	800bbe8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d002      	beq.n	800bbb0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 fe1c 	bl	800c7e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	685a      	ldr	r2, [r3, #4]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bbbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	689a      	ldr	r2, [r3, #8]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bbce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	681a      	ldr	r2, [r3, #0]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f042 0201 	orr.w	r2, r2, #1
 800bbde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 fea3 	bl	800c92c <UART_CheckIdleState>
 800bbe6:	4603      	mov	r3, r0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3708      	adds	r7, #8
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b08a      	sub	sp, #40	; 0x28
 800bbf4:	af02      	add	r7, sp, #8
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	603b      	str	r3, [r7, #0]
 800bbfc:	4613      	mov	r3, r2
 800bbfe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc06:	2b20      	cmp	r3, #32
 800bc08:	f040 8083 	bne.w	800bd12 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d002      	beq.n	800bc18 <HAL_UART_Transmit+0x28>
 800bc12:	88fb      	ldrh	r3, [r7, #6]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d101      	bne.n	800bc1c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	e07b      	b.n	800bd14 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d101      	bne.n	800bc2a <HAL_UART_Transmit+0x3a>
 800bc26:	2302      	movs	r3, #2
 800bc28:	e074      	b.n	800bd14 <HAL_UART_Transmit+0x124>
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2200      	movs	r2, #0
 800bc36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2221      	movs	r2, #33	; 0x21
 800bc3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bc42:	f7f9 fd5b 	bl	80056fc <HAL_GetTick>
 800bc46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	88fa      	ldrh	r2, [r7, #6]
 800bc4c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	88fa      	ldrh	r2, [r7, #6]
 800bc54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc60:	d108      	bne.n	800bc74 <HAL_UART_Transmit+0x84>
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	691b      	ldr	r3, [r3, #16]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d104      	bne.n	800bc74 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	61bb      	str	r3, [r7, #24]
 800bc72:	e003      	b.n	800bc7c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800bc84:	e02c      	b.n	800bce0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	9300      	str	r3, [sp, #0]
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	2180      	movs	r1, #128	; 0x80
 800bc90:	68f8      	ldr	r0, [r7, #12]
 800bc92:	f000 fe96 	bl	800c9c2 <UART_WaitOnFlagUntilTimeout>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d001      	beq.n	800bca0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800bc9c:	2303      	movs	r3, #3
 800bc9e:	e039      	b.n	800bd14 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d10b      	bne.n	800bcbe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	881b      	ldrh	r3, [r3, #0]
 800bcaa:	461a      	mov	r2, r3
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bcb4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	3302      	adds	r3, #2
 800bcba:	61bb      	str	r3, [r7, #24]
 800bcbc:	e007      	b.n	800bcce <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bcbe:	69fb      	ldr	r3, [r7, #28]
 800bcc0:	781a      	ldrb	r2, [r3, #0]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bcc8:	69fb      	ldr	r3, [r7, #28]
 800bcca:	3301      	adds	r3, #1
 800bccc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	b29a      	uxth	r2, r3
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d1cc      	bne.n	800bc86 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	9300      	str	r3, [sp, #0]
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	2140      	movs	r1, #64	; 0x40
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f000 fe63 	bl	800c9c2 <UART_WaitOnFlagUntilTimeout>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d001      	beq.n	800bd06 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800bd02:	2303      	movs	r3, #3
 800bd04:	e006      	b.n	800bd14 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2220      	movs	r2, #32
 800bd0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	e000      	b.n	800bd14 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800bd12:	2302      	movs	r3, #2
  }
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3720      	adds	r7, #32
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	4613      	mov	r3, r2
 800bd28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd30:	2b20      	cmp	r3, #32
 800bd32:	d131      	bne.n	800bd98 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d002      	beq.n	800bd40 <HAL_UART_Receive_IT+0x24>
 800bd3a:	88fb      	ldrh	r3, [r7, #6]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d101      	bne.n	800bd44 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800bd40:	2301      	movs	r3, #1
 800bd42:	e02a      	b.n	800bd9a <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd4a:	2b01      	cmp	r3, #1
 800bd4c:	d101      	bne.n	800bd52 <HAL_UART_Receive_IT+0x36>
 800bd4e:	2302      	movs	r3, #2
 800bd50:	e023      	b.n	800bd9a <HAL_UART_Receive_IT+0x7e>
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2201      	movs	r2, #1
 800bd56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4a0f      	ldr	r2, [pc, #60]	; (800bda4 <HAL_UART_Receive_IT+0x88>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d00e      	beq.n	800bd88 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d007      	beq.n	800bd88 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	681a      	ldr	r2, [r3, #0]
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800bd86:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bd88:	88fb      	ldrh	r3, [r7, #6]
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	68b9      	ldr	r1, [r7, #8]
 800bd8e:	68f8      	ldr	r0, [r7, #12]
 800bd90:	f000 fe98 	bl	800cac4 <UART_Start_Receive_IT>
 800bd94:	4603      	mov	r3, r0
 800bd96:	e000      	b.n	800bd9a <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800bd98:	2302      	movs	r3, #2
  }
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	40008000 	.word	0x40008000

0800bda8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b088      	sub	sp, #32
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	69db      	ldr	r3, [r3, #28]
 800bdb6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	689b      	ldr	r3, [r3, #8]
 800bdc6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bdc8:	69fa      	ldr	r2, [r7, #28]
 800bdca:	f640 030f 	movw	r3, #2063	; 0x80f
 800bdce:	4013      	ands	r3, r2
 800bdd0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d118      	bne.n	800be0a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	f003 0320 	and.w	r3, r3, #32
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d013      	beq.n	800be0a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bde2:	69bb      	ldr	r3, [r7, #24]
 800bde4:	f003 0320 	and.w	r3, r3, #32
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d104      	bne.n	800bdf6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d009      	beq.n	800be0a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f000 81fb 	beq.w	800c1f6 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	4798      	blx	r3
      }
      return;
 800be08:	e1f5      	b.n	800c1f6 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f000 80ef 	beq.w	800bff0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800be12:	697a      	ldr	r2, [r7, #20]
 800be14:	4b73      	ldr	r3, [pc, #460]	; (800bfe4 <HAL_UART_IRQHandler+0x23c>)
 800be16:	4013      	ands	r3, r2
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d105      	bne.n	800be28 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800be1c:	69ba      	ldr	r2, [r7, #24]
 800be1e:	4b72      	ldr	r3, [pc, #456]	; (800bfe8 <HAL_UART_IRQHandler+0x240>)
 800be20:	4013      	ands	r3, r2
 800be22:	2b00      	cmp	r3, #0
 800be24:	f000 80e4 	beq.w	800bff0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	f003 0301 	and.w	r3, r3, #1
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d010      	beq.n	800be54 <HAL_UART_IRQHandler+0xac>
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00b      	beq.n	800be54 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	2201      	movs	r2, #1
 800be42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be4a:	f043 0201 	orr.w	r2, r3, #1
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be54:	69fb      	ldr	r3, [r7, #28]
 800be56:	f003 0302 	and.w	r3, r3, #2
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d010      	beq.n	800be80 <HAL_UART_IRQHandler+0xd8>
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	f003 0301 	and.w	r3, r3, #1
 800be64:	2b00      	cmp	r3, #0
 800be66:	d00b      	beq.n	800be80 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2202      	movs	r2, #2
 800be6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be76:	f043 0204 	orr.w	r2, r3, #4
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be80:	69fb      	ldr	r3, [r7, #28]
 800be82:	f003 0304 	and.w	r3, r3, #4
 800be86:	2b00      	cmp	r3, #0
 800be88:	d010      	beq.n	800beac <HAL_UART_IRQHandler+0x104>
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	f003 0301 	and.w	r3, r3, #1
 800be90:	2b00      	cmp	r3, #0
 800be92:	d00b      	beq.n	800beac <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	2204      	movs	r2, #4
 800be9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bea2:	f043 0202 	orr.w	r2, r3, #2
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800beac:	69fb      	ldr	r3, [r7, #28]
 800beae:	f003 0308 	and.w	r3, r3, #8
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d015      	beq.n	800bee2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	f003 0320 	and.w	r3, r3, #32
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d104      	bne.n	800beca <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bec0:	697a      	ldr	r2, [r7, #20]
 800bec2:	4b48      	ldr	r3, [pc, #288]	; (800bfe4 <HAL_UART_IRQHandler+0x23c>)
 800bec4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d00b      	beq.n	800bee2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2208      	movs	r2, #8
 800bed0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bed8:	f043 0208 	orr.w	r2, r3, #8
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bee2:	69fb      	ldr	r3, [r7, #28]
 800bee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d011      	beq.n	800bf10 <HAL_UART_IRQHandler+0x168>
 800beec:	69bb      	ldr	r3, [r7, #24]
 800beee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d00c      	beq.n	800bf10 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800befe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf06:	f043 0220 	orr.w	r2, r3, #32
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f000 816f 	beq.w	800c1fa <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	f003 0320 	and.w	r3, r3, #32
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d011      	beq.n	800bf4a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf26:	69bb      	ldr	r3, [r7, #24]
 800bf28:	f003 0320 	and.w	r3, r3, #32
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d104      	bne.n	800bf3a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d007      	beq.n	800bf4a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d003      	beq.n	800bf4a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf50:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	689b      	ldr	r3, [r3, #8]
 800bf58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf5c:	2b40      	cmp	r3, #64	; 0x40
 800bf5e:	d004      	beq.n	800bf6a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d031      	beq.n	800bfce <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 fe68 	bl	800cc40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf7a:	2b40      	cmp	r3, #64	; 0x40
 800bf7c:	d123      	bne.n	800bfc6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	689a      	ldr	r2, [r3, #8]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf8c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d013      	beq.n	800bfbe <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf9a:	4a14      	ldr	r2, [pc, #80]	; (800bfec <HAL_UART_IRQHandler+0x244>)
 800bf9c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7fb f88e 	bl	80070c4 <HAL_DMA_Abort_IT>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d017      	beq.n	800bfde <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bfb8:	4610      	mov	r0, r2
 800bfba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfbc:	e00f      	b.n	800bfde <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 f930 	bl	800c224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfc4:	e00b      	b.n	800bfde <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 f92c 	bl	800c224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfcc:	e007      	b.n	800bfde <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 f928 	bl	800c224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bfdc:	e10d      	b.n	800c1fa <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfde:	bf00      	nop
    return;
 800bfe0:	e10b      	b.n	800c1fa <HAL_UART_IRQHandler+0x452>
 800bfe2:	bf00      	nop
 800bfe4:	10000001 	.word	0x10000001
 800bfe8:	04000120 	.word	0x04000120
 800bfec:	0800cca5 	.word	0x0800cca5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	f040 80ab 	bne.w	800c150 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	f003 0310 	and.w	r3, r3, #16
 800c000:	2b00      	cmp	r3, #0
 800c002:	f000 80a5 	beq.w	800c150 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	f003 0310 	and.w	r3, r3, #16
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f000 809f 	beq.w	800c150 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2210      	movs	r2, #16
 800c018:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c024:	2b40      	cmp	r3, #64	; 0x40
 800c026:	d155      	bne.n	800c0d4 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800c032:	893b      	ldrh	r3, [r7, #8]
 800c034:	2b00      	cmp	r3, #0
 800c036:	f000 80e2 	beq.w	800c1fe <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c040:	893a      	ldrh	r2, [r7, #8]
 800c042:	429a      	cmp	r2, r3
 800c044:	f080 80db 	bcs.w	800c1fe <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	893a      	ldrh	r2, [r7, #8]
 800c04c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f003 0320 	and.w	r3, r3, #32
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d12b      	bne.n	800c0b8 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	681a      	ldr	r2, [r3, #0]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c06e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	689a      	ldr	r2, [r3, #8]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f022 0201 	bic.w	r2, r2, #1
 800c07e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	689a      	ldr	r2, [r3, #8]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c08e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2220      	movs	r2, #32
 800c094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2200      	movs	r2, #0
 800c09c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f022 0210 	bic.w	r2, r2, #16
 800c0ac:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7fa ffad 	bl	8007012 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	1ad3      	subs	r3, r2, r3
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 f8b3 	bl	800c238 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c0d2:	e094      	b.n	800c1fe <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	1ad3      	subs	r3, r2, r3
 800c0e4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	f000 8087 	beq.w	800c202 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 800c0f4:	897b      	ldrh	r3, [r7, #10]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	f000 8083 	beq.w	800c202 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c10a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	689b      	ldr	r3, [r3, #8]
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	6812      	ldr	r2, [r2, #0]
 800c116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c11a:	f023 0301 	bic.w	r3, r3, #1
 800c11e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2220      	movs	r2, #32
 800c124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f022 0210 	bic.w	r2, r2, #16
 800c142:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c144:	897b      	ldrh	r3, [r7, #10]
 800c146:	4619      	mov	r1, r3
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 f875 	bl	800c238 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c14e:	e058      	b.n	800c202 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c156:	2b00      	cmp	r3, #0
 800c158:	d00d      	beq.n	800c176 <HAL_UART_IRQHandler+0x3ce>
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c160:	2b00      	cmp	r3, #0
 800c162:	d008      	beq.n	800c176 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c16c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f001 f8a4 	bl	800d2bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c174:	e048      	b.n	800c208 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c176:	69fb      	ldr	r3, [r7, #28]
 800c178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d012      	beq.n	800c1a6 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c186:	2b00      	cmp	r3, #0
 800c188:	d104      	bne.n	800c194 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c190:	2b00      	cmp	r3, #0
 800c192:	d008      	beq.n	800c1a6 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d034      	beq.n	800c206 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	4798      	blx	r3
    }
    return;
 800c1a4:	e02f      	b.n	800c206 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d008      	beq.n	800c1c2 <HAL_UART_IRQHandler+0x41a>
 800c1b0:	69bb      	ldr	r3, [r7, #24]
 800c1b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d003      	beq.n	800c1c2 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 fd88 	bl	800ccd0 <UART_EndTransmit_IT>
    return;
 800c1c0:	e022      	b.n	800c208 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d008      	beq.n	800c1de <HAL_UART_IRQHandler+0x436>
 800c1cc:	69bb      	ldr	r3, [r7, #24]
 800c1ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d003      	beq.n	800c1de <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f001 f884 	bl	800d2e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c1dc:	e014      	b.n	800c208 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d00f      	beq.n	800c208 <HAL_UART_IRQHandler+0x460>
 800c1e8:	69bb      	ldr	r3, [r7, #24]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	da0c      	bge.n	800c208 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f001 f86e 	bl	800d2d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c1f4:	e008      	b.n	800c208 <HAL_UART_IRQHandler+0x460>
      return;
 800c1f6:	bf00      	nop
 800c1f8:	e006      	b.n	800c208 <HAL_UART_IRQHandler+0x460>
    return;
 800c1fa:	bf00      	nop
 800c1fc:	e004      	b.n	800c208 <HAL_UART_IRQHandler+0x460>
      return;
 800c1fe:	bf00      	nop
 800c200:	e002      	b.n	800c208 <HAL_UART_IRQHandler+0x460>
      return;
 800c202:	bf00      	nop
 800c204:	e000      	b.n	800c208 <HAL_UART_IRQHandler+0x460>
    return;
 800c206:	bf00      	nop
  }
}
 800c208:	3720      	adds	r7, #32
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop

0800c210 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c218:	bf00      	nop
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c22c:	bf00      	nop
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	460b      	mov	r3, r1
 800c242:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c244:	bf00      	nop
 800c246:	370c      	adds	r7, #12
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c254:	b08c      	sub	sp, #48	; 0x30
 800c256:	af00      	add	r7, sp, #0
 800c258:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c25a:	2300      	movs	r3, #0
 800c25c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	689a      	ldr	r2, [r3, #8]
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	691b      	ldr	r3, [r3, #16]
 800c268:	431a      	orrs	r2, r3
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	695b      	ldr	r3, [r3, #20]
 800c26e:	431a      	orrs	r2, r3
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	69db      	ldr	r3, [r3, #28]
 800c274:	4313      	orrs	r3, r2
 800c276:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	4bab      	ldr	r3, [pc, #684]	; (800c52c <UART_SetConfig+0x2dc>)
 800c280:	4013      	ands	r3, r2
 800c282:	697a      	ldr	r2, [r7, #20]
 800c284:	6812      	ldr	r2, [r2, #0]
 800c286:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c288:	430b      	orrs	r3, r1
 800c28a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	68da      	ldr	r2, [r3, #12]
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	430a      	orrs	r2, r1
 800c2a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	699b      	ldr	r3, [r3, #24]
 800c2a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4aa0      	ldr	r2, [pc, #640]	; (800c530 <UART_SetConfig+0x2e0>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d004      	beq.n	800c2bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	6a1b      	ldr	r3, [r3, #32]
 800c2b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	689b      	ldr	r3, [r3, #8]
 800c2c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c2c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c2ca:	697a      	ldr	r2, [r7, #20]
 800c2cc:	6812      	ldr	r2, [r2, #0]
 800c2ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2d0:	430b      	orrs	r3, r1
 800c2d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2da:	f023 010f 	bic.w	r1, r3, #15
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	430a      	orrs	r2, r1
 800c2e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4a91      	ldr	r2, [pc, #580]	; (800c534 <UART_SetConfig+0x2e4>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d125      	bne.n	800c340 <UART_SetConfig+0xf0>
 800c2f4:	4b90      	ldr	r3, [pc, #576]	; (800c538 <UART_SetConfig+0x2e8>)
 800c2f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2fa:	f003 0303 	and.w	r3, r3, #3
 800c2fe:	2b03      	cmp	r3, #3
 800c300:	d81a      	bhi.n	800c338 <UART_SetConfig+0xe8>
 800c302:	a201      	add	r2, pc, #4	; (adr r2, 800c308 <UART_SetConfig+0xb8>)
 800c304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c308:	0800c319 	.word	0x0800c319
 800c30c:	0800c329 	.word	0x0800c329
 800c310:	0800c321 	.word	0x0800c321
 800c314:	0800c331 	.word	0x0800c331
 800c318:	2301      	movs	r3, #1
 800c31a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c31e:	e0d6      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c320:	2302      	movs	r3, #2
 800c322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c326:	e0d2      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c328:	2304      	movs	r3, #4
 800c32a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c32e:	e0ce      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c330:	2308      	movs	r3, #8
 800c332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c336:	e0ca      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c338:	2310      	movs	r3, #16
 800c33a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c33e:	e0c6      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a7d      	ldr	r2, [pc, #500]	; (800c53c <UART_SetConfig+0x2ec>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d138      	bne.n	800c3bc <UART_SetConfig+0x16c>
 800c34a:	4b7b      	ldr	r3, [pc, #492]	; (800c538 <UART_SetConfig+0x2e8>)
 800c34c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c350:	f003 030c 	and.w	r3, r3, #12
 800c354:	2b0c      	cmp	r3, #12
 800c356:	d82d      	bhi.n	800c3b4 <UART_SetConfig+0x164>
 800c358:	a201      	add	r2, pc, #4	; (adr r2, 800c360 <UART_SetConfig+0x110>)
 800c35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c35e:	bf00      	nop
 800c360:	0800c395 	.word	0x0800c395
 800c364:	0800c3b5 	.word	0x0800c3b5
 800c368:	0800c3b5 	.word	0x0800c3b5
 800c36c:	0800c3b5 	.word	0x0800c3b5
 800c370:	0800c3a5 	.word	0x0800c3a5
 800c374:	0800c3b5 	.word	0x0800c3b5
 800c378:	0800c3b5 	.word	0x0800c3b5
 800c37c:	0800c3b5 	.word	0x0800c3b5
 800c380:	0800c39d 	.word	0x0800c39d
 800c384:	0800c3b5 	.word	0x0800c3b5
 800c388:	0800c3b5 	.word	0x0800c3b5
 800c38c:	0800c3b5 	.word	0x0800c3b5
 800c390:	0800c3ad 	.word	0x0800c3ad
 800c394:	2300      	movs	r3, #0
 800c396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c39a:	e098      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c39c:	2302      	movs	r3, #2
 800c39e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3a2:	e094      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c3a4:	2304      	movs	r3, #4
 800c3a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3aa:	e090      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c3ac:	2308      	movs	r3, #8
 800c3ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3b2:	e08c      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c3b4:	2310      	movs	r3, #16
 800c3b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3ba:	e088      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a5f      	ldr	r2, [pc, #380]	; (800c540 <UART_SetConfig+0x2f0>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d125      	bne.n	800c412 <UART_SetConfig+0x1c2>
 800c3c6:	4b5c      	ldr	r3, [pc, #368]	; (800c538 <UART_SetConfig+0x2e8>)
 800c3c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c3d0:	2b30      	cmp	r3, #48	; 0x30
 800c3d2:	d016      	beq.n	800c402 <UART_SetConfig+0x1b2>
 800c3d4:	2b30      	cmp	r3, #48	; 0x30
 800c3d6:	d818      	bhi.n	800c40a <UART_SetConfig+0x1ba>
 800c3d8:	2b20      	cmp	r3, #32
 800c3da:	d00a      	beq.n	800c3f2 <UART_SetConfig+0x1a2>
 800c3dc:	2b20      	cmp	r3, #32
 800c3de:	d814      	bhi.n	800c40a <UART_SetConfig+0x1ba>
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d002      	beq.n	800c3ea <UART_SetConfig+0x19a>
 800c3e4:	2b10      	cmp	r3, #16
 800c3e6:	d008      	beq.n	800c3fa <UART_SetConfig+0x1aa>
 800c3e8:	e00f      	b.n	800c40a <UART_SetConfig+0x1ba>
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3f0:	e06d      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c3f2:	2302      	movs	r3, #2
 800c3f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3f8:	e069      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c3fa:	2304      	movs	r3, #4
 800c3fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c400:	e065      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c402:	2308      	movs	r3, #8
 800c404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c408:	e061      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c40a:	2310      	movs	r3, #16
 800c40c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c410:	e05d      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4a4b      	ldr	r2, [pc, #300]	; (800c544 <UART_SetConfig+0x2f4>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d125      	bne.n	800c468 <UART_SetConfig+0x218>
 800c41c:	4b46      	ldr	r3, [pc, #280]	; (800c538 <UART_SetConfig+0x2e8>)
 800c41e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c422:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c426:	2bc0      	cmp	r3, #192	; 0xc0
 800c428:	d016      	beq.n	800c458 <UART_SetConfig+0x208>
 800c42a:	2bc0      	cmp	r3, #192	; 0xc0
 800c42c:	d818      	bhi.n	800c460 <UART_SetConfig+0x210>
 800c42e:	2b80      	cmp	r3, #128	; 0x80
 800c430:	d00a      	beq.n	800c448 <UART_SetConfig+0x1f8>
 800c432:	2b80      	cmp	r3, #128	; 0x80
 800c434:	d814      	bhi.n	800c460 <UART_SetConfig+0x210>
 800c436:	2b00      	cmp	r3, #0
 800c438:	d002      	beq.n	800c440 <UART_SetConfig+0x1f0>
 800c43a:	2b40      	cmp	r3, #64	; 0x40
 800c43c:	d008      	beq.n	800c450 <UART_SetConfig+0x200>
 800c43e:	e00f      	b.n	800c460 <UART_SetConfig+0x210>
 800c440:	2300      	movs	r3, #0
 800c442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c446:	e042      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c448:	2302      	movs	r3, #2
 800c44a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c44e:	e03e      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c450:	2304      	movs	r3, #4
 800c452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c456:	e03a      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c458:	2308      	movs	r3, #8
 800c45a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c45e:	e036      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c460:	2310      	movs	r3, #16
 800c462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c466:	e032      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a30      	ldr	r2, [pc, #192]	; (800c530 <UART_SetConfig+0x2e0>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d12a      	bne.n	800c4c8 <UART_SetConfig+0x278>
 800c472:	4b31      	ldr	r3, [pc, #196]	; (800c538 <UART_SetConfig+0x2e8>)
 800c474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c478:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c47c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c480:	d01a      	beq.n	800c4b8 <UART_SetConfig+0x268>
 800c482:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c486:	d81b      	bhi.n	800c4c0 <UART_SetConfig+0x270>
 800c488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c48c:	d00c      	beq.n	800c4a8 <UART_SetConfig+0x258>
 800c48e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c492:	d815      	bhi.n	800c4c0 <UART_SetConfig+0x270>
 800c494:	2b00      	cmp	r3, #0
 800c496:	d003      	beq.n	800c4a0 <UART_SetConfig+0x250>
 800c498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c49c:	d008      	beq.n	800c4b0 <UART_SetConfig+0x260>
 800c49e:	e00f      	b.n	800c4c0 <UART_SetConfig+0x270>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c4a6:	e012      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c4a8:	2302      	movs	r3, #2
 800c4aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c4ae:	e00e      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c4b0:	2304      	movs	r3, #4
 800c4b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c4b6:	e00a      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c4b8:	2308      	movs	r3, #8
 800c4ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c4be:	e006      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c4c0:	2310      	movs	r3, #16
 800c4c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c4c6:	e002      	b.n	800c4ce <UART_SetConfig+0x27e>
 800c4c8:	2310      	movs	r3, #16
 800c4ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a17      	ldr	r2, [pc, #92]	; (800c530 <UART_SetConfig+0x2e0>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	f040 80a8 	bne.w	800c62a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c4da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c4de:	2b08      	cmp	r3, #8
 800c4e0:	d834      	bhi.n	800c54c <UART_SetConfig+0x2fc>
 800c4e2:	a201      	add	r2, pc, #4	; (adr r2, 800c4e8 <UART_SetConfig+0x298>)
 800c4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e8:	0800c50d 	.word	0x0800c50d
 800c4ec:	0800c54d 	.word	0x0800c54d
 800c4f0:	0800c515 	.word	0x0800c515
 800c4f4:	0800c54d 	.word	0x0800c54d
 800c4f8:	0800c51b 	.word	0x0800c51b
 800c4fc:	0800c54d 	.word	0x0800c54d
 800c500:	0800c54d 	.word	0x0800c54d
 800c504:	0800c54d 	.word	0x0800c54d
 800c508:	0800c523 	.word	0x0800c523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c50c:	f7fd fc46 	bl	8009d9c <HAL_RCC_GetPCLK1Freq>
 800c510:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c512:	e021      	b.n	800c558 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c514:	4b0c      	ldr	r3, [pc, #48]	; (800c548 <UART_SetConfig+0x2f8>)
 800c516:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c518:	e01e      	b.n	800c558 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c51a:	f7fd fbd1 	bl	8009cc0 <HAL_RCC_GetSysClockFreq>
 800c51e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c520:	e01a      	b.n	800c558 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c526:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c528:	e016      	b.n	800c558 <UART_SetConfig+0x308>
 800c52a:	bf00      	nop
 800c52c:	cfff69f3 	.word	0xcfff69f3
 800c530:	40008000 	.word	0x40008000
 800c534:	40013800 	.word	0x40013800
 800c538:	40021000 	.word	0x40021000
 800c53c:	40004400 	.word	0x40004400
 800c540:	40004800 	.word	0x40004800
 800c544:	40004c00 	.word	0x40004c00
 800c548:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800c54c:	2300      	movs	r3, #0
 800c54e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c550:	2301      	movs	r3, #1
 800c552:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c556:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	f000 812a 	beq.w	800c7b4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c564:	4a9e      	ldr	r2, [pc, #632]	; (800c7e0 <UART_SetConfig+0x590>)
 800c566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c56a:	461a      	mov	r2, r3
 800c56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c572:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	685a      	ldr	r2, [r3, #4]
 800c578:	4613      	mov	r3, r2
 800c57a:	005b      	lsls	r3, r3, #1
 800c57c:	4413      	add	r3, r2
 800c57e:	69ba      	ldr	r2, [r7, #24]
 800c580:	429a      	cmp	r2, r3
 800c582:	d305      	bcc.n	800c590 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c58a:	69ba      	ldr	r2, [r7, #24]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d903      	bls.n	800c598 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800c590:	2301      	movs	r3, #1
 800c592:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c596:	e10d      	b.n	800c7b4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59a:	2200      	movs	r2, #0
 800c59c:	60bb      	str	r3, [r7, #8]
 800c59e:	60fa      	str	r2, [r7, #12]
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a4:	4a8e      	ldr	r2, [pc, #568]	; (800c7e0 <UART_SetConfig+0x590>)
 800c5a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	603b      	str	r3, [r7, #0]
 800c5b0:	607a      	str	r2, [r7, #4]
 800c5b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c5ba:	f7f4 fb8d 	bl	8000cd8 <__aeabi_uldivmod>
 800c5be:	4602      	mov	r2, r0
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	4610      	mov	r0, r2
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	f04f 0200 	mov.w	r2, #0
 800c5ca:	f04f 0300 	mov.w	r3, #0
 800c5ce:	020b      	lsls	r3, r1, #8
 800c5d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c5d4:	0202      	lsls	r2, r0, #8
 800c5d6:	6979      	ldr	r1, [r7, #20]
 800c5d8:	6849      	ldr	r1, [r1, #4]
 800c5da:	0849      	lsrs	r1, r1, #1
 800c5dc:	2000      	movs	r0, #0
 800c5de:	460c      	mov	r4, r1
 800c5e0:	4605      	mov	r5, r0
 800c5e2:	eb12 0804 	adds.w	r8, r2, r4
 800c5e6:	eb43 0905 	adc.w	r9, r3, r5
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	469a      	mov	sl, r3
 800c5f2:	4693      	mov	fp, r2
 800c5f4:	4652      	mov	r2, sl
 800c5f6:	465b      	mov	r3, fp
 800c5f8:	4640      	mov	r0, r8
 800c5fa:	4649      	mov	r1, r9
 800c5fc:	f7f4 fb6c 	bl	8000cd8 <__aeabi_uldivmod>
 800c600:	4602      	mov	r2, r0
 800c602:	460b      	mov	r3, r1
 800c604:	4613      	mov	r3, r2
 800c606:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c608:	6a3b      	ldr	r3, [r7, #32]
 800c60a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c60e:	d308      	bcc.n	800c622 <UART_SetConfig+0x3d2>
 800c610:	6a3b      	ldr	r3, [r7, #32]
 800c612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c616:	d204      	bcs.n	800c622 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	6a3a      	ldr	r2, [r7, #32]
 800c61e:	60da      	str	r2, [r3, #12]
 800c620:	e0c8      	b.n	800c7b4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800c622:	2301      	movs	r3, #1
 800c624:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c628:	e0c4      	b.n	800c7b4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	69db      	ldr	r3, [r3, #28]
 800c62e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c632:	d168      	bne.n	800c706 <UART_SetConfig+0x4b6>
  {
    switch (clocksource)
 800c634:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c638:	2b08      	cmp	r3, #8
 800c63a:	d828      	bhi.n	800c68e <UART_SetConfig+0x43e>
 800c63c:	a201      	add	r2, pc, #4	; (adr r2, 800c644 <UART_SetConfig+0x3f4>)
 800c63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c642:	bf00      	nop
 800c644:	0800c669 	.word	0x0800c669
 800c648:	0800c671 	.word	0x0800c671
 800c64c:	0800c679 	.word	0x0800c679
 800c650:	0800c68f 	.word	0x0800c68f
 800c654:	0800c67f 	.word	0x0800c67f
 800c658:	0800c68f 	.word	0x0800c68f
 800c65c:	0800c68f 	.word	0x0800c68f
 800c660:	0800c68f 	.word	0x0800c68f
 800c664:	0800c687 	.word	0x0800c687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c668:	f7fd fb98 	bl	8009d9c <HAL_RCC_GetPCLK1Freq>
 800c66c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c66e:	e014      	b.n	800c69a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c670:	f7fd fbaa 	bl	8009dc8 <HAL_RCC_GetPCLK2Freq>
 800c674:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c676:	e010      	b.n	800c69a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c678:	4b5a      	ldr	r3, [pc, #360]	; (800c7e4 <UART_SetConfig+0x594>)
 800c67a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c67c:	e00d      	b.n	800c69a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c67e:	f7fd fb1f 	bl	8009cc0 <HAL_RCC_GetSysClockFreq>
 800c682:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c684:	e009      	b.n	800c69a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c68a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c68c:	e005      	b.n	800c69a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800c68e:	2300      	movs	r3, #0
 800c690:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c692:	2301      	movs	r3, #1
 800c694:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c698:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	f000 8089 	beq.w	800c7b4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a6:	4a4e      	ldr	r2, [pc, #312]	; (800c7e0 <UART_SetConfig+0x590>)
 800c6a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6b4:	005a      	lsls	r2, r3, #1
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	085b      	lsrs	r3, r3, #1
 800c6bc:	441a      	add	r2, r3
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6c6:	b29b      	uxth	r3, r3
 800c6c8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c6ca:	6a3b      	ldr	r3, [r7, #32]
 800c6cc:	2b0f      	cmp	r3, #15
 800c6ce:	d916      	bls.n	800c6fe <UART_SetConfig+0x4ae>
 800c6d0:	6a3b      	ldr	r3, [r7, #32]
 800c6d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6d6:	d212      	bcs.n	800c6fe <UART_SetConfig+0x4ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c6d8:	6a3b      	ldr	r3, [r7, #32]
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	f023 030f 	bic.w	r3, r3, #15
 800c6e0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c6e2:	6a3b      	ldr	r3, [r7, #32]
 800c6e4:	085b      	lsrs	r3, r3, #1
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	f003 0307 	and.w	r3, r3, #7
 800c6ec:	b29a      	uxth	r2, r3
 800c6ee:	8bfb      	ldrh	r3, [r7, #30]
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	8bfa      	ldrh	r2, [r7, #30]
 800c6fa:	60da      	str	r2, [r3, #12]
 800c6fc:	e05a      	b.n	800c7b4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800c6fe:	2301      	movs	r3, #1
 800c700:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c704:	e056      	b.n	800c7b4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c706:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c70a:	2b08      	cmp	r3, #8
 800c70c:	d827      	bhi.n	800c75e <UART_SetConfig+0x50e>
 800c70e:	a201      	add	r2, pc, #4	; (adr r2, 800c714 <UART_SetConfig+0x4c4>)
 800c710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c714:	0800c739 	.word	0x0800c739
 800c718:	0800c741 	.word	0x0800c741
 800c71c:	0800c749 	.word	0x0800c749
 800c720:	0800c75f 	.word	0x0800c75f
 800c724:	0800c74f 	.word	0x0800c74f
 800c728:	0800c75f 	.word	0x0800c75f
 800c72c:	0800c75f 	.word	0x0800c75f
 800c730:	0800c75f 	.word	0x0800c75f
 800c734:	0800c757 	.word	0x0800c757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c738:	f7fd fb30 	bl	8009d9c <HAL_RCC_GetPCLK1Freq>
 800c73c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c73e:	e014      	b.n	800c76a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c740:	f7fd fb42 	bl	8009dc8 <HAL_RCC_GetPCLK2Freq>
 800c744:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c746:	e010      	b.n	800c76a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c748:	4b26      	ldr	r3, [pc, #152]	; (800c7e4 <UART_SetConfig+0x594>)
 800c74a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c74c:	e00d      	b.n	800c76a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c74e:	f7fd fab7 	bl	8009cc0 <HAL_RCC_GetSysClockFreq>
 800c752:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c754:	e009      	b.n	800c76a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c75a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c75c:	e005      	b.n	800c76a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800c75e:	2300      	movs	r3, #0
 800c760:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c762:	2301      	movs	r3, #1
 800c764:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c768:	bf00      	nop
    }

    if (pclk != 0U)
 800c76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d021      	beq.n	800c7b4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c774:	4a1a      	ldr	r2, [pc, #104]	; (800c7e0 <UART_SetConfig+0x590>)
 800c776:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c77a:	461a      	mov	r2, r3
 800c77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	085b      	lsrs	r3, r3, #1
 800c788:	441a      	add	r2, r3
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c792:	b29b      	uxth	r3, r3
 800c794:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c796:	6a3b      	ldr	r3, [r7, #32]
 800c798:	2b0f      	cmp	r3, #15
 800c79a:	d908      	bls.n	800c7ae <UART_SetConfig+0x55e>
 800c79c:	6a3b      	ldr	r3, [r7, #32]
 800c79e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7a2:	d204      	bcs.n	800c7ae <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = usartdiv;
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	6a3a      	ldr	r2, [r7, #32]
 800c7aa:	60da      	str	r2, [r3, #12]
 800c7ac:	e002      	b.n	800c7b4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	2201      	movs	r2, #1
 800c7c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c7d0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3730      	adds	r7, #48	; 0x30
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c7de:	bf00      	nop
 800c7e0:	08012e4c 	.word	0x08012e4c
 800c7e4:	00f42400 	.word	0x00f42400

0800c7e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7f4:	f003 0301 	and.w	r3, r3, #1
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d00a      	beq.n	800c812 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	430a      	orrs	r2, r1
 800c810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c816:	f003 0302 	and.w	r3, r3, #2
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d00a      	beq.n	800c834 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	430a      	orrs	r2, r1
 800c832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c838:	f003 0304 	and.w	r3, r3, #4
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d00a      	beq.n	800c856 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	430a      	orrs	r2, r1
 800c854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c85a:	f003 0308 	and.w	r3, r3, #8
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d00a      	beq.n	800c878 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	685b      	ldr	r3, [r3, #4]
 800c868:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	430a      	orrs	r2, r1
 800c876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c87c:	f003 0310 	and.w	r3, r3, #16
 800c880:	2b00      	cmp	r3, #0
 800c882:	d00a      	beq.n	800c89a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	689b      	ldr	r3, [r3, #8]
 800c88a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	430a      	orrs	r2, r1
 800c898:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c89e:	f003 0320 	and.w	r3, r3, #32
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d00a      	beq.n	800c8bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	689b      	ldr	r3, [r3, #8]
 800c8ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	430a      	orrs	r2, r1
 800c8ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d01a      	beq.n	800c8fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	430a      	orrs	r2, r1
 800c8dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8e6:	d10a      	bne.n	800c8fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	430a      	orrs	r2, r1
 800c8fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00a      	beq.n	800c920 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	685b      	ldr	r3, [r3, #4]
 800c910:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	430a      	orrs	r2, r1
 800c91e:	605a      	str	r2, [r3, #4]
  }
}
 800c920:	bf00      	nop
 800c922:	370c      	adds	r7, #12
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr

0800c92c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b086      	sub	sp, #24
 800c930:	af02      	add	r7, sp, #8
 800c932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2200      	movs	r2, #0
 800c938:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c93c:	f7f8 fede 	bl	80056fc <HAL_GetTick>
 800c940:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f003 0308 	and.w	r3, r3, #8
 800c94c:	2b08      	cmp	r3, #8
 800c94e:	d10e      	bne.n	800c96e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c950:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c954:	9300      	str	r3, [sp, #0]
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	2200      	movs	r2, #0
 800c95a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 f82f 	bl	800c9c2 <UART_WaitOnFlagUntilTimeout>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	d001      	beq.n	800c96e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c96a:	2303      	movs	r3, #3
 800c96c:	e025      	b.n	800c9ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f003 0304 	and.w	r3, r3, #4
 800c978:	2b04      	cmp	r3, #4
 800c97a:	d10e      	bne.n	800c99a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c97c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c980:	9300      	str	r3, [sp, #0]
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2200      	movs	r2, #0
 800c986:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 f819 	bl	800c9c2 <UART_WaitOnFlagUntilTimeout>
 800c990:	4603      	mov	r3, r0
 800c992:	2b00      	cmp	r3, #0
 800c994:	d001      	beq.n	800c99a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c996:	2303      	movs	r3, #3
 800c998:	e00f      	b.n	800c9ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2220      	movs	r2, #32
 800c99e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2220      	movs	r2, #32
 800c9a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c9b8:	2300      	movs	r3, #0
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b084      	sub	sp, #16
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	60f8      	str	r0, [r7, #12]
 800c9ca:	60b9      	str	r1, [r7, #8]
 800c9cc:	603b      	str	r3, [r7, #0]
 800c9ce:	4613      	mov	r3, r2
 800c9d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9d2:	e062      	b.n	800ca9a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c9d4:	69bb      	ldr	r3, [r7, #24]
 800c9d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9da:	d05e      	beq.n	800ca9a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c9dc:	f7f8 fe8e 	bl	80056fc <HAL_GetTick>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	1ad3      	subs	r3, r2, r3
 800c9e6:	69ba      	ldr	r2, [r7, #24]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d302      	bcc.n	800c9f2 <UART_WaitOnFlagUntilTimeout+0x30>
 800c9ec:	69bb      	ldr	r3, [r7, #24]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d11d      	bne.n	800ca2e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	681a      	ldr	r2, [r3, #0]
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ca00:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	689a      	ldr	r2, [r3, #8]
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f022 0201 	bic.w	r2, r2, #1
 800ca10:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2220      	movs	r2, #32
 800ca16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2220      	movs	r2, #32
 800ca1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2200      	movs	r2, #0
 800ca26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ca2a:	2303      	movs	r3, #3
 800ca2c:	e045      	b.n	800caba <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f003 0304 	and.w	r3, r3, #4
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d02e      	beq.n	800ca9a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	69db      	ldr	r3, [r3, #28]
 800ca42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca4a:	d126      	bne.n	800ca9a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ca64:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	689a      	ldr	r2, [r3, #8]
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f022 0201 	bic.w	r2, r2, #1
 800ca74:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2220      	movs	r2, #32
 800ca7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2220      	movs	r2, #32
 800ca82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2220      	movs	r2, #32
 800ca8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2200      	movs	r2, #0
 800ca92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ca96:	2303      	movs	r3, #3
 800ca98:	e00f      	b.n	800caba <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	69da      	ldr	r2, [r3, #28]
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	4013      	ands	r3, r2
 800caa4:	68ba      	ldr	r2, [r7, #8]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	bf0c      	ite	eq
 800caaa:	2301      	moveq	r3, #1
 800caac:	2300      	movne	r3, #0
 800caae:	b2db      	uxtb	r3, r3
 800cab0:	461a      	mov	r2, r3
 800cab2:	79fb      	ldrb	r3, [r7, #7]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d08d      	beq.n	800c9d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cab8:	2300      	movs	r3, #0
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3710      	adds	r7, #16
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
	...

0800cac4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b085      	sub	sp, #20
 800cac8:	af00      	add	r7, sp, #0
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	60b9      	str	r1, [r7, #8]
 800cace:	4613      	mov	r3, r2
 800cad0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	68ba      	ldr	r2, [r7, #8]
 800cad6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	88fa      	ldrh	r2, [r7, #6]
 800cadc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	88fa      	ldrh	r2, [r7, #6]
 800cae4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2200      	movs	r2, #0
 800caec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	689b      	ldr	r3, [r3, #8]
 800caf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800caf6:	d10e      	bne.n	800cb16 <UART_Start_Receive_IT+0x52>
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	691b      	ldr	r3, [r3, #16]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d105      	bne.n	800cb0c <UART_Start_Receive_IT+0x48>
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cb06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cb0a:	e02d      	b.n	800cb68 <UART_Start_Receive_IT+0xa4>
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	22ff      	movs	r2, #255	; 0xff
 800cb10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cb14:	e028      	b.n	800cb68 <UART_Start_Receive_IT+0xa4>
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	689b      	ldr	r3, [r3, #8]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d10d      	bne.n	800cb3a <UART_Start_Receive_IT+0x76>
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	691b      	ldr	r3, [r3, #16]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d104      	bne.n	800cb30 <UART_Start_Receive_IT+0x6c>
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	22ff      	movs	r2, #255	; 0xff
 800cb2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cb2e:	e01b      	b.n	800cb68 <UART_Start_Receive_IT+0xa4>
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	227f      	movs	r2, #127	; 0x7f
 800cb34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cb38:	e016      	b.n	800cb68 <UART_Start_Receive_IT+0xa4>
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb42:	d10d      	bne.n	800cb60 <UART_Start_Receive_IT+0x9c>
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	691b      	ldr	r3, [r3, #16]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d104      	bne.n	800cb56 <UART_Start_Receive_IT+0x92>
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	227f      	movs	r2, #127	; 0x7f
 800cb50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cb54:	e008      	b.n	800cb68 <UART_Start_Receive_IT+0xa4>
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	223f      	movs	r2, #63	; 0x3f
 800cb5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cb5e:	e003      	b.n	800cb68 <UART_Start_Receive_IT+0xa4>
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2200      	movs	r2, #0
 800cb64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2222      	movs	r2, #34	; 0x22
 800cb74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	689a      	ldr	r2, [r3, #8]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f042 0201 	orr.w	r2, r2, #1
 800cb86:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb90:	d12a      	bne.n	800cbe8 <UART_Start_Receive_IT+0x124>
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb98:	88fa      	ldrh	r2, [r7, #6]
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d324      	bcc.n	800cbe8 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	689b      	ldr	r3, [r3, #8]
 800cba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cba6:	d107      	bne.n	800cbb8 <UART_Start_Receive_IT+0xf4>
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	691b      	ldr	r3, [r3, #16]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d103      	bne.n	800cbb8 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	4a1f      	ldr	r2, [pc, #124]	; (800cc30 <UART_Start_Receive_IT+0x16c>)
 800cbb4:	671a      	str	r2, [r3, #112]	; 0x70
 800cbb6:	e002      	b.n	800cbbe <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	4a1e      	ldr	r2, [pc, #120]	; (800cc34 <UART_Start_Receive_IT+0x170>)
 800cbbc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cbd4:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	689a      	ldr	r2, [r3, #8]
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800cbe4:	609a      	str	r2, [r3, #8]
 800cbe6:	e01b      	b.n	800cc20 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	689b      	ldr	r3, [r3, #8]
 800cbec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbf0:	d107      	bne.n	800cc02 <UART_Start_Receive_IT+0x13e>
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	691b      	ldr	r3, [r3, #16]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d103      	bne.n	800cc02 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	4a0e      	ldr	r2, [pc, #56]	; (800cc38 <UART_Start_Receive_IT+0x174>)
 800cbfe:	671a      	str	r2, [r3, #112]	; 0x70
 800cc00:	e002      	b.n	800cc08 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	4a0d      	ldr	r2, [pc, #52]	; (800cc3c <UART_Start_Receive_IT+0x178>)
 800cc06:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800cc1e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800cc20:	2300      	movs	r3, #0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3714      	adds	r7, #20
 800cc26:	46bd      	mov	sp, r7
 800cc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2c:	4770      	bx	lr
 800cc2e:	bf00      	nop
 800cc30:	0800d0b9 	.word	0x0800d0b9
 800cc34:	0800ceb5 	.word	0x0800ceb5
 800cc38:	0800cddd 	.word	0x0800cddd
 800cc3c:	0800cd05 	.word	0x0800cd05

0800cc40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b083      	sub	sp, #12
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cc56:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	689b      	ldr	r3, [r3, #8]
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	6812      	ldr	r2, [r2, #0]
 800cc62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cc66:	f023 0301 	bic.w	r3, r3, #1
 800cc6a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d107      	bne.n	800cc84 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f022 0210 	bic.w	r2, r2, #16
 800cc82:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2220      	movs	r2, #32
 800cc88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2200      	movs	r2, #0
 800cc96:	671a      	str	r2, [r3, #112]	; 0x70
}
 800cc98:	bf00      	nop
 800cc9a:	370c      	adds	r7, #12
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr

0800cca4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ccc2:	68f8      	ldr	r0, [r7, #12]
 800ccc4:	f7ff faae 	bl	800c224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccc8:	bf00      	nop
 800ccca:	3710      	adds	r7, #16
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cce6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2220      	movs	r2, #32
 800ccec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f7ff fa8a 	bl	800c210 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccfc:	bf00      	nop
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cd12:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd1a:	2b22      	cmp	r3, #34	; 0x22
 800cd1c:	d152      	bne.n	800cdc4 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd24:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cd26:	89bb      	ldrh	r3, [r7, #12]
 800cd28:	b2d9      	uxtb	r1, r3
 800cd2a:	89fb      	ldrh	r3, [r7, #14]
 800cd2c:	b2da      	uxtb	r2, r3
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd32:	400a      	ands	r2, r1
 800cd34:	b2d2      	uxtb	r2, r2
 800cd36:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd3c:	1c5a      	adds	r2, r3, #1
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd48:	b29b      	uxth	r3, r3
 800cd4a:	3b01      	subs	r3, #1
 800cd4c:	b29a      	uxth	r2, r3
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd5a:	b29b      	uxth	r3, r3
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d139      	bne.n	800cdd4 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	681a      	ldr	r2, [r3, #0]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cd6e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	689a      	ldr	r2, [r3, #8]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f022 0201 	bic.w	r2, r2, #1
 800cd7e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2220      	movs	r2, #32
 800cd84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd92:	2b01      	cmp	r3, #1
 800cd94:	d10f      	bne.n	800cdb6 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	681a      	ldr	r2, [r3, #0]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f022 0210 	bic.w	r2, r2, #16
 800cda4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cdac:	4619      	mov	r1, r3
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f7ff fa42 	bl	800c238 <HAL_UARTEx_RxEventCallback>
 800cdb4:	e002      	b.n	800cdbc <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f7f8 fbe4 	bl	8005584 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cdc2:	e007      	b.n	800cdd4 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	699a      	ldr	r2, [r3, #24]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f042 0208 	orr.w	r2, r2, #8
 800cdd2:	619a      	str	r2, [r3, #24]
}
 800cdd4:	bf00      	nop
 800cdd6:	3710      	adds	r7, #16
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cdea:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdf2:	2b22      	cmp	r3, #34	; 0x22
 800cdf4:	d152      	bne.n	800ce9c <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdfc:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce02:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800ce04:	89ba      	ldrh	r2, [r7, #12]
 800ce06:	89fb      	ldrh	r3, [r7, #14]
 800ce08:	4013      	ands	r3, r2
 800ce0a:	b29a      	uxth	r2, r3
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce14:	1c9a      	adds	r2, r3, #2
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	3b01      	subs	r3, #1
 800ce24:	b29a      	uxth	r2, r3
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d139      	bne.n	800ceac <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	681a      	ldr	r2, [r3, #0]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ce46:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	689a      	ldr	r2, [r3, #8]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f022 0201 	bic.w	r2, r2, #1
 800ce56:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2220      	movs	r2, #32
 800ce5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d10f      	bne.n	800ce8e <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	681a      	ldr	r2, [r3, #0]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f022 0210 	bic.w	r2, r2, #16
 800ce7c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ce84:	4619      	mov	r1, r3
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f7ff f9d6 	bl	800c238 <HAL_UARTEx_RxEventCallback>
 800ce8c:	e002      	b.n	800ce94 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f7f8 fb78 	bl	8005584 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ce9a:	e007      	b.n	800ceac <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	699a      	ldr	r2, [r3, #24]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f042 0208 	orr.w	r2, r2, #8
 800ceaa:	619a      	str	r2, [r3, #24]
}
 800ceac:	bf00      	nop
 800ceae:	3710      	adds	r7, #16
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b088      	sub	sp, #32
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cec2:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	69db      	ldr	r3, [r3, #28]
 800ceca:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cee2:	2b22      	cmp	r3, #34	; 0x22
 800cee4:	f040 80da 	bne.w	800d09c <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ceee:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cef0:	e0aa      	b.n	800d048 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef8:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cefa:	89bb      	ldrh	r3, [r7, #12]
 800cefc:	b2d9      	uxtb	r1, r3
 800cefe:	8b7b      	ldrh	r3, [r7, #26]
 800cf00:	b2da      	uxtb	r2, r3
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf06:	400a      	ands	r2, r1
 800cf08:	b2d2      	uxtb	r2, r2
 800cf0a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf10:	1c5a      	adds	r2, r3, #1
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	3b01      	subs	r3, #1
 800cf20:	b29a      	uxth	r2, r3
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	69db      	ldr	r3, [r3, #28]
 800cf2e:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cf30:	69fb      	ldr	r3, [r7, #28]
 800cf32:	f003 0307 	and.w	r3, r3, #7
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d04d      	beq.n	800cfd6 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	f003 0301 	and.w	r3, r3, #1
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d010      	beq.n	800cf66 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d00b      	beq.n	800cf66 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	2201      	movs	r2, #1
 800cf54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf5c:	f043 0201 	orr.w	r2, r3, #1
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf66:	69fb      	ldr	r3, [r7, #28]
 800cf68:	f003 0302 	and.w	r3, r3, #2
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d010      	beq.n	800cf92 <UART_RxISR_8BIT_FIFOEN+0xde>
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	f003 0301 	and.w	r3, r3, #1
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d00b      	beq.n	800cf92 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	2202      	movs	r2, #2
 800cf80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf88:	f043 0204 	orr.w	r2, r3, #4
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	f003 0304 	and.w	r3, r3, #4
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d010      	beq.n	800cfbe <UART_RxISR_8BIT_FIFOEN+0x10a>
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	f003 0301 	and.w	r3, r3, #1
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d00b      	beq.n	800cfbe <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	2204      	movs	r2, #4
 800cfac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfb4:	f043 0202 	orr.w	r2, r3, #2
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d006      	beq.n	800cfd6 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f7ff f92b 	bl	800c224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d132      	bne.n	800d048 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cff0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	6812      	ldr	r2, [r2, #0]
 800cffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d000:	f023 0301 	bic.w	r3, r3, #1
 800d004:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2220      	movs	r2, #32
 800d00a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2200      	movs	r2, #0
 800d012:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d10f      	bne.n	800d03c <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f022 0210 	bic.w	r2, r2, #16
 800d02a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d032:	4619      	mov	r1, r3
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f7ff f8ff 	bl	800c238 <HAL_UARTEx_RxEventCallback>
 800d03a:	e002      	b.n	800d042 <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f7f8 faa1 	bl	8005584 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2200      	movs	r2, #0
 800d046:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d048:	89fb      	ldrh	r3, [r7, #14]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d005      	beq.n	800d05a <UART_RxISR_8BIT_FIFOEN+0x1a6>
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	f003 0320 	and.w	r3, r3, #32
 800d054:	2b00      	cmp	r3, #0
 800d056:	f47f af4c 	bne.w	800cef2 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d060:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d062:	897b      	ldrh	r3, [r7, #10]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d021      	beq.n	800d0ac <UART_RxISR_8BIT_FIFOEN+0x1f8>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d06e:	897a      	ldrh	r2, [r7, #10]
 800d070:	429a      	cmp	r2, r3
 800d072:	d21b      	bcs.n	800d0ac <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	689a      	ldr	r2, [r3, #8]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d082:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	4a0b      	ldr	r2, [pc, #44]	; (800d0b4 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800d088:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	681a      	ldr	r2, [r3, #0]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f042 0220 	orr.w	r2, r2, #32
 800d098:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d09a:	e007      	b.n	800d0ac <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	699a      	ldr	r2, [r3, #24]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f042 0208 	orr.w	r2, r2, #8
 800d0aa:	619a      	str	r2, [r3, #24]
}
 800d0ac:	bf00      	nop
 800d0ae:	3720      	adds	r7, #32
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}
 800d0b4:	0800cd05 	.word	0x0800cd05

0800d0b8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b08a      	sub	sp, #40	; 0x28
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d0c6:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	69db      	ldr	r3, [r3, #28]
 800d0ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0e6:	2b22      	cmp	r3, #34	; 0x22
 800d0e8:	f040 80da 	bne.w	800d2a0 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d0f2:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d0f4:	e0aa      	b.n	800d24c <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fc:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d102:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800d104:	8aba      	ldrh	r2, [r7, #20]
 800d106:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d108:	4013      	ands	r3, r2
 800d10a:	b29a      	uxth	r2, r3
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d114:	1c9a      	adds	r2, r3, #2
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d120:	b29b      	uxth	r3, r3
 800d122:	3b01      	subs	r3, #1
 800d124:	b29a      	uxth	r2, r3
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	69db      	ldr	r3, [r3, #28]
 800d132:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d136:	f003 0307 	and.w	r3, r3, #7
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d04d      	beq.n	800d1da <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d140:	f003 0301 	and.w	r3, r3, #1
 800d144:	2b00      	cmp	r3, #0
 800d146:	d010      	beq.n	800d16a <UART_RxISR_16BIT_FIFOEN+0xb2>
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d00b      	beq.n	800d16a <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2201      	movs	r2, #1
 800d158:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d160:	f043 0201 	orr.w	r2, r3, #1
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16c:	f003 0302 	and.w	r3, r3, #2
 800d170:	2b00      	cmp	r3, #0
 800d172:	d010      	beq.n	800d196 <UART_RxISR_16BIT_FIFOEN+0xde>
 800d174:	69bb      	ldr	r3, [r7, #24]
 800d176:	f003 0301 	and.w	r3, r3, #1
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d00b      	beq.n	800d196 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	2202      	movs	r2, #2
 800d184:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d18c:	f043 0204 	orr.w	r2, r3, #4
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d198:	f003 0304 	and.w	r3, r3, #4
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d010      	beq.n	800d1c2 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800d1a0:	69bb      	ldr	r3, [r7, #24]
 800d1a2:	f003 0301 	and.w	r3, r3, #1
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d00b      	beq.n	800d1c2 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2204      	movs	r2, #4
 800d1b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1b8:	f043 0202 	orr.w	r2, r3, #2
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d006      	beq.n	800d1da <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f7ff f829 	bl	800c224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d132      	bne.n	800d24c <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	681a      	ldr	r2, [r3, #0]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d1f4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	6812      	ldr	r2, [r2, #0]
 800d200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d204:	f023 0301 	bic.w	r3, r3, #1
 800d208:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2220      	movs	r2, #32
 800d20e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2200      	movs	r2, #0
 800d216:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	d10f      	bne.n	800d240 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f022 0210 	bic.w	r2, r2, #16
 800d22e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d236:	4619      	mov	r1, r3
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f7fe fffd 	bl	800c238 <HAL_UARTEx_RxEventCallback>
 800d23e:	e002      	b.n	800d246 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f7f8 f99f 	bl	8005584 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2200      	movs	r2, #0
 800d24a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d24c:	8afb      	ldrh	r3, [r7, #22]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d005      	beq.n	800d25e <UART_RxISR_16BIT_FIFOEN+0x1a6>
 800d252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d254:	f003 0320 	and.w	r3, r3, #32
 800d258:	2b00      	cmp	r3, #0
 800d25a:	f47f af4c 	bne.w	800d0f6 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d264:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d266:	89fb      	ldrh	r3, [r7, #14]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d021      	beq.n	800d2b0 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d272:	89fa      	ldrh	r2, [r7, #14]
 800d274:	429a      	cmp	r2, r3
 800d276:	d21b      	bcs.n	800d2b0 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	689a      	ldr	r2, [r3, #8]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d286:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	4a0b      	ldr	r2, [pc, #44]	; (800d2b8 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800d28c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	681a      	ldr	r2, [r3, #0]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f042 0220 	orr.w	r2, r2, #32
 800d29c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d29e:	e007      	b.n	800d2b0 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	699a      	ldr	r2, [r3, #24]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f042 0208 	orr.w	r2, r2, #8
 800d2ae:	619a      	str	r2, [r3, #24]
}
 800d2b0:	bf00      	nop
 800d2b2:	3728      	adds	r7, #40	; 0x28
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	0800cddd 	.word	0x0800cddd

0800d2bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b083      	sub	sp, #12
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d2c4:	bf00      	nop
 800d2c6:	370c      	adds	r7, #12
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr

0800d2d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d2d8:	bf00      	nop
 800d2da:	370c      	adds	r7, #12
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b083      	sub	sp, #12
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d2ec:	bf00      	nop
 800d2ee:	370c      	adds	r7, #12
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f6:	4770      	bx	lr

0800d2f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b085      	sub	sp, #20
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d306:	2b01      	cmp	r3, #1
 800d308:	d101      	bne.n	800d30e <HAL_UARTEx_DisableFifoMode+0x16>
 800d30a:	2302      	movs	r3, #2
 800d30c:	e027      	b.n	800d35e <HAL_UARTEx_DisableFifoMode+0x66>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2201      	movs	r2, #1
 800d312:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2224      	movs	r2, #36	; 0x24
 800d31a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f022 0201 	bic.w	r2, r2, #1
 800d334:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d33c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2200      	movs	r2, #0
 800d342:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	68fa      	ldr	r2, [r7, #12]
 800d34a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2220      	movs	r2, #32
 800d350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d35c:	2300      	movs	r3, #0
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3714      	adds	r7, #20
 800d362:	46bd      	mov	sp, r7
 800d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d368:	4770      	bx	lr

0800d36a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d36a:	b580      	push	{r7, lr}
 800d36c:	b084      	sub	sp, #16
 800d36e:	af00      	add	r7, sp, #0
 800d370:	6078      	str	r0, [r7, #4]
 800d372:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d37a:	2b01      	cmp	r3, #1
 800d37c:	d101      	bne.n	800d382 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d37e:	2302      	movs	r3, #2
 800d380:	e02d      	b.n	800d3de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2201      	movs	r2, #1
 800d386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2224      	movs	r2, #36	; 0x24
 800d38e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	681a      	ldr	r2, [r3, #0]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f022 0201 	bic.w	r2, r2, #1
 800d3a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	683a      	ldr	r2, [r7, #0]
 800d3ba:	430a      	orrs	r2, r1
 800d3bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f000 f850 	bl	800d464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	68fa      	ldr	r2, [r7, #12]
 800d3ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2220      	movs	r2, #32
 800d3d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d3dc:	2300      	movs	r3, #0
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b084      	sub	sp, #16
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	6078      	str	r0, [r7, #4]
 800d3ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d101      	bne.n	800d3fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d3fa:	2302      	movs	r3, #2
 800d3fc:	e02d      	b.n	800d45a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2201      	movs	r2, #1
 800d402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2224      	movs	r2, #36	; 0x24
 800d40a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	681a      	ldr	r2, [r3, #0]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f022 0201 	bic.w	r2, r2, #1
 800d424:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	689b      	ldr	r3, [r3, #8]
 800d42c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	683a      	ldr	r2, [r7, #0]
 800d436:	430a      	orrs	r2, r1
 800d438:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f000 f812 	bl	800d464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	68fa      	ldr	r2, [r7, #12]
 800d446:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2220      	movs	r2, #32
 800d44c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2200      	movs	r2, #0
 800d454:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d458:	2300      	movs	r3, #0
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3710      	adds	r7, #16
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
	...

0800d464 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d464:	b480      	push	{r7}
 800d466:	b085      	sub	sp, #20
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d470:	2b00      	cmp	r3, #0
 800d472:	d108      	bne.n	800d486 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2201      	movs	r2, #1
 800d478:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2201      	movs	r2, #1
 800d480:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d484:	e031      	b.n	800d4ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d486:	2308      	movs	r3, #8
 800d488:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d48a:	2308      	movs	r3, #8
 800d48c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	689b      	ldr	r3, [r3, #8]
 800d494:	0e5b      	lsrs	r3, r3, #25
 800d496:	b2db      	uxtb	r3, r3
 800d498:	f003 0307 	and.w	r3, r3, #7
 800d49c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	689b      	ldr	r3, [r3, #8]
 800d4a4:	0f5b      	lsrs	r3, r3, #29
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	f003 0307 	and.w	r3, r3, #7
 800d4ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d4ae:	7bbb      	ldrb	r3, [r7, #14]
 800d4b0:	7b3a      	ldrb	r2, [r7, #12]
 800d4b2:	4911      	ldr	r1, [pc, #68]	; (800d4f8 <UARTEx_SetNbDataToProcess+0x94>)
 800d4b4:	5c8a      	ldrb	r2, [r1, r2]
 800d4b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d4ba:	7b3a      	ldrb	r2, [r7, #12]
 800d4bc:	490f      	ldr	r1, [pc, #60]	; (800d4fc <UARTEx_SetNbDataToProcess+0x98>)
 800d4be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d4c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800d4c4:	b29a      	uxth	r2, r3
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d4cc:	7bfb      	ldrb	r3, [r7, #15]
 800d4ce:	7b7a      	ldrb	r2, [r7, #13]
 800d4d0:	4909      	ldr	r1, [pc, #36]	; (800d4f8 <UARTEx_SetNbDataToProcess+0x94>)
 800d4d2:	5c8a      	ldrb	r2, [r1, r2]
 800d4d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d4d8:	7b7a      	ldrb	r2, [r7, #13]
 800d4da:	4908      	ldr	r1, [pc, #32]	; (800d4fc <UARTEx_SetNbDataToProcess+0x98>)
 800d4dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d4de:	fb93 f3f2 	sdiv	r3, r3, r2
 800d4e2:	b29a      	uxth	r2, r3
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d4ea:	bf00      	nop
 800d4ec:	3714      	adds	r7, #20
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f4:	4770      	bx	lr
 800d4f6:	bf00      	nop
 800d4f8:	08012e64 	.word	0x08012e64
 800d4fc:	08012e6c 	.word	0x08012e6c

0800d500 <atof>:
 800d500:	2100      	movs	r1, #0
 800d502:	f001 bb5f 	b.w	800ebc4 <strtod>

0800d506 <atoi>:
 800d506:	220a      	movs	r2, #10
 800d508:	2100      	movs	r1, #0
 800d50a:	f001 bbe9 	b.w	800ece0 <strtol>
	...

0800d510 <__errno>:
 800d510:	4b01      	ldr	r3, [pc, #4]	; (800d518 <__errno+0x8>)
 800d512:	6818      	ldr	r0, [r3, #0]
 800d514:	4770      	bx	lr
 800d516:	bf00      	nop
 800d518:	2000002c 	.word	0x2000002c

0800d51c <__libc_init_array>:
 800d51c:	b570      	push	{r4, r5, r6, lr}
 800d51e:	4d0d      	ldr	r5, [pc, #52]	; (800d554 <__libc_init_array+0x38>)
 800d520:	4c0d      	ldr	r4, [pc, #52]	; (800d558 <__libc_init_array+0x3c>)
 800d522:	1b64      	subs	r4, r4, r5
 800d524:	10a4      	asrs	r4, r4, #2
 800d526:	2600      	movs	r6, #0
 800d528:	42a6      	cmp	r6, r4
 800d52a:	d109      	bne.n	800d540 <__libc_init_array+0x24>
 800d52c:	4d0b      	ldr	r5, [pc, #44]	; (800d55c <__libc_init_array+0x40>)
 800d52e:	4c0c      	ldr	r4, [pc, #48]	; (800d560 <__libc_init_array+0x44>)
 800d530:	f004 fca8 	bl	8011e84 <_init>
 800d534:	1b64      	subs	r4, r4, r5
 800d536:	10a4      	asrs	r4, r4, #2
 800d538:	2600      	movs	r6, #0
 800d53a:	42a6      	cmp	r6, r4
 800d53c:	d105      	bne.n	800d54a <__libc_init_array+0x2e>
 800d53e:	bd70      	pop	{r4, r5, r6, pc}
 800d540:	f855 3b04 	ldr.w	r3, [r5], #4
 800d544:	4798      	blx	r3
 800d546:	3601      	adds	r6, #1
 800d548:	e7ee      	b.n	800d528 <__libc_init_array+0xc>
 800d54a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d54e:	4798      	blx	r3
 800d550:	3601      	adds	r6, #1
 800d552:	e7f2      	b.n	800d53a <__libc_init_array+0x1e>
 800d554:	08013360 	.word	0x08013360
 800d558:	08013360 	.word	0x08013360
 800d55c:	08013360 	.word	0x08013360
 800d560:	08013364 	.word	0x08013364

0800d564 <memcpy>:
 800d564:	440a      	add	r2, r1
 800d566:	4291      	cmp	r1, r2
 800d568:	f100 33ff 	add.w	r3, r0, #4294967295
 800d56c:	d100      	bne.n	800d570 <memcpy+0xc>
 800d56e:	4770      	bx	lr
 800d570:	b510      	push	{r4, lr}
 800d572:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d57a:	4291      	cmp	r1, r2
 800d57c:	d1f9      	bne.n	800d572 <memcpy+0xe>
 800d57e:	bd10      	pop	{r4, pc}

0800d580 <memset>:
 800d580:	4402      	add	r2, r0
 800d582:	4603      	mov	r3, r0
 800d584:	4293      	cmp	r3, r2
 800d586:	d100      	bne.n	800d58a <memset+0xa>
 800d588:	4770      	bx	lr
 800d58a:	f803 1b01 	strb.w	r1, [r3], #1
 800d58e:	e7f9      	b.n	800d584 <memset+0x4>

0800d590 <__cvt>:
 800d590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d594:	ec55 4b10 	vmov	r4, r5, d0
 800d598:	2d00      	cmp	r5, #0
 800d59a:	460e      	mov	r6, r1
 800d59c:	4619      	mov	r1, r3
 800d59e:	462b      	mov	r3, r5
 800d5a0:	bfbb      	ittet	lt
 800d5a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d5a6:	461d      	movlt	r5, r3
 800d5a8:	2300      	movge	r3, #0
 800d5aa:	232d      	movlt	r3, #45	; 0x2d
 800d5ac:	700b      	strb	r3, [r1, #0]
 800d5ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d5b4:	4691      	mov	r9, r2
 800d5b6:	f023 0820 	bic.w	r8, r3, #32
 800d5ba:	bfbc      	itt	lt
 800d5bc:	4622      	movlt	r2, r4
 800d5be:	4614      	movlt	r4, r2
 800d5c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d5c4:	d005      	beq.n	800d5d2 <__cvt+0x42>
 800d5c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d5ca:	d100      	bne.n	800d5ce <__cvt+0x3e>
 800d5cc:	3601      	adds	r6, #1
 800d5ce:	2102      	movs	r1, #2
 800d5d0:	e000      	b.n	800d5d4 <__cvt+0x44>
 800d5d2:	2103      	movs	r1, #3
 800d5d4:	ab03      	add	r3, sp, #12
 800d5d6:	9301      	str	r3, [sp, #4]
 800d5d8:	ab02      	add	r3, sp, #8
 800d5da:	9300      	str	r3, [sp, #0]
 800d5dc:	ec45 4b10 	vmov	d0, r4, r5
 800d5e0:	4653      	mov	r3, sl
 800d5e2:	4632      	mov	r2, r6
 800d5e4:	f001 fcd4 	bl	800ef90 <_dtoa_r>
 800d5e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d5ec:	4607      	mov	r7, r0
 800d5ee:	d102      	bne.n	800d5f6 <__cvt+0x66>
 800d5f0:	f019 0f01 	tst.w	r9, #1
 800d5f4:	d022      	beq.n	800d63c <__cvt+0xac>
 800d5f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d5fa:	eb07 0906 	add.w	r9, r7, r6
 800d5fe:	d110      	bne.n	800d622 <__cvt+0x92>
 800d600:	783b      	ldrb	r3, [r7, #0]
 800d602:	2b30      	cmp	r3, #48	; 0x30
 800d604:	d10a      	bne.n	800d61c <__cvt+0x8c>
 800d606:	2200      	movs	r2, #0
 800d608:	2300      	movs	r3, #0
 800d60a:	4620      	mov	r0, r4
 800d60c:	4629      	mov	r1, r5
 800d60e:	f7f3 fa83 	bl	8000b18 <__aeabi_dcmpeq>
 800d612:	b918      	cbnz	r0, 800d61c <__cvt+0x8c>
 800d614:	f1c6 0601 	rsb	r6, r6, #1
 800d618:	f8ca 6000 	str.w	r6, [sl]
 800d61c:	f8da 3000 	ldr.w	r3, [sl]
 800d620:	4499      	add	r9, r3
 800d622:	2200      	movs	r2, #0
 800d624:	2300      	movs	r3, #0
 800d626:	4620      	mov	r0, r4
 800d628:	4629      	mov	r1, r5
 800d62a:	f7f3 fa75 	bl	8000b18 <__aeabi_dcmpeq>
 800d62e:	b108      	cbz	r0, 800d634 <__cvt+0xa4>
 800d630:	f8cd 900c 	str.w	r9, [sp, #12]
 800d634:	2230      	movs	r2, #48	; 0x30
 800d636:	9b03      	ldr	r3, [sp, #12]
 800d638:	454b      	cmp	r3, r9
 800d63a:	d307      	bcc.n	800d64c <__cvt+0xbc>
 800d63c:	9b03      	ldr	r3, [sp, #12]
 800d63e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d640:	1bdb      	subs	r3, r3, r7
 800d642:	4638      	mov	r0, r7
 800d644:	6013      	str	r3, [r2, #0]
 800d646:	b004      	add	sp, #16
 800d648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d64c:	1c59      	adds	r1, r3, #1
 800d64e:	9103      	str	r1, [sp, #12]
 800d650:	701a      	strb	r2, [r3, #0]
 800d652:	e7f0      	b.n	800d636 <__cvt+0xa6>

0800d654 <__exponent>:
 800d654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d656:	4603      	mov	r3, r0
 800d658:	2900      	cmp	r1, #0
 800d65a:	bfb8      	it	lt
 800d65c:	4249      	neglt	r1, r1
 800d65e:	f803 2b02 	strb.w	r2, [r3], #2
 800d662:	bfb4      	ite	lt
 800d664:	222d      	movlt	r2, #45	; 0x2d
 800d666:	222b      	movge	r2, #43	; 0x2b
 800d668:	2909      	cmp	r1, #9
 800d66a:	7042      	strb	r2, [r0, #1]
 800d66c:	dd2a      	ble.n	800d6c4 <__exponent+0x70>
 800d66e:	f10d 0407 	add.w	r4, sp, #7
 800d672:	46a4      	mov	ip, r4
 800d674:	270a      	movs	r7, #10
 800d676:	46a6      	mov	lr, r4
 800d678:	460a      	mov	r2, r1
 800d67a:	fb91 f6f7 	sdiv	r6, r1, r7
 800d67e:	fb07 1516 	mls	r5, r7, r6, r1
 800d682:	3530      	adds	r5, #48	; 0x30
 800d684:	2a63      	cmp	r2, #99	; 0x63
 800d686:	f104 34ff 	add.w	r4, r4, #4294967295
 800d68a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d68e:	4631      	mov	r1, r6
 800d690:	dcf1      	bgt.n	800d676 <__exponent+0x22>
 800d692:	3130      	adds	r1, #48	; 0x30
 800d694:	f1ae 0502 	sub.w	r5, lr, #2
 800d698:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d69c:	1c44      	adds	r4, r0, #1
 800d69e:	4629      	mov	r1, r5
 800d6a0:	4561      	cmp	r1, ip
 800d6a2:	d30a      	bcc.n	800d6ba <__exponent+0x66>
 800d6a4:	f10d 0209 	add.w	r2, sp, #9
 800d6a8:	eba2 020e 	sub.w	r2, r2, lr
 800d6ac:	4565      	cmp	r5, ip
 800d6ae:	bf88      	it	hi
 800d6b0:	2200      	movhi	r2, #0
 800d6b2:	4413      	add	r3, r2
 800d6b4:	1a18      	subs	r0, r3, r0
 800d6b6:	b003      	add	sp, #12
 800d6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d6be:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d6c2:	e7ed      	b.n	800d6a0 <__exponent+0x4c>
 800d6c4:	2330      	movs	r3, #48	; 0x30
 800d6c6:	3130      	adds	r1, #48	; 0x30
 800d6c8:	7083      	strb	r3, [r0, #2]
 800d6ca:	70c1      	strb	r1, [r0, #3]
 800d6cc:	1d03      	adds	r3, r0, #4
 800d6ce:	e7f1      	b.n	800d6b4 <__exponent+0x60>

0800d6d0 <_printf_float>:
 800d6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d4:	ed2d 8b02 	vpush	{d8}
 800d6d8:	b08d      	sub	sp, #52	; 0x34
 800d6da:	460c      	mov	r4, r1
 800d6dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d6e0:	4616      	mov	r6, r2
 800d6e2:	461f      	mov	r7, r3
 800d6e4:	4605      	mov	r5, r0
 800d6e6:	f002 ff67 	bl	80105b8 <_localeconv_r>
 800d6ea:	f8d0 a000 	ldr.w	sl, [r0]
 800d6ee:	4650      	mov	r0, sl
 800d6f0:	f7f2 fd96 	bl	8000220 <strlen>
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	930a      	str	r3, [sp, #40]	; 0x28
 800d6f8:	6823      	ldr	r3, [r4, #0]
 800d6fa:	9305      	str	r3, [sp, #20]
 800d6fc:	f8d8 3000 	ldr.w	r3, [r8]
 800d700:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d704:	3307      	adds	r3, #7
 800d706:	f023 0307 	bic.w	r3, r3, #7
 800d70a:	f103 0208 	add.w	r2, r3, #8
 800d70e:	f8c8 2000 	str.w	r2, [r8]
 800d712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d716:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d71a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d71e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d722:	9307      	str	r3, [sp, #28]
 800d724:	f8cd 8018 	str.w	r8, [sp, #24]
 800d728:	ee08 0a10 	vmov	s16, r0
 800d72c:	4b9f      	ldr	r3, [pc, #636]	; (800d9ac <_printf_float+0x2dc>)
 800d72e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d732:	f04f 32ff 	mov.w	r2, #4294967295
 800d736:	f7f3 fa21 	bl	8000b7c <__aeabi_dcmpun>
 800d73a:	bb88      	cbnz	r0, 800d7a0 <_printf_float+0xd0>
 800d73c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d740:	4b9a      	ldr	r3, [pc, #616]	; (800d9ac <_printf_float+0x2dc>)
 800d742:	f04f 32ff 	mov.w	r2, #4294967295
 800d746:	f7f3 f9fb 	bl	8000b40 <__aeabi_dcmple>
 800d74a:	bb48      	cbnz	r0, 800d7a0 <_printf_float+0xd0>
 800d74c:	2200      	movs	r2, #0
 800d74e:	2300      	movs	r3, #0
 800d750:	4640      	mov	r0, r8
 800d752:	4649      	mov	r1, r9
 800d754:	f7f3 f9ea 	bl	8000b2c <__aeabi_dcmplt>
 800d758:	b110      	cbz	r0, 800d760 <_printf_float+0x90>
 800d75a:	232d      	movs	r3, #45	; 0x2d
 800d75c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d760:	4b93      	ldr	r3, [pc, #588]	; (800d9b0 <_printf_float+0x2e0>)
 800d762:	4894      	ldr	r0, [pc, #592]	; (800d9b4 <_printf_float+0x2e4>)
 800d764:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d768:	bf94      	ite	ls
 800d76a:	4698      	movls	r8, r3
 800d76c:	4680      	movhi	r8, r0
 800d76e:	2303      	movs	r3, #3
 800d770:	6123      	str	r3, [r4, #16]
 800d772:	9b05      	ldr	r3, [sp, #20]
 800d774:	f023 0204 	bic.w	r2, r3, #4
 800d778:	6022      	str	r2, [r4, #0]
 800d77a:	f04f 0900 	mov.w	r9, #0
 800d77e:	9700      	str	r7, [sp, #0]
 800d780:	4633      	mov	r3, r6
 800d782:	aa0b      	add	r2, sp, #44	; 0x2c
 800d784:	4621      	mov	r1, r4
 800d786:	4628      	mov	r0, r5
 800d788:	f000 f9d8 	bl	800db3c <_printf_common>
 800d78c:	3001      	adds	r0, #1
 800d78e:	f040 8090 	bne.w	800d8b2 <_printf_float+0x1e2>
 800d792:	f04f 30ff 	mov.w	r0, #4294967295
 800d796:	b00d      	add	sp, #52	; 0x34
 800d798:	ecbd 8b02 	vpop	{d8}
 800d79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7a0:	4642      	mov	r2, r8
 800d7a2:	464b      	mov	r3, r9
 800d7a4:	4640      	mov	r0, r8
 800d7a6:	4649      	mov	r1, r9
 800d7a8:	f7f3 f9e8 	bl	8000b7c <__aeabi_dcmpun>
 800d7ac:	b140      	cbz	r0, 800d7c0 <_printf_float+0xf0>
 800d7ae:	464b      	mov	r3, r9
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	bfbc      	itt	lt
 800d7b4:	232d      	movlt	r3, #45	; 0x2d
 800d7b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d7ba:	487f      	ldr	r0, [pc, #508]	; (800d9b8 <_printf_float+0x2e8>)
 800d7bc:	4b7f      	ldr	r3, [pc, #508]	; (800d9bc <_printf_float+0x2ec>)
 800d7be:	e7d1      	b.n	800d764 <_printf_float+0x94>
 800d7c0:	6863      	ldr	r3, [r4, #4]
 800d7c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d7c6:	9206      	str	r2, [sp, #24]
 800d7c8:	1c5a      	adds	r2, r3, #1
 800d7ca:	d13f      	bne.n	800d84c <_printf_float+0x17c>
 800d7cc:	2306      	movs	r3, #6
 800d7ce:	6063      	str	r3, [r4, #4]
 800d7d0:	9b05      	ldr	r3, [sp, #20]
 800d7d2:	6861      	ldr	r1, [r4, #4]
 800d7d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d7d8:	2300      	movs	r3, #0
 800d7da:	9303      	str	r3, [sp, #12]
 800d7dc:	ab0a      	add	r3, sp, #40	; 0x28
 800d7de:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d7e2:	ab09      	add	r3, sp, #36	; 0x24
 800d7e4:	ec49 8b10 	vmov	d0, r8, r9
 800d7e8:	9300      	str	r3, [sp, #0]
 800d7ea:	6022      	str	r2, [r4, #0]
 800d7ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d7f0:	4628      	mov	r0, r5
 800d7f2:	f7ff fecd 	bl	800d590 <__cvt>
 800d7f6:	9b06      	ldr	r3, [sp, #24]
 800d7f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d7fa:	2b47      	cmp	r3, #71	; 0x47
 800d7fc:	4680      	mov	r8, r0
 800d7fe:	d108      	bne.n	800d812 <_printf_float+0x142>
 800d800:	1cc8      	adds	r0, r1, #3
 800d802:	db02      	blt.n	800d80a <_printf_float+0x13a>
 800d804:	6863      	ldr	r3, [r4, #4]
 800d806:	4299      	cmp	r1, r3
 800d808:	dd41      	ble.n	800d88e <_printf_float+0x1be>
 800d80a:	f1ab 0b02 	sub.w	fp, fp, #2
 800d80e:	fa5f fb8b 	uxtb.w	fp, fp
 800d812:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d816:	d820      	bhi.n	800d85a <_printf_float+0x18a>
 800d818:	3901      	subs	r1, #1
 800d81a:	465a      	mov	r2, fp
 800d81c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d820:	9109      	str	r1, [sp, #36]	; 0x24
 800d822:	f7ff ff17 	bl	800d654 <__exponent>
 800d826:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d828:	1813      	adds	r3, r2, r0
 800d82a:	2a01      	cmp	r2, #1
 800d82c:	4681      	mov	r9, r0
 800d82e:	6123      	str	r3, [r4, #16]
 800d830:	dc02      	bgt.n	800d838 <_printf_float+0x168>
 800d832:	6822      	ldr	r2, [r4, #0]
 800d834:	07d2      	lsls	r2, r2, #31
 800d836:	d501      	bpl.n	800d83c <_printf_float+0x16c>
 800d838:	3301      	adds	r3, #1
 800d83a:	6123      	str	r3, [r4, #16]
 800d83c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d840:	2b00      	cmp	r3, #0
 800d842:	d09c      	beq.n	800d77e <_printf_float+0xae>
 800d844:	232d      	movs	r3, #45	; 0x2d
 800d846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d84a:	e798      	b.n	800d77e <_printf_float+0xae>
 800d84c:	9a06      	ldr	r2, [sp, #24]
 800d84e:	2a47      	cmp	r2, #71	; 0x47
 800d850:	d1be      	bne.n	800d7d0 <_printf_float+0x100>
 800d852:	2b00      	cmp	r3, #0
 800d854:	d1bc      	bne.n	800d7d0 <_printf_float+0x100>
 800d856:	2301      	movs	r3, #1
 800d858:	e7b9      	b.n	800d7ce <_printf_float+0xfe>
 800d85a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d85e:	d118      	bne.n	800d892 <_printf_float+0x1c2>
 800d860:	2900      	cmp	r1, #0
 800d862:	6863      	ldr	r3, [r4, #4]
 800d864:	dd0b      	ble.n	800d87e <_printf_float+0x1ae>
 800d866:	6121      	str	r1, [r4, #16]
 800d868:	b913      	cbnz	r3, 800d870 <_printf_float+0x1a0>
 800d86a:	6822      	ldr	r2, [r4, #0]
 800d86c:	07d0      	lsls	r0, r2, #31
 800d86e:	d502      	bpl.n	800d876 <_printf_float+0x1a6>
 800d870:	3301      	adds	r3, #1
 800d872:	440b      	add	r3, r1
 800d874:	6123      	str	r3, [r4, #16]
 800d876:	65a1      	str	r1, [r4, #88]	; 0x58
 800d878:	f04f 0900 	mov.w	r9, #0
 800d87c:	e7de      	b.n	800d83c <_printf_float+0x16c>
 800d87e:	b913      	cbnz	r3, 800d886 <_printf_float+0x1b6>
 800d880:	6822      	ldr	r2, [r4, #0]
 800d882:	07d2      	lsls	r2, r2, #31
 800d884:	d501      	bpl.n	800d88a <_printf_float+0x1ba>
 800d886:	3302      	adds	r3, #2
 800d888:	e7f4      	b.n	800d874 <_printf_float+0x1a4>
 800d88a:	2301      	movs	r3, #1
 800d88c:	e7f2      	b.n	800d874 <_printf_float+0x1a4>
 800d88e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d894:	4299      	cmp	r1, r3
 800d896:	db05      	blt.n	800d8a4 <_printf_float+0x1d4>
 800d898:	6823      	ldr	r3, [r4, #0]
 800d89a:	6121      	str	r1, [r4, #16]
 800d89c:	07d8      	lsls	r0, r3, #31
 800d89e:	d5ea      	bpl.n	800d876 <_printf_float+0x1a6>
 800d8a0:	1c4b      	adds	r3, r1, #1
 800d8a2:	e7e7      	b.n	800d874 <_printf_float+0x1a4>
 800d8a4:	2900      	cmp	r1, #0
 800d8a6:	bfd4      	ite	le
 800d8a8:	f1c1 0202 	rsble	r2, r1, #2
 800d8ac:	2201      	movgt	r2, #1
 800d8ae:	4413      	add	r3, r2
 800d8b0:	e7e0      	b.n	800d874 <_printf_float+0x1a4>
 800d8b2:	6823      	ldr	r3, [r4, #0]
 800d8b4:	055a      	lsls	r2, r3, #21
 800d8b6:	d407      	bmi.n	800d8c8 <_printf_float+0x1f8>
 800d8b8:	6923      	ldr	r3, [r4, #16]
 800d8ba:	4642      	mov	r2, r8
 800d8bc:	4631      	mov	r1, r6
 800d8be:	4628      	mov	r0, r5
 800d8c0:	47b8      	blx	r7
 800d8c2:	3001      	adds	r0, #1
 800d8c4:	d12c      	bne.n	800d920 <_printf_float+0x250>
 800d8c6:	e764      	b.n	800d792 <_printf_float+0xc2>
 800d8c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d8cc:	f240 80e0 	bls.w	800da90 <_printf_float+0x3c0>
 800d8d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	f7f3 f91e 	bl	8000b18 <__aeabi_dcmpeq>
 800d8dc:	2800      	cmp	r0, #0
 800d8de:	d034      	beq.n	800d94a <_printf_float+0x27a>
 800d8e0:	4a37      	ldr	r2, [pc, #220]	; (800d9c0 <_printf_float+0x2f0>)
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	4631      	mov	r1, r6
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	47b8      	blx	r7
 800d8ea:	3001      	adds	r0, #1
 800d8ec:	f43f af51 	beq.w	800d792 <_printf_float+0xc2>
 800d8f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	db02      	blt.n	800d8fe <_printf_float+0x22e>
 800d8f8:	6823      	ldr	r3, [r4, #0]
 800d8fa:	07d8      	lsls	r0, r3, #31
 800d8fc:	d510      	bpl.n	800d920 <_printf_float+0x250>
 800d8fe:	ee18 3a10 	vmov	r3, s16
 800d902:	4652      	mov	r2, sl
 800d904:	4631      	mov	r1, r6
 800d906:	4628      	mov	r0, r5
 800d908:	47b8      	blx	r7
 800d90a:	3001      	adds	r0, #1
 800d90c:	f43f af41 	beq.w	800d792 <_printf_float+0xc2>
 800d910:	f04f 0800 	mov.w	r8, #0
 800d914:	f104 091a 	add.w	r9, r4, #26
 800d918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d91a:	3b01      	subs	r3, #1
 800d91c:	4543      	cmp	r3, r8
 800d91e:	dc09      	bgt.n	800d934 <_printf_float+0x264>
 800d920:	6823      	ldr	r3, [r4, #0]
 800d922:	079b      	lsls	r3, r3, #30
 800d924:	f100 8105 	bmi.w	800db32 <_printf_float+0x462>
 800d928:	68e0      	ldr	r0, [r4, #12]
 800d92a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d92c:	4298      	cmp	r0, r3
 800d92e:	bfb8      	it	lt
 800d930:	4618      	movlt	r0, r3
 800d932:	e730      	b.n	800d796 <_printf_float+0xc6>
 800d934:	2301      	movs	r3, #1
 800d936:	464a      	mov	r2, r9
 800d938:	4631      	mov	r1, r6
 800d93a:	4628      	mov	r0, r5
 800d93c:	47b8      	blx	r7
 800d93e:	3001      	adds	r0, #1
 800d940:	f43f af27 	beq.w	800d792 <_printf_float+0xc2>
 800d944:	f108 0801 	add.w	r8, r8, #1
 800d948:	e7e6      	b.n	800d918 <_printf_float+0x248>
 800d94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	dc39      	bgt.n	800d9c4 <_printf_float+0x2f4>
 800d950:	4a1b      	ldr	r2, [pc, #108]	; (800d9c0 <_printf_float+0x2f0>)
 800d952:	2301      	movs	r3, #1
 800d954:	4631      	mov	r1, r6
 800d956:	4628      	mov	r0, r5
 800d958:	47b8      	blx	r7
 800d95a:	3001      	adds	r0, #1
 800d95c:	f43f af19 	beq.w	800d792 <_printf_float+0xc2>
 800d960:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d964:	4313      	orrs	r3, r2
 800d966:	d102      	bne.n	800d96e <_printf_float+0x29e>
 800d968:	6823      	ldr	r3, [r4, #0]
 800d96a:	07d9      	lsls	r1, r3, #31
 800d96c:	d5d8      	bpl.n	800d920 <_printf_float+0x250>
 800d96e:	ee18 3a10 	vmov	r3, s16
 800d972:	4652      	mov	r2, sl
 800d974:	4631      	mov	r1, r6
 800d976:	4628      	mov	r0, r5
 800d978:	47b8      	blx	r7
 800d97a:	3001      	adds	r0, #1
 800d97c:	f43f af09 	beq.w	800d792 <_printf_float+0xc2>
 800d980:	f04f 0900 	mov.w	r9, #0
 800d984:	f104 0a1a 	add.w	sl, r4, #26
 800d988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d98a:	425b      	negs	r3, r3
 800d98c:	454b      	cmp	r3, r9
 800d98e:	dc01      	bgt.n	800d994 <_printf_float+0x2c4>
 800d990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d992:	e792      	b.n	800d8ba <_printf_float+0x1ea>
 800d994:	2301      	movs	r3, #1
 800d996:	4652      	mov	r2, sl
 800d998:	4631      	mov	r1, r6
 800d99a:	4628      	mov	r0, r5
 800d99c:	47b8      	blx	r7
 800d99e:	3001      	adds	r0, #1
 800d9a0:	f43f aef7 	beq.w	800d792 <_printf_float+0xc2>
 800d9a4:	f109 0901 	add.w	r9, r9, #1
 800d9a8:	e7ee      	b.n	800d988 <_printf_float+0x2b8>
 800d9aa:	bf00      	nop
 800d9ac:	7fefffff 	.word	0x7fefffff
 800d9b0:	08012e78 	.word	0x08012e78
 800d9b4:	08012e7c 	.word	0x08012e7c
 800d9b8:	08012e84 	.word	0x08012e84
 800d9bc:	08012e80 	.word	0x08012e80
 800d9c0:	08012e88 	.word	0x08012e88
 800d9c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	bfa8      	it	ge
 800d9cc:	461a      	movge	r2, r3
 800d9ce:	2a00      	cmp	r2, #0
 800d9d0:	4691      	mov	r9, r2
 800d9d2:	dc37      	bgt.n	800da44 <_printf_float+0x374>
 800d9d4:	f04f 0b00 	mov.w	fp, #0
 800d9d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d9dc:	f104 021a 	add.w	r2, r4, #26
 800d9e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d9e2:	9305      	str	r3, [sp, #20]
 800d9e4:	eba3 0309 	sub.w	r3, r3, r9
 800d9e8:	455b      	cmp	r3, fp
 800d9ea:	dc33      	bgt.n	800da54 <_printf_float+0x384>
 800d9ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	db3b      	blt.n	800da6c <_printf_float+0x39c>
 800d9f4:	6823      	ldr	r3, [r4, #0]
 800d9f6:	07da      	lsls	r2, r3, #31
 800d9f8:	d438      	bmi.n	800da6c <_printf_float+0x39c>
 800d9fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9fc:	9a05      	ldr	r2, [sp, #20]
 800d9fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da00:	1a9a      	subs	r2, r3, r2
 800da02:	eba3 0901 	sub.w	r9, r3, r1
 800da06:	4591      	cmp	r9, r2
 800da08:	bfa8      	it	ge
 800da0a:	4691      	movge	r9, r2
 800da0c:	f1b9 0f00 	cmp.w	r9, #0
 800da10:	dc35      	bgt.n	800da7e <_printf_float+0x3ae>
 800da12:	f04f 0800 	mov.w	r8, #0
 800da16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da1a:	f104 0a1a 	add.w	sl, r4, #26
 800da1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da22:	1a9b      	subs	r3, r3, r2
 800da24:	eba3 0309 	sub.w	r3, r3, r9
 800da28:	4543      	cmp	r3, r8
 800da2a:	f77f af79 	ble.w	800d920 <_printf_float+0x250>
 800da2e:	2301      	movs	r3, #1
 800da30:	4652      	mov	r2, sl
 800da32:	4631      	mov	r1, r6
 800da34:	4628      	mov	r0, r5
 800da36:	47b8      	blx	r7
 800da38:	3001      	adds	r0, #1
 800da3a:	f43f aeaa 	beq.w	800d792 <_printf_float+0xc2>
 800da3e:	f108 0801 	add.w	r8, r8, #1
 800da42:	e7ec      	b.n	800da1e <_printf_float+0x34e>
 800da44:	4613      	mov	r3, r2
 800da46:	4631      	mov	r1, r6
 800da48:	4642      	mov	r2, r8
 800da4a:	4628      	mov	r0, r5
 800da4c:	47b8      	blx	r7
 800da4e:	3001      	adds	r0, #1
 800da50:	d1c0      	bne.n	800d9d4 <_printf_float+0x304>
 800da52:	e69e      	b.n	800d792 <_printf_float+0xc2>
 800da54:	2301      	movs	r3, #1
 800da56:	4631      	mov	r1, r6
 800da58:	4628      	mov	r0, r5
 800da5a:	9205      	str	r2, [sp, #20]
 800da5c:	47b8      	blx	r7
 800da5e:	3001      	adds	r0, #1
 800da60:	f43f ae97 	beq.w	800d792 <_printf_float+0xc2>
 800da64:	9a05      	ldr	r2, [sp, #20]
 800da66:	f10b 0b01 	add.w	fp, fp, #1
 800da6a:	e7b9      	b.n	800d9e0 <_printf_float+0x310>
 800da6c:	ee18 3a10 	vmov	r3, s16
 800da70:	4652      	mov	r2, sl
 800da72:	4631      	mov	r1, r6
 800da74:	4628      	mov	r0, r5
 800da76:	47b8      	blx	r7
 800da78:	3001      	adds	r0, #1
 800da7a:	d1be      	bne.n	800d9fa <_printf_float+0x32a>
 800da7c:	e689      	b.n	800d792 <_printf_float+0xc2>
 800da7e:	9a05      	ldr	r2, [sp, #20]
 800da80:	464b      	mov	r3, r9
 800da82:	4442      	add	r2, r8
 800da84:	4631      	mov	r1, r6
 800da86:	4628      	mov	r0, r5
 800da88:	47b8      	blx	r7
 800da8a:	3001      	adds	r0, #1
 800da8c:	d1c1      	bne.n	800da12 <_printf_float+0x342>
 800da8e:	e680      	b.n	800d792 <_printf_float+0xc2>
 800da90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da92:	2a01      	cmp	r2, #1
 800da94:	dc01      	bgt.n	800da9a <_printf_float+0x3ca>
 800da96:	07db      	lsls	r3, r3, #31
 800da98:	d538      	bpl.n	800db0c <_printf_float+0x43c>
 800da9a:	2301      	movs	r3, #1
 800da9c:	4642      	mov	r2, r8
 800da9e:	4631      	mov	r1, r6
 800daa0:	4628      	mov	r0, r5
 800daa2:	47b8      	blx	r7
 800daa4:	3001      	adds	r0, #1
 800daa6:	f43f ae74 	beq.w	800d792 <_printf_float+0xc2>
 800daaa:	ee18 3a10 	vmov	r3, s16
 800daae:	4652      	mov	r2, sl
 800dab0:	4631      	mov	r1, r6
 800dab2:	4628      	mov	r0, r5
 800dab4:	47b8      	blx	r7
 800dab6:	3001      	adds	r0, #1
 800dab8:	f43f ae6b 	beq.w	800d792 <_printf_float+0xc2>
 800dabc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dac0:	2200      	movs	r2, #0
 800dac2:	2300      	movs	r3, #0
 800dac4:	f7f3 f828 	bl	8000b18 <__aeabi_dcmpeq>
 800dac8:	b9d8      	cbnz	r0, 800db02 <_printf_float+0x432>
 800daca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dacc:	f108 0201 	add.w	r2, r8, #1
 800dad0:	3b01      	subs	r3, #1
 800dad2:	4631      	mov	r1, r6
 800dad4:	4628      	mov	r0, r5
 800dad6:	47b8      	blx	r7
 800dad8:	3001      	adds	r0, #1
 800dada:	d10e      	bne.n	800dafa <_printf_float+0x42a>
 800dadc:	e659      	b.n	800d792 <_printf_float+0xc2>
 800dade:	2301      	movs	r3, #1
 800dae0:	4652      	mov	r2, sl
 800dae2:	4631      	mov	r1, r6
 800dae4:	4628      	mov	r0, r5
 800dae6:	47b8      	blx	r7
 800dae8:	3001      	adds	r0, #1
 800daea:	f43f ae52 	beq.w	800d792 <_printf_float+0xc2>
 800daee:	f108 0801 	add.w	r8, r8, #1
 800daf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daf4:	3b01      	subs	r3, #1
 800daf6:	4543      	cmp	r3, r8
 800daf8:	dcf1      	bgt.n	800dade <_printf_float+0x40e>
 800dafa:	464b      	mov	r3, r9
 800dafc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800db00:	e6dc      	b.n	800d8bc <_printf_float+0x1ec>
 800db02:	f04f 0800 	mov.w	r8, #0
 800db06:	f104 0a1a 	add.w	sl, r4, #26
 800db0a:	e7f2      	b.n	800daf2 <_printf_float+0x422>
 800db0c:	2301      	movs	r3, #1
 800db0e:	4642      	mov	r2, r8
 800db10:	e7df      	b.n	800dad2 <_printf_float+0x402>
 800db12:	2301      	movs	r3, #1
 800db14:	464a      	mov	r2, r9
 800db16:	4631      	mov	r1, r6
 800db18:	4628      	mov	r0, r5
 800db1a:	47b8      	blx	r7
 800db1c:	3001      	adds	r0, #1
 800db1e:	f43f ae38 	beq.w	800d792 <_printf_float+0xc2>
 800db22:	f108 0801 	add.w	r8, r8, #1
 800db26:	68e3      	ldr	r3, [r4, #12]
 800db28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db2a:	1a5b      	subs	r3, r3, r1
 800db2c:	4543      	cmp	r3, r8
 800db2e:	dcf0      	bgt.n	800db12 <_printf_float+0x442>
 800db30:	e6fa      	b.n	800d928 <_printf_float+0x258>
 800db32:	f04f 0800 	mov.w	r8, #0
 800db36:	f104 0919 	add.w	r9, r4, #25
 800db3a:	e7f4      	b.n	800db26 <_printf_float+0x456>

0800db3c <_printf_common>:
 800db3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db40:	4616      	mov	r6, r2
 800db42:	4699      	mov	r9, r3
 800db44:	688a      	ldr	r2, [r1, #8]
 800db46:	690b      	ldr	r3, [r1, #16]
 800db48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800db4c:	4293      	cmp	r3, r2
 800db4e:	bfb8      	it	lt
 800db50:	4613      	movlt	r3, r2
 800db52:	6033      	str	r3, [r6, #0]
 800db54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800db58:	4607      	mov	r7, r0
 800db5a:	460c      	mov	r4, r1
 800db5c:	b10a      	cbz	r2, 800db62 <_printf_common+0x26>
 800db5e:	3301      	adds	r3, #1
 800db60:	6033      	str	r3, [r6, #0]
 800db62:	6823      	ldr	r3, [r4, #0]
 800db64:	0699      	lsls	r1, r3, #26
 800db66:	bf42      	ittt	mi
 800db68:	6833      	ldrmi	r3, [r6, #0]
 800db6a:	3302      	addmi	r3, #2
 800db6c:	6033      	strmi	r3, [r6, #0]
 800db6e:	6825      	ldr	r5, [r4, #0]
 800db70:	f015 0506 	ands.w	r5, r5, #6
 800db74:	d106      	bne.n	800db84 <_printf_common+0x48>
 800db76:	f104 0a19 	add.w	sl, r4, #25
 800db7a:	68e3      	ldr	r3, [r4, #12]
 800db7c:	6832      	ldr	r2, [r6, #0]
 800db7e:	1a9b      	subs	r3, r3, r2
 800db80:	42ab      	cmp	r3, r5
 800db82:	dc26      	bgt.n	800dbd2 <_printf_common+0x96>
 800db84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800db88:	1e13      	subs	r3, r2, #0
 800db8a:	6822      	ldr	r2, [r4, #0]
 800db8c:	bf18      	it	ne
 800db8e:	2301      	movne	r3, #1
 800db90:	0692      	lsls	r2, r2, #26
 800db92:	d42b      	bmi.n	800dbec <_printf_common+0xb0>
 800db94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800db98:	4649      	mov	r1, r9
 800db9a:	4638      	mov	r0, r7
 800db9c:	47c0      	blx	r8
 800db9e:	3001      	adds	r0, #1
 800dba0:	d01e      	beq.n	800dbe0 <_printf_common+0xa4>
 800dba2:	6823      	ldr	r3, [r4, #0]
 800dba4:	68e5      	ldr	r5, [r4, #12]
 800dba6:	6832      	ldr	r2, [r6, #0]
 800dba8:	f003 0306 	and.w	r3, r3, #6
 800dbac:	2b04      	cmp	r3, #4
 800dbae:	bf08      	it	eq
 800dbb0:	1aad      	subeq	r5, r5, r2
 800dbb2:	68a3      	ldr	r3, [r4, #8]
 800dbb4:	6922      	ldr	r2, [r4, #16]
 800dbb6:	bf0c      	ite	eq
 800dbb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dbbc:	2500      	movne	r5, #0
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	bfc4      	itt	gt
 800dbc2:	1a9b      	subgt	r3, r3, r2
 800dbc4:	18ed      	addgt	r5, r5, r3
 800dbc6:	2600      	movs	r6, #0
 800dbc8:	341a      	adds	r4, #26
 800dbca:	42b5      	cmp	r5, r6
 800dbcc:	d11a      	bne.n	800dc04 <_printf_common+0xc8>
 800dbce:	2000      	movs	r0, #0
 800dbd0:	e008      	b.n	800dbe4 <_printf_common+0xa8>
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	4652      	mov	r2, sl
 800dbd6:	4649      	mov	r1, r9
 800dbd8:	4638      	mov	r0, r7
 800dbda:	47c0      	blx	r8
 800dbdc:	3001      	adds	r0, #1
 800dbde:	d103      	bne.n	800dbe8 <_printf_common+0xac>
 800dbe0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbe8:	3501      	adds	r5, #1
 800dbea:	e7c6      	b.n	800db7a <_printf_common+0x3e>
 800dbec:	18e1      	adds	r1, r4, r3
 800dbee:	1c5a      	adds	r2, r3, #1
 800dbf0:	2030      	movs	r0, #48	; 0x30
 800dbf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dbf6:	4422      	add	r2, r4
 800dbf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dbfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dc00:	3302      	adds	r3, #2
 800dc02:	e7c7      	b.n	800db94 <_printf_common+0x58>
 800dc04:	2301      	movs	r3, #1
 800dc06:	4622      	mov	r2, r4
 800dc08:	4649      	mov	r1, r9
 800dc0a:	4638      	mov	r0, r7
 800dc0c:	47c0      	blx	r8
 800dc0e:	3001      	adds	r0, #1
 800dc10:	d0e6      	beq.n	800dbe0 <_printf_common+0xa4>
 800dc12:	3601      	adds	r6, #1
 800dc14:	e7d9      	b.n	800dbca <_printf_common+0x8e>
	...

0800dc18 <_printf_i>:
 800dc18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc1c:	7e0f      	ldrb	r7, [r1, #24]
 800dc1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dc20:	2f78      	cmp	r7, #120	; 0x78
 800dc22:	4691      	mov	r9, r2
 800dc24:	4680      	mov	r8, r0
 800dc26:	460c      	mov	r4, r1
 800dc28:	469a      	mov	sl, r3
 800dc2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dc2e:	d807      	bhi.n	800dc40 <_printf_i+0x28>
 800dc30:	2f62      	cmp	r7, #98	; 0x62
 800dc32:	d80a      	bhi.n	800dc4a <_printf_i+0x32>
 800dc34:	2f00      	cmp	r7, #0
 800dc36:	f000 80d8 	beq.w	800ddea <_printf_i+0x1d2>
 800dc3a:	2f58      	cmp	r7, #88	; 0x58
 800dc3c:	f000 80a3 	beq.w	800dd86 <_printf_i+0x16e>
 800dc40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dc48:	e03a      	b.n	800dcc0 <_printf_i+0xa8>
 800dc4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dc4e:	2b15      	cmp	r3, #21
 800dc50:	d8f6      	bhi.n	800dc40 <_printf_i+0x28>
 800dc52:	a101      	add	r1, pc, #4	; (adr r1, 800dc58 <_printf_i+0x40>)
 800dc54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc58:	0800dcb1 	.word	0x0800dcb1
 800dc5c:	0800dcc5 	.word	0x0800dcc5
 800dc60:	0800dc41 	.word	0x0800dc41
 800dc64:	0800dc41 	.word	0x0800dc41
 800dc68:	0800dc41 	.word	0x0800dc41
 800dc6c:	0800dc41 	.word	0x0800dc41
 800dc70:	0800dcc5 	.word	0x0800dcc5
 800dc74:	0800dc41 	.word	0x0800dc41
 800dc78:	0800dc41 	.word	0x0800dc41
 800dc7c:	0800dc41 	.word	0x0800dc41
 800dc80:	0800dc41 	.word	0x0800dc41
 800dc84:	0800ddd1 	.word	0x0800ddd1
 800dc88:	0800dcf5 	.word	0x0800dcf5
 800dc8c:	0800ddb3 	.word	0x0800ddb3
 800dc90:	0800dc41 	.word	0x0800dc41
 800dc94:	0800dc41 	.word	0x0800dc41
 800dc98:	0800ddf3 	.word	0x0800ddf3
 800dc9c:	0800dc41 	.word	0x0800dc41
 800dca0:	0800dcf5 	.word	0x0800dcf5
 800dca4:	0800dc41 	.word	0x0800dc41
 800dca8:	0800dc41 	.word	0x0800dc41
 800dcac:	0800ddbb 	.word	0x0800ddbb
 800dcb0:	682b      	ldr	r3, [r5, #0]
 800dcb2:	1d1a      	adds	r2, r3, #4
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	602a      	str	r2, [r5, #0]
 800dcb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dcbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	e0a3      	b.n	800de0c <_printf_i+0x1f4>
 800dcc4:	6820      	ldr	r0, [r4, #0]
 800dcc6:	6829      	ldr	r1, [r5, #0]
 800dcc8:	0606      	lsls	r6, r0, #24
 800dcca:	f101 0304 	add.w	r3, r1, #4
 800dcce:	d50a      	bpl.n	800dce6 <_printf_i+0xce>
 800dcd0:	680e      	ldr	r6, [r1, #0]
 800dcd2:	602b      	str	r3, [r5, #0]
 800dcd4:	2e00      	cmp	r6, #0
 800dcd6:	da03      	bge.n	800dce0 <_printf_i+0xc8>
 800dcd8:	232d      	movs	r3, #45	; 0x2d
 800dcda:	4276      	negs	r6, r6
 800dcdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dce0:	485e      	ldr	r0, [pc, #376]	; (800de5c <_printf_i+0x244>)
 800dce2:	230a      	movs	r3, #10
 800dce4:	e019      	b.n	800dd1a <_printf_i+0x102>
 800dce6:	680e      	ldr	r6, [r1, #0]
 800dce8:	602b      	str	r3, [r5, #0]
 800dcea:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dcee:	bf18      	it	ne
 800dcf0:	b236      	sxthne	r6, r6
 800dcf2:	e7ef      	b.n	800dcd4 <_printf_i+0xbc>
 800dcf4:	682b      	ldr	r3, [r5, #0]
 800dcf6:	6820      	ldr	r0, [r4, #0]
 800dcf8:	1d19      	adds	r1, r3, #4
 800dcfa:	6029      	str	r1, [r5, #0]
 800dcfc:	0601      	lsls	r1, r0, #24
 800dcfe:	d501      	bpl.n	800dd04 <_printf_i+0xec>
 800dd00:	681e      	ldr	r6, [r3, #0]
 800dd02:	e002      	b.n	800dd0a <_printf_i+0xf2>
 800dd04:	0646      	lsls	r6, r0, #25
 800dd06:	d5fb      	bpl.n	800dd00 <_printf_i+0xe8>
 800dd08:	881e      	ldrh	r6, [r3, #0]
 800dd0a:	4854      	ldr	r0, [pc, #336]	; (800de5c <_printf_i+0x244>)
 800dd0c:	2f6f      	cmp	r7, #111	; 0x6f
 800dd0e:	bf0c      	ite	eq
 800dd10:	2308      	moveq	r3, #8
 800dd12:	230a      	movne	r3, #10
 800dd14:	2100      	movs	r1, #0
 800dd16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dd1a:	6865      	ldr	r5, [r4, #4]
 800dd1c:	60a5      	str	r5, [r4, #8]
 800dd1e:	2d00      	cmp	r5, #0
 800dd20:	bfa2      	ittt	ge
 800dd22:	6821      	ldrge	r1, [r4, #0]
 800dd24:	f021 0104 	bicge.w	r1, r1, #4
 800dd28:	6021      	strge	r1, [r4, #0]
 800dd2a:	b90e      	cbnz	r6, 800dd30 <_printf_i+0x118>
 800dd2c:	2d00      	cmp	r5, #0
 800dd2e:	d04d      	beq.n	800ddcc <_printf_i+0x1b4>
 800dd30:	4615      	mov	r5, r2
 800dd32:	fbb6 f1f3 	udiv	r1, r6, r3
 800dd36:	fb03 6711 	mls	r7, r3, r1, r6
 800dd3a:	5dc7      	ldrb	r7, [r0, r7]
 800dd3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dd40:	4637      	mov	r7, r6
 800dd42:	42bb      	cmp	r3, r7
 800dd44:	460e      	mov	r6, r1
 800dd46:	d9f4      	bls.n	800dd32 <_printf_i+0x11a>
 800dd48:	2b08      	cmp	r3, #8
 800dd4a:	d10b      	bne.n	800dd64 <_printf_i+0x14c>
 800dd4c:	6823      	ldr	r3, [r4, #0]
 800dd4e:	07de      	lsls	r6, r3, #31
 800dd50:	d508      	bpl.n	800dd64 <_printf_i+0x14c>
 800dd52:	6923      	ldr	r3, [r4, #16]
 800dd54:	6861      	ldr	r1, [r4, #4]
 800dd56:	4299      	cmp	r1, r3
 800dd58:	bfde      	ittt	le
 800dd5a:	2330      	movle	r3, #48	; 0x30
 800dd5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dd60:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dd64:	1b52      	subs	r2, r2, r5
 800dd66:	6122      	str	r2, [r4, #16]
 800dd68:	f8cd a000 	str.w	sl, [sp]
 800dd6c:	464b      	mov	r3, r9
 800dd6e:	aa03      	add	r2, sp, #12
 800dd70:	4621      	mov	r1, r4
 800dd72:	4640      	mov	r0, r8
 800dd74:	f7ff fee2 	bl	800db3c <_printf_common>
 800dd78:	3001      	adds	r0, #1
 800dd7a:	d14c      	bne.n	800de16 <_printf_i+0x1fe>
 800dd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd80:	b004      	add	sp, #16
 800dd82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd86:	4835      	ldr	r0, [pc, #212]	; (800de5c <_printf_i+0x244>)
 800dd88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dd8c:	6829      	ldr	r1, [r5, #0]
 800dd8e:	6823      	ldr	r3, [r4, #0]
 800dd90:	f851 6b04 	ldr.w	r6, [r1], #4
 800dd94:	6029      	str	r1, [r5, #0]
 800dd96:	061d      	lsls	r5, r3, #24
 800dd98:	d514      	bpl.n	800ddc4 <_printf_i+0x1ac>
 800dd9a:	07df      	lsls	r7, r3, #31
 800dd9c:	bf44      	itt	mi
 800dd9e:	f043 0320 	orrmi.w	r3, r3, #32
 800dda2:	6023      	strmi	r3, [r4, #0]
 800dda4:	b91e      	cbnz	r6, 800ddae <_printf_i+0x196>
 800dda6:	6823      	ldr	r3, [r4, #0]
 800dda8:	f023 0320 	bic.w	r3, r3, #32
 800ddac:	6023      	str	r3, [r4, #0]
 800ddae:	2310      	movs	r3, #16
 800ddb0:	e7b0      	b.n	800dd14 <_printf_i+0xfc>
 800ddb2:	6823      	ldr	r3, [r4, #0]
 800ddb4:	f043 0320 	orr.w	r3, r3, #32
 800ddb8:	6023      	str	r3, [r4, #0]
 800ddba:	2378      	movs	r3, #120	; 0x78
 800ddbc:	4828      	ldr	r0, [pc, #160]	; (800de60 <_printf_i+0x248>)
 800ddbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ddc2:	e7e3      	b.n	800dd8c <_printf_i+0x174>
 800ddc4:	0659      	lsls	r1, r3, #25
 800ddc6:	bf48      	it	mi
 800ddc8:	b2b6      	uxthmi	r6, r6
 800ddca:	e7e6      	b.n	800dd9a <_printf_i+0x182>
 800ddcc:	4615      	mov	r5, r2
 800ddce:	e7bb      	b.n	800dd48 <_printf_i+0x130>
 800ddd0:	682b      	ldr	r3, [r5, #0]
 800ddd2:	6826      	ldr	r6, [r4, #0]
 800ddd4:	6961      	ldr	r1, [r4, #20]
 800ddd6:	1d18      	adds	r0, r3, #4
 800ddd8:	6028      	str	r0, [r5, #0]
 800ddda:	0635      	lsls	r5, r6, #24
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	d501      	bpl.n	800dde4 <_printf_i+0x1cc>
 800dde0:	6019      	str	r1, [r3, #0]
 800dde2:	e002      	b.n	800ddea <_printf_i+0x1d2>
 800dde4:	0670      	lsls	r0, r6, #25
 800dde6:	d5fb      	bpl.n	800dde0 <_printf_i+0x1c8>
 800dde8:	8019      	strh	r1, [r3, #0]
 800ddea:	2300      	movs	r3, #0
 800ddec:	6123      	str	r3, [r4, #16]
 800ddee:	4615      	mov	r5, r2
 800ddf0:	e7ba      	b.n	800dd68 <_printf_i+0x150>
 800ddf2:	682b      	ldr	r3, [r5, #0]
 800ddf4:	1d1a      	adds	r2, r3, #4
 800ddf6:	602a      	str	r2, [r5, #0]
 800ddf8:	681d      	ldr	r5, [r3, #0]
 800ddfa:	6862      	ldr	r2, [r4, #4]
 800ddfc:	2100      	movs	r1, #0
 800ddfe:	4628      	mov	r0, r5
 800de00:	f7f2 fa16 	bl	8000230 <memchr>
 800de04:	b108      	cbz	r0, 800de0a <_printf_i+0x1f2>
 800de06:	1b40      	subs	r0, r0, r5
 800de08:	6060      	str	r0, [r4, #4]
 800de0a:	6863      	ldr	r3, [r4, #4]
 800de0c:	6123      	str	r3, [r4, #16]
 800de0e:	2300      	movs	r3, #0
 800de10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de14:	e7a8      	b.n	800dd68 <_printf_i+0x150>
 800de16:	6923      	ldr	r3, [r4, #16]
 800de18:	462a      	mov	r2, r5
 800de1a:	4649      	mov	r1, r9
 800de1c:	4640      	mov	r0, r8
 800de1e:	47d0      	blx	sl
 800de20:	3001      	adds	r0, #1
 800de22:	d0ab      	beq.n	800dd7c <_printf_i+0x164>
 800de24:	6823      	ldr	r3, [r4, #0]
 800de26:	079b      	lsls	r3, r3, #30
 800de28:	d413      	bmi.n	800de52 <_printf_i+0x23a>
 800de2a:	68e0      	ldr	r0, [r4, #12]
 800de2c:	9b03      	ldr	r3, [sp, #12]
 800de2e:	4298      	cmp	r0, r3
 800de30:	bfb8      	it	lt
 800de32:	4618      	movlt	r0, r3
 800de34:	e7a4      	b.n	800dd80 <_printf_i+0x168>
 800de36:	2301      	movs	r3, #1
 800de38:	4632      	mov	r2, r6
 800de3a:	4649      	mov	r1, r9
 800de3c:	4640      	mov	r0, r8
 800de3e:	47d0      	blx	sl
 800de40:	3001      	adds	r0, #1
 800de42:	d09b      	beq.n	800dd7c <_printf_i+0x164>
 800de44:	3501      	adds	r5, #1
 800de46:	68e3      	ldr	r3, [r4, #12]
 800de48:	9903      	ldr	r1, [sp, #12]
 800de4a:	1a5b      	subs	r3, r3, r1
 800de4c:	42ab      	cmp	r3, r5
 800de4e:	dcf2      	bgt.n	800de36 <_printf_i+0x21e>
 800de50:	e7eb      	b.n	800de2a <_printf_i+0x212>
 800de52:	2500      	movs	r5, #0
 800de54:	f104 0619 	add.w	r6, r4, #25
 800de58:	e7f5      	b.n	800de46 <_printf_i+0x22e>
 800de5a:	bf00      	nop
 800de5c:	08012e8a 	.word	0x08012e8a
 800de60:	08012e9b 	.word	0x08012e9b

0800de64 <iprintf>:
 800de64:	b40f      	push	{r0, r1, r2, r3}
 800de66:	4b0a      	ldr	r3, [pc, #40]	; (800de90 <iprintf+0x2c>)
 800de68:	b513      	push	{r0, r1, r4, lr}
 800de6a:	681c      	ldr	r4, [r3, #0]
 800de6c:	b124      	cbz	r4, 800de78 <iprintf+0x14>
 800de6e:	69a3      	ldr	r3, [r4, #24]
 800de70:	b913      	cbnz	r3, 800de78 <iprintf+0x14>
 800de72:	4620      	mov	r0, r4
 800de74:	f001 ff94 	bl	800fda0 <__sinit>
 800de78:	ab05      	add	r3, sp, #20
 800de7a:	9a04      	ldr	r2, [sp, #16]
 800de7c:	68a1      	ldr	r1, [r4, #8]
 800de7e:	9301      	str	r3, [sp, #4]
 800de80:	4620      	mov	r0, r4
 800de82:	f003 fa01 	bl	8011288 <_vfiprintf_r>
 800de86:	b002      	add	sp, #8
 800de88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de8c:	b004      	add	sp, #16
 800de8e:	4770      	bx	lr
 800de90:	2000002c 	.word	0x2000002c

0800de94 <_puts_r>:
 800de94:	b570      	push	{r4, r5, r6, lr}
 800de96:	460e      	mov	r6, r1
 800de98:	4605      	mov	r5, r0
 800de9a:	b118      	cbz	r0, 800dea4 <_puts_r+0x10>
 800de9c:	6983      	ldr	r3, [r0, #24]
 800de9e:	b90b      	cbnz	r3, 800dea4 <_puts_r+0x10>
 800dea0:	f001 ff7e 	bl	800fda0 <__sinit>
 800dea4:	69ab      	ldr	r3, [r5, #24]
 800dea6:	68ac      	ldr	r4, [r5, #8]
 800dea8:	b913      	cbnz	r3, 800deb0 <_puts_r+0x1c>
 800deaa:	4628      	mov	r0, r5
 800deac:	f001 ff78 	bl	800fda0 <__sinit>
 800deb0:	4b2c      	ldr	r3, [pc, #176]	; (800df64 <_puts_r+0xd0>)
 800deb2:	429c      	cmp	r4, r3
 800deb4:	d120      	bne.n	800def8 <_puts_r+0x64>
 800deb6:	686c      	ldr	r4, [r5, #4]
 800deb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800deba:	07db      	lsls	r3, r3, #31
 800debc:	d405      	bmi.n	800deca <_puts_r+0x36>
 800debe:	89a3      	ldrh	r3, [r4, #12]
 800dec0:	0598      	lsls	r0, r3, #22
 800dec2:	d402      	bmi.n	800deca <_puts_r+0x36>
 800dec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dec6:	f002 fb7c 	bl	80105c2 <__retarget_lock_acquire_recursive>
 800deca:	89a3      	ldrh	r3, [r4, #12]
 800decc:	0719      	lsls	r1, r3, #28
 800dece:	d51d      	bpl.n	800df0c <_puts_r+0x78>
 800ded0:	6923      	ldr	r3, [r4, #16]
 800ded2:	b1db      	cbz	r3, 800df0c <_puts_r+0x78>
 800ded4:	3e01      	subs	r6, #1
 800ded6:	68a3      	ldr	r3, [r4, #8]
 800ded8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dedc:	3b01      	subs	r3, #1
 800dede:	60a3      	str	r3, [r4, #8]
 800dee0:	bb39      	cbnz	r1, 800df32 <_puts_r+0x9e>
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	da38      	bge.n	800df58 <_puts_r+0xc4>
 800dee6:	4622      	mov	r2, r4
 800dee8:	210a      	movs	r1, #10
 800deea:	4628      	mov	r0, r5
 800deec:	f000 ff02 	bl	800ecf4 <__swbuf_r>
 800def0:	3001      	adds	r0, #1
 800def2:	d011      	beq.n	800df18 <_puts_r+0x84>
 800def4:	250a      	movs	r5, #10
 800def6:	e011      	b.n	800df1c <_puts_r+0x88>
 800def8:	4b1b      	ldr	r3, [pc, #108]	; (800df68 <_puts_r+0xd4>)
 800defa:	429c      	cmp	r4, r3
 800defc:	d101      	bne.n	800df02 <_puts_r+0x6e>
 800defe:	68ac      	ldr	r4, [r5, #8]
 800df00:	e7da      	b.n	800deb8 <_puts_r+0x24>
 800df02:	4b1a      	ldr	r3, [pc, #104]	; (800df6c <_puts_r+0xd8>)
 800df04:	429c      	cmp	r4, r3
 800df06:	bf08      	it	eq
 800df08:	68ec      	ldreq	r4, [r5, #12]
 800df0a:	e7d5      	b.n	800deb8 <_puts_r+0x24>
 800df0c:	4621      	mov	r1, r4
 800df0e:	4628      	mov	r0, r5
 800df10:	f000 ff42 	bl	800ed98 <__swsetup_r>
 800df14:	2800      	cmp	r0, #0
 800df16:	d0dd      	beq.n	800ded4 <_puts_r+0x40>
 800df18:	f04f 35ff 	mov.w	r5, #4294967295
 800df1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df1e:	07da      	lsls	r2, r3, #31
 800df20:	d405      	bmi.n	800df2e <_puts_r+0x9a>
 800df22:	89a3      	ldrh	r3, [r4, #12]
 800df24:	059b      	lsls	r3, r3, #22
 800df26:	d402      	bmi.n	800df2e <_puts_r+0x9a>
 800df28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df2a:	f002 fb4b 	bl	80105c4 <__retarget_lock_release_recursive>
 800df2e:	4628      	mov	r0, r5
 800df30:	bd70      	pop	{r4, r5, r6, pc}
 800df32:	2b00      	cmp	r3, #0
 800df34:	da04      	bge.n	800df40 <_puts_r+0xac>
 800df36:	69a2      	ldr	r2, [r4, #24]
 800df38:	429a      	cmp	r2, r3
 800df3a:	dc06      	bgt.n	800df4a <_puts_r+0xb6>
 800df3c:	290a      	cmp	r1, #10
 800df3e:	d004      	beq.n	800df4a <_puts_r+0xb6>
 800df40:	6823      	ldr	r3, [r4, #0]
 800df42:	1c5a      	adds	r2, r3, #1
 800df44:	6022      	str	r2, [r4, #0]
 800df46:	7019      	strb	r1, [r3, #0]
 800df48:	e7c5      	b.n	800ded6 <_puts_r+0x42>
 800df4a:	4622      	mov	r2, r4
 800df4c:	4628      	mov	r0, r5
 800df4e:	f000 fed1 	bl	800ecf4 <__swbuf_r>
 800df52:	3001      	adds	r0, #1
 800df54:	d1bf      	bne.n	800ded6 <_puts_r+0x42>
 800df56:	e7df      	b.n	800df18 <_puts_r+0x84>
 800df58:	6823      	ldr	r3, [r4, #0]
 800df5a:	250a      	movs	r5, #10
 800df5c:	1c5a      	adds	r2, r3, #1
 800df5e:	6022      	str	r2, [r4, #0]
 800df60:	701d      	strb	r5, [r3, #0]
 800df62:	e7db      	b.n	800df1c <_puts_r+0x88>
 800df64:	080130b4 	.word	0x080130b4
 800df68:	080130d4 	.word	0x080130d4
 800df6c:	08013094 	.word	0x08013094

0800df70 <puts>:
 800df70:	4b02      	ldr	r3, [pc, #8]	; (800df7c <puts+0xc>)
 800df72:	4601      	mov	r1, r0
 800df74:	6818      	ldr	r0, [r3, #0]
 800df76:	f7ff bf8d 	b.w	800de94 <_puts_r>
 800df7a:	bf00      	nop
 800df7c:	2000002c 	.word	0x2000002c

0800df80 <sulp>:
 800df80:	b570      	push	{r4, r5, r6, lr}
 800df82:	4604      	mov	r4, r0
 800df84:	460d      	mov	r5, r1
 800df86:	ec45 4b10 	vmov	d0, r4, r5
 800df8a:	4616      	mov	r6, r2
 800df8c:	f002 ff0c 	bl	8010da8 <__ulp>
 800df90:	ec51 0b10 	vmov	r0, r1, d0
 800df94:	b17e      	cbz	r6, 800dfb6 <sulp+0x36>
 800df96:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800df9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	dd09      	ble.n	800dfb6 <sulp+0x36>
 800dfa2:	051b      	lsls	r3, r3, #20
 800dfa4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800dfa8:	2400      	movs	r4, #0
 800dfaa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800dfae:	4622      	mov	r2, r4
 800dfb0:	462b      	mov	r3, r5
 800dfb2:	f7f2 fb49 	bl	8000648 <__aeabi_dmul>
 800dfb6:	bd70      	pop	{r4, r5, r6, pc}

0800dfb8 <_strtod_l>:
 800dfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfbc:	ed2d 8b02 	vpush	{d8}
 800dfc0:	b09d      	sub	sp, #116	; 0x74
 800dfc2:	461f      	mov	r7, r3
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	9318      	str	r3, [sp, #96]	; 0x60
 800dfc8:	4ba2      	ldr	r3, [pc, #648]	; (800e254 <_strtod_l+0x29c>)
 800dfca:	9213      	str	r2, [sp, #76]	; 0x4c
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	9305      	str	r3, [sp, #20]
 800dfd0:	4604      	mov	r4, r0
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	4688      	mov	r8, r1
 800dfd6:	f7f2 f923 	bl	8000220 <strlen>
 800dfda:	f04f 0a00 	mov.w	sl, #0
 800dfde:	4605      	mov	r5, r0
 800dfe0:	f04f 0b00 	mov.w	fp, #0
 800dfe4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800dfe8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dfea:	781a      	ldrb	r2, [r3, #0]
 800dfec:	2a2b      	cmp	r2, #43	; 0x2b
 800dfee:	d04e      	beq.n	800e08e <_strtod_l+0xd6>
 800dff0:	d83b      	bhi.n	800e06a <_strtod_l+0xb2>
 800dff2:	2a0d      	cmp	r2, #13
 800dff4:	d834      	bhi.n	800e060 <_strtod_l+0xa8>
 800dff6:	2a08      	cmp	r2, #8
 800dff8:	d834      	bhi.n	800e064 <_strtod_l+0xac>
 800dffa:	2a00      	cmp	r2, #0
 800dffc:	d03e      	beq.n	800e07c <_strtod_l+0xc4>
 800dffe:	2300      	movs	r3, #0
 800e000:	930a      	str	r3, [sp, #40]	; 0x28
 800e002:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e004:	7833      	ldrb	r3, [r6, #0]
 800e006:	2b30      	cmp	r3, #48	; 0x30
 800e008:	f040 80b0 	bne.w	800e16c <_strtod_l+0x1b4>
 800e00c:	7873      	ldrb	r3, [r6, #1]
 800e00e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e012:	2b58      	cmp	r3, #88	; 0x58
 800e014:	d168      	bne.n	800e0e8 <_strtod_l+0x130>
 800e016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e018:	9301      	str	r3, [sp, #4]
 800e01a:	ab18      	add	r3, sp, #96	; 0x60
 800e01c:	9702      	str	r7, [sp, #8]
 800e01e:	9300      	str	r3, [sp, #0]
 800e020:	4a8d      	ldr	r2, [pc, #564]	; (800e258 <_strtod_l+0x2a0>)
 800e022:	ab19      	add	r3, sp, #100	; 0x64
 800e024:	a917      	add	r1, sp, #92	; 0x5c
 800e026:	4620      	mov	r0, r4
 800e028:	f001 ffbe 	bl	800ffa8 <__gethex>
 800e02c:	f010 0707 	ands.w	r7, r0, #7
 800e030:	4605      	mov	r5, r0
 800e032:	d005      	beq.n	800e040 <_strtod_l+0x88>
 800e034:	2f06      	cmp	r7, #6
 800e036:	d12c      	bne.n	800e092 <_strtod_l+0xda>
 800e038:	3601      	adds	r6, #1
 800e03a:	2300      	movs	r3, #0
 800e03c:	9617      	str	r6, [sp, #92]	; 0x5c
 800e03e:	930a      	str	r3, [sp, #40]	; 0x28
 800e040:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e042:	2b00      	cmp	r3, #0
 800e044:	f040 8590 	bne.w	800eb68 <_strtod_l+0xbb0>
 800e048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e04a:	b1eb      	cbz	r3, 800e088 <_strtod_l+0xd0>
 800e04c:	4652      	mov	r2, sl
 800e04e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e052:	ec43 2b10 	vmov	d0, r2, r3
 800e056:	b01d      	add	sp, #116	; 0x74
 800e058:	ecbd 8b02 	vpop	{d8}
 800e05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e060:	2a20      	cmp	r2, #32
 800e062:	d1cc      	bne.n	800dffe <_strtod_l+0x46>
 800e064:	3301      	adds	r3, #1
 800e066:	9317      	str	r3, [sp, #92]	; 0x5c
 800e068:	e7be      	b.n	800dfe8 <_strtod_l+0x30>
 800e06a:	2a2d      	cmp	r2, #45	; 0x2d
 800e06c:	d1c7      	bne.n	800dffe <_strtod_l+0x46>
 800e06e:	2201      	movs	r2, #1
 800e070:	920a      	str	r2, [sp, #40]	; 0x28
 800e072:	1c5a      	adds	r2, r3, #1
 800e074:	9217      	str	r2, [sp, #92]	; 0x5c
 800e076:	785b      	ldrb	r3, [r3, #1]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d1c2      	bne.n	800e002 <_strtod_l+0x4a>
 800e07c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e07e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e082:	2b00      	cmp	r3, #0
 800e084:	f040 856e 	bne.w	800eb64 <_strtod_l+0xbac>
 800e088:	4652      	mov	r2, sl
 800e08a:	465b      	mov	r3, fp
 800e08c:	e7e1      	b.n	800e052 <_strtod_l+0x9a>
 800e08e:	2200      	movs	r2, #0
 800e090:	e7ee      	b.n	800e070 <_strtod_l+0xb8>
 800e092:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e094:	b13a      	cbz	r2, 800e0a6 <_strtod_l+0xee>
 800e096:	2135      	movs	r1, #53	; 0x35
 800e098:	a81a      	add	r0, sp, #104	; 0x68
 800e09a:	f002 ff90 	bl	8010fbe <__copybits>
 800e09e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	f002 fb4f 	bl	8010744 <_Bfree>
 800e0a6:	3f01      	subs	r7, #1
 800e0a8:	2f04      	cmp	r7, #4
 800e0aa:	d806      	bhi.n	800e0ba <_strtod_l+0x102>
 800e0ac:	e8df f007 	tbb	[pc, r7]
 800e0b0:	1714030a 	.word	0x1714030a
 800e0b4:	0a          	.byte	0x0a
 800e0b5:	00          	.byte	0x00
 800e0b6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800e0ba:	0728      	lsls	r0, r5, #28
 800e0bc:	d5c0      	bpl.n	800e040 <_strtod_l+0x88>
 800e0be:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e0c2:	e7bd      	b.n	800e040 <_strtod_l+0x88>
 800e0c4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800e0c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e0ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e0ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e0d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e0d6:	e7f0      	b.n	800e0ba <_strtod_l+0x102>
 800e0d8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800e25c <_strtod_l+0x2a4>
 800e0dc:	e7ed      	b.n	800e0ba <_strtod_l+0x102>
 800e0de:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e0e2:	f04f 3aff 	mov.w	sl, #4294967295
 800e0e6:	e7e8      	b.n	800e0ba <_strtod_l+0x102>
 800e0e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e0ea:	1c5a      	adds	r2, r3, #1
 800e0ec:	9217      	str	r2, [sp, #92]	; 0x5c
 800e0ee:	785b      	ldrb	r3, [r3, #1]
 800e0f0:	2b30      	cmp	r3, #48	; 0x30
 800e0f2:	d0f9      	beq.n	800e0e8 <_strtod_l+0x130>
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d0a3      	beq.n	800e040 <_strtod_l+0x88>
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	f04f 0900 	mov.w	r9, #0
 800e0fe:	9304      	str	r3, [sp, #16]
 800e100:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e102:	9308      	str	r3, [sp, #32]
 800e104:	f8cd 901c 	str.w	r9, [sp, #28]
 800e108:	464f      	mov	r7, r9
 800e10a:	220a      	movs	r2, #10
 800e10c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e10e:	7806      	ldrb	r6, [r0, #0]
 800e110:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e114:	b2d9      	uxtb	r1, r3
 800e116:	2909      	cmp	r1, #9
 800e118:	d92a      	bls.n	800e170 <_strtod_l+0x1b8>
 800e11a:	9905      	ldr	r1, [sp, #20]
 800e11c:	462a      	mov	r2, r5
 800e11e:	f003 fa3e 	bl	801159e <strncmp>
 800e122:	b398      	cbz	r0, 800e18c <_strtod_l+0x1d4>
 800e124:	2000      	movs	r0, #0
 800e126:	4632      	mov	r2, r6
 800e128:	463d      	mov	r5, r7
 800e12a:	9005      	str	r0, [sp, #20]
 800e12c:	4603      	mov	r3, r0
 800e12e:	2a65      	cmp	r2, #101	; 0x65
 800e130:	d001      	beq.n	800e136 <_strtod_l+0x17e>
 800e132:	2a45      	cmp	r2, #69	; 0x45
 800e134:	d118      	bne.n	800e168 <_strtod_l+0x1b0>
 800e136:	b91d      	cbnz	r5, 800e140 <_strtod_l+0x188>
 800e138:	9a04      	ldr	r2, [sp, #16]
 800e13a:	4302      	orrs	r2, r0
 800e13c:	d09e      	beq.n	800e07c <_strtod_l+0xc4>
 800e13e:	2500      	movs	r5, #0
 800e140:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800e144:	f108 0201 	add.w	r2, r8, #1
 800e148:	9217      	str	r2, [sp, #92]	; 0x5c
 800e14a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e14e:	2a2b      	cmp	r2, #43	; 0x2b
 800e150:	d075      	beq.n	800e23e <_strtod_l+0x286>
 800e152:	2a2d      	cmp	r2, #45	; 0x2d
 800e154:	d07b      	beq.n	800e24e <_strtod_l+0x296>
 800e156:	f04f 0c00 	mov.w	ip, #0
 800e15a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e15e:	2909      	cmp	r1, #9
 800e160:	f240 8082 	bls.w	800e268 <_strtod_l+0x2b0>
 800e164:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e168:	2600      	movs	r6, #0
 800e16a:	e09d      	b.n	800e2a8 <_strtod_l+0x2f0>
 800e16c:	2300      	movs	r3, #0
 800e16e:	e7c4      	b.n	800e0fa <_strtod_l+0x142>
 800e170:	2f08      	cmp	r7, #8
 800e172:	bfd8      	it	le
 800e174:	9907      	ldrle	r1, [sp, #28]
 800e176:	f100 0001 	add.w	r0, r0, #1
 800e17a:	bfda      	itte	le
 800e17c:	fb02 3301 	mlale	r3, r2, r1, r3
 800e180:	9307      	strle	r3, [sp, #28]
 800e182:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e186:	3701      	adds	r7, #1
 800e188:	9017      	str	r0, [sp, #92]	; 0x5c
 800e18a:	e7bf      	b.n	800e10c <_strtod_l+0x154>
 800e18c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e18e:	195a      	adds	r2, r3, r5
 800e190:	9217      	str	r2, [sp, #92]	; 0x5c
 800e192:	5d5a      	ldrb	r2, [r3, r5]
 800e194:	2f00      	cmp	r7, #0
 800e196:	d037      	beq.n	800e208 <_strtod_l+0x250>
 800e198:	9005      	str	r0, [sp, #20]
 800e19a:	463d      	mov	r5, r7
 800e19c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e1a0:	2b09      	cmp	r3, #9
 800e1a2:	d912      	bls.n	800e1ca <_strtod_l+0x212>
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	e7c2      	b.n	800e12e <_strtod_l+0x176>
 800e1a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e1aa:	1c5a      	adds	r2, r3, #1
 800e1ac:	9217      	str	r2, [sp, #92]	; 0x5c
 800e1ae:	785a      	ldrb	r2, [r3, #1]
 800e1b0:	3001      	adds	r0, #1
 800e1b2:	2a30      	cmp	r2, #48	; 0x30
 800e1b4:	d0f8      	beq.n	800e1a8 <_strtod_l+0x1f0>
 800e1b6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e1ba:	2b08      	cmp	r3, #8
 800e1bc:	f200 84d9 	bhi.w	800eb72 <_strtod_l+0xbba>
 800e1c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e1c2:	9005      	str	r0, [sp, #20]
 800e1c4:	2000      	movs	r0, #0
 800e1c6:	9308      	str	r3, [sp, #32]
 800e1c8:	4605      	mov	r5, r0
 800e1ca:	3a30      	subs	r2, #48	; 0x30
 800e1cc:	f100 0301 	add.w	r3, r0, #1
 800e1d0:	d014      	beq.n	800e1fc <_strtod_l+0x244>
 800e1d2:	9905      	ldr	r1, [sp, #20]
 800e1d4:	4419      	add	r1, r3
 800e1d6:	9105      	str	r1, [sp, #20]
 800e1d8:	462b      	mov	r3, r5
 800e1da:	eb00 0e05 	add.w	lr, r0, r5
 800e1de:	210a      	movs	r1, #10
 800e1e0:	4573      	cmp	r3, lr
 800e1e2:	d113      	bne.n	800e20c <_strtod_l+0x254>
 800e1e4:	182b      	adds	r3, r5, r0
 800e1e6:	2b08      	cmp	r3, #8
 800e1e8:	f105 0501 	add.w	r5, r5, #1
 800e1ec:	4405      	add	r5, r0
 800e1ee:	dc1c      	bgt.n	800e22a <_strtod_l+0x272>
 800e1f0:	9907      	ldr	r1, [sp, #28]
 800e1f2:	230a      	movs	r3, #10
 800e1f4:	fb03 2301 	mla	r3, r3, r1, r2
 800e1f8:	9307      	str	r3, [sp, #28]
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e1fe:	1c51      	adds	r1, r2, #1
 800e200:	9117      	str	r1, [sp, #92]	; 0x5c
 800e202:	7852      	ldrb	r2, [r2, #1]
 800e204:	4618      	mov	r0, r3
 800e206:	e7c9      	b.n	800e19c <_strtod_l+0x1e4>
 800e208:	4638      	mov	r0, r7
 800e20a:	e7d2      	b.n	800e1b2 <_strtod_l+0x1fa>
 800e20c:	2b08      	cmp	r3, #8
 800e20e:	dc04      	bgt.n	800e21a <_strtod_l+0x262>
 800e210:	9e07      	ldr	r6, [sp, #28]
 800e212:	434e      	muls	r6, r1
 800e214:	9607      	str	r6, [sp, #28]
 800e216:	3301      	adds	r3, #1
 800e218:	e7e2      	b.n	800e1e0 <_strtod_l+0x228>
 800e21a:	f103 0c01 	add.w	ip, r3, #1
 800e21e:	f1bc 0f10 	cmp.w	ip, #16
 800e222:	bfd8      	it	le
 800e224:	fb01 f909 	mulle.w	r9, r1, r9
 800e228:	e7f5      	b.n	800e216 <_strtod_l+0x25e>
 800e22a:	2d10      	cmp	r5, #16
 800e22c:	bfdc      	itt	le
 800e22e:	230a      	movle	r3, #10
 800e230:	fb03 2909 	mlale	r9, r3, r9, r2
 800e234:	e7e1      	b.n	800e1fa <_strtod_l+0x242>
 800e236:	2300      	movs	r3, #0
 800e238:	9305      	str	r3, [sp, #20]
 800e23a:	2301      	movs	r3, #1
 800e23c:	e77c      	b.n	800e138 <_strtod_l+0x180>
 800e23e:	f04f 0c00 	mov.w	ip, #0
 800e242:	f108 0202 	add.w	r2, r8, #2
 800e246:	9217      	str	r2, [sp, #92]	; 0x5c
 800e248:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e24c:	e785      	b.n	800e15a <_strtod_l+0x1a2>
 800e24e:	f04f 0c01 	mov.w	ip, #1
 800e252:	e7f6      	b.n	800e242 <_strtod_l+0x28a>
 800e254:	0801315c 	.word	0x0801315c
 800e258:	08012eac 	.word	0x08012eac
 800e25c:	7ff00000 	.word	0x7ff00000
 800e260:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e262:	1c51      	adds	r1, r2, #1
 800e264:	9117      	str	r1, [sp, #92]	; 0x5c
 800e266:	7852      	ldrb	r2, [r2, #1]
 800e268:	2a30      	cmp	r2, #48	; 0x30
 800e26a:	d0f9      	beq.n	800e260 <_strtod_l+0x2a8>
 800e26c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e270:	2908      	cmp	r1, #8
 800e272:	f63f af79 	bhi.w	800e168 <_strtod_l+0x1b0>
 800e276:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e27a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e27c:	9206      	str	r2, [sp, #24]
 800e27e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e280:	1c51      	adds	r1, r2, #1
 800e282:	9117      	str	r1, [sp, #92]	; 0x5c
 800e284:	7852      	ldrb	r2, [r2, #1]
 800e286:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800e28a:	2e09      	cmp	r6, #9
 800e28c:	d937      	bls.n	800e2fe <_strtod_l+0x346>
 800e28e:	9e06      	ldr	r6, [sp, #24]
 800e290:	1b89      	subs	r1, r1, r6
 800e292:	2908      	cmp	r1, #8
 800e294:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e298:	dc02      	bgt.n	800e2a0 <_strtod_l+0x2e8>
 800e29a:	4576      	cmp	r6, lr
 800e29c:	bfa8      	it	ge
 800e29e:	4676      	movge	r6, lr
 800e2a0:	f1bc 0f00 	cmp.w	ip, #0
 800e2a4:	d000      	beq.n	800e2a8 <_strtod_l+0x2f0>
 800e2a6:	4276      	negs	r6, r6
 800e2a8:	2d00      	cmp	r5, #0
 800e2aa:	d14d      	bne.n	800e348 <_strtod_l+0x390>
 800e2ac:	9904      	ldr	r1, [sp, #16]
 800e2ae:	4301      	orrs	r1, r0
 800e2b0:	f47f aec6 	bne.w	800e040 <_strtod_l+0x88>
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	f47f aee1 	bne.w	800e07c <_strtod_l+0xc4>
 800e2ba:	2a69      	cmp	r2, #105	; 0x69
 800e2bc:	d027      	beq.n	800e30e <_strtod_l+0x356>
 800e2be:	dc24      	bgt.n	800e30a <_strtod_l+0x352>
 800e2c0:	2a49      	cmp	r2, #73	; 0x49
 800e2c2:	d024      	beq.n	800e30e <_strtod_l+0x356>
 800e2c4:	2a4e      	cmp	r2, #78	; 0x4e
 800e2c6:	f47f aed9 	bne.w	800e07c <_strtod_l+0xc4>
 800e2ca:	499f      	ldr	r1, [pc, #636]	; (800e548 <_strtod_l+0x590>)
 800e2cc:	a817      	add	r0, sp, #92	; 0x5c
 800e2ce:	f002 f8c3 	bl	8010458 <__match>
 800e2d2:	2800      	cmp	r0, #0
 800e2d4:	f43f aed2 	beq.w	800e07c <_strtod_l+0xc4>
 800e2d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	2b28      	cmp	r3, #40	; 0x28
 800e2de:	d12d      	bne.n	800e33c <_strtod_l+0x384>
 800e2e0:	499a      	ldr	r1, [pc, #616]	; (800e54c <_strtod_l+0x594>)
 800e2e2:	aa1a      	add	r2, sp, #104	; 0x68
 800e2e4:	a817      	add	r0, sp, #92	; 0x5c
 800e2e6:	f002 f8cb 	bl	8010480 <__hexnan>
 800e2ea:	2805      	cmp	r0, #5
 800e2ec:	d126      	bne.n	800e33c <_strtod_l+0x384>
 800e2ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e2f0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800e2f4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e2f8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e2fc:	e6a0      	b.n	800e040 <_strtod_l+0x88>
 800e2fe:	210a      	movs	r1, #10
 800e300:	fb01 2e0e 	mla	lr, r1, lr, r2
 800e304:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e308:	e7b9      	b.n	800e27e <_strtod_l+0x2c6>
 800e30a:	2a6e      	cmp	r2, #110	; 0x6e
 800e30c:	e7db      	b.n	800e2c6 <_strtod_l+0x30e>
 800e30e:	4990      	ldr	r1, [pc, #576]	; (800e550 <_strtod_l+0x598>)
 800e310:	a817      	add	r0, sp, #92	; 0x5c
 800e312:	f002 f8a1 	bl	8010458 <__match>
 800e316:	2800      	cmp	r0, #0
 800e318:	f43f aeb0 	beq.w	800e07c <_strtod_l+0xc4>
 800e31c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e31e:	498d      	ldr	r1, [pc, #564]	; (800e554 <_strtod_l+0x59c>)
 800e320:	3b01      	subs	r3, #1
 800e322:	a817      	add	r0, sp, #92	; 0x5c
 800e324:	9317      	str	r3, [sp, #92]	; 0x5c
 800e326:	f002 f897 	bl	8010458 <__match>
 800e32a:	b910      	cbnz	r0, 800e332 <_strtod_l+0x37a>
 800e32c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e32e:	3301      	adds	r3, #1
 800e330:	9317      	str	r3, [sp, #92]	; 0x5c
 800e332:	f8df b230 	ldr.w	fp, [pc, #560]	; 800e564 <_strtod_l+0x5ac>
 800e336:	f04f 0a00 	mov.w	sl, #0
 800e33a:	e681      	b.n	800e040 <_strtod_l+0x88>
 800e33c:	4886      	ldr	r0, [pc, #536]	; (800e558 <_strtod_l+0x5a0>)
 800e33e:	f003 f8d3 	bl	80114e8 <nan>
 800e342:	ec5b ab10 	vmov	sl, fp, d0
 800e346:	e67b      	b.n	800e040 <_strtod_l+0x88>
 800e348:	9b05      	ldr	r3, [sp, #20]
 800e34a:	9807      	ldr	r0, [sp, #28]
 800e34c:	1af3      	subs	r3, r6, r3
 800e34e:	2f00      	cmp	r7, #0
 800e350:	bf08      	it	eq
 800e352:	462f      	moveq	r7, r5
 800e354:	2d10      	cmp	r5, #16
 800e356:	9306      	str	r3, [sp, #24]
 800e358:	46a8      	mov	r8, r5
 800e35a:	bfa8      	it	ge
 800e35c:	f04f 0810 	movge.w	r8, #16
 800e360:	f7f2 f8f8 	bl	8000554 <__aeabi_ui2d>
 800e364:	2d09      	cmp	r5, #9
 800e366:	4682      	mov	sl, r0
 800e368:	468b      	mov	fp, r1
 800e36a:	dd13      	ble.n	800e394 <_strtod_l+0x3dc>
 800e36c:	4b7b      	ldr	r3, [pc, #492]	; (800e55c <_strtod_l+0x5a4>)
 800e36e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e372:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e376:	f7f2 f967 	bl	8000648 <__aeabi_dmul>
 800e37a:	4682      	mov	sl, r0
 800e37c:	4648      	mov	r0, r9
 800e37e:	468b      	mov	fp, r1
 800e380:	f7f2 f8e8 	bl	8000554 <__aeabi_ui2d>
 800e384:	4602      	mov	r2, r0
 800e386:	460b      	mov	r3, r1
 800e388:	4650      	mov	r0, sl
 800e38a:	4659      	mov	r1, fp
 800e38c:	f7f1 ffa6 	bl	80002dc <__adddf3>
 800e390:	4682      	mov	sl, r0
 800e392:	468b      	mov	fp, r1
 800e394:	2d0f      	cmp	r5, #15
 800e396:	dc38      	bgt.n	800e40a <_strtod_l+0x452>
 800e398:	9b06      	ldr	r3, [sp, #24]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	f43f ae50 	beq.w	800e040 <_strtod_l+0x88>
 800e3a0:	dd24      	ble.n	800e3ec <_strtod_l+0x434>
 800e3a2:	2b16      	cmp	r3, #22
 800e3a4:	dc0b      	bgt.n	800e3be <_strtod_l+0x406>
 800e3a6:	496d      	ldr	r1, [pc, #436]	; (800e55c <_strtod_l+0x5a4>)
 800e3a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e3ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3b0:	4652      	mov	r2, sl
 800e3b2:	465b      	mov	r3, fp
 800e3b4:	f7f2 f948 	bl	8000648 <__aeabi_dmul>
 800e3b8:	4682      	mov	sl, r0
 800e3ba:	468b      	mov	fp, r1
 800e3bc:	e640      	b.n	800e040 <_strtod_l+0x88>
 800e3be:	9a06      	ldr	r2, [sp, #24]
 800e3c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e3c4:	4293      	cmp	r3, r2
 800e3c6:	db20      	blt.n	800e40a <_strtod_l+0x452>
 800e3c8:	4c64      	ldr	r4, [pc, #400]	; (800e55c <_strtod_l+0x5a4>)
 800e3ca:	f1c5 050f 	rsb	r5, r5, #15
 800e3ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e3d2:	4652      	mov	r2, sl
 800e3d4:	465b      	mov	r3, fp
 800e3d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3da:	f7f2 f935 	bl	8000648 <__aeabi_dmul>
 800e3de:	9b06      	ldr	r3, [sp, #24]
 800e3e0:	1b5d      	subs	r5, r3, r5
 800e3e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e3e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e3ea:	e7e3      	b.n	800e3b4 <_strtod_l+0x3fc>
 800e3ec:	9b06      	ldr	r3, [sp, #24]
 800e3ee:	3316      	adds	r3, #22
 800e3f0:	db0b      	blt.n	800e40a <_strtod_l+0x452>
 800e3f2:	9b05      	ldr	r3, [sp, #20]
 800e3f4:	1b9e      	subs	r6, r3, r6
 800e3f6:	4b59      	ldr	r3, [pc, #356]	; (800e55c <_strtod_l+0x5a4>)
 800e3f8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800e3fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e400:	4650      	mov	r0, sl
 800e402:	4659      	mov	r1, fp
 800e404:	f7f2 fa4a 	bl	800089c <__aeabi_ddiv>
 800e408:	e7d6      	b.n	800e3b8 <_strtod_l+0x400>
 800e40a:	9b06      	ldr	r3, [sp, #24]
 800e40c:	eba5 0808 	sub.w	r8, r5, r8
 800e410:	4498      	add	r8, r3
 800e412:	f1b8 0f00 	cmp.w	r8, #0
 800e416:	dd74      	ble.n	800e502 <_strtod_l+0x54a>
 800e418:	f018 030f 	ands.w	r3, r8, #15
 800e41c:	d00a      	beq.n	800e434 <_strtod_l+0x47c>
 800e41e:	494f      	ldr	r1, [pc, #316]	; (800e55c <_strtod_l+0x5a4>)
 800e420:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e424:	4652      	mov	r2, sl
 800e426:	465b      	mov	r3, fp
 800e428:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e42c:	f7f2 f90c 	bl	8000648 <__aeabi_dmul>
 800e430:	4682      	mov	sl, r0
 800e432:	468b      	mov	fp, r1
 800e434:	f038 080f 	bics.w	r8, r8, #15
 800e438:	d04f      	beq.n	800e4da <_strtod_l+0x522>
 800e43a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e43e:	dd22      	ble.n	800e486 <_strtod_l+0x4ce>
 800e440:	2500      	movs	r5, #0
 800e442:	462e      	mov	r6, r5
 800e444:	9507      	str	r5, [sp, #28]
 800e446:	9505      	str	r5, [sp, #20]
 800e448:	2322      	movs	r3, #34	; 0x22
 800e44a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800e564 <_strtod_l+0x5ac>
 800e44e:	6023      	str	r3, [r4, #0]
 800e450:	f04f 0a00 	mov.w	sl, #0
 800e454:	9b07      	ldr	r3, [sp, #28]
 800e456:	2b00      	cmp	r3, #0
 800e458:	f43f adf2 	beq.w	800e040 <_strtod_l+0x88>
 800e45c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e45e:	4620      	mov	r0, r4
 800e460:	f002 f970 	bl	8010744 <_Bfree>
 800e464:	9905      	ldr	r1, [sp, #20]
 800e466:	4620      	mov	r0, r4
 800e468:	f002 f96c 	bl	8010744 <_Bfree>
 800e46c:	4631      	mov	r1, r6
 800e46e:	4620      	mov	r0, r4
 800e470:	f002 f968 	bl	8010744 <_Bfree>
 800e474:	9907      	ldr	r1, [sp, #28]
 800e476:	4620      	mov	r0, r4
 800e478:	f002 f964 	bl	8010744 <_Bfree>
 800e47c:	4629      	mov	r1, r5
 800e47e:	4620      	mov	r0, r4
 800e480:	f002 f960 	bl	8010744 <_Bfree>
 800e484:	e5dc      	b.n	800e040 <_strtod_l+0x88>
 800e486:	4b36      	ldr	r3, [pc, #216]	; (800e560 <_strtod_l+0x5a8>)
 800e488:	9304      	str	r3, [sp, #16]
 800e48a:	2300      	movs	r3, #0
 800e48c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e490:	4650      	mov	r0, sl
 800e492:	4659      	mov	r1, fp
 800e494:	4699      	mov	r9, r3
 800e496:	f1b8 0f01 	cmp.w	r8, #1
 800e49a:	dc21      	bgt.n	800e4e0 <_strtod_l+0x528>
 800e49c:	b10b      	cbz	r3, 800e4a2 <_strtod_l+0x4ea>
 800e49e:	4682      	mov	sl, r0
 800e4a0:	468b      	mov	fp, r1
 800e4a2:	4b2f      	ldr	r3, [pc, #188]	; (800e560 <_strtod_l+0x5a8>)
 800e4a4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e4a8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e4ac:	4652      	mov	r2, sl
 800e4ae:	465b      	mov	r3, fp
 800e4b0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e4b4:	f7f2 f8c8 	bl	8000648 <__aeabi_dmul>
 800e4b8:	4b2a      	ldr	r3, [pc, #168]	; (800e564 <_strtod_l+0x5ac>)
 800e4ba:	460a      	mov	r2, r1
 800e4bc:	400b      	ands	r3, r1
 800e4be:	492a      	ldr	r1, [pc, #168]	; (800e568 <_strtod_l+0x5b0>)
 800e4c0:	428b      	cmp	r3, r1
 800e4c2:	4682      	mov	sl, r0
 800e4c4:	d8bc      	bhi.n	800e440 <_strtod_l+0x488>
 800e4c6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e4ca:	428b      	cmp	r3, r1
 800e4cc:	bf86      	itte	hi
 800e4ce:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800e56c <_strtod_l+0x5b4>
 800e4d2:	f04f 3aff 	movhi.w	sl, #4294967295
 800e4d6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e4da:	2300      	movs	r3, #0
 800e4dc:	9304      	str	r3, [sp, #16]
 800e4de:	e084      	b.n	800e5ea <_strtod_l+0x632>
 800e4e0:	f018 0f01 	tst.w	r8, #1
 800e4e4:	d005      	beq.n	800e4f2 <_strtod_l+0x53a>
 800e4e6:	9b04      	ldr	r3, [sp, #16]
 800e4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ec:	f7f2 f8ac 	bl	8000648 <__aeabi_dmul>
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	9a04      	ldr	r2, [sp, #16]
 800e4f4:	3208      	adds	r2, #8
 800e4f6:	f109 0901 	add.w	r9, r9, #1
 800e4fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e4fe:	9204      	str	r2, [sp, #16]
 800e500:	e7c9      	b.n	800e496 <_strtod_l+0x4de>
 800e502:	d0ea      	beq.n	800e4da <_strtod_l+0x522>
 800e504:	f1c8 0800 	rsb	r8, r8, #0
 800e508:	f018 020f 	ands.w	r2, r8, #15
 800e50c:	d00a      	beq.n	800e524 <_strtod_l+0x56c>
 800e50e:	4b13      	ldr	r3, [pc, #76]	; (800e55c <_strtod_l+0x5a4>)
 800e510:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e514:	4650      	mov	r0, sl
 800e516:	4659      	mov	r1, fp
 800e518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51c:	f7f2 f9be 	bl	800089c <__aeabi_ddiv>
 800e520:	4682      	mov	sl, r0
 800e522:	468b      	mov	fp, r1
 800e524:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e528:	d0d7      	beq.n	800e4da <_strtod_l+0x522>
 800e52a:	f1b8 0f1f 	cmp.w	r8, #31
 800e52e:	dd1f      	ble.n	800e570 <_strtod_l+0x5b8>
 800e530:	2500      	movs	r5, #0
 800e532:	462e      	mov	r6, r5
 800e534:	9507      	str	r5, [sp, #28]
 800e536:	9505      	str	r5, [sp, #20]
 800e538:	2322      	movs	r3, #34	; 0x22
 800e53a:	f04f 0a00 	mov.w	sl, #0
 800e53e:	f04f 0b00 	mov.w	fp, #0
 800e542:	6023      	str	r3, [r4, #0]
 800e544:	e786      	b.n	800e454 <_strtod_l+0x49c>
 800e546:	bf00      	nop
 800e548:	08012e85 	.word	0x08012e85
 800e54c:	08012ec0 	.word	0x08012ec0
 800e550:	08012e7d 	.word	0x08012e7d
 800e554:	08013004 	.word	0x08013004
 800e558:	08013318 	.word	0x08013318
 800e55c:	080131f8 	.word	0x080131f8
 800e560:	080131d0 	.word	0x080131d0
 800e564:	7ff00000 	.word	0x7ff00000
 800e568:	7ca00000 	.word	0x7ca00000
 800e56c:	7fefffff 	.word	0x7fefffff
 800e570:	f018 0310 	ands.w	r3, r8, #16
 800e574:	bf18      	it	ne
 800e576:	236a      	movne	r3, #106	; 0x6a
 800e578:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800e928 <_strtod_l+0x970>
 800e57c:	9304      	str	r3, [sp, #16]
 800e57e:	4650      	mov	r0, sl
 800e580:	4659      	mov	r1, fp
 800e582:	2300      	movs	r3, #0
 800e584:	f018 0f01 	tst.w	r8, #1
 800e588:	d004      	beq.n	800e594 <_strtod_l+0x5dc>
 800e58a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e58e:	f7f2 f85b 	bl	8000648 <__aeabi_dmul>
 800e592:	2301      	movs	r3, #1
 800e594:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e598:	f109 0908 	add.w	r9, r9, #8
 800e59c:	d1f2      	bne.n	800e584 <_strtod_l+0x5cc>
 800e59e:	b10b      	cbz	r3, 800e5a4 <_strtod_l+0x5ec>
 800e5a0:	4682      	mov	sl, r0
 800e5a2:	468b      	mov	fp, r1
 800e5a4:	9b04      	ldr	r3, [sp, #16]
 800e5a6:	b1c3      	cbz	r3, 800e5da <_strtod_l+0x622>
 800e5a8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e5ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	4659      	mov	r1, fp
 800e5b4:	dd11      	ble.n	800e5da <_strtod_l+0x622>
 800e5b6:	2b1f      	cmp	r3, #31
 800e5b8:	f340 8124 	ble.w	800e804 <_strtod_l+0x84c>
 800e5bc:	2b34      	cmp	r3, #52	; 0x34
 800e5be:	bfde      	ittt	le
 800e5c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e5c4:	f04f 33ff 	movle.w	r3, #4294967295
 800e5c8:	fa03 f202 	lslle.w	r2, r3, r2
 800e5cc:	f04f 0a00 	mov.w	sl, #0
 800e5d0:	bfcc      	ite	gt
 800e5d2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e5d6:	ea02 0b01 	andle.w	fp, r2, r1
 800e5da:	2200      	movs	r2, #0
 800e5dc:	2300      	movs	r3, #0
 800e5de:	4650      	mov	r0, sl
 800e5e0:	4659      	mov	r1, fp
 800e5e2:	f7f2 fa99 	bl	8000b18 <__aeabi_dcmpeq>
 800e5e6:	2800      	cmp	r0, #0
 800e5e8:	d1a2      	bne.n	800e530 <_strtod_l+0x578>
 800e5ea:	9b07      	ldr	r3, [sp, #28]
 800e5ec:	9300      	str	r3, [sp, #0]
 800e5ee:	9908      	ldr	r1, [sp, #32]
 800e5f0:	462b      	mov	r3, r5
 800e5f2:	463a      	mov	r2, r7
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	f002 f90d 	bl	8010814 <__s2b>
 800e5fa:	9007      	str	r0, [sp, #28]
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	f43f af1f 	beq.w	800e440 <_strtod_l+0x488>
 800e602:	9b05      	ldr	r3, [sp, #20]
 800e604:	1b9e      	subs	r6, r3, r6
 800e606:	9b06      	ldr	r3, [sp, #24]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	bfb4      	ite	lt
 800e60c:	4633      	movlt	r3, r6
 800e60e:	2300      	movge	r3, #0
 800e610:	930c      	str	r3, [sp, #48]	; 0x30
 800e612:	9b06      	ldr	r3, [sp, #24]
 800e614:	2500      	movs	r5, #0
 800e616:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e61a:	9312      	str	r3, [sp, #72]	; 0x48
 800e61c:	462e      	mov	r6, r5
 800e61e:	9b07      	ldr	r3, [sp, #28]
 800e620:	4620      	mov	r0, r4
 800e622:	6859      	ldr	r1, [r3, #4]
 800e624:	f002 f84e 	bl	80106c4 <_Balloc>
 800e628:	9005      	str	r0, [sp, #20]
 800e62a:	2800      	cmp	r0, #0
 800e62c:	f43f af0c 	beq.w	800e448 <_strtod_l+0x490>
 800e630:	9b07      	ldr	r3, [sp, #28]
 800e632:	691a      	ldr	r2, [r3, #16]
 800e634:	3202      	adds	r2, #2
 800e636:	f103 010c 	add.w	r1, r3, #12
 800e63a:	0092      	lsls	r2, r2, #2
 800e63c:	300c      	adds	r0, #12
 800e63e:	f7fe ff91 	bl	800d564 <memcpy>
 800e642:	ec4b ab10 	vmov	d0, sl, fp
 800e646:	aa1a      	add	r2, sp, #104	; 0x68
 800e648:	a919      	add	r1, sp, #100	; 0x64
 800e64a:	4620      	mov	r0, r4
 800e64c:	f002 fc28 	bl	8010ea0 <__d2b>
 800e650:	ec4b ab18 	vmov	d8, sl, fp
 800e654:	9018      	str	r0, [sp, #96]	; 0x60
 800e656:	2800      	cmp	r0, #0
 800e658:	f43f aef6 	beq.w	800e448 <_strtod_l+0x490>
 800e65c:	2101      	movs	r1, #1
 800e65e:	4620      	mov	r0, r4
 800e660:	f002 f972 	bl	8010948 <__i2b>
 800e664:	4606      	mov	r6, r0
 800e666:	2800      	cmp	r0, #0
 800e668:	f43f aeee 	beq.w	800e448 <_strtod_l+0x490>
 800e66c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e66e:	9904      	ldr	r1, [sp, #16]
 800e670:	2b00      	cmp	r3, #0
 800e672:	bfab      	itete	ge
 800e674:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800e676:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800e678:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e67a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800e67e:	bfac      	ite	ge
 800e680:	eb03 0902 	addge.w	r9, r3, r2
 800e684:	1ad7      	sublt	r7, r2, r3
 800e686:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e688:	eba3 0801 	sub.w	r8, r3, r1
 800e68c:	4490      	add	r8, r2
 800e68e:	4ba1      	ldr	r3, [pc, #644]	; (800e914 <_strtod_l+0x95c>)
 800e690:	f108 38ff 	add.w	r8, r8, #4294967295
 800e694:	4598      	cmp	r8, r3
 800e696:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e69a:	f280 80c7 	bge.w	800e82c <_strtod_l+0x874>
 800e69e:	eba3 0308 	sub.w	r3, r3, r8
 800e6a2:	2b1f      	cmp	r3, #31
 800e6a4:	eba2 0203 	sub.w	r2, r2, r3
 800e6a8:	f04f 0101 	mov.w	r1, #1
 800e6ac:	f300 80b1 	bgt.w	800e812 <_strtod_l+0x85a>
 800e6b0:	fa01 f303 	lsl.w	r3, r1, r3
 800e6b4:	930d      	str	r3, [sp, #52]	; 0x34
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	9308      	str	r3, [sp, #32]
 800e6ba:	eb09 0802 	add.w	r8, r9, r2
 800e6be:	9b04      	ldr	r3, [sp, #16]
 800e6c0:	45c1      	cmp	r9, r8
 800e6c2:	4417      	add	r7, r2
 800e6c4:	441f      	add	r7, r3
 800e6c6:	464b      	mov	r3, r9
 800e6c8:	bfa8      	it	ge
 800e6ca:	4643      	movge	r3, r8
 800e6cc:	42bb      	cmp	r3, r7
 800e6ce:	bfa8      	it	ge
 800e6d0:	463b      	movge	r3, r7
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	bfc2      	ittt	gt
 800e6d6:	eba8 0803 	subgt.w	r8, r8, r3
 800e6da:	1aff      	subgt	r7, r7, r3
 800e6dc:	eba9 0903 	subgt.w	r9, r9, r3
 800e6e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	dd17      	ble.n	800e716 <_strtod_l+0x75e>
 800e6e6:	4631      	mov	r1, r6
 800e6e8:	461a      	mov	r2, r3
 800e6ea:	4620      	mov	r0, r4
 800e6ec:	f002 f9ec 	bl	8010ac8 <__pow5mult>
 800e6f0:	4606      	mov	r6, r0
 800e6f2:	2800      	cmp	r0, #0
 800e6f4:	f43f aea8 	beq.w	800e448 <_strtod_l+0x490>
 800e6f8:	4601      	mov	r1, r0
 800e6fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	f002 f939 	bl	8010974 <__multiply>
 800e702:	900b      	str	r0, [sp, #44]	; 0x2c
 800e704:	2800      	cmp	r0, #0
 800e706:	f43f ae9f 	beq.w	800e448 <_strtod_l+0x490>
 800e70a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e70c:	4620      	mov	r0, r4
 800e70e:	f002 f819 	bl	8010744 <_Bfree>
 800e712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e714:	9318      	str	r3, [sp, #96]	; 0x60
 800e716:	f1b8 0f00 	cmp.w	r8, #0
 800e71a:	f300 808c 	bgt.w	800e836 <_strtod_l+0x87e>
 800e71e:	9b06      	ldr	r3, [sp, #24]
 800e720:	2b00      	cmp	r3, #0
 800e722:	dd08      	ble.n	800e736 <_strtod_l+0x77e>
 800e724:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e726:	9905      	ldr	r1, [sp, #20]
 800e728:	4620      	mov	r0, r4
 800e72a:	f002 f9cd 	bl	8010ac8 <__pow5mult>
 800e72e:	9005      	str	r0, [sp, #20]
 800e730:	2800      	cmp	r0, #0
 800e732:	f43f ae89 	beq.w	800e448 <_strtod_l+0x490>
 800e736:	2f00      	cmp	r7, #0
 800e738:	dd08      	ble.n	800e74c <_strtod_l+0x794>
 800e73a:	9905      	ldr	r1, [sp, #20]
 800e73c:	463a      	mov	r2, r7
 800e73e:	4620      	mov	r0, r4
 800e740:	f002 fa1c 	bl	8010b7c <__lshift>
 800e744:	9005      	str	r0, [sp, #20]
 800e746:	2800      	cmp	r0, #0
 800e748:	f43f ae7e 	beq.w	800e448 <_strtod_l+0x490>
 800e74c:	f1b9 0f00 	cmp.w	r9, #0
 800e750:	dd08      	ble.n	800e764 <_strtod_l+0x7ac>
 800e752:	4631      	mov	r1, r6
 800e754:	464a      	mov	r2, r9
 800e756:	4620      	mov	r0, r4
 800e758:	f002 fa10 	bl	8010b7c <__lshift>
 800e75c:	4606      	mov	r6, r0
 800e75e:	2800      	cmp	r0, #0
 800e760:	f43f ae72 	beq.w	800e448 <_strtod_l+0x490>
 800e764:	9a05      	ldr	r2, [sp, #20]
 800e766:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e768:	4620      	mov	r0, r4
 800e76a:	f002 fa93 	bl	8010c94 <__mdiff>
 800e76e:	4605      	mov	r5, r0
 800e770:	2800      	cmp	r0, #0
 800e772:	f43f ae69 	beq.w	800e448 <_strtod_l+0x490>
 800e776:	68c3      	ldr	r3, [r0, #12]
 800e778:	930b      	str	r3, [sp, #44]	; 0x2c
 800e77a:	2300      	movs	r3, #0
 800e77c:	60c3      	str	r3, [r0, #12]
 800e77e:	4631      	mov	r1, r6
 800e780:	f002 fa6c 	bl	8010c5c <__mcmp>
 800e784:	2800      	cmp	r0, #0
 800e786:	da60      	bge.n	800e84a <_strtod_l+0x892>
 800e788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e78a:	ea53 030a 	orrs.w	r3, r3, sl
 800e78e:	f040 8082 	bne.w	800e896 <_strtod_l+0x8de>
 800e792:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e796:	2b00      	cmp	r3, #0
 800e798:	d17d      	bne.n	800e896 <_strtod_l+0x8de>
 800e79a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e79e:	0d1b      	lsrs	r3, r3, #20
 800e7a0:	051b      	lsls	r3, r3, #20
 800e7a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e7a6:	d976      	bls.n	800e896 <_strtod_l+0x8de>
 800e7a8:	696b      	ldr	r3, [r5, #20]
 800e7aa:	b913      	cbnz	r3, 800e7b2 <_strtod_l+0x7fa>
 800e7ac:	692b      	ldr	r3, [r5, #16]
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	dd71      	ble.n	800e896 <_strtod_l+0x8de>
 800e7b2:	4629      	mov	r1, r5
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	f002 f9e0 	bl	8010b7c <__lshift>
 800e7bc:	4631      	mov	r1, r6
 800e7be:	4605      	mov	r5, r0
 800e7c0:	f002 fa4c 	bl	8010c5c <__mcmp>
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	dd66      	ble.n	800e896 <_strtod_l+0x8de>
 800e7c8:	9904      	ldr	r1, [sp, #16]
 800e7ca:	4a53      	ldr	r2, [pc, #332]	; (800e918 <_strtod_l+0x960>)
 800e7cc:	465b      	mov	r3, fp
 800e7ce:	2900      	cmp	r1, #0
 800e7d0:	f000 8081 	beq.w	800e8d6 <_strtod_l+0x91e>
 800e7d4:	ea02 010b 	and.w	r1, r2, fp
 800e7d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e7dc:	dc7b      	bgt.n	800e8d6 <_strtod_l+0x91e>
 800e7de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e7e2:	f77f aea9 	ble.w	800e538 <_strtod_l+0x580>
 800e7e6:	4b4d      	ldr	r3, [pc, #308]	; (800e91c <_strtod_l+0x964>)
 800e7e8:	4650      	mov	r0, sl
 800e7ea:	4659      	mov	r1, fp
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	f7f1 ff2b 	bl	8000648 <__aeabi_dmul>
 800e7f2:	460b      	mov	r3, r1
 800e7f4:	4303      	orrs	r3, r0
 800e7f6:	bf08      	it	eq
 800e7f8:	2322      	moveq	r3, #34	; 0x22
 800e7fa:	4682      	mov	sl, r0
 800e7fc:	468b      	mov	fp, r1
 800e7fe:	bf08      	it	eq
 800e800:	6023      	streq	r3, [r4, #0]
 800e802:	e62b      	b.n	800e45c <_strtod_l+0x4a4>
 800e804:	f04f 32ff 	mov.w	r2, #4294967295
 800e808:	fa02 f303 	lsl.w	r3, r2, r3
 800e80c:	ea03 0a0a 	and.w	sl, r3, sl
 800e810:	e6e3      	b.n	800e5da <_strtod_l+0x622>
 800e812:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e816:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e81a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e81e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e822:	fa01 f308 	lsl.w	r3, r1, r8
 800e826:	9308      	str	r3, [sp, #32]
 800e828:	910d      	str	r1, [sp, #52]	; 0x34
 800e82a:	e746      	b.n	800e6ba <_strtod_l+0x702>
 800e82c:	2300      	movs	r3, #0
 800e82e:	9308      	str	r3, [sp, #32]
 800e830:	2301      	movs	r3, #1
 800e832:	930d      	str	r3, [sp, #52]	; 0x34
 800e834:	e741      	b.n	800e6ba <_strtod_l+0x702>
 800e836:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e838:	4642      	mov	r2, r8
 800e83a:	4620      	mov	r0, r4
 800e83c:	f002 f99e 	bl	8010b7c <__lshift>
 800e840:	9018      	str	r0, [sp, #96]	; 0x60
 800e842:	2800      	cmp	r0, #0
 800e844:	f47f af6b 	bne.w	800e71e <_strtod_l+0x766>
 800e848:	e5fe      	b.n	800e448 <_strtod_l+0x490>
 800e84a:	465f      	mov	r7, fp
 800e84c:	d16e      	bne.n	800e92c <_strtod_l+0x974>
 800e84e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e850:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e854:	b342      	cbz	r2, 800e8a8 <_strtod_l+0x8f0>
 800e856:	4a32      	ldr	r2, [pc, #200]	; (800e920 <_strtod_l+0x968>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d128      	bne.n	800e8ae <_strtod_l+0x8f6>
 800e85c:	9b04      	ldr	r3, [sp, #16]
 800e85e:	4651      	mov	r1, sl
 800e860:	b1eb      	cbz	r3, 800e89e <_strtod_l+0x8e6>
 800e862:	4b2d      	ldr	r3, [pc, #180]	; (800e918 <_strtod_l+0x960>)
 800e864:	403b      	ands	r3, r7
 800e866:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e86a:	f04f 32ff 	mov.w	r2, #4294967295
 800e86e:	d819      	bhi.n	800e8a4 <_strtod_l+0x8ec>
 800e870:	0d1b      	lsrs	r3, r3, #20
 800e872:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e876:	fa02 f303 	lsl.w	r3, r2, r3
 800e87a:	4299      	cmp	r1, r3
 800e87c:	d117      	bne.n	800e8ae <_strtod_l+0x8f6>
 800e87e:	4b29      	ldr	r3, [pc, #164]	; (800e924 <_strtod_l+0x96c>)
 800e880:	429f      	cmp	r7, r3
 800e882:	d102      	bne.n	800e88a <_strtod_l+0x8d2>
 800e884:	3101      	adds	r1, #1
 800e886:	f43f addf 	beq.w	800e448 <_strtod_l+0x490>
 800e88a:	4b23      	ldr	r3, [pc, #140]	; (800e918 <_strtod_l+0x960>)
 800e88c:	403b      	ands	r3, r7
 800e88e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e892:	f04f 0a00 	mov.w	sl, #0
 800e896:	9b04      	ldr	r3, [sp, #16]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d1a4      	bne.n	800e7e6 <_strtod_l+0x82e>
 800e89c:	e5de      	b.n	800e45c <_strtod_l+0x4a4>
 800e89e:	f04f 33ff 	mov.w	r3, #4294967295
 800e8a2:	e7ea      	b.n	800e87a <_strtod_l+0x8c2>
 800e8a4:	4613      	mov	r3, r2
 800e8a6:	e7e8      	b.n	800e87a <_strtod_l+0x8c2>
 800e8a8:	ea53 030a 	orrs.w	r3, r3, sl
 800e8ac:	d08c      	beq.n	800e7c8 <_strtod_l+0x810>
 800e8ae:	9b08      	ldr	r3, [sp, #32]
 800e8b0:	b1db      	cbz	r3, 800e8ea <_strtod_l+0x932>
 800e8b2:	423b      	tst	r3, r7
 800e8b4:	d0ef      	beq.n	800e896 <_strtod_l+0x8de>
 800e8b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8b8:	9a04      	ldr	r2, [sp, #16]
 800e8ba:	4650      	mov	r0, sl
 800e8bc:	4659      	mov	r1, fp
 800e8be:	b1c3      	cbz	r3, 800e8f2 <_strtod_l+0x93a>
 800e8c0:	f7ff fb5e 	bl	800df80 <sulp>
 800e8c4:	4602      	mov	r2, r0
 800e8c6:	460b      	mov	r3, r1
 800e8c8:	ec51 0b18 	vmov	r0, r1, d8
 800e8cc:	f7f1 fd06 	bl	80002dc <__adddf3>
 800e8d0:	4682      	mov	sl, r0
 800e8d2:	468b      	mov	fp, r1
 800e8d4:	e7df      	b.n	800e896 <_strtod_l+0x8de>
 800e8d6:	4013      	ands	r3, r2
 800e8d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e8dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e8e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e8e4:	f04f 3aff 	mov.w	sl, #4294967295
 800e8e8:	e7d5      	b.n	800e896 <_strtod_l+0x8de>
 800e8ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e8ec:	ea13 0f0a 	tst.w	r3, sl
 800e8f0:	e7e0      	b.n	800e8b4 <_strtod_l+0x8fc>
 800e8f2:	f7ff fb45 	bl	800df80 <sulp>
 800e8f6:	4602      	mov	r2, r0
 800e8f8:	460b      	mov	r3, r1
 800e8fa:	ec51 0b18 	vmov	r0, r1, d8
 800e8fe:	f7f1 fceb 	bl	80002d8 <__aeabi_dsub>
 800e902:	2200      	movs	r2, #0
 800e904:	2300      	movs	r3, #0
 800e906:	4682      	mov	sl, r0
 800e908:	468b      	mov	fp, r1
 800e90a:	f7f2 f905 	bl	8000b18 <__aeabi_dcmpeq>
 800e90e:	2800      	cmp	r0, #0
 800e910:	d0c1      	beq.n	800e896 <_strtod_l+0x8de>
 800e912:	e611      	b.n	800e538 <_strtod_l+0x580>
 800e914:	fffffc02 	.word	0xfffffc02
 800e918:	7ff00000 	.word	0x7ff00000
 800e91c:	39500000 	.word	0x39500000
 800e920:	000fffff 	.word	0x000fffff
 800e924:	7fefffff 	.word	0x7fefffff
 800e928:	08012ed8 	.word	0x08012ed8
 800e92c:	4631      	mov	r1, r6
 800e92e:	4628      	mov	r0, r5
 800e930:	f002 fb12 	bl	8010f58 <__ratio>
 800e934:	ec59 8b10 	vmov	r8, r9, d0
 800e938:	ee10 0a10 	vmov	r0, s0
 800e93c:	2200      	movs	r2, #0
 800e93e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e942:	4649      	mov	r1, r9
 800e944:	f7f2 f8fc 	bl	8000b40 <__aeabi_dcmple>
 800e948:	2800      	cmp	r0, #0
 800e94a:	d07a      	beq.n	800ea42 <_strtod_l+0xa8a>
 800e94c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d04a      	beq.n	800e9e8 <_strtod_l+0xa30>
 800e952:	4b95      	ldr	r3, [pc, #596]	; (800eba8 <_strtod_l+0xbf0>)
 800e954:	2200      	movs	r2, #0
 800e956:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e95a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800eba8 <_strtod_l+0xbf0>
 800e95e:	f04f 0800 	mov.w	r8, #0
 800e962:	4b92      	ldr	r3, [pc, #584]	; (800ebac <_strtod_l+0xbf4>)
 800e964:	403b      	ands	r3, r7
 800e966:	930d      	str	r3, [sp, #52]	; 0x34
 800e968:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e96a:	4b91      	ldr	r3, [pc, #580]	; (800ebb0 <_strtod_l+0xbf8>)
 800e96c:	429a      	cmp	r2, r3
 800e96e:	f040 80b0 	bne.w	800ead2 <_strtod_l+0xb1a>
 800e972:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e976:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e97a:	ec4b ab10 	vmov	d0, sl, fp
 800e97e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e982:	f002 fa11 	bl	8010da8 <__ulp>
 800e986:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e98a:	ec53 2b10 	vmov	r2, r3, d0
 800e98e:	f7f1 fe5b 	bl	8000648 <__aeabi_dmul>
 800e992:	4652      	mov	r2, sl
 800e994:	465b      	mov	r3, fp
 800e996:	f7f1 fca1 	bl	80002dc <__adddf3>
 800e99a:	460b      	mov	r3, r1
 800e99c:	4983      	ldr	r1, [pc, #524]	; (800ebac <_strtod_l+0xbf4>)
 800e99e:	4a85      	ldr	r2, [pc, #532]	; (800ebb4 <_strtod_l+0xbfc>)
 800e9a0:	4019      	ands	r1, r3
 800e9a2:	4291      	cmp	r1, r2
 800e9a4:	4682      	mov	sl, r0
 800e9a6:	d960      	bls.n	800ea6a <_strtod_l+0xab2>
 800e9a8:	ee18 3a90 	vmov	r3, s17
 800e9ac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e9b0:	4293      	cmp	r3, r2
 800e9b2:	d104      	bne.n	800e9be <_strtod_l+0xa06>
 800e9b4:	ee18 3a10 	vmov	r3, s16
 800e9b8:	3301      	adds	r3, #1
 800e9ba:	f43f ad45 	beq.w	800e448 <_strtod_l+0x490>
 800e9be:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ebc0 <_strtod_l+0xc08>
 800e9c2:	f04f 3aff 	mov.w	sl, #4294967295
 800e9c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e9c8:	4620      	mov	r0, r4
 800e9ca:	f001 febb 	bl	8010744 <_Bfree>
 800e9ce:	9905      	ldr	r1, [sp, #20]
 800e9d0:	4620      	mov	r0, r4
 800e9d2:	f001 feb7 	bl	8010744 <_Bfree>
 800e9d6:	4631      	mov	r1, r6
 800e9d8:	4620      	mov	r0, r4
 800e9da:	f001 feb3 	bl	8010744 <_Bfree>
 800e9de:	4629      	mov	r1, r5
 800e9e0:	4620      	mov	r0, r4
 800e9e2:	f001 feaf 	bl	8010744 <_Bfree>
 800e9e6:	e61a      	b.n	800e61e <_strtod_l+0x666>
 800e9e8:	f1ba 0f00 	cmp.w	sl, #0
 800e9ec:	d11b      	bne.n	800ea26 <_strtod_l+0xa6e>
 800e9ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e9f2:	b9f3      	cbnz	r3, 800ea32 <_strtod_l+0xa7a>
 800e9f4:	4b6c      	ldr	r3, [pc, #432]	; (800eba8 <_strtod_l+0xbf0>)
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	4640      	mov	r0, r8
 800e9fa:	4649      	mov	r1, r9
 800e9fc:	f7f2 f896 	bl	8000b2c <__aeabi_dcmplt>
 800ea00:	b9d0      	cbnz	r0, 800ea38 <_strtod_l+0xa80>
 800ea02:	4640      	mov	r0, r8
 800ea04:	4649      	mov	r1, r9
 800ea06:	4b6c      	ldr	r3, [pc, #432]	; (800ebb8 <_strtod_l+0xc00>)
 800ea08:	2200      	movs	r2, #0
 800ea0a:	f7f1 fe1d 	bl	8000648 <__aeabi_dmul>
 800ea0e:	4680      	mov	r8, r0
 800ea10:	4689      	mov	r9, r1
 800ea12:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ea16:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ea1a:	9315      	str	r3, [sp, #84]	; 0x54
 800ea1c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ea20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ea24:	e79d      	b.n	800e962 <_strtod_l+0x9aa>
 800ea26:	f1ba 0f01 	cmp.w	sl, #1
 800ea2a:	d102      	bne.n	800ea32 <_strtod_l+0xa7a>
 800ea2c:	2f00      	cmp	r7, #0
 800ea2e:	f43f ad83 	beq.w	800e538 <_strtod_l+0x580>
 800ea32:	4b62      	ldr	r3, [pc, #392]	; (800ebbc <_strtod_l+0xc04>)
 800ea34:	2200      	movs	r2, #0
 800ea36:	e78e      	b.n	800e956 <_strtod_l+0x99e>
 800ea38:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ebb8 <_strtod_l+0xc00>
 800ea3c:	f04f 0800 	mov.w	r8, #0
 800ea40:	e7e7      	b.n	800ea12 <_strtod_l+0xa5a>
 800ea42:	4b5d      	ldr	r3, [pc, #372]	; (800ebb8 <_strtod_l+0xc00>)
 800ea44:	4640      	mov	r0, r8
 800ea46:	4649      	mov	r1, r9
 800ea48:	2200      	movs	r2, #0
 800ea4a:	f7f1 fdfd 	bl	8000648 <__aeabi_dmul>
 800ea4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea50:	4680      	mov	r8, r0
 800ea52:	4689      	mov	r9, r1
 800ea54:	b933      	cbnz	r3, 800ea64 <_strtod_l+0xaac>
 800ea56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea5a:	900e      	str	r0, [sp, #56]	; 0x38
 800ea5c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ea62:	e7dd      	b.n	800ea20 <_strtod_l+0xa68>
 800ea64:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ea68:	e7f9      	b.n	800ea5e <_strtod_l+0xaa6>
 800ea6a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ea6e:	9b04      	ldr	r3, [sp, #16]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d1a8      	bne.n	800e9c6 <_strtod_l+0xa0e>
 800ea74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ea78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea7a:	0d1b      	lsrs	r3, r3, #20
 800ea7c:	051b      	lsls	r3, r3, #20
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d1a1      	bne.n	800e9c6 <_strtod_l+0xa0e>
 800ea82:	4640      	mov	r0, r8
 800ea84:	4649      	mov	r1, r9
 800ea86:	f7f2 f93f 	bl	8000d08 <__aeabi_d2lz>
 800ea8a:	f7f1 fdaf 	bl	80005ec <__aeabi_l2d>
 800ea8e:	4602      	mov	r2, r0
 800ea90:	460b      	mov	r3, r1
 800ea92:	4640      	mov	r0, r8
 800ea94:	4649      	mov	r1, r9
 800ea96:	f7f1 fc1f 	bl	80002d8 <__aeabi_dsub>
 800ea9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ea9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eaa0:	ea43 030a 	orr.w	r3, r3, sl
 800eaa4:	4313      	orrs	r3, r2
 800eaa6:	4680      	mov	r8, r0
 800eaa8:	4689      	mov	r9, r1
 800eaaa:	d055      	beq.n	800eb58 <_strtod_l+0xba0>
 800eaac:	a336      	add	r3, pc, #216	; (adr r3, 800eb88 <_strtod_l+0xbd0>)
 800eaae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab2:	f7f2 f83b 	bl	8000b2c <__aeabi_dcmplt>
 800eab6:	2800      	cmp	r0, #0
 800eab8:	f47f acd0 	bne.w	800e45c <_strtod_l+0x4a4>
 800eabc:	a334      	add	r3, pc, #208	; (adr r3, 800eb90 <_strtod_l+0xbd8>)
 800eabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac2:	4640      	mov	r0, r8
 800eac4:	4649      	mov	r1, r9
 800eac6:	f7f2 f84f 	bl	8000b68 <__aeabi_dcmpgt>
 800eaca:	2800      	cmp	r0, #0
 800eacc:	f43f af7b 	beq.w	800e9c6 <_strtod_l+0xa0e>
 800ead0:	e4c4      	b.n	800e45c <_strtod_l+0x4a4>
 800ead2:	9b04      	ldr	r3, [sp, #16]
 800ead4:	b333      	cbz	r3, 800eb24 <_strtod_l+0xb6c>
 800ead6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ead8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800eadc:	d822      	bhi.n	800eb24 <_strtod_l+0xb6c>
 800eade:	a32e      	add	r3, pc, #184	; (adr r3, 800eb98 <_strtod_l+0xbe0>)
 800eae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae4:	4640      	mov	r0, r8
 800eae6:	4649      	mov	r1, r9
 800eae8:	f7f2 f82a 	bl	8000b40 <__aeabi_dcmple>
 800eaec:	b1a0      	cbz	r0, 800eb18 <_strtod_l+0xb60>
 800eaee:	4649      	mov	r1, r9
 800eaf0:	4640      	mov	r0, r8
 800eaf2:	f7f2 f881 	bl	8000bf8 <__aeabi_d2uiz>
 800eaf6:	2801      	cmp	r0, #1
 800eaf8:	bf38      	it	cc
 800eafa:	2001      	movcc	r0, #1
 800eafc:	f7f1 fd2a 	bl	8000554 <__aeabi_ui2d>
 800eb00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb02:	4680      	mov	r8, r0
 800eb04:	4689      	mov	r9, r1
 800eb06:	bb23      	cbnz	r3, 800eb52 <_strtod_l+0xb9a>
 800eb08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb0c:	9010      	str	r0, [sp, #64]	; 0x40
 800eb0e:	9311      	str	r3, [sp, #68]	; 0x44
 800eb10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800eb14:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800eb18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eb1c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800eb20:	1a9b      	subs	r3, r3, r2
 800eb22:	9309      	str	r3, [sp, #36]	; 0x24
 800eb24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800eb28:	eeb0 0a48 	vmov.f32	s0, s16
 800eb2c:	eef0 0a68 	vmov.f32	s1, s17
 800eb30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800eb34:	f002 f938 	bl	8010da8 <__ulp>
 800eb38:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800eb3c:	ec53 2b10 	vmov	r2, r3, d0
 800eb40:	f7f1 fd82 	bl	8000648 <__aeabi_dmul>
 800eb44:	ec53 2b18 	vmov	r2, r3, d8
 800eb48:	f7f1 fbc8 	bl	80002dc <__adddf3>
 800eb4c:	4682      	mov	sl, r0
 800eb4e:	468b      	mov	fp, r1
 800eb50:	e78d      	b.n	800ea6e <_strtod_l+0xab6>
 800eb52:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800eb56:	e7db      	b.n	800eb10 <_strtod_l+0xb58>
 800eb58:	a311      	add	r3, pc, #68	; (adr r3, 800eba0 <_strtod_l+0xbe8>)
 800eb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb5e:	f7f1 ffe5 	bl	8000b2c <__aeabi_dcmplt>
 800eb62:	e7b2      	b.n	800eaca <_strtod_l+0xb12>
 800eb64:	2300      	movs	r3, #0
 800eb66:	930a      	str	r3, [sp, #40]	; 0x28
 800eb68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800eb6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eb6c:	6013      	str	r3, [r2, #0]
 800eb6e:	f7ff ba6b 	b.w	800e048 <_strtod_l+0x90>
 800eb72:	2a65      	cmp	r2, #101	; 0x65
 800eb74:	f43f ab5f 	beq.w	800e236 <_strtod_l+0x27e>
 800eb78:	2a45      	cmp	r2, #69	; 0x45
 800eb7a:	f43f ab5c 	beq.w	800e236 <_strtod_l+0x27e>
 800eb7e:	2301      	movs	r3, #1
 800eb80:	f7ff bb94 	b.w	800e2ac <_strtod_l+0x2f4>
 800eb84:	f3af 8000 	nop.w
 800eb88:	94a03595 	.word	0x94a03595
 800eb8c:	3fdfffff 	.word	0x3fdfffff
 800eb90:	35afe535 	.word	0x35afe535
 800eb94:	3fe00000 	.word	0x3fe00000
 800eb98:	ffc00000 	.word	0xffc00000
 800eb9c:	41dfffff 	.word	0x41dfffff
 800eba0:	94a03595 	.word	0x94a03595
 800eba4:	3fcfffff 	.word	0x3fcfffff
 800eba8:	3ff00000 	.word	0x3ff00000
 800ebac:	7ff00000 	.word	0x7ff00000
 800ebb0:	7fe00000 	.word	0x7fe00000
 800ebb4:	7c9fffff 	.word	0x7c9fffff
 800ebb8:	3fe00000 	.word	0x3fe00000
 800ebbc:	bff00000 	.word	0xbff00000
 800ebc0:	7fefffff 	.word	0x7fefffff

0800ebc4 <strtod>:
 800ebc4:	460a      	mov	r2, r1
 800ebc6:	4601      	mov	r1, r0
 800ebc8:	4802      	ldr	r0, [pc, #8]	; (800ebd4 <strtod+0x10>)
 800ebca:	4b03      	ldr	r3, [pc, #12]	; (800ebd8 <strtod+0x14>)
 800ebcc:	6800      	ldr	r0, [r0, #0]
 800ebce:	f7ff b9f3 	b.w	800dfb8 <_strtod_l>
 800ebd2:	bf00      	nop
 800ebd4:	2000002c 	.word	0x2000002c
 800ebd8:	20000094 	.word	0x20000094

0800ebdc <_strtol_l.constprop.0>:
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebe2:	d001      	beq.n	800ebe8 <_strtol_l.constprop.0+0xc>
 800ebe4:	2b24      	cmp	r3, #36	; 0x24
 800ebe6:	d906      	bls.n	800ebf6 <_strtol_l.constprop.0+0x1a>
 800ebe8:	f7fe fc92 	bl	800d510 <__errno>
 800ebec:	2316      	movs	r3, #22
 800ebee:	6003      	str	r3, [r0, #0]
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebf6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ecdc <_strtol_l.constprop.0+0x100>
 800ebfa:	460d      	mov	r5, r1
 800ebfc:	462e      	mov	r6, r5
 800ebfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec02:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ec06:	f017 0708 	ands.w	r7, r7, #8
 800ec0a:	d1f7      	bne.n	800ebfc <_strtol_l.constprop.0+0x20>
 800ec0c:	2c2d      	cmp	r4, #45	; 0x2d
 800ec0e:	d132      	bne.n	800ec76 <_strtol_l.constprop.0+0x9a>
 800ec10:	782c      	ldrb	r4, [r5, #0]
 800ec12:	2701      	movs	r7, #1
 800ec14:	1cb5      	adds	r5, r6, #2
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d05b      	beq.n	800ecd2 <_strtol_l.constprop.0+0xf6>
 800ec1a:	2b10      	cmp	r3, #16
 800ec1c:	d109      	bne.n	800ec32 <_strtol_l.constprop.0+0x56>
 800ec1e:	2c30      	cmp	r4, #48	; 0x30
 800ec20:	d107      	bne.n	800ec32 <_strtol_l.constprop.0+0x56>
 800ec22:	782c      	ldrb	r4, [r5, #0]
 800ec24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ec28:	2c58      	cmp	r4, #88	; 0x58
 800ec2a:	d14d      	bne.n	800ecc8 <_strtol_l.constprop.0+0xec>
 800ec2c:	786c      	ldrb	r4, [r5, #1]
 800ec2e:	2310      	movs	r3, #16
 800ec30:	3502      	adds	r5, #2
 800ec32:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ec36:	f108 38ff 	add.w	r8, r8, #4294967295
 800ec3a:	f04f 0c00 	mov.w	ip, #0
 800ec3e:	fbb8 f9f3 	udiv	r9, r8, r3
 800ec42:	4666      	mov	r6, ip
 800ec44:	fb03 8a19 	mls	sl, r3, r9, r8
 800ec48:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ec4c:	f1be 0f09 	cmp.w	lr, #9
 800ec50:	d816      	bhi.n	800ec80 <_strtol_l.constprop.0+0xa4>
 800ec52:	4674      	mov	r4, lr
 800ec54:	42a3      	cmp	r3, r4
 800ec56:	dd24      	ble.n	800eca2 <_strtol_l.constprop.0+0xc6>
 800ec58:	f1bc 0f00 	cmp.w	ip, #0
 800ec5c:	db1e      	blt.n	800ec9c <_strtol_l.constprop.0+0xc0>
 800ec5e:	45b1      	cmp	r9, r6
 800ec60:	d31c      	bcc.n	800ec9c <_strtol_l.constprop.0+0xc0>
 800ec62:	d101      	bne.n	800ec68 <_strtol_l.constprop.0+0x8c>
 800ec64:	45a2      	cmp	sl, r4
 800ec66:	db19      	blt.n	800ec9c <_strtol_l.constprop.0+0xc0>
 800ec68:	fb06 4603 	mla	r6, r6, r3, r4
 800ec6c:	f04f 0c01 	mov.w	ip, #1
 800ec70:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec74:	e7e8      	b.n	800ec48 <_strtol_l.constprop.0+0x6c>
 800ec76:	2c2b      	cmp	r4, #43	; 0x2b
 800ec78:	bf04      	itt	eq
 800ec7a:	782c      	ldrbeq	r4, [r5, #0]
 800ec7c:	1cb5      	addeq	r5, r6, #2
 800ec7e:	e7ca      	b.n	800ec16 <_strtol_l.constprop.0+0x3a>
 800ec80:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ec84:	f1be 0f19 	cmp.w	lr, #25
 800ec88:	d801      	bhi.n	800ec8e <_strtol_l.constprop.0+0xb2>
 800ec8a:	3c37      	subs	r4, #55	; 0x37
 800ec8c:	e7e2      	b.n	800ec54 <_strtol_l.constprop.0+0x78>
 800ec8e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ec92:	f1be 0f19 	cmp.w	lr, #25
 800ec96:	d804      	bhi.n	800eca2 <_strtol_l.constprop.0+0xc6>
 800ec98:	3c57      	subs	r4, #87	; 0x57
 800ec9a:	e7db      	b.n	800ec54 <_strtol_l.constprop.0+0x78>
 800ec9c:	f04f 3cff 	mov.w	ip, #4294967295
 800eca0:	e7e6      	b.n	800ec70 <_strtol_l.constprop.0+0x94>
 800eca2:	f1bc 0f00 	cmp.w	ip, #0
 800eca6:	da05      	bge.n	800ecb4 <_strtol_l.constprop.0+0xd8>
 800eca8:	2322      	movs	r3, #34	; 0x22
 800ecaa:	6003      	str	r3, [r0, #0]
 800ecac:	4646      	mov	r6, r8
 800ecae:	b942      	cbnz	r2, 800ecc2 <_strtol_l.constprop.0+0xe6>
 800ecb0:	4630      	mov	r0, r6
 800ecb2:	e79e      	b.n	800ebf2 <_strtol_l.constprop.0+0x16>
 800ecb4:	b107      	cbz	r7, 800ecb8 <_strtol_l.constprop.0+0xdc>
 800ecb6:	4276      	negs	r6, r6
 800ecb8:	2a00      	cmp	r2, #0
 800ecba:	d0f9      	beq.n	800ecb0 <_strtol_l.constprop.0+0xd4>
 800ecbc:	f1bc 0f00 	cmp.w	ip, #0
 800ecc0:	d000      	beq.n	800ecc4 <_strtol_l.constprop.0+0xe8>
 800ecc2:	1e69      	subs	r1, r5, #1
 800ecc4:	6011      	str	r1, [r2, #0]
 800ecc6:	e7f3      	b.n	800ecb0 <_strtol_l.constprop.0+0xd4>
 800ecc8:	2430      	movs	r4, #48	; 0x30
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d1b1      	bne.n	800ec32 <_strtol_l.constprop.0+0x56>
 800ecce:	2308      	movs	r3, #8
 800ecd0:	e7af      	b.n	800ec32 <_strtol_l.constprop.0+0x56>
 800ecd2:	2c30      	cmp	r4, #48	; 0x30
 800ecd4:	d0a5      	beq.n	800ec22 <_strtol_l.constprop.0+0x46>
 800ecd6:	230a      	movs	r3, #10
 800ecd8:	e7ab      	b.n	800ec32 <_strtol_l.constprop.0+0x56>
 800ecda:	bf00      	nop
 800ecdc:	08012f01 	.word	0x08012f01

0800ece0 <strtol>:
 800ece0:	4613      	mov	r3, r2
 800ece2:	460a      	mov	r2, r1
 800ece4:	4601      	mov	r1, r0
 800ece6:	4802      	ldr	r0, [pc, #8]	; (800ecf0 <strtol+0x10>)
 800ece8:	6800      	ldr	r0, [r0, #0]
 800ecea:	f7ff bf77 	b.w	800ebdc <_strtol_l.constprop.0>
 800ecee:	bf00      	nop
 800ecf0:	2000002c 	.word	0x2000002c

0800ecf4 <__swbuf_r>:
 800ecf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecf6:	460e      	mov	r6, r1
 800ecf8:	4614      	mov	r4, r2
 800ecfa:	4605      	mov	r5, r0
 800ecfc:	b118      	cbz	r0, 800ed06 <__swbuf_r+0x12>
 800ecfe:	6983      	ldr	r3, [r0, #24]
 800ed00:	b90b      	cbnz	r3, 800ed06 <__swbuf_r+0x12>
 800ed02:	f001 f84d 	bl	800fda0 <__sinit>
 800ed06:	4b21      	ldr	r3, [pc, #132]	; (800ed8c <__swbuf_r+0x98>)
 800ed08:	429c      	cmp	r4, r3
 800ed0a:	d12b      	bne.n	800ed64 <__swbuf_r+0x70>
 800ed0c:	686c      	ldr	r4, [r5, #4]
 800ed0e:	69a3      	ldr	r3, [r4, #24]
 800ed10:	60a3      	str	r3, [r4, #8]
 800ed12:	89a3      	ldrh	r3, [r4, #12]
 800ed14:	071a      	lsls	r2, r3, #28
 800ed16:	d52f      	bpl.n	800ed78 <__swbuf_r+0x84>
 800ed18:	6923      	ldr	r3, [r4, #16]
 800ed1a:	b36b      	cbz	r3, 800ed78 <__swbuf_r+0x84>
 800ed1c:	6923      	ldr	r3, [r4, #16]
 800ed1e:	6820      	ldr	r0, [r4, #0]
 800ed20:	1ac0      	subs	r0, r0, r3
 800ed22:	6963      	ldr	r3, [r4, #20]
 800ed24:	b2f6      	uxtb	r6, r6
 800ed26:	4283      	cmp	r3, r0
 800ed28:	4637      	mov	r7, r6
 800ed2a:	dc04      	bgt.n	800ed36 <__swbuf_r+0x42>
 800ed2c:	4621      	mov	r1, r4
 800ed2e:	4628      	mov	r0, r5
 800ed30:	f000 ffa2 	bl	800fc78 <_fflush_r>
 800ed34:	bb30      	cbnz	r0, 800ed84 <__swbuf_r+0x90>
 800ed36:	68a3      	ldr	r3, [r4, #8]
 800ed38:	3b01      	subs	r3, #1
 800ed3a:	60a3      	str	r3, [r4, #8]
 800ed3c:	6823      	ldr	r3, [r4, #0]
 800ed3e:	1c5a      	adds	r2, r3, #1
 800ed40:	6022      	str	r2, [r4, #0]
 800ed42:	701e      	strb	r6, [r3, #0]
 800ed44:	6963      	ldr	r3, [r4, #20]
 800ed46:	3001      	adds	r0, #1
 800ed48:	4283      	cmp	r3, r0
 800ed4a:	d004      	beq.n	800ed56 <__swbuf_r+0x62>
 800ed4c:	89a3      	ldrh	r3, [r4, #12]
 800ed4e:	07db      	lsls	r3, r3, #31
 800ed50:	d506      	bpl.n	800ed60 <__swbuf_r+0x6c>
 800ed52:	2e0a      	cmp	r6, #10
 800ed54:	d104      	bne.n	800ed60 <__swbuf_r+0x6c>
 800ed56:	4621      	mov	r1, r4
 800ed58:	4628      	mov	r0, r5
 800ed5a:	f000 ff8d 	bl	800fc78 <_fflush_r>
 800ed5e:	b988      	cbnz	r0, 800ed84 <__swbuf_r+0x90>
 800ed60:	4638      	mov	r0, r7
 800ed62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed64:	4b0a      	ldr	r3, [pc, #40]	; (800ed90 <__swbuf_r+0x9c>)
 800ed66:	429c      	cmp	r4, r3
 800ed68:	d101      	bne.n	800ed6e <__swbuf_r+0x7a>
 800ed6a:	68ac      	ldr	r4, [r5, #8]
 800ed6c:	e7cf      	b.n	800ed0e <__swbuf_r+0x1a>
 800ed6e:	4b09      	ldr	r3, [pc, #36]	; (800ed94 <__swbuf_r+0xa0>)
 800ed70:	429c      	cmp	r4, r3
 800ed72:	bf08      	it	eq
 800ed74:	68ec      	ldreq	r4, [r5, #12]
 800ed76:	e7ca      	b.n	800ed0e <__swbuf_r+0x1a>
 800ed78:	4621      	mov	r1, r4
 800ed7a:	4628      	mov	r0, r5
 800ed7c:	f000 f80c 	bl	800ed98 <__swsetup_r>
 800ed80:	2800      	cmp	r0, #0
 800ed82:	d0cb      	beq.n	800ed1c <__swbuf_r+0x28>
 800ed84:	f04f 37ff 	mov.w	r7, #4294967295
 800ed88:	e7ea      	b.n	800ed60 <__swbuf_r+0x6c>
 800ed8a:	bf00      	nop
 800ed8c:	080130b4 	.word	0x080130b4
 800ed90:	080130d4 	.word	0x080130d4
 800ed94:	08013094 	.word	0x08013094

0800ed98 <__swsetup_r>:
 800ed98:	4b32      	ldr	r3, [pc, #200]	; (800ee64 <__swsetup_r+0xcc>)
 800ed9a:	b570      	push	{r4, r5, r6, lr}
 800ed9c:	681d      	ldr	r5, [r3, #0]
 800ed9e:	4606      	mov	r6, r0
 800eda0:	460c      	mov	r4, r1
 800eda2:	b125      	cbz	r5, 800edae <__swsetup_r+0x16>
 800eda4:	69ab      	ldr	r3, [r5, #24]
 800eda6:	b913      	cbnz	r3, 800edae <__swsetup_r+0x16>
 800eda8:	4628      	mov	r0, r5
 800edaa:	f000 fff9 	bl	800fda0 <__sinit>
 800edae:	4b2e      	ldr	r3, [pc, #184]	; (800ee68 <__swsetup_r+0xd0>)
 800edb0:	429c      	cmp	r4, r3
 800edb2:	d10f      	bne.n	800edd4 <__swsetup_r+0x3c>
 800edb4:	686c      	ldr	r4, [r5, #4]
 800edb6:	89a3      	ldrh	r3, [r4, #12]
 800edb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800edbc:	0719      	lsls	r1, r3, #28
 800edbe:	d42c      	bmi.n	800ee1a <__swsetup_r+0x82>
 800edc0:	06dd      	lsls	r5, r3, #27
 800edc2:	d411      	bmi.n	800ede8 <__swsetup_r+0x50>
 800edc4:	2309      	movs	r3, #9
 800edc6:	6033      	str	r3, [r6, #0]
 800edc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800edcc:	81a3      	strh	r3, [r4, #12]
 800edce:	f04f 30ff 	mov.w	r0, #4294967295
 800edd2:	e03e      	b.n	800ee52 <__swsetup_r+0xba>
 800edd4:	4b25      	ldr	r3, [pc, #148]	; (800ee6c <__swsetup_r+0xd4>)
 800edd6:	429c      	cmp	r4, r3
 800edd8:	d101      	bne.n	800edde <__swsetup_r+0x46>
 800edda:	68ac      	ldr	r4, [r5, #8]
 800eddc:	e7eb      	b.n	800edb6 <__swsetup_r+0x1e>
 800edde:	4b24      	ldr	r3, [pc, #144]	; (800ee70 <__swsetup_r+0xd8>)
 800ede0:	429c      	cmp	r4, r3
 800ede2:	bf08      	it	eq
 800ede4:	68ec      	ldreq	r4, [r5, #12]
 800ede6:	e7e6      	b.n	800edb6 <__swsetup_r+0x1e>
 800ede8:	0758      	lsls	r0, r3, #29
 800edea:	d512      	bpl.n	800ee12 <__swsetup_r+0x7a>
 800edec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edee:	b141      	cbz	r1, 800ee02 <__swsetup_r+0x6a>
 800edf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800edf4:	4299      	cmp	r1, r3
 800edf6:	d002      	beq.n	800edfe <__swsetup_r+0x66>
 800edf8:	4630      	mov	r0, r6
 800edfa:	f002 f93b 	bl	8011074 <_free_r>
 800edfe:	2300      	movs	r3, #0
 800ee00:	6363      	str	r3, [r4, #52]	; 0x34
 800ee02:	89a3      	ldrh	r3, [r4, #12]
 800ee04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee08:	81a3      	strh	r3, [r4, #12]
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	6063      	str	r3, [r4, #4]
 800ee0e:	6923      	ldr	r3, [r4, #16]
 800ee10:	6023      	str	r3, [r4, #0]
 800ee12:	89a3      	ldrh	r3, [r4, #12]
 800ee14:	f043 0308 	orr.w	r3, r3, #8
 800ee18:	81a3      	strh	r3, [r4, #12]
 800ee1a:	6923      	ldr	r3, [r4, #16]
 800ee1c:	b94b      	cbnz	r3, 800ee32 <__swsetup_r+0x9a>
 800ee1e:	89a3      	ldrh	r3, [r4, #12]
 800ee20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee28:	d003      	beq.n	800ee32 <__swsetup_r+0x9a>
 800ee2a:	4621      	mov	r1, r4
 800ee2c:	4630      	mov	r0, r6
 800ee2e:	f001 fbef 	bl	8010610 <__smakebuf_r>
 800ee32:	89a0      	ldrh	r0, [r4, #12]
 800ee34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee38:	f010 0301 	ands.w	r3, r0, #1
 800ee3c:	d00a      	beq.n	800ee54 <__swsetup_r+0xbc>
 800ee3e:	2300      	movs	r3, #0
 800ee40:	60a3      	str	r3, [r4, #8]
 800ee42:	6963      	ldr	r3, [r4, #20]
 800ee44:	425b      	negs	r3, r3
 800ee46:	61a3      	str	r3, [r4, #24]
 800ee48:	6923      	ldr	r3, [r4, #16]
 800ee4a:	b943      	cbnz	r3, 800ee5e <__swsetup_r+0xc6>
 800ee4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ee50:	d1ba      	bne.n	800edc8 <__swsetup_r+0x30>
 800ee52:	bd70      	pop	{r4, r5, r6, pc}
 800ee54:	0781      	lsls	r1, r0, #30
 800ee56:	bf58      	it	pl
 800ee58:	6963      	ldrpl	r3, [r4, #20]
 800ee5a:	60a3      	str	r3, [r4, #8]
 800ee5c:	e7f4      	b.n	800ee48 <__swsetup_r+0xb0>
 800ee5e:	2000      	movs	r0, #0
 800ee60:	e7f7      	b.n	800ee52 <__swsetup_r+0xba>
 800ee62:	bf00      	nop
 800ee64:	2000002c 	.word	0x2000002c
 800ee68:	080130b4 	.word	0x080130b4
 800ee6c:	080130d4 	.word	0x080130d4
 800ee70:	08013094 	.word	0x08013094

0800ee74 <quorem>:
 800ee74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee78:	6903      	ldr	r3, [r0, #16]
 800ee7a:	690c      	ldr	r4, [r1, #16]
 800ee7c:	42a3      	cmp	r3, r4
 800ee7e:	4607      	mov	r7, r0
 800ee80:	f2c0 8081 	blt.w	800ef86 <quorem+0x112>
 800ee84:	3c01      	subs	r4, #1
 800ee86:	f101 0814 	add.w	r8, r1, #20
 800ee8a:	f100 0514 	add.w	r5, r0, #20
 800ee8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee92:	9301      	str	r3, [sp, #4]
 800ee94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ee98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eea4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eea8:	fbb2 f6f3 	udiv	r6, r2, r3
 800eeac:	d331      	bcc.n	800ef12 <quorem+0x9e>
 800eeae:	f04f 0e00 	mov.w	lr, #0
 800eeb2:	4640      	mov	r0, r8
 800eeb4:	46ac      	mov	ip, r5
 800eeb6:	46f2      	mov	sl, lr
 800eeb8:	f850 2b04 	ldr.w	r2, [r0], #4
 800eebc:	b293      	uxth	r3, r2
 800eebe:	fb06 e303 	mla	r3, r6, r3, lr
 800eec2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800eec6:	b29b      	uxth	r3, r3
 800eec8:	ebaa 0303 	sub.w	r3, sl, r3
 800eecc:	f8dc a000 	ldr.w	sl, [ip]
 800eed0:	0c12      	lsrs	r2, r2, #16
 800eed2:	fa13 f38a 	uxtah	r3, r3, sl
 800eed6:	fb06 e202 	mla	r2, r6, r2, lr
 800eeda:	9300      	str	r3, [sp, #0]
 800eedc:	9b00      	ldr	r3, [sp, #0]
 800eede:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800eee2:	b292      	uxth	r2, r2
 800eee4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800eee8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eeec:	f8bd 3000 	ldrh.w	r3, [sp]
 800eef0:	4581      	cmp	r9, r0
 800eef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eef6:	f84c 3b04 	str.w	r3, [ip], #4
 800eefa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800eefe:	d2db      	bcs.n	800eeb8 <quorem+0x44>
 800ef00:	f855 300b 	ldr.w	r3, [r5, fp]
 800ef04:	b92b      	cbnz	r3, 800ef12 <quorem+0x9e>
 800ef06:	9b01      	ldr	r3, [sp, #4]
 800ef08:	3b04      	subs	r3, #4
 800ef0a:	429d      	cmp	r5, r3
 800ef0c:	461a      	mov	r2, r3
 800ef0e:	d32e      	bcc.n	800ef6e <quorem+0xfa>
 800ef10:	613c      	str	r4, [r7, #16]
 800ef12:	4638      	mov	r0, r7
 800ef14:	f001 fea2 	bl	8010c5c <__mcmp>
 800ef18:	2800      	cmp	r0, #0
 800ef1a:	db24      	blt.n	800ef66 <quorem+0xf2>
 800ef1c:	3601      	adds	r6, #1
 800ef1e:	4628      	mov	r0, r5
 800ef20:	f04f 0c00 	mov.w	ip, #0
 800ef24:	f858 2b04 	ldr.w	r2, [r8], #4
 800ef28:	f8d0 e000 	ldr.w	lr, [r0]
 800ef2c:	b293      	uxth	r3, r2
 800ef2e:	ebac 0303 	sub.w	r3, ip, r3
 800ef32:	0c12      	lsrs	r2, r2, #16
 800ef34:	fa13 f38e 	uxtah	r3, r3, lr
 800ef38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ef3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef40:	b29b      	uxth	r3, r3
 800ef42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef46:	45c1      	cmp	r9, r8
 800ef48:	f840 3b04 	str.w	r3, [r0], #4
 800ef4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ef50:	d2e8      	bcs.n	800ef24 <quorem+0xb0>
 800ef52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef5a:	b922      	cbnz	r2, 800ef66 <quorem+0xf2>
 800ef5c:	3b04      	subs	r3, #4
 800ef5e:	429d      	cmp	r5, r3
 800ef60:	461a      	mov	r2, r3
 800ef62:	d30a      	bcc.n	800ef7a <quorem+0x106>
 800ef64:	613c      	str	r4, [r7, #16]
 800ef66:	4630      	mov	r0, r6
 800ef68:	b003      	add	sp, #12
 800ef6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef6e:	6812      	ldr	r2, [r2, #0]
 800ef70:	3b04      	subs	r3, #4
 800ef72:	2a00      	cmp	r2, #0
 800ef74:	d1cc      	bne.n	800ef10 <quorem+0x9c>
 800ef76:	3c01      	subs	r4, #1
 800ef78:	e7c7      	b.n	800ef0a <quorem+0x96>
 800ef7a:	6812      	ldr	r2, [r2, #0]
 800ef7c:	3b04      	subs	r3, #4
 800ef7e:	2a00      	cmp	r2, #0
 800ef80:	d1f0      	bne.n	800ef64 <quorem+0xf0>
 800ef82:	3c01      	subs	r4, #1
 800ef84:	e7eb      	b.n	800ef5e <quorem+0xea>
 800ef86:	2000      	movs	r0, #0
 800ef88:	e7ee      	b.n	800ef68 <quorem+0xf4>
 800ef8a:	0000      	movs	r0, r0
 800ef8c:	0000      	movs	r0, r0
	...

0800ef90 <_dtoa_r>:
 800ef90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef94:	ed2d 8b04 	vpush	{d8-d9}
 800ef98:	ec57 6b10 	vmov	r6, r7, d0
 800ef9c:	b093      	sub	sp, #76	; 0x4c
 800ef9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800efa0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800efa4:	9106      	str	r1, [sp, #24]
 800efa6:	ee10 aa10 	vmov	sl, s0
 800efaa:	4604      	mov	r4, r0
 800efac:	9209      	str	r2, [sp, #36]	; 0x24
 800efae:	930c      	str	r3, [sp, #48]	; 0x30
 800efb0:	46bb      	mov	fp, r7
 800efb2:	b975      	cbnz	r5, 800efd2 <_dtoa_r+0x42>
 800efb4:	2010      	movs	r0, #16
 800efb6:	f001 fb6b 	bl	8010690 <malloc>
 800efba:	4602      	mov	r2, r0
 800efbc:	6260      	str	r0, [r4, #36]	; 0x24
 800efbe:	b920      	cbnz	r0, 800efca <_dtoa_r+0x3a>
 800efc0:	4ba7      	ldr	r3, [pc, #668]	; (800f260 <_dtoa_r+0x2d0>)
 800efc2:	21ea      	movs	r1, #234	; 0xea
 800efc4:	48a7      	ldr	r0, [pc, #668]	; (800f264 <_dtoa_r+0x2d4>)
 800efc6:	f002 fb1d 	bl	8011604 <__assert_func>
 800efca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800efce:	6005      	str	r5, [r0, #0]
 800efd0:	60c5      	str	r5, [r0, #12]
 800efd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efd4:	6819      	ldr	r1, [r3, #0]
 800efd6:	b151      	cbz	r1, 800efee <_dtoa_r+0x5e>
 800efd8:	685a      	ldr	r2, [r3, #4]
 800efda:	604a      	str	r2, [r1, #4]
 800efdc:	2301      	movs	r3, #1
 800efde:	4093      	lsls	r3, r2
 800efe0:	608b      	str	r3, [r1, #8]
 800efe2:	4620      	mov	r0, r4
 800efe4:	f001 fbae 	bl	8010744 <_Bfree>
 800efe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efea:	2200      	movs	r2, #0
 800efec:	601a      	str	r2, [r3, #0]
 800efee:	1e3b      	subs	r3, r7, #0
 800eff0:	bfaa      	itet	ge
 800eff2:	2300      	movge	r3, #0
 800eff4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800eff8:	f8c8 3000 	strge.w	r3, [r8]
 800effc:	4b9a      	ldr	r3, [pc, #616]	; (800f268 <_dtoa_r+0x2d8>)
 800effe:	bfbc      	itt	lt
 800f000:	2201      	movlt	r2, #1
 800f002:	f8c8 2000 	strlt.w	r2, [r8]
 800f006:	ea33 030b 	bics.w	r3, r3, fp
 800f00a:	d11b      	bne.n	800f044 <_dtoa_r+0xb4>
 800f00c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f00e:	f242 730f 	movw	r3, #9999	; 0x270f
 800f012:	6013      	str	r3, [r2, #0]
 800f014:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f018:	4333      	orrs	r3, r6
 800f01a:	f000 8592 	beq.w	800fb42 <_dtoa_r+0xbb2>
 800f01e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f020:	b963      	cbnz	r3, 800f03c <_dtoa_r+0xac>
 800f022:	4b92      	ldr	r3, [pc, #584]	; (800f26c <_dtoa_r+0x2dc>)
 800f024:	e022      	b.n	800f06c <_dtoa_r+0xdc>
 800f026:	4b92      	ldr	r3, [pc, #584]	; (800f270 <_dtoa_r+0x2e0>)
 800f028:	9301      	str	r3, [sp, #4]
 800f02a:	3308      	adds	r3, #8
 800f02c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f02e:	6013      	str	r3, [r2, #0]
 800f030:	9801      	ldr	r0, [sp, #4]
 800f032:	b013      	add	sp, #76	; 0x4c
 800f034:	ecbd 8b04 	vpop	{d8-d9}
 800f038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f03c:	4b8b      	ldr	r3, [pc, #556]	; (800f26c <_dtoa_r+0x2dc>)
 800f03e:	9301      	str	r3, [sp, #4]
 800f040:	3303      	adds	r3, #3
 800f042:	e7f3      	b.n	800f02c <_dtoa_r+0x9c>
 800f044:	2200      	movs	r2, #0
 800f046:	2300      	movs	r3, #0
 800f048:	4650      	mov	r0, sl
 800f04a:	4659      	mov	r1, fp
 800f04c:	f7f1 fd64 	bl	8000b18 <__aeabi_dcmpeq>
 800f050:	ec4b ab19 	vmov	d9, sl, fp
 800f054:	4680      	mov	r8, r0
 800f056:	b158      	cbz	r0, 800f070 <_dtoa_r+0xe0>
 800f058:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f05a:	2301      	movs	r3, #1
 800f05c:	6013      	str	r3, [r2, #0]
 800f05e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f060:	2b00      	cmp	r3, #0
 800f062:	f000 856b 	beq.w	800fb3c <_dtoa_r+0xbac>
 800f066:	4883      	ldr	r0, [pc, #524]	; (800f274 <_dtoa_r+0x2e4>)
 800f068:	6018      	str	r0, [r3, #0]
 800f06a:	1e43      	subs	r3, r0, #1
 800f06c:	9301      	str	r3, [sp, #4]
 800f06e:	e7df      	b.n	800f030 <_dtoa_r+0xa0>
 800f070:	ec4b ab10 	vmov	d0, sl, fp
 800f074:	aa10      	add	r2, sp, #64	; 0x40
 800f076:	a911      	add	r1, sp, #68	; 0x44
 800f078:	4620      	mov	r0, r4
 800f07a:	f001 ff11 	bl	8010ea0 <__d2b>
 800f07e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f082:	ee08 0a10 	vmov	s16, r0
 800f086:	2d00      	cmp	r5, #0
 800f088:	f000 8084 	beq.w	800f194 <_dtoa_r+0x204>
 800f08c:	ee19 3a90 	vmov	r3, s19
 800f090:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f094:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f098:	4656      	mov	r6, sl
 800f09a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f09e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f0a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f0a6:	4b74      	ldr	r3, [pc, #464]	; (800f278 <_dtoa_r+0x2e8>)
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	4630      	mov	r0, r6
 800f0ac:	4639      	mov	r1, r7
 800f0ae:	f7f1 f913 	bl	80002d8 <__aeabi_dsub>
 800f0b2:	a365      	add	r3, pc, #404	; (adr r3, 800f248 <_dtoa_r+0x2b8>)
 800f0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b8:	f7f1 fac6 	bl	8000648 <__aeabi_dmul>
 800f0bc:	a364      	add	r3, pc, #400	; (adr r3, 800f250 <_dtoa_r+0x2c0>)
 800f0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c2:	f7f1 f90b 	bl	80002dc <__adddf3>
 800f0c6:	4606      	mov	r6, r0
 800f0c8:	4628      	mov	r0, r5
 800f0ca:	460f      	mov	r7, r1
 800f0cc:	f7f1 fa52 	bl	8000574 <__aeabi_i2d>
 800f0d0:	a361      	add	r3, pc, #388	; (adr r3, 800f258 <_dtoa_r+0x2c8>)
 800f0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d6:	f7f1 fab7 	bl	8000648 <__aeabi_dmul>
 800f0da:	4602      	mov	r2, r0
 800f0dc:	460b      	mov	r3, r1
 800f0de:	4630      	mov	r0, r6
 800f0e0:	4639      	mov	r1, r7
 800f0e2:	f7f1 f8fb 	bl	80002dc <__adddf3>
 800f0e6:	4606      	mov	r6, r0
 800f0e8:	460f      	mov	r7, r1
 800f0ea:	f7f1 fd5d 	bl	8000ba8 <__aeabi_d2iz>
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	9000      	str	r0, [sp, #0]
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	4630      	mov	r0, r6
 800f0f6:	4639      	mov	r1, r7
 800f0f8:	f7f1 fd18 	bl	8000b2c <__aeabi_dcmplt>
 800f0fc:	b150      	cbz	r0, 800f114 <_dtoa_r+0x184>
 800f0fe:	9800      	ldr	r0, [sp, #0]
 800f100:	f7f1 fa38 	bl	8000574 <__aeabi_i2d>
 800f104:	4632      	mov	r2, r6
 800f106:	463b      	mov	r3, r7
 800f108:	f7f1 fd06 	bl	8000b18 <__aeabi_dcmpeq>
 800f10c:	b910      	cbnz	r0, 800f114 <_dtoa_r+0x184>
 800f10e:	9b00      	ldr	r3, [sp, #0]
 800f110:	3b01      	subs	r3, #1
 800f112:	9300      	str	r3, [sp, #0]
 800f114:	9b00      	ldr	r3, [sp, #0]
 800f116:	2b16      	cmp	r3, #22
 800f118:	d85a      	bhi.n	800f1d0 <_dtoa_r+0x240>
 800f11a:	9a00      	ldr	r2, [sp, #0]
 800f11c:	4b57      	ldr	r3, [pc, #348]	; (800f27c <_dtoa_r+0x2ec>)
 800f11e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f126:	ec51 0b19 	vmov	r0, r1, d9
 800f12a:	f7f1 fcff 	bl	8000b2c <__aeabi_dcmplt>
 800f12e:	2800      	cmp	r0, #0
 800f130:	d050      	beq.n	800f1d4 <_dtoa_r+0x244>
 800f132:	9b00      	ldr	r3, [sp, #0]
 800f134:	3b01      	subs	r3, #1
 800f136:	9300      	str	r3, [sp, #0]
 800f138:	2300      	movs	r3, #0
 800f13a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f13c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f13e:	1b5d      	subs	r5, r3, r5
 800f140:	1e6b      	subs	r3, r5, #1
 800f142:	9305      	str	r3, [sp, #20]
 800f144:	bf45      	ittet	mi
 800f146:	f1c5 0301 	rsbmi	r3, r5, #1
 800f14a:	9304      	strmi	r3, [sp, #16]
 800f14c:	2300      	movpl	r3, #0
 800f14e:	2300      	movmi	r3, #0
 800f150:	bf4c      	ite	mi
 800f152:	9305      	strmi	r3, [sp, #20]
 800f154:	9304      	strpl	r3, [sp, #16]
 800f156:	9b00      	ldr	r3, [sp, #0]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	db3d      	blt.n	800f1d8 <_dtoa_r+0x248>
 800f15c:	9b05      	ldr	r3, [sp, #20]
 800f15e:	9a00      	ldr	r2, [sp, #0]
 800f160:	920a      	str	r2, [sp, #40]	; 0x28
 800f162:	4413      	add	r3, r2
 800f164:	9305      	str	r3, [sp, #20]
 800f166:	2300      	movs	r3, #0
 800f168:	9307      	str	r3, [sp, #28]
 800f16a:	9b06      	ldr	r3, [sp, #24]
 800f16c:	2b09      	cmp	r3, #9
 800f16e:	f200 8089 	bhi.w	800f284 <_dtoa_r+0x2f4>
 800f172:	2b05      	cmp	r3, #5
 800f174:	bfc4      	itt	gt
 800f176:	3b04      	subgt	r3, #4
 800f178:	9306      	strgt	r3, [sp, #24]
 800f17a:	9b06      	ldr	r3, [sp, #24]
 800f17c:	f1a3 0302 	sub.w	r3, r3, #2
 800f180:	bfcc      	ite	gt
 800f182:	2500      	movgt	r5, #0
 800f184:	2501      	movle	r5, #1
 800f186:	2b03      	cmp	r3, #3
 800f188:	f200 8087 	bhi.w	800f29a <_dtoa_r+0x30a>
 800f18c:	e8df f003 	tbb	[pc, r3]
 800f190:	59383a2d 	.word	0x59383a2d
 800f194:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f198:	441d      	add	r5, r3
 800f19a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f19e:	2b20      	cmp	r3, #32
 800f1a0:	bfc1      	itttt	gt
 800f1a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f1a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f1aa:	fa0b f303 	lslgt.w	r3, fp, r3
 800f1ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f1b2:	bfda      	itte	le
 800f1b4:	f1c3 0320 	rsble	r3, r3, #32
 800f1b8:	fa06 f003 	lslle.w	r0, r6, r3
 800f1bc:	4318      	orrgt	r0, r3
 800f1be:	f7f1 f9c9 	bl	8000554 <__aeabi_ui2d>
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	4606      	mov	r6, r0
 800f1c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f1ca:	3d01      	subs	r5, #1
 800f1cc:	930e      	str	r3, [sp, #56]	; 0x38
 800f1ce:	e76a      	b.n	800f0a6 <_dtoa_r+0x116>
 800f1d0:	2301      	movs	r3, #1
 800f1d2:	e7b2      	b.n	800f13a <_dtoa_r+0x1aa>
 800f1d4:	900b      	str	r0, [sp, #44]	; 0x2c
 800f1d6:	e7b1      	b.n	800f13c <_dtoa_r+0x1ac>
 800f1d8:	9b04      	ldr	r3, [sp, #16]
 800f1da:	9a00      	ldr	r2, [sp, #0]
 800f1dc:	1a9b      	subs	r3, r3, r2
 800f1de:	9304      	str	r3, [sp, #16]
 800f1e0:	4253      	negs	r3, r2
 800f1e2:	9307      	str	r3, [sp, #28]
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	930a      	str	r3, [sp, #40]	; 0x28
 800f1e8:	e7bf      	b.n	800f16a <_dtoa_r+0x1da>
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	9308      	str	r3, [sp, #32]
 800f1ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	dc55      	bgt.n	800f2a0 <_dtoa_r+0x310>
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f1fa:	461a      	mov	r2, r3
 800f1fc:	9209      	str	r2, [sp, #36]	; 0x24
 800f1fe:	e00c      	b.n	800f21a <_dtoa_r+0x28a>
 800f200:	2301      	movs	r3, #1
 800f202:	e7f3      	b.n	800f1ec <_dtoa_r+0x25c>
 800f204:	2300      	movs	r3, #0
 800f206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f208:	9308      	str	r3, [sp, #32]
 800f20a:	9b00      	ldr	r3, [sp, #0]
 800f20c:	4413      	add	r3, r2
 800f20e:	9302      	str	r3, [sp, #8]
 800f210:	3301      	adds	r3, #1
 800f212:	2b01      	cmp	r3, #1
 800f214:	9303      	str	r3, [sp, #12]
 800f216:	bfb8      	it	lt
 800f218:	2301      	movlt	r3, #1
 800f21a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f21c:	2200      	movs	r2, #0
 800f21e:	6042      	str	r2, [r0, #4]
 800f220:	2204      	movs	r2, #4
 800f222:	f102 0614 	add.w	r6, r2, #20
 800f226:	429e      	cmp	r6, r3
 800f228:	6841      	ldr	r1, [r0, #4]
 800f22a:	d93d      	bls.n	800f2a8 <_dtoa_r+0x318>
 800f22c:	4620      	mov	r0, r4
 800f22e:	f001 fa49 	bl	80106c4 <_Balloc>
 800f232:	9001      	str	r0, [sp, #4]
 800f234:	2800      	cmp	r0, #0
 800f236:	d13b      	bne.n	800f2b0 <_dtoa_r+0x320>
 800f238:	4b11      	ldr	r3, [pc, #68]	; (800f280 <_dtoa_r+0x2f0>)
 800f23a:	4602      	mov	r2, r0
 800f23c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f240:	e6c0      	b.n	800efc4 <_dtoa_r+0x34>
 800f242:	2301      	movs	r3, #1
 800f244:	e7df      	b.n	800f206 <_dtoa_r+0x276>
 800f246:	bf00      	nop
 800f248:	636f4361 	.word	0x636f4361
 800f24c:	3fd287a7 	.word	0x3fd287a7
 800f250:	8b60c8b3 	.word	0x8b60c8b3
 800f254:	3fc68a28 	.word	0x3fc68a28
 800f258:	509f79fb 	.word	0x509f79fb
 800f25c:	3fd34413 	.word	0x3fd34413
 800f260:	0801300e 	.word	0x0801300e
 800f264:	08013025 	.word	0x08013025
 800f268:	7ff00000 	.word	0x7ff00000
 800f26c:	0801300a 	.word	0x0801300a
 800f270:	08013001 	.word	0x08013001
 800f274:	08012e89 	.word	0x08012e89
 800f278:	3ff80000 	.word	0x3ff80000
 800f27c:	080131f8 	.word	0x080131f8
 800f280:	08013080 	.word	0x08013080
 800f284:	2501      	movs	r5, #1
 800f286:	2300      	movs	r3, #0
 800f288:	9306      	str	r3, [sp, #24]
 800f28a:	9508      	str	r5, [sp, #32]
 800f28c:	f04f 33ff 	mov.w	r3, #4294967295
 800f290:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f294:	2200      	movs	r2, #0
 800f296:	2312      	movs	r3, #18
 800f298:	e7b0      	b.n	800f1fc <_dtoa_r+0x26c>
 800f29a:	2301      	movs	r3, #1
 800f29c:	9308      	str	r3, [sp, #32]
 800f29e:	e7f5      	b.n	800f28c <_dtoa_r+0x2fc>
 800f2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f2a6:	e7b8      	b.n	800f21a <_dtoa_r+0x28a>
 800f2a8:	3101      	adds	r1, #1
 800f2aa:	6041      	str	r1, [r0, #4]
 800f2ac:	0052      	lsls	r2, r2, #1
 800f2ae:	e7b8      	b.n	800f222 <_dtoa_r+0x292>
 800f2b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2b2:	9a01      	ldr	r2, [sp, #4]
 800f2b4:	601a      	str	r2, [r3, #0]
 800f2b6:	9b03      	ldr	r3, [sp, #12]
 800f2b8:	2b0e      	cmp	r3, #14
 800f2ba:	f200 809d 	bhi.w	800f3f8 <_dtoa_r+0x468>
 800f2be:	2d00      	cmp	r5, #0
 800f2c0:	f000 809a 	beq.w	800f3f8 <_dtoa_r+0x468>
 800f2c4:	9b00      	ldr	r3, [sp, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	dd32      	ble.n	800f330 <_dtoa_r+0x3a0>
 800f2ca:	4ab7      	ldr	r2, [pc, #732]	; (800f5a8 <_dtoa_r+0x618>)
 800f2cc:	f003 030f 	and.w	r3, r3, #15
 800f2d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f2d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f2d8:	9b00      	ldr	r3, [sp, #0]
 800f2da:	05d8      	lsls	r0, r3, #23
 800f2dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f2e0:	d516      	bpl.n	800f310 <_dtoa_r+0x380>
 800f2e2:	4bb2      	ldr	r3, [pc, #712]	; (800f5ac <_dtoa_r+0x61c>)
 800f2e4:	ec51 0b19 	vmov	r0, r1, d9
 800f2e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f2ec:	f7f1 fad6 	bl	800089c <__aeabi_ddiv>
 800f2f0:	f007 070f 	and.w	r7, r7, #15
 800f2f4:	4682      	mov	sl, r0
 800f2f6:	468b      	mov	fp, r1
 800f2f8:	2503      	movs	r5, #3
 800f2fa:	4eac      	ldr	r6, [pc, #688]	; (800f5ac <_dtoa_r+0x61c>)
 800f2fc:	b957      	cbnz	r7, 800f314 <_dtoa_r+0x384>
 800f2fe:	4642      	mov	r2, r8
 800f300:	464b      	mov	r3, r9
 800f302:	4650      	mov	r0, sl
 800f304:	4659      	mov	r1, fp
 800f306:	f7f1 fac9 	bl	800089c <__aeabi_ddiv>
 800f30a:	4682      	mov	sl, r0
 800f30c:	468b      	mov	fp, r1
 800f30e:	e028      	b.n	800f362 <_dtoa_r+0x3d2>
 800f310:	2502      	movs	r5, #2
 800f312:	e7f2      	b.n	800f2fa <_dtoa_r+0x36a>
 800f314:	07f9      	lsls	r1, r7, #31
 800f316:	d508      	bpl.n	800f32a <_dtoa_r+0x39a>
 800f318:	4640      	mov	r0, r8
 800f31a:	4649      	mov	r1, r9
 800f31c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f320:	f7f1 f992 	bl	8000648 <__aeabi_dmul>
 800f324:	3501      	adds	r5, #1
 800f326:	4680      	mov	r8, r0
 800f328:	4689      	mov	r9, r1
 800f32a:	107f      	asrs	r7, r7, #1
 800f32c:	3608      	adds	r6, #8
 800f32e:	e7e5      	b.n	800f2fc <_dtoa_r+0x36c>
 800f330:	f000 809b 	beq.w	800f46a <_dtoa_r+0x4da>
 800f334:	9b00      	ldr	r3, [sp, #0]
 800f336:	4f9d      	ldr	r7, [pc, #628]	; (800f5ac <_dtoa_r+0x61c>)
 800f338:	425e      	negs	r6, r3
 800f33a:	4b9b      	ldr	r3, [pc, #620]	; (800f5a8 <_dtoa_r+0x618>)
 800f33c:	f006 020f 	and.w	r2, r6, #15
 800f340:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f348:	ec51 0b19 	vmov	r0, r1, d9
 800f34c:	f7f1 f97c 	bl	8000648 <__aeabi_dmul>
 800f350:	1136      	asrs	r6, r6, #4
 800f352:	4682      	mov	sl, r0
 800f354:	468b      	mov	fp, r1
 800f356:	2300      	movs	r3, #0
 800f358:	2502      	movs	r5, #2
 800f35a:	2e00      	cmp	r6, #0
 800f35c:	d17a      	bne.n	800f454 <_dtoa_r+0x4c4>
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d1d3      	bne.n	800f30a <_dtoa_r+0x37a>
 800f362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f364:	2b00      	cmp	r3, #0
 800f366:	f000 8082 	beq.w	800f46e <_dtoa_r+0x4de>
 800f36a:	4b91      	ldr	r3, [pc, #580]	; (800f5b0 <_dtoa_r+0x620>)
 800f36c:	2200      	movs	r2, #0
 800f36e:	4650      	mov	r0, sl
 800f370:	4659      	mov	r1, fp
 800f372:	f7f1 fbdb 	bl	8000b2c <__aeabi_dcmplt>
 800f376:	2800      	cmp	r0, #0
 800f378:	d079      	beq.n	800f46e <_dtoa_r+0x4de>
 800f37a:	9b03      	ldr	r3, [sp, #12]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d076      	beq.n	800f46e <_dtoa_r+0x4de>
 800f380:	9b02      	ldr	r3, [sp, #8]
 800f382:	2b00      	cmp	r3, #0
 800f384:	dd36      	ble.n	800f3f4 <_dtoa_r+0x464>
 800f386:	9b00      	ldr	r3, [sp, #0]
 800f388:	4650      	mov	r0, sl
 800f38a:	4659      	mov	r1, fp
 800f38c:	1e5f      	subs	r7, r3, #1
 800f38e:	2200      	movs	r2, #0
 800f390:	4b88      	ldr	r3, [pc, #544]	; (800f5b4 <_dtoa_r+0x624>)
 800f392:	f7f1 f959 	bl	8000648 <__aeabi_dmul>
 800f396:	9e02      	ldr	r6, [sp, #8]
 800f398:	4682      	mov	sl, r0
 800f39a:	468b      	mov	fp, r1
 800f39c:	3501      	adds	r5, #1
 800f39e:	4628      	mov	r0, r5
 800f3a0:	f7f1 f8e8 	bl	8000574 <__aeabi_i2d>
 800f3a4:	4652      	mov	r2, sl
 800f3a6:	465b      	mov	r3, fp
 800f3a8:	f7f1 f94e 	bl	8000648 <__aeabi_dmul>
 800f3ac:	4b82      	ldr	r3, [pc, #520]	; (800f5b8 <_dtoa_r+0x628>)
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	f7f0 ff94 	bl	80002dc <__adddf3>
 800f3b4:	46d0      	mov	r8, sl
 800f3b6:	46d9      	mov	r9, fp
 800f3b8:	4682      	mov	sl, r0
 800f3ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f3be:	2e00      	cmp	r6, #0
 800f3c0:	d158      	bne.n	800f474 <_dtoa_r+0x4e4>
 800f3c2:	4b7e      	ldr	r3, [pc, #504]	; (800f5bc <_dtoa_r+0x62c>)
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	4640      	mov	r0, r8
 800f3c8:	4649      	mov	r1, r9
 800f3ca:	f7f0 ff85 	bl	80002d8 <__aeabi_dsub>
 800f3ce:	4652      	mov	r2, sl
 800f3d0:	465b      	mov	r3, fp
 800f3d2:	4680      	mov	r8, r0
 800f3d4:	4689      	mov	r9, r1
 800f3d6:	f7f1 fbc7 	bl	8000b68 <__aeabi_dcmpgt>
 800f3da:	2800      	cmp	r0, #0
 800f3dc:	f040 8295 	bne.w	800f90a <_dtoa_r+0x97a>
 800f3e0:	4652      	mov	r2, sl
 800f3e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f3e6:	4640      	mov	r0, r8
 800f3e8:	4649      	mov	r1, r9
 800f3ea:	f7f1 fb9f 	bl	8000b2c <__aeabi_dcmplt>
 800f3ee:	2800      	cmp	r0, #0
 800f3f0:	f040 8289 	bne.w	800f906 <_dtoa_r+0x976>
 800f3f4:	ec5b ab19 	vmov	sl, fp, d9
 800f3f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	f2c0 8148 	blt.w	800f690 <_dtoa_r+0x700>
 800f400:	9a00      	ldr	r2, [sp, #0]
 800f402:	2a0e      	cmp	r2, #14
 800f404:	f300 8144 	bgt.w	800f690 <_dtoa_r+0x700>
 800f408:	4b67      	ldr	r3, [pc, #412]	; (800f5a8 <_dtoa_r+0x618>)
 800f40a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f40e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f414:	2b00      	cmp	r3, #0
 800f416:	f280 80d5 	bge.w	800f5c4 <_dtoa_r+0x634>
 800f41a:	9b03      	ldr	r3, [sp, #12]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	f300 80d1 	bgt.w	800f5c4 <_dtoa_r+0x634>
 800f422:	f040 826f 	bne.w	800f904 <_dtoa_r+0x974>
 800f426:	4b65      	ldr	r3, [pc, #404]	; (800f5bc <_dtoa_r+0x62c>)
 800f428:	2200      	movs	r2, #0
 800f42a:	4640      	mov	r0, r8
 800f42c:	4649      	mov	r1, r9
 800f42e:	f7f1 f90b 	bl	8000648 <__aeabi_dmul>
 800f432:	4652      	mov	r2, sl
 800f434:	465b      	mov	r3, fp
 800f436:	f7f1 fb8d 	bl	8000b54 <__aeabi_dcmpge>
 800f43a:	9e03      	ldr	r6, [sp, #12]
 800f43c:	4637      	mov	r7, r6
 800f43e:	2800      	cmp	r0, #0
 800f440:	f040 8245 	bne.w	800f8ce <_dtoa_r+0x93e>
 800f444:	9d01      	ldr	r5, [sp, #4]
 800f446:	2331      	movs	r3, #49	; 0x31
 800f448:	f805 3b01 	strb.w	r3, [r5], #1
 800f44c:	9b00      	ldr	r3, [sp, #0]
 800f44e:	3301      	adds	r3, #1
 800f450:	9300      	str	r3, [sp, #0]
 800f452:	e240      	b.n	800f8d6 <_dtoa_r+0x946>
 800f454:	07f2      	lsls	r2, r6, #31
 800f456:	d505      	bpl.n	800f464 <_dtoa_r+0x4d4>
 800f458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f45c:	f7f1 f8f4 	bl	8000648 <__aeabi_dmul>
 800f460:	3501      	adds	r5, #1
 800f462:	2301      	movs	r3, #1
 800f464:	1076      	asrs	r6, r6, #1
 800f466:	3708      	adds	r7, #8
 800f468:	e777      	b.n	800f35a <_dtoa_r+0x3ca>
 800f46a:	2502      	movs	r5, #2
 800f46c:	e779      	b.n	800f362 <_dtoa_r+0x3d2>
 800f46e:	9f00      	ldr	r7, [sp, #0]
 800f470:	9e03      	ldr	r6, [sp, #12]
 800f472:	e794      	b.n	800f39e <_dtoa_r+0x40e>
 800f474:	9901      	ldr	r1, [sp, #4]
 800f476:	4b4c      	ldr	r3, [pc, #304]	; (800f5a8 <_dtoa_r+0x618>)
 800f478:	4431      	add	r1, r6
 800f47a:	910d      	str	r1, [sp, #52]	; 0x34
 800f47c:	9908      	ldr	r1, [sp, #32]
 800f47e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f482:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f486:	2900      	cmp	r1, #0
 800f488:	d043      	beq.n	800f512 <_dtoa_r+0x582>
 800f48a:	494d      	ldr	r1, [pc, #308]	; (800f5c0 <_dtoa_r+0x630>)
 800f48c:	2000      	movs	r0, #0
 800f48e:	f7f1 fa05 	bl	800089c <__aeabi_ddiv>
 800f492:	4652      	mov	r2, sl
 800f494:	465b      	mov	r3, fp
 800f496:	f7f0 ff1f 	bl	80002d8 <__aeabi_dsub>
 800f49a:	9d01      	ldr	r5, [sp, #4]
 800f49c:	4682      	mov	sl, r0
 800f49e:	468b      	mov	fp, r1
 800f4a0:	4649      	mov	r1, r9
 800f4a2:	4640      	mov	r0, r8
 800f4a4:	f7f1 fb80 	bl	8000ba8 <__aeabi_d2iz>
 800f4a8:	4606      	mov	r6, r0
 800f4aa:	f7f1 f863 	bl	8000574 <__aeabi_i2d>
 800f4ae:	4602      	mov	r2, r0
 800f4b0:	460b      	mov	r3, r1
 800f4b2:	4640      	mov	r0, r8
 800f4b4:	4649      	mov	r1, r9
 800f4b6:	f7f0 ff0f 	bl	80002d8 <__aeabi_dsub>
 800f4ba:	3630      	adds	r6, #48	; 0x30
 800f4bc:	f805 6b01 	strb.w	r6, [r5], #1
 800f4c0:	4652      	mov	r2, sl
 800f4c2:	465b      	mov	r3, fp
 800f4c4:	4680      	mov	r8, r0
 800f4c6:	4689      	mov	r9, r1
 800f4c8:	f7f1 fb30 	bl	8000b2c <__aeabi_dcmplt>
 800f4cc:	2800      	cmp	r0, #0
 800f4ce:	d163      	bne.n	800f598 <_dtoa_r+0x608>
 800f4d0:	4642      	mov	r2, r8
 800f4d2:	464b      	mov	r3, r9
 800f4d4:	4936      	ldr	r1, [pc, #216]	; (800f5b0 <_dtoa_r+0x620>)
 800f4d6:	2000      	movs	r0, #0
 800f4d8:	f7f0 fefe 	bl	80002d8 <__aeabi_dsub>
 800f4dc:	4652      	mov	r2, sl
 800f4de:	465b      	mov	r3, fp
 800f4e0:	f7f1 fb24 	bl	8000b2c <__aeabi_dcmplt>
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	f040 80b5 	bne.w	800f654 <_dtoa_r+0x6c4>
 800f4ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f4ec:	429d      	cmp	r5, r3
 800f4ee:	d081      	beq.n	800f3f4 <_dtoa_r+0x464>
 800f4f0:	4b30      	ldr	r3, [pc, #192]	; (800f5b4 <_dtoa_r+0x624>)
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	4650      	mov	r0, sl
 800f4f6:	4659      	mov	r1, fp
 800f4f8:	f7f1 f8a6 	bl	8000648 <__aeabi_dmul>
 800f4fc:	4b2d      	ldr	r3, [pc, #180]	; (800f5b4 <_dtoa_r+0x624>)
 800f4fe:	4682      	mov	sl, r0
 800f500:	468b      	mov	fp, r1
 800f502:	4640      	mov	r0, r8
 800f504:	4649      	mov	r1, r9
 800f506:	2200      	movs	r2, #0
 800f508:	f7f1 f89e 	bl	8000648 <__aeabi_dmul>
 800f50c:	4680      	mov	r8, r0
 800f50e:	4689      	mov	r9, r1
 800f510:	e7c6      	b.n	800f4a0 <_dtoa_r+0x510>
 800f512:	4650      	mov	r0, sl
 800f514:	4659      	mov	r1, fp
 800f516:	f7f1 f897 	bl	8000648 <__aeabi_dmul>
 800f51a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f51c:	9d01      	ldr	r5, [sp, #4]
 800f51e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f520:	4682      	mov	sl, r0
 800f522:	468b      	mov	fp, r1
 800f524:	4649      	mov	r1, r9
 800f526:	4640      	mov	r0, r8
 800f528:	f7f1 fb3e 	bl	8000ba8 <__aeabi_d2iz>
 800f52c:	4606      	mov	r6, r0
 800f52e:	f7f1 f821 	bl	8000574 <__aeabi_i2d>
 800f532:	3630      	adds	r6, #48	; 0x30
 800f534:	4602      	mov	r2, r0
 800f536:	460b      	mov	r3, r1
 800f538:	4640      	mov	r0, r8
 800f53a:	4649      	mov	r1, r9
 800f53c:	f7f0 fecc 	bl	80002d8 <__aeabi_dsub>
 800f540:	f805 6b01 	strb.w	r6, [r5], #1
 800f544:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f546:	429d      	cmp	r5, r3
 800f548:	4680      	mov	r8, r0
 800f54a:	4689      	mov	r9, r1
 800f54c:	f04f 0200 	mov.w	r2, #0
 800f550:	d124      	bne.n	800f59c <_dtoa_r+0x60c>
 800f552:	4b1b      	ldr	r3, [pc, #108]	; (800f5c0 <_dtoa_r+0x630>)
 800f554:	4650      	mov	r0, sl
 800f556:	4659      	mov	r1, fp
 800f558:	f7f0 fec0 	bl	80002dc <__adddf3>
 800f55c:	4602      	mov	r2, r0
 800f55e:	460b      	mov	r3, r1
 800f560:	4640      	mov	r0, r8
 800f562:	4649      	mov	r1, r9
 800f564:	f7f1 fb00 	bl	8000b68 <__aeabi_dcmpgt>
 800f568:	2800      	cmp	r0, #0
 800f56a:	d173      	bne.n	800f654 <_dtoa_r+0x6c4>
 800f56c:	4652      	mov	r2, sl
 800f56e:	465b      	mov	r3, fp
 800f570:	4913      	ldr	r1, [pc, #76]	; (800f5c0 <_dtoa_r+0x630>)
 800f572:	2000      	movs	r0, #0
 800f574:	f7f0 feb0 	bl	80002d8 <__aeabi_dsub>
 800f578:	4602      	mov	r2, r0
 800f57a:	460b      	mov	r3, r1
 800f57c:	4640      	mov	r0, r8
 800f57e:	4649      	mov	r1, r9
 800f580:	f7f1 fad4 	bl	8000b2c <__aeabi_dcmplt>
 800f584:	2800      	cmp	r0, #0
 800f586:	f43f af35 	beq.w	800f3f4 <_dtoa_r+0x464>
 800f58a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f58c:	1e6b      	subs	r3, r5, #1
 800f58e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f590:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f594:	2b30      	cmp	r3, #48	; 0x30
 800f596:	d0f8      	beq.n	800f58a <_dtoa_r+0x5fa>
 800f598:	9700      	str	r7, [sp, #0]
 800f59a:	e049      	b.n	800f630 <_dtoa_r+0x6a0>
 800f59c:	4b05      	ldr	r3, [pc, #20]	; (800f5b4 <_dtoa_r+0x624>)
 800f59e:	f7f1 f853 	bl	8000648 <__aeabi_dmul>
 800f5a2:	4680      	mov	r8, r0
 800f5a4:	4689      	mov	r9, r1
 800f5a6:	e7bd      	b.n	800f524 <_dtoa_r+0x594>
 800f5a8:	080131f8 	.word	0x080131f8
 800f5ac:	080131d0 	.word	0x080131d0
 800f5b0:	3ff00000 	.word	0x3ff00000
 800f5b4:	40240000 	.word	0x40240000
 800f5b8:	401c0000 	.word	0x401c0000
 800f5bc:	40140000 	.word	0x40140000
 800f5c0:	3fe00000 	.word	0x3fe00000
 800f5c4:	9d01      	ldr	r5, [sp, #4]
 800f5c6:	4656      	mov	r6, sl
 800f5c8:	465f      	mov	r7, fp
 800f5ca:	4642      	mov	r2, r8
 800f5cc:	464b      	mov	r3, r9
 800f5ce:	4630      	mov	r0, r6
 800f5d0:	4639      	mov	r1, r7
 800f5d2:	f7f1 f963 	bl	800089c <__aeabi_ddiv>
 800f5d6:	f7f1 fae7 	bl	8000ba8 <__aeabi_d2iz>
 800f5da:	4682      	mov	sl, r0
 800f5dc:	f7f0 ffca 	bl	8000574 <__aeabi_i2d>
 800f5e0:	4642      	mov	r2, r8
 800f5e2:	464b      	mov	r3, r9
 800f5e4:	f7f1 f830 	bl	8000648 <__aeabi_dmul>
 800f5e8:	4602      	mov	r2, r0
 800f5ea:	460b      	mov	r3, r1
 800f5ec:	4630      	mov	r0, r6
 800f5ee:	4639      	mov	r1, r7
 800f5f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f5f4:	f7f0 fe70 	bl	80002d8 <__aeabi_dsub>
 800f5f8:	f805 6b01 	strb.w	r6, [r5], #1
 800f5fc:	9e01      	ldr	r6, [sp, #4]
 800f5fe:	9f03      	ldr	r7, [sp, #12]
 800f600:	1bae      	subs	r6, r5, r6
 800f602:	42b7      	cmp	r7, r6
 800f604:	4602      	mov	r2, r0
 800f606:	460b      	mov	r3, r1
 800f608:	d135      	bne.n	800f676 <_dtoa_r+0x6e6>
 800f60a:	f7f0 fe67 	bl	80002dc <__adddf3>
 800f60e:	4642      	mov	r2, r8
 800f610:	464b      	mov	r3, r9
 800f612:	4606      	mov	r6, r0
 800f614:	460f      	mov	r7, r1
 800f616:	f7f1 faa7 	bl	8000b68 <__aeabi_dcmpgt>
 800f61a:	b9d0      	cbnz	r0, 800f652 <_dtoa_r+0x6c2>
 800f61c:	4642      	mov	r2, r8
 800f61e:	464b      	mov	r3, r9
 800f620:	4630      	mov	r0, r6
 800f622:	4639      	mov	r1, r7
 800f624:	f7f1 fa78 	bl	8000b18 <__aeabi_dcmpeq>
 800f628:	b110      	cbz	r0, 800f630 <_dtoa_r+0x6a0>
 800f62a:	f01a 0f01 	tst.w	sl, #1
 800f62e:	d110      	bne.n	800f652 <_dtoa_r+0x6c2>
 800f630:	4620      	mov	r0, r4
 800f632:	ee18 1a10 	vmov	r1, s16
 800f636:	f001 f885 	bl	8010744 <_Bfree>
 800f63a:	2300      	movs	r3, #0
 800f63c:	9800      	ldr	r0, [sp, #0]
 800f63e:	702b      	strb	r3, [r5, #0]
 800f640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f642:	3001      	adds	r0, #1
 800f644:	6018      	str	r0, [r3, #0]
 800f646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f648:	2b00      	cmp	r3, #0
 800f64a:	f43f acf1 	beq.w	800f030 <_dtoa_r+0xa0>
 800f64e:	601d      	str	r5, [r3, #0]
 800f650:	e4ee      	b.n	800f030 <_dtoa_r+0xa0>
 800f652:	9f00      	ldr	r7, [sp, #0]
 800f654:	462b      	mov	r3, r5
 800f656:	461d      	mov	r5, r3
 800f658:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f65c:	2a39      	cmp	r2, #57	; 0x39
 800f65e:	d106      	bne.n	800f66e <_dtoa_r+0x6de>
 800f660:	9a01      	ldr	r2, [sp, #4]
 800f662:	429a      	cmp	r2, r3
 800f664:	d1f7      	bne.n	800f656 <_dtoa_r+0x6c6>
 800f666:	9901      	ldr	r1, [sp, #4]
 800f668:	2230      	movs	r2, #48	; 0x30
 800f66a:	3701      	adds	r7, #1
 800f66c:	700a      	strb	r2, [r1, #0]
 800f66e:	781a      	ldrb	r2, [r3, #0]
 800f670:	3201      	adds	r2, #1
 800f672:	701a      	strb	r2, [r3, #0]
 800f674:	e790      	b.n	800f598 <_dtoa_r+0x608>
 800f676:	4ba6      	ldr	r3, [pc, #664]	; (800f910 <_dtoa_r+0x980>)
 800f678:	2200      	movs	r2, #0
 800f67a:	f7f0 ffe5 	bl	8000648 <__aeabi_dmul>
 800f67e:	2200      	movs	r2, #0
 800f680:	2300      	movs	r3, #0
 800f682:	4606      	mov	r6, r0
 800f684:	460f      	mov	r7, r1
 800f686:	f7f1 fa47 	bl	8000b18 <__aeabi_dcmpeq>
 800f68a:	2800      	cmp	r0, #0
 800f68c:	d09d      	beq.n	800f5ca <_dtoa_r+0x63a>
 800f68e:	e7cf      	b.n	800f630 <_dtoa_r+0x6a0>
 800f690:	9a08      	ldr	r2, [sp, #32]
 800f692:	2a00      	cmp	r2, #0
 800f694:	f000 80d7 	beq.w	800f846 <_dtoa_r+0x8b6>
 800f698:	9a06      	ldr	r2, [sp, #24]
 800f69a:	2a01      	cmp	r2, #1
 800f69c:	f300 80ba 	bgt.w	800f814 <_dtoa_r+0x884>
 800f6a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f6a2:	2a00      	cmp	r2, #0
 800f6a4:	f000 80b2 	beq.w	800f80c <_dtoa_r+0x87c>
 800f6a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f6ac:	9e07      	ldr	r6, [sp, #28]
 800f6ae:	9d04      	ldr	r5, [sp, #16]
 800f6b0:	9a04      	ldr	r2, [sp, #16]
 800f6b2:	441a      	add	r2, r3
 800f6b4:	9204      	str	r2, [sp, #16]
 800f6b6:	9a05      	ldr	r2, [sp, #20]
 800f6b8:	2101      	movs	r1, #1
 800f6ba:	441a      	add	r2, r3
 800f6bc:	4620      	mov	r0, r4
 800f6be:	9205      	str	r2, [sp, #20]
 800f6c0:	f001 f942 	bl	8010948 <__i2b>
 800f6c4:	4607      	mov	r7, r0
 800f6c6:	2d00      	cmp	r5, #0
 800f6c8:	dd0c      	ble.n	800f6e4 <_dtoa_r+0x754>
 800f6ca:	9b05      	ldr	r3, [sp, #20]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	dd09      	ble.n	800f6e4 <_dtoa_r+0x754>
 800f6d0:	42ab      	cmp	r3, r5
 800f6d2:	9a04      	ldr	r2, [sp, #16]
 800f6d4:	bfa8      	it	ge
 800f6d6:	462b      	movge	r3, r5
 800f6d8:	1ad2      	subs	r2, r2, r3
 800f6da:	9204      	str	r2, [sp, #16]
 800f6dc:	9a05      	ldr	r2, [sp, #20]
 800f6de:	1aed      	subs	r5, r5, r3
 800f6e0:	1ad3      	subs	r3, r2, r3
 800f6e2:	9305      	str	r3, [sp, #20]
 800f6e4:	9b07      	ldr	r3, [sp, #28]
 800f6e6:	b31b      	cbz	r3, 800f730 <_dtoa_r+0x7a0>
 800f6e8:	9b08      	ldr	r3, [sp, #32]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	f000 80af 	beq.w	800f84e <_dtoa_r+0x8be>
 800f6f0:	2e00      	cmp	r6, #0
 800f6f2:	dd13      	ble.n	800f71c <_dtoa_r+0x78c>
 800f6f4:	4639      	mov	r1, r7
 800f6f6:	4632      	mov	r2, r6
 800f6f8:	4620      	mov	r0, r4
 800f6fa:	f001 f9e5 	bl	8010ac8 <__pow5mult>
 800f6fe:	ee18 2a10 	vmov	r2, s16
 800f702:	4601      	mov	r1, r0
 800f704:	4607      	mov	r7, r0
 800f706:	4620      	mov	r0, r4
 800f708:	f001 f934 	bl	8010974 <__multiply>
 800f70c:	ee18 1a10 	vmov	r1, s16
 800f710:	4680      	mov	r8, r0
 800f712:	4620      	mov	r0, r4
 800f714:	f001 f816 	bl	8010744 <_Bfree>
 800f718:	ee08 8a10 	vmov	s16, r8
 800f71c:	9b07      	ldr	r3, [sp, #28]
 800f71e:	1b9a      	subs	r2, r3, r6
 800f720:	d006      	beq.n	800f730 <_dtoa_r+0x7a0>
 800f722:	ee18 1a10 	vmov	r1, s16
 800f726:	4620      	mov	r0, r4
 800f728:	f001 f9ce 	bl	8010ac8 <__pow5mult>
 800f72c:	ee08 0a10 	vmov	s16, r0
 800f730:	2101      	movs	r1, #1
 800f732:	4620      	mov	r0, r4
 800f734:	f001 f908 	bl	8010948 <__i2b>
 800f738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	4606      	mov	r6, r0
 800f73e:	f340 8088 	ble.w	800f852 <_dtoa_r+0x8c2>
 800f742:	461a      	mov	r2, r3
 800f744:	4601      	mov	r1, r0
 800f746:	4620      	mov	r0, r4
 800f748:	f001 f9be 	bl	8010ac8 <__pow5mult>
 800f74c:	9b06      	ldr	r3, [sp, #24]
 800f74e:	2b01      	cmp	r3, #1
 800f750:	4606      	mov	r6, r0
 800f752:	f340 8081 	ble.w	800f858 <_dtoa_r+0x8c8>
 800f756:	f04f 0800 	mov.w	r8, #0
 800f75a:	6933      	ldr	r3, [r6, #16]
 800f75c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f760:	6918      	ldr	r0, [r3, #16]
 800f762:	f001 f8a1 	bl	80108a8 <__hi0bits>
 800f766:	f1c0 0020 	rsb	r0, r0, #32
 800f76a:	9b05      	ldr	r3, [sp, #20]
 800f76c:	4418      	add	r0, r3
 800f76e:	f010 001f 	ands.w	r0, r0, #31
 800f772:	f000 8092 	beq.w	800f89a <_dtoa_r+0x90a>
 800f776:	f1c0 0320 	rsb	r3, r0, #32
 800f77a:	2b04      	cmp	r3, #4
 800f77c:	f340 808a 	ble.w	800f894 <_dtoa_r+0x904>
 800f780:	f1c0 001c 	rsb	r0, r0, #28
 800f784:	9b04      	ldr	r3, [sp, #16]
 800f786:	4403      	add	r3, r0
 800f788:	9304      	str	r3, [sp, #16]
 800f78a:	9b05      	ldr	r3, [sp, #20]
 800f78c:	4403      	add	r3, r0
 800f78e:	4405      	add	r5, r0
 800f790:	9305      	str	r3, [sp, #20]
 800f792:	9b04      	ldr	r3, [sp, #16]
 800f794:	2b00      	cmp	r3, #0
 800f796:	dd07      	ble.n	800f7a8 <_dtoa_r+0x818>
 800f798:	ee18 1a10 	vmov	r1, s16
 800f79c:	461a      	mov	r2, r3
 800f79e:	4620      	mov	r0, r4
 800f7a0:	f001 f9ec 	bl	8010b7c <__lshift>
 800f7a4:	ee08 0a10 	vmov	s16, r0
 800f7a8:	9b05      	ldr	r3, [sp, #20]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	dd05      	ble.n	800f7ba <_dtoa_r+0x82a>
 800f7ae:	4631      	mov	r1, r6
 800f7b0:	461a      	mov	r2, r3
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	f001 f9e2 	bl	8010b7c <__lshift>
 800f7b8:	4606      	mov	r6, r0
 800f7ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d06e      	beq.n	800f89e <_dtoa_r+0x90e>
 800f7c0:	ee18 0a10 	vmov	r0, s16
 800f7c4:	4631      	mov	r1, r6
 800f7c6:	f001 fa49 	bl	8010c5c <__mcmp>
 800f7ca:	2800      	cmp	r0, #0
 800f7cc:	da67      	bge.n	800f89e <_dtoa_r+0x90e>
 800f7ce:	9b00      	ldr	r3, [sp, #0]
 800f7d0:	3b01      	subs	r3, #1
 800f7d2:	ee18 1a10 	vmov	r1, s16
 800f7d6:	9300      	str	r3, [sp, #0]
 800f7d8:	220a      	movs	r2, #10
 800f7da:	2300      	movs	r3, #0
 800f7dc:	4620      	mov	r0, r4
 800f7de:	f000 ffd3 	bl	8010788 <__multadd>
 800f7e2:	9b08      	ldr	r3, [sp, #32]
 800f7e4:	ee08 0a10 	vmov	s16, r0
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	f000 81b1 	beq.w	800fb50 <_dtoa_r+0xbc0>
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	4639      	mov	r1, r7
 800f7f2:	220a      	movs	r2, #10
 800f7f4:	4620      	mov	r0, r4
 800f7f6:	f000 ffc7 	bl	8010788 <__multadd>
 800f7fa:	9b02      	ldr	r3, [sp, #8]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	4607      	mov	r7, r0
 800f800:	f300 808e 	bgt.w	800f920 <_dtoa_r+0x990>
 800f804:	9b06      	ldr	r3, [sp, #24]
 800f806:	2b02      	cmp	r3, #2
 800f808:	dc51      	bgt.n	800f8ae <_dtoa_r+0x91e>
 800f80a:	e089      	b.n	800f920 <_dtoa_r+0x990>
 800f80c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f80e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f812:	e74b      	b.n	800f6ac <_dtoa_r+0x71c>
 800f814:	9b03      	ldr	r3, [sp, #12]
 800f816:	1e5e      	subs	r6, r3, #1
 800f818:	9b07      	ldr	r3, [sp, #28]
 800f81a:	42b3      	cmp	r3, r6
 800f81c:	bfbf      	itttt	lt
 800f81e:	9b07      	ldrlt	r3, [sp, #28]
 800f820:	9607      	strlt	r6, [sp, #28]
 800f822:	1af2      	sublt	r2, r6, r3
 800f824:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f826:	bfb6      	itet	lt
 800f828:	189b      	addlt	r3, r3, r2
 800f82a:	1b9e      	subge	r6, r3, r6
 800f82c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f82e:	9b03      	ldr	r3, [sp, #12]
 800f830:	bfb8      	it	lt
 800f832:	2600      	movlt	r6, #0
 800f834:	2b00      	cmp	r3, #0
 800f836:	bfb7      	itett	lt
 800f838:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f83c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f840:	1a9d      	sublt	r5, r3, r2
 800f842:	2300      	movlt	r3, #0
 800f844:	e734      	b.n	800f6b0 <_dtoa_r+0x720>
 800f846:	9e07      	ldr	r6, [sp, #28]
 800f848:	9d04      	ldr	r5, [sp, #16]
 800f84a:	9f08      	ldr	r7, [sp, #32]
 800f84c:	e73b      	b.n	800f6c6 <_dtoa_r+0x736>
 800f84e:	9a07      	ldr	r2, [sp, #28]
 800f850:	e767      	b.n	800f722 <_dtoa_r+0x792>
 800f852:	9b06      	ldr	r3, [sp, #24]
 800f854:	2b01      	cmp	r3, #1
 800f856:	dc18      	bgt.n	800f88a <_dtoa_r+0x8fa>
 800f858:	f1ba 0f00 	cmp.w	sl, #0
 800f85c:	d115      	bne.n	800f88a <_dtoa_r+0x8fa>
 800f85e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f862:	b993      	cbnz	r3, 800f88a <_dtoa_r+0x8fa>
 800f864:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f868:	0d1b      	lsrs	r3, r3, #20
 800f86a:	051b      	lsls	r3, r3, #20
 800f86c:	b183      	cbz	r3, 800f890 <_dtoa_r+0x900>
 800f86e:	9b04      	ldr	r3, [sp, #16]
 800f870:	3301      	adds	r3, #1
 800f872:	9304      	str	r3, [sp, #16]
 800f874:	9b05      	ldr	r3, [sp, #20]
 800f876:	3301      	adds	r3, #1
 800f878:	9305      	str	r3, [sp, #20]
 800f87a:	f04f 0801 	mov.w	r8, #1
 800f87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f880:	2b00      	cmp	r3, #0
 800f882:	f47f af6a 	bne.w	800f75a <_dtoa_r+0x7ca>
 800f886:	2001      	movs	r0, #1
 800f888:	e76f      	b.n	800f76a <_dtoa_r+0x7da>
 800f88a:	f04f 0800 	mov.w	r8, #0
 800f88e:	e7f6      	b.n	800f87e <_dtoa_r+0x8ee>
 800f890:	4698      	mov	r8, r3
 800f892:	e7f4      	b.n	800f87e <_dtoa_r+0x8ee>
 800f894:	f43f af7d 	beq.w	800f792 <_dtoa_r+0x802>
 800f898:	4618      	mov	r0, r3
 800f89a:	301c      	adds	r0, #28
 800f89c:	e772      	b.n	800f784 <_dtoa_r+0x7f4>
 800f89e:	9b03      	ldr	r3, [sp, #12]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	dc37      	bgt.n	800f914 <_dtoa_r+0x984>
 800f8a4:	9b06      	ldr	r3, [sp, #24]
 800f8a6:	2b02      	cmp	r3, #2
 800f8a8:	dd34      	ble.n	800f914 <_dtoa_r+0x984>
 800f8aa:	9b03      	ldr	r3, [sp, #12]
 800f8ac:	9302      	str	r3, [sp, #8]
 800f8ae:	9b02      	ldr	r3, [sp, #8]
 800f8b0:	b96b      	cbnz	r3, 800f8ce <_dtoa_r+0x93e>
 800f8b2:	4631      	mov	r1, r6
 800f8b4:	2205      	movs	r2, #5
 800f8b6:	4620      	mov	r0, r4
 800f8b8:	f000 ff66 	bl	8010788 <__multadd>
 800f8bc:	4601      	mov	r1, r0
 800f8be:	4606      	mov	r6, r0
 800f8c0:	ee18 0a10 	vmov	r0, s16
 800f8c4:	f001 f9ca 	bl	8010c5c <__mcmp>
 800f8c8:	2800      	cmp	r0, #0
 800f8ca:	f73f adbb 	bgt.w	800f444 <_dtoa_r+0x4b4>
 800f8ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8d0:	9d01      	ldr	r5, [sp, #4]
 800f8d2:	43db      	mvns	r3, r3
 800f8d4:	9300      	str	r3, [sp, #0]
 800f8d6:	f04f 0800 	mov.w	r8, #0
 800f8da:	4631      	mov	r1, r6
 800f8dc:	4620      	mov	r0, r4
 800f8de:	f000 ff31 	bl	8010744 <_Bfree>
 800f8e2:	2f00      	cmp	r7, #0
 800f8e4:	f43f aea4 	beq.w	800f630 <_dtoa_r+0x6a0>
 800f8e8:	f1b8 0f00 	cmp.w	r8, #0
 800f8ec:	d005      	beq.n	800f8fa <_dtoa_r+0x96a>
 800f8ee:	45b8      	cmp	r8, r7
 800f8f0:	d003      	beq.n	800f8fa <_dtoa_r+0x96a>
 800f8f2:	4641      	mov	r1, r8
 800f8f4:	4620      	mov	r0, r4
 800f8f6:	f000 ff25 	bl	8010744 <_Bfree>
 800f8fa:	4639      	mov	r1, r7
 800f8fc:	4620      	mov	r0, r4
 800f8fe:	f000 ff21 	bl	8010744 <_Bfree>
 800f902:	e695      	b.n	800f630 <_dtoa_r+0x6a0>
 800f904:	2600      	movs	r6, #0
 800f906:	4637      	mov	r7, r6
 800f908:	e7e1      	b.n	800f8ce <_dtoa_r+0x93e>
 800f90a:	9700      	str	r7, [sp, #0]
 800f90c:	4637      	mov	r7, r6
 800f90e:	e599      	b.n	800f444 <_dtoa_r+0x4b4>
 800f910:	40240000 	.word	0x40240000
 800f914:	9b08      	ldr	r3, [sp, #32]
 800f916:	2b00      	cmp	r3, #0
 800f918:	f000 80ca 	beq.w	800fab0 <_dtoa_r+0xb20>
 800f91c:	9b03      	ldr	r3, [sp, #12]
 800f91e:	9302      	str	r3, [sp, #8]
 800f920:	2d00      	cmp	r5, #0
 800f922:	dd05      	ble.n	800f930 <_dtoa_r+0x9a0>
 800f924:	4639      	mov	r1, r7
 800f926:	462a      	mov	r2, r5
 800f928:	4620      	mov	r0, r4
 800f92a:	f001 f927 	bl	8010b7c <__lshift>
 800f92e:	4607      	mov	r7, r0
 800f930:	f1b8 0f00 	cmp.w	r8, #0
 800f934:	d05b      	beq.n	800f9ee <_dtoa_r+0xa5e>
 800f936:	6879      	ldr	r1, [r7, #4]
 800f938:	4620      	mov	r0, r4
 800f93a:	f000 fec3 	bl	80106c4 <_Balloc>
 800f93e:	4605      	mov	r5, r0
 800f940:	b928      	cbnz	r0, 800f94e <_dtoa_r+0x9be>
 800f942:	4b87      	ldr	r3, [pc, #540]	; (800fb60 <_dtoa_r+0xbd0>)
 800f944:	4602      	mov	r2, r0
 800f946:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f94a:	f7ff bb3b 	b.w	800efc4 <_dtoa_r+0x34>
 800f94e:	693a      	ldr	r2, [r7, #16]
 800f950:	3202      	adds	r2, #2
 800f952:	0092      	lsls	r2, r2, #2
 800f954:	f107 010c 	add.w	r1, r7, #12
 800f958:	300c      	adds	r0, #12
 800f95a:	f7fd fe03 	bl	800d564 <memcpy>
 800f95e:	2201      	movs	r2, #1
 800f960:	4629      	mov	r1, r5
 800f962:	4620      	mov	r0, r4
 800f964:	f001 f90a 	bl	8010b7c <__lshift>
 800f968:	9b01      	ldr	r3, [sp, #4]
 800f96a:	f103 0901 	add.w	r9, r3, #1
 800f96e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f972:	4413      	add	r3, r2
 800f974:	9305      	str	r3, [sp, #20]
 800f976:	f00a 0301 	and.w	r3, sl, #1
 800f97a:	46b8      	mov	r8, r7
 800f97c:	9304      	str	r3, [sp, #16]
 800f97e:	4607      	mov	r7, r0
 800f980:	4631      	mov	r1, r6
 800f982:	ee18 0a10 	vmov	r0, s16
 800f986:	f7ff fa75 	bl	800ee74 <quorem>
 800f98a:	4641      	mov	r1, r8
 800f98c:	9002      	str	r0, [sp, #8]
 800f98e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f992:	ee18 0a10 	vmov	r0, s16
 800f996:	f001 f961 	bl	8010c5c <__mcmp>
 800f99a:	463a      	mov	r2, r7
 800f99c:	9003      	str	r0, [sp, #12]
 800f99e:	4631      	mov	r1, r6
 800f9a0:	4620      	mov	r0, r4
 800f9a2:	f001 f977 	bl	8010c94 <__mdiff>
 800f9a6:	68c2      	ldr	r2, [r0, #12]
 800f9a8:	f109 3bff 	add.w	fp, r9, #4294967295
 800f9ac:	4605      	mov	r5, r0
 800f9ae:	bb02      	cbnz	r2, 800f9f2 <_dtoa_r+0xa62>
 800f9b0:	4601      	mov	r1, r0
 800f9b2:	ee18 0a10 	vmov	r0, s16
 800f9b6:	f001 f951 	bl	8010c5c <__mcmp>
 800f9ba:	4602      	mov	r2, r0
 800f9bc:	4629      	mov	r1, r5
 800f9be:	4620      	mov	r0, r4
 800f9c0:	9207      	str	r2, [sp, #28]
 800f9c2:	f000 febf 	bl	8010744 <_Bfree>
 800f9c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f9ca:	ea43 0102 	orr.w	r1, r3, r2
 800f9ce:	9b04      	ldr	r3, [sp, #16]
 800f9d0:	430b      	orrs	r3, r1
 800f9d2:	464d      	mov	r5, r9
 800f9d4:	d10f      	bne.n	800f9f6 <_dtoa_r+0xa66>
 800f9d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f9da:	d02a      	beq.n	800fa32 <_dtoa_r+0xaa2>
 800f9dc:	9b03      	ldr	r3, [sp, #12]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	dd02      	ble.n	800f9e8 <_dtoa_r+0xa58>
 800f9e2:	9b02      	ldr	r3, [sp, #8]
 800f9e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f9e8:	f88b a000 	strb.w	sl, [fp]
 800f9ec:	e775      	b.n	800f8da <_dtoa_r+0x94a>
 800f9ee:	4638      	mov	r0, r7
 800f9f0:	e7ba      	b.n	800f968 <_dtoa_r+0x9d8>
 800f9f2:	2201      	movs	r2, #1
 800f9f4:	e7e2      	b.n	800f9bc <_dtoa_r+0xa2c>
 800f9f6:	9b03      	ldr	r3, [sp, #12]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	db04      	blt.n	800fa06 <_dtoa_r+0xa76>
 800f9fc:	9906      	ldr	r1, [sp, #24]
 800f9fe:	430b      	orrs	r3, r1
 800fa00:	9904      	ldr	r1, [sp, #16]
 800fa02:	430b      	orrs	r3, r1
 800fa04:	d122      	bne.n	800fa4c <_dtoa_r+0xabc>
 800fa06:	2a00      	cmp	r2, #0
 800fa08:	ddee      	ble.n	800f9e8 <_dtoa_r+0xa58>
 800fa0a:	ee18 1a10 	vmov	r1, s16
 800fa0e:	2201      	movs	r2, #1
 800fa10:	4620      	mov	r0, r4
 800fa12:	f001 f8b3 	bl	8010b7c <__lshift>
 800fa16:	4631      	mov	r1, r6
 800fa18:	ee08 0a10 	vmov	s16, r0
 800fa1c:	f001 f91e 	bl	8010c5c <__mcmp>
 800fa20:	2800      	cmp	r0, #0
 800fa22:	dc03      	bgt.n	800fa2c <_dtoa_r+0xa9c>
 800fa24:	d1e0      	bne.n	800f9e8 <_dtoa_r+0xa58>
 800fa26:	f01a 0f01 	tst.w	sl, #1
 800fa2a:	d0dd      	beq.n	800f9e8 <_dtoa_r+0xa58>
 800fa2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fa30:	d1d7      	bne.n	800f9e2 <_dtoa_r+0xa52>
 800fa32:	2339      	movs	r3, #57	; 0x39
 800fa34:	f88b 3000 	strb.w	r3, [fp]
 800fa38:	462b      	mov	r3, r5
 800fa3a:	461d      	mov	r5, r3
 800fa3c:	3b01      	subs	r3, #1
 800fa3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fa42:	2a39      	cmp	r2, #57	; 0x39
 800fa44:	d071      	beq.n	800fb2a <_dtoa_r+0xb9a>
 800fa46:	3201      	adds	r2, #1
 800fa48:	701a      	strb	r2, [r3, #0]
 800fa4a:	e746      	b.n	800f8da <_dtoa_r+0x94a>
 800fa4c:	2a00      	cmp	r2, #0
 800fa4e:	dd07      	ble.n	800fa60 <_dtoa_r+0xad0>
 800fa50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fa54:	d0ed      	beq.n	800fa32 <_dtoa_r+0xaa2>
 800fa56:	f10a 0301 	add.w	r3, sl, #1
 800fa5a:	f88b 3000 	strb.w	r3, [fp]
 800fa5e:	e73c      	b.n	800f8da <_dtoa_r+0x94a>
 800fa60:	9b05      	ldr	r3, [sp, #20]
 800fa62:	f809 ac01 	strb.w	sl, [r9, #-1]
 800fa66:	4599      	cmp	r9, r3
 800fa68:	d047      	beq.n	800fafa <_dtoa_r+0xb6a>
 800fa6a:	ee18 1a10 	vmov	r1, s16
 800fa6e:	2300      	movs	r3, #0
 800fa70:	220a      	movs	r2, #10
 800fa72:	4620      	mov	r0, r4
 800fa74:	f000 fe88 	bl	8010788 <__multadd>
 800fa78:	45b8      	cmp	r8, r7
 800fa7a:	ee08 0a10 	vmov	s16, r0
 800fa7e:	f04f 0300 	mov.w	r3, #0
 800fa82:	f04f 020a 	mov.w	r2, #10
 800fa86:	4641      	mov	r1, r8
 800fa88:	4620      	mov	r0, r4
 800fa8a:	d106      	bne.n	800fa9a <_dtoa_r+0xb0a>
 800fa8c:	f000 fe7c 	bl	8010788 <__multadd>
 800fa90:	4680      	mov	r8, r0
 800fa92:	4607      	mov	r7, r0
 800fa94:	f109 0901 	add.w	r9, r9, #1
 800fa98:	e772      	b.n	800f980 <_dtoa_r+0x9f0>
 800fa9a:	f000 fe75 	bl	8010788 <__multadd>
 800fa9e:	4639      	mov	r1, r7
 800faa0:	4680      	mov	r8, r0
 800faa2:	2300      	movs	r3, #0
 800faa4:	220a      	movs	r2, #10
 800faa6:	4620      	mov	r0, r4
 800faa8:	f000 fe6e 	bl	8010788 <__multadd>
 800faac:	4607      	mov	r7, r0
 800faae:	e7f1      	b.n	800fa94 <_dtoa_r+0xb04>
 800fab0:	9b03      	ldr	r3, [sp, #12]
 800fab2:	9302      	str	r3, [sp, #8]
 800fab4:	9d01      	ldr	r5, [sp, #4]
 800fab6:	ee18 0a10 	vmov	r0, s16
 800faba:	4631      	mov	r1, r6
 800fabc:	f7ff f9da 	bl	800ee74 <quorem>
 800fac0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fac4:	9b01      	ldr	r3, [sp, #4]
 800fac6:	f805 ab01 	strb.w	sl, [r5], #1
 800faca:	1aea      	subs	r2, r5, r3
 800facc:	9b02      	ldr	r3, [sp, #8]
 800face:	4293      	cmp	r3, r2
 800fad0:	dd09      	ble.n	800fae6 <_dtoa_r+0xb56>
 800fad2:	ee18 1a10 	vmov	r1, s16
 800fad6:	2300      	movs	r3, #0
 800fad8:	220a      	movs	r2, #10
 800fada:	4620      	mov	r0, r4
 800fadc:	f000 fe54 	bl	8010788 <__multadd>
 800fae0:	ee08 0a10 	vmov	s16, r0
 800fae4:	e7e7      	b.n	800fab6 <_dtoa_r+0xb26>
 800fae6:	9b02      	ldr	r3, [sp, #8]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	bfc8      	it	gt
 800faec:	461d      	movgt	r5, r3
 800faee:	9b01      	ldr	r3, [sp, #4]
 800faf0:	bfd8      	it	le
 800faf2:	2501      	movle	r5, #1
 800faf4:	441d      	add	r5, r3
 800faf6:	f04f 0800 	mov.w	r8, #0
 800fafa:	ee18 1a10 	vmov	r1, s16
 800fafe:	2201      	movs	r2, #1
 800fb00:	4620      	mov	r0, r4
 800fb02:	f001 f83b 	bl	8010b7c <__lshift>
 800fb06:	4631      	mov	r1, r6
 800fb08:	ee08 0a10 	vmov	s16, r0
 800fb0c:	f001 f8a6 	bl	8010c5c <__mcmp>
 800fb10:	2800      	cmp	r0, #0
 800fb12:	dc91      	bgt.n	800fa38 <_dtoa_r+0xaa8>
 800fb14:	d102      	bne.n	800fb1c <_dtoa_r+0xb8c>
 800fb16:	f01a 0f01 	tst.w	sl, #1
 800fb1a:	d18d      	bne.n	800fa38 <_dtoa_r+0xaa8>
 800fb1c:	462b      	mov	r3, r5
 800fb1e:	461d      	mov	r5, r3
 800fb20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb24:	2a30      	cmp	r2, #48	; 0x30
 800fb26:	d0fa      	beq.n	800fb1e <_dtoa_r+0xb8e>
 800fb28:	e6d7      	b.n	800f8da <_dtoa_r+0x94a>
 800fb2a:	9a01      	ldr	r2, [sp, #4]
 800fb2c:	429a      	cmp	r2, r3
 800fb2e:	d184      	bne.n	800fa3a <_dtoa_r+0xaaa>
 800fb30:	9b00      	ldr	r3, [sp, #0]
 800fb32:	3301      	adds	r3, #1
 800fb34:	9300      	str	r3, [sp, #0]
 800fb36:	2331      	movs	r3, #49	; 0x31
 800fb38:	7013      	strb	r3, [r2, #0]
 800fb3a:	e6ce      	b.n	800f8da <_dtoa_r+0x94a>
 800fb3c:	4b09      	ldr	r3, [pc, #36]	; (800fb64 <_dtoa_r+0xbd4>)
 800fb3e:	f7ff ba95 	b.w	800f06c <_dtoa_r+0xdc>
 800fb42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	f47f aa6e 	bne.w	800f026 <_dtoa_r+0x96>
 800fb4a:	4b07      	ldr	r3, [pc, #28]	; (800fb68 <_dtoa_r+0xbd8>)
 800fb4c:	f7ff ba8e 	b.w	800f06c <_dtoa_r+0xdc>
 800fb50:	9b02      	ldr	r3, [sp, #8]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	dcae      	bgt.n	800fab4 <_dtoa_r+0xb24>
 800fb56:	9b06      	ldr	r3, [sp, #24]
 800fb58:	2b02      	cmp	r3, #2
 800fb5a:	f73f aea8 	bgt.w	800f8ae <_dtoa_r+0x91e>
 800fb5e:	e7a9      	b.n	800fab4 <_dtoa_r+0xb24>
 800fb60:	08013080 	.word	0x08013080
 800fb64:	08012e88 	.word	0x08012e88
 800fb68:	08013001 	.word	0x08013001

0800fb6c <__sflush_r>:
 800fb6c:	898a      	ldrh	r2, [r1, #12]
 800fb6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb72:	4605      	mov	r5, r0
 800fb74:	0710      	lsls	r0, r2, #28
 800fb76:	460c      	mov	r4, r1
 800fb78:	d458      	bmi.n	800fc2c <__sflush_r+0xc0>
 800fb7a:	684b      	ldr	r3, [r1, #4]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	dc05      	bgt.n	800fb8c <__sflush_r+0x20>
 800fb80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	dc02      	bgt.n	800fb8c <__sflush_r+0x20>
 800fb86:	2000      	movs	r0, #0
 800fb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb8e:	2e00      	cmp	r6, #0
 800fb90:	d0f9      	beq.n	800fb86 <__sflush_r+0x1a>
 800fb92:	2300      	movs	r3, #0
 800fb94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fb98:	682f      	ldr	r7, [r5, #0]
 800fb9a:	602b      	str	r3, [r5, #0]
 800fb9c:	d032      	beq.n	800fc04 <__sflush_r+0x98>
 800fb9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fba0:	89a3      	ldrh	r3, [r4, #12]
 800fba2:	075a      	lsls	r2, r3, #29
 800fba4:	d505      	bpl.n	800fbb2 <__sflush_r+0x46>
 800fba6:	6863      	ldr	r3, [r4, #4]
 800fba8:	1ac0      	subs	r0, r0, r3
 800fbaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fbac:	b10b      	cbz	r3, 800fbb2 <__sflush_r+0x46>
 800fbae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fbb0:	1ac0      	subs	r0, r0, r3
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	4602      	mov	r2, r0
 800fbb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fbb8:	6a21      	ldr	r1, [r4, #32]
 800fbba:	4628      	mov	r0, r5
 800fbbc:	47b0      	blx	r6
 800fbbe:	1c43      	adds	r3, r0, #1
 800fbc0:	89a3      	ldrh	r3, [r4, #12]
 800fbc2:	d106      	bne.n	800fbd2 <__sflush_r+0x66>
 800fbc4:	6829      	ldr	r1, [r5, #0]
 800fbc6:	291d      	cmp	r1, #29
 800fbc8:	d82c      	bhi.n	800fc24 <__sflush_r+0xb8>
 800fbca:	4a2a      	ldr	r2, [pc, #168]	; (800fc74 <__sflush_r+0x108>)
 800fbcc:	40ca      	lsrs	r2, r1
 800fbce:	07d6      	lsls	r6, r2, #31
 800fbd0:	d528      	bpl.n	800fc24 <__sflush_r+0xb8>
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	6062      	str	r2, [r4, #4]
 800fbd6:	04d9      	lsls	r1, r3, #19
 800fbd8:	6922      	ldr	r2, [r4, #16]
 800fbda:	6022      	str	r2, [r4, #0]
 800fbdc:	d504      	bpl.n	800fbe8 <__sflush_r+0x7c>
 800fbde:	1c42      	adds	r2, r0, #1
 800fbe0:	d101      	bne.n	800fbe6 <__sflush_r+0x7a>
 800fbe2:	682b      	ldr	r3, [r5, #0]
 800fbe4:	b903      	cbnz	r3, 800fbe8 <__sflush_r+0x7c>
 800fbe6:	6560      	str	r0, [r4, #84]	; 0x54
 800fbe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fbea:	602f      	str	r7, [r5, #0]
 800fbec:	2900      	cmp	r1, #0
 800fbee:	d0ca      	beq.n	800fb86 <__sflush_r+0x1a>
 800fbf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fbf4:	4299      	cmp	r1, r3
 800fbf6:	d002      	beq.n	800fbfe <__sflush_r+0x92>
 800fbf8:	4628      	mov	r0, r5
 800fbfa:	f001 fa3b 	bl	8011074 <_free_r>
 800fbfe:	2000      	movs	r0, #0
 800fc00:	6360      	str	r0, [r4, #52]	; 0x34
 800fc02:	e7c1      	b.n	800fb88 <__sflush_r+0x1c>
 800fc04:	6a21      	ldr	r1, [r4, #32]
 800fc06:	2301      	movs	r3, #1
 800fc08:	4628      	mov	r0, r5
 800fc0a:	47b0      	blx	r6
 800fc0c:	1c41      	adds	r1, r0, #1
 800fc0e:	d1c7      	bne.n	800fba0 <__sflush_r+0x34>
 800fc10:	682b      	ldr	r3, [r5, #0]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d0c4      	beq.n	800fba0 <__sflush_r+0x34>
 800fc16:	2b1d      	cmp	r3, #29
 800fc18:	d001      	beq.n	800fc1e <__sflush_r+0xb2>
 800fc1a:	2b16      	cmp	r3, #22
 800fc1c:	d101      	bne.n	800fc22 <__sflush_r+0xb6>
 800fc1e:	602f      	str	r7, [r5, #0]
 800fc20:	e7b1      	b.n	800fb86 <__sflush_r+0x1a>
 800fc22:	89a3      	ldrh	r3, [r4, #12]
 800fc24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc28:	81a3      	strh	r3, [r4, #12]
 800fc2a:	e7ad      	b.n	800fb88 <__sflush_r+0x1c>
 800fc2c:	690f      	ldr	r7, [r1, #16]
 800fc2e:	2f00      	cmp	r7, #0
 800fc30:	d0a9      	beq.n	800fb86 <__sflush_r+0x1a>
 800fc32:	0793      	lsls	r3, r2, #30
 800fc34:	680e      	ldr	r6, [r1, #0]
 800fc36:	bf08      	it	eq
 800fc38:	694b      	ldreq	r3, [r1, #20]
 800fc3a:	600f      	str	r7, [r1, #0]
 800fc3c:	bf18      	it	ne
 800fc3e:	2300      	movne	r3, #0
 800fc40:	eba6 0807 	sub.w	r8, r6, r7
 800fc44:	608b      	str	r3, [r1, #8]
 800fc46:	f1b8 0f00 	cmp.w	r8, #0
 800fc4a:	dd9c      	ble.n	800fb86 <__sflush_r+0x1a>
 800fc4c:	6a21      	ldr	r1, [r4, #32]
 800fc4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fc50:	4643      	mov	r3, r8
 800fc52:	463a      	mov	r2, r7
 800fc54:	4628      	mov	r0, r5
 800fc56:	47b0      	blx	r6
 800fc58:	2800      	cmp	r0, #0
 800fc5a:	dc06      	bgt.n	800fc6a <__sflush_r+0xfe>
 800fc5c:	89a3      	ldrh	r3, [r4, #12]
 800fc5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc62:	81a3      	strh	r3, [r4, #12]
 800fc64:	f04f 30ff 	mov.w	r0, #4294967295
 800fc68:	e78e      	b.n	800fb88 <__sflush_r+0x1c>
 800fc6a:	4407      	add	r7, r0
 800fc6c:	eba8 0800 	sub.w	r8, r8, r0
 800fc70:	e7e9      	b.n	800fc46 <__sflush_r+0xda>
 800fc72:	bf00      	nop
 800fc74:	20400001 	.word	0x20400001

0800fc78 <_fflush_r>:
 800fc78:	b538      	push	{r3, r4, r5, lr}
 800fc7a:	690b      	ldr	r3, [r1, #16]
 800fc7c:	4605      	mov	r5, r0
 800fc7e:	460c      	mov	r4, r1
 800fc80:	b913      	cbnz	r3, 800fc88 <_fflush_r+0x10>
 800fc82:	2500      	movs	r5, #0
 800fc84:	4628      	mov	r0, r5
 800fc86:	bd38      	pop	{r3, r4, r5, pc}
 800fc88:	b118      	cbz	r0, 800fc92 <_fflush_r+0x1a>
 800fc8a:	6983      	ldr	r3, [r0, #24]
 800fc8c:	b90b      	cbnz	r3, 800fc92 <_fflush_r+0x1a>
 800fc8e:	f000 f887 	bl	800fda0 <__sinit>
 800fc92:	4b14      	ldr	r3, [pc, #80]	; (800fce4 <_fflush_r+0x6c>)
 800fc94:	429c      	cmp	r4, r3
 800fc96:	d11b      	bne.n	800fcd0 <_fflush_r+0x58>
 800fc98:	686c      	ldr	r4, [r5, #4]
 800fc9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d0ef      	beq.n	800fc82 <_fflush_r+0xa>
 800fca2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fca4:	07d0      	lsls	r0, r2, #31
 800fca6:	d404      	bmi.n	800fcb2 <_fflush_r+0x3a>
 800fca8:	0599      	lsls	r1, r3, #22
 800fcaa:	d402      	bmi.n	800fcb2 <_fflush_r+0x3a>
 800fcac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcae:	f000 fc88 	bl	80105c2 <__retarget_lock_acquire_recursive>
 800fcb2:	4628      	mov	r0, r5
 800fcb4:	4621      	mov	r1, r4
 800fcb6:	f7ff ff59 	bl	800fb6c <__sflush_r>
 800fcba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fcbc:	07da      	lsls	r2, r3, #31
 800fcbe:	4605      	mov	r5, r0
 800fcc0:	d4e0      	bmi.n	800fc84 <_fflush_r+0xc>
 800fcc2:	89a3      	ldrh	r3, [r4, #12]
 800fcc4:	059b      	lsls	r3, r3, #22
 800fcc6:	d4dd      	bmi.n	800fc84 <_fflush_r+0xc>
 800fcc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcca:	f000 fc7b 	bl	80105c4 <__retarget_lock_release_recursive>
 800fcce:	e7d9      	b.n	800fc84 <_fflush_r+0xc>
 800fcd0:	4b05      	ldr	r3, [pc, #20]	; (800fce8 <_fflush_r+0x70>)
 800fcd2:	429c      	cmp	r4, r3
 800fcd4:	d101      	bne.n	800fcda <_fflush_r+0x62>
 800fcd6:	68ac      	ldr	r4, [r5, #8]
 800fcd8:	e7df      	b.n	800fc9a <_fflush_r+0x22>
 800fcda:	4b04      	ldr	r3, [pc, #16]	; (800fcec <_fflush_r+0x74>)
 800fcdc:	429c      	cmp	r4, r3
 800fcde:	bf08      	it	eq
 800fce0:	68ec      	ldreq	r4, [r5, #12]
 800fce2:	e7da      	b.n	800fc9a <_fflush_r+0x22>
 800fce4:	080130b4 	.word	0x080130b4
 800fce8:	080130d4 	.word	0x080130d4
 800fcec:	08013094 	.word	0x08013094

0800fcf0 <std>:
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	b510      	push	{r4, lr}
 800fcf4:	4604      	mov	r4, r0
 800fcf6:	e9c0 3300 	strd	r3, r3, [r0]
 800fcfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fcfe:	6083      	str	r3, [r0, #8]
 800fd00:	8181      	strh	r1, [r0, #12]
 800fd02:	6643      	str	r3, [r0, #100]	; 0x64
 800fd04:	81c2      	strh	r2, [r0, #14]
 800fd06:	6183      	str	r3, [r0, #24]
 800fd08:	4619      	mov	r1, r3
 800fd0a:	2208      	movs	r2, #8
 800fd0c:	305c      	adds	r0, #92	; 0x5c
 800fd0e:	f7fd fc37 	bl	800d580 <memset>
 800fd12:	4b05      	ldr	r3, [pc, #20]	; (800fd28 <std+0x38>)
 800fd14:	6263      	str	r3, [r4, #36]	; 0x24
 800fd16:	4b05      	ldr	r3, [pc, #20]	; (800fd2c <std+0x3c>)
 800fd18:	62a3      	str	r3, [r4, #40]	; 0x28
 800fd1a:	4b05      	ldr	r3, [pc, #20]	; (800fd30 <std+0x40>)
 800fd1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fd1e:	4b05      	ldr	r3, [pc, #20]	; (800fd34 <std+0x44>)
 800fd20:	6224      	str	r4, [r4, #32]
 800fd22:	6323      	str	r3, [r4, #48]	; 0x30
 800fd24:	bd10      	pop	{r4, pc}
 800fd26:	bf00      	nop
 800fd28:	08011519 	.word	0x08011519
 800fd2c:	0801153b 	.word	0x0801153b
 800fd30:	08011573 	.word	0x08011573
 800fd34:	08011597 	.word	0x08011597

0800fd38 <_cleanup_r>:
 800fd38:	4901      	ldr	r1, [pc, #4]	; (800fd40 <_cleanup_r+0x8>)
 800fd3a:	f000 b8af 	b.w	800fe9c <_fwalk_reent>
 800fd3e:	bf00      	nop
 800fd40:	0800fc79 	.word	0x0800fc79

0800fd44 <__sfmoreglue>:
 800fd44:	b570      	push	{r4, r5, r6, lr}
 800fd46:	2268      	movs	r2, #104	; 0x68
 800fd48:	1e4d      	subs	r5, r1, #1
 800fd4a:	4355      	muls	r5, r2
 800fd4c:	460e      	mov	r6, r1
 800fd4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fd52:	f001 f9fb 	bl	801114c <_malloc_r>
 800fd56:	4604      	mov	r4, r0
 800fd58:	b140      	cbz	r0, 800fd6c <__sfmoreglue+0x28>
 800fd5a:	2100      	movs	r1, #0
 800fd5c:	e9c0 1600 	strd	r1, r6, [r0]
 800fd60:	300c      	adds	r0, #12
 800fd62:	60a0      	str	r0, [r4, #8]
 800fd64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fd68:	f7fd fc0a 	bl	800d580 <memset>
 800fd6c:	4620      	mov	r0, r4
 800fd6e:	bd70      	pop	{r4, r5, r6, pc}

0800fd70 <__sfp_lock_acquire>:
 800fd70:	4801      	ldr	r0, [pc, #4]	; (800fd78 <__sfp_lock_acquire+0x8>)
 800fd72:	f000 bc26 	b.w	80105c2 <__retarget_lock_acquire_recursive>
 800fd76:	bf00      	nop
 800fd78:	2000510d 	.word	0x2000510d

0800fd7c <__sfp_lock_release>:
 800fd7c:	4801      	ldr	r0, [pc, #4]	; (800fd84 <__sfp_lock_release+0x8>)
 800fd7e:	f000 bc21 	b.w	80105c4 <__retarget_lock_release_recursive>
 800fd82:	bf00      	nop
 800fd84:	2000510d 	.word	0x2000510d

0800fd88 <__sinit_lock_acquire>:
 800fd88:	4801      	ldr	r0, [pc, #4]	; (800fd90 <__sinit_lock_acquire+0x8>)
 800fd8a:	f000 bc1a 	b.w	80105c2 <__retarget_lock_acquire_recursive>
 800fd8e:	bf00      	nop
 800fd90:	2000510e 	.word	0x2000510e

0800fd94 <__sinit_lock_release>:
 800fd94:	4801      	ldr	r0, [pc, #4]	; (800fd9c <__sinit_lock_release+0x8>)
 800fd96:	f000 bc15 	b.w	80105c4 <__retarget_lock_release_recursive>
 800fd9a:	bf00      	nop
 800fd9c:	2000510e 	.word	0x2000510e

0800fda0 <__sinit>:
 800fda0:	b510      	push	{r4, lr}
 800fda2:	4604      	mov	r4, r0
 800fda4:	f7ff fff0 	bl	800fd88 <__sinit_lock_acquire>
 800fda8:	69a3      	ldr	r3, [r4, #24]
 800fdaa:	b11b      	cbz	r3, 800fdb4 <__sinit+0x14>
 800fdac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdb0:	f7ff bff0 	b.w	800fd94 <__sinit_lock_release>
 800fdb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fdb8:	6523      	str	r3, [r4, #80]	; 0x50
 800fdba:	4b13      	ldr	r3, [pc, #76]	; (800fe08 <__sinit+0x68>)
 800fdbc:	4a13      	ldr	r2, [pc, #76]	; (800fe0c <__sinit+0x6c>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	62a2      	str	r2, [r4, #40]	; 0x28
 800fdc2:	42a3      	cmp	r3, r4
 800fdc4:	bf04      	itt	eq
 800fdc6:	2301      	moveq	r3, #1
 800fdc8:	61a3      	streq	r3, [r4, #24]
 800fdca:	4620      	mov	r0, r4
 800fdcc:	f000 f820 	bl	800fe10 <__sfp>
 800fdd0:	6060      	str	r0, [r4, #4]
 800fdd2:	4620      	mov	r0, r4
 800fdd4:	f000 f81c 	bl	800fe10 <__sfp>
 800fdd8:	60a0      	str	r0, [r4, #8]
 800fdda:	4620      	mov	r0, r4
 800fddc:	f000 f818 	bl	800fe10 <__sfp>
 800fde0:	2200      	movs	r2, #0
 800fde2:	60e0      	str	r0, [r4, #12]
 800fde4:	2104      	movs	r1, #4
 800fde6:	6860      	ldr	r0, [r4, #4]
 800fde8:	f7ff ff82 	bl	800fcf0 <std>
 800fdec:	68a0      	ldr	r0, [r4, #8]
 800fdee:	2201      	movs	r2, #1
 800fdf0:	2109      	movs	r1, #9
 800fdf2:	f7ff ff7d 	bl	800fcf0 <std>
 800fdf6:	68e0      	ldr	r0, [r4, #12]
 800fdf8:	2202      	movs	r2, #2
 800fdfa:	2112      	movs	r1, #18
 800fdfc:	f7ff ff78 	bl	800fcf0 <std>
 800fe00:	2301      	movs	r3, #1
 800fe02:	61a3      	str	r3, [r4, #24]
 800fe04:	e7d2      	b.n	800fdac <__sinit+0xc>
 800fe06:	bf00      	nop
 800fe08:	08012e74 	.word	0x08012e74
 800fe0c:	0800fd39 	.word	0x0800fd39

0800fe10 <__sfp>:
 800fe10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe12:	4607      	mov	r7, r0
 800fe14:	f7ff ffac 	bl	800fd70 <__sfp_lock_acquire>
 800fe18:	4b1e      	ldr	r3, [pc, #120]	; (800fe94 <__sfp+0x84>)
 800fe1a:	681e      	ldr	r6, [r3, #0]
 800fe1c:	69b3      	ldr	r3, [r6, #24]
 800fe1e:	b913      	cbnz	r3, 800fe26 <__sfp+0x16>
 800fe20:	4630      	mov	r0, r6
 800fe22:	f7ff ffbd 	bl	800fda0 <__sinit>
 800fe26:	3648      	adds	r6, #72	; 0x48
 800fe28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fe2c:	3b01      	subs	r3, #1
 800fe2e:	d503      	bpl.n	800fe38 <__sfp+0x28>
 800fe30:	6833      	ldr	r3, [r6, #0]
 800fe32:	b30b      	cbz	r3, 800fe78 <__sfp+0x68>
 800fe34:	6836      	ldr	r6, [r6, #0]
 800fe36:	e7f7      	b.n	800fe28 <__sfp+0x18>
 800fe38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fe3c:	b9d5      	cbnz	r5, 800fe74 <__sfp+0x64>
 800fe3e:	4b16      	ldr	r3, [pc, #88]	; (800fe98 <__sfp+0x88>)
 800fe40:	60e3      	str	r3, [r4, #12]
 800fe42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fe46:	6665      	str	r5, [r4, #100]	; 0x64
 800fe48:	f000 fbba 	bl	80105c0 <__retarget_lock_init_recursive>
 800fe4c:	f7ff ff96 	bl	800fd7c <__sfp_lock_release>
 800fe50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fe54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fe58:	6025      	str	r5, [r4, #0]
 800fe5a:	61a5      	str	r5, [r4, #24]
 800fe5c:	2208      	movs	r2, #8
 800fe5e:	4629      	mov	r1, r5
 800fe60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fe64:	f7fd fb8c 	bl	800d580 <memset>
 800fe68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fe6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fe70:	4620      	mov	r0, r4
 800fe72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe74:	3468      	adds	r4, #104	; 0x68
 800fe76:	e7d9      	b.n	800fe2c <__sfp+0x1c>
 800fe78:	2104      	movs	r1, #4
 800fe7a:	4638      	mov	r0, r7
 800fe7c:	f7ff ff62 	bl	800fd44 <__sfmoreglue>
 800fe80:	4604      	mov	r4, r0
 800fe82:	6030      	str	r0, [r6, #0]
 800fe84:	2800      	cmp	r0, #0
 800fe86:	d1d5      	bne.n	800fe34 <__sfp+0x24>
 800fe88:	f7ff ff78 	bl	800fd7c <__sfp_lock_release>
 800fe8c:	230c      	movs	r3, #12
 800fe8e:	603b      	str	r3, [r7, #0]
 800fe90:	e7ee      	b.n	800fe70 <__sfp+0x60>
 800fe92:	bf00      	nop
 800fe94:	08012e74 	.word	0x08012e74
 800fe98:	ffff0001 	.word	0xffff0001

0800fe9c <_fwalk_reent>:
 800fe9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fea0:	4606      	mov	r6, r0
 800fea2:	4688      	mov	r8, r1
 800fea4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fea8:	2700      	movs	r7, #0
 800feaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800feae:	f1b9 0901 	subs.w	r9, r9, #1
 800feb2:	d505      	bpl.n	800fec0 <_fwalk_reent+0x24>
 800feb4:	6824      	ldr	r4, [r4, #0]
 800feb6:	2c00      	cmp	r4, #0
 800feb8:	d1f7      	bne.n	800feaa <_fwalk_reent+0xe>
 800feba:	4638      	mov	r0, r7
 800febc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fec0:	89ab      	ldrh	r3, [r5, #12]
 800fec2:	2b01      	cmp	r3, #1
 800fec4:	d907      	bls.n	800fed6 <_fwalk_reent+0x3a>
 800fec6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800feca:	3301      	adds	r3, #1
 800fecc:	d003      	beq.n	800fed6 <_fwalk_reent+0x3a>
 800fece:	4629      	mov	r1, r5
 800fed0:	4630      	mov	r0, r6
 800fed2:	47c0      	blx	r8
 800fed4:	4307      	orrs	r7, r0
 800fed6:	3568      	adds	r5, #104	; 0x68
 800fed8:	e7e9      	b.n	800feae <_fwalk_reent+0x12>

0800feda <rshift>:
 800feda:	6903      	ldr	r3, [r0, #16]
 800fedc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fee4:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fee8:	f100 0414 	add.w	r4, r0, #20
 800feec:	dd45      	ble.n	800ff7a <rshift+0xa0>
 800feee:	f011 011f 	ands.w	r1, r1, #31
 800fef2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fef6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fefa:	d10c      	bne.n	800ff16 <rshift+0x3c>
 800fefc:	f100 0710 	add.w	r7, r0, #16
 800ff00:	4629      	mov	r1, r5
 800ff02:	42b1      	cmp	r1, r6
 800ff04:	d334      	bcc.n	800ff70 <rshift+0x96>
 800ff06:	1a9b      	subs	r3, r3, r2
 800ff08:	009b      	lsls	r3, r3, #2
 800ff0a:	1eea      	subs	r2, r5, #3
 800ff0c:	4296      	cmp	r6, r2
 800ff0e:	bf38      	it	cc
 800ff10:	2300      	movcc	r3, #0
 800ff12:	4423      	add	r3, r4
 800ff14:	e015      	b.n	800ff42 <rshift+0x68>
 800ff16:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ff1a:	f1c1 0820 	rsb	r8, r1, #32
 800ff1e:	40cf      	lsrs	r7, r1
 800ff20:	f105 0e04 	add.w	lr, r5, #4
 800ff24:	46a1      	mov	r9, r4
 800ff26:	4576      	cmp	r6, lr
 800ff28:	46f4      	mov	ip, lr
 800ff2a:	d815      	bhi.n	800ff58 <rshift+0x7e>
 800ff2c:	1a9a      	subs	r2, r3, r2
 800ff2e:	0092      	lsls	r2, r2, #2
 800ff30:	3a04      	subs	r2, #4
 800ff32:	3501      	adds	r5, #1
 800ff34:	42ae      	cmp	r6, r5
 800ff36:	bf38      	it	cc
 800ff38:	2200      	movcc	r2, #0
 800ff3a:	18a3      	adds	r3, r4, r2
 800ff3c:	50a7      	str	r7, [r4, r2]
 800ff3e:	b107      	cbz	r7, 800ff42 <rshift+0x68>
 800ff40:	3304      	adds	r3, #4
 800ff42:	1b1a      	subs	r2, r3, r4
 800ff44:	42a3      	cmp	r3, r4
 800ff46:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ff4a:	bf08      	it	eq
 800ff4c:	2300      	moveq	r3, #0
 800ff4e:	6102      	str	r2, [r0, #16]
 800ff50:	bf08      	it	eq
 800ff52:	6143      	streq	r3, [r0, #20]
 800ff54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff58:	f8dc c000 	ldr.w	ip, [ip]
 800ff5c:	fa0c fc08 	lsl.w	ip, ip, r8
 800ff60:	ea4c 0707 	orr.w	r7, ip, r7
 800ff64:	f849 7b04 	str.w	r7, [r9], #4
 800ff68:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ff6c:	40cf      	lsrs	r7, r1
 800ff6e:	e7da      	b.n	800ff26 <rshift+0x4c>
 800ff70:	f851 cb04 	ldr.w	ip, [r1], #4
 800ff74:	f847 cf04 	str.w	ip, [r7, #4]!
 800ff78:	e7c3      	b.n	800ff02 <rshift+0x28>
 800ff7a:	4623      	mov	r3, r4
 800ff7c:	e7e1      	b.n	800ff42 <rshift+0x68>

0800ff7e <__hexdig_fun>:
 800ff7e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ff82:	2b09      	cmp	r3, #9
 800ff84:	d802      	bhi.n	800ff8c <__hexdig_fun+0xe>
 800ff86:	3820      	subs	r0, #32
 800ff88:	b2c0      	uxtb	r0, r0
 800ff8a:	4770      	bx	lr
 800ff8c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ff90:	2b05      	cmp	r3, #5
 800ff92:	d801      	bhi.n	800ff98 <__hexdig_fun+0x1a>
 800ff94:	3847      	subs	r0, #71	; 0x47
 800ff96:	e7f7      	b.n	800ff88 <__hexdig_fun+0xa>
 800ff98:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ff9c:	2b05      	cmp	r3, #5
 800ff9e:	d801      	bhi.n	800ffa4 <__hexdig_fun+0x26>
 800ffa0:	3827      	subs	r0, #39	; 0x27
 800ffa2:	e7f1      	b.n	800ff88 <__hexdig_fun+0xa>
 800ffa4:	2000      	movs	r0, #0
 800ffa6:	4770      	bx	lr

0800ffa8 <__gethex>:
 800ffa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffac:	ed2d 8b02 	vpush	{d8}
 800ffb0:	b089      	sub	sp, #36	; 0x24
 800ffb2:	ee08 0a10 	vmov	s16, r0
 800ffb6:	9304      	str	r3, [sp, #16]
 800ffb8:	4bb4      	ldr	r3, [pc, #720]	; (801028c <__gethex+0x2e4>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	9301      	str	r3, [sp, #4]
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	468b      	mov	fp, r1
 800ffc2:	4690      	mov	r8, r2
 800ffc4:	f7f0 f92c 	bl	8000220 <strlen>
 800ffc8:	9b01      	ldr	r3, [sp, #4]
 800ffca:	f8db 2000 	ldr.w	r2, [fp]
 800ffce:	4403      	add	r3, r0
 800ffd0:	4682      	mov	sl, r0
 800ffd2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ffd6:	9305      	str	r3, [sp, #20]
 800ffd8:	1c93      	adds	r3, r2, #2
 800ffda:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ffde:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ffe2:	32fe      	adds	r2, #254	; 0xfe
 800ffe4:	18d1      	adds	r1, r2, r3
 800ffe6:	461f      	mov	r7, r3
 800ffe8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ffec:	9100      	str	r1, [sp, #0]
 800ffee:	2830      	cmp	r0, #48	; 0x30
 800fff0:	d0f8      	beq.n	800ffe4 <__gethex+0x3c>
 800fff2:	f7ff ffc4 	bl	800ff7e <__hexdig_fun>
 800fff6:	4604      	mov	r4, r0
 800fff8:	2800      	cmp	r0, #0
 800fffa:	d13a      	bne.n	8010072 <__gethex+0xca>
 800fffc:	9901      	ldr	r1, [sp, #4]
 800fffe:	4652      	mov	r2, sl
 8010000:	4638      	mov	r0, r7
 8010002:	f001 facc 	bl	801159e <strncmp>
 8010006:	4605      	mov	r5, r0
 8010008:	2800      	cmp	r0, #0
 801000a:	d168      	bne.n	80100de <__gethex+0x136>
 801000c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010010:	eb07 060a 	add.w	r6, r7, sl
 8010014:	f7ff ffb3 	bl	800ff7e <__hexdig_fun>
 8010018:	2800      	cmp	r0, #0
 801001a:	d062      	beq.n	80100e2 <__gethex+0x13a>
 801001c:	4633      	mov	r3, r6
 801001e:	7818      	ldrb	r0, [r3, #0]
 8010020:	2830      	cmp	r0, #48	; 0x30
 8010022:	461f      	mov	r7, r3
 8010024:	f103 0301 	add.w	r3, r3, #1
 8010028:	d0f9      	beq.n	801001e <__gethex+0x76>
 801002a:	f7ff ffa8 	bl	800ff7e <__hexdig_fun>
 801002e:	2301      	movs	r3, #1
 8010030:	fab0 f480 	clz	r4, r0
 8010034:	0964      	lsrs	r4, r4, #5
 8010036:	4635      	mov	r5, r6
 8010038:	9300      	str	r3, [sp, #0]
 801003a:	463a      	mov	r2, r7
 801003c:	4616      	mov	r6, r2
 801003e:	3201      	adds	r2, #1
 8010040:	7830      	ldrb	r0, [r6, #0]
 8010042:	f7ff ff9c 	bl	800ff7e <__hexdig_fun>
 8010046:	2800      	cmp	r0, #0
 8010048:	d1f8      	bne.n	801003c <__gethex+0x94>
 801004a:	9901      	ldr	r1, [sp, #4]
 801004c:	4652      	mov	r2, sl
 801004e:	4630      	mov	r0, r6
 8010050:	f001 faa5 	bl	801159e <strncmp>
 8010054:	b980      	cbnz	r0, 8010078 <__gethex+0xd0>
 8010056:	b94d      	cbnz	r5, 801006c <__gethex+0xc4>
 8010058:	eb06 050a 	add.w	r5, r6, sl
 801005c:	462a      	mov	r2, r5
 801005e:	4616      	mov	r6, r2
 8010060:	3201      	adds	r2, #1
 8010062:	7830      	ldrb	r0, [r6, #0]
 8010064:	f7ff ff8b 	bl	800ff7e <__hexdig_fun>
 8010068:	2800      	cmp	r0, #0
 801006a:	d1f8      	bne.n	801005e <__gethex+0xb6>
 801006c:	1bad      	subs	r5, r5, r6
 801006e:	00ad      	lsls	r5, r5, #2
 8010070:	e004      	b.n	801007c <__gethex+0xd4>
 8010072:	2400      	movs	r4, #0
 8010074:	4625      	mov	r5, r4
 8010076:	e7e0      	b.n	801003a <__gethex+0x92>
 8010078:	2d00      	cmp	r5, #0
 801007a:	d1f7      	bne.n	801006c <__gethex+0xc4>
 801007c:	7833      	ldrb	r3, [r6, #0]
 801007e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010082:	2b50      	cmp	r3, #80	; 0x50
 8010084:	d13b      	bne.n	80100fe <__gethex+0x156>
 8010086:	7873      	ldrb	r3, [r6, #1]
 8010088:	2b2b      	cmp	r3, #43	; 0x2b
 801008a:	d02c      	beq.n	80100e6 <__gethex+0x13e>
 801008c:	2b2d      	cmp	r3, #45	; 0x2d
 801008e:	d02e      	beq.n	80100ee <__gethex+0x146>
 8010090:	1c71      	adds	r1, r6, #1
 8010092:	f04f 0900 	mov.w	r9, #0
 8010096:	7808      	ldrb	r0, [r1, #0]
 8010098:	f7ff ff71 	bl	800ff7e <__hexdig_fun>
 801009c:	1e43      	subs	r3, r0, #1
 801009e:	b2db      	uxtb	r3, r3
 80100a0:	2b18      	cmp	r3, #24
 80100a2:	d82c      	bhi.n	80100fe <__gethex+0x156>
 80100a4:	f1a0 0210 	sub.w	r2, r0, #16
 80100a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80100ac:	f7ff ff67 	bl	800ff7e <__hexdig_fun>
 80100b0:	1e43      	subs	r3, r0, #1
 80100b2:	b2db      	uxtb	r3, r3
 80100b4:	2b18      	cmp	r3, #24
 80100b6:	d91d      	bls.n	80100f4 <__gethex+0x14c>
 80100b8:	f1b9 0f00 	cmp.w	r9, #0
 80100bc:	d000      	beq.n	80100c0 <__gethex+0x118>
 80100be:	4252      	negs	r2, r2
 80100c0:	4415      	add	r5, r2
 80100c2:	f8cb 1000 	str.w	r1, [fp]
 80100c6:	b1e4      	cbz	r4, 8010102 <__gethex+0x15a>
 80100c8:	9b00      	ldr	r3, [sp, #0]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	bf14      	ite	ne
 80100ce:	2700      	movne	r7, #0
 80100d0:	2706      	moveq	r7, #6
 80100d2:	4638      	mov	r0, r7
 80100d4:	b009      	add	sp, #36	; 0x24
 80100d6:	ecbd 8b02 	vpop	{d8}
 80100da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100de:	463e      	mov	r6, r7
 80100e0:	4625      	mov	r5, r4
 80100e2:	2401      	movs	r4, #1
 80100e4:	e7ca      	b.n	801007c <__gethex+0xd4>
 80100e6:	f04f 0900 	mov.w	r9, #0
 80100ea:	1cb1      	adds	r1, r6, #2
 80100ec:	e7d3      	b.n	8010096 <__gethex+0xee>
 80100ee:	f04f 0901 	mov.w	r9, #1
 80100f2:	e7fa      	b.n	80100ea <__gethex+0x142>
 80100f4:	230a      	movs	r3, #10
 80100f6:	fb03 0202 	mla	r2, r3, r2, r0
 80100fa:	3a10      	subs	r2, #16
 80100fc:	e7d4      	b.n	80100a8 <__gethex+0x100>
 80100fe:	4631      	mov	r1, r6
 8010100:	e7df      	b.n	80100c2 <__gethex+0x11a>
 8010102:	1bf3      	subs	r3, r6, r7
 8010104:	3b01      	subs	r3, #1
 8010106:	4621      	mov	r1, r4
 8010108:	2b07      	cmp	r3, #7
 801010a:	dc0b      	bgt.n	8010124 <__gethex+0x17c>
 801010c:	ee18 0a10 	vmov	r0, s16
 8010110:	f000 fad8 	bl	80106c4 <_Balloc>
 8010114:	4604      	mov	r4, r0
 8010116:	b940      	cbnz	r0, 801012a <__gethex+0x182>
 8010118:	4b5d      	ldr	r3, [pc, #372]	; (8010290 <__gethex+0x2e8>)
 801011a:	4602      	mov	r2, r0
 801011c:	21de      	movs	r1, #222	; 0xde
 801011e:	485d      	ldr	r0, [pc, #372]	; (8010294 <__gethex+0x2ec>)
 8010120:	f001 fa70 	bl	8011604 <__assert_func>
 8010124:	3101      	adds	r1, #1
 8010126:	105b      	asrs	r3, r3, #1
 8010128:	e7ee      	b.n	8010108 <__gethex+0x160>
 801012a:	f100 0914 	add.w	r9, r0, #20
 801012e:	f04f 0b00 	mov.w	fp, #0
 8010132:	f1ca 0301 	rsb	r3, sl, #1
 8010136:	f8cd 9008 	str.w	r9, [sp, #8]
 801013a:	f8cd b000 	str.w	fp, [sp]
 801013e:	9306      	str	r3, [sp, #24]
 8010140:	42b7      	cmp	r7, r6
 8010142:	d340      	bcc.n	80101c6 <__gethex+0x21e>
 8010144:	9802      	ldr	r0, [sp, #8]
 8010146:	9b00      	ldr	r3, [sp, #0]
 8010148:	f840 3b04 	str.w	r3, [r0], #4
 801014c:	eba0 0009 	sub.w	r0, r0, r9
 8010150:	1080      	asrs	r0, r0, #2
 8010152:	0146      	lsls	r6, r0, #5
 8010154:	6120      	str	r0, [r4, #16]
 8010156:	4618      	mov	r0, r3
 8010158:	f000 fba6 	bl	80108a8 <__hi0bits>
 801015c:	1a30      	subs	r0, r6, r0
 801015e:	f8d8 6000 	ldr.w	r6, [r8]
 8010162:	42b0      	cmp	r0, r6
 8010164:	dd63      	ble.n	801022e <__gethex+0x286>
 8010166:	1b87      	subs	r7, r0, r6
 8010168:	4639      	mov	r1, r7
 801016a:	4620      	mov	r0, r4
 801016c:	f000 ff4a 	bl	8011004 <__any_on>
 8010170:	4682      	mov	sl, r0
 8010172:	b1a8      	cbz	r0, 80101a0 <__gethex+0x1f8>
 8010174:	1e7b      	subs	r3, r7, #1
 8010176:	1159      	asrs	r1, r3, #5
 8010178:	f003 021f 	and.w	r2, r3, #31
 801017c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010180:	f04f 0a01 	mov.w	sl, #1
 8010184:	fa0a f202 	lsl.w	r2, sl, r2
 8010188:	420a      	tst	r2, r1
 801018a:	d009      	beq.n	80101a0 <__gethex+0x1f8>
 801018c:	4553      	cmp	r3, sl
 801018e:	dd05      	ble.n	801019c <__gethex+0x1f4>
 8010190:	1eb9      	subs	r1, r7, #2
 8010192:	4620      	mov	r0, r4
 8010194:	f000 ff36 	bl	8011004 <__any_on>
 8010198:	2800      	cmp	r0, #0
 801019a:	d145      	bne.n	8010228 <__gethex+0x280>
 801019c:	f04f 0a02 	mov.w	sl, #2
 80101a0:	4639      	mov	r1, r7
 80101a2:	4620      	mov	r0, r4
 80101a4:	f7ff fe99 	bl	800feda <rshift>
 80101a8:	443d      	add	r5, r7
 80101aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80101ae:	42ab      	cmp	r3, r5
 80101b0:	da4c      	bge.n	801024c <__gethex+0x2a4>
 80101b2:	ee18 0a10 	vmov	r0, s16
 80101b6:	4621      	mov	r1, r4
 80101b8:	f000 fac4 	bl	8010744 <_Bfree>
 80101bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80101be:	2300      	movs	r3, #0
 80101c0:	6013      	str	r3, [r2, #0]
 80101c2:	27a3      	movs	r7, #163	; 0xa3
 80101c4:	e785      	b.n	80100d2 <__gethex+0x12a>
 80101c6:	1e73      	subs	r3, r6, #1
 80101c8:	9a05      	ldr	r2, [sp, #20]
 80101ca:	9303      	str	r3, [sp, #12]
 80101cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80101d0:	4293      	cmp	r3, r2
 80101d2:	d019      	beq.n	8010208 <__gethex+0x260>
 80101d4:	f1bb 0f20 	cmp.w	fp, #32
 80101d8:	d107      	bne.n	80101ea <__gethex+0x242>
 80101da:	9b02      	ldr	r3, [sp, #8]
 80101dc:	9a00      	ldr	r2, [sp, #0]
 80101de:	f843 2b04 	str.w	r2, [r3], #4
 80101e2:	9302      	str	r3, [sp, #8]
 80101e4:	2300      	movs	r3, #0
 80101e6:	9300      	str	r3, [sp, #0]
 80101e8:	469b      	mov	fp, r3
 80101ea:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80101ee:	f7ff fec6 	bl	800ff7e <__hexdig_fun>
 80101f2:	9b00      	ldr	r3, [sp, #0]
 80101f4:	f000 000f 	and.w	r0, r0, #15
 80101f8:	fa00 f00b 	lsl.w	r0, r0, fp
 80101fc:	4303      	orrs	r3, r0
 80101fe:	9300      	str	r3, [sp, #0]
 8010200:	f10b 0b04 	add.w	fp, fp, #4
 8010204:	9b03      	ldr	r3, [sp, #12]
 8010206:	e00d      	b.n	8010224 <__gethex+0x27c>
 8010208:	9b03      	ldr	r3, [sp, #12]
 801020a:	9a06      	ldr	r2, [sp, #24]
 801020c:	4413      	add	r3, r2
 801020e:	42bb      	cmp	r3, r7
 8010210:	d3e0      	bcc.n	80101d4 <__gethex+0x22c>
 8010212:	4618      	mov	r0, r3
 8010214:	9901      	ldr	r1, [sp, #4]
 8010216:	9307      	str	r3, [sp, #28]
 8010218:	4652      	mov	r2, sl
 801021a:	f001 f9c0 	bl	801159e <strncmp>
 801021e:	9b07      	ldr	r3, [sp, #28]
 8010220:	2800      	cmp	r0, #0
 8010222:	d1d7      	bne.n	80101d4 <__gethex+0x22c>
 8010224:	461e      	mov	r6, r3
 8010226:	e78b      	b.n	8010140 <__gethex+0x198>
 8010228:	f04f 0a03 	mov.w	sl, #3
 801022c:	e7b8      	b.n	80101a0 <__gethex+0x1f8>
 801022e:	da0a      	bge.n	8010246 <__gethex+0x29e>
 8010230:	1a37      	subs	r7, r6, r0
 8010232:	4621      	mov	r1, r4
 8010234:	ee18 0a10 	vmov	r0, s16
 8010238:	463a      	mov	r2, r7
 801023a:	f000 fc9f 	bl	8010b7c <__lshift>
 801023e:	1bed      	subs	r5, r5, r7
 8010240:	4604      	mov	r4, r0
 8010242:	f100 0914 	add.w	r9, r0, #20
 8010246:	f04f 0a00 	mov.w	sl, #0
 801024a:	e7ae      	b.n	80101aa <__gethex+0x202>
 801024c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010250:	42a8      	cmp	r0, r5
 8010252:	dd72      	ble.n	801033a <__gethex+0x392>
 8010254:	1b45      	subs	r5, r0, r5
 8010256:	42ae      	cmp	r6, r5
 8010258:	dc36      	bgt.n	80102c8 <__gethex+0x320>
 801025a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801025e:	2b02      	cmp	r3, #2
 8010260:	d02a      	beq.n	80102b8 <__gethex+0x310>
 8010262:	2b03      	cmp	r3, #3
 8010264:	d02c      	beq.n	80102c0 <__gethex+0x318>
 8010266:	2b01      	cmp	r3, #1
 8010268:	d11c      	bne.n	80102a4 <__gethex+0x2fc>
 801026a:	42ae      	cmp	r6, r5
 801026c:	d11a      	bne.n	80102a4 <__gethex+0x2fc>
 801026e:	2e01      	cmp	r6, #1
 8010270:	d112      	bne.n	8010298 <__gethex+0x2f0>
 8010272:	9a04      	ldr	r2, [sp, #16]
 8010274:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010278:	6013      	str	r3, [r2, #0]
 801027a:	2301      	movs	r3, #1
 801027c:	6123      	str	r3, [r4, #16]
 801027e:	f8c9 3000 	str.w	r3, [r9]
 8010282:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010284:	2762      	movs	r7, #98	; 0x62
 8010286:	601c      	str	r4, [r3, #0]
 8010288:	e723      	b.n	80100d2 <__gethex+0x12a>
 801028a:	bf00      	nop
 801028c:	0801315c 	.word	0x0801315c
 8010290:	08013080 	.word	0x08013080
 8010294:	080130f4 	.word	0x080130f4
 8010298:	1e71      	subs	r1, r6, #1
 801029a:	4620      	mov	r0, r4
 801029c:	f000 feb2 	bl	8011004 <__any_on>
 80102a0:	2800      	cmp	r0, #0
 80102a2:	d1e6      	bne.n	8010272 <__gethex+0x2ca>
 80102a4:	ee18 0a10 	vmov	r0, s16
 80102a8:	4621      	mov	r1, r4
 80102aa:	f000 fa4b 	bl	8010744 <_Bfree>
 80102ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80102b0:	2300      	movs	r3, #0
 80102b2:	6013      	str	r3, [r2, #0]
 80102b4:	2750      	movs	r7, #80	; 0x50
 80102b6:	e70c      	b.n	80100d2 <__gethex+0x12a>
 80102b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d1f2      	bne.n	80102a4 <__gethex+0x2fc>
 80102be:	e7d8      	b.n	8010272 <__gethex+0x2ca>
 80102c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d1d5      	bne.n	8010272 <__gethex+0x2ca>
 80102c6:	e7ed      	b.n	80102a4 <__gethex+0x2fc>
 80102c8:	1e6f      	subs	r7, r5, #1
 80102ca:	f1ba 0f00 	cmp.w	sl, #0
 80102ce:	d131      	bne.n	8010334 <__gethex+0x38c>
 80102d0:	b127      	cbz	r7, 80102dc <__gethex+0x334>
 80102d2:	4639      	mov	r1, r7
 80102d4:	4620      	mov	r0, r4
 80102d6:	f000 fe95 	bl	8011004 <__any_on>
 80102da:	4682      	mov	sl, r0
 80102dc:	117b      	asrs	r3, r7, #5
 80102de:	2101      	movs	r1, #1
 80102e0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80102e4:	f007 071f 	and.w	r7, r7, #31
 80102e8:	fa01 f707 	lsl.w	r7, r1, r7
 80102ec:	421f      	tst	r7, r3
 80102ee:	4629      	mov	r1, r5
 80102f0:	4620      	mov	r0, r4
 80102f2:	bf18      	it	ne
 80102f4:	f04a 0a02 	orrne.w	sl, sl, #2
 80102f8:	1b76      	subs	r6, r6, r5
 80102fa:	f7ff fdee 	bl	800feda <rshift>
 80102fe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010302:	2702      	movs	r7, #2
 8010304:	f1ba 0f00 	cmp.w	sl, #0
 8010308:	d048      	beq.n	801039c <__gethex+0x3f4>
 801030a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801030e:	2b02      	cmp	r3, #2
 8010310:	d015      	beq.n	801033e <__gethex+0x396>
 8010312:	2b03      	cmp	r3, #3
 8010314:	d017      	beq.n	8010346 <__gethex+0x39e>
 8010316:	2b01      	cmp	r3, #1
 8010318:	d109      	bne.n	801032e <__gethex+0x386>
 801031a:	f01a 0f02 	tst.w	sl, #2
 801031e:	d006      	beq.n	801032e <__gethex+0x386>
 8010320:	f8d9 0000 	ldr.w	r0, [r9]
 8010324:	ea4a 0a00 	orr.w	sl, sl, r0
 8010328:	f01a 0f01 	tst.w	sl, #1
 801032c:	d10e      	bne.n	801034c <__gethex+0x3a4>
 801032e:	f047 0710 	orr.w	r7, r7, #16
 8010332:	e033      	b.n	801039c <__gethex+0x3f4>
 8010334:	f04f 0a01 	mov.w	sl, #1
 8010338:	e7d0      	b.n	80102dc <__gethex+0x334>
 801033a:	2701      	movs	r7, #1
 801033c:	e7e2      	b.n	8010304 <__gethex+0x35c>
 801033e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010340:	f1c3 0301 	rsb	r3, r3, #1
 8010344:	9315      	str	r3, [sp, #84]	; 0x54
 8010346:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010348:	2b00      	cmp	r3, #0
 801034a:	d0f0      	beq.n	801032e <__gethex+0x386>
 801034c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010350:	f104 0314 	add.w	r3, r4, #20
 8010354:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010358:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801035c:	f04f 0c00 	mov.w	ip, #0
 8010360:	4618      	mov	r0, r3
 8010362:	f853 2b04 	ldr.w	r2, [r3], #4
 8010366:	f1b2 3fff 	cmp.w	r2, #4294967295
 801036a:	d01c      	beq.n	80103a6 <__gethex+0x3fe>
 801036c:	3201      	adds	r2, #1
 801036e:	6002      	str	r2, [r0, #0]
 8010370:	2f02      	cmp	r7, #2
 8010372:	f104 0314 	add.w	r3, r4, #20
 8010376:	d13f      	bne.n	80103f8 <__gethex+0x450>
 8010378:	f8d8 2000 	ldr.w	r2, [r8]
 801037c:	3a01      	subs	r2, #1
 801037e:	42b2      	cmp	r2, r6
 8010380:	d10a      	bne.n	8010398 <__gethex+0x3f0>
 8010382:	1171      	asrs	r1, r6, #5
 8010384:	2201      	movs	r2, #1
 8010386:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801038a:	f006 061f 	and.w	r6, r6, #31
 801038e:	fa02 f606 	lsl.w	r6, r2, r6
 8010392:	421e      	tst	r6, r3
 8010394:	bf18      	it	ne
 8010396:	4617      	movne	r7, r2
 8010398:	f047 0720 	orr.w	r7, r7, #32
 801039c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801039e:	601c      	str	r4, [r3, #0]
 80103a0:	9b04      	ldr	r3, [sp, #16]
 80103a2:	601d      	str	r5, [r3, #0]
 80103a4:	e695      	b.n	80100d2 <__gethex+0x12a>
 80103a6:	4299      	cmp	r1, r3
 80103a8:	f843 cc04 	str.w	ip, [r3, #-4]
 80103ac:	d8d8      	bhi.n	8010360 <__gethex+0x3b8>
 80103ae:	68a3      	ldr	r3, [r4, #8]
 80103b0:	459b      	cmp	fp, r3
 80103b2:	db19      	blt.n	80103e8 <__gethex+0x440>
 80103b4:	6861      	ldr	r1, [r4, #4]
 80103b6:	ee18 0a10 	vmov	r0, s16
 80103ba:	3101      	adds	r1, #1
 80103bc:	f000 f982 	bl	80106c4 <_Balloc>
 80103c0:	4681      	mov	r9, r0
 80103c2:	b918      	cbnz	r0, 80103cc <__gethex+0x424>
 80103c4:	4b1a      	ldr	r3, [pc, #104]	; (8010430 <__gethex+0x488>)
 80103c6:	4602      	mov	r2, r0
 80103c8:	2184      	movs	r1, #132	; 0x84
 80103ca:	e6a8      	b.n	801011e <__gethex+0x176>
 80103cc:	6922      	ldr	r2, [r4, #16]
 80103ce:	3202      	adds	r2, #2
 80103d0:	f104 010c 	add.w	r1, r4, #12
 80103d4:	0092      	lsls	r2, r2, #2
 80103d6:	300c      	adds	r0, #12
 80103d8:	f7fd f8c4 	bl	800d564 <memcpy>
 80103dc:	4621      	mov	r1, r4
 80103de:	ee18 0a10 	vmov	r0, s16
 80103e2:	f000 f9af 	bl	8010744 <_Bfree>
 80103e6:	464c      	mov	r4, r9
 80103e8:	6923      	ldr	r3, [r4, #16]
 80103ea:	1c5a      	adds	r2, r3, #1
 80103ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80103f0:	6122      	str	r2, [r4, #16]
 80103f2:	2201      	movs	r2, #1
 80103f4:	615a      	str	r2, [r3, #20]
 80103f6:	e7bb      	b.n	8010370 <__gethex+0x3c8>
 80103f8:	6922      	ldr	r2, [r4, #16]
 80103fa:	455a      	cmp	r2, fp
 80103fc:	dd0b      	ble.n	8010416 <__gethex+0x46e>
 80103fe:	2101      	movs	r1, #1
 8010400:	4620      	mov	r0, r4
 8010402:	f7ff fd6a 	bl	800feda <rshift>
 8010406:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801040a:	3501      	adds	r5, #1
 801040c:	42ab      	cmp	r3, r5
 801040e:	f6ff aed0 	blt.w	80101b2 <__gethex+0x20a>
 8010412:	2701      	movs	r7, #1
 8010414:	e7c0      	b.n	8010398 <__gethex+0x3f0>
 8010416:	f016 061f 	ands.w	r6, r6, #31
 801041a:	d0fa      	beq.n	8010412 <__gethex+0x46a>
 801041c:	4453      	add	r3, sl
 801041e:	f1c6 0620 	rsb	r6, r6, #32
 8010422:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010426:	f000 fa3f 	bl	80108a8 <__hi0bits>
 801042a:	42b0      	cmp	r0, r6
 801042c:	dbe7      	blt.n	80103fe <__gethex+0x456>
 801042e:	e7f0      	b.n	8010412 <__gethex+0x46a>
 8010430:	08013080 	.word	0x08013080

08010434 <L_shift>:
 8010434:	f1c2 0208 	rsb	r2, r2, #8
 8010438:	0092      	lsls	r2, r2, #2
 801043a:	b570      	push	{r4, r5, r6, lr}
 801043c:	f1c2 0620 	rsb	r6, r2, #32
 8010440:	6843      	ldr	r3, [r0, #4]
 8010442:	6804      	ldr	r4, [r0, #0]
 8010444:	fa03 f506 	lsl.w	r5, r3, r6
 8010448:	432c      	orrs	r4, r5
 801044a:	40d3      	lsrs	r3, r2
 801044c:	6004      	str	r4, [r0, #0]
 801044e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010452:	4288      	cmp	r0, r1
 8010454:	d3f4      	bcc.n	8010440 <L_shift+0xc>
 8010456:	bd70      	pop	{r4, r5, r6, pc}

08010458 <__match>:
 8010458:	b530      	push	{r4, r5, lr}
 801045a:	6803      	ldr	r3, [r0, #0]
 801045c:	3301      	adds	r3, #1
 801045e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010462:	b914      	cbnz	r4, 801046a <__match+0x12>
 8010464:	6003      	str	r3, [r0, #0]
 8010466:	2001      	movs	r0, #1
 8010468:	bd30      	pop	{r4, r5, pc}
 801046a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801046e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010472:	2d19      	cmp	r5, #25
 8010474:	bf98      	it	ls
 8010476:	3220      	addls	r2, #32
 8010478:	42a2      	cmp	r2, r4
 801047a:	d0f0      	beq.n	801045e <__match+0x6>
 801047c:	2000      	movs	r0, #0
 801047e:	e7f3      	b.n	8010468 <__match+0x10>

08010480 <__hexnan>:
 8010480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010484:	680b      	ldr	r3, [r1, #0]
 8010486:	115e      	asrs	r6, r3, #5
 8010488:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801048c:	f013 031f 	ands.w	r3, r3, #31
 8010490:	b087      	sub	sp, #28
 8010492:	bf18      	it	ne
 8010494:	3604      	addne	r6, #4
 8010496:	2500      	movs	r5, #0
 8010498:	1f37      	subs	r7, r6, #4
 801049a:	4690      	mov	r8, r2
 801049c:	6802      	ldr	r2, [r0, #0]
 801049e:	9301      	str	r3, [sp, #4]
 80104a0:	4682      	mov	sl, r0
 80104a2:	f846 5c04 	str.w	r5, [r6, #-4]
 80104a6:	46b9      	mov	r9, r7
 80104a8:	463c      	mov	r4, r7
 80104aa:	9502      	str	r5, [sp, #8]
 80104ac:	46ab      	mov	fp, r5
 80104ae:	7851      	ldrb	r1, [r2, #1]
 80104b0:	1c53      	adds	r3, r2, #1
 80104b2:	9303      	str	r3, [sp, #12]
 80104b4:	b341      	cbz	r1, 8010508 <__hexnan+0x88>
 80104b6:	4608      	mov	r0, r1
 80104b8:	9205      	str	r2, [sp, #20]
 80104ba:	9104      	str	r1, [sp, #16]
 80104bc:	f7ff fd5f 	bl	800ff7e <__hexdig_fun>
 80104c0:	2800      	cmp	r0, #0
 80104c2:	d14f      	bne.n	8010564 <__hexnan+0xe4>
 80104c4:	9904      	ldr	r1, [sp, #16]
 80104c6:	9a05      	ldr	r2, [sp, #20]
 80104c8:	2920      	cmp	r1, #32
 80104ca:	d818      	bhi.n	80104fe <__hexnan+0x7e>
 80104cc:	9b02      	ldr	r3, [sp, #8]
 80104ce:	459b      	cmp	fp, r3
 80104d0:	dd13      	ble.n	80104fa <__hexnan+0x7a>
 80104d2:	454c      	cmp	r4, r9
 80104d4:	d206      	bcs.n	80104e4 <__hexnan+0x64>
 80104d6:	2d07      	cmp	r5, #7
 80104d8:	dc04      	bgt.n	80104e4 <__hexnan+0x64>
 80104da:	462a      	mov	r2, r5
 80104dc:	4649      	mov	r1, r9
 80104de:	4620      	mov	r0, r4
 80104e0:	f7ff ffa8 	bl	8010434 <L_shift>
 80104e4:	4544      	cmp	r4, r8
 80104e6:	d950      	bls.n	801058a <__hexnan+0x10a>
 80104e8:	2300      	movs	r3, #0
 80104ea:	f1a4 0904 	sub.w	r9, r4, #4
 80104ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80104f2:	f8cd b008 	str.w	fp, [sp, #8]
 80104f6:	464c      	mov	r4, r9
 80104f8:	461d      	mov	r5, r3
 80104fa:	9a03      	ldr	r2, [sp, #12]
 80104fc:	e7d7      	b.n	80104ae <__hexnan+0x2e>
 80104fe:	2929      	cmp	r1, #41	; 0x29
 8010500:	d156      	bne.n	80105b0 <__hexnan+0x130>
 8010502:	3202      	adds	r2, #2
 8010504:	f8ca 2000 	str.w	r2, [sl]
 8010508:	f1bb 0f00 	cmp.w	fp, #0
 801050c:	d050      	beq.n	80105b0 <__hexnan+0x130>
 801050e:	454c      	cmp	r4, r9
 8010510:	d206      	bcs.n	8010520 <__hexnan+0xa0>
 8010512:	2d07      	cmp	r5, #7
 8010514:	dc04      	bgt.n	8010520 <__hexnan+0xa0>
 8010516:	462a      	mov	r2, r5
 8010518:	4649      	mov	r1, r9
 801051a:	4620      	mov	r0, r4
 801051c:	f7ff ff8a 	bl	8010434 <L_shift>
 8010520:	4544      	cmp	r4, r8
 8010522:	d934      	bls.n	801058e <__hexnan+0x10e>
 8010524:	f1a8 0204 	sub.w	r2, r8, #4
 8010528:	4623      	mov	r3, r4
 801052a:	f853 1b04 	ldr.w	r1, [r3], #4
 801052e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010532:	429f      	cmp	r7, r3
 8010534:	d2f9      	bcs.n	801052a <__hexnan+0xaa>
 8010536:	1b3b      	subs	r3, r7, r4
 8010538:	f023 0303 	bic.w	r3, r3, #3
 801053c:	3304      	adds	r3, #4
 801053e:	3401      	adds	r4, #1
 8010540:	3e03      	subs	r6, #3
 8010542:	42b4      	cmp	r4, r6
 8010544:	bf88      	it	hi
 8010546:	2304      	movhi	r3, #4
 8010548:	4443      	add	r3, r8
 801054a:	2200      	movs	r2, #0
 801054c:	f843 2b04 	str.w	r2, [r3], #4
 8010550:	429f      	cmp	r7, r3
 8010552:	d2fb      	bcs.n	801054c <__hexnan+0xcc>
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	b91b      	cbnz	r3, 8010560 <__hexnan+0xe0>
 8010558:	4547      	cmp	r7, r8
 801055a:	d127      	bne.n	80105ac <__hexnan+0x12c>
 801055c:	2301      	movs	r3, #1
 801055e:	603b      	str	r3, [r7, #0]
 8010560:	2005      	movs	r0, #5
 8010562:	e026      	b.n	80105b2 <__hexnan+0x132>
 8010564:	3501      	adds	r5, #1
 8010566:	2d08      	cmp	r5, #8
 8010568:	f10b 0b01 	add.w	fp, fp, #1
 801056c:	dd06      	ble.n	801057c <__hexnan+0xfc>
 801056e:	4544      	cmp	r4, r8
 8010570:	d9c3      	bls.n	80104fa <__hexnan+0x7a>
 8010572:	2300      	movs	r3, #0
 8010574:	f844 3c04 	str.w	r3, [r4, #-4]
 8010578:	2501      	movs	r5, #1
 801057a:	3c04      	subs	r4, #4
 801057c:	6822      	ldr	r2, [r4, #0]
 801057e:	f000 000f 	and.w	r0, r0, #15
 8010582:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010586:	6022      	str	r2, [r4, #0]
 8010588:	e7b7      	b.n	80104fa <__hexnan+0x7a>
 801058a:	2508      	movs	r5, #8
 801058c:	e7b5      	b.n	80104fa <__hexnan+0x7a>
 801058e:	9b01      	ldr	r3, [sp, #4]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d0df      	beq.n	8010554 <__hexnan+0xd4>
 8010594:	f04f 32ff 	mov.w	r2, #4294967295
 8010598:	f1c3 0320 	rsb	r3, r3, #32
 801059c:	fa22 f303 	lsr.w	r3, r2, r3
 80105a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80105a4:	401a      	ands	r2, r3
 80105a6:	f846 2c04 	str.w	r2, [r6, #-4]
 80105aa:	e7d3      	b.n	8010554 <__hexnan+0xd4>
 80105ac:	3f04      	subs	r7, #4
 80105ae:	e7d1      	b.n	8010554 <__hexnan+0xd4>
 80105b0:	2004      	movs	r0, #4
 80105b2:	b007      	add	sp, #28
 80105b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080105b8 <_localeconv_r>:
 80105b8:	4800      	ldr	r0, [pc, #0]	; (80105bc <_localeconv_r+0x4>)
 80105ba:	4770      	bx	lr
 80105bc:	20000184 	.word	0x20000184

080105c0 <__retarget_lock_init_recursive>:
 80105c0:	4770      	bx	lr

080105c2 <__retarget_lock_acquire_recursive>:
 80105c2:	4770      	bx	lr

080105c4 <__retarget_lock_release_recursive>:
 80105c4:	4770      	bx	lr

080105c6 <__swhatbuf_r>:
 80105c6:	b570      	push	{r4, r5, r6, lr}
 80105c8:	460e      	mov	r6, r1
 80105ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105ce:	2900      	cmp	r1, #0
 80105d0:	b096      	sub	sp, #88	; 0x58
 80105d2:	4614      	mov	r4, r2
 80105d4:	461d      	mov	r5, r3
 80105d6:	da08      	bge.n	80105ea <__swhatbuf_r+0x24>
 80105d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80105dc:	2200      	movs	r2, #0
 80105de:	602a      	str	r2, [r5, #0]
 80105e0:	061a      	lsls	r2, r3, #24
 80105e2:	d410      	bmi.n	8010606 <__swhatbuf_r+0x40>
 80105e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105e8:	e00e      	b.n	8010608 <__swhatbuf_r+0x42>
 80105ea:	466a      	mov	r2, sp
 80105ec:	f001 f84a 	bl	8011684 <_fstat_r>
 80105f0:	2800      	cmp	r0, #0
 80105f2:	dbf1      	blt.n	80105d8 <__swhatbuf_r+0x12>
 80105f4:	9a01      	ldr	r2, [sp, #4]
 80105f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80105fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80105fe:	425a      	negs	r2, r3
 8010600:	415a      	adcs	r2, r3
 8010602:	602a      	str	r2, [r5, #0]
 8010604:	e7ee      	b.n	80105e4 <__swhatbuf_r+0x1e>
 8010606:	2340      	movs	r3, #64	; 0x40
 8010608:	2000      	movs	r0, #0
 801060a:	6023      	str	r3, [r4, #0]
 801060c:	b016      	add	sp, #88	; 0x58
 801060e:	bd70      	pop	{r4, r5, r6, pc}

08010610 <__smakebuf_r>:
 8010610:	898b      	ldrh	r3, [r1, #12]
 8010612:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010614:	079d      	lsls	r5, r3, #30
 8010616:	4606      	mov	r6, r0
 8010618:	460c      	mov	r4, r1
 801061a:	d507      	bpl.n	801062c <__smakebuf_r+0x1c>
 801061c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010620:	6023      	str	r3, [r4, #0]
 8010622:	6123      	str	r3, [r4, #16]
 8010624:	2301      	movs	r3, #1
 8010626:	6163      	str	r3, [r4, #20]
 8010628:	b002      	add	sp, #8
 801062a:	bd70      	pop	{r4, r5, r6, pc}
 801062c:	ab01      	add	r3, sp, #4
 801062e:	466a      	mov	r2, sp
 8010630:	f7ff ffc9 	bl	80105c6 <__swhatbuf_r>
 8010634:	9900      	ldr	r1, [sp, #0]
 8010636:	4605      	mov	r5, r0
 8010638:	4630      	mov	r0, r6
 801063a:	f000 fd87 	bl	801114c <_malloc_r>
 801063e:	b948      	cbnz	r0, 8010654 <__smakebuf_r+0x44>
 8010640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010644:	059a      	lsls	r2, r3, #22
 8010646:	d4ef      	bmi.n	8010628 <__smakebuf_r+0x18>
 8010648:	f023 0303 	bic.w	r3, r3, #3
 801064c:	f043 0302 	orr.w	r3, r3, #2
 8010650:	81a3      	strh	r3, [r4, #12]
 8010652:	e7e3      	b.n	801061c <__smakebuf_r+0xc>
 8010654:	4b0d      	ldr	r3, [pc, #52]	; (801068c <__smakebuf_r+0x7c>)
 8010656:	62b3      	str	r3, [r6, #40]	; 0x28
 8010658:	89a3      	ldrh	r3, [r4, #12]
 801065a:	6020      	str	r0, [r4, #0]
 801065c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010660:	81a3      	strh	r3, [r4, #12]
 8010662:	9b00      	ldr	r3, [sp, #0]
 8010664:	6163      	str	r3, [r4, #20]
 8010666:	9b01      	ldr	r3, [sp, #4]
 8010668:	6120      	str	r0, [r4, #16]
 801066a:	b15b      	cbz	r3, 8010684 <__smakebuf_r+0x74>
 801066c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010670:	4630      	mov	r0, r6
 8010672:	f001 f819 	bl	80116a8 <_isatty_r>
 8010676:	b128      	cbz	r0, 8010684 <__smakebuf_r+0x74>
 8010678:	89a3      	ldrh	r3, [r4, #12]
 801067a:	f023 0303 	bic.w	r3, r3, #3
 801067e:	f043 0301 	orr.w	r3, r3, #1
 8010682:	81a3      	strh	r3, [r4, #12]
 8010684:	89a0      	ldrh	r0, [r4, #12]
 8010686:	4305      	orrs	r5, r0
 8010688:	81a5      	strh	r5, [r4, #12]
 801068a:	e7cd      	b.n	8010628 <__smakebuf_r+0x18>
 801068c:	0800fd39 	.word	0x0800fd39

08010690 <malloc>:
 8010690:	4b02      	ldr	r3, [pc, #8]	; (801069c <malloc+0xc>)
 8010692:	4601      	mov	r1, r0
 8010694:	6818      	ldr	r0, [r3, #0]
 8010696:	f000 bd59 	b.w	801114c <_malloc_r>
 801069a:	bf00      	nop
 801069c:	2000002c 	.word	0x2000002c

080106a0 <__ascii_mbtowc>:
 80106a0:	b082      	sub	sp, #8
 80106a2:	b901      	cbnz	r1, 80106a6 <__ascii_mbtowc+0x6>
 80106a4:	a901      	add	r1, sp, #4
 80106a6:	b142      	cbz	r2, 80106ba <__ascii_mbtowc+0x1a>
 80106a8:	b14b      	cbz	r3, 80106be <__ascii_mbtowc+0x1e>
 80106aa:	7813      	ldrb	r3, [r2, #0]
 80106ac:	600b      	str	r3, [r1, #0]
 80106ae:	7812      	ldrb	r2, [r2, #0]
 80106b0:	1e10      	subs	r0, r2, #0
 80106b2:	bf18      	it	ne
 80106b4:	2001      	movne	r0, #1
 80106b6:	b002      	add	sp, #8
 80106b8:	4770      	bx	lr
 80106ba:	4610      	mov	r0, r2
 80106bc:	e7fb      	b.n	80106b6 <__ascii_mbtowc+0x16>
 80106be:	f06f 0001 	mvn.w	r0, #1
 80106c2:	e7f8      	b.n	80106b6 <__ascii_mbtowc+0x16>

080106c4 <_Balloc>:
 80106c4:	b570      	push	{r4, r5, r6, lr}
 80106c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80106c8:	4604      	mov	r4, r0
 80106ca:	460d      	mov	r5, r1
 80106cc:	b976      	cbnz	r6, 80106ec <_Balloc+0x28>
 80106ce:	2010      	movs	r0, #16
 80106d0:	f7ff ffde 	bl	8010690 <malloc>
 80106d4:	4602      	mov	r2, r0
 80106d6:	6260      	str	r0, [r4, #36]	; 0x24
 80106d8:	b920      	cbnz	r0, 80106e4 <_Balloc+0x20>
 80106da:	4b18      	ldr	r3, [pc, #96]	; (801073c <_Balloc+0x78>)
 80106dc:	4818      	ldr	r0, [pc, #96]	; (8010740 <_Balloc+0x7c>)
 80106de:	2166      	movs	r1, #102	; 0x66
 80106e0:	f000 ff90 	bl	8011604 <__assert_func>
 80106e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80106e8:	6006      	str	r6, [r0, #0]
 80106ea:	60c6      	str	r6, [r0, #12]
 80106ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80106ee:	68f3      	ldr	r3, [r6, #12]
 80106f0:	b183      	cbz	r3, 8010714 <_Balloc+0x50>
 80106f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106f4:	68db      	ldr	r3, [r3, #12]
 80106f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80106fa:	b9b8      	cbnz	r0, 801072c <_Balloc+0x68>
 80106fc:	2101      	movs	r1, #1
 80106fe:	fa01 f605 	lsl.w	r6, r1, r5
 8010702:	1d72      	adds	r2, r6, #5
 8010704:	0092      	lsls	r2, r2, #2
 8010706:	4620      	mov	r0, r4
 8010708:	f000 fc9d 	bl	8011046 <_calloc_r>
 801070c:	b160      	cbz	r0, 8010728 <_Balloc+0x64>
 801070e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010712:	e00e      	b.n	8010732 <_Balloc+0x6e>
 8010714:	2221      	movs	r2, #33	; 0x21
 8010716:	2104      	movs	r1, #4
 8010718:	4620      	mov	r0, r4
 801071a:	f000 fc94 	bl	8011046 <_calloc_r>
 801071e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010720:	60f0      	str	r0, [r6, #12]
 8010722:	68db      	ldr	r3, [r3, #12]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d1e4      	bne.n	80106f2 <_Balloc+0x2e>
 8010728:	2000      	movs	r0, #0
 801072a:	bd70      	pop	{r4, r5, r6, pc}
 801072c:	6802      	ldr	r2, [r0, #0]
 801072e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010732:	2300      	movs	r3, #0
 8010734:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010738:	e7f7      	b.n	801072a <_Balloc+0x66>
 801073a:	bf00      	nop
 801073c:	0801300e 	.word	0x0801300e
 8010740:	08013170 	.word	0x08013170

08010744 <_Bfree>:
 8010744:	b570      	push	{r4, r5, r6, lr}
 8010746:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010748:	4605      	mov	r5, r0
 801074a:	460c      	mov	r4, r1
 801074c:	b976      	cbnz	r6, 801076c <_Bfree+0x28>
 801074e:	2010      	movs	r0, #16
 8010750:	f7ff ff9e 	bl	8010690 <malloc>
 8010754:	4602      	mov	r2, r0
 8010756:	6268      	str	r0, [r5, #36]	; 0x24
 8010758:	b920      	cbnz	r0, 8010764 <_Bfree+0x20>
 801075a:	4b09      	ldr	r3, [pc, #36]	; (8010780 <_Bfree+0x3c>)
 801075c:	4809      	ldr	r0, [pc, #36]	; (8010784 <_Bfree+0x40>)
 801075e:	218a      	movs	r1, #138	; 0x8a
 8010760:	f000 ff50 	bl	8011604 <__assert_func>
 8010764:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010768:	6006      	str	r6, [r0, #0]
 801076a:	60c6      	str	r6, [r0, #12]
 801076c:	b13c      	cbz	r4, 801077e <_Bfree+0x3a>
 801076e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010770:	6862      	ldr	r2, [r4, #4]
 8010772:	68db      	ldr	r3, [r3, #12]
 8010774:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010778:	6021      	str	r1, [r4, #0]
 801077a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801077e:	bd70      	pop	{r4, r5, r6, pc}
 8010780:	0801300e 	.word	0x0801300e
 8010784:	08013170 	.word	0x08013170

08010788 <__multadd>:
 8010788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801078c:	690d      	ldr	r5, [r1, #16]
 801078e:	4607      	mov	r7, r0
 8010790:	460c      	mov	r4, r1
 8010792:	461e      	mov	r6, r3
 8010794:	f101 0c14 	add.w	ip, r1, #20
 8010798:	2000      	movs	r0, #0
 801079a:	f8dc 3000 	ldr.w	r3, [ip]
 801079e:	b299      	uxth	r1, r3
 80107a0:	fb02 6101 	mla	r1, r2, r1, r6
 80107a4:	0c1e      	lsrs	r6, r3, #16
 80107a6:	0c0b      	lsrs	r3, r1, #16
 80107a8:	fb02 3306 	mla	r3, r2, r6, r3
 80107ac:	b289      	uxth	r1, r1
 80107ae:	3001      	adds	r0, #1
 80107b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80107b4:	4285      	cmp	r5, r0
 80107b6:	f84c 1b04 	str.w	r1, [ip], #4
 80107ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80107be:	dcec      	bgt.n	801079a <__multadd+0x12>
 80107c0:	b30e      	cbz	r6, 8010806 <__multadd+0x7e>
 80107c2:	68a3      	ldr	r3, [r4, #8]
 80107c4:	42ab      	cmp	r3, r5
 80107c6:	dc19      	bgt.n	80107fc <__multadd+0x74>
 80107c8:	6861      	ldr	r1, [r4, #4]
 80107ca:	4638      	mov	r0, r7
 80107cc:	3101      	adds	r1, #1
 80107ce:	f7ff ff79 	bl	80106c4 <_Balloc>
 80107d2:	4680      	mov	r8, r0
 80107d4:	b928      	cbnz	r0, 80107e2 <__multadd+0x5a>
 80107d6:	4602      	mov	r2, r0
 80107d8:	4b0c      	ldr	r3, [pc, #48]	; (801080c <__multadd+0x84>)
 80107da:	480d      	ldr	r0, [pc, #52]	; (8010810 <__multadd+0x88>)
 80107dc:	21b5      	movs	r1, #181	; 0xb5
 80107de:	f000 ff11 	bl	8011604 <__assert_func>
 80107e2:	6922      	ldr	r2, [r4, #16]
 80107e4:	3202      	adds	r2, #2
 80107e6:	f104 010c 	add.w	r1, r4, #12
 80107ea:	0092      	lsls	r2, r2, #2
 80107ec:	300c      	adds	r0, #12
 80107ee:	f7fc feb9 	bl	800d564 <memcpy>
 80107f2:	4621      	mov	r1, r4
 80107f4:	4638      	mov	r0, r7
 80107f6:	f7ff ffa5 	bl	8010744 <_Bfree>
 80107fa:	4644      	mov	r4, r8
 80107fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010800:	3501      	adds	r5, #1
 8010802:	615e      	str	r6, [r3, #20]
 8010804:	6125      	str	r5, [r4, #16]
 8010806:	4620      	mov	r0, r4
 8010808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801080c:	08013080 	.word	0x08013080
 8010810:	08013170 	.word	0x08013170

08010814 <__s2b>:
 8010814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010818:	460c      	mov	r4, r1
 801081a:	4615      	mov	r5, r2
 801081c:	461f      	mov	r7, r3
 801081e:	2209      	movs	r2, #9
 8010820:	3308      	adds	r3, #8
 8010822:	4606      	mov	r6, r0
 8010824:	fb93 f3f2 	sdiv	r3, r3, r2
 8010828:	2100      	movs	r1, #0
 801082a:	2201      	movs	r2, #1
 801082c:	429a      	cmp	r2, r3
 801082e:	db09      	blt.n	8010844 <__s2b+0x30>
 8010830:	4630      	mov	r0, r6
 8010832:	f7ff ff47 	bl	80106c4 <_Balloc>
 8010836:	b940      	cbnz	r0, 801084a <__s2b+0x36>
 8010838:	4602      	mov	r2, r0
 801083a:	4b19      	ldr	r3, [pc, #100]	; (80108a0 <__s2b+0x8c>)
 801083c:	4819      	ldr	r0, [pc, #100]	; (80108a4 <__s2b+0x90>)
 801083e:	21ce      	movs	r1, #206	; 0xce
 8010840:	f000 fee0 	bl	8011604 <__assert_func>
 8010844:	0052      	lsls	r2, r2, #1
 8010846:	3101      	adds	r1, #1
 8010848:	e7f0      	b.n	801082c <__s2b+0x18>
 801084a:	9b08      	ldr	r3, [sp, #32]
 801084c:	6143      	str	r3, [r0, #20]
 801084e:	2d09      	cmp	r5, #9
 8010850:	f04f 0301 	mov.w	r3, #1
 8010854:	6103      	str	r3, [r0, #16]
 8010856:	dd16      	ble.n	8010886 <__s2b+0x72>
 8010858:	f104 0909 	add.w	r9, r4, #9
 801085c:	46c8      	mov	r8, r9
 801085e:	442c      	add	r4, r5
 8010860:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010864:	4601      	mov	r1, r0
 8010866:	3b30      	subs	r3, #48	; 0x30
 8010868:	220a      	movs	r2, #10
 801086a:	4630      	mov	r0, r6
 801086c:	f7ff ff8c 	bl	8010788 <__multadd>
 8010870:	45a0      	cmp	r8, r4
 8010872:	d1f5      	bne.n	8010860 <__s2b+0x4c>
 8010874:	f1a5 0408 	sub.w	r4, r5, #8
 8010878:	444c      	add	r4, r9
 801087a:	1b2d      	subs	r5, r5, r4
 801087c:	1963      	adds	r3, r4, r5
 801087e:	42bb      	cmp	r3, r7
 8010880:	db04      	blt.n	801088c <__s2b+0x78>
 8010882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010886:	340a      	adds	r4, #10
 8010888:	2509      	movs	r5, #9
 801088a:	e7f6      	b.n	801087a <__s2b+0x66>
 801088c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010890:	4601      	mov	r1, r0
 8010892:	3b30      	subs	r3, #48	; 0x30
 8010894:	220a      	movs	r2, #10
 8010896:	4630      	mov	r0, r6
 8010898:	f7ff ff76 	bl	8010788 <__multadd>
 801089c:	e7ee      	b.n	801087c <__s2b+0x68>
 801089e:	bf00      	nop
 80108a0:	08013080 	.word	0x08013080
 80108a4:	08013170 	.word	0x08013170

080108a8 <__hi0bits>:
 80108a8:	0c03      	lsrs	r3, r0, #16
 80108aa:	041b      	lsls	r3, r3, #16
 80108ac:	b9d3      	cbnz	r3, 80108e4 <__hi0bits+0x3c>
 80108ae:	0400      	lsls	r0, r0, #16
 80108b0:	2310      	movs	r3, #16
 80108b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80108b6:	bf04      	itt	eq
 80108b8:	0200      	lsleq	r0, r0, #8
 80108ba:	3308      	addeq	r3, #8
 80108bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80108c0:	bf04      	itt	eq
 80108c2:	0100      	lsleq	r0, r0, #4
 80108c4:	3304      	addeq	r3, #4
 80108c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80108ca:	bf04      	itt	eq
 80108cc:	0080      	lsleq	r0, r0, #2
 80108ce:	3302      	addeq	r3, #2
 80108d0:	2800      	cmp	r0, #0
 80108d2:	db05      	blt.n	80108e0 <__hi0bits+0x38>
 80108d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80108d8:	f103 0301 	add.w	r3, r3, #1
 80108dc:	bf08      	it	eq
 80108de:	2320      	moveq	r3, #32
 80108e0:	4618      	mov	r0, r3
 80108e2:	4770      	bx	lr
 80108e4:	2300      	movs	r3, #0
 80108e6:	e7e4      	b.n	80108b2 <__hi0bits+0xa>

080108e8 <__lo0bits>:
 80108e8:	6803      	ldr	r3, [r0, #0]
 80108ea:	f013 0207 	ands.w	r2, r3, #7
 80108ee:	4601      	mov	r1, r0
 80108f0:	d00b      	beq.n	801090a <__lo0bits+0x22>
 80108f2:	07da      	lsls	r2, r3, #31
 80108f4:	d423      	bmi.n	801093e <__lo0bits+0x56>
 80108f6:	0798      	lsls	r0, r3, #30
 80108f8:	bf49      	itett	mi
 80108fa:	085b      	lsrmi	r3, r3, #1
 80108fc:	089b      	lsrpl	r3, r3, #2
 80108fe:	2001      	movmi	r0, #1
 8010900:	600b      	strmi	r3, [r1, #0]
 8010902:	bf5c      	itt	pl
 8010904:	600b      	strpl	r3, [r1, #0]
 8010906:	2002      	movpl	r0, #2
 8010908:	4770      	bx	lr
 801090a:	b298      	uxth	r0, r3
 801090c:	b9a8      	cbnz	r0, 801093a <__lo0bits+0x52>
 801090e:	0c1b      	lsrs	r3, r3, #16
 8010910:	2010      	movs	r0, #16
 8010912:	b2da      	uxtb	r2, r3
 8010914:	b90a      	cbnz	r2, 801091a <__lo0bits+0x32>
 8010916:	3008      	adds	r0, #8
 8010918:	0a1b      	lsrs	r3, r3, #8
 801091a:	071a      	lsls	r2, r3, #28
 801091c:	bf04      	itt	eq
 801091e:	091b      	lsreq	r3, r3, #4
 8010920:	3004      	addeq	r0, #4
 8010922:	079a      	lsls	r2, r3, #30
 8010924:	bf04      	itt	eq
 8010926:	089b      	lsreq	r3, r3, #2
 8010928:	3002      	addeq	r0, #2
 801092a:	07da      	lsls	r2, r3, #31
 801092c:	d403      	bmi.n	8010936 <__lo0bits+0x4e>
 801092e:	085b      	lsrs	r3, r3, #1
 8010930:	f100 0001 	add.w	r0, r0, #1
 8010934:	d005      	beq.n	8010942 <__lo0bits+0x5a>
 8010936:	600b      	str	r3, [r1, #0]
 8010938:	4770      	bx	lr
 801093a:	4610      	mov	r0, r2
 801093c:	e7e9      	b.n	8010912 <__lo0bits+0x2a>
 801093e:	2000      	movs	r0, #0
 8010940:	4770      	bx	lr
 8010942:	2020      	movs	r0, #32
 8010944:	4770      	bx	lr
	...

08010948 <__i2b>:
 8010948:	b510      	push	{r4, lr}
 801094a:	460c      	mov	r4, r1
 801094c:	2101      	movs	r1, #1
 801094e:	f7ff feb9 	bl	80106c4 <_Balloc>
 8010952:	4602      	mov	r2, r0
 8010954:	b928      	cbnz	r0, 8010962 <__i2b+0x1a>
 8010956:	4b05      	ldr	r3, [pc, #20]	; (801096c <__i2b+0x24>)
 8010958:	4805      	ldr	r0, [pc, #20]	; (8010970 <__i2b+0x28>)
 801095a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801095e:	f000 fe51 	bl	8011604 <__assert_func>
 8010962:	2301      	movs	r3, #1
 8010964:	6144      	str	r4, [r0, #20]
 8010966:	6103      	str	r3, [r0, #16]
 8010968:	bd10      	pop	{r4, pc}
 801096a:	bf00      	nop
 801096c:	08013080 	.word	0x08013080
 8010970:	08013170 	.word	0x08013170

08010974 <__multiply>:
 8010974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010978:	4691      	mov	r9, r2
 801097a:	690a      	ldr	r2, [r1, #16]
 801097c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010980:	429a      	cmp	r2, r3
 8010982:	bfb8      	it	lt
 8010984:	460b      	movlt	r3, r1
 8010986:	460c      	mov	r4, r1
 8010988:	bfbc      	itt	lt
 801098a:	464c      	movlt	r4, r9
 801098c:	4699      	movlt	r9, r3
 801098e:	6927      	ldr	r7, [r4, #16]
 8010990:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010994:	68a3      	ldr	r3, [r4, #8]
 8010996:	6861      	ldr	r1, [r4, #4]
 8010998:	eb07 060a 	add.w	r6, r7, sl
 801099c:	42b3      	cmp	r3, r6
 801099e:	b085      	sub	sp, #20
 80109a0:	bfb8      	it	lt
 80109a2:	3101      	addlt	r1, #1
 80109a4:	f7ff fe8e 	bl	80106c4 <_Balloc>
 80109a8:	b930      	cbnz	r0, 80109b8 <__multiply+0x44>
 80109aa:	4602      	mov	r2, r0
 80109ac:	4b44      	ldr	r3, [pc, #272]	; (8010ac0 <__multiply+0x14c>)
 80109ae:	4845      	ldr	r0, [pc, #276]	; (8010ac4 <__multiply+0x150>)
 80109b0:	f240 115d 	movw	r1, #349	; 0x15d
 80109b4:	f000 fe26 	bl	8011604 <__assert_func>
 80109b8:	f100 0514 	add.w	r5, r0, #20
 80109bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80109c0:	462b      	mov	r3, r5
 80109c2:	2200      	movs	r2, #0
 80109c4:	4543      	cmp	r3, r8
 80109c6:	d321      	bcc.n	8010a0c <__multiply+0x98>
 80109c8:	f104 0314 	add.w	r3, r4, #20
 80109cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80109d0:	f109 0314 	add.w	r3, r9, #20
 80109d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80109d8:	9202      	str	r2, [sp, #8]
 80109da:	1b3a      	subs	r2, r7, r4
 80109dc:	3a15      	subs	r2, #21
 80109de:	f022 0203 	bic.w	r2, r2, #3
 80109e2:	3204      	adds	r2, #4
 80109e4:	f104 0115 	add.w	r1, r4, #21
 80109e8:	428f      	cmp	r7, r1
 80109ea:	bf38      	it	cc
 80109ec:	2204      	movcc	r2, #4
 80109ee:	9201      	str	r2, [sp, #4]
 80109f0:	9a02      	ldr	r2, [sp, #8]
 80109f2:	9303      	str	r3, [sp, #12]
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d80c      	bhi.n	8010a12 <__multiply+0x9e>
 80109f8:	2e00      	cmp	r6, #0
 80109fa:	dd03      	ble.n	8010a04 <__multiply+0x90>
 80109fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d05a      	beq.n	8010aba <__multiply+0x146>
 8010a04:	6106      	str	r6, [r0, #16]
 8010a06:	b005      	add	sp, #20
 8010a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a0c:	f843 2b04 	str.w	r2, [r3], #4
 8010a10:	e7d8      	b.n	80109c4 <__multiply+0x50>
 8010a12:	f8b3 a000 	ldrh.w	sl, [r3]
 8010a16:	f1ba 0f00 	cmp.w	sl, #0
 8010a1a:	d024      	beq.n	8010a66 <__multiply+0xf2>
 8010a1c:	f104 0e14 	add.w	lr, r4, #20
 8010a20:	46a9      	mov	r9, r5
 8010a22:	f04f 0c00 	mov.w	ip, #0
 8010a26:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010a2a:	f8d9 1000 	ldr.w	r1, [r9]
 8010a2e:	fa1f fb82 	uxth.w	fp, r2
 8010a32:	b289      	uxth	r1, r1
 8010a34:	fb0a 110b 	mla	r1, sl, fp, r1
 8010a38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010a3c:	f8d9 2000 	ldr.w	r2, [r9]
 8010a40:	4461      	add	r1, ip
 8010a42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010a46:	fb0a c20b 	mla	r2, sl, fp, ip
 8010a4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010a4e:	b289      	uxth	r1, r1
 8010a50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010a54:	4577      	cmp	r7, lr
 8010a56:	f849 1b04 	str.w	r1, [r9], #4
 8010a5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010a5e:	d8e2      	bhi.n	8010a26 <__multiply+0xb2>
 8010a60:	9a01      	ldr	r2, [sp, #4]
 8010a62:	f845 c002 	str.w	ip, [r5, r2]
 8010a66:	9a03      	ldr	r2, [sp, #12]
 8010a68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010a6c:	3304      	adds	r3, #4
 8010a6e:	f1b9 0f00 	cmp.w	r9, #0
 8010a72:	d020      	beq.n	8010ab6 <__multiply+0x142>
 8010a74:	6829      	ldr	r1, [r5, #0]
 8010a76:	f104 0c14 	add.w	ip, r4, #20
 8010a7a:	46ae      	mov	lr, r5
 8010a7c:	f04f 0a00 	mov.w	sl, #0
 8010a80:	f8bc b000 	ldrh.w	fp, [ip]
 8010a84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010a88:	fb09 220b 	mla	r2, r9, fp, r2
 8010a8c:	4492      	add	sl, r2
 8010a8e:	b289      	uxth	r1, r1
 8010a90:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010a94:	f84e 1b04 	str.w	r1, [lr], #4
 8010a98:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010a9c:	f8be 1000 	ldrh.w	r1, [lr]
 8010aa0:	0c12      	lsrs	r2, r2, #16
 8010aa2:	fb09 1102 	mla	r1, r9, r2, r1
 8010aa6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010aaa:	4567      	cmp	r7, ip
 8010aac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010ab0:	d8e6      	bhi.n	8010a80 <__multiply+0x10c>
 8010ab2:	9a01      	ldr	r2, [sp, #4]
 8010ab4:	50a9      	str	r1, [r5, r2]
 8010ab6:	3504      	adds	r5, #4
 8010ab8:	e79a      	b.n	80109f0 <__multiply+0x7c>
 8010aba:	3e01      	subs	r6, #1
 8010abc:	e79c      	b.n	80109f8 <__multiply+0x84>
 8010abe:	bf00      	nop
 8010ac0:	08013080 	.word	0x08013080
 8010ac4:	08013170 	.word	0x08013170

08010ac8 <__pow5mult>:
 8010ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010acc:	4615      	mov	r5, r2
 8010ace:	f012 0203 	ands.w	r2, r2, #3
 8010ad2:	4606      	mov	r6, r0
 8010ad4:	460f      	mov	r7, r1
 8010ad6:	d007      	beq.n	8010ae8 <__pow5mult+0x20>
 8010ad8:	4c25      	ldr	r4, [pc, #148]	; (8010b70 <__pow5mult+0xa8>)
 8010ada:	3a01      	subs	r2, #1
 8010adc:	2300      	movs	r3, #0
 8010ade:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010ae2:	f7ff fe51 	bl	8010788 <__multadd>
 8010ae6:	4607      	mov	r7, r0
 8010ae8:	10ad      	asrs	r5, r5, #2
 8010aea:	d03d      	beq.n	8010b68 <__pow5mult+0xa0>
 8010aec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010aee:	b97c      	cbnz	r4, 8010b10 <__pow5mult+0x48>
 8010af0:	2010      	movs	r0, #16
 8010af2:	f7ff fdcd 	bl	8010690 <malloc>
 8010af6:	4602      	mov	r2, r0
 8010af8:	6270      	str	r0, [r6, #36]	; 0x24
 8010afa:	b928      	cbnz	r0, 8010b08 <__pow5mult+0x40>
 8010afc:	4b1d      	ldr	r3, [pc, #116]	; (8010b74 <__pow5mult+0xac>)
 8010afe:	481e      	ldr	r0, [pc, #120]	; (8010b78 <__pow5mult+0xb0>)
 8010b00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010b04:	f000 fd7e 	bl	8011604 <__assert_func>
 8010b08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010b0c:	6004      	str	r4, [r0, #0]
 8010b0e:	60c4      	str	r4, [r0, #12]
 8010b10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010b14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010b18:	b94c      	cbnz	r4, 8010b2e <__pow5mult+0x66>
 8010b1a:	f240 2171 	movw	r1, #625	; 0x271
 8010b1e:	4630      	mov	r0, r6
 8010b20:	f7ff ff12 	bl	8010948 <__i2b>
 8010b24:	2300      	movs	r3, #0
 8010b26:	f8c8 0008 	str.w	r0, [r8, #8]
 8010b2a:	4604      	mov	r4, r0
 8010b2c:	6003      	str	r3, [r0, #0]
 8010b2e:	f04f 0900 	mov.w	r9, #0
 8010b32:	07eb      	lsls	r3, r5, #31
 8010b34:	d50a      	bpl.n	8010b4c <__pow5mult+0x84>
 8010b36:	4639      	mov	r1, r7
 8010b38:	4622      	mov	r2, r4
 8010b3a:	4630      	mov	r0, r6
 8010b3c:	f7ff ff1a 	bl	8010974 <__multiply>
 8010b40:	4639      	mov	r1, r7
 8010b42:	4680      	mov	r8, r0
 8010b44:	4630      	mov	r0, r6
 8010b46:	f7ff fdfd 	bl	8010744 <_Bfree>
 8010b4a:	4647      	mov	r7, r8
 8010b4c:	106d      	asrs	r5, r5, #1
 8010b4e:	d00b      	beq.n	8010b68 <__pow5mult+0xa0>
 8010b50:	6820      	ldr	r0, [r4, #0]
 8010b52:	b938      	cbnz	r0, 8010b64 <__pow5mult+0x9c>
 8010b54:	4622      	mov	r2, r4
 8010b56:	4621      	mov	r1, r4
 8010b58:	4630      	mov	r0, r6
 8010b5a:	f7ff ff0b 	bl	8010974 <__multiply>
 8010b5e:	6020      	str	r0, [r4, #0]
 8010b60:	f8c0 9000 	str.w	r9, [r0]
 8010b64:	4604      	mov	r4, r0
 8010b66:	e7e4      	b.n	8010b32 <__pow5mult+0x6a>
 8010b68:	4638      	mov	r0, r7
 8010b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b6e:	bf00      	nop
 8010b70:	080132c0 	.word	0x080132c0
 8010b74:	0801300e 	.word	0x0801300e
 8010b78:	08013170 	.word	0x08013170

08010b7c <__lshift>:
 8010b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b80:	460c      	mov	r4, r1
 8010b82:	6849      	ldr	r1, [r1, #4]
 8010b84:	6923      	ldr	r3, [r4, #16]
 8010b86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010b8a:	68a3      	ldr	r3, [r4, #8]
 8010b8c:	4607      	mov	r7, r0
 8010b8e:	4691      	mov	r9, r2
 8010b90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010b94:	f108 0601 	add.w	r6, r8, #1
 8010b98:	42b3      	cmp	r3, r6
 8010b9a:	db0b      	blt.n	8010bb4 <__lshift+0x38>
 8010b9c:	4638      	mov	r0, r7
 8010b9e:	f7ff fd91 	bl	80106c4 <_Balloc>
 8010ba2:	4605      	mov	r5, r0
 8010ba4:	b948      	cbnz	r0, 8010bba <__lshift+0x3e>
 8010ba6:	4602      	mov	r2, r0
 8010ba8:	4b2a      	ldr	r3, [pc, #168]	; (8010c54 <__lshift+0xd8>)
 8010baa:	482b      	ldr	r0, [pc, #172]	; (8010c58 <__lshift+0xdc>)
 8010bac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010bb0:	f000 fd28 	bl	8011604 <__assert_func>
 8010bb4:	3101      	adds	r1, #1
 8010bb6:	005b      	lsls	r3, r3, #1
 8010bb8:	e7ee      	b.n	8010b98 <__lshift+0x1c>
 8010bba:	2300      	movs	r3, #0
 8010bbc:	f100 0114 	add.w	r1, r0, #20
 8010bc0:	f100 0210 	add.w	r2, r0, #16
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	4553      	cmp	r3, sl
 8010bc8:	db37      	blt.n	8010c3a <__lshift+0xbe>
 8010bca:	6920      	ldr	r0, [r4, #16]
 8010bcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010bd0:	f104 0314 	add.w	r3, r4, #20
 8010bd4:	f019 091f 	ands.w	r9, r9, #31
 8010bd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010bdc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010be0:	d02f      	beq.n	8010c42 <__lshift+0xc6>
 8010be2:	f1c9 0e20 	rsb	lr, r9, #32
 8010be6:	468a      	mov	sl, r1
 8010be8:	f04f 0c00 	mov.w	ip, #0
 8010bec:	681a      	ldr	r2, [r3, #0]
 8010bee:	fa02 f209 	lsl.w	r2, r2, r9
 8010bf2:	ea42 020c 	orr.w	r2, r2, ip
 8010bf6:	f84a 2b04 	str.w	r2, [sl], #4
 8010bfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bfe:	4298      	cmp	r0, r3
 8010c00:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010c04:	d8f2      	bhi.n	8010bec <__lshift+0x70>
 8010c06:	1b03      	subs	r3, r0, r4
 8010c08:	3b15      	subs	r3, #21
 8010c0a:	f023 0303 	bic.w	r3, r3, #3
 8010c0e:	3304      	adds	r3, #4
 8010c10:	f104 0215 	add.w	r2, r4, #21
 8010c14:	4290      	cmp	r0, r2
 8010c16:	bf38      	it	cc
 8010c18:	2304      	movcc	r3, #4
 8010c1a:	f841 c003 	str.w	ip, [r1, r3]
 8010c1e:	f1bc 0f00 	cmp.w	ip, #0
 8010c22:	d001      	beq.n	8010c28 <__lshift+0xac>
 8010c24:	f108 0602 	add.w	r6, r8, #2
 8010c28:	3e01      	subs	r6, #1
 8010c2a:	4638      	mov	r0, r7
 8010c2c:	612e      	str	r6, [r5, #16]
 8010c2e:	4621      	mov	r1, r4
 8010c30:	f7ff fd88 	bl	8010744 <_Bfree>
 8010c34:	4628      	mov	r0, r5
 8010c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8010c3e:	3301      	adds	r3, #1
 8010c40:	e7c1      	b.n	8010bc6 <__lshift+0x4a>
 8010c42:	3904      	subs	r1, #4
 8010c44:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c48:	f841 2f04 	str.w	r2, [r1, #4]!
 8010c4c:	4298      	cmp	r0, r3
 8010c4e:	d8f9      	bhi.n	8010c44 <__lshift+0xc8>
 8010c50:	e7ea      	b.n	8010c28 <__lshift+0xac>
 8010c52:	bf00      	nop
 8010c54:	08013080 	.word	0x08013080
 8010c58:	08013170 	.word	0x08013170

08010c5c <__mcmp>:
 8010c5c:	b530      	push	{r4, r5, lr}
 8010c5e:	6902      	ldr	r2, [r0, #16]
 8010c60:	690c      	ldr	r4, [r1, #16]
 8010c62:	1b12      	subs	r2, r2, r4
 8010c64:	d10e      	bne.n	8010c84 <__mcmp+0x28>
 8010c66:	f100 0314 	add.w	r3, r0, #20
 8010c6a:	3114      	adds	r1, #20
 8010c6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010c70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010c74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010c78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010c7c:	42a5      	cmp	r5, r4
 8010c7e:	d003      	beq.n	8010c88 <__mcmp+0x2c>
 8010c80:	d305      	bcc.n	8010c8e <__mcmp+0x32>
 8010c82:	2201      	movs	r2, #1
 8010c84:	4610      	mov	r0, r2
 8010c86:	bd30      	pop	{r4, r5, pc}
 8010c88:	4283      	cmp	r3, r0
 8010c8a:	d3f3      	bcc.n	8010c74 <__mcmp+0x18>
 8010c8c:	e7fa      	b.n	8010c84 <__mcmp+0x28>
 8010c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8010c92:	e7f7      	b.n	8010c84 <__mcmp+0x28>

08010c94 <__mdiff>:
 8010c94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c98:	460c      	mov	r4, r1
 8010c9a:	4606      	mov	r6, r0
 8010c9c:	4611      	mov	r1, r2
 8010c9e:	4620      	mov	r0, r4
 8010ca0:	4690      	mov	r8, r2
 8010ca2:	f7ff ffdb 	bl	8010c5c <__mcmp>
 8010ca6:	1e05      	subs	r5, r0, #0
 8010ca8:	d110      	bne.n	8010ccc <__mdiff+0x38>
 8010caa:	4629      	mov	r1, r5
 8010cac:	4630      	mov	r0, r6
 8010cae:	f7ff fd09 	bl	80106c4 <_Balloc>
 8010cb2:	b930      	cbnz	r0, 8010cc2 <__mdiff+0x2e>
 8010cb4:	4b3a      	ldr	r3, [pc, #232]	; (8010da0 <__mdiff+0x10c>)
 8010cb6:	4602      	mov	r2, r0
 8010cb8:	f240 2132 	movw	r1, #562	; 0x232
 8010cbc:	4839      	ldr	r0, [pc, #228]	; (8010da4 <__mdiff+0x110>)
 8010cbe:	f000 fca1 	bl	8011604 <__assert_func>
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010cc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ccc:	bfa4      	itt	ge
 8010cce:	4643      	movge	r3, r8
 8010cd0:	46a0      	movge	r8, r4
 8010cd2:	4630      	mov	r0, r6
 8010cd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010cd8:	bfa6      	itte	ge
 8010cda:	461c      	movge	r4, r3
 8010cdc:	2500      	movge	r5, #0
 8010cde:	2501      	movlt	r5, #1
 8010ce0:	f7ff fcf0 	bl	80106c4 <_Balloc>
 8010ce4:	b920      	cbnz	r0, 8010cf0 <__mdiff+0x5c>
 8010ce6:	4b2e      	ldr	r3, [pc, #184]	; (8010da0 <__mdiff+0x10c>)
 8010ce8:	4602      	mov	r2, r0
 8010cea:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010cee:	e7e5      	b.n	8010cbc <__mdiff+0x28>
 8010cf0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010cf4:	6926      	ldr	r6, [r4, #16]
 8010cf6:	60c5      	str	r5, [r0, #12]
 8010cf8:	f104 0914 	add.w	r9, r4, #20
 8010cfc:	f108 0514 	add.w	r5, r8, #20
 8010d00:	f100 0e14 	add.w	lr, r0, #20
 8010d04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010d08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010d0c:	f108 0210 	add.w	r2, r8, #16
 8010d10:	46f2      	mov	sl, lr
 8010d12:	2100      	movs	r1, #0
 8010d14:	f859 3b04 	ldr.w	r3, [r9], #4
 8010d18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010d1c:	fa1f f883 	uxth.w	r8, r3
 8010d20:	fa11 f18b 	uxtah	r1, r1, fp
 8010d24:	0c1b      	lsrs	r3, r3, #16
 8010d26:	eba1 0808 	sub.w	r8, r1, r8
 8010d2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010d2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010d32:	fa1f f888 	uxth.w	r8, r8
 8010d36:	1419      	asrs	r1, r3, #16
 8010d38:	454e      	cmp	r6, r9
 8010d3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010d3e:	f84a 3b04 	str.w	r3, [sl], #4
 8010d42:	d8e7      	bhi.n	8010d14 <__mdiff+0x80>
 8010d44:	1b33      	subs	r3, r6, r4
 8010d46:	3b15      	subs	r3, #21
 8010d48:	f023 0303 	bic.w	r3, r3, #3
 8010d4c:	3304      	adds	r3, #4
 8010d4e:	3415      	adds	r4, #21
 8010d50:	42a6      	cmp	r6, r4
 8010d52:	bf38      	it	cc
 8010d54:	2304      	movcc	r3, #4
 8010d56:	441d      	add	r5, r3
 8010d58:	4473      	add	r3, lr
 8010d5a:	469e      	mov	lr, r3
 8010d5c:	462e      	mov	r6, r5
 8010d5e:	4566      	cmp	r6, ip
 8010d60:	d30e      	bcc.n	8010d80 <__mdiff+0xec>
 8010d62:	f10c 0203 	add.w	r2, ip, #3
 8010d66:	1b52      	subs	r2, r2, r5
 8010d68:	f022 0203 	bic.w	r2, r2, #3
 8010d6c:	3d03      	subs	r5, #3
 8010d6e:	45ac      	cmp	ip, r5
 8010d70:	bf38      	it	cc
 8010d72:	2200      	movcc	r2, #0
 8010d74:	441a      	add	r2, r3
 8010d76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010d7a:	b17b      	cbz	r3, 8010d9c <__mdiff+0x108>
 8010d7c:	6107      	str	r7, [r0, #16]
 8010d7e:	e7a3      	b.n	8010cc8 <__mdiff+0x34>
 8010d80:	f856 8b04 	ldr.w	r8, [r6], #4
 8010d84:	fa11 f288 	uxtah	r2, r1, r8
 8010d88:	1414      	asrs	r4, r2, #16
 8010d8a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010d8e:	b292      	uxth	r2, r2
 8010d90:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010d94:	f84e 2b04 	str.w	r2, [lr], #4
 8010d98:	1421      	asrs	r1, r4, #16
 8010d9a:	e7e0      	b.n	8010d5e <__mdiff+0xca>
 8010d9c:	3f01      	subs	r7, #1
 8010d9e:	e7ea      	b.n	8010d76 <__mdiff+0xe2>
 8010da0:	08013080 	.word	0x08013080
 8010da4:	08013170 	.word	0x08013170

08010da8 <__ulp>:
 8010da8:	b082      	sub	sp, #8
 8010daa:	ed8d 0b00 	vstr	d0, [sp]
 8010dae:	9b01      	ldr	r3, [sp, #4]
 8010db0:	4912      	ldr	r1, [pc, #72]	; (8010dfc <__ulp+0x54>)
 8010db2:	4019      	ands	r1, r3
 8010db4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010db8:	2900      	cmp	r1, #0
 8010dba:	dd05      	ble.n	8010dc8 <__ulp+0x20>
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	460b      	mov	r3, r1
 8010dc0:	ec43 2b10 	vmov	d0, r2, r3
 8010dc4:	b002      	add	sp, #8
 8010dc6:	4770      	bx	lr
 8010dc8:	4249      	negs	r1, r1
 8010dca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010dce:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010dd2:	f04f 0200 	mov.w	r2, #0
 8010dd6:	f04f 0300 	mov.w	r3, #0
 8010dda:	da04      	bge.n	8010de6 <__ulp+0x3e>
 8010ddc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010de0:	fa41 f300 	asr.w	r3, r1, r0
 8010de4:	e7ec      	b.n	8010dc0 <__ulp+0x18>
 8010de6:	f1a0 0114 	sub.w	r1, r0, #20
 8010dea:	291e      	cmp	r1, #30
 8010dec:	bfda      	itte	le
 8010dee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010df2:	fa20 f101 	lsrle.w	r1, r0, r1
 8010df6:	2101      	movgt	r1, #1
 8010df8:	460a      	mov	r2, r1
 8010dfa:	e7e1      	b.n	8010dc0 <__ulp+0x18>
 8010dfc:	7ff00000 	.word	0x7ff00000

08010e00 <__b2d>:
 8010e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e02:	6905      	ldr	r5, [r0, #16]
 8010e04:	f100 0714 	add.w	r7, r0, #20
 8010e08:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010e0c:	1f2e      	subs	r6, r5, #4
 8010e0e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010e12:	4620      	mov	r0, r4
 8010e14:	f7ff fd48 	bl	80108a8 <__hi0bits>
 8010e18:	f1c0 0320 	rsb	r3, r0, #32
 8010e1c:	280a      	cmp	r0, #10
 8010e1e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010e9c <__b2d+0x9c>
 8010e22:	600b      	str	r3, [r1, #0]
 8010e24:	dc14      	bgt.n	8010e50 <__b2d+0x50>
 8010e26:	f1c0 0e0b 	rsb	lr, r0, #11
 8010e2a:	fa24 f10e 	lsr.w	r1, r4, lr
 8010e2e:	42b7      	cmp	r7, r6
 8010e30:	ea41 030c 	orr.w	r3, r1, ip
 8010e34:	bf34      	ite	cc
 8010e36:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010e3a:	2100      	movcs	r1, #0
 8010e3c:	3015      	adds	r0, #21
 8010e3e:	fa04 f000 	lsl.w	r0, r4, r0
 8010e42:	fa21 f10e 	lsr.w	r1, r1, lr
 8010e46:	ea40 0201 	orr.w	r2, r0, r1
 8010e4a:	ec43 2b10 	vmov	d0, r2, r3
 8010e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e50:	42b7      	cmp	r7, r6
 8010e52:	bf3a      	itte	cc
 8010e54:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010e58:	f1a5 0608 	subcc.w	r6, r5, #8
 8010e5c:	2100      	movcs	r1, #0
 8010e5e:	380b      	subs	r0, #11
 8010e60:	d017      	beq.n	8010e92 <__b2d+0x92>
 8010e62:	f1c0 0c20 	rsb	ip, r0, #32
 8010e66:	fa04 f500 	lsl.w	r5, r4, r0
 8010e6a:	42be      	cmp	r6, r7
 8010e6c:	fa21 f40c 	lsr.w	r4, r1, ip
 8010e70:	ea45 0504 	orr.w	r5, r5, r4
 8010e74:	bf8c      	ite	hi
 8010e76:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010e7a:	2400      	movls	r4, #0
 8010e7c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010e80:	fa01 f000 	lsl.w	r0, r1, r0
 8010e84:	fa24 f40c 	lsr.w	r4, r4, ip
 8010e88:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010e8c:	ea40 0204 	orr.w	r2, r0, r4
 8010e90:	e7db      	b.n	8010e4a <__b2d+0x4a>
 8010e92:	ea44 030c 	orr.w	r3, r4, ip
 8010e96:	460a      	mov	r2, r1
 8010e98:	e7d7      	b.n	8010e4a <__b2d+0x4a>
 8010e9a:	bf00      	nop
 8010e9c:	3ff00000 	.word	0x3ff00000

08010ea0 <__d2b>:
 8010ea0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ea4:	4689      	mov	r9, r1
 8010ea6:	2101      	movs	r1, #1
 8010ea8:	ec57 6b10 	vmov	r6, r7, d0
 8010eac:	4690      	mov	r8, r2
 8010eae:	f7ff fc09 	bl	80106c4 <_Balloc>
 8010eb2:	4604      	mov	r4, r0
 8010eb4:	b930      	cbnz	r0, 8010ec4 <__d2b+0x24>
 8010eb6:	4602      	mov	r2, r0
 8010eb8:	4b25      	ldr	r3, [pc, #148]	; (8010f50 <__d2b+0xb0>)
 8010eba:	4826      	ldr	r0, [pc, #152]	; (8010f54 <__d2b+0xb4>)
 8010ebc:	f240 310a 	movw	r1, #778	; 0x30a
 8010ec0:	f000 fba0 	bl	8011604 <__assert_func>
 8010ec4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010ec8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010ecc:	bb35      	cbnz	r5, 8010f1c <__d2b+0x7c>
 8010ece:	2e00      	cmp	r6, #0
 8010ed0:	9301      	str	r3, [sp, #4]
 8010ed2:	d028      	beq.n	8010f26 <__d2b+0x86>
 8010ed4:	4668      	mov	r0, sp
 8010ed6:	9600      	str	r6, [sp, #0]
 8010ed8:	f7ff fd06 	bl	80108e8 <__lo0bits>
 8010edc:	9900      	ldr	r1, [sp, #0]
 8010ede:	b300      	cbz	r0, 8010f22 <__d2b+0x82>
 8010ee0:	9a01      	ldr	r2, [sp, #4]
 8010ee2:	f1c0 0320 	rsb	r3, r0, #32
 8010ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8010eea:	430b      	orrs	r3, r1
 8010eec:	40c2      	lsrs	r2, r0
 8010eee:	6163      	str	r3, [r4, #20]
 8010ef0:	9201      	str	r2, [sp, #4]
 8010ef2:	9b01      	ldr	r3, [sp, #4]
 8010ef4:	61a3      	str	r3, [r4, #24]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	bf14      	ite	ne
 8010efa:	2202      	movne	r2, #2
 8010efc:	2201      	moveq	r2, #1
 8010efe:	6122      	str	r2, [r4, #16]
 8010f00:	b1d5      	cbz	r5, 8010f38 <__d2b+0x98>
 8010f02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010f06:	4405      	add	r5, r0
 8010f08:	f8c9 5000 	str.w	r5, [r9]
 8010f0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010f10:	f8c8 0000 	str.w	r0, [r8]
 8010f14:	4620      	mov	r0, r4
 8010f16:	b003      	add	sp, #12
 8010f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010f20:	e7d5      	b.n	8010ece <__d2b+0x2e>
 8010f22:	6161      	str	r1, [r4, #20]
 8010f24:	e7e5      	b.n	8010ef2 <__d2b+0x52>
 8010f26:	a801      	add	r0, sp, #4
 8010f28:	f7ff fcde 	bl	80108e8 <__lo0bits>
 8010f2c:	9b01      	ldr	r3, [sp, #4]
 8010f2e:	6163      	str	r3, [r4, #20]
 8010f30:	2201      	movs	r2, #1
 8010f32:	6122      	str	r2, [r4, #16]
 8010f34:	3020      	adds	r0, #32
 8010f36:	e7e3      	b.n	8010f00 <__d2b+0x60>
 8010f38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010f3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010f40:	f8c9 0000 	str.w	r0, [r9]
 8010f44:	6918      	ldr	r0, [r3, #16]
 8010f46:	f7ff fcaf 	bl	80108a8 <__hi0bits>
 8010f4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010f4e:	e7df      	b.n	8010f10 <__d2b+0x70>
 8010f50:	08013080 	.word	0x08013080
 8010f54:	08013170 	.word	0x08013170

08010f58 <__ratio>:
 8010f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f5c:	4688      	mov	r8, r1
 8010f5e:	4669      	mov	r1, sp
 8010f60:	4681      	mov	r9, r0
 8010f62:	f7ff ff4d 	bl	8010e00 <__b2d>
 8010f66:	a901      	add	r1, sp, #4
 8010f68:	4640      	mov	r0, r8
 8010f6a:	ec55 4b10 	vmov	r4, r5, d0
 8010f6e:	f7ff ff47 	bl	8010e00 <__b2d>
 8010f72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010f76:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010f7a:	eba3 0c02 	sub.w	ip, r3, r2
 8010f7e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010f82:	1a9b      	subs	r3, r3, r2
 8010f84:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010f88:	ec51 0b10 	vmov	r0, r1, d0
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	bfd6      	itet	le
 8010f90:	460a      	movle	r2, r1
 8010f92:	462a      	movgt	r2, r5
 8010f94:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010f98:	468b      	mov	fp, r1
 8010f9a:	462f      	mov	r7, r5
 8010f9c:	bfd4      	ite	le
 8010f9e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010fa2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010fa6:	4620      	mov	r0, r4
 8010fa8:	ee10 2a10 	vmov	r2, s0
 8010fac:	465b      	mov	r3, fp
 8010fae:	4639      	mov	r1, r7
 8010fb0:	f7ef fc74 	bl	800089c <__aeabi_ddiv>
 8010fb4:	ec41 0b10 	vmov	d0, r0, r1
 8010fb8:	b003      	add	sp, #12
 8010fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010fbe <__copybits>:
 8010fbe:	3901      	subs	r1, #1
 8010fc0:	b570      	push	{r4, r5, r6, lr}
 8010fc2:	1149      	asrs	r1, r1, #5
 8010fc4:	6914      	ldr	r4, [r2, #16]
 8010fc6:	3101      	adds	r1, #1
 8010fc8:	f102 0314 	add.w	r3, r2, #20
 8010fcc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010fd0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010fd4:	1f05      	subs	r5, r0, #4
 8010fd6:	42a3      	cmp	r3, r4
 8010fd8:	d30c      	bcc.n	8010ff4 <__copybits+0x36>
 8010fda:	1aa3      	subs	r3, r4, r2
 8010fdc:	3b11      	subs	r3, #17
 8010fde:	f023 0303 	bic.w	r3, r3, #3
 8010fe2:	3211      	adds	r2, #17
 8010fe4:	42a2      	cmp	r2, r4
 8010fe6:	bf88      	it	hi
 8010fe8:	2300      	movhi	r3, #0
 8010fea:	4418      	add	r0, r3
 8010fec:	2300      	movs	r3, #0
 8010fee:	4288      	cmp	r0, r1
 8010ff0:	d305      	bcc.n	8010ffe <__copybits+0x40>
 8010ff2:	bd70      	pop	{r4, r5, r6, pc}
 8010ff4:	f853 6b04 	ldr.w	r6, [r3], #4
 8010ff8:	f845 6f04 	str.w	r6, [r5, #4]!
 8010ffc:	e7eb      	b.n	8010fd6 <__copybits+0x18>
 8010ffe:	f840 3b04 	str.w	r3, [r0], #4
 8011002:	e7f4      	b.n	8010fee <__copybits+0x30>

08011004 <__any_on>:
 8011004:	f100 0214 	add.w	r2, r0, #20
 8011008:	6900      	ldr	r0, [r0, #16]
 801100a:	114b      	asrs	r3, r1, #5
 801100c:	4298      	cmp	r0, r3
 801100e:	b510      	push	{r4, lr}
 8011010:	db11      	blt.n	8011036 <__any_on+0x32>
 8011012:	dd0a      	ble.n	801102a <__any_on+0x26>
 8011014:	f011 011f 	ands.w	r1, r1, #31
 8011018:	d007      	beq.n	801102a <__any_on+0x26>
 801101a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801101e:	fa24 f001 	lsr.w	r0, r4, r1
 8011022:	fa00 f101 	lsl.w	r1, r0, r1
 8011026:	428c      	cmp	r4, r1
 8011028:	d10b      	bne.n	8011042 <__any_on+0x3e>
 801102a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801102e:	4293      	cmp	r3, r2
 8011030:	d803      	bhi.n	801103a <__any_on+0x36>
 8011032:	2000      	movs	r0, #0
 8011034:	bd10      	pop	{r4, pc}
 8011036:	4603      	mov	r3, r0
 8011038:	e7f7      	b.n	801102a <__any_on+0x26>
 801103a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801103e:	2900      	cmp	r1, #0
 8011040:	d0f5      	beq.n	801102e <__any_on+0x2a>
 8011042:	2001      	movs	r0, #1
 8011044:	e7f6      	b.n	8011034 <__any_on+0x30>

08011046 <_calloc_r>:
 8011046:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011048:	fba1 2402 	umull	r2, r4, r1, r2
 801104c:	b94c      	cbnz	r4, 8011062 <_calloc_r+0x1c>
 801104e:	4611      	mov	r1, r2
 8011050:	9201      	str	r2, [sp, #4]
 8011052:	f000 f87b 	bl	801114c <_malloc_r>
 8011056:	9a01      	ldr	r2, [sp, #4]
 8011058:	4605      	mov	r5, r0
 801105a:	b930      	cbnz	r0, 801106a <_calloc_r+0x24>
 801105c:	4628      	mov	r0, r5
 801105e:	b003      	add	sp, #12
 8011060:	bd30      	pop	{r4, r5, pc}
 8011062:	220c      	movs	r2, #12
 8011064:	6002      	str	r2, [r0, #0]
 8011066:	2500      	movs	r5, #0
 8011068:	e7f8      	b.n	801105c <_calloc_r+0x16>
 801106a:	4621      	mov	r1, r4
 801106c:	f7fc fa88 	bl	800d580 <memset>
 8011070:	e7f4      	b.n	801105c <_calloc_r+0x16>
	...

08011074 <_free_r>:
 8011074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011076:	2900      	cmp	r1, #0
 8011078:	d044      	beq.n	8011104 <_free_r+0x90>
 801107a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801107e:	9001      	str	r0, [sp, #4]
 8011080:	2b00      	cmp	r3, #0
 8011082:	f1a1 0404 	sub.w	r4, r1, #4
 8011086:	bfb8      	it	lt
 8011088:	18e4      	addlt	r4, r4, r3
 801108a:	f000 fb2f 	bl	80116ec <__malloc_lock>
 801108e:	4a1e      	ldr	r2, [pc, #120]	; (8011108 <_free_r+0x94>)
 8011090:	9801      	ldr	r0, [sp, #4]
 8011092:	6813      	ldr	r3, [r2, #0]
 8011094:	b933      	cbnz	r3, 80110a4 <_free_r+0x30>
 8011096:	6063      	str	r3, [r4, #4]
 8011098:	6014      	str	r4, [r2, #0]
 801109a:	b003      	add	sp, #12
 801109c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80110a0:	f000 bb2a 	b.w	80116f8 <__malloc_unlock>
 80110a4:	42a3      	cmp	r3, r4
 80110a6:	d908      	bls.n	80110ba <_free_r+0x46>
 80110a8:	6825      	ldr	r5, [r4, #0]
 80110aa:	1961      	adds	r1, r4, r5
 80110ac:	428b      	cmp	r3, r1
 80110ae:	bf01      	itttt	eq
 80110b0:	6819      	ldreq	r1, [r3, #0]
 80110b2:	685b      	ldreq	r3, [r3, #4]
 80110b4:	1949      	addeq	r1, r1, r5
 80110b6:	6021      	streq	r1, [r4, #0]
 80110b8:	e7ed      	b.n	8011096 <_free_r+0x22>
 80110ba:	461a      	mov	r2, r3
 80110bc:	685b      	ldr	r3, [r3, #4]
 80110be:	b10b      	cbz	r3, 80110c4 <_free_r+0x50>
 80110c0:	42a3      	cmp	r3, r4
 80110c2:	d9fa      	bls.n	80110ba <_free_r+0x46>
 80110c4:	6811      	ldr	r1, [r2, #0]
 80110c6:	1855      	adds	r5, r2, r1
 80110c8:	42a5      	cmp	r5, r4
 80110ca:	d10b      	bne.n	80110e4 <_free_r+0x70>
 80110cc:	6824      	ldr	r4, [r4, #0]
 80110ce:	4421      	add	r1, r4
 80110d0:	1854      	adds	r4, r2, r1
 80110d2:	42a3      	cmp	r3, r4
 80110d4:	6011      	str	r1, [r2, #0]
 80110d6:	d1e0      	bne.n	801109a <_free_r+0x26>
 80110d8:	681c      	ldr	r4, [r3, #0]
 80110da:	685b      	ldr	r3, [r3, #4]
 80110dc:	6053      	str	r3, [r2, #4]
 80110de:	4421      	add	r1, r4
 80110e0:	6011      	str	r1, [r2, #0]
 80110e2:	e7da      	b.n	801109a <_free_r+0x26>
 80110e4:	d902      	bls.n	80110ec <_free_r+0x78>
 80110e6:	230c      	movs	r3, #12
 80110e8:	6003      	str	r3, [r0, #0]
 80110ea:	e7d6      	b.n	801109a <_free_r+0x26>
 80110ec:	6825      	ldr	r5, [r4, #0]
 80110ee:	1961      	adds	r1, r4, r5
 80110f0:	428b      	cmp	r3, r1
 80110f2:	bf04      	itt	eq
 80110f4:	6819      	ldreq	r1, [r3, #0]
 80110f6:	685b      	ldreq	r3, [r3, #4]
 80110f8:	6063      	str	r3, [r4, #4]
 80110fa:	bf04      	itt	eq
 80110fc:	1949      	addeq	r1, r1, r5
 80110fe:	6021      	streq	r1, [r4, #0]
 8011100:	6054      	str	r4, [r2, #4]
 8011102:	e7ca      	b.n	801109a <_free_r+0x26>
 8011104:	b003      	add	sp, #12
 8011106:	bd30      	pop	{r4, r5, pc}
 8011108:	20005110 	.word	0x20005110

0801110c <sbrk_aligned>:
 801110c:	b570      	push	{r4, r5, r6, lr}
 801110e:	4e0e      	ldr	r6, [pc, #56]	; (8011148 <sbrk_aligned+0x3c>)
 8011110:	460c      	mov	r4, r1
 8011112:	6831      	ldr	r1, [r6, #0]
 8011114:	4605      	mov	r5, r0
 8011116:	b911      	cbnz	r1, 801111e <sbrk_aligned+0x12>
 8011118:	f000 f9ee 	bl	80114f8 <_sbrk_r>
 801111c:	6030      	str	r0, [r6, #0]
 801111e:	4621      	mov	r1, r4
 8011120:	4628      	mov	r0, r5
 8011122:	f000 f9e9 	bl	80114f8 <_sbrk_r>
 8011126:	1c43      	adds	r3, r0, #1
 8011128:	d00a      	beq.n	8011140 <sbrk_aligned+0x34>
 801112a:	1cc4      	adds	r4, r0, #3
 801112c:	f024 0403 	bic.w	r4, r4, #3
 8011130:	42a0      	cmp	r0, r4
 8011132:	d007      	beq.n	8011144 <sbrk_aligned+0x38>
 8011134:	1a21      	subs	r1, r4, r0
 8011136:	4628      	mov	r0, r5
 8011138:	f000 f9de 	bl	80114f8 <_sbrk_r>
 801113c:	3001      	adds	r0, #1
 801113e:	d101      	bne.n	8011144 <sbrk_aligned+0x38>
 8011140:	f04f 34ff 	mov.w	r4, #4294967295
 8011144:	4620      	mov	r0, r4
 8011146:	bd70      	pop	{r4, r5, r6, pc}
 8011148:	20005114 	.word	0x20005114

0801114c <_malloc_r>:
 801114c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011150:	1ccd      	adds	r5, r1, #3
 8011152:	f025 0503 	bic.w	r5, r5, #3
 8011156:	3508      	adds	r5, #8
 8011158:	2d0c      	cmp	r5, #12
 801115a:	bf38      	it	cc
 801115c:	250c      	movcc	r5, #12
 801115e:	2d00      	cmp	r5, #0
 8011160:	4607      	mov	r7, r0
 8011162:	db01      	blt.n	8011168 <_malloc_r+0x1c>
 8011164:	42a9      	cmp	r1, r5
 8011166:	d905      	bls.n	8011174 <_malloc_r+0x28>
 8011168:	230c      	movs	r3, #12
 801116a:	603b      	str	r3, [r7, #0]
 801116c:	2600      	movs	r6, #0
 801116e:	4630      	mov	r0, r6
 8011170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011174:	4e2e      	ldr	r6, [pc, #184]	; (8011230 <_malloc_r+0xe4>)
 8011176:	f000 fab9 	bl	80116ec <__malloc_lock>
 801117a:	6833      	ldr	r3, [r6, #0]
 801117c:	461c      	mov	r4, r3
 801117e:	bb34      	cbnz	r4, 80111ce <_malloc_r+0x82>
 8011180:	4629      	mov	r1, r5
 8011182:	4638      	mov	r0, r7
 8011184:	f7ff ffc2 	bl	801110c <sbrk_aligned>
 8011188:	1c43      	adds	r3, r0, #1
 801118a:	4604      	mov	r4, r0
 801118c:	d14d      	bne.n	801122a <_malloc_r+0xde>
 801118e:	6834      	ldr	r4, [r6, #0]
 8011190:	4626      	mov	r6, r4
 8011192:	2e00      	cmp	r6, #0
 8011194:	d140      	bne.n	8011218 <_malloc_r+0xcc>
 8011196:	6823      	ldr	r3, [r4, #0]
 8011198:	4631      	mov	r1, r6
 801119a:	4638      	mov	r0, r7
 801119c:	eb04 0803 	add.w	r8, r4, r3
 80111a0:	f000 f9aa 	bl	80114f8 <_sbrk_r>
 80111a4:	4580      	cmp	r8, r0
 80111a6:	d13a      	bne.n	801121e <_malloc_r+0xd2>
 80111a8:	6821      	ldr	r1, [r4, #0]
 80111aa:	3503      	adds	r5, #3
 80111ac:	1a6d      	subs	r5, r5, r1
 80111ae:	f025 0503 	bic.w	r5, r5, #3
 80111b2:	3508      	adds	r5, #8
 80111b4:	2d0c      	cmp	r5, #12
 80111b6:	bf38      	it	cc
 80111b8:	250c      	movcc	r5, #12
 80111ba:	4629      	mov	r1, r5
 80111bc:	4638      	mov	r0, r7
 80111be:	f7ff ffa5 	bl	801110c <sbrk_aligned>
 80111c2:	3001      	adds	r0, #1
 80111c4:	d02b      	beq.n	801121e <_malloc_r+0xd2>
 80111c6:	6823      	ldr	r3, [r4, #0]
 80111c8:	442b      	add	r3, r5
 80111ca:	6023      	str	r3, [r4, #0]
 80111cc:	e00e      	b.n	80111ec <_malloc_r+0xa0>
 80111ce:	6822      	ldr	r2, [r4, #0]
 80111d0:	1b52      	subs	r2, r2, r5
 80111d2:	d41e      	bmi.n	8011212 <_malloc_r+0xc6>
 80111d4:	2a0b      	cmp	r2, #11
 80111d6:	d916      	bls.n	8011206 <_malloc_r+0xba>
 80111d8:	1961      	adds	r1, r4, r5
 80111da:	42a3      	cmp	r3, r4
 80111dc:	6025      	str	r5, [r4, #0]
 80111de:	bf18      	it	ne
 80111e0:	6059      	strne	r1, [r3, #4]
 80111e2:	6863      	ldr	r3, [r4, #4]
 80111e4:	bf08      	it	eq
 80111e6:	6031      	streq	r1, [r6, #0]
 80111e8:	5162      	str	r2, [r4, r5]
 80111ea:	604b      	str	r3, [r1, #4]
 80111ec:	4638      	mov	r0, r7
 80111ee:	f104 060b 	add.w	r6, r4, #11
 80111f2:	f000 fa81 	bl	80116f8 <__malloc_unlock>
 80111f6:	f026 0607 	bic.w	r6, r6, #7
 80111fa:	1d23      	adds	r3, r4, #4
 80111fc:	1af2      	subs	r2, r6, r3
 80111fe:	d0b6      	beq.n	801116e <_malloc_r+0x22>
 8011200:	1b9b      	subs	r3, r3, r6
 8011202:	50a3      	str	r3, [r4, r2]
 8011204:	e7b3      	b.n	801116e <_malloc_r+0x22>
 8011206:	6862      	ldr	r2, [r4, #4]
 8011208:	42a3      	cmp	r3, r4
 801120a:	bf0c      	ite	eq
 801120c:	6032      	streq	r2, [r6, #0]
 801120e:	605a      	strne	r2, [r3, #4]
 8011210:	e7ec      	b.n	80111ec <_malloc_r+0xa0>
 8011212:	4623      	mov	r3, r4
 8011214:	6864      	ldr	r4, [r4, #4]
 8011216:	e7b2      	b.n	801117e <_malloc_r+0x32>
 8011218:	4634      	mov	r4, r6
 801121a:	6876      	ldr	r6, [r6, #4]
 801121c:	e7b9      	b.n	8011192 <_malloc_r+0x46>
 801121e:	230c      	movs	r3, #12
 8011220:	603b      	str	r3, [r7, #0]
 8011222:	4638      	mov	r0, r7
 8011224:	f000 fa68 	bl	80116f8 <__malloc_unlock>
 8011228:	e7a1      	b.n	801116e <_malloc_r+0x22>
 801122a:	6025      	str	r5, [r4, #0]
 801122c:	e7de      	b.n	80111ec <_malloc_r+0xa0>
 801122e:	bf00      	nop
 8011230:	20005110 	.word	0x20005110

08011234 <__sfputc_r>:
 8011234:	6893      	ldr	r3, [r2, #8]
 8011236:	3b01      	subs	r3, #1
 8011238:	2b00      	cmp	r3, #0
 801123a:	b410      	push	{r4}
 801123c:	6093      	str	r3, [r2, #8]
 801123e:	da08      	bge.n	8011252 <__sfputc_r+0x1e>
 8011240:	6994      	ldr	r4, [r2, #24]
 8011242:	42a3      	cmp	r3, r4
 8011244:	db01      	blt.n	801124a <__sfputc_r+0x16>
 8011246:	290a      	cmp	r1, #10
 8011248:	d103      	bne.n	8011252 <__sfputc_r+0x1e>
 801124a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801124e:	f7fd bd51 	b.w	800ecf4 <__swbuf_r>
 8011252:	6813      	ldr	r3, [r2, #0]
 8011254:	1c58      	adds	r0, r3, #1
 8011256:	6010      	str	r0, [r2, #0]
 8011258:	7019      	strb	r1, [r3, #0]
 801125a:	4608      	mov	r0, r1
 801125c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011260:	4770      	bx	lr

08011262 <__sfputs_r>:
 8011262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011264:	4606      	mov	r6, r0
 8011266:	460f      	mov	r7, r1
 8011268:	4614      	mov	r4, r2
 801126a:	18d5      	adds	r5, r2, r3
 801126c:	42ac      	cmp	r4, r5
 801126e:	d101      	bne.n	8011274 <__sfputs_r+0x12>
 8011270:	2000      	movs	r0, #0
 8011272:	e007      	b.n	8011284 <__sfputs_r+0x22>
 8011274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011278:	463a      	mov	r2, r7
 801127a:	4630      	mov	r0, r6
 801127c:	f7ff ffda 	bl	8011234 <__sfputc_r>
 8011280:	1c43      	adds	r3, r0, #1
 8011282:	d1f3      	bne.n	801126c <__sfputs_r+0xa>
 8011284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011288 <_vfiprintf_r>:
 8011288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801128c:	460d      	mov	r5, r1
 801128e:	b09d      	sub	sp, #116	; 0x74
 8011290:	4614      	mov	r4, r2
 8011292:	4698      	mov	r8, r3
 8011294:	4606      	mov	r6, r0
 8011296:	b118      	cbz	r0, 80112a0 <_vfiprintf_r+0x18>
 8011298:	6983      	ldr	r3, [r0, #24]
 801129a:	b90b      	cbnz	r3, 80112a0 <_vfiprintf_r+0x18>
 801129c:	f7fe fd80 	bl	800fda0 <__sinit>
 80112a0:	4b89      	ldr	r3, [pc, #548]	; (80114c8 <_vfiprintf_r+0x240>)
 80112a2:	429d      	cmp	r5, r3
 80112a4:	d11b      	bne.n	80112de <_vfiprintf_r+0x56>
 80112a6:	6875      	ldr	r5, [r6, #4]
 80112a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112aa:	07d9      	lsls	r1, r3, #31
 80112ac:	d405      	bmi.n	80112ba <_vfiprintf_r+0x32>
 80112ae:	89ab      	ldrh	r3, [r5, #12]
 80112b0:	059a      	lsls	r2, r3, #22
 80112b2:	d402      	bmi.n	80112ba <_vfiprintf_r+0x32>
 80112b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112b6:	f7ff f984 	bl	80105c2 <__retarget_lock_acquire_recursive>
 80112ba:	89ab      	ldrh	r3, [r5, #12]
 80112bc:	071b      	lsls	r3, r3, #28
 80112be:	d501      	bpl.n	80112c4 <_vfiprintf_r+0x3c>
 80112c0:	692b      	ldr	r3, [r5, #16]
 80112c2:	b9eb      	cbnz	r3, 8011300 <_vfiprintf_r+0x78>
 80112c4:	4629      	mov	r1, r5
 80112c6:	4630      	mov	r0, r6
 80112c8:	f7fd fd66 	bl	800ed98 <__swsetup_r>
 80112cc:	b1c0      	cbz	r0, 8011300 <_vfiprintf_r+0x78>
 80112ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112d0:	07dc      	lsls	r4, r3, #31
 80112d2:	d50e      	bpl.n	80112f2 <_vfiprintf_r+0x6a>
 80112d4:	f04f 30ff 	mov.w	r0, #4294967295
 80112d8:	b01d      	add	sp, #116	; 0x74
 80112da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112de:	4b7b      	ldr	r3, [pc, #492]	; (80114cc <_vfiprintf_r+0x244>)
 80112e0:	429d      	cmp	r5, r3
 80112e2:	d101      	bne.n	80112e8 <_vfiprintf_r+0x60>
 80112e4:	68b5      	ldr	r5, [r6, #8]
 80112e6:	e7df      	b.n	80112a8 <_vfiprintf_r+0x20>
 80112e8:	4b79      	ldr	r3, [pc, #484]	; (80114d0 <_vfiprintf_r+0x248>)
 80112ea:	429d      	cmp	r5, r3
 80112ec:	bf08      	it	eq
 80112ee:	68f5      	ldreq	r5, [r6, #12]
 80112f0:	e7da      	b.n	80112a8 <_vfiprintf_r+0x20>
 80112f2:	89ab      	ldrh	r3, [r5, #12]
 80112f4:	0598      	lsls	r0, r3, #22
 80112f6:	d4ed      	bmi.n	80112d4 <_vfiprintf_r+0x4c>
 80112f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112fa:	f7ff f963 	bl	80105c4 <__retarget_lock_release_recursive>
 80112fe:	e7e9      	b.n	80112d4 <_vfiprintf_r+0x4c>
 8011300:	2300      	movs	r3, #0
 8011302:	9309      	str	r3, [sp, #36]	; 0x24
 8011304:	2320      	movs	r3, #32
 8011306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801130a:	f8cd 800c 	str.w	r8, [sp, #12]
 801130e:	2330      	movs	r3, #48	; 0x30
 8011310:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80114d4 <_vfiprintf_r+0x24c>
 8011314:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011318:	f04f 0901 	mov.w	r9, #1
 801131c:	4623      	mov	r3, r4
 801131e:	469a      	mov	sl, r3
 8011320:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011324:	b10a      	cbz	r2, 801132a <_vfiprintf_r+0xa2>
 8011326:	2a25      	cmp	r2, #37	; 0x25
 8011328:	d1f9      	bne.n	801131e <_vfiprintf_r+0x96>
 801132a:	ebba 0b04 	subs.w	fp, sl, r4
 801132e:	d00b      	beq.n	8011348 <_vfiprintf_r+0xc0>
 8011330:	465b      	mov	r3, fp
 8011332:	4622      	mov	r2, r4
 8011334:	4629      	mov	r1, r5
 8011336:	4630      	mov	r0, r6
 8011338:	f7ff ff93 	bl	8011262 <__sfputs_r>
 801133c:	3001      	adds	r0, #1
 801133e:	f000 80aa 	beq.w	8011496 <_vfiprintf_r+0x20e>
 8011342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011344:	445a      	add	r2, fp
 8011346:	9209      	str	r2, [sp, #36]	; 0x24
 8011348:	f89a 3000 	ldrb.w	r3, [sl]
 801134c:	2b00      	cmp	r3, #0
 801134e:	f000 80a2 	beq.w	8011496 <_vfiprintf_r+0x20e>
 8011352:	2300      	movs	r3, #0
 8011354:	f04f 32ff 	mov.w	r2, #4294967295
 8011358:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801135c:	f10a 0a01 	add.w	sl, sl, #1
 8011360:	9304      	str	r3, [sp, #16]
 8011362:	9307      	str	r3, [sp, #28]
 8011364:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011368:	931a      	str	r3, [sp, #104]	; 0x68
 801136a:	4654      	mov	r4, sl
 801136c:	2205      	movs	r2, #5
 801136e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011372:	4858      	ldr	r0, [pc, #352]	; (80114d4 <_vfiprintf_r+0x24c>)
 8011374:	f7ee ff5c 	bl	8000230 <memchr>
 8011378:	9a04      	ldr	r2, [sp, #16]
 801137a:	b9d8      	cbnz	r0, 80113b4 <_vfiprintf_r+0x12c>
 801137c:	06d1      	lsls	r1, r2, #27
 801137e:	bf44      	itt	mi
 8011380:	2320      	movmi	r3, #32
 8011382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011386:	0713      	lsls	r3, r2, #28
 8011388:	bf44      	itt	mi
 801138a:	232b      	movmi	r3, #43	; 0x2b
 801138c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011390:	f89a 3000 	ldrb.w	r3, [sl]
 8011394:	2b2a      	cmp	r3, #42	; 0x2a
 8011396:	d015      	beq.n	80113c4 <_vfiprintf_r+0x13c>
 8011398:	9a07      	ldr	r2, [sp, #28]
 801139a:	4654      	mov	r4, sl
 801139c:	2000      	movs	r0, #0
 801139e:	f04f 0c0a 	mov.w	ip, #10
 80113a2:	4621      	mov	r1, r4
 80113a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113a8:	3b30      	subs	r3, #48	; 0x30
 80113aa:	2b09      	cmp	r3, #9
 80113ac:	d94e      	bls.n	801144c <_vfiprintf_r+0x1c4>
 80113ae:	b1b0      	cbz	r0, 80113de <_vfiprintf_r+0x156>
 80113b0:	9207      	str	r2, [sp, #28]
 80113b2:	e014      	b.n	80113de <_vfiprintf_r+0x156>
 80113b4:	eba0 0308 	sub.w	r3, r0, r8
 80113b8:	fa09 f303 	lsl.w	r3, r9, r3
 80113bc:	4313      	orrs	r3, r2
 80113be:	9304      	str	r3, [sp, #16]
 80113c0:	46a2      	mov	sl, r4
 80113c2:	e7d2      	b.n	801136a <_vfiprintf_r+0xe2>
 80113c4:	9b03      	ldr	r3, [sp, #12]
 80113c6:	1d19      	adds	r1, r3, #4
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	9103      	str	r1, [sp, #12]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	bfbb      	ittet	lt
 80113d0:	425b      	neglt	r3, r3
 80113d2:	f042 0202 	orrlt.w	r2, r2, #2
 80113d6:	9307      	strge	r3, [sp, #28]
 80113d8:	9307      	strlt	r3, [sp, #28]
 80113da:	bfb8      	it	lt
 80113dc:	9204      	strlt	r2, [sp, #16]
 80113de:	7823      	ldrb	r3, [r4, #0]
 80113e0:	2b2e      	cmp	r3, #46	; 0x2e
 80113e2:	d10c      	bne.n	80113fe <_vfiprintf_r+0x176>
 80113e4:	7863      	ldrb	r3, [r4, #1]
 80113e6:	2b2a      	cmp	r3, #42	; 0x2a
 80113e8:	d135      	bne.n	8011456 <_vfiprintf_r+0x1ce>
 80113ea:	9b03      	ldr	r3, [sp, #12]
 80113ec:	1d1a      	adds	r2, r3, #4
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	9203      	str	r2, [sp, #12]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	bfb8      	it	lt
 80113f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80113fa:	3402      	adds	r4, #2
 80113fc:	9305      	str	r3, [sp, #20]
 80113fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80114e4 <_vfiprintf_r+0x25c>
 8011402:	7821      	ldrb	r1, [r4, #0]
 8011404:	2203      	movs	r2, #3
 8011406:	4650      	mov	r0, sl
 8011408:	f7ee ff12 	bl	8000230 <memchr>
 801140c:	b140      	cbz	r0, 8011420 <_vfiprintf_r+0x198>
 801140e:	2340      	movs	r3, #64	; 0x40
 8011410:	eba0 000a 	sub.w	r0, r0, sl
 8011414:	fa03 f000 	lsl.w	r0, r3, r0
 8011418:	9b04      	ldr	r3, [sp, #16]
 801141a:	4303      	orrs	r3, r0
 801141c:	3401      	adds	r4, #1
 801141e:	9304      	str	r3, [sp, #16]
 8011420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011424:	482c      	ldr	r0, [pc, #176]	; (80114d8 <_vfiprintf_r+0x250>)
 8011426:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801142a:	2206      	movs	r2, #6
 801142c:	f7ee ff00 	bl	8000230 <memchr>
 8011430:	2800      	cmp	r0, #0
 8011432:	d03f      	beq.n	80114b4 <_vfiprintf_r+0x22c>
 8011434:	4b29      	ldr	r3, [pc, #164]	; (80114dc <_vfiprintf_r+0x254>)
 8011436:	bb1b      	cbnz	r3, 8011480 <_vfiprintf_r+0x1f8>
 8011438:	9b03      	ldr	r3, [sp, #12]
 801143a:	3307      	adds	r3, #7
 801143c:	f023 0307 	bic.w	r3, r3, #7
 8011440:	3308      	adds	r3, #8
 8011442:	9303      	str	r3, [sp, #12]
 8011444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011446:	443b      	add	r3, r7
 8011448:	9309      	str	r3, [sp, #36]	; 0x24
 801144a:	e767      	b.n	801131c <_vfiprintf_r+0x94>
 801144c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011450:	460c      	mov	r4, r1
 8011452:	2001      	movs	r0, #1
 8011454:	e7a5      	b.n	80113a2 <_vfiprintf_r+0x11a>
 8011456:	2300      	movs	r3, #0
 8011458:	3401      	adds	r4, #1
 801145a:	9305      	str	r3, [sp, #20]
 801145c:	4619      	mov	r1, r3
 801145e:	f04f 0c0a 	mov.w	ip, #10
 8011462:	4620      	mov	r0, r4
 8011464:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011468:	3a30      	subs	r2, #48	; 0x30
 801146a:	2a09      	cmp	r2, #9
 801146c:	d903      	bls.n	8011476 <_vfiprintf_r+0x1ee>
 801146e:	2b00      	cmp	r3, #0
 8011470:	d0c5      	beq.n	80113fe <_vfiprintf_r+0x176>
 8011472:	9105      	str	r1, [sp, #20]
 8011474:	e7c3      	b.n	80113fe <_vfiprintf_r+0x176>
 8011476:	fb0c 2101 	mla	r1, ip, r1, r2
 801147a:	4604      	mov	r4, r0
 801147c:	2301      	movs	r3, #1
 801147e:	e7f0      	b.n	8011462 <_vfiprintf_r+0x1da>
 8011480:	ab03      	add	r3, sp, #12
 8011482:	9300      	str	r3, [sp, #0]
 8011484:	462a      	mov	r2, r5
 8011486:	4b16      	ldr	r3, [pc, #88]	; (80114e0 <_vfiprintf_r+0x258>)
 8011488:	a904      	add	r1, sp, #16
 801148a:	4630      	mov	r0, r6
 801148c:	f7fc f920 	bl	800d6d0 <_printf_float>
 8011490:	4607      	mov	r7, r0
 8011492:	1c78      	adds	r0, r7, #1
 8011494:	d1d6      	bne.n	8011444 <_vfiprintf_r+0x1bc>
 8011496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011498:	07d9      	lsls	r1, r3, #31
 801149a:	d405      	bmi.n	80114a8 <_vfiprintf_r+0x220>
 801149c:	89ab      	ldrh	r3, [r5, #12]
 801149e:	059a      	lsls	r2, r3, #22
 80114a0:	d402      	bmi.n	80114a8 <_vfiprintf_r+0x220>
 80114a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114a4:	f7ff f88e 	bl	80105c4 <__retarget_lock_release_recursive>
 80114a8:	89ab      	ldrh	r3, [r5, #12]
 80114aa:	065b      	lsls	r3, r3, #25
 80114ac:	f53f af12 	bmi.w	80112d4 <_vfiprintf_r+0x4c>
 80114b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114b2:	e711      	b.n	80112d8 <_vfiprintf_r+0x50>
 80114b4:	ab03      	add	r3, sp, #12
 80114b6:	9300      	str	r3, [sp, #0]
 80114b8:	462a      	mov	r2, r5
 80114ba:	4b09      	ldr	r3, [pc, #36]	; (80114e0 <_vfiprintf_r+0x258>)
 80114bc:	a904      	add	r1, sp, #16
 80114be:	4630      	mov	r0, r6
 80114c0:	f7fc fbaa 	bl	800dc18 <_printf_i>
 80114c4:	e7e4      	b.n	8011490 <_vfiprintf_r+0x208>
 80114c6:	bf00      	nop
 80114c8:	080130b4 	.word	0x080130b4
 80114cc:	080130d4 	.word	0x080130d4
 80114d0:	08013094 	.word	0x08013094
 80114d4:	080132cc 	.word	0x080132cc
 80114d8:	080132d6 	.word	0x080132d6
 80114dc:	0800d6d1 	.word	0x0800d6d1
 80114e0:	08011263 	.word	0x08011263
 80114e4:	080132d2 	.word	0x080132d2

080114e8 <nan>:
 80114e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80114f0 <nan+0x8>
 80114ec:	4770      	bx	lr
 80114ee:	bf00      	nop
 80114f0:	00000000 	.word	0x00000000
 80114f4:	7ff80000 	.word	0x7ff80000

080114f8 <_sbrk_r>:
 80114f8:	b538      	push	{r3, r4, r5, lr}
 80114fa:	4d06      	ldr	r5, [pc, #24]	; (8011514 <_sbrk_r+0x1c>)
 80114fc:	2300      	movs	r3, #0
 80114fe:	4604      	mov	r4, r0
 8011500:	4608      	mov	r0, r1
 8011502:	602b      	str	r3, [r5, #0]
 8011504:	f7f3 fde2 	bl	80050cc <_sbrk>
 8011508:	1c43      	adds	r3, r0, #1
 801150a:	d102      	bne.n	8011512 <_sbrk_r+0x1a>
 801150c:	682b      	ldr	r3, [r5, #0]
 801150e:	b103      	cbz	r3, 8011512 <_sbrk_r+0x1a>
 8011510:	6023      	str	r3, [r4, #0]
 8011512:	bd38      	pop	{r3, r4, r5, pc}
 8011514:	20005118 	.word	0x20005118

08011518 <__sread>:
 8011518:	b510      	push	{r4, lr}
 801151a:	460c      	mov	r4, r1
 801151c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011520:	f000 f8f0 	bl	8011704 <_read_r>
 8011524:	2800      	cmp	r0, #0
 8011526:	bfab      	itete	ge
 8011528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801152a:	89a3      	ldrhlt	r3, [r4, #12]
 801152c:	181b      	addge	r3, r3, r0
 801152e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011532:	bfac      	ite	ge
 8011534:	6563      	strge	r3, [r4, #84]	; 0x54
 8011536:	81a3      	strhlt	r3, [r4, #12]
 8011538:	bd10      	pop	{r4, pc}

0801153a <__swrite>:
 801153a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801153e:	461f      	mov	r7, r3
 8011540:	898b      	ldrh	r3, [r1, #12]
 8011542:	05db      	lsls	r3, r3, #23
 8011544:	4605      	mov	r5, r0
 8011546:	460c      	mov	r4, r1
 8011548:	4616      	mov	r6, r2
 801154a:	d505      	bpl.n	8011558 <__swrite+0x1e>
 801154c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011550:	2302      	movs	r3, #2
 8011552:	2200      	movs	r2, #0
 8011554:	f000 f8b8 	bl	80116c8 <_lseek_r>
 8011558:	89a3      	ldrh	r3, [r4, #12]
 801155a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801155e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011562:	81a3      	strh	r3, [r4, #12]
 8011564:	4632      	mov	r2, r6
 8011566:	463b      	mov	r3, r7
 8011568:	4628      	mov	r0, r5
 801156a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801156e:	f000 b837 	b.w	80115e0 <_write_r>

08011572 <__sseek>:
 8011572:	b510      	push	{r4, lr}
 8011574:	460c      	mov	r4, r1
 8011576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801157a:	f000 f8a5 	bl	80116c8 <_lseek_r>
 801157e:	1c43      	adds	r3, r0, #1
 8011580:	89a3      	ldrh	r3, [r4, #12]
 8011582:	bf15      	itete	ne
 8011584:	6560      	strne	r0, [r4, #84]	; 0x54
 8011586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801158a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801158e:	81a3      	strheq	r3, [r4, #12]
 8011590:	bf18      	it	ne
 8011592:	81a3      	strhne	r3, [r4, #12]
 8011594:	bd10      	pop	{r4, pc}

08011596 <__sclose>:
 8011596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801159a:	f000 b851 	b.w	8011640 <_close_r>

0801159e <strncmp>:
 801159e:	b510      	push	{r4, lr}
 80115a0:	b17a      	cbz	r2, 80115c2 <strncmp+0x24>
 80115a2:	4603      	mov	r3, r0
 80115a4:	3901      	subs	r1, #1
 80115a6:	1884      	adds	r4, r0, r2
 80115a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80115ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80115b0:	4290      	cmp	r0, r2
 80115b2:	d101      	bne.n	80115b8 <strncmp+0x1a>
 80115b4:	42a3      	cmp	r3, r4
 80115b6:	d101      	bne.n	80115bc <strncmp+0x1e>
 80115b8:	1a80      	subs	r0, r0, r2
 80115ba:	bd10      	pop	{r4, pc}
 80115bc:	2800      	cmp	r0, #0
 80115be:	d1f3      	bne.n	80115a8 <strncmp+0xa>
 80115c0:	e7fa      	b.n	80115b8 <strncmp+0x1a>
 80115c2:	4610      	mov	r0, r2
 80115c4:	e7f9      	b.n	80115ba <strncmp+0x1c>

080115c6 <__ascii_wctomb>:
 80115c6:	b149      	cbz	r1, 80115dc <__ascii_wctomb+0x16>
 80115c8:	2aff      	cmp	r2, #255	; 0xff
 80115ca:	bf85      	ittet	hi
 80115cc:	238a      	movhi	r3, #138	; 0x8a
 80115ce:	6003      	strhi	r3, [r0, #0]
 80115d0:	700a      	strbls	r2, [r1, #0]
 80115d2:	f04f 30ff 	movhi.w	r0, #4294967295
 80115d6:	bf98      	it	ls
 80115d8:	2001      	movls	r0, #1
 80115da:	4770      	bx	lr
 80115dc:	4608      	mov	r0, r1
 80115de:	4770      	bx	lr

080115e0 <_write_r>:
 80115e0:	b538      	push	{r3, r4, r5, lr}
 80115e2:	4d07      	ldr	r5, [pc, #28]	; (8011600 <_write_r+0x20>)
 80115e4:	4604      	mov	r4, r0
 80115e6:	4608      	mov	r0, r1
 80115e8:	4611      	mov	r1, r2
 80115ea:	2200      	movs	r2, #0
 80115ec:	602a      	str	r2, [r5, #0]
 80115ee:	461a      	mov	r2, r3
 80115f0:	f7f3 fd1b 	bl	800502a <_write>
 80115f4:	1c43      	adds	r3, r0, #1
 80115f6:	d102      	bne.n	80115fe <_write_r+0x1e>
 80115f8:	682b      	ldr	r3, [r5, #0]
 80115fa:	b103      	cbz	r3, 80115fe <_write_r+0x1e>
 80115fc:	6023      	str	r3, [r4, #0]
 80115fe:	bd38      	pop	{r3, r4, r5, pc}
 8011600:	20005118 	.word	0x20005118

08011604 <__assert_func>:
 8011604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011606:	4614      	mov	r4, r2
 8011608:	461a      	mov	r2, r3
 801160a:	4b09      	ldr	r3, [pc, #36]	; (8011630 <__assert_func+0x2c>)
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	4605      	mov	r5, r0
 8011610:	68d8      	ldr	r0, [r3, #12]
 8011612:	b14c      	cbz	r4, 8011628 <__assert_func+0x24>
 8011614:	4b07      	ldr	r3, [pc, #28]	; (8011634 <__assert_func+0x30>)
 8011616:	9100      	str	r1, [sp, #0]
 8011618:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801161c:	4906      	ldr	r1, [pc, #24]	; (8011638 <__assert_func+0x34>)
 801161e:	462b      	mov	r3, r5
 8011620:	f000 f81e 	bl	8011660 <fiprintf>
 8011624:	f000 f880 	bl	8011728 <abort>
 8011628:	4b04      	ldr	r3, [pc, #16]	; (801163c <__assert_func+0x38>)
 801162a:	461c      	mov	r4, r3
 801162c:	e7f3      	b.n	8011616 <__assert_func+0x12>
 801162e:	bf00      	nop
 8011630:	2000002c 	.word	0x2000002c
 8011634:	080132dd 	.word	0x080132dd
 8011638:	080132ea 	.word	0x080132ea
 801163c:	08013318 	.word	0x08013318

08011640 <_close_r>:
 8011640:	b538      	push	{r3, r4, r5, lr}
 8011642:	4d06      	ldr	r5, [pc, #24]	; (801165c <_close_r+0x1c>)
 8011644:	2300      	movs	r3, #0
 8011646:	4604      	mov	r4, r0
 8011648:	4608      	mov	r0, r1
 801164a:	602b      	str	r3, [r5, #0]
 801164c:	f7f3 fd09 	bl	8005062 <_close>
 8011650:	1c43      	adds	r3, r0, #1
 8011652:	d102      	bne.n	801165a <_close_r+0x1a>
 8011654:	682b      	ldr	r3, [r5, #0]
 8011656:	b103      	cbz	r3, 801165a <_close_r+0x1a>
 8011658:	6023      	str	r3, [r4, #0]
 801165a:	bd38      	pop	{r3, r4, r5, pc}
 801165c:	20005118 	.word	0x20005118

08011660 <fiprintf>:
 8011660:	b40e      	push	{r1, r2, r3}
 8011662:	b503      	push	{r0, r1, lr}
 8011664:	4601      	mov	r1, r0
 8011666:	ab03      	add	r3, sp, #12
 8011668:	4805      	ldr	r0, [pc, #20]	; (8011680 <fiprintf+0x20>)
 801166a:	f853 2b04 	ldr.w	r2, [r3], #4
 801166e:	6800      	ldr	r0, [r0, #0]
 8011670:	9301      	str	r3, [sp, #4]
 8011672:	f7ff fe09 	bl	8011288 <_vfiprintf_r>
 8011676:	b002      	add	sp, #8
 8011678:	f85d eb04 	ldr.w	lr, [sp], #4
 801167c:	b003      	add	sp, #12
 801167e:	4770      	bx	lr
 8011680:	2000002c 	.word	0x2000002c

08011684 <_fstat_r>:
 8011684:	b538      	push	{r3, r4, r5, lr}
 8011686:	4d07      	ldr	r5, [pc, #28]	; (80116a4 <_fstat_r+0x20>)
 8011688:	2300      	movs	r3, #0
 801168a:	4604      	mov	r4, r0
 801168c:	4608      	mov	r0, r1
 801168e:	4611      	mov	r1, r2
 8011690:	602b      	str	r3, [r5, #0]
 8011692:	f7f3 fcf2 	bl	800507a <_fstat>
 8011696:	1c43      	adds	r3, r0, #1
 8011698:	d102      	bne.n	80116a0 <_fstat_r+0x1c>
 801169a:	682b      	ldr	r3, [r5, #0]
 801169c:	b103      	cbz	r3, 80116a0 <_fstat_r+0x1c>
 801169e:	6023      	str	r3, [r4, #0]
 80116a0:	bd38      	pop	{r3, r4, r5, pc}
 80116a2:	bf00      	nop
 80116a4:	20005118 	.word	0x20005118

080116a8 <_isatty_r>:
 80116a8:	b538      	push	{r3, r4, r5, lr}
 80116aa:	4d06      	ldr	r5, [pc, #24]	; (80116c4 <_isatty_r+0x1c>)
 80116ac:	2300      	movs	r3, #0
 80116ae:	4604      	mov	r4, r0
 80116b0:	4608      	mov	r0, r1
 80116b2:	602b      	str	r3, [r5, #0]
 80116b4:	f7f3 fcf1 	bl	800509a <_isatty>
 80116b8:	1c43      	adds	r3, r0, #1
 80116ba:	d102      	bne.n	80116c2 <_isatty_r+0x1a>
 80116bc:	682b      	ldr	r3, [r5, #0]
 80116be:	b103      	cbz	r3, 80116c2 <_isatty_r+0x1a>
 80116c0:	6023      	str	r3, [r4, #0]
 80116c2:	bd38      	pop	{r3, r4, r5, pc}
 80116c4:	20005118 	.word	0x20005118

080116c8 <_lseek_r>:
 80116c8:	b538      	push	{r3, r4, r5, lr}
 80116ca:	4d07      	ldr	r5, [pc, #28]	; (80116e8 <_lseek_r+0x20>)
 80116cc:	4604      	mov	r4, r0
 80116ce:	4608      	mov	r0, r1
 80116d0:	4611      	mov	r1, r2
 80116d2:	2200      	movs	r2, #0
 80116d4:	602a      	str	r2, [r5, #0]
 80116d6:	461a      	mov	r2, r3
 80116d8:	f7f3 fcea 	bl	80050b0 <_lseek>
 80116dc:	1c43      	adds	r3, r0, #1
 80116de:	d102      	bne.n	80116e6 <_lseek_r+0x1e>
 80116e0:	682b      	ldr	r3, [r5, #0]
 80116e2:	b103      	cbz	r3, 80116e6 <_lseek_r+0x1e>
 80116e4:	6023      	str	r3, [r4, #0]
 80116e6:	bd38      	pop	{r3, r4, r5, pc}
 80116e8:	20005118 	.word	0x20005118

080116ec <__malloc_lock>:
 80116ec:	4801      	ldr	r0, [pc, #4]	; (80116f4 <__malloc_lock+0x8>)
 80116ee:	f7fe bf68 	b.w	80105c2 <__retarget_lock_acquire_recursive>
 80116f2:	bf00      	nop
 80116f4:	2000510c 	.word	0x2000510c

080116f8 <__malloc_unlock>:
 80116f8:	4801      	ldr	r0, [pc, #4]	; (8011700 <__malloc_unlock+0x8>)
 80116fa:	f7fe bf63 	b.w	80105c4 <__retarget_lock_release_recursive>
 80116fe:	bf00      	nop
 8011700:	2000510c 	.word	0x2000510c

08011704 <_read_r>:
 8011704:	b538      	push	{r3, r4, r5, lr}
 8011706:	4d07      	ldr	r5, [pc, #28]	; (8011724 <_read_r+0x20>)
 8011708:	4604      	mov	r4, r0
 801170a:	4608      	mov	r0, r1
 801170c:	4611      	mov	r1, r2
 801170e:	2200      	movs	r2, #0
 8011710:	602a      	str	r2, [r5, #0]
 8011712:	461a      	mov	r2, r3
 8011714:	f7f3 fc6c 	bl	8004ff0 <_read>
 8011718:	1c43      	adds	r3, r0, #1
 801171a:	d102      	bne.n	8011722 <_read_r+0x1e>
 801171c:	682b      	ldr	r3, [r5, #0]
 801171e:	b103      	cbz	r3, 8011722 <_read_r+0x1e>
 8011720:	6023      	str	r3, [r4, #0]
 8011722:	bd38      	pop	{r3, r4, r5, pc}
 8011724:	20005118 	.word	0x20005118

08011728 <abort>:
 8011728:	b508      	push	{r3, lr}
 801172a:	2006      	movs	r0, #6
 801172c:	f000 f82c 	bl	8011788 <raise>
 8011730:	2001      	movs	r0, #1
 8011732:	f7f3 fc53 	bl	8004fdc <_exit>

08011736 <_raise_r>:
 8011736:	291f      	cmp	r1, #31
 8011738:	b538      	push	{r3, r4, r5, lr}
 801173a:	4604      	mov	r4, r0
 801173c:	460d      	mov	r5, r1
 801173e:	d904      	bls.n	801174a <_raise_r+0x14>
 8011740:	2316      	movs	r3, #22
 8011742:	6003      	str	r3, [r0, #0]
 8011744:	f04f 30ff 	mov.w	r0, #4294967295
 8011748:	bd38      	pop	{r3, r4, r5, pc}
 801174a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801174c:	b112      	cbz	r2, 8011754 <_raise_r+0x1e>
 801174e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011752:	b94b      	cbnz	r3, 8011768 <_raise_r+0x32>
 8011754:	4620      	mov	r0, r4
 8011756:	f000 f831 	bl	80117bc <_getpid_r>
 801175a:	462a      	mov	r2, r5
 801175c:	4601      	mov	r1, r0
 801175e:	4620      	mov	r0, r4
 8011760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011764:	f000 b818 	b.w	8011798 <_kill_r>
 8011768:	2b01      	cmp	r3, #1
 801176a:	d00a      	beq.n	8011782 <_raise_r+0x4c>
 801176c:	1c59      	adds	r1, r3, #1
 801176e:	d103      	bne.n	8011778 <_raise_r+0x42>
 8011770:	2316      	movs	r3, #22
 8011772:	6003      	str	r3, [r0, #0]
 8011774:	2001      	movs	r0, #1
 8011776:	e7e7      	b.n	8011748 <_raise_r+0x12>
 8011778:	2400      	movs	r4, #0
 801177a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801177e:	4628      	mov	r0, r5
 8011780:	4798      	blx	r3
 8011782:	2000      	movs	r0, #0
 8011784:	e7e0      	b.n	8011748 <_raise_r+0x12>
	...

08011788 <raise>:
 8011788:	4b02      	ldr	r3, [pc, #8]	; (8011794 <raise+0xc>)
 801178a:	4601      	mov	r1, r0
 801178c:	6818      	ldr	r0, [r3, #0]
 801178e:	f7ff bfd2 	b.w	8011736 <_raise_r>
 8011792:	bf00      	nop
 8011794:	2000002c 	.word	0x2000002c

08011798 <_kill_r>:
 8011798:	b538      	push	{r3, r4, r5, lr}
 801179a:	4d07      	ldr	r5, [pc, #28]	; (80117b8 <_kill_r+0x20>)
 801179c:	2300      	movs	r3, #0
 801179e:	4604      	mov	r4, r0
 80117a0:	4608      	mov	r0, r1
 80117a2:	4611      	mov	r1, r2
 80117a4:	602b      	str	r3, [r5, #0]
 80117a6:	f7f3 fc09 	bl	8004fbc <_kill>
 80117aa:	1c43      	adds	r3, r0, #1
 80117ac:	d102      	bne.n	80117b4 <_kill_r+0x1c>
 80117ae:	682b      	ldr	r3, [r5, #0]
 80117b0:	b103      	cbz	r3, 80117b4 <_kill_r+0x1c>
 80117b2:	6023      	str	r3, [r4, #0]
 80117b4:	bd38      	pop	{r3, r4, r5, pc}
 80117b6:	bf00      	nop
 80117b8:	20005118 	.word	0x20005118

080117bc <_getpid_r>:
 80117bc:	f7f3 bbf6 	b.w	8004fac <_getpid>

080117c0 <round>:
 80117c0:	ec51 0b10 	vmov	r0, r1, d0
 80117c4:	b570      	push	{r4, r5, r6, lr}
 80117c6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80117ca:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80117ce:	2c13      	cmp	r4, #19
 80117d0:	ee10 2a10 	vmov	r2, s0
 80117d4:	460b      	mov	r3, r1
 80117d6:	dc19      	bgt.n	801180c <round+0x4c>
 80117d8:	2c00      	cmp	r4, #0
 80117da:	da09      	bge.n	80117f0 <round+0x30>
 80117dc:	3401      	adds	r4, #1
 80117de:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80117e2:	d103      	bne.n	80117ec <round+0x2c>
 80117e4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80117e8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80117ec:	2200      	movs	r2, #0
 80117ee:	e028      	b.n	8011842 <round+0x82>
 80117f0:	4d15      	ldr	r5, [pc, #84]	; (8011848 <round+0x88>)
 80117f2:	4125      	asrs	r5, r4
 80117f4:	ea01 0605 	and.w	r6, r1, r5
 80117f8:	4332      	orrs	r2, r6
 80117fa:	d00e      	beq.n	801181a <round+0x5a>
 80117fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8011800:	fa42 f404 	asr.w	r4, r2, r4
 8011804:	4423      	add	r3, r4
 8011806:	ea23 0305 	bic.w	r3, r3, r5
 801180a:	e7ef      	b.n	80117ec <round+0x2c>
 801180c:	2c33      	cmp	r4, #51	; 0x33
 801180e:	dd07      	ble.n	8011820 <round+0x60>
 8011810:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8011814:	d101      	bne.n	801181a <round+0x5a>
 8011816:	f7ee fd61 	bl	80002dc <__adddf3>
 801181a:	ec41 0b10 	vmov	d0, r0, r1
 801181e:	bd70      	pop	{r4, r5, r6, pc}
 8011820:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8011824:	f04f 35ff 	mov.w	r5, #4294967295
 8011828:	40f5      	lsrs	r5, r6
 801182a:	4228      	tst	r0, r5
 801182c:	d0f5      	beq.n	801181a <round+0x5a>
 801182e:	2101      	movs	r1, #1
 8011830:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8011834:	fa01 f404 	lsl.w	r4, r1, r4
 8011838:	1912      	adds	r2, r2, r4
 801183a:	bf28      	it	cs
 801183c:	185b      	addcs	r3, r3, r1
 801183e:	ea22 0205 	bic.w	r2, r2, r5
 8011842:	4619      	mov	r1, r3
 8011844:	4610      	mov	r0, r2
 8011846:	e7e8      	b.n	801181a <round+0x5a>
 8011848:	000fffff 	.word	0x000fffff

0801184c <fmaxf>:
 801184c:	b508      	push	{r3, lr}
 801184e:	ed2d 8b02 	vpush	{d8}
 8011852:	eeb0 8a40 	vmov.f32	s16, s0
 8011856:	eef0 8a60 	vmov.f32	s17, s1
 801185a:	f000 f82d 	bl	80118b8 <__fpclassifyf>
 801185e:	b148      	cbz	r0, 8011874 <fmaxf+0x28>
 8011860:	eeb0 0a68 	vmov.f32	s0, s17
 8011864:	f000 f828 	bl	80118b8 <__fpclassifyf>
 8011868:	b130      	cbz	r0, 8011878 <fmaxf+0x2c>
 801186a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801186e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011872:	dc01      	bgt.n	8011878 <fmaxf+0x2c>
 8011874:	eeb0 8a68 	vmov.f32	s16, s17
 8011878:	eeb0 0a48 	vmov.f32	s0, s16
 801187c:	ecbd 8b02 	vpop	{d8}
 8011880:	bd08      	pop	{r3, pc}

08011882 <fminf>:
 8011882:	b508      	push	{r3, lr}
 8011884:	ed2d 8b02 	vpush	{d8}
 8011888:	eeb0 8a40 	vmov.f32	s16, s0
 801188c:	eef0 8a60 	vmov.f32	s17, s1
 8011890:	f000 f812 	bl	80118b8 <__fpclassifyf>
 8011894:	b148      	cbz	r0, 80118aa <fminf+0x28>
 8011896:	eeb0 0a68 	vmov.f32	s0, s17
 801189a:	f000 f80d 	bl	80118b8 <__fpclassifyf>
 801189e:	b130      	cbz	r0, 80118ae <fminf+0x2c>
 80118a0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80118a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118a8:	d401      	bmi.n	80118ae <fminf+0x2c>
 80118aa:	eeb0 8a68 	vmov.f32	s16, s17
 80118ae:	eeb0 0a48 	vmov.f32	s0, s16
 80118b2:	ecbd 8b02 	vpop	{d8}
 80118b6:	bd08      	pop	{r3, pc}

080118b8 <__fpclassifyf>:
 80118b8:	ee10 3a10 	vmov	r3, s0
 80118bc:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80118c0:	d00d      	beq.n	80118de <__fpclassifyf+0x26>
 80118c2:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80118c6:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80118ca:	d30a      	bcc.n	80118e2 <__fpclassifyf+0x2a>
 80118cc:	4b07      	ldr	r3, [pc, #28]	; (80118ec <__fpclassifyf+0x34>)
 80118ce:	1e42      	subs	r2, r0, #1
 80118d0:	429a      	cmp	r2, r3
 80118d2:	d908      	bls.n	80118e6 <__fpclassifyf+0x2e>
 80118d4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 80118d8:	4258      	negs	r0, r3
 80118da:	4158      	adcs	r0, r3
 80118dc:	4770      	bx	lr
 80118de:	2002      	movs	r0, #2
 80118e0:	4770      	bx	lr
 80118e2:	2004      	movs	r0, #4
 80118e4:	4770      	bx	lr
 80118e6:	2003      	movs	r0, #3
 80118e8:	4770      	bx	lr
 80118ea:	bf00      	nop
 80118ec:	007ffffe 	.word	0x007ffffe

080118f0 <exp>:
 80118f0:	b538      	push	{r3, r4, r5, lr}
 80118f2:	ed2d 8b02 	vpush	{d8}
 80118f6:	ec55 4b10 	vmov	r4, r5, d0
 80118fa:	f000 f881 	bl	8011a00 <__ieee754_exp>
 80118fe:	eeb0 8a40 	vmov.f32	s16, s0
 8011902:	eef0 8a60 	vmov.f32	s17, s1
 8011906:	ec45 4b10 	vmov	d0, r4, r5
 801190a:	f000 fab0 	bl	8011e6e <finite>
 801190e:	b168      	cbz	r0, 801192c <exp+0x3c>
 8011910:	a317      	add	r3, pc, #92	; (adr r3, 8011970 <exp+0x80>)
 8011912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011916:	4620      	mov	r0, r4
 8011918:	4629      	mov	r1, r5
 801191a:	f7ef f925 	bl	8000b68 <__aeabi_dcmpgt>
 801191e:	b160      	cbz	r0, 801193a <exp+0x4a>
 8011920:	f7fb fdf6 	bl	800d510 <__errno>
 8011924:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8011960 <exp+0x70>
 8011928:	2322      	movs	r3, #34	; 0x22
 801192a:	6003      	str	r3, [r0, #0]
 801192c:	eeb0 0a48 	vmov.f32	s0, s16
 8011930:	eef0 0a68 	vmov.f32	s1, s17
 8011934:	ecbd 8b02 	vpop	{d8}
 8011938:	bd38      	pop	{r3, r4, r5, pc}
 801193a:	a30f      	add	r3, pc, #60	; (adr r3, 8011978 <exp+0x88>)
 801193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011940:	4620      	mov	r0, r4
 8011942:	4629      	mov	r1, r5
 8011944:	f7ef f8f2 	bl	8000b2c <__aeabi_dcmplt>
 8011948:	2800      	cmp	r0, #0
 801194a:	d0ef      	beq.n	801192c <exp+0x3c>
 801194c:	f7fb fde0 	bl	800d510 <__errno>
 8011950:	2322      	movs	r3, #34	; 0x22
 8011952:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8011968 <exp+0x78>
 8011956:	6003      	str	r3, [r0, #0]
 8011958:	e7e8      	b.n	801192c <exp+0x3c>
 801195a:	bf00      	nop
 801195c:	f3af 8000 	nop.w
 8011960:	00000000 	.word	0x00000000
 8011964:	7ff00000 	.word	0x7ff00000
	...
 8011970:	fefa39ef 	.word	0xfefa39ef
 8011974:	40862e42 	.word	0x40862e42
 8011978:	d52d3051 	.word	0xd52d3051
 801197c:	c0874910 	.word	0xc0874910

08011980 <fmodf>:
 8011980:	b508      	push	{r3, lr}
 8011982:	ed2d 8b02 	vpush	{d8}
 8011986:	eef0 8a40 	vmov.f32	s17, s0
 801198a:	eeb0 8a60 	vmov.f32	s16, s1
 801198e:	f000 f9b9 	bl	8011d04 <__ieee754_fmodf>
 8011992:	eef4 8a48 	vcmp.f32	s17, s16
 8011996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801199a:	d60c      	bvs.n	80119b6 <fmodf+0x36>
 801199c:	eddf 8a07 	vldr	s17, [pc, #28]	; 80119bc <fmodf+0x3c>
 80119a0:	eeb4 8a68 	vcmp.f32	s16, s17
 80119a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119a8:	d105      	bne.n	80119b6 <fmodf+0x36>
 80119aa:	f7fb fdb1 	bl	800d510 <__errno>
 80119ae:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80119b2:	2321      	movs	r3, #33	; 0x21
 80119b4:	6003      	str	r3, [r0, #0]
 80119b6:	ecbd 8b02 	vpop	{d8}
 80119ba:	bd08      	pop	{r3, pc}
 80119bc:	00000000 	.word	0x00000000

080119c0 <sqrtf>:
 80119c0:	b508      	push	{r3, lr}
 80119c2:	ed2d 8b02 	vpush	{d8}
 80119c6:	eeb0 8a40 	vmov.f32	s16, s0
 80119ca:	f000 fa1d 	bl	8011e08 <__ieee754_sqrtf>
 80119ce:	eeb4 8a48 	vcmp.f32	s16, s16
 80119d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119d6:	d60c      	bvs.n	80119f2 <sqrtf+0x32>
 80119d8:	eddf 8a07 	vldr	s17, [pc, #28]	; 80119f8 <sqrtf+0x38>
 80119dc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80119e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119e4:	d505      	bpl.n	80119f2 <sqrtf+0x32>
 80119e6:	f7fb fd93 	bl	800d510 <__errno>
 80119ea:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80119ee:	2321      	movs	r3, #33	; 0x21
 80119f0:	6003      	str	r3, [r0, #0]
 80119f2:	ecbd 8b02 	vpop	{d8}
 80119f6:	bd08      	pop	{r3, pc}
	...

08011a00 <__ieee754_exp>:
 8011a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a04:	ec55 4b10 	vmov	r4, r5, d0
 8011a08:	49b5      	ldr	r1, [pc, #724]	; (8011ce0 <__ieee754_exp+0x2e0>)
 8011a0a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011a0e:	428b      	cmp	r3, r1
 8011a10:	ed2d 8b04 	vpush	{d8-d9}
 8011a14:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8011a18:	d93d      	bls.n	8011a96 <__ieee754_exp+0x96>
 8011a1a:	49b2      	ldr	r1, [pc, #712]	; (8011ce4 <__ieee754_exp+0x2e4>)
 8011a1c:	428b      	cmp	r3, r1
 8011a1e:	d918      	bls.n	8011a52 <__ieee754_exp+0x52>
 8011a20:	ee10 3a10 	vmov	r3, s0
 8011a24:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8011a28:	4313      	orrs	r3, r2
 8011a2a:	d009      	beq.n	8011a40 <__ieee754_exp+0x40>
 8011a2c:	ee10 2a10 	vmov	r2, s0
 8011a30:	462b      	mov	r3, r5
 8011a32:	4620      	mov	r0, r4
 8011a34:	4629      	mov	r1, r5
 8011a36:	f7ee fc51 	bl	80002dc <__adddf3>
 8011a3a:	4604      	mov	r4, r0
 8011a3c:	460d      	mov	r5, r1
 8011a3e:	e002      	b.n	8011a46 <__ieee754_exp+0x46>
 8011a40:	b10e      	cbz	r6, 8011a46 <__ieee754_exp+0x46>
 8011a42:	2400      	movs	r4, #0
 8011a44:	2500      	movs	r5, #0
 8011a46:	ecbd 8b04 	vpop	{d8-d9}
 8011a4a:	ec45 4b10 	vmov	d0, r4, r5
 8011a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a52:	a38d      	add	r3, pc, #564	; (adr r3, 8011c88 <__ieee754_exp+0x288>)
 8011a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a58:	ee10 0a10 	vmov	r0, s0
 8011a5c:	4629      	mov	r1, r5
 8011a5e:	f7ef f883 	bl	8000b68 <__aeabi_dcmpgt>
 8011a62:	4607      	mov	r7, r0
 8011a64:	b130      	cbz	r0, 8011a74 <__ieee754_exp+0x74>
 8011a66:	ecbd 8b04 	vpop	{d8-d9}
 8011a6a:	2000      	movs	r0, #0
 8011a6c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a70:	f000 b9f4 	b.w	8011e5c <__math_oflow>
 8011a74:	a386      	add	r3, pc, #536	; (adr r3, 8011c90 <__ieee754_exp+0x290>)
 8011a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a7a:	4620      	mov	r0, r4
 8011a7c:	4629      	mov	r1, r5
 8011a7e:	f7ef f855 	bl	8000b2c <__aeabi_dcmplt>
 8011a82:	2800      	cmp	r0, #0
 8011a84:	f000 808b 	beq.w	8011b9e <__ieee754_exp+0x19e>
 8011a88:	ecbd 8b04 	vpop	{d8-d9}
 8011a8c:	4638      	mov	r0, r7
 8011a8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a92:	f000 b9da 	b.w	8011e4a <__math_uflow>
 8011a96:	4a94      	ldr	r2, [pc, #592]	; (8011ce8 <__ieee754_exp+0x2e8>)
 8011a98:	4293      	cmp	r3, r2
 8011a9a:	f240 80ac 	bls.w	8011bf6 <__ieee754_exp+0x1f6>
 8011a9e:	4a93      	ldr	r2, [pc, #588]	; (8011cec <__ieee754_exp+0x2ec>)
 8011aa0:	4293      	cmp	r3, r2
 8011aa2:	d87c      	bhi.n	8011b9e <__ieee754_exp+0x19e>
 8011aa4:	4b92      	ldr	r3, [pc, #584]	; (8011cf0 <__ieee754_exp+0x2f0>)
 8011aa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aae:	ee10 0a10 	vmov	r0, s0
 8011ab2:	4629      	mov	r1, r5
 8011ab4:	f7ee fc10 	bl	80002d8 <__aeabi_dsub>
 8011ab8:	4b8e      	ldr	r3, [pc, #568]	; (8011cf4 <__ieee754_exp+0x2f4>)
 8011aba:	00f7      	lsls	r7, r6, #3
 8011abc:	443b      	add	r3, r7
 8011abe:	ed93 7b00 	vldr	d7, [r3]
 8011ac2:	f1c6 0a01 	rsb	sl, r6, #1
 8011ac6:	4680      	mov	r8, r0
 8011ac8:	4689      	mov	r9, r1
 8011aca:	ebaa 0a06 	sub.w	sl, sl, r6
 8011ace:	eeb0 8a47 	vmov.f32	s16, s14
 8011ad2:	eef0 8a67 	vmov.f32	s17, s15
 8011ad6:	ec53 2b18 	vmov	r2, r3, d8
 8011ada:	4640      	mov	r0, r8
 8011adc:	4649      	mov	r1, r9
 8011ade:	f7ee fbfb 	bl	80002d8 <__aeabi_dsub>
 8011ae2:	4604      	mov	r4, r0
 8011ae4:	460d      	mov	r5, r1
 8011ae6:	4622      	mov	r2, r4
 8011ae8:	462b      	mov	r3, r5
 8011aea:	4620      	mov	r0, r4
 8011aec:	4629      	mov	r1, r5
 8011aee:	f7ee fdab 	bl	8000648 <__aeabi_dmul>
 8011af2:	a369      	add	r3, pc, #420	; (adr r3, 8011c98 <__ieee754_exp+0x298>)
 8011af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af8:	4606      	mov	r6, r0
 8011afa:	460f      	mov	r7, r1
 8011afc:	f7ee fda4 	bl	8000648 <__aeabi_dmul>
 8011b00:	a367      	add	r3, pc, #412	; (adr r3, 8011ca0 <__ieee754_exp+0x2a0>)
 8011b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b06:	f7ee fbe7 	bl	80002d8 <__aeabi_dsub>
 8011b0a:	4632      	mov	r2, r6
 8011b0c:	463b      	mov	r3, r7
 8011b0e:	f7ee fd9b 	bl	8000648 <__aeabi_dmul>
 8011b12:	a365      	add	r3, pc, #404	; (adr r3, 8011ca8 <__ieee754_exp+0x2a8>)
 8011b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b18:	f7ee fbe0 	bl	80002dc <__adddf3>
 8011b1c:	4632      	mov	r2, r6
 8011b1e:	463b      	mov	r3, r7
 8011b20:	f7ee fd92 	bl	8000648 <__aeabi_dmul>
 8011b24:	a362      	add	r3, pc, #392	; (adr r3, 8011cb0 <__ieee754_exp+0x2b0>)
 8011b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b2a:	f7ee fbd5 	bl	80002d8 <__aeabi_dsub>
 8011b2e:	4632      	mov	r2, r6
 8011b30:	463b      	mov	r3, r7
 8011b32:	f7ee fd89 	bl	8000648 <__aeabi_dmul>
 8011b36:	a360      	add	r3, pc, #384	; (adr r3, 8011cb8 <__ieee754_exp+0x2b8>)
 8011b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b3c:	f7ee fbce 	bl	80002dc <__adddf3>
 8011b40:	4632      	mov	r2, r6
 8011b42:	463b      	mov	r3, r7
 8011b44:	f7ee fd80 	bl	8000648 <__aeabi_dmul>
 8011b48:	4602      	mov	r2, r0
 8011b4a:	460b      	mov	r3, r1
 8011b4c:	4620      	mov	r0, r4
 8011b4e:	4629      	mov	r1, r5
 8011b50:	f7ee fbc2 	bl	80002d8 <__aeabi_dsub>
 8011b54:	4602      	mov	r2, r0
 8011b56:	460b      	mov	r3, r1
 8011b58:	4606      	mov	r6, r0
 8011b5a:	460f      	mov	r7, r1
 8011b5c:	4620      	mov	r0, r4
 8011b5e:	4629      	mov	r1, r5
 8011b60:	f7ee fd72 	bl	8000648 <__aeabi_dmul>
 8011b64:	ec41 0b19 	vmov	d9, r0, r1
 8011b68:	f1ba 0f00 	cmp.w	sl, #0
 8011b6c:	d15d      	bne.n	8011c2a <__ieee754_exp+0x22a>
 8011b6e:	2200      	movs	r2, #0
 8011b70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011b74:	4630      	mov	r0, r6
 8011b76:	4639      	mov	r1, r7
 8011b78:	f7ee fbae 	bl	80002d8 <__aeabi_dsub>
 8011b7c:	4602      	mov	r2, r0
 8011b7e:	460b      	mov	r3, r1
 8011b80:	ec51 0b19 	vmov	r0, r1, d9
 8011b84:	f7ee fe8a 	bl	800089c <__aeabi_ddiv>
 8011b88:	4622      	mov	r2, r4
 8011b8a:	462b      	mov	r3, r5
 8011b8c:	f7ee fba4 	bl	80002d8 <__aeabi_dsub>
 8011b90:	4602      	mov	r2, r0
 8011b92:	460b      	mov	r3, r1
 8011b94:	2000      	movs	r0, #0
 8011b96:	4958      	ldr	r1, [pc, #352]	; (8011cf8 <__ieee754_exp+0x2f8>)
 8011b98:	f7ee fb9e 	bl	80002d8 <__aeabi_dsub>
 8011b9c:	e74d      	b.n	8011a3a <__ieee754_exp+0x3a>
 8011b9e:	4857      	ldr	r0, [pc, #348]	; (8011cfc <__ieee754_exp+0x2fc>)
 8011ba0:	a347      	add	r3, pc, #284	; (adr r3, 8011cc0 <__ieee754_exp+0x2c0>)
 8011ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ba6:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8011baa:	4629      	mov	r1, r5
 8011bac:	4620      	mov	r0, r4
 8011bae:	f7ee fd4b 	bl	8000648 <__aeabi_dmul>
 8011bb2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011bb6:	f7ee fb91 	bl	80002dc <__adddf3>
 8011bba:	f7ee fff5 	bl	8000ba8 <__aeabi_d2iz>
 8011bbe:	4682      	mov	sl, r0
 8011bc0:	f7ee fcd8 	bl	8000574 <__aeabi_i2d>
 8011bc4:	a340      	add	r3, pc, #256	; (adr r3, 8011cc8 <__ieee754_exp+0x2c8>)
 8011bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bca:	4606      	mov	r6, r0
 8011bcc:	460f      	mov	r7, r1
 8011bce:	f7ee fd3b 	bl	8000648 <__aeabi_dmul>
 8011bd2:	4602      	mov	r2, r0
 8011bd4:	460b      	mov	r3, r1
 8011bd6:	4620      	mov	r0, r4
 8011bd8:	4629      	mov	r1, r5
 8011bda:	f7ee fb7d 	bl	80002d8 <__aeabi_dsub>
 8011bde:	a33c      	add	r3, pc, #240	; (adr r3, 8011cd0 <__ieee754_exp+0x2d0>)
 8011be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011be4:	4680      	mov	r8, r0
 8011be6:	4689      	mov	r9, r1
 8011be8:	4630      	mov	r0, r6
 8011bea:	4639      	mov	r1, r7
 8011bec:	f7ee fd2c 	bl	8000648 <__aeabi_dmul>
 8011bf0:	ec41 0b18 	vmov	d8, r0, r1
 8011bf4:	e76f      	b.n	8011ad6 <__ieee754_exp+0xd6>
 8011bf6:	4a42      	ldr	r2, [pc, #264]	; (8011d00 <__ieee754_exp+0x300>)
 8011bf8:	4293      	cmp	r3, r2
 8011bfa:	d811      	bhi.n	8011c20 <__ieee754_exp+0x220>
 8011bfc:	a336      	add	r3, pc, #216	; (adr r3, 8011cd8 <__ieee754_exp+0x2d8>)
 8011bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c02:	ee10 0a10 	vmov	r0, s0
 8011c06:	4629      	mov	r1, r5
 8011c08:	f7ee fb68 	bl	80002dc <__adddf3>
 8011c0c:	4b3a      	ldr	r3, [pc, #232]	; (8011cf8 <__ieee754_exp+0x2f8>)
 8011c0e:	2200      	movs	r2, #0
 8011c10:	f7ee ffaa 	bl	8000b68 <__aeabi_dcmpgt>
 8011c14:	b138      	cbz	r0, 8011c26 <__ieee754_exp+0x226>
 8011c16:	4b38      	ldr	r3, [pc, #224]	; (8011cf8 <__ieee754_exp+0x2f8>)
 8011c18:	2200      	movs	r2, #0
 8011c1a:	4620      	mov	r0, r4
 8011c1c:	4629      	mov	r1, r5
 8011c1e:	e70a      	b.n	8011a36 <__ieee754_exp+0x36>
 8011c20:	f04f 0a00 	mov.w	sl, #0
 8011c24:	e75f      	b.n	8011ae6 <__ieee754_exp+0xe6>
 8011c26:	4682      	mov	sl, r0
 8011c28:	e75d      	b.n	8011ae6 <__ieee754_exp+0xe6>
 8011c2a:	4632      	mov	r2, r6
 8011c2c:	463b      	mov	r3, r7
 8011c2e:	2000      	movs	r0, #0
 8011c30:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8011c34:	f7ee fb50 	bl	80002d8 <__aeabi_dsub>
 8011c38:	4602      	mov	r2, r0
 8011c3a:	460b      	mov	r3, r1
 8011c3c:	ec51 0b19 	vmov	r0, r1, d9
 8011c40:	f7ee fe2c 	bl	800089c <__aeabi_ddiv>
 8011c44:	4602      	mov	r2, r0
 8011c46:	460b      	mov	r3, r1
 8011c48:	ec51 0b18 	vmov	r0, r1, d8
 8011c4c:	f7ee fb44 	bl	80002d8 <__aeabi_dsub>
 8011c50:	4642      	mov	r2, r8
 8011c52:	464b      	mov	r3, r9
 8011c54:	f7ee fb40 	bl	80002d8 <__aeabi_dsub>
 8011c58:	4602      	mov	r2, r0
 8011c5a:	460b      	mov	r3, r1
 8011c5c:	2000      	movs	r0, #0
 8011c5e:	4926      	ldr	r1, [pc, #152]	; (8011cf8 <__ieee754_exp+0x2f8>)
 8011c60:	f7ee fb3a 	bl	80002d8 <__aeabi_dsub>
 8011c64:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8011c68:	4592      	cmp	sl, r2
 8011c6a:	db02      	blt.n	8011c72 <__ieee754_exp+0x272>
 8011c6c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8011c70:	e6e3      	b.n	8011a3a <__ieee754_exp+0x3a>
 8011c72:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8011c76:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8011c80:	f7ee fce2 	bl	8000648 <__aeabi_dmul>
 8011c84:	e6d9      	b.n	8011a3a <__ieee754_exp+0x3a>
 8011c86:	bf00      	nop
 8011c88:	fefa39ef 	.word	0xfefa39ef
 8011c8c:	40862e42 	.word	0x40862e42
 8011c90:	d52d3051 	.word	0xd52d3051
 8011c94:	c0874910 	.word	0xc0874910
 8011c98:	72bea4d0 	.word	0x72bea4d0
 8011c9c:	3e663769 	.word	0x3e663769
 8011ca0:	c5d26bf1 	.word	0xc5d26bf1
 8011ca4:	3ebbbd41 	.word	0x3ebbbd41
 8011ca8:	af25de2c 	.word	0xaf25de2c
 8011cac:	3f11566a 	.word	0x3f11566a
 8011cb0:	16bebd93 	.word	0x16bebd93
 8011cb4:	3f66c16c 	.word	0x3f66c16c
 8011cb8:	5555553e 	.word	0x5555553e
 8011cbc:	3fc55555 	.word	0x3fc55555
 8011cc0:	652b82fe 	.word	0x652b82fe
 8011cc4:	3ff71547 	.word	0x3ff71547
 8011cc8:	fee00000 	.word	0xfee00000
 8011ccc:	3fe62e42 	.word	0x3fe62e42
 8011cd0:	35793c76 	.word	0x35793c76
 8011cd4:	3dea39ef 	.word	0x3dea39ef
 8011cd8:	8800759c 	.word	0x8800759c
 8011cdc:	7e37e43c 	.word	0x7e37e43c
 8011ce0:	40862e41 	.word	0x40862e41
 8011ce4:	7fefffff 	.word	0x7fefffff
 8011ce8:	3fd62e42 	.word	0x3fd62e42
 8011cec:	3ff0a2b1 	.word	0x3ff0a2b1
 8011cf0:	08013330 	.word	0x08013330
 8011cf4:	08013340 	.word	0x08013340
 8011cf8:	3ff00000 	.word	0x3ff00000
 8011cfc:	08013320 	.word	0x08013320
 8011d00:	3defffff 	.word	0x3defffff

08011d04 <__ieee754_fmodf>:
 8011d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d06:	ee10 5a90 	vmov	r5, s1
 8011d0a:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 8011d0e:	d009      	beq.n	8011d24 <__ieee754_fmodf+0x20>
 8011d10:	ee10 2a10 	vmov	r2, s0
 8011d14:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8011d18:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011d1c:	da02      	bge.n	8011d24 <__ieee754_fmodf+0x20>
 8011d1e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8011d22:	dd04      	ble.n	8011d2e <__ieee754_fmodf+0x2a>
 8011d24:	ee60 0a20 	vmul.f32	s1, s0, s1
 8011d28:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8011d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d2e:	42a3      	cmp	r3, r4
 8011d30:	dbfc      	blt.n	8011d2c <__ieee754_fmodf+0x28>
 8011d32:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 8011d36:	d105      	bne.n	8011d44 <__ieee754_fmodf+0x40>
 8011d38:	4b32      	ldr	r3, [pc, #200]	; (8011e04 <__ieee754_fmodf+0x100>)
 8011d3a:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 8011d3e:	ed93 0a00 	vldr	s0, [r3]
 8011d42:	e7f3      	b.n	8011d2c <__ieee754_fmodf+0x28>
 8011d44:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8011d48:	d13f      	bne.n	8011dca <__ieee754_fmodf+0xc6>
 8011d4a:	0219      	lsls	r1, r3, #8
 8011d4c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8011d50:	2900      	cmp	r1, #0
 8011d52:	dc37      	bgt.n	8011dc4 <__ieee754_fmodf+0xc0>
 8011d54:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8011d58:	d13d      	bne.n	8011dd6 <__ieee754_fmodf+0xd2>
 8011d5a:	0227      	lsls	r7, r4, #8
 8011d5c:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8011d60:	2f00      	cmp	r7, #0
 8011d62:	da35      	bge.n	8011dd0 <__ieee754_fmodf+0xcc>
 8011d64:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8011d68:	bfbb      	ittet	lt
 8011d6a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8011d6e:	1a12      	sublt	r2, r2, r0
 8011d70:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8011d74:	4093      	lsllt	r3, r2
 8011d76:	bfa8      	it	ge
 8011d78:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8011d7c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8011d80:	bfb5      	itete	lt
 8011d82:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8011d86:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 8011d8a:	1a52      	sublt	r2, r2, r1
 8011d8c:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8011d90:	bfb8      	it	lt
 8011d92:	4094      	lsllt	r4, r2
 8011d94:	1a40      	subs	r0, r0, r1
 8011d96:	1b1a      	subs	r2, r3, r4
 8011d98:	bb00      	cbnz	r0, 8011ddc <__ieee754_fmodf+0xd8>
 8011d9a:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8011d9e:	bf38      	it	cc
 8011da0:	4613      	movcc	r3, r2
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d0c8      	beq.n	8011d38 <__ieee754_fmodf+0x34>
 8011da6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011daa:	db1f      	blt.n	8011dec <__ieee754_fmodf+0xe8>
 8011dac:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8011db0:	db1f      	blt.n	8011df2 <__ieee754_fmodf+0xee>
 8011db2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8011db6:	317f      	adds	r1, #127	; 0x7f
 8011db8:	4333      	orrs	r3, r6
 8011dba:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8011dbe:	ee00 3a10 	vmov	s0, r3
 8011dc2:	e7b3      	b.n	8011d2c <__ieee754_fmodf+0x28>
 8011dc4:	3801      	subs	r0, #1
 8011dc6:	0049      	lsls	r1, r1, #1
 8011dc8:	e7c2      	b.n	8011d50 <__ieee754_fmodf+0x4c>
 8011dca:	15d8      	asrs	r0, r3, #23
 8011dcc:	387f      	subs	r0, #127	; 0x7f
 8011dce:	e7c1      	b.n	8011d54 <__ieee754_fmodf+0x50>
 8011dd0:	3901      	subs	r1, #1
 8011dd2:	007f      	lsls	r7, r7, #1
 8011dd4:	e7c4      	b.n	8011d60 <__ieee754_fmodf+0x5c>
 8011dd6:	15e1      	asrs	r1, r4, #23
 8011dd8:	397f      	subs	r1, #127	; 0x7f
 8011dda:	e7c3      	b.n	8011d64 <__ieee754_fmodf+0x60>
 8011ddc:	2a00      	cmp	r2, #0
 8011dde:	da02      	bge.n	8011de6 <__ieee754_fmodf+0xe2>
 8011de0:	005b      	lsls	r3, r3, #1
 8011de2:	3801      	subs	r0, #1
 8011de4:	e7d7      	b.n	8011d96 <__ieee754_fmodf+0x92>
 8011de6:	d0a7      	beq.n	8011d38 <__ieee754_fmodf+0x34>
 8011de8:	0053      	lsls	r3, r2, #1
 8011dea:	e7fa      	b.n	8011de2 <__ieee754_fmodf+0xde>
 8011dec:	005b      	lsls	r3, r3, #1
 8011dee:	3901      	subs	r1, #1
 8011df0:	e7d9      	b.n	8011da6 <__ieee754_fmodf+0xa2>
 8011df2:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8011df6:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8011dfa:	3182      	adds	r1, #130	; 0x82
 8011dfc:	410b      	asrs	r3, r1
 8011dfe:	4333      	orrs	r3, r6
 8011e00:	e7dd      	b.n	8011dbe <__ieee754_fmodf+0xba>
 8011e02:	bf00      	nop
 8011e04:	08013350 	.word	0x08013350

08011e08 <__ieee754_sqrtf>:
 8011e08:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011e0c:	4770      	bx	lr

08011e0e <with_errno>:
 8011e0e:	b570      	push	{r4, r5, r6, lr}
 8011e10:	4604      	mov	r4, r0
 8011e12:	460d      	mov	r5, r1
 8011e14:	4616      	mov	r6, r2
 8011e16:	f7fb fb7b 	bl	800d510 <__errno>
 8011e1a:	4629      	mov	r1, r5
 8011e1c:	6006      	str	r6, [r0, #0]
 8011e1e:	4620      	mov	r0, r4
 8011e20:	bd70      	pop	{r4, r5, r6, pc}

08011e22 <xflow>:
 8011e22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e24:	4614      	mov	r4, r2
 8011e26:	461d      	mov	r5, r3
 8011e28:	b108      	cbz	r0, 8011e2e <xflow+0xc>
 8011e2a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011e2e:	e9cd 2300 	strd	r2, r3, [sp]
 8011e32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011e36:	4620      	mov	r0, r4
 8011e38:	4629      	mov	r1, r5
 8011e3a:	f7ee fc05 	bl	8000648 <__aeabi_dmul>
 8011e3e:	2222      	movs	r2, #34	; 0x22
 8011e40:	b003      	add	sp, #12
 8011e42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e46:	f7ff bfe2 	b.w	8011e0e <with_errno>

08011e4a <__math_uflow>:
 8011e4a:	b508      	push	{r3, lr}
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011e52:	f7ff ffe6 	bl	8011e22 <xflow>
 8011e56:	ec41 0b10 	vmov	d0, r0, r1
 8011e5a:	bd08      	pop	{r3, pc}

08011e5c <__math_oflow>:
 8011e5c:	b508      	push	{r3, lr}
 8011e5e:	2200      	movs	r2, #0
 8011e60:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8011e64:	f7ff ffdd 	bl	8011e22 <xflow>
 8011e68:	ec41 0b10 	vmov	d0, r0, r1
 8011e6c:	bd08      	pop	{r3, pc}

08011e6e <finite>:
 8011e6e:	b082      	sub	sp, #8
 8011e70:	ed8d 0b00 	vstr	d0, [sp]
 8011e74:	9801      	ldr	r0, [sp, #4]
 8011e76:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011e7a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011e7e:	0fc0      	lsrs	r0, r0, #31
 8011e80:	b002      	add	sp, #8
 8011e82:	4770      	bx	lr

08011e84 <_init>:
 8011e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e86:	bf00      	nop
 8011e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e8a:	bc08      	pop	{r3}
 8011e8c:	469e      	mov	lr, r3
 8011e8e:	4770      	bx	lr

08011e90 <_fini>:
 8011e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e92:	bf00      	nop
 8011e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e96:	bc08      	pop	{r3}
 8011e98:	469e      	mov	lr, r3
 8011e9a:	4770      	bx	lr
