
G431B_ESC_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d78  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  08008f58  08008f58  00018f58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093cc  080093cc  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  080093cc  080093cc  000193cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093d4  080093d4  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093d4  080093d4  000193d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093d8  080093d8  000193d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080093dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  200001fc  080095d8  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000864  080095d8  00020864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174f5  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003320  00000000  00000000  00037721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  0003aa48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  0003bd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020337  00000000  00000000  0003cec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000154f0  00000000  00000000  0005d1f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c77f2  00000000  00000000  000726e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00139ed9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ef0  00000000  00000000  00139f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008f40 	.word	0x08008f40

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	08008f40 	.word	0x08008f40

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <eeprom_restore>:
{
	return *(uint32_t*)(start_address)==0xFFFFFFFF;
}

HAL_StatusTypeDef eeprom_restore(float * regs, uint32_t size)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
	uint64_t data = 0xDEADBEEF;
 8000efa:	a31d      	add	r3, pc, #116	; (adr r3, 8000f70 <eeprom_restore+0x80>)
 8000efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f00:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(uint32_t index=0; index<size;index++) // 64 bits
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	e023      	b.n	8000f52 <eeprom_restore+0x62>
	{

		memcpy(&data, start_address+64*index, sizeof(uint64_t));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	019b      	lsls	r3, r3, #6
 8000f0e:	4a16      	ldr	r2, [pc, #88]	; (8000f68 <eeprom_restore+0x78>)
 8000f10:	4413      	add	r3, r2
 8000f12:	4619      	mov	r1, r3
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	2208      	movs	r2, #8
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f005 faa8 	bl	8006470 <memcpy>
		uint32_t temp = data & 0xFFFFFFFF;
 8000f20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f24:	4613      	mov	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
		float value;
		memcpy(&value,&temp,sizeof(uint32_t));
 8000f2a:	60bb      	str	r3, [r7, #8]
		printf("Load %i %f\r\n",index, value);
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fb32 	bl	8000598 <__aeabi_f2d>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	69f9      	ldr	r1, [r7, #28]
 8000f3a:	480c      	ldr	r0, [pc, #48]	; (8000f6c <eeprom_restore+0x7c>)
 8000f3c:	f005 ff18 	bl	8006d70 <iprintf>
		regs[index] = value;
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	4413      	add	r3, r2
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	601a      	str	r2, [r3, #0]
	for(uint32_t index=0; index<size;index++) // 64 bits
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	69fa      	ldr	r2, [r7, #28]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d3d7      	bcc.n	8000f0a <eeprom_restore+0x1a>
//	printf("Beans\r\n");
//	for(uint32_t index=0; index<size;index+=2) // 64 bits
//	{
//		printf("Loaded %d %f %f\r\n",index, regs[index], regs[index+1]);
//	}
	return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3720      	adds	r7, #32
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	f3af 8000 	nop.w
 8000f68:	0801f800 	.word	0x0801f800
 8000f6c:	08008f58 	.word	0x08008f58
 8000f70:	deadbeef 	.word	0xdeadbeef
 8000f74:	00000000 	.word	0x00000000

08000f78 <eeprom_store>:

HAL_StatusTypeDef eeprom_store(float const * regs, uint32_t size)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b08f      	sub	sp, #60	; 0x3c
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8000f82:	f001 f831 	bl	8001fe8 <HAL_FLASH_Unlock>
	// erase the last page of bank1 (STM32G43x : 1 bank, 64 pages, 2kB per page, 64-bit data)
	{
		FLASH_EraseInitTypeDef erase =
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	233f      	movs	r3, #63	; 0x3f
 8000f90:	61bb      	str	r3, [r7, #24]
 8000f92:	2301      	movs	r3, #1
 8000f94:	61fb      	str	r3, [r7, #28]
				FLASH_TYPEERASE_PAGES,
				FLASH_BANK_1,
				page_nb,
				1
			};
		uint32_t page_error = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
		HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&erase, &page_error);
 8000f9a:	f107 020c 	add.w	r2, r7, #12
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f001 f917 	bl	80021d8 <HAL_FLASHEx_Erase>
 8000faa:	4603      	mov	r3, r0
 8000fac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if(result!=HAL_OK)
 8000fb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d004      	beq.n	8000fc2 <eeprom_store+0x4a>
		{
			HAL_FLASH_Lock();
 8000fb8:	f001 f838 	bl	800202c <HAL_FLASH_Lock>
			return result;
 8000fbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fc0:	e056      	b.n	8001070 <eeprom_store+0xf8>
		}
	}
	// write the last page
	{
		uint64_t data = 0xDEADBEEF;
 8000fc2:	a331      	add	r3, pc, #196	; (adr r3, 8001088 <eeprom_store+0x110>)
 8000fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		for(uint32_t index=0; index<size;index++) // 64 bits
 8000fcc:	2300      	movs	r3, #0
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
 8000fd0:	e044      	b.n	800105c <eeprom_store+0xe4>
		{
			printf("Write %d %f\r\n",(int)index, regs[index]);
 8000fd2:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8000fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	4413      	add	r3, r2
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fada 	bl	8000598 <__aeabi_f2d>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4621      	mov	r1, r4
 8000fea:	4823      	ldr	r0, [pc, #140]	; (8001078 <eeprom_store+0x100>)
 8000fec:	f005 fec0 	bl	8006d70 <iprintf>
			uint32_t temp;
			memcpy(&temp,&regs[index],sizeof(uint64_t));
 8000ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	18d1      	adds	r1, r2, r3
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	2208      	movs	r2, #8
 8000ffe:	4618      	mov	r0, r3
 8001000:	f005 fa36 	bl	8006470 <memcpy>
			data = temp;
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	461a      	mov	r2, r3
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			HAL_StatusTypeDef result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,start_address+index*64,data);
 8001010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001012:	019b      	lsls	r3, r3, #6
 8001014:	4a19      	ldr	r2, [pc, #100]	; (800107c <eeprom_store+0x104>)
 8001016:	1899      	adds	r1, r3, r2
 8001018:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800101c:	2000      	movs	r0, #0
 800101e:	f000 ff8d 	bl	8001f3c <HAL_FLASH_Program>
 8001022:	4603      	mov	r3, r0
 8001024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if(result!=HAL_OK)
 8001028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800102c:	2b00      	cmp	r3, #0
 800102e:	d012      	beq.n	8001056 <eeprom_store+0xde>
			{
				printf("Error\r\n");
 8001030:	4813      	ldr	r0, [pc, #76]	; (8001080 <eeprom_store+0x108>)
 8001032:	f005 ff23 	bl	8006e7c <puts>
				uint32_t error = HAL_FLASH_GetError();
 8001036:	f001 f813 	bl	8002060 <HAL_FLASH_GetError>
 800103a:	6238      	str	r0, [r7, #32]
				if(error)
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d004      	beq.n	800104c <eeprom_store+0xd4>
				{
					HAL_FLASH_Lock();
 8001042:	f000 fff3 	bl	800202c <HAL_FLASH_Lock>
					return error;
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	e011      	b.n	8001070 <eeprom_store+0xf8>
				}
				HAL_FLASH_Lock();
 800104c:	f000 ffee 	bl	800202c <HAL_FLASH_Lock>
				return result;
 8001050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001054:	e00c      	b.n	8001070 <eeprom_store+0xf8>
		for(uint32_t index=0; index<size;index++) // 64 bits
 8001056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001058:	3301      	adds	r3, #1
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
 800105c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	d3b6      	bcc.n	8000fd2 <eeprom_store+0x5a>
			}
		}
		printf("Done Writing\r\n");
 8001064:	4807      	ldr	r0, [pc, #28]	; (8001084 <eeprom_store+0x10c>)
 8001066:	f005 ff09 	bl	8006e7c <puts>
	}
	HAL_FLASH_Lock();
 800106a:	f000 ffdf 	bl	800202c <HAL_FLASH_Lock>
	return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	373c      	adds	r7, #60	; 0x3c
 8001074:	46bd      	mov	sp, r7
 8001076:	bd90      	pop	{r4, r7, pc}
 8001078:	08008f68 	.word	0x08008f68
 800107c:	0801f800 	.word	0x0801f800
 8001080:	08008f78 	.word	0x08008f78
 8001084:	08008f80 	.word	0x08008f80
 8001088:	deadbeef 	.word	0xdeadbeef
 800108c:	00000000 	.word	0x00000000

08001090 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <MX_GPIO_Init+0x74>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a1a      	ldr	r2, [pc, #104]	; (8001104 <MX_GPIO_Init+0x74>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MX_GPIO_Init+0x74>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_GPIO_Init+0x74>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	4a14      	ldr	r2, [pc, #80]	; (8001104 <MX_GPIO_Init+0x74>)
 80010b4:	f043 0320 	orr.w	r3, r3, #32
 80010b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_GPIO_Init+0x74>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	f003 0320 	and.w	r3, r3, #32
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_GPIO_Init+0x74>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <MX_GPIO_Init+0x74>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_GPIO_Init+0x74>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_GPIO_Init+0x74>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	4a08      	ldr	r2, [pc, #32]	; (8001104 <MX_GPIO_Init+0x74>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_GPIO_Init+0x74>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]

}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000

08001108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110c:	f000 fcb3 	bl	8001a76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001110:	f000 f824 	bl	800115c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(100);
 8001114:	2064      	movs	r0, #100	; 0x64
 8001116:	f000 fd1f 	bl	8001b58 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111a:	f7ff ffb9 	bl	8001090 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800111e:	f000 fbb1 	bl	8001884 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001122:	f000 f9e9 	bl	80014f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001126:	f000 fab1 	bl	800168c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 800112a:	2201      	movs	r2, #1
 800112c:	4907      	ldr	r1, [pc, #28]	; (800114c <main+0x44>)
 800112e:	4808      	ldr	r0, [pc, #32]	; (8001150 <main+0x48>)
 8001130:	f003 fdb0 	bl	8004c94 <HAL_UART_Receive_IT>
  printf("Beans\r\n");
 8001134:	4807      	ldr	r0, [pc, #28]	; (8001154 <main+0x4c>)
 8001136:	f005 fea1 	bl	8006e7c <puts>
  load_eeprom_regs();
 800113a:	f000 fc69 	bl	8001a10 <load_eeprom_regs>
//  V_MIN = 18.0f;
//  V_MAX = 19.0f;
//  KP_MAX = 20.0f;
//  KD_MAX = 21.0f;
//  store_eeprom_regs();
  printf("Finished\r\n");
 800113e:	4806      	ldr	r0, [pc, #24]	; (8001158 <main+0x50>)
 8001140:	f005 fe9c 	bl	8006e7c <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	printf("Beans %.3f\r\n",3.14f);
	HAL_Delay(100);
 8001144:	2064      	movs	r0, #100	; 0x64
 8001146:	f000 fd07 	bl	8001b58 <HAL_Delay>
 800114a:	e7fb      	b.n	8001144 <main+0x3c>
 800114c:	20000224 	.word	0x20000224
 8001150:	200007c0 	.word	0x200007c0
 8001154:	08008f90 	.word	0x08008f90
 8001158:	08008f98 	.word	0x08008f98

0800115c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0a4      	sub	sp, #144	; 0x90
 8001160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001162:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001166:	2238      	movs	r2, #56	; 0x38
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f005 f98e 	bl	800648c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001170:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001180:	463b      	mov	r3, r7
 8001182:	2244      	movs	r2, #68	; 0x44
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f005 f980 	bl	800648c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800118c:	2000      	movs	r0, #0
 800118e:	f001 fac9 	bl	8002724 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001192:	2301      	movs	r3, #1
 8001194:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001196:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800119a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119c:	2302      	movs	r3, #2
 800119e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a0:	2303      	movs	r3, #3
 80011a2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80011a8:	2354      	movs	r3, #84	; 0x54
 80011aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ae:	2302      	movs	r3, #2
 80011b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011b4:	2302      	movs	r3, #2
 80011b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 fb61 	bl	800288c <HAL_RCC_OscConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80011d0:	f000 f828 	bl	8001224 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d4:	230f      	movs	r3, #15
 80011d6:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d8:	2303      	movs	r3, #3
 80011da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011e0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80011e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ea:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011f0:	2104      	movs	r1, #4
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 fe62 	bl	8002ebc <HAL_RCC_ClockConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011fe:	f000 f811 	bl	8001224 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001202:	2302      	movs	r3, #2
 8001204:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800120a:	463b      	mov	r3, r7
 800120c:	4618      	mov	r0, r3
 800120e:	f002 f871 	bl	80032f4 <HAL_RCCEx_PeriphCLKConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001218:	f000 f804 	bl	8001224 <Error_Handler>
  }
}
 800121c:	bf00      	nop
 800121e:	3790      	adds	r7, #144	; 0x90
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001228:	b672      	cpsid	i
}
 800122a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800122c:	e7fe      	b.n	800122c <Error_Handler+0x8>
	...

08001230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <HAL_MspInit+0x44>)
 8001238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123a:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <HAL_MspInit+0x44>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6613      	str	r3, [r2, #96]	; 0x60
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_MspInit+0x44>)
 8001244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_MspInit+0x44>)
 8001250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001252:	4a08      	ldr	r2, [pc, #32]	; (8001274 <HAL_MspInit+0x44>)
 8001254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001258:	6593      	str	r3, [r2, #88]	; 0x58
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_MspInit+0x44>)
 800125c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001266:	f001 fb01 	bl	800286c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000

08001278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800127c:	e7fe      	b.n	800127c <NMI_Handler+0x4>

0800127e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <MemManage_Handler+0x4>

0800128a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <BusFault_Handler+0x4>

08001290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <UsageFault_Handler+0x4>

08001296 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c4:	f000 fc2a 	bl	8001b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012d0:	4802      	ldr	r0, [pc, #8]	; (80012dc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80012d2:	f002 fab7 	bl	8003844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000728 	.word	0x20000728

080012e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012e6:	4813      	ldr	r0, [pc, #76]	; (8001334 <USART2_IRQHandler+0x54>)
 80012e8:	f003 fd1a 	bl	8004d20 <HAL_UART_IRQHandler>

  char c = Serial2RxBuffer[0];
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <USART2_IRQHandler+0x58>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	71fb      	strb	r3, [r7, #7]
//  update_fsm(&state, c);
  printf("%c\r\n",c);
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	4619      	mov	r1, r3
 80012f6:	4811      	ldr	r0, [pc, #68]	; (800133c <USART2_IRQHandler+0x5c>)
 80012f8:	f005 fd3a 	bl	8006d70 <iprintf>
  if(c=='r'){
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	2b72      	cmp	r3, #114	; 0x72
 8001300:	d102      	bne.n	8001308 <USART2_IRQHandler+0x28>
	  load_eeprom_regs();
 8001302:	f000 fb85 	bl	8001a10 <load_eeprom_regs>
 8001306:	e00e      	b.n	8001326 <USART2_IRQHandler+0x46>
  }
  else if(c=='m'){
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	2b6d      	cmp	r3, #109	; 0x6d
 800130c:	d105      	bne.n	800131a <USART2_IRQHandler+0x3a>
	  I_BW = 7.0f;
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <USART2_IRQHandler+0x60>)
 8001310:	4a0c      	ldr	r2, [pc, #48]	; (8001344 <USART2_IRQHandler+0x64>)
 8001312:	609a      	str	r2, [r3, #8]
	  store_eeprom_regs();
 8001314:	f000 fb72 	bl	80019fc <store_eeprom_regs>
 8001318:	e005      	b.n	8001326 <USART2_IRQHandler+0x46>
  }
  else{
	  I_BW = 2.0f;
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <USART2_IRQHandler+0x60>)
 800131c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001320:	609a      	str	r2, [r3, #8]
	  store_eeprom_regs();
 8001322:	f000 fb6b 	bl	80019fc <store_eeprom_regs>
  }



  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001326:	4803      	ldr	r0, [pc, #12]	; (8001334 <USART2_IRQHandler+0x54>)
 8001328:	f003 fcfa 	bl	8004d20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200007c0 	.word	0x200007c0
 8001338:	20000224 	.word	0x20000224
 800133c:	08008fa4 	.word	0x08008fa4
 8001340:	20000228 	.word	0x20000228
 8001344:	40e00000 	.word	0x40e00000

08001348 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
	return 1;
 800134c:	2301      	movs	r3, #1
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <_kill>:

int _kill(int pid, int sig)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001362:	f005 f85b 	bl	800641c <__errno>
 8001366:	4603      	mov	r3, r0
 8001368:	2216      	movs	r2, #22
 800136a:	601a      	str	r2, [r3, #0]
	return -1;
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <_exit>:

void _exit (int status)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001380:	f04f 31ff 	mov.w	r1, #4294967295
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ffe7 	bl	8001358 <_kill>
	while (1) {}		/* Make sure we hang here */
 800138a:	e7fe      	b.n	800138a <_exit+0x12>

0800138c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	e00a      	b.n	80013b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800139e:	f3af 8000 	nop.w
 80013a2:	4601      	mov	r1, r0
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	60ba      	str	r2, [r7, #8]
 80013aa:	b2ca      	uxtb	r2, r1
 80013ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	dbf0      	blt.n	800139e <_read+0x12>
	}

return len;
 80013bc:	687b      	ldr	r3, [r7, #4]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	e009      	b.n	80013ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	60ba      	str	r2, [r7, #8]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 fae7 	bl	80019b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	dbf1      	blt.n	80013d8 <_write+0x12>
	}
	return len;
 80013f4:	687b      	ldr	r3, [r7, #4]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <_close>:

int _close(int file)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
	return -1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001426:	605a      	str	r2, [r3, #4]
	return 0;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <_isatty>:

int _isatty(int file)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
	return 1;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
	return 0;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001470:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <_sbrk+0x5c>)
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <_sbrk+0x60>)
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <_sbrk+0x64>)
 8001486:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <_sbrk+0x68>)
 8001488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	429a      	cmp	r2, r3
 8001496:	d207      	bcs.n	80014a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001498:	f004 ffc0 	bl	800641c <__errno>
 800149c:	4603      	mov	r3, r0
 800149e:	220c      	movs	r2, #12
 80014a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
 80014a6:	e009      	b.n	80014bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a05      	ldr	r2, [pc, #20]	; (80014cc <_sbrk+0x64>)
 80014b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ba:	68fb      	ldr	r3, [r7, #12]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20008000 	.word	0x20008000
 80014c8:	00000400 	.word	0x00000400
 80014cc:	20000218 	.word	0x20000218
 80014d0:	20000868 	.word	0x20000868

080014d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <SystemInit+0x20>)
 80014da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014de:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <SystemInit+0x20>)
 80014e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b09c      	sub	sp, #112	; 0x70
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001518:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
 8001528:	615a      	str	r2, [r3, #20]
 800152a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	2234      	movs	r2, #52	; 0x34
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f004 ffaa 	bl	800648c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001538:	4b52      	ldr	r3, [pc, #328]	; (8001684 <MX_TIM1_Init+0x18c>)
 800153a:	4a53      	ldr	r2, [pc, #332]	; (8001688 <MX_TIM1_Init+0x190>)
 800153c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800153e:	4b51      	ldr	r3, [pc, #324]	; (8001684 <MX_TIM1_Init+0x18c>)
 8001540:	2200      	movs	r2, #0
 8001542:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001544:	4b4f      	ldr	r3, [pc, #316]	; (8001684 <MX_TIM1_Init+0x18c>)
 8001546:	2220      	movs	r2, #32
 8001548:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4200;
 800154a:	4b4e      	ldr	r3, [pc, #312]	; (8001684 <MX_TIM1_Init+0x18c>)
 800154c:	f241 0268 	movw	r2, #4200	; 0x1068
 8001550:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001552:	4b4c      	ldr	r3, [pc, #304]	; (8001684 <MX_TIM1_Init+0x18c>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001558:	4b4a      	ldr	r3, [pc, #296]	; (8001684 <MX_TIM1_Init+0x18c>)
 800155a:	2201      	movs	r2, #1
 800155c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800155e:	4b49      	ldr	r3, [pc, #292]	; (8001684 <MX_TIM1_Init+0x18c>)
 8001560:	2280      	movs	r2, #128	; 0x80
 8001562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001564:	4847      	ldr	r0, [pc, #284]	; (8001684 <MX_TIM1_Init+0x18c>)
 8001566:	f002 f8b5 	bl	80036d4 <HAL_TIM_Base_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001570:	f7ff fe58 	bl	8001224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001578:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800157a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800157e:	4619      	mov	r1, r3
 8001580:	4840      	ldr	r0, [pc, #256]	; (8001684 <MX_TIM1_Init+0x18c>)
 8001582:	f002 fbef 	bl	8003d64 <HAL_TIM_ConfigClockSource>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800158c:	f7ff fe4a 	bl	8001224 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001590:	483c      	ldr	r0, [pc, #240]	; (8001684 <MX_TIM1_Init+0x18c>)
 8001592:	f002 f8f6 	bl	8003782 <HAL_TIM_PWM_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800159c:	f7ff fe42 	bl	8001224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a0:	2300      	movs	r3, #0
 80015a2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015b0:	4619      	mov	r1, r3
 80015b2:	4834      	ldr	r0, [pc, #208]	; (8001684 <MX_TIM1_Init+0x18c>)
 80015b4:	f003 f920 	bl	80047f8 <HAL_TIMEx_MasterConfigSynchronization>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80015be:	f7ff fe31 	bl	8001224 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80015c2:	2370      	movs	r3, #112	; 0x70
 80015c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ca:	2300      	movs	r3, #0
 80015cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015ce:	2300      	movs	r3, #0
 80015d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80015d2:	2304      	movs	r3, #4
 80015d4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015e2:	2200      	movs	r2, #0
 80015e4:	4619      	mov	r1, r3
 80015e6:	4827      	ldr	r0, [pc, #156]	; (8001684 <MX_TIM1_Init+0x18c>)
 80015e8:	f002 faac 	bl	8003b44 <HAL_TIM_PWM_ConfigChannel>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80015f2:	f7ff fe17 	bl	8001224 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015fa:	2204      	movs	r2, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4821      	ldr	r0, [pc, #132]	; (8001684 <MX_TIM1_Init+0x18c>)
 8001600:	f002 faa0 	bl	8003b44 <HAL_TIM_PWM_ConfigChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800160a:	f7ff fe0b 	bl	8001224 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800160e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001612:	2208      	movs	r2, #8
 8001614:	4619      	mov	r1, r3
 8001616:	481b      	ldr	r0, [pc, #108]	; (8001684 <MX_TIM1_Init+0x18c>)
 8001618:	f002 fa94 	bl	8003b44 <HAL_TIM_PWM_ConfigChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001622:	f7ff fdff 	bl	8001224 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001626:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800162a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800162c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001630:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 8001636:	2332      	movs	r3, #50	; 0x32
 8001638:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800163e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001642:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001650:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800165a:	2300      	movs	r3, #0
 800165c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	4619      	mov	r1, r3
 8001666:	4807      	ldr	r0, [pc, #28]	; (8001684 <MX_TIM1_Init+0x18c>)
 8001668:	f003 f948 	bl	80048fc <HAL_TIMEx_ConfigBreakDeadTime>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM1_Init+0x17e>
  {
    Error_Handler();
 8001672:	f7ff fdd7 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001676:	4803      	ldr	r0, [pc, #12]	; (8001684 <MX_TIM1_Init+0x18c>)
 8001678:	f000 f88e 	bl	8001798 <HAL_TIM_MspPostInit>

}
 800167c:	bf00      	nop
 800167e:	3770      	adds	r7, #112	; 0x70
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000728 	.word	0x20000728
 8001688:	40012c00 	.word	0x40012c00

0800168c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001692:	f107 0310 	add.w	r3, r7, #16
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016aa:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <MX_TIM2_Init+0x98>)
 80016ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016b2:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <MX_TIM2_Init+0x98>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <MX_TIM2_Init+0x98>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80016be:	4b19      	ldr	r3, [pc, #100]	; (8001724 <MX_TIM2_Init+0x98>)
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295
 80016c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c6:	4b17      	ldr	r3, [pc, #92]	; (8001724 <MX_TIM2_Init+0x98>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016cc:	4b15      	ldr	r3, [pc, #84]	; (8001724 <MX_TIM2_Init+0x98>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016d2:	4814      	ldr	r0, [pc, #80]	; (8001724 <MX_TIM2_Init+0x98>)
 80016d4:	f001 fffe 	bl	80036d4 <HAL_TIM_Base_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016de:	f7ff fda1 	bl	8001224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	4619      	mov	r1, r3
 80016ee:	480d      	ldr	r0, [pc, #52]	; (8001724 <MX_TIM2_Init+0x98>)
 80016f0:	f002 fb38 	bl	8003d64 <HAL_TIM_ConfigClockSource>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016fa:	f7ff fd93 	bl	8001224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	4619      	mov	r1, r3
 800170a:	4806      	ldr	r0, [pc, #24]	; (8001724 <MX_TIM2_Init+0x98>)
 800170c:	f003 f874 	bl	80047f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001716:	f7ff fd85 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	3720      	adds	r7, #32
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000774 	.word	0x20000774

08001728 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a16      	ldr	r2, [pc, #88]	; (8001790 <HAL_TIM_Base_MspInit+0x68>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d114      	bne.n	8001764 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_TIM_Base_MspInit+0x6c>)
 800173c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173e:	4a15      	ldr	r2, [pc, #84]	; (8001794 <HAL_TIM_Base_MspInit+0x6c>)
 8001740:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001744:	6613      	str	r3, [r2, #96]	; 0x60
 8001746:	4b13      	ldr	r3, [pc, #76]	; (8001794 <HAL_TIM_Base_MspInit+0x6c>)
 8001748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	2019      	movs	r0, #25
 8001758:	f000 fafb 	bl	8001d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800175c:	2019      	movs	r0, #25
 800175e:	f000 fb12 	bl	8001d86 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001762:	e010      	b.n	8001786 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800176c:	d10b      	bne.n	8001786 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_TIM_Base_MspInit+0x6c>)
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001772:	4a08      	ldr	r2, [pc, #32]	; (8001794 <HAL_TIM_Base_MspInit+0x6c>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6593      	str	r3, [r2, #88]	; 0x58
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_TIM_Base_MspInit+0x6c>)
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40012c00 	.word	0x40012c00
 8001794:	40021000 	.word	0x40021000

08001798 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	; 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a2f      	ldr	r2, [pc, #188]	; (8001874 <HAL_TIM_MspPostInit+0xdc>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d157      	bne.n	800186a <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ba:	4b2f      	ldr	r3, [pc, #188]	; (8001878 <HAL_TIM_MspPostInit+0xe0>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	4a2e      	ldr	r2, [pc, #184]	; (8001878 <HAL_TIM_MspPostInit+0xe0>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c6:	4b2c      	ldr	r3, [pc, #176]	; (8001878 <HAL_TIM_MspPostInit+0xe0>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	4b29      	ldr	r3, [pc, #164]	; (8001878 <HAL_TIM_MspPostInit+0xe0>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	4a28      	ldr	r2, [pc, #160]	; (8001878 <HAL_TIM_MspPostInit+0xe0>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017de:	4b26      	ldr	r3, [pc, #152]	; (8001878 <HAL_TIM_MspPostInit+0xe0>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <HAL_TIM_MspPostInit+0xe0>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	4a22      	ldr	r2, [pc, #136]	; (8001878 <HAL_TIM_MspPostInit+0xe0>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_TIM_MspPostInit+0xe0>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001814:	2304      	movs	r3, #4
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	4619      	mov	r1, r3
 800181e:	4817      	ldr	r0, [pc, #92]	; (800187c <HAL_TIM_MspPostInit+0xe4>)
 8001820:	f000 fdfe 	bl	8002420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001824:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001836:	2304      	movs	r3, #4
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	480f      	ldr	r0, [pc, #60]	; (8001880 <HAL_TIM_MspPostInit+0xe8>)
 8001842:	f000 fded 	bl	8002420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001846:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 800184a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001858:	2306      	movs	r3, #6
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001866:	f000 fddb 	bl	8002420 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800186a:	bf00      	nop
 800186c:	3728      	adds	r7, #40	; 0x28
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40012c00 	.word	0x40012c00
 8001878:	40021000 	.word	0x40021000
 800187c:	48000800 	.word	0x48000800
 8001880:	48000400 	.word	0x48000400

08001884 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001888:	4b22      	ldr	r3, [pc, #136]	; (8001914 <MX_USART2_UART_Init+0x90>)
 800188a:	4a23      	ldr	r2, [pc, #140]	; (8001918 <MX_USART2_UART_Init+0x94>)
 800188c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800188e:	4b21      	ldr	r3, [pc, #132]	; (8001914 <MX_USART2_UART_Init+0x90>)
 8001890:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001894:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001896:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <MX_USART2_UART_Init+0x90>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800189c:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <MX_USART2_UART_Init+0x90>)
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <MX_USART2_UART_Init+0x90>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018a8:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <MX_USART2_UART_Init+0x90>)
 80018aa:	220c      	movs	r2, #12
 80018ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ae:	4b19      	ldr	r3, [pc, #100]	; (8001914 <MX_USART2_UART_Init+0x90>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <MX_USART2_UART_Init+0x90>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ba:	4b16      	ldr	r3, [pc, #88]	; (8001914 <MX_USART2_UART_Init+0x90>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <MX_USART2_UART_Init+0x90>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018c6:	4b13      	ldr	r3, [pc, #76]	; (8001914 <MX_USART2_UART_Init+0x90>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018cc:	4811      	ldr	r0, [pc, #68]	; (8001914 <MX_USART2_UART_Init+0x90>)
 80018ce:	f003 f8fb 	bl	8004ac8 <HAL_UART_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80018d8:	f7ff fca4 	bl	8001224 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018dc:	2100      	movs	r1, #0
 80018de:	480d      	ldr	r0, [pc, #52]	; (8001914 <MX_USART2_UART_Init+0x90>)
 80018e0:	f004 fcd1 	bl	8006286 <HAL_UARTEx_SetTxFifoThreshold>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80018ea:	f7ff fc9b 	bl	8001224 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ee:	2100      	movs	r1, #0
 80018f0:	4808      	ldr	r0, [pc, #32]	; (8001914 <MX_USART2_UART_Init+0x90>)
 80018f2:	f004 fd06 	bl	8006302 <HAL_UARTEx_SetRxFifoThreshold>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80018fc:	f7ff fc92 	bl	8001224 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001900:	4804      	ldr	r0, [pc, #16]	; (8001914 <MX_USART2_UART_Init+0x90>)
 8001902:	f004 fc87 	bl	8006214 <HAL_UARTEx_DisableFifoMode>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800190c:	f7ff fc8a 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	200007c0 	.word	0x200007c0
 8001918:	40004400 	.word	0x40004400

0800191c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1b      	ldr	r2, [pc, #108]	; (80019a8 <HAL_UART_MspInit+0x8c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d12f      	bne.n	800199e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800193e:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <HAL_UART_MspInit+0x90>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	4a1a      	ldr	r2, [pc, #104]	; (80019ac <HAL_UART_MspInit+0x90>)
 8001944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001948:	6593      	str	r3, [r2, #88]	; 0x58
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <HAL_UART_MspInit+0x90>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_UART_MspInit+0x90>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	4a14      	ldr	r2, [pc, #80]	; (80019ac <HAL_UART_MspInit+0x90>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_UART_MspInit+0x90>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800196e:	2318      	movs	r3, #24
 8001970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800197e:	2307      	movs	r3, #7
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	4809      	ldr	r0, [pc, #36]	; (80019b0 <HAL_UART_MspInit+0x94>)
 800198a:	f000 fd49 	bl	8002420 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	2026      	movs	r0, #38	; 0x26
 8001994:	f000 f9dd 	bl	8001d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001998:	2026      	movs	r0, #38	; 0x26
 800199a:	f000 f9f4 	bl	8001d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800199e:	bf00      	nop
 80019a0:	3728      	adds	r7, #40	; 0x28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40004400 	.word	0x40004400
 80019ac:	40021000 	.word	0x40021000
 80019b0:	48000400 	.word	0x48000400

080019b4 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 80019bc:	1d39      	adds	r1, r7, #4
 80019be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019c2:	2201      	movs	r2, #1
 80019c4:	4803      	ldr	r0, [pc, #12]	; (80019d4 <__io_putchar+0x20>)
 80019c6:	f003 f8cf 	bl	8004b68 <HAL_UART_Transmit>
return 0;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	200007c0 	.word	0x200007c0

080019d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 80019e0:	2201      	movs	r2, #1
 80019e2:	4904      	ldr	r1, [pc, #16]	; (80019f4 <HAL_UART_RxCpltCallback+0x1c>)
 80019e4:	4804      	ldr	r0, [pc, #16]	; (80019f8 <HAL_UART_RxCpltCallback+0x20>)
 80019e6:	f003 f955 	bl	8004c94 <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000224 	.word	0x20000224
 80019f8:	200007c0 	.word	0x200007c0

080019fc <store_eeprom_regs>:

#include "user_config.h"
#include "eeprom.h"

void store_eeprom_regs()
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
	eeprom_store(__float_reg, 32);
 8001a00:	2120      	movs	r1, #32
 8001a02:	4802      	ldr	r0, [pc, #8]	; (8001a0c <store_eeprom_regs+0x10>)
 8001a04:	f7ff fab8 	bl	8000f78 <eeprom_store>
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000228 	.word	0x20000228

08001a10 <load_eeprom_regs>:

void load_eeprom_regs()
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	eeprom_restore(__float_reg, 32);
 8001a14:	2120      	movs	r1, #32
 8001a16:	4802      	ldr	r0, [pc, #8]	; (8001a20 <load_eeprom_regs+0x10>)
 8001a18:	f7ff fa6a 	bl	8000ef0 <eeprom_restore>
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000228 	.word	0x20000228

08001a24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a24:	480d      	ldr	r0, [pc, #52]	; (8001a5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a26:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a28:	480d      	ldr	r0, [pc, #52]	; (8001a60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a2a:	490e      	ldr	r1, [pc, #56]	; (8001a64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a2c:	4a0e      	ldr	r2, [pc, #56]	; (8001a68 <LoopForever+0xe>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a30:	e002      	b.n	8001a38 <LoopCopyDataInit>

08001a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a36:	3304      	adds	r3, #4

08001a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a3c:	d3f9      	bcc.n	8001a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a40:	4c0b      	ldr	r4, [pc, #44]	; (8001a70 <LoopForever+0x16>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a44:	e001      	b.n	8001a4a <LoopFillZerobss>

08001a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a48:	3204      	adds	r2, #4

08001a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a4c:	d3fb      	bcc.n	8001a46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a4e:	f7ff fd41 	bl	80014d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a52:	f004 fce9 	bl	8006428 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a56:	f7ff fb57 	bl	8001108 <main>

08001a5a <LoopForever>:

LoopForever:
    b LoopForever
 8001a5a:	e7fe      	b.n	8001a5a <LoopForever>
  ldr   r0, =_estack
 8001a5c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a64:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001a68:	080093dc 	.word	0x080093dc
  ldr r2, =_sbss
 8001a6c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001a70:	20000864 	.word	0x20000864

08001a74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a74:	e7fe      	b.n	8001a74 <ADC1_2_IRQHandler>

08001a76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a80:	2003      	movs	r0, #3
 8001a82:	f000 f95b 	bl	8001d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a86:	2000      	movs	r0, #0
 8001a88:	f000 f80e 	bl	8001aa8 <HAL_InitTick>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	71fb      	strb	r3, [r7, #7]
 8001a96:	e001      	b.n	8001a9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a98:	f7ff fbca 	bl	8001230 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a9c:	79fb      	ldrb	r3, [r7, #7]

}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ab4:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <HAL_InitTick+0x68>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d022      	beq.n	8001b02 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_InitTick+0x6c>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <HAL_InitTick+0x68>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ac8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 f966 	bl	8001da2 <HAL_SYSTICK_Config>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10f      	bne.n	8001afc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b0f      	cmp	r3, #15
 8001ae0:	d809      	bhi.n	8001af6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8001aea:	f000 f932 	bl	8001d52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aee:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <HAL_InitTick+0x70>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	e007      	b.n	8001b06 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	e004      	b.n	8001b06 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
 8001b00:	e001      	b.n	8001b06 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20000008 	.word	0x20000008
 8001b14:	20000000 	.word	0x20000000
 8001b18:	20000004 	.word	0x20000004

08001b1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_IncTick+0x1c>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_IncTick+0x20>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4413      	add	r3, r2
 8001b2a:	4a03      	ldr	r2, [pc, #12]	; (8001b38 <HAL_IncTick+0x1c>)
 8001b2c:	6013      	str	r3, [r2, #0]
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	20000850 	.word	0x20000850
 8001b3c:	20000008 	.word	0x20000008

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000850 	.word	0x20000850

08001b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff ffee 	bl	8001b40 <HAL_GetTick>
 8001b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b70:	d004      	beq.n	8001b7c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_Delay+0x40>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b7c:	bf00      	nop
 8001b7e:	f7ff ffdf 	bl	8001b40 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d8f7      	bhi.n	8001b7e <HAL_Delay+0x26>
  {
  }
}
 8001b8e:	bf00      	nop
 8001b90:	bf00      	nop
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000008 	.word	0x20000008

08001b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bce:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	60d3      	str	r3, [r2, #12]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <__NVIC_GetPriorityGrouping+0x18>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	f003 0307 	and.w	r3, r3, #7
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	db0b      	blt.n	8001c2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	f003 021f 	and.w	r2, r3, #31
 8001c18:	4907      	ldr	r1, [pc, #28]	; (8001c38 <__NVIC_EnableIRQ+0x38>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	2001      	movs	r0, #1
 8001c22:	fa00 f202 	lsl.w	r2, r0, r2
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	; (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	; (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
         );
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d08:	d301      	bcc.n	8001d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00f      	b.n	8001d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <SysTick_Config+0x40>)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d16:	210f      	movs	r1, #15
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f7ff ff8e 	bl	8001c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <SysTick_Config+0x40>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d26:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <SysTick_Config+0x40>)
 8001d28:	2207      	movs	r2, #7
 8001d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	e000e010 	.word	0xe000e010

08001d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ff29 	bl	8001b9c <__NVIC_SetPriorityGrouping>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b086      	sub	sp, #24
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d60:	f7ff ff40 	bl	8001be4 <__NVIC_GetPriorityGrouping>
 8001d64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	6978      	ldr	r0, [r7, #20]
 8001d6c:	f7ff ff90 	bl	8001c90 <NVIC_EncodePriority>
 8001d70:	4602      	mov	r2, r0
 8001d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff5f 	bl	8001c3c <__NVIC_SetPriority>
}
 8001d7e:	bf00      	nop
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff33 	bl	8001c00 <__NVIC_EnableIRQ>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ffa4 	bl	8001cf8 <SysTick_Config>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b085      	sub	sp, #20
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d005      	beq.n	8001dde <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
 8001ddc:	e037      	b.n	8001e4e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 020e 	bic.w	r2, r2, #14
 8001dec:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dfc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0201 	bic.w	r2, r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f003 021f 	and.w	r2, r3, #31
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e20:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e2a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00c      	beq.n	8001e4e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e42:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e4c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d00d      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2204      	movs	r2, #4
 8001e88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	73fb      	strb	r3, [r7, #15]
 8001e9e:	e047      	b.n	8001f30 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 020e 	bic.w	r2, r2, #14
 8001eae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0201 	bic.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ece:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed4:	f003 021f 	and.w	r2, r3, #31
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	2101      	movs	r1, #1
 8001ede:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001eec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00c      	beq.n	8001f10 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f04:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f0e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	4798      	blx	r3
    }
  }
  return status;
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f4e:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <HAL_FLASH_Program+0xa4>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_FLASH_Program+0x1e>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e03e      	b.n	8001fd8 <HAL_FLASH_Program+0x9c>
 8001f5a:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <HAL_FLASH_Program+0xa4>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f64:	f000 f888 	bl	8002078 <FLASH_WaitForLastOperation>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d12e      	bne.n	8001fd0 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001f72:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <HAL_FLASH_Program+0xa4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d107      	bne.n	8001f8e <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001f7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f82:	68b8      	ldr	r0, [r7, #8]
 8001f84:	f000 f8cc 	bl	8002120 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	e010      	b.n	8001fb0 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d002      	beq.n	8001f9a <HAL_FLASH_Program+0x5e>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d10a      	bne.n	8001fb0 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	68b8      	ldr	r0, [r7, #8]
 8001fa0:	f000 f8e4 	bl	800216c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d102      	bne.n	8001fb0 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001faa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fae:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fb4:	f000 f860 	bl	8002078 <FLASH_WaitForLastOperation>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d006      	beq.n	8001fd0 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_FLASH_Program+0xa8>)
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	4906      	ldr	r1, [pc, #24]	; (8001fe4 <HAL_FLASH_Program+0xa8>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_FLASH_Program+0xa4>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8001fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	2000000c 	.word	0x2000000c
 8001fe4:	40022000 	.word	0x40022000

08001fe8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_FLASH_Unlock+0x38>)
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	da0b      	bge.n	8002012 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_FLASH_Unlock+0x38>)
 8001ffc:	4a09      	ldr	r2, [pc, #36]	; (8002024 <HAL_FLASH_Unlock+0x3c>)
 8001ffe:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <HAL_FLASH_Unlock+0x38>)
 8002002:	4a09      	ldr	r2, [pc, #36]	; (8002028 <HAL_FLASH_Unlock+0x40>)
 8002004:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_FLASH_Unlock+0x38>)
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	2b00      	cmp	r3, #0
 800200c:	da01      	bge.n	8002012 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002012:	79fb      	ldrb	r3, [r7, #7]
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	40022000 	.word	0x40022000
 8002024:	45670123 	.word	0x45670123
 8002028:	cdef89ab 	.word	0xcdef89ab

0800202c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <HAL_FLASH_Lock+0x30>)
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	4a08      	ldr	r2, [pc, #32]	; (800205c <HAL_FLASH_Lock+0x30>)
 800203c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002040:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_FLASH_Lock+0x30>)
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	2b00      	cmp	r3, #0
 8002048:	da01      	bge.n	800204e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800204e:	79fb      	ldrb	r3, [r7, #7]
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	40022000 	.word	0x40022000

08002060 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HAL_FLASH_GetError+0x14>)
 8002066:	685b      	ldr	r3, [r3, #4]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	2000000c 	.word	0x2000000c

08002078 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8002080:	f7ff fd5e 	bl	8001b40 <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002086:	e009      	b.n	800209c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8002088:	f7ff fd5a 	bl	8001b40 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	429a      	cmp	r2, r3
 8002096:	d201      	bcs.n	800209c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e038      	b.n	800210e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800209c:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <FLASH_WaitForLastOperation+0xa0>)
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a8:	d0ee      	beq.n	8002088 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <FLASH_WaitForLastOperation+0xa0>)
 80020ac:	691a      	ldr	r2, [r3, #16]
 80020ae:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80020b2:	4013      	ands	r3, r2
 80020b4:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01e      	beq.n	80020fa <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80020bc:	4b17      	ldr	r3, [pc, #92]	; (800211c <FLASH_WaitForLastOperation+0xa4>)
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	4a15      	ldr	r2, [pc, #84]	; (800211c <FLASH_WaitForLastOperation+0xa4>)
 80020c6:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d007      	beq.n	80020e2 <FLASH_WaitForLastOperation+0x6a>
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <FLASH_WaitForLastOperation+0xa0>)
 80020d4:	699a      	ldr	r2, [r3, #24]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80020dc:	490e      	ldr	r1, [pc, #56]	; (8002118 <FLASH_WaitForLastOperation+0xa0>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	618b      	str	r3, [r1, #24]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d004      	beq.n	80020f6 <FLASH_WaitForLastOperation+0x7e>
 80020ec:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <FLASH_WaitForLastOperation+0xa0>)
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80020f4:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e009      	b.n	800210e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80020fa:	4b07      	ldr	r3, [pc, #28]	; (8002118 <FLASH_WaitForLastOperation+0xa0>)
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b01      	cmp	r3, #1
 8002104:	d102      	bne.n	800210c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002106:	4b04      	ldr	r3, [pc, #16]	; (8002118 <FLASH_WaitForLastOperation+0xa0>)
 8002108:	2201      	movs	r2, #1
 800210a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40022000 	.word	0x40022000
 800211c:	2000000c 	.word	0x2000000c

08002120 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800212c:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <FLASH_Program_DoubleWord+0x48>)
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	4a0d      	ldr	r2, [pc, #52]	; (8002168 <FLASH_Program_DoubleWord+0x48>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800213e:	f3bf 8f6f 	isb	sy
}
 8002142:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8002144:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	000a      	movs	r2, r1
 8002152:	2300      	movs	r3, #0
 8002154:	68f9      	ldr	r1, [r7, #12]
 8002156:	3104      	adds	r1, #4
 8002158:	4613      	mov	r3, r2
 800215a:	600b      	str	r3, [r1, #0]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	40022000 	.word	0x40022000

0800216c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	; 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8002176:	2340      	movs	r3, #64	; 0x40
 8002178:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002182:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <FLASH_Program_Fast+0x68>)
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	4a13      	ldr	r2, [pc, #76]	; (80021d4 <FLASH_Program_Fast+0x68>)
 8002188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800218c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800218e:	f3ef 8310 	mrs	r3, PRIMASK
 8002192:	60fb      	str	r3, [r7, #12]
  return(result);
 8002194:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8002196:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002198:	b672      	cpsid	i
}
 800219a:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	3304      	adds	r3, #4
 80021a8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	3304      	adds	r3, #4
 80021ae:	617b      	str	r3, [r7, #20]
    row_index--;
 80021b0:	7ffb      	ldrb	r3, [r7, #31]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80021b6:	7ffb      	ldrb	r3, [r7, #31]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1ef      	bne.n	800219c <FLASH_Program_Fast+0x30>
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f383 8810 	msr	PRIMASK, r3
}
 80021c6:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80021c8:	bf00      	nop
 80021ca:	3724      	adds	r7, #36	; 0x24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	40022000 	.word	0x40022000

080021d8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80021e2:	4b4a      	ldr	r3, [pc, #296]	; (800230c <HAL_FLASHEx_Erase+0x134>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_FLASHEx_Erase+0x16>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e089      	b.n	8002302 <HAL_FLASHEx_Erase+0x12a>
 80021ee:	4b47      	ldr	r3, [pc, #284]	; (800230c <HAL_FLASHEx_Erase+0x134>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021f8:	f7ff ff3e 	bl	8002078 <FLASH_WaitForLastOperation>
 80021fc:	4603      	mov	r3, r0
 80021fe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d179      	bne.n	80022fa <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002206:	4b41      	ldr	r3, [pc, #260]	; (800230c <HAL_FLASHEx_Erase+0x134>)
 8002208:	2200      	movs	r2, #0
 800220a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800220c:	4b40      	ldr	r3, [pc, #256]	; (8002310 <HAL_FLASHEx_Erase+0x138>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002214:	2b00      	cmp	r3, #0
 8002216:	d019      	beq.n	800224c <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002218:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <HAL_FLASHEx_Erase+0x138>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a3c      	ldr	r2, [pc, #240]	; (8002310 <HAL_FLASHEx_Erase+0x138>)
 800221e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002222:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002224:	4b3a      	ldr	r3, [pc, #232]	; (8002310 <HAL_FLASHEx_Erase+0x138>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222c:	2b00      	cmp	r3, #0
 800222e:	d009      	beq.n	8002244 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002230:	4b37      	ldr	r3, [pc, #220]	; (8002310 <HAL_FLASHEx_Erase+0x138>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a36      	ldr	r2, [pc, #216]	; (8002310 <HAL_FLASHEx_Erase+0x138>)
 8002236:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800223a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800223c:	4b33      	ldr	r3, [pc, #204]	; (800230c <HAL_FLASHEx_Erase+0x134>)
 800223e:	2203      	movs	r2, #3
 8002240:	771a      	strb	r2, [r3, #28]
 8002242:	e016      	b.n	8002272 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002244:	4b31      	ldr	r3, [pc, #196]	; (800230c <HAL_FLASHEx_Erase+0x134>)
 8002246:	2201      	movs	r2, #1
 8002248:	771a      	strb	r2, [r3, #28]
 800224a:	e012      	b.n	8002272 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800224c:	4b30      	ldr	r3, [pc, #192]	; (8002310 <HAL_FLASHEx_Erase+0x138>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002254:	2b00      	cmp	r3, #0
 8002256:	d009      	beq.n	800226c <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002258:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <HAL_FLASHEx_Erase+0x138>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a2c      	ldr	r2, [pc, #176]	; (8002310 <HAL_FLASHEx_Erase+0x138>)
 800225e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002262:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002264:	4b29      	ldr	r3, [pc, #164]	; (800230c <HAL_FLASHEx_Erase+0x134>)
 8002266:	2202      	movs	r2, #2
 8002268:	771a      	strb	r2, [r3, #28]
 800226a:	e002      	b.n	8002272 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800226c:	4b27      	ldr	r3, [pc, #156]	; (800230c <HAL_FLASHEx_Erase+0x134>)
 800226e:	2200      	movs	r2, #0
 8002270:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d111      	bne.n	800229e <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f848 	bl	8002314 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002284:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002288:	f7ff fef6 	bl	8002078 <FLASH_WaitForLastOperation>
 800228c:	4603      	mov	r3, r0
 800228e:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8002290:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <HAL_FLASHEx_Erase+0x138>)
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	4a1e      	ldr	r2, [pc, #120]	; (8002310 <HAL_FLASHEx_Erase+0x138>)
 8002296:	f023 0304 	bic.w	r3, r3, #4
 800229a:	6153      	str	r3, [r2, #20]
 800229c:	e02b      	b.n	80022f6 <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	f04f 32ff 	mov.w	r2, #4294967295
 80022a4:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	e01b      	b.n	80022e6 <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4619      	mov	r1, r3
 80022b4:	68b8      	ldr	r0, [r7, #8]
 80022b6:	f000 f84b 	bl	8002350 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022be:	f7ff fedb 	bl	8002078 <FLASH_WaitForLastOperation>
 80022c2:	4603      	mov	r3, r0
 80022c4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_FLASHEx_Erase+0x138>)
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	4a11      	ldr	r2, [pc, #68]	; (8002310 <HAL_FLASHEx_Erase+0x138>)
 80022cc:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80022d0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	601a      	str	r2, [r3, #0]
          break;
 80022de:	e00a      	b.n	80022f6 <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	3301      	adds	r3, #1
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	4413      	add	r3, r2
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d3db      	bcc.n	80022ae <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80022f6:	f000 f84f 	bl	8002398 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80022fa:	4b04      	ldr	r3, [pc, #16]	; (800230c <HAL_FLASHEx_Erase+0x134>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]

  return status;
 8002300:	7bfb      	ldrb	r3, [r7, #15]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	2000000c 	.word	0x2000000c
 8002310:	40022000 	.word	0x40022000

08002314 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <FLASH_MassErase+0x38>)
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	4a08      	ldr	r2, [pc, #32]	; (800234c <FLASH_MassErase+0x38>)
 800232c:	f043 0304 	orr.w	r3, r3, #4
 8002330:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <FLASH_MassErase+0x38>)
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	4a05      	ldr	r2, [pc, #20]	; (800234c <FLASH_MassErase+0x38>)
 8002338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233c:	6153      	str	r3, [r2, #20]
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40022000 	.word	0x40022000

08002350 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <FLASH_PageErase+0x44>)
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800236a:	490a      	ldr	r1, [pc, #40]	; (8002394 <FLASH_PageErase+0x44>)
 800236c:	4313      	orrs	r3, r2
 800236e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <FLASH_PageErase+0x44>)
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	4a07      	ldr	r2, [pc, #28]	; (8002394 <FLASH_PageErase+0x44>)
 8002376:	f043 0302 	orr.w	r3, r3, #2
 800237a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <FLASH_PageErase+0x44>)
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	4a04      	ldr	r2, [pc, #16]	; (8002394 <FLASH_PageErase+0x44>)
 8002382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002386:	6153      	str	r3, [r2, #20]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	40022000 	.word	0x40022000

08002398 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800239e:	4b1e      	ldr	r3, [pc, #120]	; (8002418 <FLASH_FlushCaches+0x80>)
 80023a0:	7f1b      	ldrb	r3, [r3, #28]
 80023a2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d002      	beq.n	80023b0 <FLASH_FlushCaches+0x18>
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d111      	bne.n	80023d4 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80023b0:	4b1a      	ldr	r3, [pc, #104]	; (800241c <FLASH_FlushCaches+0x84>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a19      	ldr	r2, [pc, #100]	; (800241c <FLASH_FlushCaches+0x84>)
 80023b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	4b17      	ldr	r3, [pc, #92]	; (800241c <FLASH_FlushCaches+0x84>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a16      	ldr	r2, [pc, #88]	; (800241c <FLASH_FlushCaches+0x84>)
 80023c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023c6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023c8:	4b14      	ldr	r3, [pc, #80]	; (800241c <FLASH_FlushCaches+0x84>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a13      	ldr	r2, [pc, #76]	; (800241c <FLASH_FlushCaches+0x84>)
 80023ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023d2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d002      	beq.n	80023e0 <FLASH_FlushCaches+0x48>
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d111      	bne.n	8002404 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80023e0:	4b0e      	ldr	r3, [pc, #56]	; (800241c <FLASH_FlushCaches+0x84>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0d      	ldr	r2, [pc, #52]	; (800241c <FLASH_FlushCaches+0x84>)
 80023e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <FLASH_FlushCaches+0x84>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0a      	ldr	r2, [pc, #40]	; (800241c <FLASH_FlushCaches+0x84>)
 80023f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023f6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <FLASH_FlushCaches+0x84>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a07      	ldr	r2, [pc, #28]	; (800241c <FLASH_FlushCaches+0x84>)
 80023fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002402:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <FLASH_FlushCaches+0x80>)
 8002406:	2200      	movs	r2, #0
 8002408:	771a      	strb	r2, [r3, #28]
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	2000000c 	.word	0x2000000c
 800241c:	40022000 	.word	0x40022000

08002420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800242e:	e15a      	b.n	80026e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	2101      	movs	r1, #1
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	fa01 f303 	lsl.w	r3, r1, r3
 800243c:	4013      	ands	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 814c 	beq.w	80026e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d00b      	beq.n	8002468 <HAL_GPIO_Init+0x48>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d007      	beq.n	8002468 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800245c:	2b11      	cmp	r3, #17
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b12      	cmp	r3, #18
 8002466:	d130      	bne.n	80024ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	2203      	movs	r2, #3
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4013      	ands	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800249e:	2201      	movs	r2, #1
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4013      	ands	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	f003 0201 	and.w	r2, r3, #1
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	2203      	movs	r2, #3
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d003      	beq.n	800250a <HAL_GPIO_Init+0xea>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b12      	cmp	r3, #18
 8002508:	d123      	bne.n	8002552 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	08da      	lsrs	r2, r3, #3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3208      	adds	r2, #8
 8002512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002516:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	220f      	movs	r2, #15
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	08da      	lsrs	r2, r3, #3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3208      	adds	r2, #8
 800254c:	6939      	ldr	r1, [r7, #16]
 800254e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	2203      	movs	r2, #3
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 0203 	and.w	r2, r3, #3
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 80a6 	beq.w	80026e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002594:	4b5b      	ldr	r3, [pc, #364]	; (8002704 <HAL_GPIO_Init+0x2e4>)
 8002596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002598:	4a5a      	ldr	r2, [pc, #360]	; (8002704 <HAL_GPIO_Init+0x2e4>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6613      	str	r3, [r2, #96]	; 0x60
 80025a0:	4b58      	ldr	r3, [pc, #352]	; (8002704 <HAL_GPIO_Init+0x2e4>)
 80025a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ac:	4a56      	ldr	r2, [pc, #344]	; (8002708 <HAL_GPIO_Init+0x2e8>)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	089b      	lsrs	r3, r3, #2
 80025b2:	3302      	adds	r3, #2
 80025b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	220f      	movs	r2, #15
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4013      	ands	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025d6:	d01f      	beq.n	8002618 <HAL_GPIO_Init+0x1f8>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a4c      	ldr	r2, [pc, #304]	; (800270c <HAL_GPIO_Init+0x2ec>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d019      	beq.n	8002614 <HAL_GPIO_Init+0x1f4>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a4b      	ldr	r2, [pc, #300]	; (8002710 <HAL_GPIO_Init+0x2f0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d013      	beq.n	8002610 <HAL_GPIO_Init+0x1f0>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a4a      	ldr	r2, [pc, #296]	; (8002714 <HAL_GPIO_Init+0x2f4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d00d      	beq.n	800260c <HAL_GPIO_Init+0x1ec>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a49      	ldr	r2, [pc, #292]	; (8002718 <HAL_GPIO_Init+0x2f8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d007      	beq.n	8002608 <HAL_GPIO_Init+0x1e8>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a48      	ldr	r2, [pc, #288]	; (800271c <HAL_GPIO_Init+0x2fc>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d101      	bne.n	8002604 <HAL_GPIO_Init+0x1e4>
 8002600:	2305      	movs	r3, #5
 8002602:	e00a      	b.n	800261a <HAL_GPIO_Init+0x1fa>
 8002604:	2306      	movs	r3, #6
 8002606:	e008      	b.n	800261a <HAL_GPIO_Init+0x1fa>
 8002608:	2304      	movs	r3, #4
 800260a:	e006      	b.n	800261a <HAL_GPIO_Init+0x1fa>
 800260c:	2303      	movs	r3, #3
 800260e:	e004      	b.n	800261a <HAL_GPIO_Init+0x1fa>
 8002610:	2302      	movs	r3, #2
 8002612:	e002      	b.n	800261a <HAL_GPIO_Init+0x1fa>
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <HAL_GPIO_Init+0x1fa>
 8002618:	2300      	movs	r3, #0
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	f002 0203 	and.w	r2, r2, #3
 8002620:	0092      	lsls	r2, r2, #2
 8002622:	4093      	lsls	r3, r2
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800262a:	4937      	ldr	r1, [pc, #220]	; (8002708 <HAL_GPIO_Init+0x2e8>)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	089b      	lsrs	r3, r3, #2
 8002630:	3302      	adds	r3, #2
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002638:	4b39      	ldr	r3, [pc, #228]	; (8002720 <HAL_GPIO_Init+0x300>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800265c:	4a30      	ldr	r2, [pc, #192]	; (8002720 <HAL_GPIO_Init+0x300>)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002662:	4b2f      	ldr	r3, [pc, #188]	; (8002720 <HAL_GPIO_Init+0x300>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	43db      	mvns	r3, r3
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4013      	ands	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002686:	4a26      	ldr	r2, [pc, #152]	; (8002720 <HAL_GPIO_Init+0x300>)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800268c:	4b24      	ldr	r3, [pc, #144]	; (8002720 <HAL_GPIO_Init+0x300>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	43db      	mvns	r3, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026b0:	4a1b      	ldr	r2, [pc, #108]	; (8002720 <HAL_GPIO_Init+0x300>)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026b6:	4b1a      	ldr	r3, [pc, #104]	; (8002720 <HAL_GPIO_Init+0x300>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	43db      	mvns	r3, r3
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026da:	4a11      	ldr	r2, [pc, #68]	; (8002720 <HAL_GPIO_Init+0x300>)
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	3301      	adds	r3, #1
 80026e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f47f ae9d 	bne.w	8002430 <HAL_GPIO_Init+0x10>
  }
}
 80026f6:	bf00      	nop
 80026f8:	bf00      	nop
 80026fa:	371c      	adds	r7, #28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	40021000 	.word	0x40021000
 8002708:	40010000 	.word	0x40010000
 800270c:	48000400 	.word	0x48000400
 8002710:	48000800 	.word	0x48000800
 8002714:	48000c00 	.word	0x48000c00
 8002718:	48001000 	.word	0x48001000
 800271c:	48001400 	.word	0x48001400
 8002720:	40010400 	.word	0x40010400

08002724 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d141      	bne.n	80027b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002732:	4b4b      	ldr	r3, [pc, #300]	; (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800273a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273e:	d131      	bne.n	80027a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002740:	4b47      	ldr	r3, [pc, #284]	; (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002746:	4a46      	ldr	r2, [pc, #280]	; (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800274c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002750:	4b43      	ldr	r3, [pc, #268]	; (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002758:	4a41      	ldr	r2, [pc, #260]	; (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800275a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800275e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002760:	4b40      	ldr	r3, [pc, #256]	; (8002864 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2232      	movs	r2, #50	; 0x32
 8002766:	fb02 f303 	mul.w	r3, r2, r3
 800276a:	4a3f      	ldr	r2, [pc, #252]	; (8002868 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800276c:	fba2 2303 	umull	r2, r3, r2, r3
 8002770:	0c9b      	lsrs	r3, r3, #18
 8002772:	3301      	adds	r3, #1
 8002774:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002776:	e002      	b.n	800277e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3b01      	subs	r3, #1
 800277c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800277e:	4b38      	ldr	r3, [pc, #224]	; (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800278a:	d102      	bne.n	8002792 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f2      	bne.n	8002778 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002792:	4b33      	ldr	r3, [pc, #204]	; (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279e:	d158      	bne.n	8002852 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e057      	b.n	8002854 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027a4:	4b2e      	ldr	r3, [pc, #184]	; (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027aa:	4a2d      	ldr	r2, [pc, #180]	; (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027b4:	e04d      	b.n	8002852 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027bc:	d141      	bne.n	8002842 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027be:	4b28      	ldr	r3, [pc, #160]	; (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ca:	d131      	bne.n	8002830 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027cc:	4b24      	ldr	r3, [pc, #144]	; (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027d2:	4a23      	ldr	r2, [pc, #140]	; (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027dc:	4b20      	ldr	r3, [pc, #128]	; (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027e4:	4a1e      	ldr	r2, [pc, #120]	; (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027ec:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2232      	movs	r2, #50	; 0x32
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	4a1c      	ldr	r2, [pc, #112]	; (8002868 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	0c9b      	lsrs	r3, r3, #18
 80027fe:	3301      	adds	r3, #1
 8002800:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002802:	e002      	b.n	800280a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3b01      	subs	r3, #1
 8002808:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002816:	d102      	bne.n	800281e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f2      	bne.n	8002804 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800281e:	4b10      	ldr	r3, [pc, #64]	; (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800282a:	d112      	bne.n	8002852 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e011      	b.n	8002854 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002836:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002840:	e007      	b.n	8002852 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002842:	4b07      	ldr	r3, [pc, #28]	; (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800284a:	4a05      	ldr	r2, [pc, #20]	; (8002860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800284c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002850:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	40007000 	.word	0x40007000
 8002864:	20000000 	.word	0x20000000
 8002868:	431bde83 	.word	0x431bde83

0800286c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4a04      	ldr	r2, [pc, #16]	; (8002888 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002876:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800287a:	6093      	str	r3, [r2, #8]
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40007000 	.word	0x40007000

0800288c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e308      	b.n	8002eb0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d075      	beq.n	8002996 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028aa:	4ba3      	ldr	r3, [pc, #652]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b4:	4ba0      	ldr	r3, [pc, #640]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2b0c      	cmp	r3, #12
 80028c2:	d102      	bne.n	80028ca <HAL_RCC_OscConfig+0x3e>
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d002      	beq.n	80028d0 <HAL_RCC_OscConfig+0x44>
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d10b      	bne.n	80028e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d0:	4b99      	ldr	r3, [pc, #612]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d05b      	beq.n	8002994 <HAL_RCC_OscConfig+0x108>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d157      	bne.n	8002994 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e2e3      	b.n	8002eb0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f0:	d106      	bne.n	8002900 <HAL_RCC_OscConfig+0x74>
 80028f2:	4b91      	ldr	r3, [pc, #580]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a90      	ldr	r2, [pc, #576]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e01d      	b.n	800293c <HAL_RCC_OscConfig+0xb0>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002908:	d10c      	bne.n	8002924 <HAL_RCC_OscConfig+0x98>
 800290a:	4b8b      	ldr	r3, [pc, #556]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a8a      	ldr	r2, [pc, #552]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	4b88      	ldr	r3, [pc, #544]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a87      	ldr	r2, [pc, #540]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 800291c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	e00b      	b.n	800293c <HAL_RCC_OscConfig+0xb0>
 8002924:	4b84      	ldr	r3, [pc, #528]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a83      	ldr	r2, [pc, #524]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 800292a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	4b81      	ldr	r3, [pc, #516]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a80      	ldr	r2, [pc, #512]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d013      	beq.n	800296c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7ff f8fc 	bl	8001b40 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800294c:	f7ff f8f8 	bl	8001b40 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b64      	cmp	r3, #100	; 0x64
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e2a8      	b.n	8002eb0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800295e:	4b76      	ldr	r3, [pc, #472]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0xc0>
 800296a:	e014      	b.n	8002996 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7ff f8e8 	bl	8001b40 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002974:	f7ff f8e4 	bl	8001b40 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b64      	cmp	r3, #100	; 0x64
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e294      	b.n	8002eb0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002986:	4b6c      	ldr	r3, [pc, #432]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0xe8>
 8002992:	e000      	b.n	8002996 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d075      	beq.n	8002a8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029a2:	4b65      	ldr	r3, [pc, #404]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029ac:	4b62      	ldr	r3, [pc, #392]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	2b0c      	cmp	r3, #12
 80029ba:	d102      	bne.n	80029c2 <HAL_RCC_OscConfig+0x136>
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d002      	beq.n	80029c8 <HAL_RCC_OscConfig+0x13c>
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d11f      	bne.n	8002a08 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029c8:	4b5b      	ldr	r3, [pc, #364]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_OscConfig+0x154>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e267      	b.n	8002eb0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e0:	4b55      	ldr	r3, [pc, #340]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	061b      	lsls	r3, r3, #24
 80029ee:	4952      	ldr	r1, [pc, #328]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80029f4:	4b51      	ldr	r3, [pc, #324]	; (8002b3c <HAL_RCC_OscConfig+0x2b0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff f855 	bl	8001aa8 <HAL_InitTick>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d043      	beq.n	8002a8c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e253      	b.n	8002eb0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d023      	beq.n	8002a58 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a10:	4b49      	ldr	r3, [pc, #292]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a48      	ldr	r2, [pc, #288]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1c:	f7ff f890 	bl	8001b40 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a24:	f7ff f88c 	bl	8001b40 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e23c      	b.n	8002eb0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a36:	4b40      	ldr	r3, [pc, #256]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a42:	4b3d      	ldr	r3, [pc, #244]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	061b      	lsls	r3, r3, #24
 8002a50:	4939      	ldr	r1, [pc, #228]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
 8002a56:	e01a      	b.n	8002a8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a58:	4b37      	ldr	r3, [pc, #220]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a36      	ldr	r2, [pc, #216]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002a5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7ff f86c 	bl	8001b40 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a6c:	f7ff f868 	bl	8001b40 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e218      	b.n	8002eb0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a7e:	4b2e      	ldr	r3, [pc, #184]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x1e0>
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d03c      	beq.n	8002b14 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d01c      	beq.n	8002adc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa2:	4b25      	ldr	r3, [pc, #148]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa8:	4a23      	ldr	r2, [pc, #140]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab2:	f7ff f845 	bl	8001b40 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aba:	f7ff f841 	bl	8001b40 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e1f1      	b.n	8002eb0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002acc:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0ef      	beq.n	8002aba <HAL_RCC_OscConfig+0x22e>
 8002ada:	e01b      	b.n	8002b14 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002adc:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae2:	4a15      	ldr	r2, [pc, #84]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002ae4:	f023 0301 	bic.w	r3, r3, #1
 8002ae8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7ff f828 	bl	8001b40 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af4:	f7ff f824 	bl	8001b40 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e1d4      	b.n	8002eb0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1ef      	bne.n	8002af4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80ab 	beq.w	8002c78 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b22:	2300      	movs	r3, #0
 8002b24:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b26:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <HAL_RCC_OscConfig+0x2b4>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e005      	b.n	8002b42 <HAL_RCC_OscConfig+0x2b6>
 8002b36:	bf00      	nop
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	20000004 	.word	0x20000004
 8002b40:	2300      	movs	r3, #0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00d      	beq.n	8002b62 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b46:	4baf      	ldr	r3, [pc, #700]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4a:	4aae      	ldr	r2, [pc, #696]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b50:	6593      	str	r3, [r2, #88]	; 0x58
 8002b52:	4bac      	ldr	r3, [pc, #688]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b62:	4ba9      	ldr	r3, [pc, #676]	; (8002e08 <HAL_RCC_OscConfig+0x57c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d118      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b6e:	4ba6      	ldr	r3, [pc, #664]	; (8002e08 <HAL_RCC_OscConfig+0x57c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4aa5      	ldr	r2, [pc, #660]	; (8002e08 <HAL_RCC_OscConfig+0x57c>)
 8002b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b7a:	f7fe ffe1 	bl	8001b40 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b82:	f7fe ffdd 	bl	8001b40 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e18d      	b.n	8002eb0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b94:	4b9c      	ldr	r3, [pc, #624]	; (8002e08 <HAL_RCC_OscConfig+0x57c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d108      	bne.n	8002bba <HAL_RCC_OscConfig+0x32e>
 8002ba8:	4b96      	ldr	r3, [pc, #600]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bae:	4a95      	ldr	r2, [pc, #596]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bb8:	e024      	b.n	8002c04 <HAL_RCC_OscConfig+0x378>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b05      	cmp	r3, #5
 8002bc0:	d110      	bne.n	8002be4 <HAL_RCC_OscConfig+0x358>
 8002bc2:	4b90      	ldr	r3, [pc, #576]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc8:	4a8e      	ldr	r2, [pc, #568]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002bca:	f043 0304 	orr.w	r3, r3, #4
 8002bce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bd2:	4b8c      	ldr	r3, [pc, #560]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd8:	4a8a      	ldr	r2, [pc, #552]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002be2:	e00f      	b.n	8002c04 <HAL_RCC_OscConfig+0x378>
 8002be4:	4b87      	ldr	r3, [pc, #540]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bea:	4a86      	ldr	r2, [pc, #536]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bf4:	4b83      	ldr	r3, [pc, #524]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfa:	4a82      	ldr	r2, [pc, #520]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002bfc:	f023 0304 	bic.w	r3, r3, #4
 8002c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d016      	beq.n	8002c3a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0c:	f7fe ff98 	bl	8001b40 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c14:	f7fe ff94 	bl	8001b40 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e142      	b.n	8002eb0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c2a:	4b76      	ldr	r3, [pc, #472]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0ed      	beq.n	8002c14 <HAL_RCC_OscConfig+0x388>
 8002c38:	e015      	b.n	8002c66 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3a:	f7fe ff81 	bl	8001b40 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c40:	e00a      	b.n	8002c58 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7fe ff7d 	bl	8001b40 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e12b      	b.n	8002eb0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c58:	4b6a      	ldr	r3, [pc, #424]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1ed      	bne.n	8002c42 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c66:	7ffb      	ldrb	r3, [r7, #31]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d105      	bne.n	8002c78 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6c:	4b65      	ldr	r3, [pc, #404]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c70:	4a64      	ldr	r2, [pc, #400]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c76:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d03c      	beq.n	8002cfe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d01c      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c8c:	4b5d      	ldr	r3, [pc, #372]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002c8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c92:	4a5c      	ldr	r2, [pc, #368]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9c:	f7fe ff50 	bl	8001b40 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ca4:	f7fe ff4c 	bl	8001b40 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e0fc      	b.n	8002eb0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cb6:	4b53      	ldr	r3, [pc, #332]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0ef      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x418>
 8002cc4:	e01b      	b.n	8002cfe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cc6:	4b4f      	ldr	r3, [pc, #316]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002cc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ccc:	4a4d      	ldr	r2, [pc, #308]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd6:	f7fe ff33 	bl	8001b40 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cde:	f7fe ff2f 	bl	8001b40 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e0df      	b.n	8002eb0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cf0:	4b44      	ldr	r3, [pc, #272]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1ef      	bne.n	8002cde <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 80d3 	beq.w	8002eae <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d08:	4b3e      	ldr	r3, [pc, #248]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 030c 	and.w	r3, r3, #12
 8002d10:	2b0c      	cmp	r3, #12
 8002d12:	f000 808d 	beq.w	8002e30 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d15a      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1e:	4b39      	ldr	r3, [pc, #228]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a38      	ldr	r2, [pc, #224]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002d24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2a:	f7fe ff09 	bl	8001b40 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d32:	f7fe ff05 	bl	8001b40 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e0b5      	b.n	8002eb0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d44:	4b2f      	ldr	r3, [pc, #188]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f0      	bne.n	8002d32 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d50:	4b2c      	ldr	r3, [pc, #176]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	4b2d      	ldr	r3, [pc, #180]	; (8002e0c <HAL_RCC_OscConfig+0x580>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6a11      	ldr	r1, [r2, #32]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d60:	3a01      	subs	r2, #1
 8002d62:	0112      	lsls	r2, r2, #4
 8002d64:	4311      	orrs	r1, r2
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002d6a:	0212      	lsls	r2, r2, #8
 8002d6c:	4311      	orrs	r1, r2
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d72:	0852      	lsrs	r2, r2, #1
 8002d74:	3a01      	subs	r2, #1
 8002d76:	0552      	lsls	r2, r2, #21
 8002d78:	4311      	orrs	r1, r2
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d7e:	0852      	lsrs	r2, r2, #1
 8002d80:	3a01      	subs	r2, #1
 8002d82:	0652      	lsls	r2, r2, #25
 8002d84:	4311      	orrs	r1, r2
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d8a:	06d2      	lsls	r2, r2, #27
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	491d      	ldr	r1, [pc, #116]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d94:	4b1b      	ldr	r3, [pc, #108]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a1a      	ldr	r2, [pc, #104]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d9e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002da0:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4a17      	ldr	r2, [pc, #92]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002daa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dac:	f7fe fec8 	bl	8001b40 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db4:	f7fe fec4 	bl	8001b40 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e074      	b.n	8002eb0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0x528>
 8002dd2:	e06c      	b.n	8002eae <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002dda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dde:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002de0:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4a07      	ldr	r2, [pc, #28]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002de6:	f023 0303 	bic.w	r3, r3, #3
 8002dea:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <HAL_RCC_OscConfig+0x578>)
 8002df2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe fea0 	bl	8001b40 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e02:	e00e      	b.n	8002e22 <HAL_RCC_OscConfig+0x596>
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40007000 	.word	0x40007000
 8002e0c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe fe96 	bl	8001b40 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e046      	b.n	8002eb0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e22:	4b25      	ldr	r3, [pc, #148]	; (8002eb8 <HAL_RCC_OscConfig+0x62c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x584>
 8002e2e:	e03e      	b.n	8002eae <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e039      	b.n	8002eb0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002e3c:	4b1e      	ldr	r3, [pc, #120]	; (8002eb8 <HAL_RCC_OscConfig+0x62c>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f003 0203 	and.w	r2, r3, #3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d12c      	bne.n	8002eaa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d123      	bne.n	8002eaa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d11b      	bne.n	8002eaa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d113      	bne.n	8002eaa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	085b      	lsrs	r3, r3, #1
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d109      	bne.n	8002eaa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea0:	085b      	lsrs	r3, r3, #1
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d001      	beq.n	8002eae <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40021000 	.word	0x40021000

08002ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e11e      	b.n	8003112 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed4:	4b91      	ldr	r3, [pc, #580]	; (800311c <HAL_RCC_ClockConfig+0x260>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d910      	bls.n	8002f04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee2:	4b8e      	ldr	r3, [pc, #568]	; (800311c <HAL_RCC_ClockConfig+0x260>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 020f 	bic.w	r2, r3, #15
 8002eea:	498c      	ldr	r1, [pc, #560]	; (800311c <HAL_RCC_ClockConfig+0x260>)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef2:	4b8a      	ldr	r3, [pc, #552]	; (800311c <HAL_RCC_ClockConfig+0x260>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d001      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e106      	b.n	8003112 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d073      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d129      	bne.n	8002f6c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f18:	4b81      	ldr	r3, [pc, #516]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0f4      	b.n	8003112 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002f28:	f000 f99e 	bl	8003268 <RCC_GetSysClockFreqFromPLLSource>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4a7c      	ldr	r2, [pc, #496]	; (8003124 <HAL_RCC_ClockConfig+0x268>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d93f      	bls.n	8002fb6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f36:	4b7a      	ldr	r3, [pc, #488]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d009      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d033      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d12f      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f56:	4b72      	ldr	r3, [pc, #456]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f5e:	4a70      	ldr	r2, [pc, #448]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 8002f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f64:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	e024      	b.n	8002fb6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d107      	bne.n	8002f84 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f74:	4b6a      	ldr	r3, [pc, #424]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d109      	bne.n	8002f94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0c6      	b.n	8003112 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f84:	4b66      	ldr	r3, [pc, #408]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0be      	b.n	8003112 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002f94:	f000 f8ce 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 8002f98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4a61      	ldr	r2, [pc, #388]	; (8003124 <HAL_RCC_ClockConfig+0x268>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d909      	bls.n	8002fb6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fa2:	4b5f      	ldr	r3, [pc, #380]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002faa:	4a5d      	ldr	r2, [pc, #372]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 8002fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fb6:	4b5a      	ldr	r3, [pc, #360]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f023 0203 	bic.w	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4957      	ldr	r1, [pc, #348]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fc8:	f7fe fdba 	bl	8001b40 <HAL_GetTick>
 8002fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd0:	f7fe fdb6 	bl	8001b40 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e095      	b.n	8003112 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe6:	4b4e      	ldr	r3, [pc, #312]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 020c 	and.w	r2, r3, #12
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d1eb      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d023      	beq.n	800304c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003010:	4b43      	ldr	r3, [pc, #268]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	4a42      	ldr	r2, [pc, #264]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 8003016:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800301a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b00      	cmp	r3, #0
 8003026:	d007      	beq.n	8003038 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003028:	4b3d      	ldr	r3, [pc, #244]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003030:	4a3b      	ldr	r2, [pc, #236]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 8003032:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003036:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003038:	4b39      	ldr	r3, [pc, #228]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	4936      	ldr	r1, [pc, #216]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 8003046:	4313      	orrs	r3, r2
 8003048:	608b      	str	r3, [r1, #8]
 800304a:	e008      	b.n	800305e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2b80      	cmp	r3, #128	; 0x80
 8003050:	d105      	bne.n	800305e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003052:	4b33      	ldr	r3, [pc, #204]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	4a32      	ldr	r2, [pc, #200]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 8003058:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800305c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800305e:	4b2f      	ldr	r3, [pc, #188]	; (800311c <HAL_RCC_ClockConfig+0x260>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d21d      	bcs.n	80030a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306c:	4b2b      	ldr	r3, [pc, #172]	; (800311c <HAL_RCC_ClockConfig+0x260>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f023 020f 	bic.w	r2, r3, #15
 8003074:	4929      	ldr	r1, [pc, #164]	; (800311c <HAL_RCC_ClockConfig+0x260>)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	4313      	orrs	r3, r2
 800307a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800307c:	f7fe fd60 	bl	8001b40 <HAL_GetTick>
 8003080:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	e00a      	b.n	800309a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003084:	f7fe fd5c 	bl	8001b40 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003092:	4293      	cmp	r3, r2
 8003094:	d901      	bls.n	800309a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e03b      	b.n	8003112 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800309a:	4b20      	ldr	r3, [pc, #128]	; (800311c <HAL_RCC_ClockConfig+0x260>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d1ed      	bne.n	8003084 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b4:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4917      	ldr	r1, [pc, #92]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d009      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	490f      	ldr	r1, [pc, #60]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030e6:	f000 f825 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 80030ea:	4602      	mov	r2, r0
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <HAL_RCC_ClockConfig+0x264>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	490c      	ldr	r1, [pc, #48]	; (8003128 <HAL_RCC_ClockConfig+0x26c>)
 80030f8:	5ccb      	ldrb	r3, [r1, r3]
 80030fa:	f003 031f 	and.w	r3, r3, #31
 80030fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003102:	4a0a      	ldr	r2, [pc, #40]	; (800312c <HAL_RCC_ClockConfig+0x270>)
 8003104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003106:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <HAL_RCC_ClockConfig+0x274>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe fccc 	bl	8001aa8 <HAL_InitTick>
 8003110:	4603      	mov	r3, r0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40022000 	.word	0x40022000
 8003120:	40021000 	.word	0x40021000
 8003124:	04c4b400 	.word	0x04c4b400
 8003128:	08008fac 	.word	0x08008fac
 800312c:	20000000 	.word	0x20000000
 8003130:	20000004 	.word	0x20000004

08003134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800313a:	4b2c      	ldr	r3, [pc, #176]	; (80031ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b04      	cmp	r3, #4
 8003144:	d102      	bne.n	800314c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003146:	4b2a      	ldr	r3, [pc, #168]	; (80031f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	e047      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800314c:	4b27      	ldr	r3, [pc, #156]	; (80031ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 030c 	and.w	r3, r3, #12
 8003154:	2b08      	cmp	r3, #8
 8003156:	d102      	bne.n	800315e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003158:	4b26      	ldr	r3, [pc, #152]	; (80031f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	e03e      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800315e:	4b23      	ldr	r3, [pc, #140]	; (80031ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b0c      	cmp	r3, #12
 8003168:	d136      	bne.n	80031d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800316a:	4b20      	ldr	r3, [pc, #128]	; (80031ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003174:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	3301      	adds	r3, #1
 8003180:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b03      	cmp	r3, #3
 8003186:	d10c      	bne.n	80031a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003188:	4a1a      	ldr	r2, [pc, #104]	; (80031f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003190:	4a16      	ldr	r2, [pc, #88]	; (80031ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003192:	68d2      	ldr	r2, [r2, #12]
 8003194:	0a12      	lsrs	r2, r2, #8
 8003196:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	617b      	str	r3, [r7, #20]
      break;
 80031a0:	e00c      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031a2:	4a13      	ldr	r2, [pc, #76]	; (80031f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031aa:	4a10      	ldr	r2, [pc, #64]	; (80031ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ac:	68d2      	ldr	r2, [r2, #12]
 80031ae:	0a12      	lsrs	r2, r2, #8
 80031b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031b4:	fb02 f303 	mul.w	r3, r2, r3
 80031b8:	617b      	str	r3, [r7, #20]
      break;
 80031ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	0e5b      	lsrs	r3, r3, #25
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	3301      	adds	r3, #1
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	e001      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80031dc:	693b      	ldr	r3, [r7, #16]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	371c      	adds	r7, #28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000
 80031f0:	00f42400 	.word	0x00f42400
 80031f4:	007a1200 	.word	0x007a1200

080031f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031fc:	4b03      	ldr	r3, [pc, #12]	; (800320c <HAL_RCC_GetHCLKFreq+0x14>)
 80031fe:	681b      	ldr	r3, [r3, #0]
}
 8003200:	4618      	mov	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20000000 	.word	0x20000000

08003210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003214:	f7ff fff0 	bl	80031f8 <HAL_RCC_GetHCLKFreq>
 8003218:	4602      	mov	r2, r0
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <HAL_RCC_GetPCLK1Freq+0x24>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	0a1b      	lsrs	r3, r3, #8
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	4904      	ldr	r1, [pc, #16]	; (8003238 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003226:	5ccb      	ldrb	r3, [r1, r3]
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003230:	4618      	mov	r0, r3
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40021000 	.word	0x40021000
 8003238:	08008fbc 	.word	0x08008fbc

0800323c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003240:	f7ff ffda 	bl	80031f8 <HAL_RCC_GetHCLKFreq>
 8003244:	4602      	mov	r2, r0
 8003246:	4b06      	ldr	r3, [pc, #24]	; (8003260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	0adb      	lsrs	r3, r3, #11
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	4904      	ldr	r1, [pc, #16]	; (8003264 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003252:	5ccb      	ldrb	r3, [r1, r3]
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021000 	.word	0x40021000
 8003264:	08008fbc 	.word	0x08008fbc

08003268 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800326e:	4b1e      	ldr	r3, [pc, #120]	; (80032e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003278:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	3301      	adds	r3, #1
 8003284:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b03      	cmp	r3, #3
 800328a:	d10c      	bne.n	80032a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800328c:	4a17      	ldr	r2, [pc, #92]	; (80032ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	4a14      	ldr	r2, [pc, #80]	; (80032e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003296:	68d2      	ldr	r2, [r2, #12]
 8003298:	0a12      	lsrs	r2, r2, #8
 800329a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	617b      	str	r3, [r7, #20]
    break;
 80032a4:	e00c      	b.n	80032c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032a6:	4a12      	ldr	r2, [pc, #72]	; (80032f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	4a0e      	ldr	r2, [pc, #56]	; (80032e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032b0:	68d2      	ldr	r2, [r2, #12]
 80032b2:	0a12      	lsrs	r2, r2, #8
 80032b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032b8:	fb02 f303 	mul.w	r3, r2, r3
 80032bc:	617b      	str	r3, [r7, #20]
    break;
 80032be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032c0:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	0e5b      	lsrs	r3, r3, #25
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	3301      	adds	r3, #1
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80032da:	687b      	ldr	r3, [r7, #4]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	40021000 	.word	0x40021000
 80032ec:	007a1200 	.word	0x007a1200
 80032f0:	00f42400 	.word	0x00f42400

080032f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032fc:	2300      	movs	r3, #0
 80032fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003300:	2300      	movs	r3, #0
 8003302:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 8098 	beq.w	8003442 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003312:	2300      	movs	r3, #0
 8003314:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003316:	4b43      	ldr	r3, [pc, #268]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10d      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003322:	4b40      	ldr	r3, [pc, #256]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003326:	4a3f      	ldr	r2, [pc, #252]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800332c:	6593      	str	r3, [r2, #88]	; 0x58
 800332e:	4b3d      	ldr	r3, [pc, #244]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003336:	60bb      	str	r3, [r7, #8]
 8003338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800333a:	2301      	movs	r3, #1
 800333c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800333e:	4b3a      	ldr	r3, [pc, #232]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a39      	ldr	r2, [pc, #228]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003348:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800334a:	f7fe fbf9 	bl	8001b40 <HAL_GetTick>
 800334e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003350:	e009      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003352:	f7fe fbf5 	bl	8001b40 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d902      	bls.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	74fb      	strb	r3, [r7, #19]
        break;
 8003364:	e005      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003366:	4b30      	ldr	r3, [pc, #192]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0ef      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003372:	7cfb      	ldrb	r3, [r7, #19]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d159      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003378:	4b2a      	ldr	r3, [pc, #168]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800337a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003382:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01e      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	429a      	cmp	r2, r3
 8003392:	d019      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003394:	4b23      	ldr	r3, [pc, #140]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800339e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033a0:	4b20      	ldr	r3, [pc, #128]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a6:	4a1f      	ldr	r2, [pc, #124]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033b0:	4b1c      	ldr	r3, [pc, #112]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b6:	4a1b      	ldr	r2, [pc, #108]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033c0:	4a18      	ldr	r2, [pc, #96]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d016      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d2:	f7fe fbb5 	bl	8001b40 <HAL_GetTick>
 80033d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d8:	e00b      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033da:	f7fe fbb1 	bl	8001b40 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d902      	bls.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	74fb      	strb	r3, [r7, #19]
            break;
 80033f0:	e006      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f2:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0ec      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003400:	7cfb      	ldrb	r3, [r7, #19]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10b      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003406:	4b07      	ldr	r3, [pc, #28]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	4903      	ldr	r1, [pc, #12]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800341c:	e008      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800341e:	7cfb      	ldrb	r3, [r7, #19]
 8003420:	74bb      	strb	r3, [r7, #18]
 8003422:	e005      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003424:	40021000 	.word	0x40021000
 8003428:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342c:	7cfb      	ldrb	r3, [r7, #19]
 800342e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003430:	7c7b      	ldrb	r3, [r7, #17]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d105      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003436:	4ba6      	ldr	r3, [pc, #664]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343a:	4aa5      	ldr	r2, [pc, #660]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800343c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003440:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800344e:	4ba0      	ldr	r3, [pc, #640]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003454:	f023 0203 	bic.w	r2, r3, #3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	499c      	ldr	r1, [pc, #624]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003470:	4b97      	ldr	r3, [pc, #604]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003476:	f023 020c 	bic.w	r2, r3, #12
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	4994      	ldr	r1, [pc, #592]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003492:	4b8f      	ldr	r3, [pc, #572]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003498:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	498b      	ldr	r1, [pc, #556]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034b4:	4b86      	ldr	r3, [pc, #536]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	4983      	ldr	r1, [pc, #524]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034d6:	4b7e      	ldr	r3, [pc, #504]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	497a      	ldr	r1, [pc, #488]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034f8:	4b75      	ldr	r3, [pc, #468]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	4972      	ldr	r1, [pc, #456]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800351a:	4b6d      	ldr	r3, [pc, #436]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800351c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003520:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	4969      	ldr	r1, [pc, #420]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800353c:	4b64      	ldr	r3, [pc, #400]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003542:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	4961      	ldr	r1, [pc, #388]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800355e:	4b5c      	ldr	r3, [pc, #368]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003564:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	4958      	ldr	r1, [pc, #352]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357c:	2b00      	cmp	r3, #0
 800357e:	d015      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003580:	4b53      	ldr	r3, [pc, #332]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003586:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	4950      	ldr	r1, [pc, #320]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800359e:	d105      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035a0:	4b4b      	ldr	r3, [pc, #300]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	4a4a      	ldr	r2, [pc, #296]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d015      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035b8:	4b45      	ldr	r3, [pc, #276]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	4942      	ldr	r1, [pc, #264]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035d6:	d105      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035d8:	4b3d      	ldr	r3, [pc, #244]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4a3c      	ldr	r2, [pc, #240]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d015      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035f0:	4b37      	ldr	r3, [pc, #220]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	4934      	ldr	r1, [pc, #208]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800360e:	d105      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003610:	4b2f      	ldr	r3, [pc, #188]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4a2e      	ldr	r2, [pc, #184]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800361a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d015      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003628:	4b29      	ldr	r3, [pc, #164]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003636:	4926      	ldr	r1, [pc, #152]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003642:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003646:	d105      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003648:	4b21      	ldr	r3, [pc, #132]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4a20      	ldr	r2, [pc, #128]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800364e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003652:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d015      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003660:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003666:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366e:	4918      	ldr	r1, [pc, #96]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800367e:	d105      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003680:	4b13      	ldr	r3, [pc, #76]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	4a12      	ldr	r2, [pc, #72]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003686:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800368a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d015      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003698:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a6:	490a      	ldr	r1, [pc, #40]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036b6:	d105      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4a04      	ldr	r2, [pc, #16]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80036c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40021000 	.word	0x40021000

080036d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e049      	b.n	800377a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d106      	bne.n	8003700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fe f814 	bl	8001728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3304      	adds	r3, #4
 8003710:	4619      	mov	r1, r3
 8003712:	4610      	mov	r0, r2
 8003714:	f000 fc4e 	bl	8003fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e049      	b.n	8003828 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d106      	bne.n	80037ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f841 	bl	8003830 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2202      	movs	r2, #2
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3304      	adds	r3, #4
 80037be:	4619      	mov	r1, r3
 80037c0:	4610      	mov	r0, r2
 80037c2:	f000 fbf7 	bl	8003fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b02      	cmp	r3, #2
 8003858:	d122      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b02      	cmp	r3, #2
 8003866:	d11b      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0202 	mvn.w	r2, #2
 8003870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fb76 	bl	8003f78 <HAL_TIM_IC_CaptureCallback>
 800388c:	e005      	b.n	800389a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fb68 	bl	8003f64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fb79 	bl	8003f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d122      	bne.n	80038f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d11b      	bne.n	80038f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0204 	mvn.w	r2, #4
 80038c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2202      	movs	r2, #2
 80038ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 fb4c 	bl	8003f78 <HAL_TIM_IC_CaptureCallback>
 80038e0:	e005      	b.n	80038ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fb3e 	bl	8003f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 fb4f 	bl	8003f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d122      	bne.n	8003948 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b08      	cmp	r3, #8
 800390e:	d11b      	bne.n	8003948 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f06f 0208 	mvn.w	r2, #8
 8003918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2204      	movs	r2, #4
 800391e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fb22 	bl	8003f78 <HAL_TIM_IC_CaptureCallback>
 8003934:	e005      	b.n	8003942 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fb14 	bl	8003f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fb25 	bl	8003f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f003 0310 	and.w	r3, r3, #16
 8003952:	2b10      	cmp	r3, #16
 8003954:	d122      	bne.n	800399c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b10      	cmp	r3, #16
 8003962:	d11b      	bne.n	800399c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0210 	mvn.w	r2, #16
 800396c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2208      	movs	r2, #8
 8003972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 faf8 	bl	8003f78 <HAL_TIM_IC_CaptureCallback>
 8003988:	e005      	b.n	8003996 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 faea 	bl	8003f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 fafb 	bl	8003f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d10e      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d107      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0201 	mvn.w	r2, #1
 80039c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fac4 	bl	8003f50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d2:	2b80      	cmp	r3, #128	; 0x80
 80039d4:	d10e      	bne.n	80039f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e0:	2b80      	cmp	r3, #128	; 0x80
 80039e2:	d107      	bne.n	80039f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f001 f82e 	bl	8004a50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a02:	d10e      	bne.n	8003a22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0e:	2b80      	cmp	r3, #128	; 0x80
 8003a10:	d107      	bne.n	8003a22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f001 f821 	bl	8004a64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2c:	2b40      	cmp	r3, #64	; 0x40
 8003a2e:	d10e      	bne.n	8003a4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3a:	2b40      	cmp	r3, #64	; 0x40
 8003a3c:	d107      	bne.n	8003a4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 faa9 	bl	8003fa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d10e      	bne.n	8003a7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	d107      	bne.n	8003a7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f06f 0220 	mvn.w	r2, #32
 8003a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 ffe1 	bl	8004a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a88:	d10f      	bne.n	8003aaa <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a98:	d107      	bne.n	8003aaa <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 ffe7 	bl	8004a78 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ab4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ab8:	d10f      	bne.n	8003ada <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ac8:	d107      	bne.n	8003ada <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 ffd9 	bl	8004a8c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ae8:	d10f      	bne.n	8003b0a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003af8:	d107      	bne.n	8003b0a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 ffcb 	bl	8004aa0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b18:	d10f      	bne.n	8003b3a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b28:	d107      	bne.n	8003b3a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 ffbd 	bl	8004ab4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e0fd      	b.n	8003d5a <HAL_TIM_PWM_ConfigChannel+0x216>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b14      	cmp	r3, #20
 8003b6a:	f200 80f0 	bhi.w	8003d4e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003b6e:	a201      	add	r2, pc, #4	; (adr r2, 8003b74 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b74:	08003bc9 	.word	0x08003bc9
 8003b78:	08003d4f 	.word	0x08003d4f
 8003b7c:	08003d4f 	.word	0x08003d4f
 8003b80:	08003d4f 	.word	0x08003d4f
 8003b84:	08003c09 	.word	0x08003c09
 8003b88:	08003d4f 	.word	0x08003d4f
 8003b8c:	08003d4f 	.word	0x08003d4f
 8003b90:	08003d4f 	.word	0x08003d4f
 8003b94:	08003c4b 	.word	0x08003c4b
 8003b98:	08003d4f 	.word	0x08003d4f
 8003b9c:	08003d4f 	.word	0x08003d4f
 8003ba0:	08003d4f 	.word	0x08003d4f
 8003ba4:	08003c8b 	.word	0x08003c8b
 8003ba8:	08003d4f 	.word	0x08003d4f
 8003bac:	08003d4f 	.word	0x08003d4f
 8003bb0:	08003d4f 	.word	0x08003d4f
 8003bb4:	08003ccd 	.word	0x08003ccd
 8003bb8:	08003d4f 	.word	0x08003d4f
 8003bbc:	08003d4f 	.word	0x08003d4f
 8003bc0:	08003d4f 	.word	0x08003d4f
 8003bc4:	08003d0d 	.word	0x08003d0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fa80 	bl	80040d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699a      	ldr	r2, [r3, #24]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0208 	orr.w	r2, r2, #8
 8003be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699a      	ldr	r2, [r3, #24]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0204 	bic.w	r2, r2, #4
 8003bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6999      	ldr	r1, [r3, #24]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	691a      	ldr	r2, [r3, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	619a      	str	r2, [r3, #24]
      break;
 8003c06:	e0a3      	b.n	8003d50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68b9      	ldr	r1, [r7, #8]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 faf0 	bl	80041f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699a      	ldr	r2, [r3, #24]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699a      	ldr	r2, [r3, #24]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6999      	ldr	r1, [r3, #24]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	021a      	lsls	r2, r3, #8
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	619a      	str	r2, [r3, #24]
      break;
 8003c48:	e082      	b.n	8003d50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68b9      	ldr	r1, [r7, #8]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 fb59 	bl	8004308 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	69da      	ldr	r2, [r3, #28]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0208 	orr.w	r2, r2, #8
 8003c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69da      	ldr	r2, [r3, #28]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0204 	bic.w	r2, r2, #4
 8003c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69d9      	ldr	r1, [r3, #28]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	61da      	str	r2, [r3, #28]
      break;
 8003c88:	e062      	b.n	8003d50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68b9      	ldr	r1, [r7, #8]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fbc1 	bl	8004418 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69da      	ldr	r2, [r3, #28]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69da      	ldr	r2, [r3, #28]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69d9      	ldr	r1, [r3, #28]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	021a      	lsls	r2, r3, #8
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	61da      	str	r2, [r3, #28]
      break;
 8003cca:	e041      	b.n	8003d50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fc2a 	bl	800452c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0208 	orr.w	r2, r2, #8
 8003ce6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0204 	bic.w	r2, r2, #4
 8003cf6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003d0a:	e021      	b.n	8003d50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fc6e 	bl	80045f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d36:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	021a      	lsls	r2, r3, #8
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003d4c:	e000      	b.n	8003d50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003d4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop

08003d64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_TIM_ConfigClockSource+0x18>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e0dd      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x1d4>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003d9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003da6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a62      	ldr	r2, [pc, #392]	; (8003f40 <HAL_TIM_ConfigClockSource+0x1dc>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	f000 80a9 	beq.w	8003f0e <HAL_TIM_ConfigClockSource+0x1aa>
 8003dbc:	4a60      	ldr	r2, [pc, #384]	; (8003f40 <HAL_TIM_ConfigClockSource+0x1dc>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	f200 80ae 	bhi.w	8003f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8003dc4:	4a5f      	ldr	r2, [pc, #380]	; (8003f44 <HAL_TIM_ConfigClockSource+0x1e0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	f000 80a1 	beq.w	8003f0e <HAL_TIM_ConfigClockSource+0x1aa>
 8003dcc:	4a5d      	ldr	r2, [pc, #372]	; (8003f44 <HAL_TIM_ConfigClockSource+0x1e0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	f200 80a6 	bhi.w	8003f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8003dd4:	4a5c      	ldr	r2, [pc, #368]	; (8003f48 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	f000 8099 	beq.w	8003f0e <HAL_TIM_ConfigClockSource+0x1aa>
 8003ddc:	4a5a      	ldr	r2, [pc, #360]	; (8003f48 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	f200 809e 	bhi.w	8003f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8003de4:	4a59      	ldr	r2, [pc, #356]	; (8003f4c <HAL_TIM_ConfigClockSource+0x1e8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	f000 8091 	beq.w	8003f0e <HAL_TIM_ConfigClockSource+0x1aa>
 8003dec:	4a57      	ldr	r2, [pc, #348]	; (8003f4c <HAL_TIM_ConfigClockSource+0x1e8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	f200 8096 	bhi.w	8003f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8003df4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003df8:	f000 8089 	beq.w	8003f0e <HAL_TIM_ConfigClockSource+0x1aa>
 8003dfc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003e00:	f200 808e 	bhi.w	8003f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8003e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e08:	d03e      	beq.n	8003e88 <HAL_TIM_ConfigClockSource+0x124>
 8003e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e0e:	f200 8087 	bhi.w	8003f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8003e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e16:	f000 8085 	beq.w	8003f24 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1e:	d87f      	bhi.n	8003f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8003e20:	2b70      	cmp	r3, #112	; 0x70
 8003e22:	d01a      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0xf6>
 8003e24:	2b70      	cmp	r3, #112	; 0x70
 8003e26:	d87b      	bhi.n	8003f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8003e28:	2b60      	cmp	r3, #96	; 0x60
 8003e2a:	d050      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x16a>
 8003e2c:	2b60      	cmp	r3, #96	; 0x60
 8003e2e:	d877      	bhi.n	8003f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8003e30:	2b50      	cmp	r3, #80	; 0x50
 8003e32:	d03c      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0x14a>
 8003e34:	2b50      	cmp	r3, #80	; 0x50
 8003e36:	d873      	bhi.n	8003f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8003e38:	2b40      	cmp	r3, #64	; 0x40
 8003e3a:	d058      	beq.n	8003eee <HAL_TIM_ConfigClockSource+0x18a>
 8003e3c:	2b40      	cmp	r3, #64	; 0x40
 8003e3e:	d86f      	bhi.n	8003f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8003e40:	2b30      	cmp	r3, #48	; 0x30
 8003e42:	d064      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0x1aa>
 8003e44:	2b30      	cmp	r3, #48	; 0x30
 8003e46:	d86b      	bhi.n	8003f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8003e48:	2b20      	cmp	r3, #32
 8003e4a:	d060      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0x1aa>
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d867      	bhi.n	8003f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d05c      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0x1aa>
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	d05a      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e58:	e062      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	6899      	ldr	r1, [r3, #8]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f000 fca5 	bl	80047b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	609a      	str	r2, [r3, #8]
      break;
 8003e86:	e04e      	b.n	8003f26 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	6899      	ldr	r1, [r3, #8]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f000 fc8e 	bl	80047b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eaa:	609a      	str	r2, [r3, #8]
      break;
 8003eac:	e03b      	b.n	8003f26 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6859      	ldr	r1, [r3, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f000 fc00 	bl	80046c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2150      	movs	r1, #80	; 0x50
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fc59 	bl	800477e <TIM_ITRx_SetConfig>
      break;
 8003ecc:	e02b      	b.n	8003f26 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	6859      	ldr	r1, [r3, #4]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	461a      	mov	r2, r3
 8003edc:	f000 fc1f 	bl	800471e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2160      	movs	r1, #96	; 0x60
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fc49 	bl	800477e <TIM_ITRx_SetConfig>
      break;
 8003eec:	e01b      	b.n	8003f26 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6859      	ldr	r1, [r3, #4]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	461a      	mov	r2, r3
 8003efc:	f000 fbe0 	bl	80046c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2140      	movs	r1, #64	; 0x40
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 fc39 	bl	800477e <TIM_ITRx_SetConfig>
      break;
 8003f0c:	e00b      	b.n	8003f26 <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4619      	mov	r1, r3
 8003f18:	4610      	mov	r0, r2
 8003f1a:	f000 fc30 	bl	800477e <TIM_ITRx_SetConfig>
        break;
 8003f1e:	e002      	b.n	8003f26 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8003f20:	bf00      	nop
 8003f22:	e000      	b.n	8003f26 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8003f24:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	00100070 	.word	0x00100070
 8003f44:	00100040 	.word	0x00100040
 8003f48:	00100030 	.word	0x00100030
 8003f4c:	00100020 	.word	0x00100020

08003f50 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a3c      	ldr	r2, [pc, #240]	; (80040b8 <TIM_Base_SetConfig+0x104>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d00f      	beq.n	8003fec <TIM_Base_SetConfig+0x38>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd2:	d00b      	beq.n	8003fec <TIM_Base_SetConfig+0x38>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a39      	ldr	r2, [pc, #228]	; (80040bc <TIM_Base_SetConfig+0x108>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d007      	beq.n	8003fec <TIM_Base_SetConfig+0x38>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a38      	ldr	r2, [pc, #224]	; (80040c0 <TIM_Base_SetConfig+0x10c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d003      	beq.n	8003fec <TIM_Base_SetConfig+0x38>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a37      	ldr	r2, [pc, #220]	; (80040c4 <TIM_Base_SetConfig+0x110>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d108      	bne.n	8003ffe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a2d      	ldr	r2, [pc, #180]	; (80040b8 <TIM_Base_SetConfig+0x104>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d01b      	beq.n	800403e <TIM_Base_SetConfig+0x8a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400c:	d017      	beq.n	800403e <TIM_Base_SetConfig+0x8a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a2a      	ldr	r2, [pc, #168]	; (80040bc <TIM_Base_SetConfig+0x108>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d013      	beq.n	800403e <TIM_Base_SetConfig+0x8a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a29      	ldr	r2, [pc, #164]	; (80040c0 <TIM_Base_SetConfig+0x10c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00f      	beq.n	800403e <TIM_Base_SetConfig+0x8a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a28      	ldr	r2, [pc, #160]	; (80040c4 <TIM_Base_SetConfig+0x110>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00b      	beq.n	800403e <TIM_Base_SetConfig+0x8a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a27      	ldr	r2, [pc, #156]	; (80040c8 <TIM_Base_SetConfig+0x114>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d007      	beq.n	800403e <TIM_Base_SetConfig+0x8a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a26      	ldr	r2, [pc, #152]	; (80040cc <TIM_Base_SetConfig+0x118>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d003      	beq.n	800403e <TIM_Base_SetConfig+0x8a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a25      	ldr	r2, [pc, #148]	; (80040d0 <TIM_Base_SetConfig+0x11c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d108      	bne.n	8004050 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a10      	ldr	r2, [pc, #64]	; (80040b8 <TIM_Base_SetConfig+0x104>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00f      	beq.n	800409c <TIM_Base_SetConfig+0xe8>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a11      	ldr	r2, [pc, #68]	; (80040c4 <TIM_Base_SetConfig+0x110>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00b      	beq.n	800409c <TIM_Base_SetConfig+0xe8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a10      	ldr	r2, [pc, #64]	; (80040c8 <TIM_Base_SetConfig+0x114>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d007      	beq.n	800409c <TIM_Base_SetConfig+0xe8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a0f      	ldr	r2, [pc, #60]	; (80040cc <TIM_Base_SetConfig+0x118>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d003      	beq.n	800409c <TIM_Base_SetConfig+0xe8>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a0e      	ldr	r2, [pc, #56]	; (80040d0 <TIM_Base_SetConfig+0x11c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d103      	bne.n	80040a4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	615a      	str	r2, [r3, #20]
}
 80040aa:	bf00      	nop
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40012c00 	.word	0x40012c00
 80040bc:	40000400 	.word	0x40000400
 80040c0:	40000800 	.word	0x40000800
 80040c4:	40013400 	.word	0x40013400
 80040c8:	40014000 	.word	0x40014000
 80040cc:	40014400 	.word	0x40014400
 80040d0:	40014800 	.word	0x40014800

080040d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f023 0201 	bic.w	r2, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0303 	bic.w	r3, r3, #3
 800410e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f023 0302 	bic.w	r3, r3, #2
 8004120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a2c      	ldr	r2, [pc, #176]	; (80041e0 <TIM_OC1_SetConfig+0x10c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00f      	beq.n	8004154 <TIM_OC1_SetConfig+0x80>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a2b      	ldr	r2, [pc, #172]	; (80041e4 <TIM_OC1_SetConfig+0x110>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00b      	beq.n	8004154 <TIM_OC1_SetConfig+0x80>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a2a      	ldr	r2, [pc, #168]	; (80041e8 <TIM_OC1_SetConfig+0x114>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d007      	beq.n	8004154 <TIM_OC1_SetConfig+0x80>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a29      	ldr	r2, [pc, #164]	; (80041ec <TIM_OC1_SetConfig+0x118>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d003      	beq.n	8004154 <TIM_OC1_SetConfig+0x80>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a28      	ldr	r2, [pc, #160]	; (80041f0 <TIM_OC1_SetConfig+0x11c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d10c      	bne.n	800416e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f023 0308 	bic.w	r3, r3, #8
 800415a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f023 0304 	bic.w	r3, r3, #4
 800416c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a1b      	ldr	r2, [pc, #108]	; (80041e0 <TIM_OC1_SetConfig+0x10c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00f      	beq.n	8004196 <TIM_OC1_SetConfig+0xc2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a1a      	ldr	r2, [pc, #104]	; (80041e4 <TIM_OC1_SetConfig+0x110>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00b      	beq.n	8004196 <TIM_OC1_SetConfig+0xc2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a19      	ldr	r2, [pc, #100]	; (80041e8 <TIM_OC1_SetConfig+0x114>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d007      	beq.n	8004196 <TIM_OC1_SetConfig+0xc2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a18      	ldr	r2, [pc, #96]	; (80041ec <TIM_OC1_SetConfig+0x118>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <TIM_OC1_SetConfig+0xc2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a17      	ldr	r2, [pc, #92]	; (80041f0 <TIM_OC1_SetConfig+0x11c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d111      	bne.n	80041ba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800419c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	621a      	str	r2, [r3, #32]
}
 80041d4:	bf00      	nop
 80041d6:	371c      	adds	r7, #28
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	40012c00 	.word	0x40012c00
 80041e4:	40013400 	.word	0x40013400
 80041e8:	40014000 	.word	0x40014000
 80041ec:	40014400 	.word	0x40014400
 80041f0:	40014800 	.word	0x40014800

080041f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f023 0210 	bic.w	r2, r3, #16
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4313      	orrs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f023 0320 	bic.w	r3, r3, #32
 8004242:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4313      	orrs	r3, r2
 800424e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a28      	ldr	r2, [pc, #160]	; (80042f4 <TIM_OC2_SetConfig+0x100>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d003      	beq.n	8004260 <TIM_OC2_SetConfig+0x6c>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a27      	ldr	r2, [pc, #156]	; (80042f8 <TIM_OC2_SetConfig+0x104>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d10d      	bne.n	800427c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	4313      	orrs	r3, r2
 8004272:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800427a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a1d      	ldr	r2, [pc, #116]	; (80042f4 <TIM_OC2_SetConfig+0x100>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00f      	beq.n	80042a4 <TIM_OC2_SetConfig+0xb0>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a1c      	ldr	r2, [pc, #112]	; (80042f8 <TIM_OC2_SetConfig+0x104>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00b      	beq.n	80042a4 <TIM_OC2_SetConfig+0xb0>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a1b      	ldr	r2, [pc, #108]	; (80042fc <TIM_OC2_SetConfig+0x108>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d007      	beq.n	80042a4 <TIM_OC2_SetConfig+0xb0>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a1a      	ldr	r2, [pc, #104]	; (8004300 <TIM_OC2_SetConfig+0x10c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <TIM_OC2_SetConfig+0xb0>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a19      	ldr	r2, [pc, #100]	; (8004304 <TIM_OC2_SetConfig+0x110>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d113      	bne.n	80042cc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	621a      	str	r2, [r3, #32]
}
 80042e6:	bf00      	nop
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40012c00 	.word	0x40012c00
 80042f8:	40013400 	.word	0x40013400
 80042fc:	40014000 	.word	0x40014000
 8004300:	40014400 	.word	0x40014400
 8004304:	40014800 	.word	0x40014800

08004308 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0303 	bic.w	r3, r3, #3
 8004342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a27      	ldr	r2, [pc, #156]	; (8004404 <TIM_OC3_SetConfig+0xfc>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d003      	beq.n	8004372 <TIM_OC3_SetConfig+0x6a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a26      	ldr	r2, [pc, #152]	; (8004408 <TIM_OC3_SetConfig+0x100>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d10d      	bne.n	800438e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004378:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	021b      	lsls	r3, r3, #8
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800438c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a1c      	ldr	r2, [pc, #112]	; (8004404 <TIM_OC3_SetConfig+0xfc>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00f      	beq.n	80043b6 <TIM_OC3_SetConfig+0xae>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a1b      	ldr	r2, [pc, #108]	; (8004408 <TIM_OC3_SetConfig+0x100>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00b      	beq.n	80043b6 <TIM_OC3_SetConfig+0xae>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a1a      	ldr	r2, [pc, #104]	; (800440c <TIM_OC3_SetConfig+0x104>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d007      	beq.n	80043b6 <TIM_OC3_SetConfig+0xae>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a19      	ldr	r2, [pc, #100]	; (8004410 <TIM_OC3_SetConfig+0x108>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d003      	beq.n	80043b6 <TIM_OC3_SetConfig+0xae>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a18      	ldr	r2, [pc, #96]	; (8004414 <TIM_OC3_SetConfig+0x10c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d113      	bne.n	80043de <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	621a      	str	r2, [r3, #32]
}
 80043f8:	bf00      	nop
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	40012c00 	.word	0x40012c00
 8004408:	40013400 	.word	0x40013400
 800440c:	40014000 	.word	0x40014000
 8004410:	40014400 	.word	0x40014400
 8004414:	40014800 	.word	0x40014800

08004418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800444a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004466:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	031b      	lsls	r3, r3, #12
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a28      	ldr	r2, [pc, #160]	; (8004518 <TIM_OC4_SetConfig+0x100>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d003      	beq.n	8004484 <TIM_OC4_SetConfig+0x6c>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a27      	ldr	r2, [pc, #156]	; (800451c <TIM_OC4_SetConfig+0x104>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d10d      	bne.n	80044a0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800448a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	031b      	lsls	r3, r3, #12
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800449e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a1d      	ldr	r2, [pc, #116]	; (8004518 <TIM_OC4_SetConfig+0x100>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00f      	beq.n	80044c8 <TIM_OC4_SetConfig+0xb0>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a1c      	ldr	r2, [pc, #112]	; (800451c <TIM_OC4_SetConfig+0x104>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00b      	beq.n	80044c8 <TIM_OC4_SetConfig+0xb0>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a1b      	ldr	r2, [pc, #108]	; (8004520 <TIM_OC4_SetConfig+0x108>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d007      	beq.n	80044c8 <TIM_OC4_SetConfig+0xb0>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a1a      	ldr	r2, [pc, #104]	; (8004524 <TIM_OC4_SetConfig+0x10c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d003      	beq.n	80044c8 <TIM_OC4_SetConfig+0xb0>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a19      	ldr	r2, [pc, #100]	; (8004528 <TIM_OC4_SetConfig+0x110>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d113      	bne.n	80044f0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044ce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044d6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	019b      	lsls	r3, r3, #6
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	019b      	lsls	r3, r3, #6
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	621a      	str	r2, [r3, #32]
}
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40012c00 	.word	0x40012c00
 800451c:	40013400 	.word	0x40013400
 8004520:	40014000 	.word	0x40014000
 8004524:	40014400 	.word	0x40014400
 8004528:	40014800 	.word	0x40014800

0800452c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800455a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004570:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	041b      	lsls	r3, r3, #16
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	4313      	orrs	r3, r2
 800457c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a17      	ldr	r2, [pc, #92]	; (80045e0 <TIM_OC5_SetConfig+0xb4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00f      	beq.n	80045a6 <TIM_OC5_SetConfig+0x7a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a16      	ldr	r2, [pc, #88]	; (80045e4 <TIM_OC5_SetConfig+0xb8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00b      	beq.n	80045a6 <TIM_OC5_SetConfig+0x7a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a15      	ldr	r2, [pc, #84]	; (80045e8 <TIM_OC5_SetConfig+0xbc>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d007      	beq.n	80045a6 <TIM_OC5_SetConfig+0x7a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a14      	ldr	r2, [pc, #80]	; (80045ec <TIM_OC5_SetConfig+0xc0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d003      	beq.n	80045a6 <TIM_OC5_SetConfig+0x7a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a13      	ldr	r2, [pc, #76]	; (80045f0 <TIM_OC5_SetConfig+0xc4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d109      	bne.n	80045ba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	021b      	lsls	r3, r3, #8
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	621a      	str	r2, [r3, #32]
}
 80045d4:	bf00      	nop
 80045d6:	371c      	adds	r7, #28
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	40012c00 	.word	0x40012c00
 80045e4:	40013400 	.word	0x40013400
 80045e8:	40014000 	.word	0x40014000
 80045ec:	40014400 	.word	0x40014400
 80045f0:	40014800 	.word	0x40014800

080045f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800463a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	051b      	lsls	r3, r3, #20
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a18      	ldr	r2, [pc, #96]	; (80046ac <TIM_OC6_SetConfig+0xb8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d00f      	beq.n	8004670 <TIM_OC6_SetConfig+0x7c>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a17      	ldr	r2, [pc, #92]	; (80046b0 <TIM_OC6_SetConfig+0xbc>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d00b      	beq.n	8004670 <TIM_OC6_SetConfig+0x7c>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a16      	ldr	r2, [pc, #88]	; (80046b4 <TIM_OC6_SetConfig+0xc0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d007      	beq.n	8004670 <TIM_OC6_SetConfig+0x7c>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a15      	ldr	r2, [pc, #84]	; (80046b8 <TIM_OC6_SetConfig+0xc4>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d003      	beq.n	8004670 <TIM_OC6_SetConfig+0x7c>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a14      	ldr	r2, [pc, #80]	; (80046bc <TIM_OC6_SetConfig+0xc8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d109      	bne.n	8004684 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004676:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	029b      	lsls	r3, r3, #10
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	4313      	orrs	r3, r2
 8004682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	621a      	str	r2, [r3, #32]
}
 800469e:	bf00      	nop
 80046a0:	371c      	adds	r7, #28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40012c00 	.word	0x40012c00
 80046b0:	40013400 	.word	0x40013400
 80046b4:	40014000 	.word	0x40014000
 80046b8:	40014400 	.word	0x40014400
 80046bc:	40014800 	.word	0x40014800

080046c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	f023 0201 	bic.w	r2, r3, #1
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f023 030a 	bic.w	r3, r3, #10
 80046fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	621a      	str	r2, [r3, #32]
}
 8004712:	bf00      	nop
 8004714:	371c      	adds	r7, #28
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800471e:	b480      	push	{r7}
 8004720:	b087      	sub	sp, #28
 8004722:	af00      	add	r7, sp, #0
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	f023 0210 	bic.w	r2, r3, #16
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004748:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	031b      	lsls	r3, r3, #12
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	4313      	orrs	r3, r2
 8004752:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800475a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	621a      	str	r2, [r3, #32]
}
 8004772:	bf00      	nop
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800477e:	b480      	push	{r7}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004798:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	f043 0307 	orr.w	r3, r3, #7
 80047a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	609a      	str	r2, [r3, #8]
}
 80047ac:	bf00      	nop
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	021a      	lsls	r2, r3, #8
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	431a      	orrs	r2, r3
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	4313      	orrs	r3, r2
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	609a      	str	r2, [r3, #8]
}
 80047ec:	bf00      	nop
 80047ee:	371c      	adds	r7, #28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800480c:	2302      	movs	r3, #2
 800480e:	e065      	b.n	80048dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a2c      	ldr	r2, [pc, #176]	; (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d004      	beq.n	8004844 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a2b      	ldr	r2, [pc, #172]	; (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d108      	bne.n	8004856 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800484a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800485c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004860:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a1b      	ldr	r2, [pc, #108]	; (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d018      	beq.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004886:	d013      	beq.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a18      	ldr	r2, [pc, #96]	; (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00e      	beq.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a17      	ldr	r2, [pc, #92]	; (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d009      	beq.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a12      	ldr	r2, [pc, #72]	; (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d004      	beq.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a13      	ldr	r2, [pc, #76]	; (80048f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d10c      	bne.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	40012c00 	.word	0x40012c00
 80048ec:	40013400 	.word	0x40013400
 80048f0:	40000400 	.word	0x40000400
 80048f4:	40000800 	.word	0x40000800
 80048f8:	40014000 	.word	0x40014000

080048fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004914:	2302      	movs	r3, #2
 8004916:	e087      	b.n	8004a28 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	4313      	orrs	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	041b      	lsls	r3, r3, #16
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a27      	ldr	r2, [pc, #156]	; (8004a34 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d004      	beq.n	80049a6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a25      	ldr	r2, [pc, #148]	; (8004a38 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d106      	bne.n	80049b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a1e      	ldr	r2, [pc, #120]	; (8004a34 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d004      	beq.n	80049c8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a1d      	ldr	r2, [pc, #116]	; (8004a38 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d126      	bne.n	8004a16 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d2:	051b      	lsls	r3, r3, #20
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a0e      	ldr	r2, [pc, #56]	; (8004a34 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d004      	beq.n	8004a08 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a0d      	ldr	r2, [pc, #52]	; (8004a38 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d106      	bne.n	8004a16 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	40012c00 	.word	0x40012c00
 8004a38:	40013400 	.word	0x40013400

08004a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e042      	b.n	8004b60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d106      	bne.n	8004af2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7fc ff15 	bl	800191c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2224      	movs	r2, #36	; 0x24
 8004af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0201 	bic.w	r2, r2, #1
 8004b08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fb5c 	bl	80051c8 <UART_SetConfig>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d101      	bne.n	8004b1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e022      	b.n	8004b60 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fdee 	bl	8005704 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 fe75 	bl	8005848 <UART_CheckIdleState>
 8004b5e:	4603      	mov	r3, r0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08a      	sub	sp, #40	; 0x28
 8004b6c:	af02      	add	r7, sp, #8
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	603b      	str	r3, [r7, #0]
 8004b74:	4613      	mov	r3, r2
 8004b76:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b7e:	2b20      	cmp	r3, #32
 8004b80:	f040 8083 	bne.w	8004c8a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <HAL_UART_Transmit+0x28>
 8004b8a:	88fb      	ldrh	r3, [r7, #6]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e07b      	b.n	8004c8c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_UART_Transmit+0x3a>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e074      	b.n	8004c8c <HAL_UART_Transmit+0x124>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2221      	movs	r2, #33	; 0x21
 8004bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bba:	f7fc ffc1 	bl	8001b40 <HAL_GetTick>
 8004bbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	88fa      	ldrh	r2, [r7, #6]
 8004bc4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	88fa      	ldrh	r2, [r7, #6]
 8004bcc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd8:	d108      	bne.n	8004bec <HAL_UART_Transmit+0x84>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d104      	bne.n	8004bec <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	61bb      	str	r3, [r7, #24]
 8004bea:	e003      	b.n	8004bf4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004bfc:	e02c      	b.n	8004c58 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2200      	movs	r2, #0
 8004c06:	2180      	movs	r1, #128	; 0x80
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 fe68 	bl	80058de <UART_WaitOnFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e039      	b.n	8004c8c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10b      	bne.n	8004c36 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	3302      	adds	r3, #2
 8004c32:	61bb      	str	r3, [r7, #24]
 8004c34:	e007      	b.n	8004c46 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	781a      	ldrb	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	3301      	adds	r3, #1
 8004c44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1cc      	bne.n	8004bfe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2140      	movs	r1, #64	; 0x40
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 fe35 	bl	80058de <UART_WaitOnFlagUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e006      	b.n	8004c8c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	e000      	b.n	8004c8c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004c8a:	2302      	movs	r3, #2
  }
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3720      	adds	r7, #32
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	d131      	bne.n	8004d10 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_UART_Receive_IT+0x24>
 8004cb2:	88fb      	ldrh	r3, [r7, #6]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e02a      	b.n	8004d12 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d101      	bne.n	8004cca <HAL_UART_Receive_IT+0x36>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e023      	b.n	8004d12 <HAL_UART_Receive_IT+0x7e>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a0f      	ldr	r2, [pc, #60]	; (8004d1c <HAL_UART_Receive_IT+0x88>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00e      	beq.n	8004d00 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d007      	beq.n	8004d00 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004cfe:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d00:	88fb      	ldrh	r3, [r7, #6]
 8004d02:	461a      	mov	r2, r3
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 fe6a 	bl	80059e0 <UART_Start_Receive_IT>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	e000      	b.n	8004d12 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004d10:	2302      	movs	r3, #2
  }
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40008000 	.word	0x40008000

08004d20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	f640 030f 	movw	r3, #2063	; 0x80f
 8004d46:	4013      	ands	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d118      	bne.n	8004d82 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d013      	beq.n	8004d82 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d104      	bne.n	8004d6e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d009      	beq.n	8004d82 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 81fb 	beq.w	800516e <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	4798      	blx	r3
      }
      return;
 8004d80:	e1f5      	b.n	800516e <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 80ef 	beq.w	8004f68 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4b73      	ldr	r3, [pc, #460]	; (8004f5c <HAL_UART_IRQHandler+0x23c>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d105      	bne.n	8004da0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	4b72      	ldr	r3, [pc, #456]	; (8004f60 <HAL_UART_IRQHandler+0x240>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 80e4 	beq.w	8004f68 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d010      	beq.n	8004dcc <HAL_UART_IRQHandler+0xac>
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00b      	beq.n	8004dcc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2201      	movs	r2, #1
 8004dba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dc2:	f043 0201 	orr.w	r2, r3, #1
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d010      	beq.n	8004df8 <HAL_UART_IRQHandler+0xd8>
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00b      	beq.n	8004df8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2202      	movs	r2, #2
 8004de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dee:	f043 0204 	orr.w	r2, r3, #4
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d010      	beq.n	8004e24 <HAL_UART_IRQHandler+0x104>
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00b      	beq.n	8004e24 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2204      	movs	r2, #4
 8004e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e1a:	f043 0202 	orr.w	r2, r3, #2
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d015      	beq.n	8004e5a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d104      	bne.n	8004e42 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	4b48      	ldr	r3, [pc, #288]	; (8004f5c <HAL_UART_IRQHandler+0x23c>)
 8004e3c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00b      	beq.n	8004e5a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2208      	movs	r2, #8
 8004e48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e50:	f043 0208 	orr.w	r2, r3, #8
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d011      	beq.n	8004e88 <HAL_UART_IRQHandler+0x168>
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00c      	beq.n	8004e88 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e7e:	f043 0220 	orr.w	r2, r3, #32
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 816f 	beq.w	8005172 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d011      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d104      	bne.n	8004eb2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d007      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ec8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed4:	2b40      	cmp	r3, #64	; 0x40
 8004ed6:	d004      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d031      	beq.n	8004f46 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fe3a 	bl	8005b5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b40      	cmp	r3, #64	; 0x40
 8004ef4:	d123      	bne.n	8004f3e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f04:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d013      	beq.n	8004f36 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f12:	4a14      	ldr	r2, [pc, #80]	; (8004f64 <HAL_UART_IRQHandler+0x244>)
 8004f14:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fc ffa6 	bl	8001e6c <HAL_DMA_Abort_IT>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d017      	beq.n	8004f56 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004f30:	4610      	mov	r0, r2
 8004f32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f34:	e00f      	b.n	8004f56 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f930 	bl	800519c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f3c:	e00b      	b.n	8004f56 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f92c 	bl	800519c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f44:	e007      	b.n	8004f56 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f928 	bl	800519c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004f54:	e10d      	b.n	8005172 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f56:	bf00      	nop
    return;
 8004f58:	e10b      	b.n	8005172 <HAL_UART_IRQHandler+0x452>
 8004f5a:	bf00      	nop
 8004f5c:	10000001 	.word	0x10000001
 8004f60:	04000120 	.word	0x04000120
 8004f64:	08005bc1 	.word	0x08005bc1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	f040 80ab 	bne.w	80050c8 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 80a5 	beq.w	80050c8 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 809f 	beq.w	80050c8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2210      	movs	r2, #16
 8004f90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9c:	2b40      	cmp	r3, #64	; 0x40
 8004f9e:	d155      	bne.n	800504c <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8004faa:	893b      	ldrh	r3, [r7, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 80e2 	beq.w	8005176 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004fb8:	893a      	ldrh	r2, [r7, #8]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	f080 80db 	bcs.w	8005176 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	893a      	ldrh	r2, [r7, #8]
 8004fc4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0320 	and.w	r3, r3, #32
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d12b      	bne.n	8005030 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fe6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0201 	bic.w	r2, r2, #1
 8004ff6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005006:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0210 	bic.w	r2, r2, #16
 8005024:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800502a:	4618      	mov	r0, r3
 800502c:	f7fc fec5 	bl	8001dba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800503c:	b29b      	uxth	r3, r3
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	b29b      	uxth	r3, r3
 8005042:	4619      	mov	r1, r3
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f8b3 	bl	80051b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800504a:	e094      	b.n	8005176 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005058:	b29b      	uxth	r3, r3
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005064:	b29b      	uxth	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 8087 	beq.w	800517a <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 800506c:	897b      	ldrh	r3, [r7, #10]
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 8083 	beq.w	800517a <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005082:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6812      	ldr	r2, [r2, #0]
 800508e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005092:	f023 0301 	bic.w	r3, r3, #1
 8005096:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0210 	bic.w	r2, r2, #16
 80050ba:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050bc:	897b      	ldrh	r3, [r7, #10]
 80050be:	4619      	mov	r1, r3
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f875 	bl	80051b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80050c6:	e058      	b.n	800517a <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00d      	beq.n	80050ee <HAL_UART_IRQHandler+0x3ce>
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d008      	beq.n	80050ee <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80050e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f001 f876 	bl	80061d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050ec:	e048      	b.n	8005180 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d012      	beq.n	800511e <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d104      	bne.n	800510c <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d008      	beq.n	800511e <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005110:	2b00      	cmp	r3, #0
 8005112:	d034      	beq.n	800517e <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	4798      	blx	r3
    }
    return;
 800511c:	e02f      	b.n	800517e <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <HAL_UART_IRQHandler+0x41a>
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fd5a 	bl	8005bec <UART_EndTransmit_IT>
    return;
 8005138:	e022      	b.n	8005180 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d008      	beq.n	8005156 <HAL_UART_IRQHandler+0x436>
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f001 f856 	bl	8006200 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005154:	e014      	b.n	8005180 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00f      	beq.n	8005180 <HAL_UART_IRQHandler+0x460>
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	2b00      	cmp	r3, #0
 8005164:	da0c      	bge.n	8005180 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f001 f840 	bl	80061ec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800516c:	e008      	b.n	8005180 <HAL_UART_IRQHandler+0x460>
      return;
 800516e:	bf00      	nop
 8005170:	e006      	b.n	8005180 <HAL_UART_IRQHandler+0x460>
    return;
 8005172:	bf00      	nop
 8005174:	e004      	b.n	8005180 <HAL_UART_IRQHandler+0x460>
      return;
 8005176:	bf00      	nop
 8005178:	e002      	b.n	8005180 <HAL_UART_IRQHandler+0x460>
      return;
 800517a:	bf00      	nop
 800517c:	e000      	b.n	8005180 <HAL_UART_IRQHandler+0x460>
    return;
 800517e:	bf00      	nop
  }
}
 8005180:	3720      	adds	r7, #32
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop

08005188 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051c8:	b5b0      	push	{r4, r5, r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	4baf      	ldr	r3, [pc, #700]	; (80054b0 <UART_SetConfig+0x2e8>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6812      	ldr	r2, [r2, #0]
 80051fa:	69f9      	ldr	r1, [r7, #28]
 80051fc:	430b      	orrs	r3, r1
 80051fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4aa4      	ldr	r2, [pc, #656]	; (80054b4 <UART_SetConfig+0x2ec>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d004      	beq.n	8005230 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	69fa      	ldr	r2, [r7, #28]
 800522c:	4313      	orrs	r3, r2
 800522e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800523a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6812      	ldr	r2, [r2, #0]
 8005242:	69f9      	ldr	r1, [r7, #28]
 8005244:	430b      	orrs	r3, r1
 8005246:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524e:	f023 010f 	bic.w	r1, r3, #15
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a95      	ldr	r2, [pc, #596]	; (80054b8 <UART_SetConfig+0x2f0>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d120      	bne.n	80052aa <UART_SetConfig+0xe2>
 8005268:	4b94      	ldr	r3, [pc, #592]	; (80054bc <UART_SetConfig+0x2f4>)
 800526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526e:	f003 0303 	and.w	r3, r3, #3
 8005272:	2b03      	cmp	r3, #3
 8005274:	d816      	bhi.n	80052a4 <UART_SetConfig+0xdc>
 8005276:	a201      	add	r2, pc, #4	; (adr r2, 800527c <UART_SetConfig+0xb4>)
 8005278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527c:	0800528d 	.word	0x0800528d
 8005280:	08005299 	.word	0x08005299
 8005284:	08005293 	.word	0x08005293
 8005288:	0800529f 	.word	0x0800529f
 800528c:	2301      	movs	r3, #1
 800528e:	76fb      	strb	r3, [r7, #27]
 8005290:	e0bc      	b.n	800540c <UART_SetConfig+0x244>
 8005292:	2302      	movs	r3, #2
 8005294:	76fb      	strb	r3, [r7, #27]
 8005296:	e0b9      	b.n	800540c <UART_SetConfig+0x244>
 8005298:	2304      	movs	r3, #4
 800529a:	76fb      	strb	r3, [r7, #27]
 800529c:	e0b6      	b.n	800540c <UART_SetConfig+0x244>
 800529e:	2308      	movs	r3, #8
 80052a0:	76fb      	strb	r3, [r7, #27]
 80052a2:	e0b3      	b.n	800540c <UART_SetConfig+0x244>
 80052a4:	2310      	movs	r3, #16
 80052a6:	76fb      	strb	r3, [r7, #27]
 80052a8:	e0b0      	b.n	800540c <UART_SetConfig+0x244>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a84      	ldr	r2, [pc, #528]	; (80054c0 <UART_SetConfig+0x2f8>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d132      	bne.n	800531a <UART_SetConfig+0x152>
 80052b4:	4b81      	ldr	r3, [pc, #516]	; (80054bc <UART_SetConfig+0x2f4>)
 80052b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ba:	f003 030c 	and.w	r3, r3, #12
 80052be:	2b0c      	cmp	r3, #12
 80052c0:	d828      	bhi.n	8005314 <UART_SetConfig+0x14c>
 80052c2:	a201      	add	r2, pc, #4	; (adr r2, 80052c8 <UART_SetConfig+0x100>)
 80052c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c8:	080052fd 	.word	0x080052fd
 80052cc:	08005315 	.word	0x08005315
 80052d0:	08005315 	.word	0x08005315
 80052d4:	08005315 	.word	0x08005315
 80052d8:	08005309 	.word	0x08005309
 80052dc:	08005315 	.word	0x08005315
 80052e0:	08005315 	.word	0x08005315
 80052e4:	08005315 	.word	0x08005315
 80052e8:	08005303 	.word	0x08005303
 80052ec:	08005315 	.word	0x08005315
 80052f0:	08005315 	.word	0x08005315
 80052f4:	08005315 	.word	0x08005315
 80052f8:	0800530f 	.word	0x0800530f
 80052fc:	2300      	movs	r3, #0
 80052fe:	76fb      	strb	r3, [r7, #27]
 8005300:	e084      	b.n	800540c <UART_SetConfig+0x244>
 8005302:	2302      	movs	r3, #2
 8005304:	76fb      	strb	r3, [r7, #27]
 8005306:	e081      	b.n	800540c <UART_SetConfig+0x244>
 8005308:	2304      	movs	r3, #4
 800530a:	76fb      	strb	r3, [r7, #27]
 800530c:	e07e      	b.n	800540c <UART_SetConfig+0x244>
 800530e:	2308      	movs	r3, #8
 8005310:	76fb      	strb	r3, [r7, #27]
 8005312:	e07b      	b.n	800540c <UART_SetConfig+0x244>
 8005314:	2310      	movs	r3, #16
 8005316:	76fb      	strb	r3, [r7, #27]
 8005318:	e078      	b.n	800540c <UART_SetConfig+0x244>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a69      	ldr	r2, [pc, #420]	; (80054c4 <UART_SetConfig+0x2fc>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d120      	bne.n	8005366 <UART_SetConfig+0x19e>
 8005324:	4b65      	ldr	r3, [pc, #404]	; (80054bc <UART_SetConfig+0x2f4>)
 8005326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800532e:	2b30      	cmp	r3, #48	; 0x30
 8005330:	d013      	beq.n	800535a <UART_SetConfig+0x192>
 8005332:	2b30      	cmp	r3, #48	; 0x30
 8005334:	d814      	bhi.n	8005360 <UART_SetConfig+0x198>
 8005336:	2b20      	cmp	r3, #32
 8005338:	d009      	beq.n	800534e <UART_SetConfig+0x186>
 800533a:	2b20      	cmp	r3, #32
 800533c:	d810      	bhi.n	8005360 <UART_SetConfig+0x198>
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <UART_SetConfig+0x180>
 8005342:	2b10      	cmp	r3, #16
 8005344:	d006      	beq.n	8005354 <UART_SetConfig+0x18c>
 8005346:	e00b      	b.n	8005360 <UART_SetConfig+0x198>
 8005348:	2300      	movs	r3, #0
 800534a:	76fb      	strb	r3, [r7, #27]
 800534c:	e05e      	b.n	800540c <UART_SetConfig+0x244>
 800534e:	2302      	movs	r3, #2
 8005350:	76fb      	strb	r3, [r7, #27]
 8005352:	e05b      	b.n	800540c <UART_SetConfig+0x244>
 8005354:	2304      	movs	r3, #4
 8005356:	76fb      	strb	r3, [r7, #27]
 8005358:	e058      	b.n	800540c <UART_SetConfig+0x244>
 800535a:	2308      	movs	r3, #8
 800535c:	76fb      	strb	r3, [r7, #27]
 800535e:	e055      	b.n	800540c <UART_SetConfig+0x244>
 8005360:	2310      	movs	r3, #16
 8005362:	76fb      	strb	r3, [r7, #27]
 8005364:	e052      	b.n	800540c <UART_SetConfig+0x244>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a57      	ldr	r2, [pc, #348]	; (80054c8 <UART_SetConfig+0x300>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d120      	bne.n	80053b2 <UART_SetConfig+0x1ea>
 8005370:	4b52      	ldr	r3, [pc, #328]	; (80054bc <UART_SetConfig+0x2f4>)
 8005372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005376:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800537a:	2bc0      	cmp	r3, #192	; 0xc0
 800537c:	d013      	beq.n	80053a6 <UART_SetConfig+0x1de>
 800537e:	2bc0      	cmp	r3, #192	; 0xc0
 8005380:	d814      	bhi.n	80053ac <UART_SetConfig+0x1e4>
 8005382:	2b80      	cmp	r3, #128	; 0x80
 8005384:	d009      	beq.n	800539a <UART_SetConfig+0x1d2>
 8005386:	2b80      	cmp	r3, #128	; 0x80
 8005388:	d810      	bhi.n	80053ac <UART_SetConfig+0x1e4>
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <UART_SetConfig+0x1cc>
 800538e:	2b40      	cmp	r3, #64	; 0x40
 8005390:	d006      	beq.n	80053a0 <UART_SetConfig+0x1d8>
 8005392:	e00b      	b.n	80053ac <UART_SetConfig+0x1e4>
 8005394:	2300      	movs	r3, #0
 8005396:	76fb      	strb	r3, [r7, #27]
 8005398:	e038      	b.n	800540c <UART_SetConfig+0x244>
 800539a:	2302      	movs	r3, #2
 800539c:	76fb      	strb	r3, [r7, #27]
 800539e:	e035      	b.n	800540c <UART_SetConfig+0x244>
 80053a0:	2304      	movs	r3, #4
 80053a2:	76fb      	strb	r3, [r7, #27]
 80053a4:	e032      	b.n	800540c <UART_SetConfig+0x244>
 80053a6:	2308      	movs	r3, #8
 80053a8:	76fb      	strb	r3, [r7, #27]
 80053aa:	e02f      	b.n	800540c <UART_SetConfig+0x244>
 80053ac:	2310      	movs	r3, #16
 80053ae:	76fb      	strb	r3, [r7, #27]
 80053b0:	e02c      	b.n	800540c <UART_SetConfig+0x244>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a3f      	ldr	r2, [pc, #252]	; (80054b4 <UART_SetConfig+0x2ec>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d125      	bne.n	8005408 <UART_SetConfig+0x240>
 80053bc:	4b3f      	ldr	r3, [pc, #252]	; (80054bc <UART_SetConfig+0x2f4>)
 80053be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053ca:	d017      	beq.n	80053fc <UART_SetConfig+0x234>
 80053cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053d0:	d817      	bhi.n	8005402 <UART_SetConfig+0x23a>
 80053d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d6:	d00b      	beq.n	80053f0 <UART_SetConfig+0x228>
 80053d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053dc:	d811      	bhi.n	8005402 <UART_SetConfig+0x23a>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <UART_SetConfig+0x222>
 80053e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e6:	d006      	beq.n	80053f6 <UART_SetConfig+0x22e>
 80053e8:	e00b      	b.n	8005402 <UART_SetConfig+0x23a>
 80053ea:	2300      	movs	r3, #0
 80053ec:	76fb      	strb	r3, [r7, #27]
 80053ee:	e00d      	b.n	800540c <UART_SetConfig+0x244>
 80053f0:	2302      	movs	r3, #2
 80053f2:	76fb      	strb	r3, [r7, #27]
 80053f4:	e00a      	b.n	800540c <UART_SetConfig+0x244>
 80053f6:	2304      	movs	r3, #4
 80053f8:	76fb      	strb	r3, [r7, #27]
 80053fa:	e007      	b.n	800540c <UART_SetConfig+0x244>
 80053fc:	2308      	movs	r3, #8
 80053fe:	76fb      	strb	r3, [r7, #27]
 8005400:	e004      	b.n	800540c <UART_SetConfig+0x244>
 8005402:	2310      	movs	r3, #16
 8005404:	76fb      	strb	r3, [r7, #27]
 8005406:	e001      	b.n	800540c <UART_SetConfig+0x244>
 8005408:	2310      	movs	r3, #16
 800540a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a28      	ldr	r2, [pc, #160]	; (80054b4 <UART_SetConfig+0x2ec>)
 8005412:	4293      	cmp	r3, r2
 8005414:	f040 809e 	bne.w	8005554 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005418:	7efb      	ldrb	r3, [r7, #27]
 800541a:	2b08      	cmp	r3, #8
 800541c:	d823      	bhi.n	8005466 <UART_SetConfig+0x29e>
 800541e:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <UART_SetConfig+0x25c>)
 8005420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005424:	08005449 	.word	0x08005449
 8005428:	08005467 	.word	0x08005467
 800542c:	08005451 	.word	0x08005451
 8005430:	08005467 	.word	0x08005467
 8005434:	08005457 	.word	0x08005457
 8005438:	08005467 	.word	0x08005467
 800543c:	08005467 	.word	0x08005467
 8005440:	08005467 	.word	0x08005467
 8005444:	0800545f 	.word	0x0800545f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005448:	f7fd fee2 	bl	8003210 <HAL_RCC_GetPCLK1Freq>
 800544c:	6178      	str	r0, [r7, #20]
        break;
 800544e:	e00f      	b.n	8005470 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005450:	4b1e      	ldr	r3, [pc, #120]	; (80054cc <UART_SetConfig+0x304>)
 8005452:	617b      	str	r3, [r7, #20]
        break;
 8005454:	e00c      	b.n	8005470 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005456:	f7fd fe6d 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 800545a:	6178      	str	r0, [r7, #20]
        break;
 800545c:	e008      	b.n	8005470 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800545e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005462:	617b      	str	r3, [r7, #20]
        break;
 8005464:	e004      	b.n	8005470 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	76bb      	strb	r3, [r7, #26]
        break;
 800546e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 812e 	beq.w	80056d4 <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	4a14      	ldr	r2, [pc, #80]	; (80054d0 <UART_SetConfig+0x308>)
 800547e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005482:	461a      	mov	r2, r3
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	fbb3 f3f2 	udiv	r3, r3, r2
 800548a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	4613      	mov	r3, r2
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	4413      	add	r3, r2
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	429a      	cmp	r2, r3
 800549a:	d305      	bcc.n	80054a8 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d915      	bls.n	80054d4 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	76bb      	strb	r3, [r7, #26]
 80054ac:	e112      	b.n	80056d4 <UART_SetConfig+0x50c>
 80054ae:	bf00      	nop
 80054b0:	cfff69f3 	.word	0xcfff69f3
 80054b4:	40008000 	.word	0x40008000
 80054b8:	40013800 	.word	0x40013800
 80054bc:	40021000 	.word	0x40021000
 80054c0:	40004400 	.word	0x40004400
 80054c4:	40004800 	.word	0x40004800
 80054c8:	40004c00 	.word	0x40004c00
 80054cc:	00f42400 	.word	0x00f42400
 80054d0:	08008fc4 	.word	0x08008fc4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f04f 0100 	mov.w	r1, #0
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	4a86      	ldr	r2, [pc, #536]	; (80056fc <UART_SetConfig+0x534>)
 80054e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	f04f 0300 	mov.w	r3, #0
 80054ec:	f7fb fb84 	bl	8000bf8 <__aeabi_uldivmod>
 80054f0:	4602      	mov	r2, r0
 80054f2:	460b      	mov	r3, r1
 80054f4:	4610      	mov	r0, r2
 80054f6:	4619      	mov	r1, r3
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	020b      	lsls	r3, r1, #8
 8005502:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005506:	0202      	lsls	r2, r0, #8
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	6849      	ldr	r1, [r1, #4]
 800550c:	0849      	lsrs	r1, r1, #1
 800550e:	4608      	mov	r0, r1
 8005510:	f04f 0100 	mov.w	r1, #0
 8005514:	1814      	adds	r4, r2, r0
 8005516:	eb43 0501 	adc.w	r5, r3, r1
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	461a      	mov	r2, r3
 8005520:	f04f 0300 	mov.w	r3, #0
 8005524:	4620      	mov	r0, r4
 8005526:	4629      	mov	r1, r5
 8005528:	f7fb fb66 	bl	8000bf8 <__aeabi_uldivmod>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4613      	mov	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800553a:	d308      	bcc.n	800554e <UART_SetConfig+0x386>
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005542:	d204      	bcs.n	800554e <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	60da      	str	r2, [r3, #12]
 800554c:	e0c2      	b.n	80056d4 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	76bb      	strb	r3, [r7, #26]
 8005552:	e0bf      	b.n	80056d4 <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800555c:	d165      	bne.n	800562a <UART_SetConfig+0x462>
  {
    switch (clocksource)
 800555e:	7efb      	ldrb	r3, [r7, #27]
 8005560:	2b08      	cmp	r3, #8
 8005562:	d828      	bhi.n	80055b6 <UART_SetConfig+0x3ee>
 8005564:	a201      	add	r2, pc, #4	; (adr r2, 800556c <UART_SetConfig+0x3a4>)
 8005566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556a:	bf00      	nop
 800556c:	08005591 	.word	0x08005591
 8005570:	08005599 	.word	0x08005599
 8005574:	080055a1 	.word	0x080055a1
 8005578:	080055b7 	.word	0x080055b7
 800557c:	080055a7 	.word	0x080055a7
 8005580:	080055b7 	.word	0x080055b7
 8005584:	080055b7 	.word	0x080055b7
 8005588:	080055b7 	.word	0x080055b7
 800558c:	080055af 	.word	0x080055af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005590:	f7fd fe3e 	bl	8003210 <HAL_RCC_GetPCLK1Freq>
 8005594:	6178      	str	r0, [r7, #20]
        break;
 8005596:	e013      	b.n	80055c0 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005598:	f7fd fe50 	bl	800323c <HAL_RCC_GetPCLK2Freq>
 800559c:	6178      	str	r0, [r7, #20]
        break;
 800559e:	e00f      	b.n	80055c0 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055a0:	4b57      	ldr	r3, [pc, #348]	; (8005700 <UART_SetConfig+0x538>)
 80055a2:	617b      	str	r3, [r7, #20]
        break;
 80055a4:	e00c      	b.n	80055c0 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055a6:	f7fd fdc5 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 80055aa:	6178      	str	r0, [r7, #20]
        break;
 80055ac:	e008      	b.n	80055c0 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055b2:	617b      	str	r3, [r7, #20]
        break;
 80055b4:	e004      	b.n	80055c0 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 80055b6:	2300      	movs	r3, #0
 80055b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	76bb      	strb	r3, [r7, #26]
        break;
 80055be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 8086 	beq.w	80056d4 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	4a4b      	ldr	r2, [pc, #300]	; (80056fc <UART_SetConfig+0x534>)
 80055ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055d2:	461a      	mov	r2, r3
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80055da:	005a      	lsls	r2, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	085b      	lsrs	r3, r3, #1
 80055e2:	441a      	add	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	2b0f      	cmp	r3, #15
 80055f4:	d916      	bls.n	8005624 <UART_SetConfig+0x45c>
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055fc:	d212      	bcs.n	8005624 <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f023 030f 	bic.w	r3, r3, #15
 8005606:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	085b      	lsrs	r3, r3, #1
 800560c:	b29b      	uxth	r3, r3
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	b29a      	uxth	r2, r3
 8005614:	89fb      	ldrh	r3, [r7, #14]
 8005616:	4313      	orrs	r3, r2
 8005618:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	89fa      	ldrh	r2, [r7, #14]
 8005620:	60da      	str	r2, [r3, #12]
 8005622:	e057      	b.n	80056d4 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	76bb      	strb	r3, [r7, #26]
 8005628:	e054      	b.n	80056d4 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800562a:	7efb      	ldrb	r3, [r7, #27]
 800562c:	2b08      	cmp	r3, #8
 800562e:	d828      	bhi.n	8005682 <UART_SetConfig+0x4ba>
 8005630:	a201      	add	r2, pc, #4	; (adr r2, 8005638 <UART_SetConfig+0x470>)
 8005632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005636:	bf00      	nop
 8005638:	0800565d 	.word	0x0800565d
 800563c:	08005665 	.word	0x08005665
 8005640:	0800566d 	.word	0x0800566d
 8005644:	08005683 	.word	0x08005683
 8005648:	08005673 	.word	0x08005673
 800564c:	08005683 	.word	0x08005683
 8005650:	08005683 	.word	0x08005683
 8005654:	08005683 	.word	0x08005683
 8005658:	0800567b 	.word	0x0800567b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800565c:	f7fd fdd8 	bl	8003210 <HAL_RCC_GetPCLK1Freq>
 8005660:	6178      	str	r0, [r7, #20]
        break;
 8005662:	e013      	b.n	800568c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005664:	f7fd fdea 	bl	800323c <HAL_RCC_GetPCLK2Freq>
 8005668:	6178      	str	r0, [r7, #20]
        break;
 800566a:	e00f      	b.n	800568c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800566c:	4b24      	ldr	r3, [pc, #144]	; (8005700 <UART_SetConfig+0x538>)
 800566e:	617b      	str	r3, [r7, #20]
        break;
 8005670:	e00c      	b.n	800568c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005672:	f7fd fd5f 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 8005676:	6178      	str	r0, [r7, #20]
        break;
 8005678:	e008      	b.n	800568c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800567a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800567e:	617b      	str	r3, [r7, #20]
        break;
 8005680:	e004      	b.n	800568c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	76bb      	strb	r3, [r7, #26]
        break;
 800568a:	bf00      	nop
    }

    if (pclk != 0U)
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d020      	beq.n	80056d4 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	4a19      	ldr	r2, [pc, #100]	; (80056fc <UART_SetConfig+0x534>)
 8005698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800569c:	461a      	mov	r2, r3
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	085b      	lsrs	r3, r3, #1
 80056aa:	441a      	add	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	2b0f      	cmp	r3, #15
 80056bc:	d908      	bls.n	80056d0 <UART_SetConfig+0x508>
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c4:	d204      	bcs.n	80056d0 <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	60da      	str	r2, [r3, #12]
 80056ce:	e001      	b.n	80056d4 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80056f0:	7ebb      	ldrb	r3, [r7, #26]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3720      	adds	r7, #32
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bdb0      	pop	{r4, r5, r7, pc}
 80056fa:	bf00      	nop
 80056fc:	08008fc4 	.word	0x08008fc4
 8005700:	00f42400 	.word	0x00f42400

08005704 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00a      	beq.n	800572e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00a      	beq.n	8005772 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	f003 0308 	and.w	r3, r3, #8
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005798:	f003 0310 	and.w	r3, r3, #16
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d01a      	beq.n	800581a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005802:	d10a      	bne.n	800581a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	605a      	str	r2, [r3, #4]
  }
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af02      	add	r7, sp, #8
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005858:	f7fc f972 	bl	8001b40 <HAL_GetTick>
 800585c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0308 	and.w	r3, r3, #8
 8005868:	2b08      	cmp	r3, #8
 800586a:	d10e      	bne.n	800588a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800586c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f82f 	bl	80058de <UART_WaitOnFlagUntilTimeout>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e025      	b.n	80058d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b04      	cmp	r3, #4
 8005896:	d10e      	bne.n	80058b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005898:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f819 	bl	80058de <UART_WaitOnFlagUntilTimeout>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e00f      	b.n	80058d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2220      	movs	r2, #32
 80058ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b084      	sub	sp, #16
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	60f8      	str	r0, [r7, #12]
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	603b      	str	r3, [r7, #0]
 80058ea:	4613      	mov	r3, r2
 80058ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ee:	e062      	b.n	80059b6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f6:	d05e      	beq.n	80059b6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f8:	f7fc f922 	bl	8001b40 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	429a      	cmp	r2, r3
 8005906:	d302      	bcc.n	800590e <UART_WaitOnFlagUntilTimeout+0x30>
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d11d      	bne.n	800594a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800591c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 0201 	bic.w	r2, r2, #1
 800592c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2220      	movs	r2, #32
 8005932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2220      	movs	r2, #32
 800593a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e045      	b.n	80059d6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d02e      	beq.n	80059b6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005966:	d126      	bne.n	80059b6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005970:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005980:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0201 	bic.w	r2, r2, #1
 8005990:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2220      	movs	r2, #32
 8005996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2220      	movs	r2, #32
 800599e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e00f      	b.n	80059d6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	69da      	ldr	r2, [r3, #28]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	4013      	ands	r3, r2
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	bf0c      	ite	eq
 80059c6:	2301      	moveq	r3, #1
 80059c8:	2300      	movne	r3, #0
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	79fb      	ldrb	r3, [r7, #7]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d08d      	beq.n	80058f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
	...

080059e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	4613      	mov	r3, r2
 80059ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	88fa      	ldrh	r2, [r7, #6]
 80059f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	88fa      	ldrh	r2, [r7, #6]
 8005a00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a12:	d10e      	bne.n	8005a32 <UART_Start_Receive_IT+0x52>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d105      	bne.n	8005a28 <UART_Start_Receive_IT+0x48>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005a22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a26:	e02d      	b.n	8005a84 <UART_Start_Receive_IT+0xa4>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	22ff      	movs	r2, #255	; 0xff
 8005a2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a30:	e028      	b.n	8005a84 <UART_Start_Receive_IT+0xa4>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10d      	bne.n	8005a56 <UART_Start_Receive_IT+0x76>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d104      	bne.n	8005a4c <UART_Start_Receive_IT+0x6c>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	22ff      	movs	r2, #255	; 0xff
 8005a46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a4a:	e01b      	b.n	8005a84 <UART_Start_Receive_IT+0xa4>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	227f      	movs	r2, #127	; 0x7f
 8005a50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a54:	e016      	b.n	8005a84 <UART_Start_Receive_IT+0xa4>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a5e:	d10d      	bne.n	8005a7c <UART_Start_Receive_IT+0x9c>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d104      	bne.n	8005a72 <UART_Start_Receive_IT+0x92>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	227f      	movs	r2, #127	; 0x7f
 8005a6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a70:	e008      	b.n	8005a84 <UART_Start_Receive_IT+0xa4>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	223f      	movs	r2, #63	; 0x3f
 8005a76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a7a:	e003      	b.n	8005a84 <UART_Start_Receive_IT+0xa4>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2222      	movs	r2, #34	; 0x22
 8005a90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0201 	orr.w	r2, r2, #1
 8005aa2:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aac:	d12a      	bne.n	8005b04 <UART_Start_Receive_IT+0x124>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005ab4:	88fa      	ldrh	r2, [r7, #6]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d324      	bcc.n	8005b04 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac2:	d107      	bne.n	8005ad4 <UART_Start_Receive_IT+0xf4>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d103      	bne.n	8005ad4 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4a1f      	ldr	r2, [pc, #124]	; (8005b4c <UART_Start_Receive_IT+0x16c>)
 8005ad0:	671a      	str	r2, [r3, #112]	; 0x70
 8005ad2:	e002      	b.n	8005ada <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4a1e      	ldr	r2, [pc, #120]	; (8005b50 <UART_Start_Receive_IT+0x170>)
 8005ad8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005af0:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005b00:	609a      	str	r2, [r3, #8]
 8005b02:	e01b      	b.n	8005b3c <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b0c:	d107      	bne.n	8005b1e <UART_Start_Receive_IT+0x13e>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d103      	bne.n	8005b1e <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4a0e      	ldr	r2, [pc, #56]	; (8005b54 <UART_Start_Receive_IT+0x174>)
 8005b1a:	671a      	str	r2, [r3, #112]	; 0x70
 8005b1c:	e002      	b.n	8005b24 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4a0d      	ldr	r2, [pc, #52]	; (8005b58 <UART_Start_Receive_IT+0x178>)
 8005b22:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005b3a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	08005fd5 	.word	0x08005fd5
 8005b50:	08005dd1 	.word	0x08005dd1
 8005b54:	08005cf9 	.word	0x08005cf9
 8005b58:	08005c21 	.word	0x08005c21

08005b5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b72:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	6812      	ldr	r2, [r2, #0]
 8005b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b82:	f023 0301 	bic.w	r3, r3, #1
 8005b86:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d107      	bne.n	8005ba0 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0210 	bic.w	r2, r2, #16
 8005b9e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f7ff fadc 	bl	800519c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005be4:	bf00      	nop
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c02:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2220      	movs	r2, #32
 8005c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7ff fab8 	bl	8005188 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c18:	bf00      	nop
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005c2e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c36:	2b22      	cmp	r3, #34	; 0x22
 8005c38:	d152      	bne.n	8005ce0 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c42:	89bb      	ldrh	r3, [r7, #12]
 8005c44:	b2d9      	uxtb	r1, r3
 8005c46:	89fb      	ldrh	r3, [r7, #14]
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4e:	400a      	ands	r2, r1
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d139      	bne.n	8005cf0 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c8a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0201 	bic.w	r2, r2, #1
 8005c9a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d10f      	bne.n	8005cd2 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 0210 	bic.w	r2, r2, #16
 8005cc0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cc8:	4619      	mov	r1, r3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7ff fa70 	bl	80051b0 <HAL_UARTEx_RxEventCallback>
 8005cd0:	e002      	b.n	8005cd8 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7fb fe80 	bl	80019d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cde:	e007      	b.n	8005cf0 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0208 	orr.w	r2, r2, #8
 8005cee:	619a      	str	r2, [r3, #24]
}
 8005cf0:	bf00      	nop
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d06:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0e:	2b22      	cmp	r3, #34	; 0x22
 8005d10:	d152      	bne.n	8005db8 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005d20:	89ba      	ldrh	r2, [r7, #12]
 8005d22:	89fb      	ldrh	r3, [r7, #14]
 8005d24:	4013      	ands	r3, r2
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d30:	1c9a      	adds	r2, r3, #2
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d139      	bne.n	8005dc8 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d62:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0201 	bic.w	r2, r2, #1
 8005d72:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d10f      	bne.n	8005daa <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0210 	bic.w	r2, r2, #16
 8005d98:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005da0:	4619      	mov	r1, r3
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7ff fa04 	bl	80051b0 <HAL_UARTEx_RxEventCallback>
 8005da8:	e002      	b.n	8005db0 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7fb fe14 	bl	80019d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005db6:	e007      	b.n	8005dc8 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0208 	orr.w	r2, r2, #8
 8005dc6:	619a      	str	r2, [r3, #24]
}
 8005dc8:	bf00      	nop
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005dde:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfe:	2b22      	cmp	r3, #34	; 0x22
 8005e00:	f040 80da 	bne.w	8005fb8 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005e0a:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e0c:	e0aa      	b.n	8005f64 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e16:	89bb      	ldrh	r3, [r7, #12]
 8005e18:	b2d9      	uxtb	r1, r3
 8005e1a:	8b7b      	ldrh	r3, [r7, #26]
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e22:	400a      	ands	r2, r1
 8005e24:	b2d2      	uxtb	r2, r2
 8005e26:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d04d      	beq.n	8005ef2 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d010      	beq.n	8005e82 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00b      	beq.n	8005e82 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e78:	f043 0201 	orr.w	r2, r3, #1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d010      	beq.n	8005eae <UART_RxISR_8BIT_FIFOEN+0xde>
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00b      	beq.n	8005eae <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ea4:	f043 0204 	orr.w	r2, r3, #4
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d010      	beq.n	8005eda <UART_RxISR_8BIT_FIFOEN+0x10a>
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00b      	beq.n	8005eda <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2204      	movs	r2, #4
 8005ec8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ed0:	f043 0202 	orr.w	r2, r3, #2
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d006      	beq.n	8005ef2 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff f959 	bl	800519c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d132      	bne.n	8005f64 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f0c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6812      	ldr	r2, [r2, #0]
 8005f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f1c:	f023 0301 	bic.w	r3, r3, #1
 8005f20:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d10f      	bne.n	8005f58 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0210 	bic.w	r2, r2, #16
 8005f46:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff f92d 	bl	80051b0 <HAL_UARTEx_RxEventCallback>
 8005f56:	e002      	b.n	8005f5e <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7fb fd3d 	bl	80019d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f64:	89fb      	ldrh	r3, [r7, #14]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d005      	beq.n	8005f76 <UART_RxISR_8BIT_FIFOEN+0x1a6>
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	f003 0320 	and.w	r3, r3, #32
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f47f af4c 	bne.w	8005e0e <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f7c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005f7e:	897b      	ldrh	r3, [r7, #10]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d021      	beq.n	8005fc8 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005f8a:	897a      	ldrh	r2, [r7, #10]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d21b      	bcs.n	8005fc8 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689a      	ldr	r2, [r3, #8]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005f9e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a0b      	ldr	r2, [pc, #44]	; (8005fd0 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8005fa4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f042 0220 	orr.w	r2, r2, #32
 8005fb4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fb6:	e007      	b.n	8005fc8 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699a      	ldr	r2, [r3, #24]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0208 	orr.w	r2, r2, #8
 8005fc6:	619a      	str	r2, [r3, #24]
}
 8005fc8:	bf00      	nop
 8005fca:	3720      	adds	r7, #32
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	08005c21 	.word	0x08005c21

08005fd4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08a      	sub	sp, #40	; 0x28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005fe2:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006002:	2b22      	cmp	r3, #34	; 0x22
 8006004:	f040 80da 	bne.w	80061bc <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800600e:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006010:	e0aa      	b.n	8006168 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601e:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006020:	8aba      	ldrh	r2, [r7, #20]
 8006022:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006024:	4013      	ands	r3, r2
 8006026:	b29a      	uxth	r2, r3
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006030:	1c9a      	adds	r2, r3, #2
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800603c:	b29b      	uxth	r3, r3
 800603e:	3b01      	subs	r3, #1
 8006040:	b29a      	uxth	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	f003 0307 	and.w	r3, r3, #7
 8006056:	2b00      	cmp	r3, #0
 8006058:	d04d      	beq.n	80060f6 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	d010      	beq.n	8006086 <UART_RxISR_16BIT_FIFOEN+0xb2>
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00b      	beq.n	8006086 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2201      	movs	r2, #1
 8006074:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800607c:	f043 0201 	orr.w	r2, r3, #1
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d010      	beq.n	80060b2 <UART_RxISR_16BIT_FIFOEN+0xde>
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00b      	beq.n	80060b2 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2202      	movs	r2, #2
 80060a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060a8:	f043 0204 	orr.w	r2, r3, #4
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d010      	beq.n	80060de <UART_RxISR_16BIT_FIFOEN+0x10a>
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00b      	beq.n	80060de <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2204      	movs	r2, #4
 80060cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060d4:	f043 0202 	orr.w	r2, r3, #2
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d006      	beq.n	80060f6 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7ff f857 	bl	800519c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d132      	bne.n	8006168 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006110:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006120:	f023 0301 	bic.w	r3, r3, #1
 8006124:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2220      	movs	r2, #32
 800612a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006138:	2b01      	cmp	r3, #1
 800613a:	d10f      	bne.n	800615c <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 0210 	bic.w	r2, r2, #16
 800614a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006152:	4619      	mov	r1, r3
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7ff f82b 	bl	80051b0 <HAL_UARTEx_RxEventCallback>
 800615a:	e002      	b.n	8006162 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7fb fc3b 	bl	80019d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006168:	8afb      	ldrh	r3, [r7, #22]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d005      	beq.n	800617a <UART_RxISR_16BIT_FIFOEN+0x1a6>
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	f003 0320 	and.w	r3, r3, #32
 8006174:	2b00      	cmp	r3, #0
 8006176:	f47f af4c 	bne.w	8006012 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006180:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006182:	89fb      	ldrh	r3, [r7, #14]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d021      	beq.n	80061cc <UART_RxISR_16BIT_FIFOEN+0x1f8>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800618e:	89fa      	ldrh	r2, [r7, #14]
 8006190:	429a      	cmp	r2, r3
 8006192:	d21b      	bcs.n	80061cc <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689a      	ldr	r2, [r3, #8]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80061a2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a0b      	ldr	r2, [pc, #44]	; (80061d4 <UART_RxISR_16BIT_FIFOEN+0x200>)
 80061a8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f042 0220 	orr.w	r2, r2, #32
 80061b8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061ba:	e007      	b.n	80061cc <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699a      	ldr	r2, [r3, #24]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f042 0208 	orr.w	r2, r2, #8
 80061ca:	619a      	str	r2, [r3, #24]
}
 80061cc:	bf00      	nop
 80061ce:	3728      	adds	r7, #40	; 0x28
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	08005cf9 	.word	0x08005cf9

080061d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006222:	2b01      	cmp	r3, #1
 8006224:	d101      	bne.n	800622a <HAL_UARTEx_DisableFifoMode+0x16>
 8006226:	2302      	movs	r3, #2
 8006228:	e027      	b.n	800627a <HAL_UARTEx_DisableFifoMode+0x66>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2224      	movs	r2, #36	; 0x24
 8006236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 0201 	bic.w	r2, r2, #1
 8006250:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006258:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2220      	movs	r2, #32
 800626c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b084      	sub	sp, #16
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006296:	2b01      	cmp	r3, #1
 8006298:	d101      	bne.n	800629e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800629a:	2302      	movs	r3, #2
 800629c:	e02d      	b.n	80062fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2224      	movs	r2, #36	; 0x24
 80062aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0201 	bic.w	r2, r2, #1
 80062c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f850 	bl	8006380 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006312:	2b01      	cmp	r3, #1
 8006314:	d101      	bne.n	800631a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006316:	2302      	movs	r3, #2
 8006318:	e02d      	b.n	8006376 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2224      	movs	r2, #36	; 0x24
 8006326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0201 	bic.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f812 	bl	8006380 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2220      	movs	r2, #32
 8006368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
	...

08006380 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800638c:	2b00      	cmp	r3, #0
 800638e:	d108      	bne.n	80063a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063a0:	e031      	b.n	8006406 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063a2:	2308      	movs	r3, #8
 80063a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063a6:	2308      	movs	r3, #8
 80063a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	0e5b      	lsrs	r3, r3, #25
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	f003 0307 	and.w	r3, r3, #7
 80063b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	0f5b      	lsrs	r3, r3, #29
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	f003 0307 	and.w	r3, r3, #7
 80063c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063ca:	7bbb      	ldrb	r3, [r7, #14]
 80063cc:	7b3a      	ldrb	r2, [r7, #12]
 80063ce:	4911      	ldr	r1, [pc, #68]	; (8006414 <UARTEx_SetNbDataToProcess+0x94>)
 80063d0:	5c8a      	ldrb	r2, [r1, r2]
 80063d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063d6:	7b3a      	ldrb	r2, [r7, #12]
 80063d8:	490f      	ldr	r1, [pc, #60]	; (8006418 <UARTEx_SetNbDataToProcess+0x98>)
 80063da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
 80063ea:	7b7a      	ldrb	r2, [r7, #13]
 80063ec:	4909      	ldr	r1, [pc, #36]	; (8006414 <UARTEx_SetNbDataToProcess+0x94>)
 80063ee:	5c8a      	ldrb	r2, [r1, r2]
 80063f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80063f4:	7b7a      	ldrb	r2, [r7, #13]
 80063f6:	4908      	ldr	r1, [pc, #32]	; (8006418 <UARTEx_SetNbDataToProcess+0x98>)
 80063f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80063fe:	b29a      	uxth	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006406:	bf00      	nop
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	08008fdc 	.word	0x08008fdc
 8006418:	08008fe4 	.word	0x08008fe4

0800641c <__errno>:
 800641c:	4b01      	ldr	r3, [pc, #4]	; (8006424 <__errno+0x8>)
 800641e:	6818      	ldr	r0, [r3, #0]
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	2000002c 	.word	0x2000002c

08006428 <__libc_init_array>:
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	4d0d      	ldr	r5, [pc, #52]	; (8006460 <__libc_init_array+0x38>)
 800642c:	4c0d      	ldr	r4, [pc, #52]	; (8006464 <__libc_init_array+0x3c>)
 800642e:	1b64      	subs	r4, r4, r5
 8006430:	10a4      	asrs	r4, r4, #2
 8006432:	2600      	movs	r6, #0
 8006434:	42a6      	cmp	r6, r4
 8006436:	d109      	bne.n	800644c <__libc_init_array+0x24>
 8006438:	4d0b      	ldr	r5, [pc, #44]	; (8006468 <__libc_init_array+0x40>)
 800643a:	4c0c      	ldr	r4, [pc, #48]	; (800646c <__libc_init_array+0x44>)
 800643c:	f002 fd80 	bl	8008f40 <_init>
 8006440:	1b64      	subs	r4, r4, r5
 8006442:	10a4      	asrs	r4, r4, #2
 8006444:	2600      	movs	r6, #0
 8006446:	42a6      	cmp	r6, r4
 8006448:	d105      	bne.n	8006456 <__libc_init_array+0x2e>
 800644a:	bd70      	pop	{r4, r5, r6, pc}
 800644c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006450:	4798      	blx	r3
 8006452:	3601      	adds	r6, #1
 8006454:	e7ee      	b.n	8006434 <__libc_init_array+0xc>
 8006456:	f855 3b04 	ldr.w	r3, [r5], #4
 800645a:	4798      	blx	r3
 800645c:	3601      	adds	r6, #1
 800645e:	e7f2      	b.n	8006446 <__libc_init_array+0x1e>
 8006460:	080093d4 	.word	0x080093d4
 8006464:	080093d4 	.word	0x080093d4
 8006468:	080093d4 	.word	0x080093d4
 800646c:	080093d8 	.word	0x080093d8

08006470 <memcpy>:
 8006470:	440a      	add	r2, r1
 8006472:	4291      	cmp	r1, r2
 8006474:	f100 33ff 	add.w	r3, r0, #4294967295
 8006478:	d100      	bne.n	800647c <memcpy+0xc>
 800647a:	4770      	bx	lr
 800647c:	b510      	push	{r4, lr}
 800647e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006482:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006486:	4291      	cmp	r1, r2
 8006488:	d1f9      	bne.n	800647e <memcpy+0xe>
 800648a:	bd10      	pop	{r4, pc}

0800648c <memset>:
 800648c:	4402      	add	r2, r0
 800648e:	4603      	mov	r3, r0
 8006490:	4293      	cmp	r3, r2
 8006492:	d100      	bne.n	8006496 <memset+0xa>
 8006494:	4770      	bx	lr
 8006496:	f803 1b01 	strb.w	r1, [r3], #1
 800649a:	e7f9      	b.n	8006490 <memset+0x4>

0800649c <__cvt>:
 800649c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064a0:	ec55 4b10 	vmov	r4, r5, d0
 80064a4:	2d00      	cmp	r5, #0
 80064a6:	460e      	mov	r6, r1
 80064a8:	4619      	mov	r1, r3
 80064aa:	462b      	mov	r3, r5
 80064ac:	bfbb      	ittet	lt
 80064ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80064b2:	461d      	movlt	r5, r3
 80064b4:	2300      	movge	r3, #0
 80064b6:	232d      	movlt	r3, #45	; 0x2d
 80064b8:	700b      	strb	r3, [r1, #0]
 80064ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80064c0:	4691      	mov	r9, r2
 80064c2:	f023 0820 	bic.w	r8, r3, #32
 80064c6:	bfbc      	itt	lt
 80064c8:	4622      	movlt	r2, r4
 80064ca:	4614      	movlt	r4, r2
 80064cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064d0:	d005      	beq.n	80064de <__cvt+0x42>
 80064d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80064d6:	d100      	bne.n	80064da <__cvt+0x3e>
 80064d8:	3601      	adds	r6, #1
 80064da:	2102      	movs	r1, #2
 80064dc:	e000      	b.n	80064e0 <__cvt+0x44>
 80064de:	2103      	movs	r1, #3
 80064e0:	ab03      	add	r3, sp, #12
 80064e2:	9301      	str	r3, [sp, #4]
 80064e4:	ab02      	add	r3, sp, #8
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	ec45 4b10 	vmov	d0, r4, r5
 80064ec:	4653      	mov	r3, sl
 80064ee:	4632      	mov	r2, r6
 80064f0:	f000 fe1a 	bl	8007128 <_dtoa_r>
 80064f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80064f8:	4607      	mov	r7, r0
 80064fa:	d102      	bne.n	8006502 <__cvt+0x66>
 80064fc:	f019 0f01 	tst.w	r9, #1
 8006500:	d022      	beq.n	8006548 <__cvt+0xac>
 8006502:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006506:	eb07 0906 	add.w	r9, r7, r6
 800650a:	d110      	bne.n	800652e <__cvt+0x92>
 800650c:	783b      	ldrb	r3, [r7, #0]
 800650e:	2b30      	cmp	r3, #48	; 0x30
 8006510:	d10a      	bne.n	8006528 <__cvt+0x8c>
 8006512:	2200      	movs	r2, #0
 8006514:	2300      	movs	r3, #0
 8006516:	4620      	mov	r0, r4
 8006518:	4629      	mov	r1, r5
 800651a:	f7fa fafd 	bl	8000b18 <__aeabi_dcmpeq>
 800651e:	b918      	cbnz	r0, 8006528 <__cvt+0x8c>
 8006520:	f1c6 0601 	rsb	r6, r6, #1
 8006524:	f8ca 6000 	str.w	r6, [sl]
 8006528:	f8da 3000 	ldr.w	r3, [sl]
 800652c:	4499      	add	r9, r3
 800652e:	2200      	movs	r2, #0
 8006530:	2300      	movs	r3, #0
 8006532:	4620      	mov	r0, r4
 8006534:	4629      	mov	r1, r5
 8006536:	f7fa faef 	bl	8000b18 <__aeabi_dcmpeq>
 800653a:	b108      	cbz	r0, 8006540 <__cvt+0xa4>
 800653c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006540:	2230      	movs	r2, #48	; 0x30
 8006542:	9b03      	ldr	r3, [sp, #12]
 8006544:	454b      	cmp	r3, r9
 8006546:	d307      	bcc.n	8006558 <__cvt+0xbc>
 8006548:	9b03      	ldr	r3, [sp, #12]
 800654a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800654c:	1bdb      	subs	r3, r3, r7
 800654e:	4638      	mov	r0, r7
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	b004      	add	sp, #16
 8006554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006558:	1c59      	adds	r1, r3, #1
 800655a:	9103      	str	r1, [sp, #12]
 800655c:	701a      	strb	r2, [r3, #0]
 800655e:	e7f0      	b.n	8006542 <__cvt+0xa6>

08006560 <__exponent>:
 8006560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006562:	4603      	mov	r3, r0
 8006564:	2900      	cmp	r1, #0
 8006566:	bfb8      	it	lt
 8006568:	4249      	neglt	r1, r1
 800656a:	f803 2b02 	strb.w	r2, [r3], #2
 800656e:	bfb4      	ite	lt
 8006570:	222d      	movlt	r2, #45	; 0x2d
 8006572:	222b      	movge	r2, #43	; 0x2b
 8006574:	2909      	cmp	r1, #9
 8006576:	7042      	strb	r2, [r0, #1]
 8006578:	dd2a      	ble.n	80065d0 <__exponent+0x70>
 800657a:	f10d 0407 	add.w	r4, sp, #7
 800657e:	46a4      	mov	ip, r4
 8006580:	270a      	movs	r7, #10
 8006582:	46a6      	mov	lr, r4
 8006584:	460a      	mov	r2, r1
 8006586:	fb91 f6f7 	sdiv	r6, r1, r7
 800658a:	fb07 1516 	mls	r5, r7, r6, r1
 800658e:	3530      	adds	r5, #48	; 0x30
 8006590:	2a63      	cmp	r2, #99	; 0x63
 8006592:	f104 34ff 	add.w	r4, r4, #4294967295
 8006596:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800659a:	4631      	mov	r1, r6
 800659c:	dcf1      	bgt.n	8006582 <__exponent+0x22>
 800659e:	3130      	adds	r1, #48	; 0x30
 80065a0:	f1ae 0502 	sub.w	r5, lr, #2
 80065a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80065a8:	1c44      	adds	r4, r0, #1
 80065aa:	4629      	mov	r1, r5
 80065ac:	4561      	cmp	r1, ip
 80065ae:	d30a      	bcc.n	80065c6 <__exponent+0x66>
 80065b0:	f10d 0209 	add.w	r2, sp, #9
 80065b4:	eba2 020e 	sub.w	r2, r2, lr
 80065b8:	4565      	cmp	r5, ip
 80065ba:	bf88      	it	hi
 80065bc:	2200      	movhi	r2, #0
 80065be:	4413      	add	r3, r2
 80065c0:	1a18      	subs	r0, r3, r0
 80065c2:	b003      	add	sp, #12
 80065c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80065ce:	e7ed      	b.n	80065ac <__exponent+0x4c>
 80065d0:	2330      	movs	r3, #48	; 0x30
 80065d2:	3130      	adds	r1, #48	; 0x30
 80065d4:	7083      	strb	r3, [r0, #2]
 80065d6:	70c1      	strb	r1, [r0, #3]
 80065d8:	1d03      	adds	r3, r0, #4
 80065da:	e7f1      	b.n	80065c0 <__exponent+0x60>

080065dc <_printf_float>:
 80065dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e0:	ed2d 8b02 	vpush	{d8}
 80065e4:	b08d      	sub	sp, #52	; 0x34
 80065e6:	460c      	mov	r4, r1
 80065e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80065ec:	4616      	mov	r6, r2
 80065ee:	461f      	mov	r7, r3
 80065f0:	4605      	mov	r5, r0
 80065f2:	f001 fd3d 	bl	8008070 <_localeconv_r>
 80065f6:	f8d0 a000 	ldr.w	sl, [r0]
 80065fa:	4650      	mov	r0, sl
 80065fc:	f7f9 fe10 	bl	8000220 <strlen>
 8006600:	2300      	movs	r3, #0
 8006602:	930a      	str	r3, [sp, #40]	; 0x28
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	9305      	str	r3, [sp, #20]
 8006608:	f8d8 3000 	ldr.w	r3, [r8]
 800660c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006610:	3307      	adds	r3, #7
 8006612:	f023 0307 	bic.w	r3, r3, #7
 8006616:	f103 0208 	add.w	r2, r3, #8
 800661a:	f8c8 2000 	str.w	r2, [r8]
 800661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006622:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006626:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800662a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800662e:	9307      	str	r3, [sp, #28]
 8006630:	f8cd 8018 	str.w	r8, [sp, #24]
 8006634:	ee08 0a10 	vmov	s16, r0
 8006638:	4b9f      	ldr	r3, [pc, #636]	; (80068b8 <_printf_float+0x2dc>)
 800663a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800663e:	f04f 32ff 	mov.w	r2, #4294967295
 8006642:	f7fa fa9b 	bl	8000b7c <__aeabi_dcmpun>
 8006646:	bb88      	cbnz	r0, 80066ac <_printf_float+0xd0>
 8006648:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800664c:	4b9a      	ldr	r3, [pc, #616]	; (80068b8 <_printf_float+0x2dc>)
 800664e:	f04f 32ff 	mov.w	r2, #4294967295
 8006652:	f7fa fa75 	bl	8000b40 <__aeabi_dcmple>
 8006656:	bb48      	cbnz	r0, 80066ac <_printf_float+0xd0>
 8006658:	2200      	movs	r2, #0
 800665a:	2300      	movs	r3, #0
 800665c:	4640      	mov	r0, r8
 800665e:	4649      	mov	r1, r9
 8006660:	f7fa fa64 	bl	8000b2c <__aeabi_dcmplt>
 8006664:	b110      	cbz	r0, 800666c <_printf_float+0x90>
 8006666:	232d      	movs	r3, #45	; 0x2d
 8006668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800666c:	4b93      	ldr	r3, [pc, #588]	; (80068bc <_printf_float+0x2e0>)
 800666e:	4894      	ldr	r0, [pc, #592]	; (80068c0 <_printf_float+0x2e4>)
 8006670:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006674:	bf94      	ite	ls
 8006676:	4698      	movls	r8, r3
 8006678:	4680      	movhi	r8, r0
 800667a:	2303      	movs	r3, #3
 800667c:	6123      	str	r3, [r4, #16]
 800667e:	9b05      	ldr	r3, [sp, #20]
 8006680:	f023 0204 	bic.w	r2, r3, #4
 8006684:	6022      	str	r2, [r4, #0]
 8006686:	f04f 0900 	mov.w	r9, #0
 800668a:	9700      	str	r7, [sp, #0]
 800668c:	4633      	mov	r3, r6
 800668e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006690:	4621      	mov	r1, r4
 8006692:	4628      	mov	r0, r5
 8006694:	f000 f9d8 	bl	8006a48 <_printf_common>
 8006698:	3001      	adds	r0, #1
 800669a:	f040 8090 	bne.w	80067be <_printf_float+0x1e2>
 800669e:	f04f 30ff 	mov.w	r0, #4294967295
 80066a2:	b00d      	add	sp, #52	; 0x34
 80066a4:	ecbd 8b02 	vpop	{d8}
 80066a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ac:	4642      	mov	r2, r8
 80066ae:	464b      	mov	r3, r9
 80066b0:	4640      	mov	r0, r8
 80066b2:	4649      	mov	r1, r9
 80066b4:	f7fa fa62 	bl	8000b7c <__aeabi_dcmpun>
 80066b8:	b140      	cbz	r0, 80066cc <_printf_float+0xf0>
 80066ba:	464b      	mov	r3, r9
 80066bc:	2b00      	cmp	r3, #0
 80066be:	bfbc      	itt	lt
 80066c0:	232d      	movlt	r3, #45	; 0x2d
 80066c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80066c6:	487f      	ldr	r0, [pc, #508]	; (80068c4 <_printf_float+0x2e8>)
 80066c8:	4b7f      	ldr	r3, [pc, #508]	; (80068c8 <_printf_float+0x2ec>)
 80066ca:	e7d1      	b.n	8006670 <_printf_float+0x94>
 80066cc:	6863      	ldr	r3, [r4, #4]
 80066ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80066d2:	9206      	str	r2, [sp, #24]
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	d13f      	bne.n	8006758 <_printf_float+0x17c>
 80066d8:	2306      	movs	r3, #6
 80066da:	6063      	str	r3, [r4, #4]
 80066dc:	9b05      	ldr	r3, [sp, #20]
 80066de:	6861      	ldr	r1, [r4, #4]
 80066e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80066e4:	2300      	movs	r3, #0
 80066e6:	9303      	str	r3, [sp, #12]
 80066e8:	ab0a      	add	r3, sp, #40	; 0x28
 80066ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80066ee:	ab09      	add	r3, sp, #36	; 0x24
 80066f0:	ec49 8b10 	vmov	d0, r8, r9
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	6022      	str	r2, [r4, #0]
 80066f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80066fc:	4628      	mov	r0, r5
 80066fe:	f7ff fecd 	bl	800649c <__cvt>
 8006702:	9b06      	ldr	r3, [sp, #24]
 8006704:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006706:	2b47      	cmp	r3, #71	; 0x47
 8006708:	4680      	mov	r8, r0
 800670a:	d108      	bne.n	800671e <_printf_float+0x142>
 800670c:	1cc8      	adds	r0, r1, #3
 800670e:	db02      	blt.n	8006716 <_printf_float+0x13a>
 8006710:	6863      	ldr	r3, [r4, #4]
 8006712:	4299      	cmp	r1, r3
 8006714:	dd41      	ble.n	800679a <_printf_float+0x1be>
 8006716:	f1ab 0b02 	sub.w	fp, fp, #2
 800671a:	fa5f fb8b 	uxtb.w	fp, fp
 800671e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006722:	d820      	bhi.n	8006766 <_printf_float+0x18a>
 8006724:	3901      	subs	r1, #1
 8006726:	465a      	mov	r2, fp
 8006728:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800672c:	9109      	str	r1, [sp, #36]	; 0x24
 800672e:	f7ff ff17 	bl	8006560 <__exponent>
 8006732:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006734:	1813      	adds	r3, r2, r0
 8006736:	2a01      	cmp	r2, #1
 8006738:	4681      	mov	r9, r0
 800673a:	6123      	str	r3, [r4, #16]
 800673c:	dc02      	bgt.n	8006744 <_printf_float+0x168>
 800673e:	6822      	ldr	r2, [r4, #0]
 8006740:	07d2      	lsls	r2, r2, #31
 8006742:	d501      	bpl.n	8006748 <_printf_float+0x16c>
 8006744:	3301      	adds	r3, #1
 8006746:	6123      	str	r3, [r4, #16]
 8006748:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800674c:	2b00      	cmp	r3, #0
 800674e:	d09c      	beq.n	800668a <_printf_float+0xae>
 8006750:	232d      	movs	r3, #45	; 0x2d
 8006752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006756:	e798      	b.n	800668a <_printf_float+0xae>
 8006758:	9a06      	ldr	r2, [sp, #24]
 800675a:	2a47      	cmp	r2, #71	; 0x47
 800675c:	d1be      	bne.n	80066dc <_printf_float+0x100>
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1bc      	bne.n	80066dc <_printf_float+0x100>
 8006762:	2301      	movs	r3, #1
 8006764:	e7b9      	b.n	80066da <_printf_float+0xfe>
 8006766:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800676a:	d118      	bne.n	800679e <_printf_float+0x1c2>
 800676c:	2900      	cmp	r1, #0
 800676e:	6863      	ldr	r3, [r4, #4]
 8006770:	dd0b      	ble.n	800678a <_printf_float+0x1ae>
 8006772:	6121      	str	r1, [r4, #16]
 8006774:	b913      	cbnz	r3, 800677c <_printf_float+0x1a0>
 8006776:	6822      	ldr	r2, [r4, #0]
 8006778:	07d0      	lsls	r0, r2, #31
 800677a:	d502      	bpl.n	8006782 <_printf_float+0x1a6>
 800677c:	3301      	adds	r3, #1
 800677e:	440b      	add	r3, r1
 8006780:	6123      	str	r3, [r4, #16]
 8006782:	65a1      	str	r1, [r4, #88]	; 0x58
 8006784:	f04f 0900 	mov.w	r9, #0
 8006788:	e7de      	b.n	8006748 <_printf_float+0x16c>
 800678a:	b913      	cbnz	r3, 8006792 <_printf_float+0x1b6>
 800678c:	6822      	ldr	r2, [r4, #0]
 800678e:	07d2      	lsls	r2, r2, #31
 8006790:	d501      	bpl.n	8006796 <_printf_float+0x1ba>
 8006792:	3302      	adds	r3, #2
 8006794:	e7f4      	b.n	8006780 <_printf_float+0x1a4>
 8006796:	2301      	movs	r3, #1
 8006798:	e7f2      	b.n	8006780 <_printf_float+0x1a4>
 800679a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800679e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067a0:	4299      	cmp	r1, r3
 80067a2:	db05      	blt.n	80067b0 <_printf_float+0x1d4>
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	6121      	str	r1, [r4, #16]
 80067a8:	07d8      	lsls	r0, r3, #31
 80067aa:	d5ea      	bpl.n	8006782 <_printf_float+0x1a6>
 80067ac:	1c4b      	adds	r3, r1, #1
 80067ae:	e7e7      	b.n	8006780 <_printf_float+0x1a4>
 80067b0:	2900      	cmp	r1, #0
 80067b2:	bfd4      	ite	le
 80067b4:	f1c1 0202 	rsble	r2, r1, #2
 80067b8:	2201      	movgt	r2, #1
 80067ba:	4413      	add	r3, r2
 80067bc:	e7e0      	b.n	8006780 <_printf_float+0x1a4>
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	055a      	lsls	r2, r3, #21
 80067c2:	d407      	bmi.n	80067d4 <_printf_float+0x1f8>
 80067c4:	6923      	ldr	r3, [r4, #16]
 80067c6:	4642      	mov	r2, r8
 80067c8:	4631      	mov	r1, r6
 80067ca:	4628      	mov	r0, r5
 80067cc:	47b8      	blx	r7
 80067ce:	3001      	adds	r0, #1
 80067d0:	d12c      	bne.n	800682c <_printf_float+0x250>
 80067d2:	e764      	b.n	800669e <_printf_float+0xc2>
 80067d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067d8:	f240 80e0 	bls.w	800699c <_printf_float+0x3c0>
 80067dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067e0:	2200      	movs	r2, #0
 80067e2:	2300      	movs	r3, #0
 80067e4:	f7fa f998 	bl	8000b18 <__aeabi_dcmpeq>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d034      	beq.n	8006856 <_printf_float+0x27a>
 80067ec:	4a37      	ldr	r2, [pc, #220]	; (80068cc <_printf_float+0x2f0>)
 80067ee:	2301      	movs	r3, #1
 80067f0:	4631      	mov	r1, r6
 80067f2:	4628      	mov	r0, r5
 80067f4:	47b8      	blx	r7
 80067f6:	3001      	adds	r0, #1
 80067f8:	f43f af51 	beq.w	800669e <_printf_float+0xc2>
 80067fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006800:	429a      	cmp	r2, r3
 8006802:	db02      	blt.n	800680a <_printf_float+0x22e>
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	07d8      	lsls	r0, r3, #31
 8006808:	d510      	bpl.n	800682c <_printf_float+0x250>
 800680a:	ee18 3a10 	vmov	r3, s16
 800680e:	4652      	mov	r2, sl
 8006810:	4631      	mov	r1, r6
 8006812:	4628      	mov	r0, r5
 8006814:	47b8      	blx	r7
 8006816:	3001      	adds	r0, #1
 8006818:	f43f af41 	beq.w	800669e <_printf_float+0xc2>
 800681c:	f04f 0800 	mov.w	r8, #0
 8006820:	f104 091a 	add.w	r9, r4, #26
 8006824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006826:	3b01      	subs	r3, #1
 8006828:	4543      	cmp	r3, r8
 800682a:	dc09      	bgt.n	8006840 <_printf_float+0x264>
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	079b      	lsls	r3, r3, #30
 8006830:	f100 8105 	bmi.w	8006a3e <_printf_float+0x462>
 8006834:	68e0      	ldr	r0, [r4, #12]
 8006836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006838:	4298      	cmp	r0, r3
 800683a:	bfb8      	it	lt
 800683c:	4618      	movlt	r0, r3
 800683e:	e730      	b.n	80066a2 <_printf_float+0xc6>
 8006840:	2301      	movs	r3, #1
 8006842:	464a      	mov	r2, r9
 8006844:	4631      	mov	r1, r6
 8006846:	4628      	mov	r0, r5
 8006848:	47b8      	blx	r7
 800684a:	3001      	adds	r0, #1
 800684c:	f43f af27 	beq.w	800669e <_printf_float+0xc2>
 8006850:	f108 0801 	add.w	r8, r8, #1
 8006854:	e7e6      	b.n	8006824 <_printf_float+0x248>
 8006856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006858:	2b00      	cmp	r3, #0
 800685a:	dc39      	bgt.n	80068d0 <_printf_float+0x2f4>
 800685c:	4a1b      	ldr	r2, [pc, #108]	; (80068cc <_printf_float+0x2f0>)
 800685e:	2301      	movs	r3, #1
 8006860:	4631      	mov	r1, r6
 8006862:	4628      	mov	r0, r5
 8006864:	47b8      	blx	r7
 8006866:	3001      	adds	r0, #1
 8006868:	f43f af19 	beq.w	800669e <_printf_float+0xc2>
 800686c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006870:	4313      	orrs	r3, r2
 8006872:	d102      	bne.n	800687a <_printf_float+0x29e>
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	07d9      	lsls	r1, r3, #31
 8006878:	d5d8      	bpl.n	800682c <_printf_float+0x250>
 800687a:	ee18 3a10 	vmov	r3, s16
 800687e:	4652      	mov	r2, sl
 8006880:	4631      	mov	r1, r6
 8006882:	4628      	mov	r0, r5
 8006884:	47b8      	blx	r7
 8006886:	3001      	adds	r0, #1
 8006888:	f43f af09 	beq.w	800669e <_printf_float+0xc2>
 800688c:	f04f 0900 	mov.w	r9, #0
 8006890:	f104 0a1a 	add.w	sl, r4, #26
 8006894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006896:	425b      	negs	r3, r3
 8006898:	454b      	cmp	r3, r9
 800689a:	dc01      	bgt.n	80068a0 <_printf_float+0x2c4>
 800689c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800689e:	e792      	b.n	80067c6 <_printf_float+0x1ea>
 80068a0:	2301      	movs	r3, #1
 80068a2:	4652      	mov	r2, sl
 80068a4:	4631      	mov	r1, r6
 80068a6:	4628      	mov	r0, r5
 80068a8:	47b8      	blx	r7
 80068aa:	3001      	adds	r0, #1
 80068ac:	f43f aef7 	beq.w	800669e <_printf_float+0xc2>
 80068b0:	f109 0901 	add.w	r9, r9, #1
 80068b4:	e7ee      	b.n	8006894 <_printf_float+0x2b8>
 80068b6:	bf00      	nop
 80068b8:	7fefffff 	.word	0x7fefffff
 80068bc:	08008ff0 	.word	0x08008ff0
 80068c0:	08008ff4 	.word	0x08008ff4
 80068c4:	08008ffc 	.word	0x08008ffc
 80068c8:	08008ff8 	.word	0x08008ff8
 80068cc:	08009000 	.word	0x08009000
 80068d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068d4:	429a      	cmp	r2, r3
 80068d6:	bfa8      	it	ge
 80068d8:	461a      	movge	r2, r3
 80068da:	2a00      	cmp	r2, #0
 80068dc:	4691      	mov	r9, r2
 80068de:	dc37      	bgt.n	8006950 <_printf_float+0x374>
 80068e0:	f04f 0b00 	mov.w	fp, #0
 80068e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068e8:	f104 021a 	add.w	r2, r4, #26
 80068ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068ee:	9305      	str	r3, [sp, #20]
 80068f0:	eba3 0309 	sub.w	r3, r3, r9
 80068f4:	455b      	cmp	r3, fp
 80068f6:	dc33      	bgt.n	8006960 <_printf_float+0x384>
 80068f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068fc:	429a      	cmp	r2, r3
 80068fe:	db3b      	blt.n	8006978 <_printf_float+0x39c>
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	07da      	lsls	r2, r3, #31
 8006904:	d438      	bmi.n	8006978 <_printf_float+0x39c>
 8006906:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006908:	9b05      	ldr	r3, [sp, #20]
 800690a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	eba2 0901 	sub.w	r9, r2, r1
 8006912:	4599      	cmp	r9, r3
 8006914:	bfa8      	it	ge
 8006916:	4699      	movge	r9, r3
 8006918:	f1b9 0f00 	cmp.w	r9, #0
 800691c:	dc35      	bgt.n	800698a <_printf_float+0x3ae>
 800691e:	f04f 0800 	mov.w	r8, #0
 8006922:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006926:	f104 0a1a 	add.w	sl, r4, #26
 800692a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800692e:	1a9b      	subs	r3, r3, r2
 8006930:	eba3 0309 	sub.w	r3, r3, r9
 8006934:	4543      	cmp	r3, r8
 8006936:	f77f af79 	ble.w	800682c <_printf_float+0x250>
 800693a:	2301      	movs	r3, #1
 800693c:	4652      	mov	r2, sl
 800693e:	4631      	mov	r1, r6
 8006940:	4628      	mov	r0, r5
 8006942:	47b8      	blx	r7
 8006944:	3001      	adds	r0, #1
 8006946:	f43f aeaa 	beq.w	800669e <_printf_float+0xc2>
 800694a:	f108 0801 	add.w	r8, r8, #1
 800694e:	e7ec      	b.n	800692a <_printf_float+0x34e>
 8006950:	4613      	mov	r3, r2
 8006952:	4631      	mov	r1, r6
 8006954:	4642      	mov	r2, r8
 8006956:	4628      	mov	r0, r5
 8006958:	47b8      	blx	r7
 800695a:	3001      	adds	r0, #1
 800695c:	d1c0      	bne.n	80068e0 <_printf_float+0x304>
 800695e:	e69e      	b.n	800669e <_printf_float+0xc2>
 8006960:	2301      	movs	r3, #1
 8006962:	4631      	mov	r1, r6
 8006964:	4628      	mov	r0, r5
 8006966:	9205      	str	r2, [sp, #20]
 8006968:	47b8      	blx	r7
 800696a:	3001      	adds	r0, #1
 800696c:	f43f ae97 	beq.w	800669e <_printf_float+0xc2>
 8006970:	9a05      	ldr	r2, [sp, #20]
 8006972:	f10b 0b01 	add.w	fp, fp, #1
 8006976:	e7b9      	b.n	80068ec <_printf_float+0x310>
 8006978:	ee18 3a10 	vmov	r3, s16
 800697c:	4652      	mov	r2, sl
 800697e:	4631      	mov	r1, r6
 8006980:	4628      	mov	r0, r5
 8006982:	47b8      	blx	r7
 8006984:	3001      	adds	r0, #1
 8006986:	d1be      	bne.n	8006906 <_printf_float+0x32a>
 8006988:	e689      	b.n	800669e <_printf_float+0xc2>
 800698a:	9a05      	ldr	r2, [sp, #20]
 800698c:	464b      	mov	r3, r9
 800698e:	4442      	add	r2, r8
 8006990:	4631      	mov	r1, r6
 8006992:	4628      	mov	r0, r5
 8006994:	47b8      	blx	r7
 8006996:	3001      	adds	r0, #1
 8006998:	d1c1      	bne.n	800691e <_printf_float+0x342>
 800699a:	e680      	b.n	800669e <_printf_float+0xc2>
 800699c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800699e:	2a01      	cmp	r2, #1
 80069a0:	dc01      	bgt.n	80069a6 <_printf_float+0x3ca>
 80069a2:	07db      	lsls	r3, r3, #31
 80069a4:	d538      	bpl.n	8006a18 <_printf_float+0x43c>
 80069a6:	2301      	movs	r3, #1
 80069a8:	4642      	mov	r2, r8
 80069aa:	4631      	mov	r1, r6
 80069ac:	4628      	mov	r0, r5
 80069ae:	47b8      	blx	r7
 80069b0:	3001      	adds	r0, #1
 80069b2:	f43f ae74 	beq.w	800669e <_printf_float+0xc2>
 80069b6:	ee18 3a10 	vmov	r3, s16
 80069ba:	4652      	mov	r2, sl
 80069bc:	4631      	mov	r1, r6
 80069be:	4628      	mov	r0, r5
 80069c0:	47b8      	blx	r7
 80069c2:	3001      	adds	r0, #1
 80069c4:	f43f ae6b 	beq.w	800669e <_printf_float+0xc2>
 80069c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069cc:	2200      	movs	r2, #0
 80069ce:	2300      	movs	r3, #0
 80069d0:	f7fa f8a2 	bl	8000b18 <__aeabi_dcmpeq>
 80069d4:	b9d8      	cbnz	r0, 8006a0e <_printf_float+0x432>
 80069d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069d8:	f108 0201 	add.w	r2, r8, #1
 80069dc:	3b01      	subs	r3, #1
 80069de:	4631      	mov	r1, r6
 80069e0:	4628      	mov	r0, r5
 80069e2:	47b8      	blx	r7
 80069e4:	3001      	adds	r0, #1
 80069e6:	d10e      	bne.n	8006a06 <_printf_float+0x42a>
 80069e8:	e659      	b.n	800669e <_printf_float+0xc2>
 80069ea:	2301      	movs	r3, #1
 80069ec:	4652      	mov	r2, sl
 80069ee:	4631      	mov	r1, r6
 80069f0:	4628      	mov	r0, r5
 80069f2:	47b8      	blx	r7
 80069f4:	3001      	adds	r0, #1
 80069f6:	f43f ae52 	beq.w	800669e <_printf_float+0xc2>
 80069fa:	f108 0801 	add.w	r8, r8, #1
 80069fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a00:	3b01      	subs	r3, #1
 8006a02:	4543      	cmp	r3, r8
 8006a04:	dcf1      	bgt.n	80069ea <_printf_float+0x40e>
 8006a06:	464b      	mov	r3, r9
 8006a08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a0c:	e6dc      	b.n	80067c8 <_printf_float+0x1ec>
 8006a0e:	f04f 0800 	mov.w	r8, #0
 8006a12:	f104 0a1a 	add.w	sl, r4, #26
 8006a16:	e7f2      	b.n	80069fe <_printf_float+0x422>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	4642      	mov	r2, r8
 8006a1c:	e7df      	b.n	80069de <_printf_float+0x402>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	464a      	mov	r2, r9
 8006a22:	4631      	mov	r1, r6
 8006a24:	4628      	mov	r0, r5
 8006a26:	47b8      	blx	r7
 8006a28:	3001      	adds	r0, #1
 8006a2a:	f43f ae38 	beq.w	800669e <_printf_float+0xc2>
 8006a2e:	f108 0801 	add.w	r8, r8, #1
 8006a32:	68e3      	ldr	r3, [r4, #12]
 8006a34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a36:	1a5b      	subs	r3, r3, r1
 8006a38:	4543      	cmp	r3, r8
 8006a3a:	dcf0      	bgt.n	8006a1e <_printf_float+0x442>
 8006a3c:	e6fa      	b.n	8006834 <_printf_float+0x258>
 8006a3e:	f04f 0800 	mov.w	r8, #0
 8006a42:	f104 0919 	add.w	r9, r4, #25
 8006a46:	e7f4      	b.n	8006a32 <_printf_float+0x456>

08006a48 <_printf_common>:
 8006a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a4c:	4616      	mov	r6, r2
 8006a4e:	4699      	mov	r9, r3
 8006a50:	688a      	ldr	r2, [r1, #8]
 8006a52:	690b      	ldr	r3, [r1, #16]
 8006a54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	bfb8      	it	lt
 8006a5c:	4613      	movlt	r3, r2
 8006a5e:	6033      	str	r3, [r6, #0]
 8006a60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a64:	4607      	mov	r7, r0
 8006a66:	460c      	mov	r4, r1
 8006a68:	b10a      	cbz	r2, 8006a6e <_printf_common+0x26>
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	6033      	str	r3, [r6, #0]
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	0699      	lsls	r1, r3, #26
 8006a72:	bf42      	ittt	mi
 8006a74:	6833      	ldrmi	r3, [r6, #0]
 8006a76:	3302      	addmi	r3, #2
 8006a78:	6033      	strmi	r3, [r6, #0]
 8006a7a:	6825      	ldr	r5, [r4, #0]
 8006a7c:	f015 0506 	ands.w	r5, r5, #6
 8006a80:	d106      	bne.n	8006a90 <_printf_common+0x48>
 8006a82:	f104 0a19 	add.w	sl, r4, #25
 8006a86:	68e3      	ldr	r3, [r4, #12]
 8006a88:	6832      	ldr	r2, [r6, #0]
 8006a8a:	1a9b      	subs	r3, r3, r2
 8006a8c:	42ab      	cmp	r3, r5
 8006a8e:	dc26      	bgt.n	8006ade <_printf_common+0x96>
 8006a90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a94:	1e13      	subs	r3, r2, #0
 8006a96:	6822      	ldr	r2, [r4, #0]
 8006a98:	bf18      	it	ne
 8006a9a:	2301      	movne	r3, #1
 8006a9c:	0692      	lsls	r2, r2, #26
 8006a9e:	d42b      	bmi.n	8006af8 <_printf_common+0xb0>
 8006aa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006aa4:	4649      	mov	r1, r9
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	47c0      	blx	r8
 8006aaa:	3001      	adds	r0, #1
 8006aac:	d01e      	beq.n	8006aec <_printf_common+0xa4>
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	68e5      	ldr	r5, [r4, #12]
 8006ab2:	6832      	ldr	r2, [r6, #0]
 8006ab4:	f003 0306 	and.w	r3, r3, #6
 8006ab8:	2b04      	cmp	r3, #4
 8006aba:	bf08      	it	eq
 8006abc:	1aad      	subeq	r5, r5, r2
 8006abe:	68a3      	ldr	r3, [r4, #8]
 8006ac0:	6922      	ldr	r2, [r4, #16]
 8006ac2:	bf0c      	ite	eq
 8006ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ac8:	2500      	movne	r5, #0
 8006aca:	4293      	cmp	r3, r2
 8006acc:	bfc4      	itt	gt
 8006ace:	1a9b      	subgt	r3, r3, r2
 8006ad0:	18ed      	addgt	r5, r5, r3
 8006ad2:	2600      	movs	r6, #0
 8006ad4:	341a      	adds	r4, #26
 8006ad6:	42b5      	cmp	r5, r6
 8006ad8:	d11a      	bne.n	8006b10 <_printf_common+0xc8>
 8006ada:	2000      	movs	r0, #0
 8006adc:	e008      	b.n	8006af0 <_printf_common+0xa8>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	4652      	mov	r2, sl
 8006ae2:	4649      	mov	r1, r9
 8006ae4:	4638      	mov	r0, r7
 8006ae6:	47c0      	blx	r8
 8006ae8:	3001      	adds	r0, #1
 8006aea:	d103      	bne.n	8006af4 <_printf_common+0xac>
 8006aec:	f04f 30ff 	mov.w	r0, #4294967295
 8006af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af4:	3501      	adds	r5, #1
 8006af6:	e7c6      	b.n	8006a86 <_printf_common+0x3e>
 8006af8:	18e1      	adds	r1, r4, r3
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	2030      	movs	r0, #48	; 0x30
 8006afe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b02:	4422      	add	r2, r4
 8006b04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b0c:	3302      	adds	r3, #2
 8006b0e:	e7c7      	b.n	8006aa0 <_printf_common+0x58>
 8006b10:	2301      	movs	r3, #1
 8006b12:	4622      	mov	r2, r4
 8006b14:	4649      	mov	r1, r9
 8006b16:	4638      	mov	r0, r7
 8006b18:	47c0      	blx	r8
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	d0e6      	beq.n	8006aec <_printf_common+0xa4>
 8006b1e:	3601      	adds	r6, #1
 8006b20:	e7d9      	b.n	8006ad6 <_printf_common+0x8e>
	...

08006b24 <_printf_i>:
 8006b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b28:	460c      	mov	r4, r1
 8006b2a:	4691      	mov	r9, r2
 8006b2c:	7e27      	ldrb	r7, [r4, #24]
 8006b2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b30:	2f78      	cmp	r7, #120	; 0x78
 8006b32:	4680      	mov	r8, r0
 8006b34:	469a      	mov	sl, r3
 8006b36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b3a:	d807      	bhi.n	8006b4c <_printf_i+0x28>
 8006b3c:	2f62      	cmp	r7, #98	; 0x62
 8006b3e:	d80a      	bhi.n	8006b56 <_printf_i+0x32>
 8006b40:	2f00      	cmp	r7, #0
 8006b42:	f000 80d8 	beq.w	8006cf6 <_printf_i+0x1d2>
 8006b46:	2f58      	cmp	r7, #88	; 0x58
 8006b48:	f000 80a3 	beq.w	8006c92 <_printf_i+0x16e>
 8006b4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b54:	e03a      	b.n	8006bcc <_printf_i+0xa8>
 8006b56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b5a:	2b15      	cmp	r3, #21
 8006b5c:	d8f6      	bhi.n	8006b4c <_printf_i+0x28>
 8006b5e:	a001      	add	r0, pc, #4	; (adr r0, 8006b64 <_printf_i+0x40>)
 8006b60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006b64:	08006bbd 	.word	0x08006bbd
 8006b68:	08006bd1 	.word	0x08006bd1
 8006b6c:	08006b4d 	.word	0x08006b4d
 8006b70:	08006b4d 	.word	0x08006b4d
 8006b74:	08006b4d 	.word	0x08006b4d
 8006b78:	08006b4d 	.word	0x08006b4d
 8006b7c:	08006bd1 	.word	0x08006bd1
 8006b80:	08006b4d 	.word	0x08006b4d
 8006b84:	08006b4d 	.word	0x08006b4d
 8006b88:	08006b4d 	.word	0x08006b4d
 8006b8c:	08006b4d 	.word	0x08006b4d
 8006b90:	08006cdd 	.word	0x08006cdd
 8006b94:	08006c01 	.word	0x08006c01
 8006b98:	08006cbf 	.word	0x08006cbf
 8006b9c:	08006b4d 	.word	0x08006b4d
 8006ba0:	08006b4d 	.word	0x08006b4d
 8006ba4:	08006cff 	.word	0x08006cff
 8006ba8:	08006b4d 	.word	0x08006b4d
 8006bac:	08006c01 	.word	0x08006c01
 8006bb0:	08006b4d 	.word	0x08006b4d
 8006bb4:	08006b4d 	.word	0x08006b4d
 8006bb8:	08006cc7 	.word	0x08006cc7
 8006bbc:	680b      	ldr	r3, [r1, #0]
 8006bbe:	1d1a      	adds	r2, r3, #4
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	600a      	str	r2, [r1, #0]
 8006bc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e0a3      	b.n	8006d18 <_printf_i+0x1f4>
 8006bd0:	6825      	ldr	r5, [r4, #0]
 8006bd2:	6808      	ldr	r0, [r1, #0]
 8006bd4:	062e      	lsls	r6, r5, #24
 8006bd6:	f100 0304 	add.w	r3, r0, #4
 8006bda:	d50a      	bpl.n	8006bf2 <_printf_i+0xce>
 8006bdc:	6805      	ldr	r5, [r0, #0]
 8006bde:	600b      	str	r3, [r1, #0]
 8006be0:	2d00      	cmp	r5, #0
 8006be2:	da03      	bge.n	8006bec <_printf_i+0xc8>
 8006be4:	232d      	movs	r3, #45	; 0x2d
 8006be6:	426d      	negs	r5, r5
 8006be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bec:	485e      	ldr	r0, [pc, #376]	; (8006d68 <_printf_i+0x244>)
 8006bee:	230a      	movs	r3, #10
 8006bf0:	e019      	b.n	8006c26 <_printf_i+0x102>
 8006bf2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006bf6:	6805      	ldr	r5, [r0, #0]
 8006bf8:	600b      	str	r3, [r1, #0]
 8006bfa:	bf18      	it	ne
 8006bfc:	b22d      	sxthne	r5, r5
 8006bfe:	e7ef      	b.n	8006be0 <_printf_i+0xbc>
 8006c00:	680b      	ldr	r3, [r1, #0]
 8006c02:	6825      	ldr	r5, [r4, #0]
 8006c04:	1d18      	adds	r0, r3, #4
 8006c06:	6008      	str	r0, [r1, #0]
 8006c08:	0628      	lsls	r0, r5, #24
 8006c0a:	d501      	bpl.n	8006c10 <_printf_i+0xec>
 8006c0c:	681d      	ldr	r5, [r3, #0]
 8006c0e:	e002      	b.n	8006c16 <_printf_i+0xf2>
 8006c10:	0669      	lsls	r1, r5, #25
 8006c12:	d5fb      	bpl.n	8006c0c <_printf_i+0xe8>
 8006c14:	881d      	ldrh	r5, [r3, #0]
 8006c16:	4854      	ldr	r0, [pc, #336]	; (8006d68 <_printf_i+0x244>)
 8006c18:	2f6f      	cmp	r7, #111	; 0x6f
 8006c1a:	bf0c      	ite	eq
 8006c1c:	2308      	moveq	r3, #8
 8006c1e:	230a      	movne	r3, #10
 8006c20:	2100      	movs	r1, #0
 8006c22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c26:	6866      	ldr	r6, [r4, #4]
 8006c28:	60a6      	str	r6, [r4, #8]
 8006c2a:	2e00      	cmp	r6, #0
 8006c2c:	bfa2      	ittt	ge
 8006c2e:	6821      	ldrge	r1, [r4, #0]
 8006c30:	f021 0104 	bicge.w	r1, r1, #4
 8006c34:	6021      	strge	r1, [r4, #0]
 8006c36:	b90d      	cbnz	r5, 8006c3c <_printf_i+0x118>
 8006c38:	2e00      	cmp	r6, #0
 8006c3a:	d04d      	beq.n	8006cd8 <_printf_i+0x1b4>
 8006c3c:	4616      	mov	r6, r2
 8006c3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c42:	fb03 5711 	mls	r7, r3, r1, r5
 8006c46:	5dc7      	ldrb	r7, [r0, r7]
 8006c48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c4c:	462f      	mov	r7, r5
 8006c4e:	42bb      	cmp	r3, r7
 8006c50:	460d      	mov	r5, r1
 8006c52:	d9f4      	bls.n	8006c3e <_printf_i+0x11a>
 8006c54:	2b08      	cmp	r3, #8
 8006c56:	d10b      	bne.n	8006c70 <_printf_i+0x14c>
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	07df      	lsls	r7, r3, #31
 8006c5c:	d508      	bpl.n	8006c70 <_printf_i+0x14c>
 8006c5e:	6923      	ldr	r3, [r4, #16]
 8006c60:	6861      	ldr	r1, [r4, #4]
 8006c62:	4299      	cmp	r1, r3
 8006c64:	bfde      	ittt	le
 8006c66:	2330      	movle	r3, #48	; 0x30
 8006c68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c70:	1b92      	subs	r2, r2, r6
 8006c72:	6122      	str	r2, [r4, #16]
 8006c74:	f8cd a000 	str.w	sl, [sp]
 8006c78:	464b      	mov	r3, r9
 8006c7a:	aa03      	add	r2, sp, #12
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	4640      	mov	r0, r8
 8006c80:	f7ff fee2 	bl	8006a48 <_printf_common>
 8006c84:	3001      	adds	r0, #1
 8006c86:	d14c      	bne.n	8006d22 <_printf_i+0x1fe>
 8006c88:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8c:	b004      	add	sp, #16
 8006c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c92:	4835      	ldr	r0, [pc, #212]	; (8006d68 <_printf_i+0x244>)
 8006c94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	680e      	ldr	r6, [r1, #0]
 8006c9c:	061f      	lsls	r7, r3, #24
 8006c9e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006ca2:	600e      	str	r6, [r1, #0]
 8006ca4:	d514      	bpl.n	8006cd0 <_printf_i+0x1ac>
 8006ca6:	07d9      	lsls	r1, r3, #31
 8006ca8:	bf44      	itt	mi
 8006caa:	f043 0320 	orrmi.w	r3, r3, #32
 8006cae:	6023      	strmi	r3, [r4, #0]
 8006cb0:	b91d      	cbnz	r5, 8006cba <_printf_i+0x196>
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	f023 0320 	bic.w	r3, r3, #32
 8006cb8:	6023      	str	r3, [r4, #0]
 8006cba:	2310      	movs	r3, #16
 8006cbc:	e7b0      	b.n	8006c20 <_printf_i+0xfc>
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	f043 0320 	orr.w	r3, r3, #32
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	2378      	movs	r3, #120	; 0x78
 8006cc8:	4828      	ldr	r0, [pc, #160]	; (8006d6c <_printf_i+0x248>)
 8006cca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cce:	e7e3      	b.n	8006c98 <_printf_i+0x174>
 8006cd0:	065e      	lsls	r6, r3, #25
 8006cd2:	bf48      	it	mi
 8006cd4:	b2ad      	uxthmi	r5, r5
 8006cd6:	e7e6      	b.n	8006ca6 <_printf_i+0x182>
 8006cd8:	4616      	mov	r6, r2
 8006cda:	e7bb      	b.n	8006c54 <_printf_i+0x130>
 8006cdc:	680b      	ldr	r3, [r1, #0]
 8006cde:	6826      	ldr	r6, [r4, #0]
 8006ce0:	6960      	ldr	r0, [r4, #20]
 8006ce2:	1d1d      	adds	r5, r3, #4
 8006ce4:	600d      	str	r5, [r1, #0]
 8006ce6:	0635      	lsls	r5, r6, #24
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	d501      	bpl.n	8006cf0 <_printf_i+0x1cc>
 8006cec:	6018      	str	r0, [r3, #0]
 8006cee:	e002      	b.n	8006cf6 <_printf_i+0x1d2>
 8006cf0:	0671      	lsls	r1, r6, #25
 8006cf2:	d5fb      	bpl.n	8006cec <_printf_i+0x1c8>
 8006cf4:	8018      	strh	r0, [r3, #0]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	6123      	str	r3, [r4, #16]
 8006cfa:	4616      	mov	r6, r2
 8006cfc:	e7ba      	b.n	8006c74 <_printf_i+0x150>
 8006cfe:	680b      	ldr	r3, [r1, #0]
 8006d00:	1d1a      	adds	r2, r3, #4
 8006d02:	600a      	str	r2, [r1, #0]
 8006d04:	681e      	ldr	r6, [r3, #0]
 8006d06:	6862      	ldr	r2, [r4, #4]
 8006d08:	2100      	movs	r1, #0
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	f7f9 fa90 	bl	8000230 <memchr>
 8006d10:	b108      	cbz	r0, 8006d16 <_printf_i+0x1f2>
 8006d12:	1b80      	subs	r0, r0, r6
 8006d14:	6060      	str	r0, [r4, #4]
 8006d16:	6863      	ldr	r3, [r4, #4]
 8006d18:	6123      	str	r3, [r4, #16]
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d20:	e7a8      	b.n	8006c74 <_printf_i+0x150>
 8006d22:	6923      	ldr	r3, [r4, #16]
 8006d24:	4632      	mov	r2, r6
 8006d26:	4649      	mov	r1, r9
 8006d28:	4640      	mov	r0, r8
 8006d2a:	47d0      	blx	sl
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d0ab      	beq.n	8006c88 <_printf_i+0x164>
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	079b      	lsls	r3, r3, #30
 8006d34:	d413      	bmi.n	8006d5e <_printf_i+0x23a>
 8006d36:	68e0      	ldr	r0, [r4, #12]
 8006d38:	9b03      	ldr	r3, [sp, #12]
 8006d3a:	4298      	cmp	r0, r3
 8006d3c:	bfb8      	it	lt
 8006d3e:	4618      	movlt	r0, r3
 8006d40:	e7a4      	b.n	8006c8c <_printf_i+0x168>
 8006d42:	2301      	movs	r3, #1
 8006d44:	4632      	mov	r2, r6
 8006d46:	4649      	mov	r1, r9
 8006d48:	4640      	mov	r0, r8
 8006d4a:	47d0      	blx	sl
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	d09b      	beq.n	8006c88 <_printf_i+0x164>
 8006d50:	3501      	adds	r5, #1
 8006d52:	68e3      	ldr	r3, [r4, #12]
 8006d54:	9903      	ldr	r1, [sp, #12]
 8006d56:	1a5b      	subs	r3, r3, r1
 8006d58:	42ab      	cmp	r3, r5
 8006d5a:	dcf2      	bgt.n	8006d42 <_printf_i+0x21e>
 8006d5c:	e7eb      	b.n	8006d36 <_printf_i+0x212>
 8006d5e:	2500      	movs	r5, #0
 8006d60:	f104 0619 	add.w	r6, r4, #25
 8006d64:	e7f5      	b.n	8006d52 <_printf_i+0x22e>
 8006d66:	bf00      	nop
 8006d68:	08009002 	.word	0x08009002
 8006d6c:	08009013 	.word	0x08009013

08006d70 <iprintf>:
 8006d70:	b40f      	push	{r0, r1, r2, r3}
 8006d72:	4b0a      	ldr	r3, [pc, #40]	; (8006d9c <iprintf+0x2c>)
 8006d74:	b513      	push	{r0, r1, r4, lr}
 8006d76:	681c      	ldr	r4, [r3, #0]
 8006d78:	b124      	cbz	r4, 8006d84 <iprintf+0x14>
 8006d7a:	69a3      	ldr	r3, [r4, #24]
 8006d7c:	b913      	cbnz	r3, 8006d84 <iprintf+0x14>
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f001 f8d8 	bl	8007f34 <__sinit>
 8006d84:	ab05      	add	r3, sp, #20
 8006d86:	9a04      	ldr	r2, [sp, #16]
 8006d88:	68a1      	ldr	r1, [r4, #8]
 8006d8a:	9301      	str	r3, [sp, #4]
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f001 fe45 	bl	8008a1c <_vfiprintf_r>
 8006d92:	b002      	add	sp, #8
 8006d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d98:	b004      	add	sp, #16
 8006d9a:	4770      	bx	lr
 8006d9c:	2000002c 	.word	0x2000002c

08006da0 <_puts_r>:
 8006da0:	b570      	push	{r4, r5, r6, lr}
 8006da2:	460e      	mov	r6, r1
 8006da4:	4605      	mov	r5, r0
 8006da6:	b118      	cbz	r0, 8006db0 <_puts_r+0x10>
 8006da8:	6983      	ldr	r3, [r0, #24]
 8006daa:	b90b      	cbnz	r3, 8006db0 <_puts_r+0x10>
 8006dac:	f001 f8c2 	bl	8007f34 <__sinit>
 8006db0:	69ab      	ldr	r3, [r5, #24]
 8006db2:	68ac      	ldr	r4, [r5, #8]
 8006db4:	b913      	cbnz	r3, 8006dbc <_puts_r+0x1c>
 8006db6:	4628      	mov	r0, r5
 8006db8:	f001 f8bc 	bl	8007f34 <__sinit>
 8006dbc:	4b2c      	ldr	r3, [pc, #176]	; (8006e70 <_puts_r+0xd0>)
 8006dbe:	429c      	cmp	r4, r3
 8006dc0:	d120      	bne.n	8006e04 <_puts_r+0x64>
 8006dc2:	686c      	ldr	r4, [r5, #4]
 8006dc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dc6:	07db      	lsls	r3, r3, #31
 8006dc8:	d405      	bmi.n	8006dd6 <_puts_r+0x36>
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	0598      	lsls	r0, r3, #22
 8006dce:	d402      	bmi.n	8006dd6 <_puts_r+0x36>
 8006dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dd2:	f001 f952 	bl	800807a <__retarget_lock_acquire_recursive>
 8006dd6:	89a3      	ldrh	r3, [r4, #12]
 8006dd8:	0719      	lsls	r1, r3, #28
 8006dda:	d51d      	bpl.n	8006e18 <_puts_r+0x78>
 8006ddc:	6923      	ldr	r3, [r4, #16]
 8006dde:	b1db      	cbz	r3, 8006e18 <_puts_r+0x78>
 8006de0:	3e01      	subs	r6, #1
 8006de2:	68a3      	ldr	r3, [r4, #8]
 8006de4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006de8:	3b01      	subs	r3, #1
 8006dea:	60a3      	str	r3, [r4, #8]
 8006dec:	bb39      	cbnz	r1, 8006e3e <_puts_r+0x9e>
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	da38      	bge.n	8006e64 <_puts_r+0xc4>
 8006df2:	4622      	mov	r2, r4
 8006df4:	210a      	movs	r1, #10
 8006df6:	4628      	mov	r0, r5
 8006df8:	f000 f848 	bl	8006e8c <__swbuf_r>
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	d011      	beq.n	8006e24 <_puts_r+0x84>
 8006e00:	250a      	movs	r5, #10
 8006e02:	e011      	b.n	8006e28 <_puts_r+0x88>
 8006e04:	4b1b      	ldr	r3, [pc, #108]	; (8006e74 <_puts_r+0xd4>)
 8006e06:	429c      	cmp	r4, r3
 8006e08:	d101      	bne.n	8006e0e <_puts_r+0x6e>
 8006e0a:	68ac      	ldr	r4, [r5, #8]
 8006e0c:	e7da      	b.n	8006dc4 <_puts_r+0x24>
 8006e0e:	4b1a      	ldr	r3, [pc, #104]	; (8006e78 <_puts_r+0xd8>)
 8006e10:	429c      	cmp	r4, r3
 8006e12:	bf08      	it	eq
 8006e14:	68ec      	ldreq	r4, [r5, #12]
 8006e16:	e7d5      	b.n	8006dc4 <_puts_r+0x24>
 8006e18:	4621      	mov	r1, r4
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	f000 f888 	bl	8006f30 <__swsetup_r>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	d0dd      	beq.n	8006de0 <_puts_r+0x40>
 8006e24:	f04f 35ff 	mov.w	r5, #4294967295
 8006e28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e2a:	07da      	lsls	r2, r3, #31
 8006e2c:	d405      	bmi.n	8006e3a <_puts_r+0x9a>
 8006e2e:	89a3      	ldrh	r3, [r4, #12]
 8006e30:	059b      	lsls	r3, r3, #22
 8006e32:	d402      	bmi.n	8006e3a <_puts_r+0x9a>
 8006e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e36:	f001 f921 	bl	800807c <__retarget_lock_release_recursive>
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	bd70      	pop	{r4, r5, r6, pc}
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	da04      	bge.n	8006e4c <_puts_r+0xac>
 8006e42:	69a2      	ldr	r2, [r4, #24]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	dc06      	bgt.n	8006e56 <_puts_r+0xb6>
 8006e48:	290a      	cmp	r1, #10
 8006e4a:	d004      	beq.n	8006e56 <_puts_r+0xb6>
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	6022      	str	r2, [r4, #0]
 8006e52:	7019      	strb	r1, [r3, #0]
 8006e54:	e7c5      	b.n	8006de2 <_puts_r+0x42>
 8006e56:	4622      	mov	r2, r4
 8006e58:	4628      	mov	r0, r5
 8006e5a:	f000 f817 	bl	8006e8c <__swbuf_r>
 8006e5e:	3001      	adds	r0, #1
 8006e60:	d1bf      	bne.n	8006de2 <_puts_r+0x42>
 8006e62:	e7df      	b.n	8006e24 <_puts_r+0x84>
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	250a      	movs	r5, #10
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	6022      	str	r2, [r4, #0]
 8006e6c:	701d      	strb	r5, [r3, #0]
 8006e6e:	e7db      	b.n	8006e28 <_puts_r+0x88>
 8006e70:	080090d8 	.word	0x080090d8
 8006e74:	080090f8 	.word	0x080090f8
 8006e78:	080090b8 	.word	0x080090b8

08006e7c <puts>:
 8006e7c:	4b02      	ldr	r3, [pc, #8]	; (8006e88 <puts+0xc>)
 8006e7e:	4601      	mov	r1, r0
 8006e80:	6818      	ldr	r0, [r3, #0]
 8006e82:	f7ff bf8d 	b.w	8006da0 <_puts_r>
 8006e86:	bf00      	nop
 8006e88:	2000002c 	.word	0x2000002c

08006e8c <__swbuf_r>:
 8006e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8e:	460e      	mov	r6, r1
 8006e90:	4614      	mov	r4, r2
 8006e92:	4605      	mov	r5, r0
 8006e94:	b118      	cbz	r0, 8006e9e <__swbuf_r+0x12>
 8006e96:	6983      	ldr	r3, [r0, #24]
 8006e98:	b90b      	cbnz	r3, 8006e9e <__swbuf_r+0x12>
 8006e9a:	f001 f84b 	bl	8007f34 <__sinit>
 8006e9e:	4b21      	ldr	r3, [pc, #132]	; (8006f24 <__swbuf_r+0x98>)
 8006ea0:	429c      	cmp	r4, r3
 8006ea2:	d12b      	bne.n	8006efc <__swbuf_r+0x70>
 8006ea4:	686c      	ldr	r4, [r5, #4]
 8006ea6:	69a3      	ldr	r3, [r4, #24]
 8006ea8:	60a3      	str	r3, [r4, #8]
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	071a      	lsls	r2, r3, #28
 8006eae:	d52f      	bpl.n	8006f10 <__swbuf_r+0x84>
 8006eb0:	6923      	ldr	r3, [r4, #16]
 8006eb2:	b36b      	cbz	r3, 8006f10 <__swbuf_r+0x84>
 8006eb4:	6923      	ldr	r3, [r4, #16]
 8006eb6:	6820      	ldr	r0, [r4, #0]
 8006eb8:	1ac0      	subs	r0, r0, r3
 8006eba:	6963      	ldr	r3, [r4, #20]
 8006ebc:	b2f6      	uxtb	r6, r6
 8006ebe:	4283      	cmp	r3, r0
 8006ec0:	4637      	mov	r7, r6
 8006ec2:	dc04      	bgt.n	8006ece <__swbuf_r+0x42>
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	f000 ffa0 	bl	8007e0c <_fflush_r>
 8006ecc:	bb30      	cbnz	r0, 8006f1c <__swbuf_r+0x90>
 8006ece:	68a3      	ldr	r3, [r4, #8]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	60a3      	str	r3, [r4, #8]
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	1c5a      	adds	r2, r3, #1
 8006ed8:	6022      	str	r2, [r4, #0]
 8006eda:	701e      	strb	r6, [r3, #0]
 8006edc:	6963      	ldr	r3, [r4, #20]
 8006ede:	3001      	adds	r0, #1
 8006ee0:	4283      	cmp	r3, r0
 8006ee2:	d004      	beq.n	8006eee <__swbuf_r+0x62>
 8006ee4:	89a3      	ldrh	r3, [r4, #12]
 8006ee6:	07db      	lsls	r3, r3, #31
 8006ee8:	d506      	bpl.n	8006ef8 <__swbuf_r+0x6c>
 8006eea:	2e0a      	cmp	r6, #10
 8006eec:	d104      	bne.n	8006ef8 <__swbuf_r+0x6c>
 8006eee:	4621      	mov	r1, r4
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	f000 ff8b 	bl	8007e0c <_fflush_r>
 8006ef6:	b988      	cbnz	r0, 8006f1c <__swbuf_r+0x90>
 8006ef8:	4638      	mov	r0, r7
 8006efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006efc:	4b0a      	ldr	r3, [pc, #40]	; (8006f28 <__swbuf_r+0x9c>)
 8006efe:	429c      	cmp	r4, r3
 8006f00:	d101      	bne.n	8006f06 <__swbuf_r+0x7a>
 8006f02:	68ac      	ldr	r4, [r5, #8]
 8006f04:	e7cf      	b.n	8006ea6 <__swbuf_r+0x1a>
 8006f06:	4b09      	ldr	r3, [pc, #36]	; (8006f2c <__swbuf_r+0xa0>)
 8006f08:	429c      	cmp	r4, r3
 8006f0a:	bf08      	it	eq
 8006f0c:	68ec      	ldreq	r4, [r5, #12]
 8006f0e:	e7ca      	b.n	8006ea6 <__swbuf_r+0x1a>
 8006f10:	4621      	mov	r1, r4
 8006f12:	4628      	mov	r0, r5
 8006f14:	f000 f80c 	bl	8006f30 <__swsetup_r>
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	d0cb      	beq.n	8006eb4 <__swbuf_r+0x28>
 8006f1c:	f04f 37ff 	mov.w	r7, #4294967295
 8006f20:	e7ea      	b.n	8006ef8 <__swbuf_r+0x6c>
 8006f22:	bf00      	nop
 8006f24:	080090d8 	.word	0x080090d8
 8006f28:	080090f8 	.word	0x080090f8
 8006f2c:	080090b8 	.word	0x080090b8

08006f30 <__swsetup_r>:
 8006f30:	4b32      	ldr	r3, [pc, #200]	; (8006ffc <__swsetup_r+0xcc>)
 8006f32:	b570      	push	{r4, r5, r6, lr}
 8006f34:	681d      	ldr	r5, [r3, #0]
 8006f36:	4606      	mov	r6, r0
 8006f38:	460c      	mov	r4, r1
 8006f3a:	b125      	cbz	r5, 8006f46 <__swsetup_r+0x16>
 8006f3c:	69ab      	ldr	r3, [r5, #24]
 8006f3e:	b913      	cbnz	r3, 8006f46 <__swsetup_r+0x16>
 8006f40:	4628      	mov	r0, r5
 8006f42:	f000 fff7 	bl	8007f34 <__sinit>
 8006f46:	4b2e      	ldr	r3, [pc, #184]	; (8007000 <__swsetup_r+0xd0>)
 8006f48:	429c      	cmp	r4, r3
 8006f4a:	d10f      	bne.n	8006f6c <__swsetup_r+0x3c>
 8006f4c:	686c      	ldr	r4, [r5, #4]
 8006f4e:	89a3      	ldrh	r3, [r4, #12]
 8006f50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f54:	0719      	lsls	r1, r3, #28
 8006f56:	d42c      	bmi.n	8006fb2 <__swsetup_r+0x82>
 8006f58:	06dd      	lsls	r5, r3, #27
 8006f5a:	d411      	bmi.n	8006f80 <__swsetup_r+0x50>
 8006f5c:	2309      	movs	r3, #9
 8006f5e:	6033      	str	r3, [r6, #0]
 8006f60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f64:	81a3      	strh	r3, [r4, #12]
 8006f66:	f04f 30ff 	mov.w	r0, #4294967295
 8006f6a:	e03e      	b.n	8006fea <__swsetup_r+0xba>
 8006f6c:	4b25      	ldr	r3, [pc, #148]	; (8007004 <__swsetup_r+0xd4>)
 8006f6e:	429c      	cmp	r4, r3
 8006f70:	d101      	bne.n	8006f76 <__swsetup_r+0x46>
 8006f72:	68ac      	ldr	r4, [r5, #8]
 8006f74:	e7eb      	b.n	8006f4e <__swsetup_r+0x1e>
 8006f76:	4b24      	ldr	r3, [pc, #144]	; (8007008 <__swsetup_r+0xd8>)
 8006f78:	429c      	cmp	r4, r3
 8006f7a:	bf08      	it	eq
 8006f7c:	68ec      	ldreq	r4, [r5, #12]
 8006f7e:	e7e6      	b.n	8006f4e <__swsetup_r+0x1e>
 8006f80:	0758      	lsls	r0, r3, #29
 8006f82:	d512      	bpl.n	8006faa <__swsetup_r+0x7a>
 8006f84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f86:	b141      	cbz	r1, 8006f9a <__swsetup_r+0x6a>
 8006f88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f8c:	4299      	cmp	r1, r3
 8006f8e:	d002      	beq.n	8006f96 <__swsetup_r+0x66>
 8006f90:	4630      	mov	r0, r6
 8006f92:	f001 fc6f 	bl	8008874 <_free_r>
 8006f96:	2300      	movs	r3, #0
 8006f98:	6363      	str	r3, [r4, #52]	; 0x34
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006fa0:	81a3      	strh	r3, [r4, #12]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	6063      	str	r3, [r4, #4]
 8006fa6:	6923      	ldr	r3, [r4, #16]
 8006fa8:	6023      	str	r3, [r4, #0]
 8006faa:	89a3      	ldrh	r3, [r4, #12]
 8006fac:	f043 0308 	orr.w	r3, r3, #8
 8006fb0:	81a3      	strh	r3, [r4, #12]
 8006fb2:	6923      	ldr	r3, [r4, #16]
 8006fb4:	b94b      	cbnz	r3, 8006fca <__swsetup_r+0x9a>
 8006fb6:	89a3      	ldrh	r3, [r4, #12]
 8006fb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fc0:	d003      	beq.n	8006fca <__swsetup_r+0x9a>
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	f001 f87f 	bl	80080c8 <__smakebuf_r>
 8006fca:	89a0      	ldrh	r0, [r4, #12]
 8006fcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fd0:	f010 0301 	ands.w	r3, r0, #1
 8006fd4:	d00a      	beq.n	8006fec <__swsetup_r+0xbc>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60a3      	str	r3, [r4, #8]
 8006fda:	6963      	ldr	r3, [r4, #20]
 8006fdc:	425b      	negs	r3, r3
 8006fde:	61a3      	str	r3, [r4, #24]
 8006fe0:	6923      	ldr	r3, [r4, #16]
 8006fe2:	b943      	cbnz	r3, 8006ff6 <__swsetup_r+0xc6>
 8006fe4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006fe8:	d1ba      	bne.n	8006f60 <__swsetup_r+0x30>
 8006fea:	bd70      	pop	{r4, r5, r6, pc}
 8006fec:	0781      	lsls	r1, r0, #30
 8006fee:	bf58      	it	pl
 8006ff0:	6963      	ldrpl	r3, [r4, #20]
 8006ff2:	60a3      	str	r3, [r4, #8]
 8006ff4:	e7f4      	b.n	8006fe0 <__swsetup_r+0xb0>
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	e7f7      	b.n	8006fea <__swsetup_r+0xba>
 8006ffa:	bf00      	nop
 8006ffc:	2000002c 	.word	0x2000002c
 8007000:	080090d8 	.word	0x080090d8
 8007004:	080090f8 	.word	0x080090f8
 8007008:	080090b8 	.word	0x080090b8

0800700c <quorem>:
 800700c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007010:	6903      	ldr	r3, [r0, #16]
 8007012:	690c      	ldr	r4, [r1, #16]
 8007014:	42a3      	cmp	r3, r4
 8007016:	4607      	mov	r7, r0
 8007018:	f2c0 8081 	blt.w	800711e <quorem+0x112>
 800701c:	3c01      	subs	r4, #1
 800701e:	f101 0814 	add.w	r8, r1, #20
 8007022:	f100 0514 	add.w	r5, r0, #20
 8007026:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800702a:	9301      	str	r3, [sp, #4]
 800702c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007030:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007034:	3301      	adds	r3, #1
 8007036:	429a      	cmp	r2, r3
 8007038:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800703c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007040:	fbb2 f6f3 	udiv	r6, r2, r3
 8007044:	d331      	bcc.n	80070aa <quorem+0x9e>
 8007046:	f04f 0e00 	mov.w	lr, #0
 800704a:	4640      	mov	r0, r8
 800704c:	46ac      	mov	ip, r5
 800704e:	46f2      	mov	sl, lr
 8007050:	f850 2b04 	ldr.w	r2, [r0], #4
 8007054:	b293      	uxth	r3, r2
 8007056:	fb06 e303 	mla	r3, r6, r3, lr
 800705a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800705e:	b29b      	uxth	r3, r3
 8007060:	ebaa 0303 	sub.w	r3, sl, r3
 8007064:	0c12      	lsrs	r2, r2, #16
 8007066:	f8dc a000 	ldr.w	sl, [ip]
 800706a:	fb06 e202 	mla	r2, r6, r2, lr
 800706e:	fa13 f38a 	uxtah	r3, r3, sl
 8007072:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007076:	fa1f fa82 	uxth.w	sl, r2
 800707a:	f8dc 2000 	ldr.w	r2, [ip]
 800707e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007082:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007086:	b29b      	uxth	r3, r3
 8007088:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800708c:	4581      	cmp	r9, r0
 800708e:	f84c 3b04 	str.w	r3, [ip], #4
 8007092:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007096:	d2db      	bcs.n	8007050 <quorem+0x44>
 8007098:	f855 300b 	ldr.w	r3, [r5, fp]
 800709c:	b92b      	cbnz	r3, 80070aa <quorem+0x9e>
 800709e:	9b01      	ldr	r3, [sp, #4]
 80070a0:	3b04      	subs	r3, #4
 80070a2:	429d      	cmp	r5, r3
 80070a4:	461a      	mov	r2, r3
 80070a6:	d32e      	bcc.n	8007106 <quorem+0xfa>
 80070a8:	613c      	str	r4, [r7, #16]
 80070aa:	4638      	mov	r0, r7
 80070ac:	f001 fad2 	bl	8008654 <__mcmp>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	db24      	blt.n	80070fe <quorem+0xf2>
 80070b4:	3601      	adds	r6, #1
 80070b6:	4628      	mov	r0, r5
 80070b8:	f04f 0c00 	mov.w	ip, #0
 80070bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80070c0:	f8d0 e000 	ldr.w	lr, [r0]
 80070c4:	b293      	uxth	r3, r2
 80070c6:	ebac 0303 	sub.w	r3, ip, r3
 80070ca:	0c12      	lsrs	r2, r2, #16
 80070cc:	fa13 f38e 	uxtah	r3, r3, lr
 80070d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80070d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070d8:	b29b      	uxth	r3, r3
 80070da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070de:	45c1      	cmp	r9, r8
 80070e0:	f840 3b04 	str.w	r3, [r0], #4
 80070e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80070e8:	d2e8      	bcs.n	80070bc <quorem+0xb0>
 80070ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070f2:	b922      	cbnz	r2, 80070fe <quorem+0xf2>
 80070f4:	3b04      	subs	r3, #4
 80070f6:	429d      	cmp	r5, r3
 80070f8:	461a      	mov	r2, r3
 80070fa:	d30a      	bcc.n	8007112 <quorem+0x106>
 80070fc:	613c      	str	r4, [r7, #16]
 80070fe:	4630      	mov	r0, r6
 8007100:	b003      	add	sp, #12
 8007102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007106:	6812      	ldr	r2, [r2, #0]
 8007108:	3b04      	subs	r3, #4
 800710a:	2a00      	cmp	r2, #0
 800710c:	d1cc      	bne.n	80070a8 <quorem+0x9c>
 800710e:	3c01      	subs	r4, #1
 8007110:	e7c7      	b.n	80070a2 <quorem+0x96>
 8007112:	6812      	ldr	r2, [r2, #0]
 8007114:	3b04      	subs	r3, #4
 8007116:	2a00      	cmp	r2, #0
 8007118:	d1f0      	bne.n	80070fc <quorem+0xf0>
 800711a:	3c01      	subs	r4, #1
 800711c:	e7eb      	b.n	80070f6 <quorem+0xea>
 800711e:	2000      	movs	r0, #0
 8007120:	e7ee      	b.n	8007100 <quorem+0xf4>
 8007122:	0000      	movs	r0, r0
 8007124:	0000      	movs	r0, r0
	...

08007128 <_dtoa_r>:
 8007128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	ed2d 8b02 	vpush	{d8}
 8007130:	ec57 6b10 	vmov	r6, r7, d0
 8007134:	b095      	sub	sp, #84	; 0x54
 8007136:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007138:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800713c:	9105      	str	r1, [sp, #20]
 800713e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007142:	4604      	mov	r4, r0
 8007144:	9209      	str	r2, [sp, #36]	; 0x24
 8007146:	930f      	str	r3, [sp, #60]	; 0x3c
 8007148:	b975      	cbnz	r5, 8007168 <_dtoa_r+0x40>
 800714a:	2010      	movs	r0, #16
 800714c:	f000 fffc 	bl	8008148 <malloc>
 8007150:	4602      	mov	r2, r0
 8007152:	6260      	str	r0, [r4, #36]	; 0x24
 8007154:	b920      	cbnz	r0, 8007160 <_dtoa_r+0x38>
 8007156:	4bb2      	ldr	r3, [pc, #712]	; (8007420 <_dtoa_r+0x2f8>)
 8007158:	21ea      	movs	r1, #234	; 0xea
 800715a:	48b2      	ldr	r0, [pc, #712]	; (8007424 <_dtoa_r+0x2fc>)
 800715c:	f001 fdf4 	bl	8008d48 <__assert_func>
 8007160:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007164:	6005      	str	r5, [r0, #0]
 8007166:	60c5      	str	r5, [r0, #12]
 8007168:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800716a:	6819      	ldr	r1, [r3, #0]
 800716c:	b151      	cbz	r1, 8007184 <_dtoa_r+0x5c>
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	604a      	str	r2, [r1, #4]
 8007172:	2301      	movs	r3, #1
 8007174:	4093      	lsls	r3, r2
 8007176:	608b      	str	r3, [r1, #8]
 8007178:	4620      	mov	r0, r4
 800717a:	f001 f82d 	bl	80081d8 <_Bfree>
 800717e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007180:	2200      	movs	r2, #0
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	1e3b      	subs	r3, r7, #0
 8007186:	bfb9      	ittee	lt
 8007188:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800718c:	9303      	strlt	r3, [sp, #12]
 800718e:	2300      	movge	r3, #0
 8007190:	f8c8 3000 	strge.w	r3, [r8]
 8007194:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007198:	4ba3      	ldr	r3, [pc, #652]	; (8007428 <_dtoa_r+0x300>)
 800719a:	bfbc      	itt	lt
 800719c:	2201      	movlt	r2, #1
 800719e:	f8c8 2000 	strlt.w	r2, [r8]
 80071a2:	ea33 0309 	bics.w	r3, r3, r9
 80071a6:	d11b      	bne.n	80071e0 <_dtoa_r+0xb8>
 80071a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80071aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80071ae:	6013      	str	r3, [r2, #0]
 80071b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071b4:	4333      	orrs	r3, r6
 80071b6:	f000 857a 	beq.w	8007cae <_dtoa_r+0xb86>
 80071ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071bc:	b963      	cbnz	r3, 80071d8 <_dtoa_r+0xb0>
 80071be:	4b9b      	ldr	r3, [pc, #620]	; (800742c <_dtoa_r+0x304>)
 80071c0:	e024      	b.n	800720c <_dtoa_r+0xe4>
 80071c2:	4b9b      	ldr	r3, [pc, #620]	; (8007430 <_dtoa_r+0x308>)
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	3308      	adds	r3, #8
 80071c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80071ca:	6013      	str	r3, [r2, #0]
 80071cc:	9800      	ldr	r0, [sp, #0]
 80071ce:	b015      	add	sp, #84	; 0x54
 80071d0:	ecbd 8b02 	vpop	{d8}
 80071d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d8:	4b94      	ldr	r3, [pc, #592]	; (800742c <_dtoa_r+0x304>)
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	3303      	adds	r3, #3
 80071de:	e7f3      	b.n	80071c8 <_dtoa_r+0xa0>
 80071e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071e4:	2200      	movs	r2, #0
 80071e6:	ec51 0b17 	vmov	r0, r1, d7
 80071ea:	2300      	movs	r3, #0
 80071ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80071f0:	f7f9 fc92 	bl	8000b18 <__aeabi_dcmpeq>
 80071f4:	4680      	mov	r8, r0
 80071f6:	b158      	cbz	r0, 8007210 <_dtoa_r+0xe8>
 80071f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80071fa:	2301      	movs	r3, #1
 80071fc:	6013      	str	r3, [r2, #0]
 80071fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 8551 	beq.w	8007ca8 <_dtoa_r+0xb80>
 8007206:	488b      	ldr	r0, [pc, #556]	; (8007434 <_dtoa_r+0x30c>)
 8007208:	6018      	str	r0, [r3, #0]
 800720a:	1e43      	subs	r3, r0, #1
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	e7dd      	b.n	80071cc <_dtoa_r+0xa4>
 8007210:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007214:	aa12      	add	r2, sp, #72	; 0x48
 8007216:	a913      	add	r1, sp, #76	; 0x4c
 8007218:	4620      	mov	r0, r4
 800721a:	f001 fabf 	bl	800879c <__d2b>
 800721e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007222:	4683      	mov	fp, r0
 8007224:	2d00      	cmp	r5, #0
 8007226:	d07c      	beq.n	8007322 <_dtoa_r+0x1fa>
 8007228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800722a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800722e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007232:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007236:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800723a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800723e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007242:	4b7d      	ldr	r3, [pc, #500]	; (8007438 <_dtoa_r+0x310>)
 8007244:	2200      	movs	r2, #0
 8007246:	4630      	mov	r0, r6
 8007248:	4639      	mov	r1, r7
 800724a:	f7f9 f845 	bl	80002d8 <__aeabi_dsub>
 800724e:	a36e      	add	r3, pc, #440	; (adr r3, 8007408 <_dtoa_r+0x2e0>)
 8007250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007254:	f7f9 f9f8 	bl	8000648 <__aeabi_dmul>
 8007258:	a36d      	add	r3, pc, #436	; (adr r3, 8007410 <_dtoa_r+0x2e8>)
 800725a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725e:	f7f9 f83d 	bl	80002dc <__adddf3>
 8007262:	4606      	mov	r6, r0
 8007264:	4628      	mov	r0, r5
 8007266:	460f      	mov	r7, r1
 8007268:	f7f9 f984 	bl	8000574 <__aeabi_i2d>
 800726c:	a36a      	add	r3, pc, #424	; (adr r3, 8007418 <_dtoa_r+0x2f0>)
 800726e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007272:	f7f9 f9e9 	bl	8000648 <__aeabi_dmul>
 8007276:	4602      	mov	r2, r0
 8007278:	460b      	mov	r3, r1
 800727a:	4630      	mov	r0, r6
 800727c:	4639      	mov	r1, r7
 800727e:	f7f9 f82d 	bl	80002dc <__adddf3>
 8007282:	4606      	mov	r6, r0
 8007284:	460f      	mov	r7, r1
 8007286:	f7f9 fc8f 	bl	8000ba8 <__aeabi_d2iz>
 800728a:	2200      	movs	r2, #0
 800728c:	4682      	mov	sl, r0
 800728e:	2300      	movs	r3, #0
 8007290:	4630      	mov	r0, r6
 8007292:	4639      	mov	r1, r7
 8007294:	f7f9 fc4a 	bl	8000b2c <__aeabi_dcmplt>
 8007298:	b148      	cbz	r0, 80072ae <_dtoa_r+0x186>
 800729a:	4650      	mov	r0, sl
 800729c:	f7f9 f96a 	bl	8000574 <__aeabi_i2d>
 80072a0:	4632      	mov	r2, r6
 80072a2:	463b      	mov	r3, r7
 80072a4:	f7f9 fc38 	bl	8000b18 <__aeabi_dcmpeq>
 80072a8:	b908      	cbnz	r0, 80072ae <_dtoa_r+0x186>
 80072aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072ae:	f1ba 0f16 	cmp.w	sl, #22
 80072b2:	d854      	bhi.n	800735e <_dtoa_r+0x236>
 80072b4:	4b61      	ldr	r3, [pc, #388]	; (800743c <_dtoa_r+0x314>)
 80072b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80072ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80072c2:	f7f9 fc33 	bl	8000b2c <__aeabi_dcmplt>
 80072c6:	2800      	cmp	r0, #0
 80072c8:	d04b      	beq.n	8007362 <_dtoa_r+0x23a>
 80072ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072ce:	2300      	movs	r3, #0
 80072d0:	930e      	str	r3, [sp, #56]	; 0x38
 80072d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072d4:	1b5d      	subs	r5, r3, r5
 80072d6:	1e6b      	subs	r3, r5, #1
 80072d8:	9304      	str	r3, [sp, #16]
 80072da:	bf43      	ittte	mi
 80072dc:	2300      	movmi	r3, #0
 80072de:	f1c5 0801 	rsbmi	r8, r5, #1
 80072e2:	9304      	strmi	r3, [sp, #16]
 80072e4:	f04f 0800 	movpl.w	r8, #0
 80072e8:	f1ba 0f00 	cmp.w	sl, #0
 80072ec:	db3b      	blt.n	8007366 <_dtoa_r+0x23e>
 80072ee:	9b04      	ldr	r3, [sp, #16]
 80072f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80072f4:	4453      	add	r3, sl
 80072f6:	9304      	str	r3, [sp, #16]
 80072f8:	2300      	movs	r3, #0
 80072fa:	9306      	str	r3, [sp, #24]
 80072fc:	9b05      	ldr	r3, [sp, #20]
 80072fe:	2b09      	cmp	r3, #9
 8007300:	d869      	bhi.n	80073d6 <_dtoa_r+0x2ae>
 8007302:	2b05      	cmp	r3, #5
 8007304:	bfc4      	itt	gt
 8007306:	3b04      	subgt	r3, #4
 8007308:	9305      	strgt	r3, [sp, #20]
 800730a:	9b05      	ldr	r3, [sp, #20]
 800730c:	f1a3 0302 	sub.w	r3, r3, #2
 8007310:	bfcc      	ite	gt
 8007312:	2500      	movgt	r5, #0
 8007314:	2501      	movle	r5, #1
 8007316:	2b03      	cmp	r3, #3
 8007318:	d869      	bhi.n	80073ee <_dtoa_r+0x2c6>
 800731a:	e8df f003 	tbb	[pc, r3]
 800731e:	4e2c      	.short	0x4e2c
 8007320:	5a4c      	.short	0x5a4c
 8007322:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007326:	441d      	add	r5, r3
 8007328:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800732c:	2b20      	cmp	r3, #32
 800732e:	bfc1      	itttt	gt
 8007330:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007334:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007338:	fa09 f303 	lslgt.w	r3, r9, r3
 800733c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007340:	bfda      	itte	le
 8007342:	f1c3 0320 	rsble	r3, r3, #32
 8007346:	fa06 f003 	lslle.w	r0, r6, r3
 800734a:	4318      	orrgt	r0, r3
 800734c:	f7f9 f902 	bl	8000554 <__aeabi_ui2d>
 8007350:	2301      	movs	r3, #1
 8007352:	4606      	mov	r6, r0
 8007354:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007358:	3d01      	subs	r5, #1
 800735a:	9310      	str	r3, [sp, #64]	; 0x40
 800735c:	e771      	b.n	8007242 <_dtoa_r+0x11a>
 800735e:	2301      	movs	r3, #1
 8007360:	e7b6      	b.n	80072d0 <_dtoa_r+0x1a8>
 8007362:	900e      	str	r0, [sp, #56]	; 0x38
 8007364:	e7b5      	b.n	80072d2 <_dtoa_r+0x1aa>
 8007366:	f1ca 0300 	rsb	r3, sl, #0
 800736a:	9306      	str	r3, [sp, #24]
 800736c:	2300      	movs	r3, #0
 800736e:	eba8 080a 	sub.w	r8, r8, sl
 8007372:	930d      	str	r3, [sp, #52]	; 0x34
 8007374:	e7c2      	b.n	80072fc <_dtoa_r+0x1d4>
 8007376:	2300      	movs	r3, #0
 8007378:	9308      	str	r3, [sp, #32]
 800737a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800737c:	2b00      	cmp	r3, #0
 800737e:	dc39      	bgt.n	80073f4 <_dtoa_r+0x2cc>
 8007380:	f04f 0901 	mov.w	r9, #1
 8007384:	f8cd 9004 	str.w	r9, [sp, #4]
 8007388:	464b      	mov	r3, r9
 800738a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800738e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007390:	2200      	movs	r2, #0
 8007392:	6042      	str	r2, [r0, #4]
 8007394:	2204      	movs	r2, #4
 8007396:	f102 0614 	add.w	r6, r2, #20
 800739a:	429e      	cmp	r6, r3
 800739c:	6841      	ldr	r1, [r0, #4]
 800739e:	d92f      	bls.n	8007400 <_dtoa_r+0x2d8>
 80073a0:	4620      	mov	r0, r4
 80073a2:	f000 fed9 	bl	8008158 <_Balloc>
 80073a6:	9000      	str	r0, [sp, #0]
 80073a8:	2800      	cmp	r0, #0
 80073aa:	d14b      	bne.n	8007444 <_dtoa_r+0x31c>
 80073ac:	4b24      	ldr	r3, [pc, #144]	; (8007440 <_dtoa_r+0x318>)
 80073ae:	4602      	mov	r2, r0
 80073b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80073b4:	e6d1      	b.n	800715a <_dtoa_r+0x32>
 80073b6:	2301      	movs	r3, #1
 80073b8:	e7de      	b.n	8007378 <_dtoa_r+0x250>
 80073ba:	2300      	movs	r3, #0
 80073bc:	9308      	str	r3, [sp, #32]
 80073be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c0:	eb0a 0903 	add.w	r9, sl, r3
 80073c4:	f109 0301 	add.w	r3, r9, #1
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	9301      	str	r3, [sp, #4]
 80073cc:	bfb8      	it	lt
 80073ce:	2301      	movlt	r3, #1
 80073d0:	e7dd      	b.n	800738e <_dtoa_r+0x266>
 80073d2:	2301      	movs	r3, #1
 80073d4:	e7f2      	b.n	80073bc <_dtoa_r+0x294>
 80073d6:	2501      	movs	r5, #1
 80073d8:	2300      	movs	r3, #0
 80073da:	9305      	str	r3, [sp, #20]
 80073dc:	9508      	str	r5, [sp, #32]
 80073de:	f04f 39ff 	mov.w	r9, #4294967295
 80073e2:	2200      	movs	r2, #0
 80073e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80073e8:	2312      	movs	r3, #18
 80073ea:	9209      	str	r2, [sp, #36]	; 0x24
 80073ec:	e7cf      	b.n	800738e <_dtoa_r+0x266>
 80073ee:	2301      	movs	r3, #1
 80073f0:	9308      	str	r3, [sp, #32]
 80073f2:	e7f4      	b.n	80073de <_dtoa_r+0x2b6>
 80073f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80073f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80073fc:	464b      	mov	r3, r9
 80073fe:	e7c6      	b.n	800738e <_dtoa_r+0x266>
 8007400:	3101      	adds	r1, #1
 8007402:	6041      	str	r1, [r0, #4]
 8007404:	0052      	lsls	r2, r2, #1
 8007406:	e7c6      	b.n	8007396 <_dtoa_r+0x26e>
 8007408:	636f4361 	.word	0x636f4361
 800740c:	3fd287a7 	.word	0x3fd287a7
 8007410:	8b60c8b3 	.word	0x8b60c8b3
 8007414:	3fc68a28 	.word	0x3fc68a28
 8007418:	509f79fb 	.word	0x509f79fb
 800741c:	3fd34413 	.word	0x3fd34413
 8007420:	08009031 	.word	0x08009031
 8007424:	08009048 	.word	0x08009048
 8007428:	7ff00000 	.word	0x7ff00000
 800742c:	0800902d 	.word	0x0800902d
 8007430:	08009024 	.word	0x08009024
 8007434:	08009001 	.word	0x08009001
 8007438:	3ff80000 	.word	0x3ff80000
 800743c:	080091a0 	.word	0x080091a0
 8007440:	080090a7 	.word	0x080090a7
 8007444:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007446:	9a00      	ldr	r2, [sp, #0]
 8007448:	601a      	str	r2, [r3, #0]
 800744a:	9b01      	ldr	r3, [sp, #4]
 800744c:	2b0e      	cmp	r3, #14
 800744e:	f200 80ad 	bhi.w	80075ac <_dtoa_r+0x484>
 8007452:	2d00      	cmp	r5, #0
 8007454:	f000 80aa 	beq.w	80075ac <_dtoa_r+0x484>
 8007458:	f1ba 0f00 	cmp.w	sl, #0
 800745c:	dd36      	ble.n	80074cc <_dtoa_r+0x3a4>
 800745e:	4ac3      	ldr	r2, [pc, #780]	; (800776c <_dtoa_r+0x644>)
 8007460:	f00a 030f 	and.w	r3, sl, #15
 8007464:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007468:	ed93 7b00 	vldr	d7, [r3]
 800746c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007470:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007474:	eeb0 8a47 	vmov.f32	s16, s14
 8007478:	eef0 8a67 	vmov.f32	s17, s15
 800747c:	d016      	beq.n	80074ac <_dtoa_r+0x384>
 800747e:	4bbc      	ldr	r3, [pc, #752]	; (8007770 <_dtoa_r+0x648>)
 8007480:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007484:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007488:	f7f9 fa08 	bl	800089c <__aeabi_ddiv>
 800748c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007490:	f007 070f 	and.w	r7, r7, #15
 8007494:	2503      	movs	r5, #3
 8007496:	4eb6      	ldr	r6, [pc, #728]	; (8007770 <_dtoa_r+0x648>)
 8007498:	b957      	cbnz	r7, 80074b0 <_dtoa_r+0x388>
 800749a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800749e:	ec53 2b18 	vmov	r2, r3, d8
 80074a2:	f7f9 f9fb 	bl	800089c <__aeabi_ddiv>
 80074a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074aa:	e029      	b.n	8007500 <_dtoa_r+0x3d8>
 80074ac:	2502      	movs	r5, #2
 80074ae:	e7f2      	b.n	8007496 <_dtoa_r+0x36e>
 80074b0:	07f9      	lsls	r1, r7, #31
 80074b2:	d508      	bpl.n	80074c6 <_dtoa_r+0x39e>
 80074b4:	ec51 0b18 	vmov	r0, r1, d8
 80074b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80074bc:	f7f9 f8c4 	bl	8000648 <__aeabi_dmul>
 80074c0:	ec41 0b18 	vmov	d8, r0, r1
 80074c4:	3501      	adds	r5, #1
 80074c6:	107f      	asrs	r7, r7, #1
 80074c8:	3608      	adds	r6, #8
 80074ca:	e7e5      	b.n	8007498 <_dtoa_r+0x370>
 80074cc:	f000 80a6 	beq.w	800761c <_dtoa_r+0x4f4>
 80074d0:	f1ca 0600 	rsb	r6, sl, #0
 80074d4:	4ba5      	ldr	r3, [pc, #660]	; (800776c <_dtoa_r+0x644>)
 80074d6:	4fa6      	ldr	r7, [pc, #664]	; (8007770 <_dtoa_r+0x648>)
 80074d8:	f006 020f 	and.w	r2, r6, #15
 80074dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80074e8:	f7f9 f8ae 	bl	8000648 <__aeabi_dmul>
 80074ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074f0:	1136      	asrs	r6, r6, #4
 80074f2:	2300      	movs	r3, #0
 80074f4:	2502      	movs	r5, #2
 80074f6:	2e00      	cmp	r6, #0
 80074f8:	f040 8085 	bne.w	8007606 <_dtoa_r+0x4de>
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1d2      	bne.n	80074a6 <_dtoa_r+0x37e>
 8007500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 808c 	beq.w	8007620 <_dtoa_r+0x4f8>
 8007508:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800750c:	4b99      	ldr	r3, [pc, #612]	; (8007774 <_dtoa_r+0x64c>)
 800750e:	2200      	movs	r2, #0
 8007510:	4630      	mov	r0, r6
 8007512:	4639      	mov	r1, r7
 8007514:	f7f9 fb0a 	bl	8000b2c <__aeabi_dcmplt>
 8007518:	2800      	cmp	r0, #0
 800751a:	f000 8081 	beq.w	8007620 <_dtoa_r+0x4f8>
 800751e:	9b01      	ldr	r3, [sp, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d07d      	beq.n	8007620 <_dtoa_r+0x4f8>
 8007524:	f1b9 0f00 	cmp.w	r9, #0
 8007528:	dd3c      	ble.n	80075a4 <_dtoa_r+0x47c>
 800752a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800752e:	9307      	str	r3, [sp, #28]
 8007530:	2200      	movs	r2, #0
 8007532:	4b91      	ldr	r3, [pc, #580]	; (8007778 <_dtoa_r+0x650>)
 8007534:	4630      	mov	r0, r6
 8007536:	4639      	mov	r1, r7
 8007538:	f7f9 f886 	bl	8000648 <__aeabi_dmul>
 800753c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007540:	3501      	adds	r5, #1
 8007542:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007546:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800754a:	4628      	mov	r0, r5
 800754c:	f7f9 f812 	bl	8000574 <__aeabi_i2d>
 8007550:	4632      	mov	r2, r6
 8007552:	463b      	mov	r3, r7
 8007554:	f7f9 f878 	bl	8000648 <__aeabi_dmul>
 8007558:	4b88      	ldr	r3, [pc, #544]	; (800777c <_dtoa_r+0x654>)
 800755a:	2200      	movs	r2, #0
 800755c:	f7f8 febe 	bl	80002dc <__adddf3>
 8007560:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007568:	9303      	str	r3, [sp, #12]
 800756a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800756c:	2b00      	cmp	r3, #0
 800756e:	d15c      	bne.n	800762a <_dtoa_r+0x502>
 8007570:	4b83      	ldr	r3, [pc, #524]	; (8007780 <_dtoa_r+0x658>)
 8007572:	2200      	movs	r2, #0
 8007574:	4630      	mov	r0, r6
 8007576:	4639      	mov	r1, r7
 8007578:	f7f8 feae 	bl	80002d8 <__aeabi_dsub>
 800757c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007580:	4606      	mov	r6, r0
 8007582:	460f      	mov	r7, r1
 8007584:	f7f9 faf0 	bl	8000b68 <__aeabi_dcmpgt>
 8007588:	2800      	cmp	r0, #0
 800758a:	f040 8296 	bne.w	8007aba <_dtoa_r+0x992>
 800758e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007592:	4630      	mov	r0, r6
 8007594:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007598:	4639      	mov	r1, r7
 800759a:	f7f9 fac7 	bl	8000b2c <__aeabi_dcmplt>
 800759e:	2800      	cmp	r0, #0
 80075a0:	f040 8288 	bne.w	8007ab4 <_dtoa_r+0x98c>
 80075a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80075a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f2c0 8158 	blt.w	8007864 <_dtoa_r+0x73c>
 80075b4:	f1ba 0f0e 	cmp.w	sl, #14
 80075b8:	f300 8154 	bgt.w	8007864 <_dtoa_r+0x73c>
 80075bc:	4b6b      	ldr	r3, [pc, #428]	; (800776c <_dtoa_r+0x644>)
 80075be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80075c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f280 80e3 	bge.w	8007794 <_dtoa_r+0x66c>
 80075ce:	9b01      	ldr	r3, [sp, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f300 80df 	bgt.w	8007794 <_dtoa_r+0x66c>
 80075d6:	f040 826d 	bne.w	8007ab4 <_dtoa_r+0x98c>
 80075da:	4b69      	ldr	r3, [pc, #420]	; (8007780 <_dtoa_r+0x658>)
 80075dc:	2200      	movs	r2, #0
 80075de:	4640      	mov	r0, r8
 80075e0:	4649      	mov	r1, r9
 80075e2:	f7f9 f831 	bl	8000648 <__aeabi_dmul>
 80075e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075ea:	f7f9 fab3 	bl	8000b54 <__aeabi_dcmpge>
 80075ee:	9e01      	ldr	r6, [sp, #4]
 80075f0:	4637      	mov	r7, r6
 80075f2:	2800      	cmp	r0, #0
 80075f4:	f040 8243 	bne.w	8007a7e <_dtoa_r+0x956>
 80075f8:	9d00      	ldr	r5, [sp, #0]
 80075fa:	2331      	movs	r3, #49	; 0x31
 80075fc:	f805 3b01 	strb.w	r3, [r5], #1
 8007600:	f10a 0a01 	add.w	sl, sl, #1
 8007604:	e23f      	b.n	8007a86 <_dtoa_r+0x95e>
 8007606:	07f2      	lsls	r2, r6, #31
 8007608:	d505      	bpl.n	8007616 <_dtoa_r+0x4ee>
 800760a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800760e:	f7f9 f81b 	bl	8000648 <__aeabi_dmul>
 8007612:	3501      	adds	r5, #1
 8007614:	2301      	movs	r3, #1
 8007616:	1076      	asrs	r6, r6, #1
 8007618:	3708      	adds	r7, #8
 800761a:	e76c      	b.n	80074f6 <_dtoa_r+0x3ce>
 800761c:	2502      	movs	r5, #2
 800761e:	e76f      	b.n	8007500 <_dtoa_r+0x3d8>
 8007620:	9b01      	ldr	r3, [sp, #4]
 8007622:	f8cd a01c 	str.w	sl, [sp, #28]
 8007626:	930c      	str	r3, [sp, #48]	; 0x30
 8007628:	e78d      	b.n	8007546 <_dtoa_r+0x41e>
 800762a:	9900      	ldr	r1, [sp, #0]
 800762c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800762e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007630:	4b4e      	ldr	r3, [pc, #312]	; (800776c <_dtoa_r+0x644>)
 8007632:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007636:	4401      	add	r1, r0
 8007638:	9102      	str	r1, [sp, #8]
 800763a:	9908      	ldr	r1, [sp, #32]
 800763c:	eeb0 8a47 	vmov.f32	s16, s14
 8007640:	eef0 8a67 	vmov.f32	s17, s15
 8007644:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007648:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800764c:	2900      	cmp	r1, #0
 800764e:	d045      	beq.n	80076dc <_dtoa_r+0x5b4>
 8007650:	494c      	ldr	r1, [pc, #304]	; (8007784 <_dtoa_r+0x65c>)
 8007652:	2000      	movs	r0, #0
 8007654:	f7f9 f922 	bl	800089c <__aeabi_ddiv>
 8007658:	ec53 2b18 	vmov	r2, r3, d8
 800765c:	f7f8 fe3c 	bl	80002d8 <__aeabi_dsub>
 8007660:	9d00      	ldr	r5, [sp, #0]
 8007662:	ec41 0b18 	vmov	d8, r0, r1
 8007666:	4639      	mov	r1, r7
 8007668:	4630      	mov	r0, r6
 800766a:	f7f9 fa9d 	bl	8000ba8 <__aeabi_d2iz>
 800766e:	900c      	str	r0, [sp, #48]	; 0x30
 8007670:	f7f8 ff80 	bl	8000574 <__aeabi_i2d>
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	4630      	mov	r0, r6
 800767a:	4639      	mov	r1, r7
 800767c:	f7f8 fe2c 	bl	80002d8 <__aeabi_dsub>
 8007680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007682:	3330      	adds	r3, #48	; 0x30
 8007684:	f805 3b01 	strb.w	r3, [r5], #1
 8007688:	ec53 2b18 	vmov	r2, r3, d8
 800768c:	4606      	mov	r6, r0
 800768e:	460f      	mov	r7, r1
 8007690:	f7f9 fa4c 	bl	8000b2c <__aeabi_dcmplt>
 8007694:	2800      	cmp	r0, #0
 8007696:	d165      	bne.n	8007764 <_dtoa_r+0x63c>
 8007698:	4632      	mov	r2, r6
 800769a:	463b      	mov	r3, r7
 800769c:	4935      	ldr	r1, [pc, #212]	; (8007774 <_dtoa_r+0x64c>)
 800769e:	2000      	movs	r0, #0
 80076a0:	f7f8 fe1a 	bl	80002d8 <__aeabi_dsub>
 80076a4:	ec53 2b18 	vmov	r2, r3, d8
 80076a8:	f7f9 fa40 	bl	8000b2c <__aeabi_dcmplt>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	f040 80b9 	bne.w	8007824 <_dtoa_r+0x6fc>
 80076b2:	9b02      	ldr	r3, [sp, #8]
 80076b4:	429d      	cmp	r5, r3
 80076b6:	f43f af75 	beq.w	80075a4 <_dtoa_r+0x47c>
 80076ba:	4b2f      	ldr	r3, [pc, #188]	; (8007778 <_dtoa_r+0x650>)
 80076bc:	ec51 0b18 	vmov	r0, r1, d8
 80076c0:	2200      	movs	r2, #0
 80076c2:	f7f8 ffc1 	bl	8000648 <__aeabi_dmul>
 80076c6:	4b2c      	ldr	r3, [pc, #176]	; (8007778 <_dtoa_r+0x650>)
 80076c8:	ec41 0b18 	vmov	d8, r0, r1
 80076cc:	2200      	movs	r2, #0
 80076ce:	4630      	mov	r0, r6
 80076d0:	4639      	mov	r1, r7
 80076d2:	f7f8 ffb9 	bl	8000648 <__aeabi_dmul>
 80076d6:	4606      	mov	r6, r0
 80076d8:	460f      	mov	r7, r1
 80076da:	e7c4      	b.n	8007666 <_dtoa_r+0x53e>
 80076dc:	ec51 0b17 	vmov	r0, r1, d7
 80076e0:	f7f8 ffb2 	bl	8000648 <__aeabi_dmul>
 80076e4:	9b02      	ldr	r3, [sp, #8]
 80076e6:	9d00      	ldr	r5, [sp, #0]
 80076e8:	930c      	str	r3, [sp, #48]	; 0x30
 80076ea:	ec41 0b18 	vmov	d8, r0, r1
 80076ee:	4639      	mov	r1, r7
 80076f0:	4630      	mov	r0, r6
 80076f2:	f7f9 fa59 	bl	8000ba8 <__aeabi_d2iz>
 80076f6:	9011      	str	r0, [sp, #68]	; 0x44
 80076f8:	f7f8 ff3c 	bl	8000574 <__aeabi_i2d>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4630      	mov	r0, r6
 8007702:	4639      	mov	r1, r7
 8007704:	f7f8 fde8 	bl	80002d8 <__aeabi_dsub>
 8007708:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800770a:	3330      	adds	r3, #48	; 0x30
 800770c:	f805 3b01 	strb.w	r3, [r5], #1
 8007710:	9b02      	ldr	r3, [sp, #8]
 8007712:	429d      	cmp	r5, r3
 8007714:	4606      	mov	r6, r0
 8007716:	460f      	mov	r7, r1
 8007718:	f04f 0200 	mov.w	r2, #0
 800771c:	d134      	bne.n	8007788 <_dtoa_r+0x660>
 800771e:	4b19      	ldr	r3, [pc, #100]	; (8007784 <_dtoa_r+0x65c>)
 8007720:	ec51 0b18 	vmov	r0, r1, d8
 8007724:	f7f8 fdda 	bl	80002dc <__adddf3>
 8007728:	4602      	mov	r2, r0
 800772a:	460b      	mov	r3, r1
 800772c:	4630      	mov	r0, r6
 800772e:	4639      	mov	r1, r7
 8007730:	f7f9 fa1a 	bl	8000b68 <__aeabi_dcmpgt>
 8007734:	2800      	cmp	r0, #0
 8007736:	d175      	bne.n	8007824 <_dtoa_r+0x6fc>
 8007738:	ec53 2b18 	vmov	r2, r3, d8
 800773c:	4911      	ldr	r1, [pc, #68]	; (8007784 <_dtoa_r+0x65c>)
 800773e:	2000      	movs	r0, #0
 8007740:	f7f8 fdca 	bl	80002d8 <__aeabi_dsub>
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	4630      	mov	r0, r6
 800774a:	4639      	mov	r1, r7
 800774c:	f7f9 f9ee 	bl	8000b2c <__aeabi_dcmplt>
 8007750:	2800      	cmp	r0, #0
 8007752:	f43f af27 	beq.w	80075a4 <_dtoa_r+0x47c>
 8007756:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007758:	1e6b      	subs	r3, r5, #1
 800775a:	930c      	str	r3, [sp, #48]	; 0x30
 800775c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007760:	2b30      	cmp	r3, #48	; 0x30
 8007762:	d0f8      	beq.n	8007756 <_dtoa_r+0x62e>
 8007764:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007768:	e04a      	b.n	8007800 <_dtoa_r+0x6d8>
 800776a:	bf00      	nop
 800776c:	080091a0 	.word	0x080091a0
 8007770:	08009178 	.word	0x08009178
 8007774:	3ff00000 	.word	0x3ff00000
 8007778:	40240000 	.word	0x40240000
 800777c:	401c0000 	.word	0x401c0000
 8007780:	40140000 	.word	0x40140000
 8007784:	3fe00000 	.word	0x3fe00000
 8007788:	4baf      	ldr	r3, [pc, #700]	; (8007a48 <_dtoa_r+0x920>)
 800778a:	f7f8 ff5d 	bl	8000648 <__aeabi_dmul>
 800778e:	4606      	mov	r6, r0
 8007790:	460f      	mov	r7, r1
 8007792:	e7ac      	b.n	80076ee <_dtoa_r+0x5c6>
 8007794:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007798:	9d00      	ldr	r5, [sp, #0]
 800779a:	4642      	mov	r2, r8
 800779c:	464b      	mov	r3, r9
 800779e:	4630      	mov	r0, r6
 80077a0:	4639      	mov	r1, r7
 80077a2:	f7f9 f87b 	bl	800089c <__aeabi_ddiv>
 80077a6:	f7f9 f9ff 	bl	8000ba8 <__aeabi_d2iz>
 80077aa:	9002      	str	r0, [sp, #8]
 80077ac:	f7f8 fee2 	bl	8000574 <__aeabi_i2d>
 80077b0:	4642      	mov	r2, r8
 80077b2:	464b      	mov	r3, r9
 80077b4:	f7f8 ff48 	bl	8000648 <__aeabi_dmul>
 80077b8:	4602      	mov	r2, r0
 80077ba:	460b      	mov	r3, r1
 80077bc:	4630      	mov	r0, r6
 80077be:	4639      	mov	r1, r7
 80077c0:	f7f8 fd8a 	bl	80002d8 <__aeabi_dsub>
 80077c4:	9e02      	ldr	r6, [sp, #8]
 80077c6:	9f01      	ldr	r7, [sp, #4]
 80077c8:	3630      	adds	r6, #48	; 0x30
 80077ca:	f805 6b01 	strb.w	r6, [r5], #1
 80077ce:	9e00      	ldr	r6, [sp, #0]
 80077d0:	1bae      	subs	r6, r5, r6
 80077d2:	42b7      	cmp	r7, r6
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	d137      	bne.n	800784a <_dtoa_r+0x722>
 80077da:	f7f8 fd7f 	bl	80002dc <__adddf3>
 80077de:	4642      	mov	r2, r8
 80077e0:	464b      	mov	r3, r9
 80077e2:	4606      	mov	r6, r0
 80077e4:	460f      	mov	r7, r1
 80077e6:	f7f9 f9bf 	bl	8000b68 <__aeabi_dcmpgt>
 80077ea:	b9c8      	cbnz	r0, 8007820 <_dtoa_r+0x6f8>
 80077ec:	4642      	mov	r2, r8
 80077ee:	464b      	mov	r3, r9
 80077f0:	4630      	mov	r0, r6
 80077f2:	4639      	mov	r1, r7
 80077f4:	f7f9 f990 	bl	8000b18 <__aeabi_dcmpeq>
 80077f8:	b110      	cbz	r0, 8007800 <_dtoa_r+0x6d8>
 80077fa:	9b02      	ldr	r3, [sp, #8]
 80077fc:	07d9      	lsls	r1, r3, #31
 80077fe:	d40f      	bmi.n	8007820 <_dtoa_r+0x6f8>
 8007800:	4620      	mov	r0, r4
 8007802:	4659      	mov	r1, fp
 8007804:	f000 fce8 	bl	80081d8 <_Bfree>
 8007808:	2300      	movs	r3, #0
 800780a:	702b      	strb	r3, [r5, #0]
 800780c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800780e:	f10a 0001 	add.w	r0, sl, #1
 8007812:	6018      	str	r0, [r3, #0]
 8007814:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007816:	2b00      	cmp	r3, #0
 8007818:	f43f acd8 	beq.w	80071cc <_dtoa_r+0xa4>
 800781c:	601d      	str	r5, [r3, #0]
 800781e:	e4d5      	b.n	80071cc <_dtoa_r+0xa4>
 8007820:	f8cd a01c 	str.w	sl, [sp, #28]
 8007824:	462b      	mov	r3, r5
 8007826:	461d      	mov	r5, r3
 8007828:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800782c:	2a39      	cmp	r2, #57	; 0x39
 800782e:	d108      	bne.n	8007842 <_dtoa_r+0x71a>
 8007830:	9a00      	ldr	r2, [sp, #0]
 8007832:	429a      	cmp	r2, r3
 8007834:	d1f7      	bne.n	8007826 <_dtoa_r+0x6fe>
 8007836:	9a07      	ldr	r2, [sp, #28]
 8007838:	9900      	ldr	r1, [sp, #0]
 800783a:	3201      	adds	r2, #1
 800783c:	9207      	str	r2, [sp, #28]
 800783e:	2230      	movs	r2, #48	; 0x30
 8007840:	700a      	strb	r2, [r1, #0]
 8007842:	781a      	ldrb	r2, [r3, #0]
 8007844:	3201      	adds	r2, #1
 8007846:	701a      	strb	r2, [r3, #0]
 8007848:	e78c      	b.n	8007764 <_dtoa_r+0x63c>
 800784a:	4b7f      	ldr	r3, [pc, #508]	; (8007a48 <_dtoa_r+0x920>)
 800784c:	2200      	movs	r2, #0
 800784e:	f7f8 fefb 	bl	8000648 <__aeabi_dmul>
 8007852:	2200      	movs	r2, #0
 8007854:	2300      	movs	r3, #0
 8007856:	4606      	mov	r6, r0
 8007858:	460f      	mov	r7, r1
 800785a:	f7f9 f95d 	bl	8000b18 <__aeabi_dcmpeq>
 800785e:	2800      	cmp	r0, #0
 8007860:	d09b      	beq.n	800779a <_dtoa_r+0x672>
 8007862:	e7cd      	b.n	8007800 <_dtoa_r+0x6d8>
 8007864:	9a08      	ldr	r2, [sp, #32]
 8007866:	2a00      	cmp	r2, #0
 8007868:	f000 80c4 	beq.w	80079f4 <_dtoa_r+0x8cc>
 800786c:	9a05      	ldr	r2, [sp, #20]
 800786e:	2a01      	cmp	r2, #1
 8007870:	f300 80a8 	bgt.w	80079c4 <_dtoa_r+0x89c>
 8007874:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007876:	2a00      	cmp	r2, #0
 8007878:	f000 80a0 	beq.w	80079bc <_dtoa_r+0x894>
 800787c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007880:	9e06      	ldr	r6, [sp, #24]
 8007882:	4645      	mov	r5, r8
 8007884:	9a04      	ldr	r2, [sp, #16]
 8007886:	2101      	movs	r1, #1
 8007888:	441a      	add	r2, r3
 800788a:	4620      	mov	r0, r4
 800788c:	4498      	add	r8, r3
 800788e:	9204      	str	r2, [sp, #16]
 8007890:	f000 fd5e 	bl	8008350 <__i2b>
 8007894:	4607      	mov	r7, r0
 8007896:	2d00      	cmp	r5, #0
 8007898:	dd0b      	ble.n	80078b2 <_dtoa_r+0x78a>
 800789a:	9b04      	ldr	r3, [sp, #16]
 800789c:	2b00      	cmp	r3, #0
 800789e:	dd08      	ble.n	80078b2 <_dtoa_r+0x78a>
 80078a0:	42ab      	cmp	r3, r5
 80078a2:	9a04      	ldr	r2, [sp, #16]
 80078a4:	bfa8      	it	ge
 80078a6:	462b      	movge	r3, r5
 80078a8:	eba8 0803 	sub.w	r8, r8, r3
 80078ac:	1aed      	subs	r5, r5, r3
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	9304      	str	r3, [sp, #16]
 80078b2:	9b06      	ldr	r3, [sp, #24]
 80078b4:	b1fb      	cbz	r3, 80078f6 <_dtoa_r+0x7ce>
 80078b6:	9b08      	ldr	r3, [sp, #32]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 809f 	beq.w	80079fc <_dtoa_r+0x8d4>
 80078be:	2e00      	cmp	r6, #0
 80078c0:	dd11      	ble.n	80078e6 <_dtoa_r+0x7be>
 80078c2:	4639      	mov	r1, r7
 80078c4:	4632      	mov	r2, r6
 80078c6:	4620      	mov	r0, r4
 80078c8:	f000 fdfe 	bl	80084c8 <__pow5mult>
 80078cc:	465a      	mov	r2, fp
 80078ce:	4601      	mov	r1, r0
 80078d0:	4607      	mov	r7, r0
 80078d2:	4620      	mov	r0, r4
 80078d4:	f000 fd52 	bl	800837c <__multiply>
 80078d8:	4659      	mov	r1, fp
 80078da:	9007      	str	r0, [sp, #28]
 80078dc:	4620      	mov	r0, r4
 80078de:	f000 fc7b 	bl	80081d8 <_Bfree>
 80078e2:	9b07      	ldr	r3, [sp, #28]
 80078e4:	469b      	mov	fp, r3
 80078e6:	9b06      	ldr	r3, [sp, #24]
 80078e8:	1b9a      	subs	r2, r3, r6
 80078ea:	d004      	beq.n	80078f6 <_dtoa_r+0x7ce>
 80078ec:	4659      	mov	r1, fp
 80078ee:	4620      	mov	r0, r4
 80078f0:	f000 fdea 	bl	80084c8 <__pow5mult>
 80078f4:	4683      	mov	fp, r0
 80078f6:	2101      	movs	r1, #1
 80078f8:	4620      	mov	r0, r4
 80078fa:	f000 fd29 	bl	8008350 <__i2b>
 80078fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007900:	2b00      	cmp	r3, #0
 8007902:	4606      	mov	r6, r0
 8007904:	dd7c      	ble.n	8007a00 <_dtoa_r+0x8d8>
 8007906:	461a      	mov	r2, r3
 8007908:	4601      	mov	r1, r0
 800790a:	4620      	mov	r0, r4
 800790c:	f000 fddc 	bl	80084c8 <__pow5mult>
 8007910:	9b05      	ldr	r3, [sp, #20]
 8007912:	2b01      	cmp	r3, #1
 8007914:	4606      	mov	r6, r0
 8007916:	dd76      	ble.n	8007a06 <_dtoa_r+0x8de>
 8007918:	2300      	movs	r3, #0
 800791a:	9306      	str	r3, [sp, #24]
 800791c:	6933      	ldr	r3, [r6, #16]
 800791e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007922:	6918      	ldr	r0, [r3, #16]
 8007924:	f000 fcc4 	bl	80082b0 <__hi0bits>
 8007928:	f1c0 0020 	rsb	r0, r0, #32
 800792c:	9b04      	ldr	r3, [sp, #16]
 800792e:	4418      	add	r0, r3
 8007930:	f010 001f 	ands.w	r0, r0, #31
 8007934:	f000 8086 	beq.w	8007a44 <_dtoa_r+0x91c>
 8007938:	f1c0 0320 	rsb	r3, r0, #32
 800793c:	2b04      	cmp	r3, #4
 800793e:	dd7f      	ble.n	8007a40 <_dtoa_r+0x918>
 8007940:	f1c0 001c 	rsb	r0, r0, #28
 8007944:	9b04      	ldr	r3, [sp, #16]
 8007946:	4403      	add	r3, r0
 8007948:	4480      	add	r8, r0
 800794a:	4405      	add	r5, r0
 800794c:	9304      	str	r3, [sp, #16]
 800794e:	f1b8 0f00 	cmp.w	r8, #0
 8007952:	dd05      	ble.n	8007960 <_dtoa_r+0x838>
 8007954:	4659      	mov	r1, fp
 8007956:	4642      	mov	r2, r8
 8007958:	4620      	mov	r0, r4
 800795a:	f000 fe0f 	bl	800857c <__lshift>
 800795e:	4683      	mov	fp, r0
 8007960:	9b04      	ldr	r3, [sp, #16]
 8007962:	2b00      	cmp	r3, #0
 8007964:	dd05      	ble.n	8007972 <_dtoa_r+0x84a>
 8007966:	4631      	mov	r1, r6
 8007968:	461a      	mov	r2, r3
 800796a:	4620      	mov	r0, r4
 800796c:	f000 fe06 	bl	800857c <__lshift>
 8007970:	4606      	mov	r6, r0
 8007972:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007974:	2b00      	cmp	r3, #0
 8007976:	d069      	beq.n	8007a4c <_dtoa_r+0x924>
 8007978:	4631      	mov	r1, r6
 800797a:	4658      	mov	r0, fp
 800797c:	f000 fe6a 	bl	8008654 <__mcmp>
 8007980:	2800      	cmp	r0, #0
 8007982:	da63      	bge.n	8007a4c <_dtoa_r+0x924>
 8007984:	2300      	movs	r3, #0
 8007986:	4659      	mov	r1, fp
 8007988:	220a      	movs	r2, #10
 800798a:	4620      	mov	r0, r4
 800798c:	f000 fc46 	bl	800821c <__multadd>
 8007990:	9b08      	ldr	r3, [sp, #32]
 8007992:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007996:	4683      	mov	fp, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 818f 	beq.w	8007cbc <_dtoa_r+0xb94>
 800799e:	4639      	mov	r1, r7
 80079a0:	2300      	movs	r3, #0
 80079a2:	220a      	movs	r2, #10
 80079a4:	4620      	mov	r0, r4
 80079a6:	f000 fc39 	bl	800821c <__multadd>
 80079aa:	f1b9 0f00 	cmp.w	r9, #0
 80079ae:	4607      	mov	r7, r0
 80079b0:	f300 808e 	bgt.w	8007ad0 <_dtoa_r+0x9a8>
 80079b4:	9b05      	ldr	r3, [sp, #20]
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	dc50      	bgt.n	8007a5c <_dtoa_r+0x934>
 80079ba:	e089      	b.n	8007ad0 <_dtoa_r+0x9a8>
 80079bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80079c2:	e75d      	b.n	8007880 <_dtoa_r+0x758>
 80079c4:	9b01      	ldr	r3, [sp, #4]
 80079c6:	1e5e      	subs	r6, r3, #1
 80079c8:	9b06      	ldr	r3, [sp, #24]
 80079ca:	42b3      	cmp	r3, r6
 80079cc:	bfbf      	itttt	lt
 80079ce:	9b06      	ldrlt	r3, [sp, #24]
 80079d0:	9606      	strlt	r6, [sp, #24]
 80079d2:	1af2      	sublt	r2, r6, r3
 80079d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80079d6:	bfb6      	itet	lt
 80079d8:	189b      	addlt	r3, r3, r2
 80079da:	1b9e      	subge	r6, r3, r6
 80079dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80079de:	9b01      	ldr	r3, [sp, #4]
 80079e0:	bfb8      	it	lt
 80079e2:	2600      	movlt	r6, #0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	bfb5      	itete	lt
 80079e8:	eba8 0503 	sublt.w	r5, r8, r3
 80079ec:	9b01      	ldrge	r3, [sp, #4]
 80079ee:	2300      	movlt	r3, #0
 80079f0:	4645      	movge	r5, r8
 80079f2:	e747      	b.n	8007884 <_dtoa_r+0x75c>
 80079f4:	9e06      	ldr	r6, [sp, #24]
 80079f6:	9f08      	ldr	r7, [sp, #32]
 80079f8:	4645      	mov	r5, r8
 80079fa:	e74c      	b.n	8007896 <_dtoa_r+0x76e>
 80079fc:	9a06      	ldr	r2, [sp, #24]
 80079fe:	e775      	b.n	80078ec <_dtoa_r+0x7c4>
 8007a00:	9b05      	ldr	r3, [sp, #20]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	dc18      	bgt.n	8007a38 <_dtoa_r+0x910>
 8007a06:	9b02      	ldr	r3, [sp, #8]
 8007a08:	b9b3      	cbnz	r3, 8007a38 <_dtoa_r+0x910>
 8007a0a:	9b03      	ldr	r3, [sp, #12]
 8007a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a10:	b9a3      	cbnz	r3, 8007a3c <_dtoa_r+0x914>
 8007a12:	9b03      	ldr	r3, [sp, #12]
 8007a14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a18:	0d1b      	lsrs	r3, r3, #20
 8007a1a:	051b      	lsls	r3, r3, #20
 8007a1c:	b12b      	cbz	r3, 8007a2a <_dtoa_r+0x902>
 8007a1e:	9b04      	ldr	r3, [sp, #16]
 8007a20:	3301      	adds	r3, #1
 8007a22:	9304      	str	r3, [sp, #16]
 8007a24:	f108 0801 	add.w	r8, r8, #1
 8007a28:	2301      	movs	r3, #1
 8007a2a:	9306      	str	r3, [sp, #24]
 8007a2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f47f af74 	bne.w	800791c <_dtoa_r+0x7f4>
 8007a34:	2001      	movs	r0, #1
 8007a36:	e779      	b.n	800792c <_dtoa_r+0x804>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	e7f6      	b.n	8007a2a <_dtoa_r+0x902>
 8007a3c:	9b02      	ldr	r3, [sp, #8]
 8007a3e:	e7f4      	b.n	8007a2a <_dtoa_r+0x902>
 8007a40:	d085      	beq.n	800794e <_dtoa_r+0x826>
 8007a42:	4618      	mov	r0, r3
 8007a44:	301c      	adds	r0, #28
 8007a46:	e77d      	b.n	8007944 <_dtoa_r+0x81c>
 8007a48:	40240000 	.word	0x40240000
 8007a4c:	9b01      	ldr	r3, [sp, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	dc38      	bgt.n	8007ac4 <_dtoa_r+0x99c>
 8007a52:	9b05      	ldr	r3, [sp, #20]
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	dd35      	ble.n	8007ac4 <_dtoa_r+0x99c>
 8007a58:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007a5c:	f1b9 0f00 	cmp.w	r9, #0
 8007a60:	d10d      	bne.n	8007a7e <_dtoa_r+0x956>
 8007a62:	4631      	mov	r1, r6
 8007a64:	464b      	mov	r3, r9
 8007a66:	2205      	movs	r2, #5
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f000 fbd7 	bl	800821c <__multadd>
 8007a6e:	4601      	mov	r1, r0
 8007a70:	4606      	mov	r6, r0
 8007a72:	4658      	mov	r0, fp
 8007a74:	f000 fdee 	bl	8008654 <__mcmp>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	f73f adbd 	bgt.w	80075f8 <_dtoa_r+0x4d0>
 8007a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a80:	9d00      	ldr	r5, [sp, #0]
 8007a82:	ea6f 0a03 	mvn.w	sl, r3
 8007a86:	f04f 0800 	mov.w	r8, #0
 8007a8a:	4631      	mov	r1, r6
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f000 fba3 	bl	80081d8 <_Bfree>
 8007a92:	2f00      	cmp	r7, #0
 8007a94:	f43f aeb4 	beq.w	8007800 <_dtoa_r+0x6d8>
 8007a98:	f1b8 0f00 	cmp.w	r8, #0
 8007a9c:	d005      	beq.n	8007aaa <_dtoa_r+0x982>
 8007a9e:	45b8      	cmp	r8, r7
 8007aa0:	d003      	beq.n	8007aaa <_dtoa_r+0x982>
 8007aa2:	4641      	mov	r1, r8
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f000 fb97 	bl	80081d8 <_Bfree>
 8007aaa:	4639      	mov	r1, r7
 8007aac:	4620      	mov	r0, r4
 8007aae:	f000 fb93 	bl	80081d8 <_Bfree>
 8007ab2:	e6a5      	b.n	8007800 <_dtoa_r+0x6d8>
 8007ab4:	2600      	movs	r6, #0
 8007ab6:	4637      	mov	r7, r6
 8007ab8:	e7e1      	b.n	8007a7e <_dtoa_r+0x956>
 8007aba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007abc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007ac0:	4637      	mov	r7, r6
 8007ac2:	e599      	b.n	80075f8 <_dtoa_r+0x4d0>
 8007ac4:	9b08      	ldr	r3, [sp, #32]
 8007ac6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f000 80fd 	beq.w	8007cca <_dtoa_r+0xba2>
 8007ad0:	2d00      	cmp	r5, #0
 8007ad2:	dd05      	ble.n	8007ae0 <_dtoa_r+0x9b8>
 8007ad4:	4639      	mov	r1, r7
 8007ad6:	462a      	mov	r2, r5
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f000 fd4f 	bl	800857c <__lshift>
 8007ade:	4607      	mov	r7, r0
 8007ae0:	9b06      	ldr	r3, [sp, #24]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d05c      	beq.n	8007ba0 <_dtoa_r+0xa78>
 8007ae6:	6879      	ldr	r1, [r7, #4]
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f000 fb35 	bl	8008158 <_Balloc>
 8007aee:	4605      	mov	r5, r0
 8007af0:	b928      	cbnz	r0, 8007afe <_dtoa_r+0x9d6>
 8007af2:	4b80      	ldr	r3, [pc, #512]	; (8007cf4 <_dtoa_r+0xbcc>)
 8007af4:	4602      	mov	r2, r0
 8007af6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007afa:	f7ff bb2e 	b.w	800715a <_dtoa_r+0x32>
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	3202      	adds	r2, #2
 8007b02:	0092      	lsls	r2, r2, #2
 8007b04:	f107 010c 	add.w	r1, r7, #12
 8007b08:	300c      	adds	r0, #12
 8007b0a:	f7fe fcb1 	bl	8006470 <memcpy>
 8007b0e:	2201      	movs	r2, #1
 8007b10:	4629      	mov	r1, r5
 8007b12:	4620      	mov	r0, r4
 8007b14:	f000 fd32 	bl	800857c <__lshift>
 8007b18:	9b00      	ldr	r3, [sp, #0]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	9301      	str	r3, [sp, #4]
 8007b1e:	9b00      	ldr	r3, [sp, #0]
 8007b20:	444b      	add	r3, r9
 8007b22:	9307      	str	r3, [sp, #28]
 8007b24:	9b02      	ldr	r3, [sp, #8]
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	46b8      	mov	r8, r7
 8007b2c:	9306      	str	r3, [sp, #24]
 8007b2e:	4607      	mov	r7, r0
 8007b30:	9b01      	ldr	r3, [sp, #4]
 8007b32:	4631      	mov	r1, r6
 8007b34:	3b01      	subs	r3, #1
 8007b36:	4658      	mov	r0, fp
 8007b38:	9302      	str	r3, [sp, #8]
 8007b3a:	f7ff fa67 	bl	800700c <quorem>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	3330      	adds	r3, #48	; 0x30
 8007b42:	9004      	str	r0, [sp, #16]
 8007b44:	4641      	mov	r1, r8
 8007b46:	4658      	mov	r0, fp
 8007b48:	9308      	str	r3, [sp, #32]
 8007b4a:	f000 fd83 	bl	8008654 <__mcmp>
 8007b4e:	463a      	mov	r2, r7
 8007b50:	4681      	mov	r9, r0
 8007b52:	4631      	mov	r1, r6
 8007b54:	4620      	mov	r0, r4
 8007b56:	f000 fd99 	bl	800868c <__mdiff>
 8007b5a:	68c2      	ldr	r2, [r0, #12]
 8007b5c:	9b08      	ldr	r3, [sp, #32]
 8007b5e:	4605      	mov	r5, r0
 8007b60:	bb02      	cbnz	r2, 8007ba4 <_dtoa_r+0xa7c>
 8007b62:	4601      	mov	r1, r0
 8007b64:	4658      	mov	r0, fp
 8007b66:	f000 fd75 	bl	8008654 <__mcmp>
 8007b6a:	9b08      	ldr	r3, [sp, #32]
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	4629      	mov	r1, r5
 8007b70:	4620      	mov	r0, r4
 8007b72:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007b76:	f000 fb2f 	bl	80081d8 <_Bfree>
 8007b7a:	9b05      	ldr	r3, [sp, #20]
 8007b7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b7e:	9d01      	ldr	r5, [sp, #4]
 8007b80:	ea43 0102 	orr.w	r1, r3, r2
 8007b84:	9b06      	ldr	r3, [sp, #24]
 8007b86:	430b      	orrs	r3, r1
 8007b88:	9b08      	ldr	r3, [sp, #32]
 8007b8a:	d10d      	bne.n	8007ba8 <_dtoa_r+0xa80>
 8007b8c:	2b39      	cmp	r3, #57	; 0x39
 8007b8e:	d029      	beq.n	8007be4 <_dtoa_r+0xabc>
 8007b90:	f1b9 0f00 	cmp.w	r9, #0
 8007b94:	dd01      	ble.n	8007b9a <_dtoa_r+0xa72>
 8007b96:	9b04      	ldr	r3, [sp, #16]
 8007b98:	3331      	adds	r3, #49	; 0x31
 8007b9a:	9a02      	ldr	r2, [sp, #8]
 8007b9c:	7013      	strb	r3, [r2, #0]
 8007b9e:	e774      	b.n	8007a8a <_dtoa_r+0x962>
 8007ba0:	4638      	mov	r0, r7
 8007ba2:	e7b9      	b.n	8007b18 <_dtoa_r+0x9f0>
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	e7e2      	b.n	8007b6e <_dtoa_r+0xa46>
 8007ba8:	f1b9 0f00 	cmp.w	r9, #0
 8007bac:	db06      	blt.n	8007bbc <_dtoa_r+0xa94>
 8007bae:	9905      	ldr	r1, [sp, #20]
 8007bb0:	ea41 0909 	orr.w	r9, r1, r9
 8007bb4:	9906      	ldr	r1, [sp, #24]
 8007bb6:	ea59 0101 	orrs.w	r1, r9, r1
 8007bba:	d120      	bne.n	8007bfe <_dtoa_r+0xad6>
 8007bbc:	2a00      	cmp	r2, #0
 8007bbe:	ddec      	ble.n	8007b9a <_dtoa_r+0xa72>
 8007bc0:	4659      	mov	r1, fp
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	9301      	str	r3, [sp, #4]
 8007bc8:	f000 fcd8 	bl	800857c <__lshift>
 8007bcc:	4631      	mov	r1, r6
 8007bce:	4683      	mov	fp, r0
 8007bd0:	f000 fd40 	bl	8008654 <__mcmp>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	9b01      	ldr	r3, [sp, #4]
 8007bd8:	dc02      	bgt.n	8007be0 <_dtoa_r+0xab8>
 8007bda:	d1de      	bne.n	8007b9a <_dtoa_r+0xa72>
 8007bdc:	07da      	lsls	r2, r3, #31
 8007bde:	d5dc      	bpl.n	8007b9a <_dtoa_r+0xa72>
 8007be0:	2b39      	cmp	r3, #57	; 0x39
 8007be2:	d1d8      	bne.n	8007b96 <_dtoa_r+0xa6e>
 8007be4:	9a02      	ldr	r2, [sp, #8]
 8007be6:	2339      	movs	r3, #57	; 0x39
 8007be8:	7013      	strb	r3, [r2, #0]
 8007bea:	462b      	mov	r3, r5
 8007bec:	461d      	mov	r5, r3
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007bf4:	2a39      	cmp	r2, #57	; 0x39
 8007bf6:	d050      	beq.n	8007c9a <_dtoa_r+0xb72>
 8007bf8:	3201      	adds	r2, #1
 8007bfa:	701a      	strb	r2, [r3, #0]
 8007bfc:	e745      	b.n	8007a8a <_dtoa_r+0x962>
 8007bfe:	2a00      	cmp	r2, #0
 8007c00:	dd03      	ble.n	8007c0a <_dtoa_r+0xae2>
 8007c02:	2b39      	cmp	r3, #57	; 0x39
 8007c04:	d0ee      	beq.n	8007be4 <_dtoa_r+0xabc>
 8007c06:	3301      	adds	r3, #1
 8007c08:	e7c7      	b.n	8007b9a <_dtoa_r+0xa72>
 8007c0a:	9a01      	ldr	r2, [sp, #4]
 8007c0c:	9907      	ldr	r1, [sp, #28]
 8007c0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007c12:	428a      	cmp	r2, r1
 8007c14:	d02a      	beq.n	8007c6c <_dtoa_r+0xb44>
 8007c16:	4659      	mov	r1, fp
 8007c18:	2300      	movs	r3, #0
 8007c1a:	220a      	movs	r2, #10
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f000 fafd 	bl	800821c <__multadd>
 8007c22:	45b8      	cmp	r8, r7
 8007c24:	4683      	mov	fp, r0
 8007c26:	f04f 0300 	mov.w	r3, #0
 8007c2a:	f04f 020a 	mov.w	r2, #10
 8007c2e:	4641      	mov	r1, r8
 8007c30:	4620      	mov	r0, r4
 8007c32:	d107      	bne.n	8007c44 <_dtoa_r+0xb1c>
 8007c34:	f000 faf2 	bl	800821c <__multadd>
 8007c38:	4680      	mov	r8, r0
 8007c3a:	4607      	mov	r7, r0
 8007c3c:	9b01      	ldr	r3, [sp, #4]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	9301      	str	r3, [sp, #4]
 8007c42:	e775      	b.n	8007b30 <_dtoa_r+0xa08>
 8007c44:	f000 faea 	bl	800821c <__multadd>
 8007c48:	4639      	mov	r1, r7
 8007c4a:	4680      	mov	r8, r0
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	220a      	movs	r2, #10
 8007c50:	4620      	mov	r0, r4
 8007c52:	f000 fae3 	bl	800821c <__multadd>
 8007c56:	4607      	mov	r7, r0
 8007c58:	e7f0      	b.n	8007c3c <_dtoa_r+0xb14>
 8007c5a:	f1b9 0f00 	cmp.w	r9, #0
 8007c5e:	9a00      	ldr	r2, [sp, #0]
 8007c60:	bfcc      	ite	gt
 8007c62:	464d      	movgt	r5, r9
 8007c64:	2501      	movle	r5, #1
 8007c66:	4415      	add	r5, r2
 8007c68:	f04f 0800 	mov.w	r8, #0
 8007c6c:	4659      	mov	r1, fp
 8007c6e:	2201      	movs	r2, #1
 8007c70:	4620      	mov	r0, r4
 8007c72:	9301      	str	r3, [sp, #4]
 8007c74:	f000 fc82 	bl	800857c <__lshift>
 8007c78:	4631      	mov	r1, r6
 8007c7a:	4683      	mov	fp, r0
 8007c7c:	f000 fcea 	bl	8008654 <__mcmp>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	dcb2      	bgt.n	8007bea <_dtoa_r+0xac2>
 8007c84:	d102      	bne.n	8007c8c <_dtoa_r+0xb64>
 8007c86:	9b01      	ldr	r3, [sp, #4]
 8007c88:	07db      	lsls	r3, r3, #31
 8007c8a:	d4ae      	bmi.n	8007bea <_dtoa_r+0xac2>
 8007c8c:	462b      	mov	r3, r5
 8007c8e:	461d      	mov	r5, r3
 8007c90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c94:	2a30      	cmp	r2, #48	; 0x30
 8007c96:	d0fa      	beq.n	8007c8e <_dtoa_r+0xb66>
 8007c98:	e6f7      	b.n	8007a8a <_dtoa_r+0x962>
 8007c9a:	9a00      	ldr	r2, [sp, #0]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d1a5      	bne.n	8007bec <_dtoa_r+0xac4>
 8007ca0:	f10a 0a01 	add.w	sl, sl, #1
 8007ca4:	2331      	movs	r3, #49	; 0x31
 8007ca6:	e779      	b.n	8007b9c <_dtoa_r+0xa74>
 8007ca8:	4b13      	ldr	r3, [pc, #76]	; (8007cf8 <_dtoa_r+0xbd0>)
 8007caa:	f7ff baaf 	b.w	800720c <_dtoa_r+0xe4>
 8007cae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f47f aa86 	bne.w	80071c2 <_dtoa_r+0x9a>
 8007cb6:	4b11      	ldr	r3, [pc, #68]	; (8007cfc <_dtoa_r+0xbd4>)
 8007cb8:	f7ff baa8 	b.w	800720c <_dtoa_r+0xe4>
 8007cbc:	f1b9 0f00 	cmp.w	r9, #0
 8007cc0:	dc03      	bgt.n	8007cca <_dtoa_r+0xba2>
 8007cc2:	9b05      	ldr	r3, [sp, #20]
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	f73f aec9 	bgt.w	8007a5c <_dtoa_r+0x934>
 8007cca:	9d00      	ldr	r5, [sp, #0]
 8007ccc:	4631      	mov	r1, r6
 8007cce:	4658      	mov	r0, fp
 8007cd0:	f7ff f99c 	bl	800700c <quorem>
 8007cd4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007cd8:	f805 3b01 	strb.w	r3, [r5], #1
 8007cdc:	9a00      	ldr	r2, [sp, #0]
 8007cde:	1aaa      	subs	r2, r5, r2
 8007ce0:	4591      	cmp	r9, r2
 8007ce2:	ddba      	ble.n	8007c5a <_dtoa_r+0xb32>
 8007ce4:	4659      	mov	r1, fp
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	220a      	movs	r2, #10
 8007cea:	4620      	mov	r0, r4
 8007cec:	f000 fa96 	bl	800821c <__multadd>
 8007cf0:	4683      	mov	fp, r0
 8007cf2:	e7eb      	b.n	8007ccc <_dtoa_r+0xba4>
 8007cf4:	080090a7 	.word	0x080090a7
 8007cf8:	08009000 	.word	0x08009000
 8007cfc:	08009024 	.word	0x08009024

08007d00 <__sflush_r>:
 8007d00:	898a      	ldrh	r2, [r1, #12]
 8007d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d06:	4605      	mov	r5, r0
 8007d08:	0710      	lsls	r0, r2, #28
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	d458      	bmi.n	8007dc0 <__sflush_r+0xc0>
 8007d0e:	684b      	ldr	r3, [r1, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	dc05      	bgt.n	8007d20 <__sflush_r+0x20>
 8007d14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	dc02      	bgt.n	8007d20 <__sflush_r+0x20>
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d22:	2e00      	cmp	r6, #0
 8007d24:	d0f9      	beq.n	8007d1a <__sflush_r+0x1a>
 8007d26:	2300      	movs	r3, #0
 8007d28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d2c:	682f      	ldr	r7, [r5, #0]
 8007d2e:	602b      	str	r3, [r5, #0]
 8007d30:	d032      	beq.n	8007d98 <__sflush_r+0x98>
 8007d32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d34:	89a3      	ldrh	r3, [r4, #12]
 8007d36:	075a      	lsls	r2, r3, #29
 8007d38:	d505      	bpl.n	8007d46 <__sflush_r+0x46>
 8007d3a:	6863      	ldr	r3, [r4, #4]
 8007d3c:	1ac0      	subs	r0, r0, r3
 8007d3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d40:	b10b      	cbz	r3, 8007d46 <__sflush_r+0x46>
 8007d42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d44:	1ac0      	subs	r0, r0, r3
 8007d46:	2300      	movs	r3, #0
 8007d48:	4602      	mov	r2, r0
 8007d4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d4c:	6a21      	ldr	r1, [r4, #32]
 8007d4e:	4628      	mov	r0, r5
 8007d50:	47b0      	blx	r6
 8007d52:	1c43      	adds	r3, r0, #1
 8007d54:	89a3      	ldrh	r3, [r4, #12]
 8007d56:	d106      	bne.n	8007d66 <__sflush_r+0x66>
 8007d58:	6829      	ldr	r1, [r5, #0]
 8007d5a:	291d      	cmp	r1, #29
 8007d5c:	d82c      	bhi.n	8007db8 <__sflush_r+0xb8>
 8007d5e:	4a2a      	ldr	r2, [pc, #168]	; (8007e08 <__sflush_r+0x108>)
 8007d60:	40ca      	lsrs	r2, r1
 8007d62:	07d6      	lsls	r6, r2, #31
 8007d64:	d528      	bpl.n	8007db8 <__sflush_r+0xb8>
 8007d66:	2200      	movs	r2, #0
 8007d68:	6062      	str	r2, [r4, #4]
 8007d6a:	04d9      	lsls	r1, r3, #19
 8007d6c:	6922      	ldr	r2, [r4, #16]
 8007d6e:	6022      	str	r2, [r4, #0]
 8007d70:	d504      	bpl.n	8007d7c <__sflush_r+0x7c>
 8007d72:	1c42      	adds	r2, r0, #1
 8007d74:	d101      	bne.n	8007d7a <__sflush_r+0x7a>
 8007d76:	682b      	ldr	r3, [r5, #0]
 8007d78:	b903      	cbnz	r3, 8007d7c <__sflush_r+0x7c>
 8007d7a:	6560      	str	r0, [r4, #84]	; 0x54
 8007d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d7e:	602f      	str	r7, [r5, #0]
 8007d80:	2900      	cmp	r1, #0
 8007d82:	d0ca      	beq.n	8007d1a <__sflush_r+0x1a>
 8007d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d88:	4299      	cmp	r1, r3
 8007d8a:	d002      	beq.n	8007d92 <__sflush_r+0x92>
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	f000 fd71 	bl	8008874 <_free_r>
 8007d92:	2000      	movs	r0, #0
 8007d94:	6360      	str	r0, [r4, #52]	; 0x34
 8007d96:	e7c1      	b.n	8007d1c <__sflush_r+0x1c>
 8007d98:	6a21      	ldr	r1, [r4, #32]
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	47b0      	blx	r6
 8007da0:	1c41      	adds	r1, r0, #1
 8007da2:	d1c7      	bne.n	8007d34 <__sflush_r+0x34>
 8007da4:	682b      	ldr	r3, [r5, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d0c4      	beq.n	8007d34 <__sflush_r+0x34>
 8007daa:	2b1d      	cmp	r3, #29
 8007dac:	d001      	beq.n	8007db2 <__sflush_r+0xb2>
 8007dae:	2b16      	cmp	r3, #22
 8007db0:	d101      	bne.n	8007db6 <__sflush_r+0xb6>
 8007db2:	602f      	str	r7, [r5, #0]
 8007db4:	e7b1      	b.n	8007d1a <__sflush_r+0x1a>
 8007db6:	89a3      	ldrh	r3, [r4, #12]
 8007db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dbc:	81a3      	strh	r3, [r4, #12]
 8007dbe:	e7ad      	b.n	8007d1c <__sflush_r+0x1c>
 8007dc0:	690f      	ldr	r7, [r1, #16]
 8007dc2:	2f00      	cmp	r7, #0
 8007dc4:	d0a9      	beq.n	8007d1a <__sflush_r+0x1a>
 8007dc6:	0793      	lsls	r3, r2, #30
 8007dc8:	680e      	ldr	r6, [r1, #0]
 8007dca:	bf08      	it	eq
 8007dcc:	694b      	ldreq	r3, [r1, #20]
 8007dce:	600f      	str	r7, [r1, #0]
 8007dd0:	bf18      	it	ne
 8007dd2:	2300      	movne	r3, #0
 8007dd4:	eba6 0807 	sub.w	r8, r6, r7
 8007dd8:	608b      	str	r3, [r1, #8]
 8007dda:	f1b8 0f00 	cmp.w	r8, #0
 8007dde:	dd9c      	ble.n	8007d1a <__sflush_r+0x1a>
 8007de0:	6a21      	ldr	r1, [r4, #32]
 8007de2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007de4:	4643      	mov	r3, r8
 8007de6:	463a      	mov	r2, r7
 8007de8:	4628      	mov	r0, r5
 8007dea:	47b0      	blx	r6
 8007dec:	2800      	cmp	r0, #0
 8007dee:	dc06      	bgt.n	8007dfe <__sflush_r+0xfe>
 8007df0:	89a3      	ldrh	r3, [r4, #12]
 8007df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007df6:	81a3      	strh	r3, [r4, #12]
 8007df8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfc:	e78e      	b.n	8007d1c <__sflush_r+0x1c>
 8007dfe:	4407      	add	r7, r0
 8007e00:	eba8 0800 	sub.w	r8, r8, r0
 8007e04:	e7e9      	b.n	8007dda <__sflush_r+0xda>
 8007e06:	bf00      	nop
 8007e08:	20400001 	.word	0x20400001

08007e0c <_fflush_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	690b      	ldr	r3, [r1, #16]
 8007e10:	4605      	mov	r5, r0
 8007e12:	460c      	mov	r4, r1
 8007e14:	b913      	cbnz	r3, 8007e1c <_fflush_r+0x10>
 8007e16:	2500      	movs	r5, #0
 8007e18:	4628      	mov	r0, r5
 8007e1a:	bd38      	pop	{r3, r4, r5, pc}
 8007e1c:	b118      	cbz	r0, 8007e26 <_fflush_r+0x1a>
 8007e1e:	6983      	ldr	r3, [r0, #24]
 8007e20:	b90b      	cbnz	r3, 8007e26 <_fflush_r+0x1a>
 8007e22:	f000 f887 	bl	8007f34 <__sinit>
 8007e26:	4b14      	ldr	r3, [pc, #80]	; (8007e78 <_fflush_r+0x6c>)
 8007e28:	429c      	cmp	r4, r3
 8007e2a:	d11b      	bne.n	8007e64 <_fflush_r+0x58>
 8007e2c:	686c      	ldr	r4, [r5, #4]
 8007e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d0ef      	beq.n	8007e16 <_fflush_r+0xa>
 8007e36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e38:	07d0      	lsls	r0, r2, #31
 8007e3a:	d404      	bmi.n	8007e46 <_fflush_r+0x3a>
 8007e3c:	0599      	lsls	r1, r3, #22
 8007e3e:	d402      	bmi.n	8007e46 <_fflush_r+0x3a>
 8007e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e42:	f000 f91a 	bl	800807a <__retarget_lock_acquire_recursive>
 8007e46:	4628      	mov	r0, r5
 8007e48:	4621      	mov	r1, r4
 8007e4a:	f7ff ff59 	bl	8007d00 <__sflush_r>
 8007e4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e50:	07da      	lsls	r2, r3, #31
 8007e52:	4605      	mov	r5, r0
 8007e54:	d4e0      	bmi.n	8007e18 <_fflush_r+0xc>
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	059b      	lsls	r3, r3, #22
 8007e5a:	d4dd      	bmi.n	8007e18 <_fflush_r+0xc>
 8007e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e5e:	f000 f90d 	bl	800807c <__retarget_lock_release_recursive>
 8007e62:	e7d9      	b.n	8007e18 <_fflush_r+0xc>
 8007e64:	4b05      	ldr	r3, [pc, #20]	; (8007e7c <_fflush_r+0x70>)
 8007e66:	429c      	cmp	r4, r3
 8007e68:	d101      	bne.n	8007e6e <_fflush_r+0x62>
 8007e6a:	68ac      	ldr	r4, [r5, #8]
 8007e6c:	e7df      	b.n	8007e2e <_fflush_r+0x22>
 8007e6e:	4b04      	ldr	r3, [pc, #16]	; (8007e80 <_fflush_r+0x74>)
 8007e70:	429c      	cmp	r4, r3
 8007e72:	bf08      	it	eq
 8007e74:	68ec      	ldreq	r4, [r5, #12]
 8007e76:	e7da      	b.n	8007e2e <_fflush_r+0x22>
 8007e78:	080090d8 	.word	0x080090d8
 8007e7c:	080090f8 	.word	0x080090f8
 8007e80:	080090b8 	.word	0x080090b8

08007e84 <std>:
 8007e84:	2300      	movs	r3, #0
 8007e86:	b510      	push	{r4, lr}
 8007e88:	4604      	mov	r4, r0
 8007e8a:	e9c0 3300 	strd	r3, r3, [r0]
 8007e8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e92:	6083      	str	r3, [r0, #8]
 8007e94:	8181      	strh	r1, [r0, #12]
 8007e96:	6643      	str	r3, [r0, #100]	; 0x64
 8007e98:	81c2      	strh	r2, [r0, #14]
 8007e9a:	6183      	str	r3, [r0, #24]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	2208      	movs	r2, #8
 8007ea0:	305c      	adds	r0, #92	; 0x5c
 8007ea2:	f7fe faf3 	bl	800648c <memset>
 8007ea6:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <std+0x38>)
 8007ea8:	6263      	str	r3, [r4, #36]	; 0x24
 8007eaa:	4b05      	ldr	r3, [pc, #20]	; (8007ec0 <std+0x3c>)
 8007eac:	62a3      	str	r3, [r4, #40]	; 0x28
 8007eae:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <std+0x40>)
 8007eb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007eb2:	4b05      	ldr	r3, [pc, #20]	; (8007ec8 <std+0x44>)
 8007eb4:	6224      	str	r4, [r4, #32]
 8007eb6:	6323      	str	r3, [r4, #48]	; 0x30
 8007eb8:	bd10      	pop	{r4, pc}
 8007eba:	bf00      	nop
 8007ebc:	08008c9d 	.word	0x08008c9d
 8007ec0:	08008cbf 	.word	0x08008cbf
 8007ec4:	08008cf7 	.word	0x08008cf7
 8007ec8:	08008d1b 	.word	0x08008d1b

08007ecc <_cleanup_r>:
 8007ecc:	4901      	ldr	r1, [pc, #4]	; (8007ed4 <_cleanup_r+0x8>)
 8007ece:	f000 b8af 	b.w	8008030 <_fwalk_reent>
 8007ed2:	bf00      	nop
 8007ed4:	08007e0d 	.word	0x08007e0d

08007ed8 <__sfmoreglue>:
 8007ed8:	b570      	push	{r4, r5, r6, lr}
 8007eda:	1e4a      	subs	r2, r1, #1
 8007edc:	2568      	movs	r5, #104	; 0x68
 8007ede:	4355      	muls	r5, r2
 8007ee0:	460e      	mov	r6, r1
 8007ee2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ee6:	f000 fd15 	bl	8008914 <_malloc_r>
 8007eea:	4604      	mov	r4, r0
 8007eec:	b140      	cbz	r0, 8007f00 <__sfmoreglue+0x28>
 8007eee:	2100      	movs	r1, #0
 8007ef0:	e9c0 1600 	strd	r1, r6, [r0]
 8007ef4:	300c      	adds	r0, #12
 8007ef6:	60a0      	str	r0, [r4, #8]
 8007ef8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007efc:	f7fe fac6 	bl	800648c <memset>
 8007f00:	4620      	mov	r0, r4
 8007f02:	bd70      	pop	{r4, r5, r6, pc}

08007f04 <__sfp_lock_acquire>:
 8007f04:	4801      	ldr	r0, [pc, #4]	; (8007f0c <__sfp_lock_acquire+0x8>)
 8007f06:	f000 b8b8 	b.w	800807a <__retarget_lock_acquire_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	2000085c 	.word	0x2000085c

08007f10 <__sfp_lock_release>:
 8007f10:	4801      	ldr	r0, [pc, #4]	; (8007f18 <__sfp_lock_release+0x8>)
 8007f12:	f000 b8b3 	b.w	800807c <__retarget_lock_release_recursive>
 8007f16:	bf00      	nop
 8007f18:	2000085c 	.word	0x2000085c

08007f1c <__sinit_lock_acquire>:
 8007f1c:	4801      	ldr	r0, [pc, #4]	; (8007f24 <__sinit_lock_acquire+0x8>)
 8007f1e:	f000 b8ac 	b.w	800807a <__retarget_lock_acquire_recursive>
 8007f22:	bf00      	nop
 8007f24:	20000857 	.word	0x20000857

08007f28 <__sinit_lock_release>:
 8007f28:	4801      	ldr	r0, [pc, #4]	; (8007f30 <__sinit_lock_release+0x8>)
 8007f2a:	f000 b8a7 	b.w	800807c <__retarget_lock_release_recursive>
 8007f2e:	bf00      	nop
 8007f30:	20000857 	.word	0x20000857

08007f34 <__sinit>:
 8007f34:	b510      	push	{r4, lr}
 8007f36:	4604      	mov	r4, r0
 8007f38:	f7ff fff0 	bl	8007f1c <__sinit_lock_acquire>
 8007f3c:	69a3      	ldr	r3, [r4, #24]
 8007f3e:	b11b      	cbz	r3, 8007f48 <__sinit+0x14>
 8007f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f44:	f7ff bff0 	b.w	8007f28 <__sinit_lock_release>
 8007f48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f4c:	6523      	str	r3, [r4, #80]	; 0x50
 8007f4e:	4b13      	ldr	r3, [pc, #76]	; (8007f9c <__sinit+0x68>)
 8007f50:	4a13      	ldr	r2, [pc, #76]	; (8007fa0 <__sinit+0x6c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f56:	42a3      	cmp	r3, r4
 8007f58:	bf04      	itt	eq
 8007f5a:	2301      	moveq	r3, #1
 8007f5c:	61a3      	streq	r3, [r4, #24]
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f000 f820 	bl	8007fa4 <__sfp>
 8007f64:	6060      	str	r0, [r4, #4]
 8007f66:	4620      	mov	r0, r4
 8007f68:	f000 f81c 	bl	8007fa4 <__sfp>
 8007f6c:	60a0      	str	r0, [r4, #8]
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f000 f818 	bl	8007fa4 <__sfp>
 8007f74:	2200      	movs	r2, #0
 8007f76:	60e0      	str	r0, [r4, #12]
 8007f78:	2104      	movs	r1, #4
 8007f7a:	6860      	ldr	r0, [r4, #4]
 8007f7c:	f7ff ff82 	bl	8007e84 <std>
 8007f80:	68a0      	ldr	r0, [r4, #8]
 8007f82:	2201      	movs	r2, #1
 8007f84:	2109      	movs	r1, #9
 8007f86:	f7ff ff7d 	bl	8007e84 <std>
 8007f8a:	68e0      	ldr	r0, [r4, #12]
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	2112      	movs	r1, #18
 8007f90:	f7ff ff78 	bl	8007e84 <std>
 8007f94:	2301      	movs	r3, #1
 8007f96:	61a3      	str	r3, [r4, #24]
 8007f98:	e7d2      	b.n	8007f40 <__sinit+0xc>
 8007f9a:	bf00      	nop
 8007f9c:	08008fec 	.word	0x08008fec
 8007fa0:	08007ecd 	.word	0x08007ecd

08007fa4 <__sfp>:
 8007fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa6:	4607      	mov	r7, r0
 8007fa8:	f7ff ffac 	bl	8007f04 <__sfp_lock_acquire>
 8007fac:	4b1e      	ldr	r3, [pc, #120]	; (8008028 <__sfp+0x84>)
 8007fae:	681e      	ldr	r6, [r3, #0]
 8007fb0:	69b3      	ldr	r3, [r6, #24]
 8007fb2:	b913      	cbnz	r3, 8007fba <__sfp+0x16>
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	f7ff ffbd 	bl	8007f34 <__sinit>
 8007fba:	3648      	adds	r6, #72	; 0x48
 8007fbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	d503      	bpl.n	8007fcc <__sfp+0x28>
 8007fc4:	6833      	ldr	r3, [r6, #0]
 8007fc6:	b30b      	cbz	r3, 800800c <__sfp+0x68>
 8007fc8:	6836      	ldr	r6, [r6, #0]
 8007fca:	e7f7      	b.n	8007fbc <__sfp+0x18>
 8007fcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007fd0:	b9d5      	cbnz	r5, 8008008 <__sfp+0x64>
 8007fd2:	4b16      	ldr	r3, [pc, #88]	; (800802c <__sfp+0x88>)
 8007fd4:	60e3      	str	r3, [r4, #12]
 8007fd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007fda:	6665      	str	r5, [r4, #100]	; 0x64
 8007fdc:	f000 f84c 	bl	8008078 <__retarget_lock_init_recursive>
 8007fe0:	f7ff ff96 	bl	8007f10 <__sfp_lock_release>
 8007fe4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007fe8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007fec:	6025      	str	r5, [r4, #0]
 8007fee:	61a5      	str	r5, [r4, #24]
 8007ff0:	2208      	movs	r2, #8
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ff8:	f7fe fa48 	bl	800648c <memset>
 8007ffc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008000:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008004:	4620      	mov	r0, r4
 8008006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008008:	3468      	adds	r4, #104	; 0x68
 800800a:	e7d9      	b.n	8007fc0 <__sfp+0x1c>
 800800c:	2104      	movs	r1, #4
 800800e:	4638      	mov	r0, r7
 8008010:	f7ff ff62 	bl	8007ed8 <__sfmoreglue>
 8008014:	4604      	mov	r4, r0
 8008016:	6030      	str	r0, [r6, #0]
 8008018:	2800      	cmp	r0, #0
 800801a:	d1d5      	bne.n	8007fc8 <__sfp+0x24>
 800801c:	f7ff ff78 	bl	8007f10 <__sfp_lock_release>
 8008020:	230c      	movs	r3, #12
 8008022:	603b      	str	r3, [r7, #0]
 8008024:	e7ee      	b.n	8008004 <__sfp+0x60>
 8008026:	bf00      	nop
 8008028:	08008fec 	.word	0x08008fec
 800802c:	ffff0001 	.word	0xffff0001

08008030 <_fwalk_reent>:
 8008030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008034:	4606      	mov	r6, r0
 8008036:	4688      	mov	r8, r1
 8008038:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800803c:	2700      	movs	r7, #0
 800803e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008042:	f1b9 0901 	subs.w	r9, r9, #1
 8008046:	d505      	bpl.n	8008054 <_fwalk_reent+0x24>
 8008048:	6824      	ldr	r4, [r4, #0]
 800804a:	2c00      	cmp	r4, #0
 800804c:	d1f7      	bne.n	800803e <_fwalk_reent+0xe>
 800804e:	4638      	mov	r0, r7
 8008050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008054:	89ab      	ldrh	r3, [r5, #12]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d907      	bls.n	800806a <_fwalk_reent+0x3a>
 800805a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800805e:	3301      	adds	r3, #1
 8008060:	d003      	beq.n	800806a <_fwalk_reent+0x3a>
 8008062:	4629      	mov	r1, r5
 8008064:	4630      	mov	r0, r6
 8008066:	47c0      	blx	r8
 8008068:	4307      	orrs	r7, r0
 800806a:	3568      	adds	r5, #104	; 0x68
 800806c:	e7e9      	b.n	8008042 <_fwalk_reent+0x12>
	...

08008070 <_localeconv_r>:
 8008070:	4800      	ldr	r0, [pc, #0]	; (8008074 <_localeconv_r+0x4>)
 8008072:	4770      	bx	lr
 8008074:	20000180 	.word	0x20000180

08008078 <__retarget_lock_init_recursive>:
 8008078:	4770      	bx	lr

0800807a <__retarget_lock_acquire_recursive>:
 800807a:	4770      	bx	lr

0800807c <__retarget_lock_release_recursive>:
 800807c:	4770      	bx	lr

0800807e <__swhatbuf_r>:
 800807e:	b570      	push	{r4, r5, r6, lr}
 8008080:	460e      	mov	r6, r1
 8008082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008086:	2900      	cmp	r1, #0
 8008088:	b096      	sub	sp, #88	; 0x58
 800808a:	4614      	mov	r4, r2
 800808c:	461d      	mov	r5, r3
 800808e:	da07      	bge.n	80080a0 <__swhatbuf_r+0x22>
 8008090:	2300      	movs	r3, #0
 8008092:	602b      	str	r3, [r5, #0]
 8008094:	89b3      	ldrh	r3, [r6, #12]
 8008096:	061a      	lsls	r2, r3, #24
 8008098:	d410      	bmi.n	80080bc <__swhatbuf_r+0x3e>
 800809a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800809e:	e00e      	b.n	80080be <__swhatbuf_r+0x40>
 80080a0:	466a      	mov	r2, sp
 80080a2:	f000 fe91 	bl	8008dc8 <_fstat_r>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	dbf2      	blt.n	8008090 <__swhatbuf_r+0x12>
 80080aa:	9a01      	ldr	r2, [sp, #4]
 80080ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080b4:	425a      	negs	r2, r3
 80080b6:	415a      	adcs	r2, r3
 80080b8:	602a      	str	r2, [r5, #0]
 80080ba:	e7ee      	b.n	800809a <__swhatbuf_r+0x1c>
 80080bc:	2340      	movs	r3, #64	; 0x40
 80080be:	2000      	movs	r0, #0
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	b016      	add	sp, #88	; 0x58
 80080c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080080c8 <__smakebuf_r>:
 80080c8:	898b      	ldrh	r3, [r1, #12]
 80080ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080cc:	079d      	lsls	r5, r3, #30
 80080ce:	4606      	mov	r6, r0
 80080d0:	460c      	mov	r4, r1
 80080d2:	d507      	bpl.n	80080e4 <__smakebuf_r+0x1c>
 80080d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	6123      	str	r3, [r4, #16]
 80080dc:	2301      	movs	r3, #1
 80080de:	6163      	str	r3, [r4, #20]
 80080e0:	b002      	add	sp, #8
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	ab01      	add	r3, sp, #4
 80080e6:	466a      	mov	r2, sp
 80080e8:	f7ff ffc9 	bl	800807e <__swhatbuf_r>
 80080ec:	9900      	ldr	r1, [sp, #0]
 80080ee:	4605      	mov	r5, r0
 80080f0:	4630      	mov	r0, r6
 80080f2:	f000 fc0f 	bl	8008914 <_malloc_r>
 80080f6:	b948      	cbnz	r0, 800810c <__smakebuf_r+0x44>
 80080f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080fc:	059a      	lsls	r2, r3, #22
 80080fe:	d4ef      	bmi.n	80080e0 <__smakebuf_r+0x18>
 8008100:	f023 0303 	bic.w	r3, r3, #3
 8008104:	f043 0302 	orr.w	r3, r3, #2
 8008108:	81a3      	strh	r3, [r4, #12]
 800810a:	e7e3      	b.n	80080d4 <__smakebuf_r+0xc>
 800810c:	4b0d      	ldr	r3, [pc, #52]	; (8008144 <__smakebuf_r+0x7c>)
 800810e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008110:	89a3      	ldrh	r3, [r4, #12]
 8008112:	6020      	str	r0, [r4, #0]
 8008114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008118:	81a3      	strh	r3, [r4, #12]
 800811a:	9b00      	ldr	r3, [sp, #0]
 800811c:	6163      	str	r3, [r4, #20]
 800811e:	9b01      	ldr	r3, [sp, #4]
 8008120:	6120      	str	r0, [r4, #16]
 8008122:	b15b      	cbz	r3, 800813c <__smakebuf_r+0x74>
 8008124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008128:	4630      	mov	r0, r6
 800812a:	f000 fe5f 	bl	8008dec <_isatty_r>
 800812e:	b128      	cbz	r0, 800813c <__smakebuf_r+0x74>
 8008130:	89a3      	ldrh	r3, [r4, #12]
 8008132:	f023 0303 	bic.w	r3, r3, #3
 8008136:	f043 0301 	orr.w	r3, r3, #1
 800813a:	81a3      	strh	r3, [r4, #12]
 800813c:	89a0      	ldrh	r0, [r4, #12]
 800813e:	4305      	orrs	r5, r0
 8008140:	81a5      	strh	r5, [r4, #12]
 8008142:	e7cd      	b.n	80080e0 <__smakebuf_r+0x18>
 8008144:	08007ecd 	.word	0x08007ecd

08008148 <malloc>:
 8008148:	4b02      	ldr	r3, [pc, #8]	; (8008154 <malloc+0xc>)
 800814a:	4601      	mov	r1, r0
 800814c:	6818      	ldr	r0, [r3, #0]
 800814e:	f000 bbe1 	b.w	8008914 <_malloc_r>
 8008152:	bf00      	nop
 8008154:	2000002c 	.word	0x2000002c

08008158 <_Balloc>:
 8008158:	b570      	push	{r4, r5, r6, lr}
 800815a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800815c:	4604      	mov	r4, r0
 800815e:	460d      	mov	r5, r1
 8008160:	b976      	cbnz	r6, 8008180 <_Balloc+0x28>
 8008162:	2010      	movs	r0, #16
 8008164:	f7ff fff0 	bl	8008148 <malloc>
 8008168:	4602      	mov	r2, r0
 800816a:	6260      	str	r0, [r4, #36]	; 0x24
 800816c:	b920      	cbnz	r0, 8008178 <_Balloc+0x20>
 800816e:	4b18      	ldr	r3, [pc, #96]	; (80081d0 <_Balloc+0x78>)
 8008170:	4818      	ldr	r0, [pc, #96]	; (80081d4 <_Balloc+0x7c>)
 8008172:	2166      	movs	r1, #102	; 0x66
 8008174:	f000 fde8 	bl	8008d48 <__assert_func>
 8008178:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800817c:	6006      	str	r6, [r0, #0]
 800817e:	60c6      	str	r6, [r0, #12]
 8008180:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008182:	68f3      	ldr	r3, [r6, #12]
 8008184:	b183      	cbz	r3, 80081a8 <_Balloc+0x50>
 8008186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800818e:	b9b8      	cbnz	r0, 80081c0 <_Balloc+0x68>
 8008190:	2101      	movs	r1, #1
 8008192:	fa01 f605 	lsl.w	r6, r1, r5
 8008196:	1d72      	adds	r2, r6, #5
 8008198:	0092      	lsls	r2, r2, #2
 800819a:	4620      	mov	r0, r4
 800819c:	f000 fb5a 	bl	8008854 <_calloc_r>
 80081a0:	b160      	cbz	r0, 80081bc <_Balloc+0x64>
 80081a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80081a6:	e00e      	b.n	80081c6 <_Balloc+0x6e>
 80081a8:	2221      	movs	r2, #33	; 0x21
 80081aa:	2104      	movs	r1, #4
 80081ac:	4620      	mov	r0, r4
 80081ae:	f000 fb51 	bl	8008854 <_calloc_r>
 80081b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081b4:	60f0      	str	r0, [r6, #12]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1e4      	bne.n	8008186 <_Balloc+0x2e>
 80081bc:	2000      	movs	r0, #0
 80081be:	bd70      	pop	{r4, r5, r6, pc}
 80081c0:	6802      	ldr	r2, [r0, #0]
 80081c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081c6:	2300      	movs	r3, #0
 80081c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081cc:	e7f7      	b.n	80081be <_Balloc+0x66>
 80081ce:	bf00      	nop
 80081d0:	08009031 	.word	0x08009031
 80081d4:	08009118 	.word	0x08009118

080081d8 <_Bfree>:
 80081d8:	b570      	push	{r4, r5, r6, lr}
 80081da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081dc:	4605      	mov	r5, r0
 80081de:	460c      	mov	r4, r1
 80081e0:	b976      	cbnz	r6, 8008200 <_Bfree+0x28>
 80081e2:	2010      	movs	r0, #16
 80081e4:	f7ff ffb0 	bl	8008148 <malloc>
 80081e8:	4602      	mov	r2, r0
 80081ea:	6268      	str	r0, [r5, #36]	; 0x24
 80081ec:	b920      	cbnz	r0, 80081f8 <_Bfree+0x20>
 80081ee:	4b09      	ldr	r3, [pc, #36]	; (8008214 <_Bfree+0x3c>)
 80081f0:	4809      	ldr	r0, [pc, #36]	; (8008218 <_Bfree+0x40>)
 80081f2:	218a      	movs	r1, #138	; 0x8a
 80081f4:	f000 fda8 	bl	8008d48 <__assert_func>
 80081f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081fc:	6006      	str	r6, [r0, #0]
 80081fe:	60c6      	str	r6, [r0, #12]
 8008200:	b13c      	cbz	r4, 8008212 <_Bfree+0x3a>
 8008202:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008204:	6862      	ldr	r2, [r4, #4]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800820c:	6021      	str	r1, [r4, #0]
 800820e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008212:	bd70      	pop	{r4, r5, r6, pc}
 8008214:	08009031 	.word	0x08009031
 8008218:	08009118 	.word	0x08009118

0800821c <__multadd>:
 800821c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008220:	690e      	ldr	r6, [r1, #16]
 8008222:	4607      	mov	r7, r0
 8008224:	4698      	mov	r8, r3
 8008226:	460c      	mov	r4, r1
 8008228:	f101 0014 	add.w	r0, r1, #20
 800822c:	2300      	movs	r3, #0
 800822e:	6805      	ldr	r5, [r0, #0]
 8008230:	b2a9      	uxth	r1, r5
 8008232:	fb02 8101 	mla	r1, r2, r1, r8
 8008236:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800823a:	0c2d      	lsrs	r5, r5, #16
 800823c:	fb02 c505 	mla	r5, r2, r5, ip
 8008240:	b289      	uxth	r1, r1
 8008242:	3301      	adds	r3, #1
 8008244:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008248:	429e      	cmp	r6, r3
 800824a:	f840 1b04 	str.w	r1, [r0], #4
 800824e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008252:	dcec      	bgt.n	800822e <__multadd+0x12>
 8008254:	f1b8 0f00 	cmp.w	r8, #0
 8008258:	d022      	beq.n	80082a0 <__multadd+0x84>
 800825a:	68a3      	ldr	r3, [r4, #8]
 800825c:	42b3      	cmp	r3, r6
 800825e:	dc19      	bgt.n	8008294 <__multadd+0x78>
 8008260:	6861      	ldr	r1, [r4, #4]
 8008262:	4638      	mov	r0, r7
 8008264:	3101      	adds	r1, #1
 8008266:	f7ff ff77 	bl	8008158 <_Balloc>
 800826a:	4605      	mov	r5, r0
 800826c:	b928      	cbnz	r0, 800827a <__multadd+0x5e>
 800826e:	4602      	mov	r2, r0
 8008270:	4b0d      	ldr	r3, [pc, #52]	; (80082a8 <__multadd+0x8c>)
 8008272:	480e      	ldr	r0, [pc, #56]	; (80082ac <__multadd+0x90>)
 8008274:	21b5      	movs	r1, #181	; 0xb5
 8008276:	f000 fd67 	bl	8008d48 <__assert_func>
 800827a:	6922      	ldr	r2, [r4, #16]
 800827c:	3202      	adds	r2, #2
 800827e:	f104 010c 	add.w	r1, r4, #12
 8008282:	0092      	lsls	r2, r2, #2
 8008284:	300c      	adds	r0, #12
 8008286:	f7fe f8f3 	bl	8006470 <memcpy>
 800828a:	4621      	mov	r1, r4
 800828c:	4638      	mov	r0, r7
 800828e:	f7ff ffa3 	bl	80081d8 <_Bfree>
 8008292:	462c      	mov	r4, r5
 8008294:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008298:	3601      	adds	r6, #1
 800829a:	f8c3 8014 	str.w	r8, [r3, #20]
 800829e:	6126      	str	r6, [r4, #16]
 80082a0:	4620      	mov	r0, r4
 80082a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082a6:	bf00      	nop
 80082a8:	080090a7 	.word	0x080090a7
 80082ac:	08009118 	.word	0x08009118

080082b0 <__hi0bits>:
 80082b0:	0c03      	lsrs	r3, r0, #16
 80082b2:	041b      	lsls	r3, r3, #16
 80082b4:	b9d3      	cbnz	r3, 80082ec <__hi0bits+0x3c>
 80082b6:	0400      	lsls	r0, r0, #16
 80082b8:	2310      	movs	r3, #16
 80082ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80082be:	bf04      	itt	eq
 80082c0:	0200      	lsleq	r0, r0, #8
 80082c2:	3308      	addeq	r3, #8
 80082c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80082c8:	bf04      	itt	eq
 80082ca:	0100      	lsleq	r0, r0, #4
 80082cc:	3304      	addeq	r3, #4
 80082ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80082d2:	bf04      	itt	eq
 80082d4:	0080      	lsleq	r0, r0, #2
 80082d6:	3302      	addeq	r3, #2
 80082d8:	2800      	cmp	r0, #0
 80082da:	db05      	blt.n	80082e8 <__hi0bits+0x38>
 80082dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80082e0:	f103 0301 	add.w	r3, r3, #1
 80082e4:	bf08      	it	eq
 80082e6:	2320      	moveq	r3, #32
 80082e8:	4618      	mov	r0, r3
 80082ea:	4770      	bx	lr
 80082ec:	2300      	movs	r3, #0
 80082ee:	e7e4      	b.n	80082ba <__hi0bits+0xa>

080082f0 <__lo0bits>:
 80082f0:	6803      	ldr	r3, [r0, #0]
 80082f2:	f013 0207 	ands.w	r2, r3, #7
 80082f6:	4601      	mov	r1, r0
 80082f8:	d00b      	beq.n	8008312 <__lo0bits+0x22>
 80082fa:	07da      	lsls	r2, r3, #31
 80082fc:	d424      	bmi.n	8008348 <__lo0bits+0x58>
 80082fe:	0798      	lsls	r0, r3, #30
 8008300:	bf49      	itett	mi
 8008302:	085b      	lsrmi	r3, r3, #1
 8008304:	089b      	lsrpl	r3, r3, #2
 8008306:	2001      	movmi	r0, #1
 8008308:	600b      	strmi	r3, [r1, #0]
 800830a:	bf5c      	itt	pl
 800830c:	600b      	strpl	r3, [r1, #0]
 800830e:	2002      	movpl	r0, #2
 8008310:	4770      	bx	lr
 8008312:	b298      	uxth	r0, r3
 8008314:	b9b0      	cbnz	r0, 8008344 <__lo0bits+0x54>
 8008316:	0c1b      	lsrs	r3, r3, #16
 8008318:	2010      	movs	r0, #16
 800831a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800831e:	bf04      	itt	eq
 8008320:	0a1b      	lsreq	r3, r3, #8
 8008322:	3008      	addeq	r0, #8
 8008324:	071a      	lsls	r2, r3, #28
 8008326:	bf04      	itt	eq
 8008328:	091b      	lsreq	r3, r3, #4
 800832a:	3004      	addeq	r0, #4
 800832c:	079a      	lsls	r2, r3, #30
 800832e:	bf04      	itt	eq
 8008330:	089b      	lsreq	r3, r3, #2
 8008332:	3002      	addeq	r0, #2
 8008334:	07da      	lsls	r2, r3, #31
 8008336:	d403      	bmi.n	8008340 <__lo0bits+0x50>
 8008338:	085b      	lsrs	r3, r3, #1
 800833a:	f100 0001 	add.w	r0, r0, #1
 800833e:	d005      	beq.n	800834c <__lo0bits+0x5c>
 8008340:	600b      	str	r3, [r1, #0]
 8008342:	4770      	bx	lr
 8008344:	4610      	mov	r0, r2
 8008346:	e7e8      	b.n	800831a <__lo0bits+0x2a>
 8008348:	2000      	movs	r0, #0
 800834a:	4770      	bx	lr
 800834c:	2020      	movs	r0, #32
 800834e:	4770      	bx	lr

08008350 <__i2b>:
 8008350:	b510      	push	{r4, lr}
 8008352:	460c      	mov	r4, r1
 8008354:	2101      	movs	r1, #1
 8008356:	f7ff feff 	bl	8008158 <_Balloc>
 800835a:	4602      	mov	r2, r0
 800835c:	b928      	cbnz	r0, 800836a <__i2b+0x1a>
 800835e:	4b05      	ldr	r3, [pc, #20]	; (8008374 <__i2b+0x24>)
 8008360:	4805      	ldr	r0, [pc, #20]	; (8008378 <__i2b+0x28>)
 8008362:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008366:	f000 fcef 	bl	8008d48 <__assert_func>
 800836a:	2301      	movs	r3, #1
 800836c:	6144      	str	r4, [r0, #20]
 800836e:	6103      	str	r3, [r0, #16]
 8008370:	bd10      	pop	{r4, pc}
 8008372:	bf00      	nop
 8008374:	080090a7 	.word	0x080090a7
 8008378:	08009118 	.word	0x08009118

0800837c <__multiply>:
 800837c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008380:	4614      	mov	r4, r2
 8008382:	690a      	ldr	r2, [r1, #16]
 8008384:	6923      	ldr	r3, [r4, #16]
 8008386:	429a      	cmp	r2, r3
 8008388:	bfb8      	it	lt
 800838a:	460b      	movlt	r3, r1
 800838c:	460d      	mov	r5, r1
 800838e:	bfbc      	itt	lt
 8008390:	4625      	movlt	r5, r4
 8008392:	461c      	movlt	r4, r3
 8008394:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008398:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800839c:	68ab      	ldr	r3, [r5, #8]
 800839e:	6869      	ldr	r1, [r5, #4]
 80083a0:	eb0a 0709 	add.w	r7, sl, r9
 80083a4:	42bb      	cmp	r3, r7
 80083a6:	b085      	sub	sp, #20
 80083a8:	bfb8      	it	lt
 80083aa:	3101      	addlt	r1, #1
 80083ac:	f7ff fed4 	bl	8008158 <_Balloc>
 80083b0:	b930      	cbnz	r0, 80083c0 <__multiply+0x44>
 80083b2:	4602      	mov	r2, r0
 80083b4:	4b42      	ldr	r3, [pc, #264]	; (80084c0 <__multiply+0x144>)
 80083b6:	4843      	ldr	r0, [pc, #268]	; (80084c4 <__multiply+0x148>)
 80083b8:	f240 115d 	movw	r1, #349	; 0x15d
 80083bc:	f000 fcc4 	bl	8008d48 <__assert_func>
 80083c0:	f100 0614 	add.w	r6, r0, #20
 80083c4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80083c8:	4633      	mov	r3, r6
 80083ca:	2200      	movs	r2, #0
 80083cc:	4543      	cmp	r3, r8
 80083ce:	d31e      	bcc.n	800840e <__multiply+0x92>
 80083d0:	f105 0c14 	add.w	ip, r5, #20
 80083d4:	f104 0314 	add.w	r3, r4, #20
 80083d8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80083dc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80083e0:	9202      	str	r2, [sp, #8]
 80083e2:	ebac 0205 	sub.w	r2, ip, r5
 80083e6:	3a15      	subs	r2, #21
 80083e8:	f022 0203 	bic.w	r2, r2, #3
 80083ec:	3204      	adds	r2, #4
 80083ee:	f105 0115 	add.w	r1, r5, #21
 80083f2:	458c      	cmp	ip, r1
 80083f4:	bf38      	it	cc
 80083f6:	2204      	movcc	r2, #4
 80083f8:	9201      	str	r2, [sp, #4]
 80083fa:	9a02      	ldr	r2, [sp, #8]
 80083fc:	9303      	str	r3, [sp, #12]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d808      	bhi.n	8008414 <__multiply+0x98>
 8008402:	2f00      	cmp	r7, #0
 8008404:	dc55      	bgt.n	80084b2 <__multiply+0x136>
 8008406:	6107      	str	r7, [r0, #16]
 8008408:	b005      	add	sp, #20
 800840a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840e:	f843 2b04 	str.w	r2, [r3], #4
 8008412:	e7db      	b.n	80083cc <__multiply+0x50>
 8008414:	f8b3 a000 	ldrh.w	sl, [r3]
 8008418:	f1ba 0f00 	cmp.w	sl, #0
 800841c:	d020      	beq.n	8008460 <__multiply+0xe4>
 800841e:	f105 0e14 	add.w	lr, r5, #20
 8008422:	46b1      	mov	r9, r6
 8008424:	2200      	movs	r2, #0
 8008426:	f85e 4b04 	ldr.w	r4, [lr], #4
 800842a:	f8d9 b000 	ldr.w	fp, [r9]
 800842e:	b2a1      	uxth	r1, r4
 8008430:	fa1f fb8b 	uxth.w	fp, fp
 8008434:	fb0a b101 	mla	r1, sl, r1, fp
 8008438:	4411      	add	r1, r2
 800843a:	f8d9 2000 	ldr.w	r2, [r9]
 800843e:	0c24      	lsrs	r4, r4, #16
 8008440:	0c12      	lsrs	r2, r2, #16
 8008442:	fb0a 2404 	mla	r4, sl, r4, r2
 8008446:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800844a:	b289      	uxth	r1, r1
 800844c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008450:	45f4      	cmp	ip, lr
 8008452:	f849 1b04 	str.w	r1, [r9], #4
 8008456:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800845a:	d8e4      	bhi.n	8008426 <__multiply+0xaa>
 800845c:	9901      	ldr	r1, [sp, #4]
 800845e:	5072      	str	r2, [r6, r1]
 8008460:	9a03      	ldr	r2, [sp, #12]
 8008462:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008466:	3304      	adds	r3, #4
 8008468:	f1b9 0f00 	cmp.w	r9, #0
 800846c:	d01f      	beq.n	80084ae <__multiply+0x132>
 800846e:	6834      	ldr	r4, [r6, #0]
 8008470:	f105 0114 	add.w	r1, r5, #20
 8008474:	46b6      	mov	lr, r6
 8008476:	f04f 0a00 	mov.w	sl, #0
 800847a:	880a      	ldrh	r2, [r1, #0]
 800847c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008480:	fb09 b202 	mla	r2, r9, r2, fp
 8008484:	4492      	add	sl, r2
 8008486:	b2a4      	uxth	r4, r4
 8008488:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800848c:	f84e 4b04 	str.w	r4, [lr], #4
 8008490:	f851 4b04 	ldr.w	r4, [r1], #4
 8008494:	f8be 2000 	ldrh.w	r2, [lr]
 8008498:	0c24      	lsrs	r4, r4, #16
 800849a:	fb09 2404 	mla	r4, r9, r4, r2
 800849e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80084a2:	458c      	cmp	ip, r1
 80084a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80084a8:	d8e7      	bhi.n	800847a <__multiply+0xfe>
 80084aa:	9a01      	ldr	r2, [sp, #4]
 80084ac:	50b4      	str	r4, [r6, r2]
 80084ae:	3604      	adds	r6, #4
 80084b0:	e7a3      	b.n	80083fa <__multiply+0x7e>
 80084b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1a5      	bne.n	8008406 <__multiply+0x8a>
 80084ba:	3f01      	subs	r7, #1
 80084bc:	e7a1      	b.n	8008402 <__multiply+0x86>
 80084be:	bf00      	nop
 80084c0:	080090a7 	.word	0x080090a7
 80084c4:	08009118 	.word	0x08009118

080084c8 <__pow5mult>:
 80084c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084cc:	4615      	mov	r5, r2
 80084ce:	f012 0203 	ands.w	r2, r2, #3
 80084d2:	4606      	mov	r6, r0
 80084d4:	460f      	mov	r7, r1
 80084d6:	d007      	beq.n	80084e8 <__pow5mult+0x20>
 80084d8:	4c25      	ldr	r4, [pc, #148]	; (8008570 <__pow5mult+0xa8>)
 80084da:	3a01      	subs	r2, #1
 80084dc:	2300      	movs	r3, #0
 80084de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084e2:	f7ff fe9b 	bl	800821c <__multadd>
 80084e6:	4607      	mov	r7, r0
 80084e8:	10ad      	asrs	r5, r5, #2
 80084ea:	d03d      	beq.n	8008568 <__pow5mult+0xa0>
 80084ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80084ee:	b97c      	cbnz	r4, 8008510 <__pow5mult+0x48>
 80084f0:	2010      	movs	r0, #16
 80084f2:	f7ff fe29 	bl	8008148 <malloc>
 80084f6:	4602      	mov	r2, r0
 80084f8:	6270      	str	r0, [r6, #36]	; 0x24
 80084fa:	b928      	cbnz	r0, 8008508 <__pow5mult+0x40>
 80084fc:	4b1d      	ldr	r3, [pc, #116]	; (8008574 <__pow5mult+0xac>)
 80084fe:	481e      	ldr	r0, [pc, #120]	; (8008578 <__pow5mult+0xb0>)
 8008500:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008504:	f000 fc20 	bl	8008d48 <__assert_func>
 8008508:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800850c:	6004      	str	r4, [r0, #0]
 800850e:	60c4      	str	r4, [r0, #12]
 8008510:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008514:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008518:	b94c      	cbnz	r4, 800852e <__pow5mult+0x66>
 800851a:	f240 2171 	movw	r1, #625	; 0x271
 800851e:	4630      	mov	r0, r6
 8008520:	f7ff ff16 	bl	8008350 <__i2b>
 8008524:	2300      	movs	r3, #0
 8008526:	f8c8 0008 	str.w	r0, [r8, #8]
 800852a:	4604      	mov	r4, r0
 800852c:	6003      	str	r3, [r0, #0]
 800852e:	f04f 0900 	mov.w	r9, #0
 8008532:	07eb      	lsls	r3, r5, #31
 8008534:	d50a      	bpl.n	800854c <__pow5mult+0x84>
 8008536:	4639      	mov	r1, r7
 8008538:	4622      	mov	r2, r4
 800853a:	4630      	mov	r0, r6
 800853c:	f7ff ff1e 	bl	800837c <__multiply>
 8008540:	4639      	mov	r1, r7
 8008542:	4680      	mov	r8, r0
 8008544:	4630      	mov	r0, r6
 8008546:	f7ff fe47 	bl	80081d8 <_Bfree>
 800854a:	4647      	mov	r7, r8
 800854c:	106d      	asrs	r5, r5, #1
 800854e:	d00b      	beq.n	8008568 <__pow5mult+0xa0>
 8008550:	6820      	ldr	r0, [r4, #0]
 8008552:	b938      	cbnz	r0, 8008564 <__pow5mult+0x9c>
 8008554:	4622      	mov	r2, r4
 8008556:	4621      	mov	r1, r4
 8008558:	4630      	mov	r0, r6
 800855a:	f7ff ff0f 	bl	800837c <__multiply>
 800855e:	6020      	str	r0, [r4, #0]
 8008560:	f8c0 9000 	str.w	r9, [r0]
 8008564:	4604      	mov	r4, r0
 8008566:	e7e4      	b.n	8008532 <__pow5mult+0x6a>
 8008568:	4638      	mov	r0, r7
 800856a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800856e:	bf00      	nop
 8008570:	08009268 	.word	0x08009268
 8008574:	08009031 	.word	0x08009031
 8008578:	08009118 	.word	0x08009118

0800857c <__lshift>:
 800857c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008580:	460c      	mov	r4, r1
 8008582:	6849      	ldr	r1, [r1, #4]
 8008584:	6923      	ldr	r3, [r4, #16]
 8008586:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800858a:	68a3      	ldr	r3, [r4, #8]
 800858c:	4607      	mov	r7, r0
 800858e:	4691      	mov	r9, r2
 8008590:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008594:	f108 0601 	add.w	r6, r8, #1
 8008598:	42b3      	cmp	r3, r6
 800859a:	db0b      	blt.n	80085b4 <__lshift+0x38>
 800859c:	4638      	mov	r0, r7
 800859e:	f7ff fddb 	bl	8008158 <_Balloc>
 80085a2:	4605      	mov	r5, r0
 80085a4:	b948      	cbnz	r0, 80085ba <__lshift+0x3e>
 80085a6:	4602      	mov	r2, r0
 80085a8:	4b28      	ldr	r3, [pc, #160]	; (800864c <__lshift+0xd0>)
 80085aa:	4829      	ldr	r0, [pc, #164]	; (8008650 <__lshift+0xd4>)
 80085ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80085b0:	f000 fbca 	bl	8008d48 <__assert_func>
 80085b4:	3101      	adds	r1, #1
 80085b6:	005b      	lsls	r3, r3, #1
 80085b8:	e7ee      	b.n	8008598 <__lshift+0x1c>
 80085ba:	2300      	movs	r3, #0
 80085bc:	f100 0114 	add.w	r1, r0, #20
 80085c0:	f100 0210 	add.w	r2, r0, #16
 80085c4:	4618      	mov	r0, r3
 80085c6:	4553      	cmp	r3, sl
 80085c8:	db33      	blt.n	8008632 <__lshift+0xb6>
 80085ca:	6920      	ldr	r0, [r4, #16]
 80085cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085d0:	f104 0314 	add.w	r3, r4, #20
 80085d4:	f019 091f 	ands.w	r9, r9, #31
 80085d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085e0:	d02b      	beq.n	800863a <__lshift+0xbe>
 80085e2:	f1c9 0e20 	rsb	lr, r9, #32
 80085e6:	468a      	mov	sl, r1
 80085e8:	2200      	movs	r2, #0
 80085ea:	6818      	ldr	r0, [r3, #0]
 80085ec:	fa00 f009 	lsl.w	r0, r0, r9
 80085f0:	4302      	orrs	r2, r0
 80085f2:	f84a 2b04 	str.w	r2, [sl], #4
 80085f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80085fa:	459c      	cmp	ip, r3
 80085fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008600:	d8f3      	bhi.n	80085ea <__lshift+0x6e>
 8008602:	ebac 0304 	sub.w	r3, ip, r4
 8008606:	3b15      	subs	r3, #21
 8008608:	f023 0303 	bic.w	r3, r3, #3
 800860c:	3304      	adds	r3, #4
 800860e:	f104 0015 	add.w	r0, r4, #21
 8008612:	4584      	cmp	ip, r0
 8008614:	bf38      	it	cc
 8008616:	2304      	movcc	r3, #4
 8008618:	50ca      	str	r2, [r1, r3]
 800861a:	b10a      	cbz	r2, 8008620 <__lshift+0xa4>
 800861c:	f108 0602 	add.w	r6, r8, #2
 8008620:	3e01      	subs	r6, #1
 8008622:	4638      	mov	r0, r7
 8008624:	612e      	str	r6, [r5, #16]
 8008626:	4621      	mov	r1, r4
 8008628:	f7ff fdd6 	bl	80081d8 <_Bfree>
 800862c:	4628      	mov	r0, r5
 800862e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008632:	f842 0f04 	str.w	r0, [r2, #4]!
 8008636:	3301      	adds	r3, #1
 8008638:	e7c5      	b.n	80085c6 <__lshift+0x4a>
 800863a:	3904      	subs	r1, #4
 800863c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008640:	f841 2f04 	str.w	r2, [r1, #4]!
 8008644:	459c      	cmp	ip, r3
 8008646:	d8f9      	bhi.n	800863c <__lshift+0xc0>
 8008648:	e7ea      	b.n	8008620 <__lshift+0xa4>
 800864a:	bf00      	nop
 800864c:	080090a7 	.word	0x080090a7
 8008650:	08009118 	.word	0x08009118

08008654 <__mcmp>:
 8008654:	b530      	push	{r4, r5, lr}
 8008656:	6902      	ldr	r2, [r0, #16]
 8008658:	690c      	ldr	r4, [r1, #16]
 800865a:	1b12      	subs	r2, r2, r4
 800865c:	d10e      	bne.n	800867c <__mcmp+0x28>
 800865e:	f100 0314 	add.w	r3, r0, #20
 8008662:	3114      	adds	r1, #20
 8008664:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008668:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800866c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008670:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008674:	42a5      	cmp	r5, r4
 8008676:	d003      	beq.n	8008680 <__mcmp+0x2c>
 8008678:	d305      	bcc.n	8008686 <__mcmp+0x32>
 800867a:	2201      	movs	r2, #1
 800867c:	4610      	mov	r0, r2
 800867e:	bd30      	pop	{r4, r5, pc}
 8008680:	4283      	cmp	r3, r0
 8008682:	d3f3      	bcc.n	800866c <__mcmp+0x18>
 8008684:	e7fa      	b.n	800867c <__mcmp+0x28>
 8008686:	f04f 32ff 	mov.w	r2, #4294967295
 800868a:	e7f7      	b.n	800867c <__mcmp+0x28>

0800868c <__mdiff>:
 800868c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008690:	460c      	mov	r4, r1
 8008692:	4606      	mov	r6, r0
 8008694:	4611      	mov	r1, r2
 8008696:	4620      	mov	r0, r4
 8008698:	4617      	mov	r7, r2
 800869a:	f7ff ffdb 	bl	8008654 <__mcmp>
 800869e:	1e05      	subs	r5, r0, #0
 80086a0:	d110      	bne.n	80086c4 <__mdiff+0x38>
 80086a2:	4629      	mov	r1, r5
 80086a4:	4630      	mov	r0, r6
 80086a6:	f7ff fd57 	bl	8008158 <_Balloc>
 80086aa:	b930      	cbnz	r0, 80086ba <__mdiff+0x2e>
 80086ac:	4b39      	ldr	r3, [pc, #228]	; (8008794 <__mdiff+0x108>)
 80086ae:	4602      	mov	r2, r0
 80086b0:	f240 2132 	movw	r1, #562	; 0x232
 80086b4:	4838      	ldr	r0, [pc, #224]	; (8008798 <__mdiff+0x10c>)
 80086b6:	f000 fb47 	bl	8008d48 <__assert_func>
 80086ba:	2301      	movs	r3, #1
 80086bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80086c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c4:	bfa4      	itt	ge
 80086c6:	463b      	movge	r3, r7
 80086c8:	4627      	movge	r7, r4
 80086ca:	4630      	mov	r0, r6
 80086cc:	6879      	ldr	r1, [r7, #4]
 80086ce:	bfa6      	itte	ge
 80086d0:	461c      	movge	r4, r3
 80086d2:	2500      	movge	r5, #0
 80086d4:	2501      	movlt	r5, #1
 80086d6:	f7ff fd3f 	bl	8008158 <_Balloc>
 80086da:	b920      	cbnz	r0, 80086e6 <__mdiff+0x5a>
 80086dc:	4b2d      	ldr	r3, [pc, #180]	; (8008794 <__mdiff+0x108>)
 80086de:	4602      	mov	r2, r0
 80086e0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80086e4:	e7e6      	b.n	80086b4 <__mdiff+0x28>
 80086e6:	693e      	ldr	r6, [r7, #16]
 80086e8:	60c5      	str	r5, [r0, #12]
 80086ea:	6925      	ldr	r5, [r4, #16]
 80086ec:	f107 0114 	add.w	r1, r7, #20
 80086f0:	f104 0914 	add.w	r9, r4, #20
 80086f4:	f100 0e14 	add.w	lr, r0, #20
 80086f8:	f107 0210 	add.w	r2, r7, #16
 80086fc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008700:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008704:	46f2      	mov	sl, lr
 8008706:	2700      	movs	r7, #0
 8008708:	f859 3b04 	ldr.w	r3, [r9], #4
 800870c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008710:	fa1f f883 	uxth.w	r8, r3
 8008714:	fa17 f78b 	uxtah	r7, r7, fp
 8008718:	0c1b      	lsrs	r3, r3, #16
 800871a:	eba7 0808 	sub.w	r8, r7, r8
 800871e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008722:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008726:	fa1f f888 	uxth.w	r8, r8
 800872a:	141f      	asrs	r7, r3, #16
 800872c:	454d      	cmp	r5, r9
 800872e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008732:	f84a 3b04 	str.w	r3, [sl], #4
 8008736:	d8e7      	bhi.n	8008708 <__mdiff+0x7c>
 8008738:	1b2b      	subs	r3, r5, r4
 800873a:	3b15      	subs	r3, #21
 800873c:	f023 0303 	bic.w	r3, r3, #3
 8008740:	3304      	adds	r3, #4
 8008742:	3415      	adds	r4, #21
 8008744:	42a5      	cmp	r5, r4
 8008746:	bf38      	it	cc
 8008748:	2304      	movcc	r3, #4
 800874a:	4419      	add	r1, r3
 800874c:	4473      	add	r3, lr
 800874e:	469e      	mov	lr, r3
 8008750:	460d      	mov	r5, r1
 8008752:	4565      	cmp	r5, ip
 8008754:	d30e      	bcc.n	8008774 <__mdiff+0xe8>
 8008756:	f10c 0203 	add.w	r2, ip, #3
 800875a:	1a52      	subs	r2, r2, r1
 800875c:	f022 0203 	bic.w	r2, r2, #3
 8008760:	3903      	subs	r1, #3
 8008762:	458c      	cmp	ip, r1
 8008764:	bf38      	it	cc
 8008766:	2200      	movcc	r2, #0
 8008768:	441a      	add	r2, r3
 800876a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800876e:	b17b      	cbz	r3, 8008790 <__mdiff+0x104>
 8008770:	6106      	str	r6, [r0, #16]
 8008772:	e7a5      	b.n	80086c0 <__mdiff+0x34>
 8008774:	f855 8b04 	ldr.w	r8, [r5], #4
 8008778:	fa17 f488 	uxtah	r4, r7, r8
 800877c:	1422      	asrs	r2, r4, #16
 800877e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008782:	b2a4      	uxth	r4, r4
 8008784:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008788:	f84e 4b04 	str.w	r4, [lr], #4
 800878c:	1417      	asrs	r7, r2, #16
 800878e:	e7e0      	b.n	8008752 <__mdiff+0xc6>
 8008790:	3e01      	subs	r6, #1
 8008792:	e7ea      	b.n	800876a <__mdiff+0xde>
 8008794:	080090a7 	.word	0x080090a7
 8008798:	08009118 	.word	0x08009118

0800879c <__d2b>:
 800879c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087a0:	4689      	mov	r9, r1
 80087a2:	2101      	movs	r1, #1
 80087a4:	ec57 6b10 	vmov	r6, r7, d0
 80087a8:	4690      	mov	r8, r2
 80087aa:	f7ff fcd5 	bl	8008158 <_Balloc>
 80087ae:	4604      	mov	r4, r0
 80087b0:	b930      	cbnz	r0, 80087c0 <__d2b+0x24>
 80087b2:	4602      	mov	r2, r0
 80087b4:	4b25      	ldr	r3, [pc, #148]	; (800884c <__d2b+0xb0>)
 80087b6:	4826      	ldr	r0, [pc, #152]	; (8008850 <__d2b+0xb4>)
 80087b8:	f240 310a 	movw	r1, #778	; 0x30a
 80087bc:	f000 fac4 	bl	8008d48 <__assert_func>
 80087c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80087c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80087c8:	bb35      	cbnz	r5, 8008818 <__d2b+0x7c>
 80087ca:	2e00      	cmp	r6, #0
 80087cc:	9301      	str	r3, [sp, #4]
 80087ce:	d028      	beq.n	8008822 <__d2b+0x86>
 80087d0:	4668      	mov	r0, sp
 80087d2:	9600      	str	r6, [sp, #0]
 80087d4:	f7ff fd8c 	bl	80082f0 <__lo0bits>
 80087d8:	9900      	ldr	r1, [sp, #0]
 80087da:	b300      	cbz	r0, 800881e <__d2b+0x82>
 80087dc:	9a01      	ldr	r2, [sp, #4]
 80087de:	f1c0 0320 	rsb	r3, r0, #32
 80087e2:	fa02 f303 	lsl.w	r3, r2, r3
 80087e6:	430b      	orrs	r3, r1
 80087e8:	40c2      	lsrs	r2, r0
 80087ea:	6163      	str	r3, [r4, #20]
 80087ec:	9201      	str	r2, [sp, #4]
 80087ee:	9b01      	ldr	r3, [sp, #4]
 80087f0:	61a3      	str	r3, [r4, #24]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	bf14      	ite	ne
 80087f6:	2202      	movne	r2, #2
 80087f8:	2201      	moveq	r2, #1
 80087fa:	6122      	str	r2, [r4, #16]
 80087fc:	b1d5      	cbz	r5, 8008834 <__d2b+0x98>
 80087fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008802:	4405      	add	r5, r0
 8008804:	f8c9 5000 	str.w	r5, [r9]
 8008808:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800880c:	f8c8 0000 	str.w	r0, [r8]
 8008810:	4620      	mov	r0, r4
 8008812:	b003      	add	sp, #12
 8008814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008818:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800881c:	e7d5      	b.n	80087ca <__d2b+0x2e>
 800881e:	6161      	str	r1, [r4, #20]
 8008820:	e7e5      	b.n	80087ee <__d2b+0x52>
 8008822:	a801      	add	r0, sp, #4
 8008824:	f7ff fd64 	bl	80082f0 <__lo0bits>
 8008828:	9b01      	ldr	r3, [sp, #4]
 800882a:	6163      	str	r3, [r4, #20]
 800882c:	2201      	movs	r2, #1
 800882e:	6122      	str	r2, [r4, #16]
 8008830:	3020      	adds	r0, #32
 8008832:	e7e3      	b.n	80087fc <__d2b+0x60>
 8008834:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008838:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800883c:	f8c9 0000 	str.w	r0, [r9]
 8008840:	6918      	ldr	r0, [r3, #16]
 8008842:	f7ff fd35 	bl	80082b0 <__hi0bits>
 8008846:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800884a:	e7df      	b.n	800880c <__d2b+0x70>
 800884c:	080090a7 	.word	0x080090a7
 8008850:	08009118 	.word	0x08009118

08008854 <_calloc_r>:
 8008854:	b513      	push	{r0, r1, r4, lr}
 8008856:	434a      	muls	r2, r1
 8008858:	4611      	mov	r1, r2
 800885a:	9201      	str	r2, [sp, #4]
 800885c:	f000 f85a 	bl	8008914 <_malloc_r>
 8008860:	4604      	mov	r4, r0
 8008862:	b118      	cbz	r0, 800886c <_calloc_r+0x18>
 8008864:	9a01      	ldr	r2, [sp, #4]
 8008866:	2100      	movs	r1, #0
 8008868:	f7fd fe10 	bl	800648c <memset>
 800886c:	4620      	mov	r0, r4
 800886e:	b002      	add	sp, #8
 8008870:	bd10      	pop	{r4, pc}
	...

08008874 <_free_r>:
 8008874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008876:	2900      	cmp	r1, #0
 8008878:	d048      	beq.n	800890c <_free_r+0x98>
 800887a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800887e:	9001      	str	r0, [sp, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	f1a1 0404 	sub.w	r4, r1, #4
 8008886:	bfb8      	it	lt
 8008888:	18e4      	addlt	r4, r4, r3
 800888a:	f000 fae3 	bl	8008e54 <__malloc_lock>
 800888e:	4a20      	ldr	r2, [pc, #128]	; (8008910 <_free_r+0x9c>)
 8008890:	9801      	ldr	r0, [sp, #4]
 8008892:	6813      	ldr	r3, [r2, #0]
 8008894:	4615      	mov	r5, r2
 8008896:	b933      	cbnz	r3, 80088a6 <_free_r+0x32>
 8008898:	6063      	str	r3, [r4, #4]
 800889a:	6014      	str	r4, [r2, #0]
 800889c:	b003      	add	sp, #12
 800889e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088a2:	f000 badd 	b.w	8008e60 <__malloc_unlock>
 80088a6:	42a3      	cmp	r3, r4
 80088a8:	d90b      	bls.n	80088c2 <_free_r+0x4e>
 80088aa:	6821      	ldr	r1, [r4, #0]
 80088ac:	1862      	adds	r2, r4, r1
 80088ae:	4293      	cmp	r3, r2
 80088b0:	bf04      	itt	eq
 80088b2:	681a      	ldreq	r2, [r3, #0]
 80088b4:	685b      	ldreq	r3, [r3, #4]
 80088b6:	6063      	str	r3, [r4, #4]
 80088b8:	bf04      	itt	eq
 80088ba:	1852      	addeq	r2, r2, r1
 80088bc:	6022      	streq	r2, [r4, #0]
 80088be:	602c      	str	r4, [r5, #0]
 80088c0:	e7ec      	b.n	800889c <_free_r+0x28>
 80088c2:	461a      	mov	r2, r3
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	b10b      	cbz	r3, 80088cc <_free_r+0x58>
 80088c8:	42a3      	cmp	r3, r4
 80088ca:	d9fa      	bls.n	80088c2 <_free_r+0x4e>
 80088cc:	6811      	ldr	r1, [r2, #0]
 80088ce:	1855      	adds	r5, r2, r1
 80088d0:	42a5      	cmp	r5, r4
 80088d2:	d10b      	bne.n	80088ec <_free_r+0x78>
 80088d4:	6824      	ldr	r4, [r4, #0]
 80088d6:	4421      	add	r1, r4
 80088d8:	1854      	adds	r4, r2, r1
 80088da:	42a3      	cmp	r3, r4
 80088dc:	6011      	str	r1, [r2, #0]
 80088de:	d1dd      	bne.n	800889c <_free_r+0x28>
 80088e0:	681c      	ldr	r4, [r3, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	6053      	str	r3, [r2, #4]
 80088e6:	4421      	add	r1, r4
 80088e8:	6011      	str	r1, [r2, #0]
 80088ea:	e7d7      	b.n	800889c <_free_r+0x28>
 80088ec:	d902      	bls.n	80088f4 <_free_r+0x80>
 80088ee:	230c      	movs	r3, #12
 80088f0:	6003      	str	r3, [r0, #0]
 80088f2:	e7d3      	b.n	800889c <_free_r+0x28>
 80088f4:	6825      	ldr	r5, [r4, #0]
 80088f6:	1961      	adds	r1, r4, r5
 80088f8:	428b      	cmp	r3, r1
 80088fa:	bf04      	itt	eq
 80088fc:	6819      	ldreq	r1, [r3, #0]
 80088fe:	685b      	ldreq	r3, [r3, #4]
 8008900:	6063      	str	r3, [r4, #4]
 8008902:	bf04      	itt	eq
 8008904:	1949      	addeq	r1, r1, r5
 8008906:	6021      	streq	r1, [r4, #0]
 8008908:	6054      	str	r4, [r2, #4]
 800890a:	e7c7      	b.n	800889c <_free_r+0x28>
 800890c:	b003      	add	sp, #12
 800890e:	bd30      	pop	{r4, r5, pc}
 8008910:	2000021c 	.word	0x2000021c

08008914 <_malloc_r>:
 8008914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008916:	1ccd      	adds	r5, r1, #3
 8008918:	f025 0503 	bic.w	r5, r5, #3
 800891c:	3508      	adds	r5, #8
 800891e:	2d0c      	cmp	r5, #12
 8008920:	bf38      	it	cc
 8008922:	250c      	movcc	r5, #12
 8008924:	2d00      	cmp	r5, #0
 8008926:	4606      	mov	r6, r0
 8008928:	db01      	blt.n	800892e <_malloc_r+0x1a>
 800892a:	42a9      	cmp	r1, r5
 800892c:	d903      	bls.n	8008936 <_malloc_r+0x22>
 800892e:	230c      	movs	r3, #12
 8008930:	6033      	str	r3, [r6, #0]
 8008932:	2000      	movs	r0, #0
 8008934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008936:	f000 fa8d 	bl	8008e54 <__malloc_lock>
 800893a:	4921      	ldr	r1, [pc, #132]	; (80089c0 <_malloc_r+0xac>)
 800893c:	680a      	ldr	r2, [r1, #0]
 800893e:	4614      	mov	r4, r2
 8008940:	b99c      	cbnz	r4, 800896a <_malloc_r+0x56>
 8008942:	4f20      	ldr	r7, [pc, #128]	; (80089c4 <_malloc_r+0xb0>)
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	b923      	cbnz	r3, 8008952 <_malloc_r+0x3e>
 8008948:	4621      	mov	r1, r4
 800894a:	4630      	mov	r0, r6
 800894c:	f000 f996 	bl	8008c7c <_sbrk_r>
 8008950:	6038      	str	r0, [r7, #0]
 8008952:	4629      	mov	r1, r5
 8008954:	4630      	mov	r0, r6
 8008956:	f000 f991 	bl	8008c7c <_sbrk_r>
 800895a:	1c43      	adds	r3, r0, #1
 800895c:	d123      	bne.n	80089a6 <_malloc_r+0x92>
 800895e:	230c      	movs	r3, #12
 8008960:	6033      	str	r3, [r6, #0]
 8008962:	4630      	mov	r0, r6
 8008964:	f000 fa7c 	bl	8008e60 <__malloc_unlock>
 8008968:	e7e3      	b.n	8008932 <_malloc_r+0x1e>
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	1b5b      	subs	r3, r3, r5
 800896e:	d417      	bmi.n	80089a0 <_malloc_r+0x8c>
 8008970:	2b0b      	cmp	r3, #11
 8008972:	d903      	bls.n	800897c <_malloc_r+0x68>
 8008974:	6023      	str	r3, [r4, #0]
 8008976:	441c      	add	r4, r3
 8008978:	6025      	str	r5, [r4, #0]
 800897a:	e004      	b.n	8008986 <_malloc_r+0x72>
 800897c:	6863      	ldr	r3, [r4, #4]
 800897e:	42a2      	cmp	r2, r4
 8008980:	bf0c      	ite	eq
 8008982:	600b      	streq	r3, [r1, #0]
 8008984:	6053      	strne	r3, [r2, #4]
 8008986:	4630      	mov	r0, r6
 8008988:	f000 fa6a 	bl	8008e60 <__malloc_unlock>
 800898c:	f104 000b 	add.w	r0, r4, #11
 8008990:	1d23      	adds	r3, r4, #4
 8008992:	f020 0007 	bic.w	r0, r0, #7
 8008996:	1ac2      	subs	r2, r0, r3
 8008998:	d0cc      	beq.n	8008934 <_malloc_r+0x20>
 800899a:	1a1b      	subs	r3, r3, r0
 800899c:	50a3      	str	r3, [r4, r2]
 800899e:	e7c9      	b.n	8008934 <_malloc_r+0x20>
 80089a0:	4622      	mov	r2, r4
 80089a2:	6864      	ldr	r4, [r4, #4]
 80089a4:	e7cc      	b.n	8008940 <_malloc_r+0x2c>
 80089a6:	1cc4      	adds	r4, r0, #3
 80089a8:	f024 0403 	bic.w	r4, r4, #3
 80089ac:	42a0      	cmp	r0, r4
 80089ae:	d0e3      	beq.n	8008978 <_malloc_r+0x64>
 80089b0:	1a21      	subs	r1, r4, r0
 80089b2:	4630      	mov	r0, r6
 80089b4:	f000 f962 	bl	8008c7c <_sbrk_r>
 80089b8:	3001      	adds	r0, #1
 80089ba:	d1dd      	bne.n	8008978 <_malloc_r+0x64>
 80089bc:	e7cf      	b.n	800895e <_malloc_r+0x4a>
 80089be:	bf00      	nop
 80089c0:	2000021c 	.word	0x2000021c
 80089c4:	20000220 	.word	0x20000220

080089c8 <__sfputc_r>:
 80089c8:	6893      	ldr	r3, [r2, #8]
 80089ca:	3b01      	subs	r3, #1
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	b410      	push	{r4}
 80089d0:	6093      	str	r3, [r2, #8]
 80089d2:	da08      	bge.n	80089e6 <__sfputc_r+0x1e>
 80089d4:	6994      	ldr	r4, [r2, #24]
 80089d6:	42a3      	cmp	r3, r4
 80089d8:	db01      	blt.n	80089de <__sfputc_r+0x16>
 80089da:	290a      	cmp	r1, #10
 80089dc:	d103      	bne.n	80089e6 <__sfputc_r+0x1e>
 80089de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089e2:	f7fe ba53 	b.w	8006e8c <__swbuf_r>
 80089e6:	6813      	ldr	r3, [r2, #0]
 80089e8:	1c58      	adds	r0, r3, #1
 80089ea:	6010      	str	r0, [r2, #0]
 80089ec:	7019      	strb	r1, [r3, #0]
 80089ee:	4608      	mov	r0, r1
 80089f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <__sfputs_r>:
 80089f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f8:	4606      	mov	r6, r0
 80089fa:	460f      	mov	r7, r1
 80089fc:	4614      	mov	r4, r2
 80089fe:	18d5      	adds	r5, r2, r3
 8008a00:	42ac      	cmp	r4, r5
 8008a02:	d101      	bne.n	8008a08 <__sfputs_r+0x12>
 8008a04:	2000      	movs	r0, #0
 8008a06:	e007      	b.n	8008a18 <__sfputs_r+0x22>
 8008a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a0c:	463a      	mov	r2, r7
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f7ff ffda 	bl	80089c8 <__sfputc_r>
 8008a14:	1c43      	adds	r3, r0, #1
 8008a16:	d1f3      	bne.n	8008a00 <__sfputs_r+0xa>
 8008a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a1c <_vfiprintf_r>:
 8008a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a20:	460d      	mov	r5, r1
 8008a22:	b09d      	sub	sp, #116	; 0x74
 8008a24:	4614      	mov	r4, r2
 8008a26:	4698      	mov	r8, r3
 8008a28:	4606      	mov	r6, r0
 8008a2a:	b118      	cbz	r0, 8008a34 <_vfiprintf_r+0x18>
 8008a2c:	6983      	ldr	r3, [r0, #24]
 8008a2e:	b90b      	cbnz	r3, 8008a34 <_vfiprintf_r+0x18>
 8008a30:	f7ff fa80 	bl	8007f34 <__sinit>
 8008a34:	4b89      	ldr	r3, [pc, #548]	; (8008c5c <_vfiprintf_r+0x240>)
 8008a36:	429d      	cmp	r5, r3
 8008a38:	d11b      	bne.n	8008a72 <_vfiprintf_r+0x56>
 8008a3a:	6875      	ldr	r5, [r6, #4]
 8008a3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a3e:	07d9      	lsls	r1, r3, #31
 8008a40:	d405      	bmi.n	8008a4e <_vfiprintf_r+0x32>
 8008a42:	89ab      	ldrh	r3, [r5, #12]
 8008a44:	059a      	lsls	r2, r3, #22
 8008a46:	d402      	bmi.n	8008a4e <_vfiprintf_r+0x32>
 8008a48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a4a:	f7ff fb16 	bl	800807a <__retarget_lock_acquire_recursive>
 8008a4e:	89ab      	ldrh	r3, [r5, #12]
 8008a50:	071b      	lsls	r3, r3, #28
 8008a52:	d501      	bpl.n	8008a58 <_vfiprintf_r+0x3c>
 8008a54:	692b      	ldr	r3, [r5, #16]
 8008a56:	b9eb      	cbnz	r3, 8008a94 <_vfiprintf_r+0x78>
 8008a58:	4629      	mov	r1, r5
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	f7fe fa68 	bl	8006f30 <__swsetup_r>
 8008a60:	b1c0      	cbz	r0, 8008a94 <_vfiprintf_r+0x78>
 8008a62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a64:	07dc      	lsls	r4, r3, #31
 8008a66:	d50e      	bpl.n	8008a86 <_vfiprintf_r+0x6a>
 8008a68:	f04f 30ff 	mov.w	r0, #4294967295
 8008a6c:	b01d      	add	sp, #116	; 0x74
 8008a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a72:	4b7b      	ldr	r3, [pc, #492]	; (8008c60 <_vfiprintf_r+0x244>)
 8008a74:	429d      	cmp	r5, r3
 8008a76:	d101      	bne.n	8008a7c <_vfiprintf_r+0x60>
 8008a78:	68b5      	ldr	r5, [r6, #8]
 8008a7a:	e7df      	b.n	8008a3c <_vfiprintf_r+0x20>
 8008a7c:	4b79      	ldr	r3, [pc, #484]	; (8008c64 <_vfiprintf_r+0x248>)
 8008a7e:	429d      	cmp	r5, r3
 8008a80:	bf08      	it	eq
 8008a82:	68f5      	ldreq	r5, [r6, #12]
 8008a84:	e7da      	b.n	8008a3c <_vfiprintf_r+0x20>
 8008a86:	89ab      	ldrh	r3, [r5, #12]
 8008a88:	0598      	lsls	r0, r3, #22
 8008a8a:	d4ed      	bmi.n	8008a68 <_vfiprintf_r+0x4c>
 8008a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a8e:	f7ff faf5 	bl	800807c <__retarget_lock_release_recursive>
 8008a92:	e7e9      	b.n	8008a68 <_vfiprintf_r+0x4c>
 8008a94:	2300      	movs	r3, #0
 8008a96:	9309      	str	r3, [sp, #36]	; 0x24
 8008a98:	2320      	movs	r3, #32
 8008a9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008aa2:	2330      	movs	r3, #48	; 0x30
 8008aa4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008c68 <_vfiprintf_r+0x24c>
 8008aa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008aac:	f04f 0901 	mov.w	r9, #1
 8008ab0:	4623      	mov	r3, r4
 8008ab2:	469a      	mov	sl, r3
 8008ab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ab8:	b10a      	cbz	r2, 8008abe <_vfiprintf_r+0xa2>
 8008aba:	2a25      	cmp	r2, #37	; 0x25
 8008abc:	d1f9      	bne.n	8008ab2 <_vfiprintf_r+0x96>
 8008abe:	ebba 0b04 	subs.w	fp, sl, r4
 8008ac2:	d00b      	beq.n	8008adc <_vfiprintf_r+0xc0>
 8008ac4:	465b      	mov	r3, fp
 8008ac6:	4622      	mov	r2, r4
 8008ac8:	4629      	mov	r1, r5
 8008aca:	4630      	mov	r0, r6
 8008acc:	f7ff ff93 	bl	80089f6 <__sfputs_r>
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	f000 80aa 	beq.w	8008c2a <_vfiprintf_r+0x20e>
 8008ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ad8:	445a      	add	r2, fp
 8008ada:	9209      	str	r2, [sp, #36]	; 0x24
 8008adc:	f89a 3000 	ldrb.w	r3, [sl]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f000 80a2 	beq.w	8008c2a <_vfiprintf_r+0x20e>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8008aec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008af0:	f10a 0a01 	add.w	sl, sl, #1
 8008af4:	9304      	str	r3, [sp, #16]
 8008af6:	9307      	str	r3, [sp, #28]
 8008af8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008afc:	931a      	str	r3, [sp, #104]	; 0x68
 8008afe:	4654      	mov	r4, sl
 8008b00:	2205      	movs	r2, #5
 8008b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b06:	4858      	ldr	r0, [pc, #352]	; (8008c68 <_vfiprintf_r+0x24c>)
 8008b08:	f7f7 fb92 	bl	8000230 <memchr>
 8008b0c:	9a04      	ldr	r2, [sp, #16]
 8008b0e:	b9d8      	cbnz	r0, 8008b48 <_vfiprintf_r+0x12c>
 8008b10:	06d1      	lsls	r1, r2, #27
 8008b12:	bf44      	itt	mi
 8008b14:	2320      	movmi	r3, #32
 8008b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b1a:	0713      	lsls	r3, r2, #28
 8008b1c:	bf44      	itt	mi
 8008b1e:	232b      	movmi	r3, #43	; 0x2b
 8008b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b24:	f89a 3000 	ldrb.w	r3, [sl]
 8008b28:	2b2a      	cmp	r3, #42	; 0x2a
 8008b2a:	d015      	beq.n	8008b58 <_vfiprintf_r+0x13c>
 8008b2c:	9a07      	ldr	r2, [sp, #28]
 8008b2e:	4654      	mov	r4, sl
 8008b30:	2000      	movs	r0, #0
 8008b32:	f04f 0c0a 	mov.w	ip, #10
 8008b36:	4621      	mov	r1, r4
 8008b38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b3c:	3b30      	subs	r3, #48	; 0x30
 8008b3e:	2b09      	cmp	r3, #9
 8008b40:	d94e      	bls.n	8008be0 <_vfiprintf_r+0x1c4>
 8008b42:	b1b0      	cbz	r0, 8008b72 <_vfiprintf_r+0x156>
 8008b44:	9207      	str	r2, [sp, #28]
 8008b46:	e014      	b.n	8008b72 <_vfiprintf_r+0x156>
 8008b48:	eba0 0308 	sub.w	r3, r0, r8
 8008b4c:	fa09 f303 	lsl.w	r3, r9, r3
 8008b50:	4313      	orrs	r3, r2
 8008b52:	9304      	str	r3, [sp, #16]
 8008b54:	46a2      	mov	sl, r4
 8008b56:	e7d2      	b.n	8008afe <_vfiprintf_r+0xe2>
 8008b58:	9b03      	ldr	r3, [sp, #12]
 8008b5a:	1d19      	adds	r1, r3, #4
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	9103      	str	r1, [sp, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	bfbb      	ittet	lt
 8008b64:	425b      	neglt	r3, r3
 8008b66:	f042 0202 	orrlt.w	r2, r2, #2
 8008b6a:	9307      	strge	r3, [sp, #28]
 8008b6c:	9307      	strlt	r3, [sp, #28]
 8008b6e:	bfb8      	it	lt
 8008b70:	9204      	strlt	r2, [sp, #16]
 8008b72:	7823      	ldrb	r3, [r4, #0]
 8008b74:	2b2e      	cmp	r3, #46	; 0x2e
 8008b76:	d10c      	bne.n	8008b92 <_vfiprintf_r+0x176>
 8008b78:	7863      	ldrb	r3, [r4, #1]
 8008b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b7c:	d135      	bne.n	8008bea <_vfiprintf_r+0x1ce>
 8008b7e:	9b03      	ldr	r3, [sp, #12]
 8008b80:	1d1a      	adds	r2, r3, #4
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	9203      	str	r2, [sp, #12]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	bfb8      	it	lt
 8008b8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b8e:	3402      	adds	r4, #2
 8008b90:	9305      	str	r3, [sp, #20]
 8008b92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008c78 <_vfiprintf_r+0x25c>
 8008b96:	7821      	ldrb	r1, [r4, #0]
 8008b98:	2203      	movs	r2, #3
 8008b9a:	4650      	mov	r0, sl
 8008b9c:	f7f7 fb48 	bl	8000230 <memchr>
 8008ba0:	b140      	cbz	r0, 8008bb4 <_vfiprintf_r+0x198>
 8008ba2:	2340      	movs	r3, #64	; 0x40
 8008ba4:	eba0 000a 	sub.w	r0, r0, sl
 8008ba8:	fa03 f000 	lsl.w	r0, r3, r0
 8008bac:	9b04      	ldr	r3, [sp, #16]
 8008bae:	4303      	orrs	r3, r0
 8008bb0:	3401      	adds	r4, #1
 8008bb2:	9304      	str	r3, [sp, #16]
 8008bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bb8:	482c      	ldr	r0, [pc, #176]	; (8008c6c <_vfiprintf_r+0x250>)
 8008bba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bbe:	2206      	movs	r2, #6
 8008bc0:	f7f7 fb36 	bl	8000230 <memchr>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d03f      	beq.n	8008c48 <_vfiprintf_r+0x22c>
 8008bc8:	4b29      	ldr	r3, [pc, #164]	; (8008c70 <_vfiprintf_r+0x254>)
 8008bca:	bb1b      	cbnz	r3, 8008c14 <_vfiprintf_r+0x1f8>
 8008bcc:	9b03      	ldr	r3, [sp, #12]
 8008bce:	3307      	adds	r3, #7
 8008bd0:	f023 0307 	bic.w	r3, r3, #7
 8008bd4:	3308      	adds	r3, #8
 8008bd6:	9303      	str	r3, [sp, #12]
 8008bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bda:	443b      	add	r3, r7
 8008bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8008bde:	e767      	b.n	8008ab0 <_vfiprintf_r+0x94>
 8008be0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008be4:	460c      	mov	r4, r1
 8008be6:	2001      	movs	r0, #1
 8008be8:	e7a5      	b.n	8008b36 <_vfiprintf_r+0x11a>
 8008bea:	2300      	movs	r3, #0
 8008bec:	3401      	adds	r4, #1
 8008bee:	9305      	str	r3, [sp, #20]
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	f04f 0c0a 	mov.w	ip, #10
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bfc:	3a30      	subs	r2, #48	; 0x30
 8008bfe:	2a09      	cmp	r2, #9
 8008c00:	d903      	bls.n	8008c0a <_vfiprintf_r+0x1ee>
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d0c5      	beq.n	8008b92 <_vfiprintf_r+0x176>
 8008c06:	9105      	str	r1, [sp, #20]
 8008c08:	e7c3      	b.n	8008b92 <_vfiprintf_r+0x176>
 8008c0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c0e:	4604      	mov	r4, r0
 8008c10:	2301      	movs	r3, #1
 8008c12:	e7f0      	b.n	8008bf6 <_vfiprintf_r+0x1da>
 8008c14:	ab03      	add	r3, sp, #12
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	462a      	mov	r2, r5
 8008c1a:	4b16      	ldr	r3, [pc, #88]	; (8008c74 <_vfiprintf_r+0x258>)
 8008c1c:	a904      	add	r1, sp, #16
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f7fd fcdc 	bl	80065dc <_printf_float>
 8008c24:	4607      	mov	r7, r0
 8008c26:	1c78      	adds	r0, r7, #1
 8008c28:	d1d6      	bne.n	8008bd8 <_vfiprintf_r+0x1bc>
 8008c2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c2c:	07d9      	lsls	r1, r3, #31
 8008c2e:	d405      	bmi.n	8008c3c <_vfiprintf_r+0x220>
 8008c30:	89ab      	ldrh	r3, [r5, #12]
 8008c32:	059a      	lsls	r2, r3, #22
 8008c34:	d402      	bmi.n	8008c3c <_vfiprintf_r+0x220>
 8008c36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c38:	f7ff fa20 	bl	800807c <__retarget_lock_release_recursive>
 8008c3c:	89ab      	ldrh	r3, [r5, #12]
 8008c3e:	065b      	lsls	r3, r3, #25
 8008c40:	f53f af12 	bmi.w	8008a68 <_vfiprintf_r+0x4c>
 8008c44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c46:	e711      	b.n	8008a6c <_vfiprintf_r+0x50>
 8008c48:	ab03      	add	r3, sp, #12
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	462a      	mov	r2, r5
 8008c4e:	4b09      	ldr	r3, [pc, #36]	; (8008c74 <_vfiprintf_r+0x258>)
 8008c50:	a904      	add	r1, sp, #16
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7fd ff66 	bl	8006b24 <_printf_i>
 8008c58:	e7e4      	b.n	8008c24 <_vfiprintf_r+0x208>
 8008c5a:	bf00      	nop
 8008c5c:	080090d8 	.word	0x080090d8
 8008c60:	080090f8 	.word	0x080090f8
 8008c64:	080090b8 	.word	0x080090b8
 8008c68:	08009274 	.word	0x08009274
 8008c6c:	0800927e 	.word	0x0800927e
 8008c70:	080065dd 	.word	0x080065dd
 8008c74:	080089f7 	.word	0x080089f7
 8008c78:	0800927a 	.word	0x0800927a

08008c7c <_sbrk_r>:
 8008c7c:	b538      	push	{r3, r4, r5, lr}
 8008c7e:	4d06      	ldr	r5, [pc, #24]	; (8008c98 <_sbrk_r+0x1c>)
 8008c80:	2300      	movs	r3, #0
 8008c82:	4604      	mov	r4, r0
 8008c84:	4608      	mov	r0, r1
 8008c86:	602b      	str	r3, [r5, #0]
 8008c88:	f7f8 fbee 	bl	8001468 <_sbrk>
 8008c8c:	1c43      	adds	r3, r0, #1
 8008c8e:	d102      	bne.n	8008c96 <_sbrk_r+0x1a>
 8008c90:	682b      	ldr	r3, [r5, #0]
 8008c92:	b103      	cbz	r3, 8008c96 <_sbrk_r+0x1a>
 8008c94:	6023      	str	r3, [r4, #0]
 8008c96:	bd38      	pop	{r3, r4, r5, pc}
 8008c98:	20000860 	.word	0x20000860

08008c9c <__sread>:
 8008c9c:	b510      	push	{r4, lr}
 8008c9e:	460c      	mov	r4, r1
 8008ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ca4:	f000 f8e2 	bl	8008e6c <_read_r>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	bfab      	itete	ge
 8008cac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cae:	89a3      	ldrhlt	r3, [r4, #12]
 8008cb0:	181b      	addge	r3, r3, r0
 8008cb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cb6:	bfac      	ite	ge
 8008cb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cba:	81a3      	strhlt	r3, [r4, #12]
 8008cbc:	bd10      	pop	{r4, pc}

08008cbe <__swrite>:
 8008cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc2:	461f      	mov	r7, r3
 8008cc4:	898b      	ldrh	r3, [r1, #12]
 8008cc6:	05db      	lsls	r3, r3, #23
 8008cc8:	4605      	mov	r5, r0
 8008cca:	460c      	mov	r4, r1
 8008ccc:	4616      	mov	r6, r2
 8008cce:	d505      	bpl.n	8008cdc <__swrite+0x1e>
 8008cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd4:	2302      	movs	r3, #2
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f000 f898 	bl	8008e0c <_lseek_r>
 8008cdc:	89a3      	ldrh	r3, [r4, #12]
 8008cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ce6:	81a3      	strh	r3, [r4, #12]
 8008ce8:	4632      	mov	r2, r6
 8008cea:	463b      	mov	r3, r7
 8008cec:	4628      	mov	r0, r5
 8008cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf2:	f000 b817 	b.w	8008d24 <_write_r>

08008cf6 <__sseek>:
 8008cf6:	b510      	push	{r4, lr}
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cfe:	f000 f885 	bl	8008e0c <_lseek_r>
 8008d02:	1c43      	adds	r3, r0, #1
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	bf15      	itete	ne
 8008d08:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d12:	81a3      	strheq	r3, [r4, #12]
 8008d14:	bf18      	it	ne
 8008d16:	81a3      	strhne	r3, [r4, #12]
 8008d18:	bd10      	pop	{r4, pc}

08008d1a <__sclose>:
 8008d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d1e:	f000 b831 	b.w	8008d84 <_close_r>
	...

08008d24 <_write_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	4d07      	ldr	r5, [pc, #28]	; (8008d44 <_write_r+0x20>)
 8008d28:	4604      	mov	r4, r0
 8008d2a:	4608      	mov	r0, r1
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	2200      	movs	r2, #0
 8008d30:	602a      	str	r2, [r5, #0]
 8008d32:	461a      	mov	r2, r3
 8008d34:	f7f8 fb47 	bl	80013c6 <_write>
 8008d38:	1c43      	adds	r3, r0, #1
 8008d3a:	d102      	bne.n	8008d42 <_write_r+0x1e>
 8008d3c:	682b      	ldr	r3, [r5, #0]
 8008d3e:	b103      	cbz	r3, 8008d42 <_write_r+0x1e>
 8008d40:	6023      	str	r3, [r4, #0]
 8008d42:	bd38      	pop	{r3, r4, r5, pc}
 8008d44:	20000860 	.word	0x20000860

08008d48 <__assert_func>:
 8008d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d4a:	4614      	mov	r4, r2
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	4b09      	ldr	r3, [pc, #36]	; (8008d74 <__assert_func+0x2c>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4605      	mov	r5, r0
 8008d54:	68d8      	ldr	r0, [r3, #12]
 8008d56:	b14c      	cbz	r4, 8008d6c <__assert_func+0x24>
 8008d58:	4b07      	ldr	r3, [pc, #28]	; (8008d78 <__assert_func+0x30>)
 8008d5a:	9100      	str	r1, [sp, #0]
 8008d5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d60:	4906      	ldr	r1, [pc, #24]	; (8008d7c <__assert_func+0x34>)
 8008d62:	462b      	mov	r3, r5
 8008d64:	f000 f81e 	bl	8008da4 <fiprintf>
 8008d68:	f000 f89f 	bl	8008eaa <abort>
 8008d6c:	4b04      	ldr	r3, [pc, #16]	; (8008d80 <__assert_func+0x38>)
 8008d6e:	461c      	mov	r4, r3
 8008d70:	e7f3      	b.n	8008d5a <__assert_func+0x12>
 8008d72:	bf00      	nop
 8008d74:	2000002c 	.word	0x2000002c
 8008d78:	08009285 	.word	0x08009285
 8008d7c:	08009292 	.word	0x08009292
 8008d80:	080092c0 	.word	0x080092c0

08008d84 <_close_r>:
 8008d84:	b538      	push	{r3, r4, r5, lr}
 8008d86:	4d06      	ldr	r5, [pc, #24]	; (8008da0 <_close_r+0x1c>)
 8008d88:	2300      	movs	r3, #0
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	4608      	mov	r0, r1
 8008d8e:	602b      	str	r3, [r5, #0]
 8008d90:	f7f8 fb35 	bl	80013fe <_close>
 8008d94:	1c43      	adds	r3, r0, #1
 8008d96:	d102      	bne.n	8008d9e <_close_r+0x1a>
 8008d98:	682b      	ldr	r3, [r5, #0]
 8008d9a:	b103      	cbz	r3, 8008d9e <_close_r+0x1a>
 8008d9c:	6023      	str	r3, [r4, #0]
 8008d9e:	bd38      	pop	{r3, r4, r5, pc}
 8008da0:	20000860 	.word	0x20000860

08008da4 <fiprintf>:
 8008da4:	b40e      	push	{r1, r2, r3}
 8008da6:	b503      	push	{r0, r1, lr}
 8008da8:	4601      	mov	r1, r0
 8008daa:	ab03      	add	r3, sp, #12
 8008dac:	4805      	ldr	r0, [pc, #20]	; (8008dc4 <fiprintf+0x20>)
 8008dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8008db2:	6800      	ldr	r0, [r0, #0]
 8008db4:	9301      	str	r3, [sp, #4]
 8008db6:	f7ff fe31 	bl	8008a1c <_vfiprintf_r>
 8008dba:	b002      	add	sp, #8
 8008dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dc0:	b003      	add	sp, #12
 8008dc2:	4770      	bx	lr
 8008dc4:	2000002c 	.word	0x2000002c

08008dc8 <_fstat_r>:
 8008dc8:	b538      	push	{r3, r4, r5, lr}
 8008dca:	4d07      	ldr	r5, [pc, #28]	; (8008de8 <_fstat_r+0x20>)
 8008dcc:	2300      	movs	r3, #0
 8008dce:	4604      	mov	r4, r0
 8008dd0:	4608      	mov	r0, r1
 8008dd2:	4611      	mov	r1, r2
 8008dd4:	602b      	str	r3, [r5, #0]
 8008dd6:	f7f8 fb1e 	bl	8001416 <_fstat>
 8008dda:	1c43      	adds	r3, r0, #1
 8008ddc:	d102      	bne.n	8008de4 <_fstat_r+0x1c>
 8008dde:	682b      	ldr	r3, [r5, #0]
 8008de0:	b103      	cbz	r3, 8008de4 <_fstat_r+0x1c>
 8008de2:	6023      	str	r3, [r4, #0]
 8008de4:	bd38      	pop	{r3, r4, r5, pc}
 8008de6:	bf00      	nop
 8008de8:	20000860 	.word	0x20000860

08008dec <_isatty_r>:
 8008dec:	b538      	push	{r3, r4, r5, lr}
 8008dee:	4d06      	ldr	r5, [pc, #24]	; (8008e08 <_isatty_r+0x1c>)
 8008df0:	2300      	movs	r3, #0
 8008df2:	4604      	mov	r4, r0
 8008df4:	4608      	mov	r0, r1
 8008df6:	602b      	str	r3, [r5, #0]
 8008df8:	f7f8 fb1d 	bl	8001436 <_isatty>
 8008dfc:	1c43      	adds	r3, r0, #1
 8008dfe:	d102      	bne.n	8008e06 <_isatty_r+0x1a>
 8008e00:	682b      	ldr	r3, [r5, #0]
 8008e02:	b103      	cbz	r3, 8008e06 <_isatty_r+0x1a>
 8008e04:	6023      	str	r3, [r4, #0]
 8008e06:	bd38      	pop	{r3, r4, r5, pc}
 8008e08:	20000860 	.word	0x20000860

08008e0c <_lseek_r>:
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	4d07      	ldr	r5, [pc, #28]	; (8008e2c <_lseek_r+0x20>)
 8008e10:	4604      	mov	r4, r0
 8008e12:	4608      	mov	r0, r1
 8008e14:	4611      	mov	r1, r2
 8008e16:	2200      	movs	r2, #0
 8008e18:	602a      	str	r2, [r5, #0]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	f7f8 fb16 	bl	800144c <_lseek>
 8008e20:	1c43      	adds	r3, r0, #1
 8008e22:	d102      	bne.n	8008e2a <_lseek_r+0x1e>
 8008e24:	682b      	ldr	r3, [r5, #0]
 8008e26:	b103      	cbz	r3, 8008e2a <_lseek_r+0x1e>
 8008e28:	6023      	str	r3, [r4, #0]
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
 8008e2c:	20000860 	.word	0x20000860

08008e30 <__ascii_mbtowc>:
 8008e30:	b082      	sub	sp, #8
 8008e32:	b901      	cbnz	r1, 8008e36 <__ascii_mbtowc+0x6>
 8008e34:	a901      	add	r1, sp, #4
 8008e36:	b142      	cbz	r2, 8008e4a <__ascii_mbtowc+0x1a>
 8008e38:	b14b      	cbz	r3, 8008e4e <__ascii_mbtowc+0x1e>
 8008e3a:	7813      	ldrb	r3, [r2, #0]
 8008e3c:	600b      	str	r3, [r1, #0]
 8008e3e:	7812      	ldrb	r2, [r2, #0]
 8008e40:	1e10      	subs	r0, r2, #0
 8008e42:	bf18      	it	ne
 8008e44:	2001      	movne	r0, #1
 8008e46:	b002      	add	sp, #8
 8008e48:	4770      	bx	lr
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	e7fb      	b.n	8008e46 <__ascii_mbtowc+0x16>
 8008e4e:	f06f 0001 	mvn.w	r0, #1
 8008e52:	e7f8      	b.n	8008e46 <__ascii_mbtowc+0x16>

08008e54 <__malloc_lock>:
 8008e54:	4801      	ldr	r0, [pc, #4]	; (8008e5c <__malloc_lock+0x8>)
 8008e56:	f7ff b910 	b.w	800807a <__retarget_lock_acquire_recursive>
 8008e5a:	bf00      	nop
 8008e5c:	20000858 	.word	0x20000858

08008e60 <__malloc_unlock>:
 8008e60:	4801      	ldr	r0, [pc, #4]	; (8008e68 <__malloc_unlock+0x8>)
 8008e62:	f7ff b90b 	b.w	800807c <__retarget_lock_release_recursive>
 8008e66:	bf00      	nop
 8008e68:	20000858 	.word	0x20000858

08008e6c <_read_r>:
 8008e6c:	b538      	push	{r3, r4, r5, lr}
 8008e6e:	4d07      	ldr	r5, [pc, #28]	; (8008e8c <_read_r+0x20>)
 8008e70:	4604      	mov	r4, r0
 8008e72:	4608      	mov	r0, r1
 8008e74:	4611      	mov	r1, r2
 8008e76:	2200      	movs	r2, #0
 8008e78:	602a      	str	r2, [r5, #0]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	f7f8 fa86 	bl	800138c <_read>
 8008e80:	1c43      	adds	r3, r0, #1
 8008e82:	d102      	bne.n	8008e8a <_read_r+0x1e>
 8008e84:	682b      	ldr	r3, [r5, #0]
 8008e86:	b103      	cbz	r3, 8008e8a <_read_r+0x1e>
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	bd38      	pop	{r3, r4, r5, pc}
 8008e8c:	20000860 	.word	0x20000860

08008e90 <__ascii_wctomb>:
 8008e90:	b149      	cbz	r1, 8008ea6 <__ascii_wctomb+0x16>
 8008e92:	2aff      	cmp	r2, #255	; 0xff
 8008e94:	bf85      	ittet	hi
 8008e96:	238a      	movhi	r3, #138	; 0x8a
 8008e98:	6003      	strhi	r3, [r0, #0]
 8008e9a:	700a      	strbls	r2, [r1, #0]
 8008e9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008ea0:	bf98      	it	ls
 8008ea2:	2001      	movls	r0, #1
 8008ea4:	4770      	bx	lr
 8008ea6:	4608      	mov	r0, r1
 8008ea8:	4770      	bx	lr

08008eaa <abort>:
 8008eaa:	b508      	push	{r3, lr}
 8008eac:	2006      	movs	r0, #6
 8008eae:	f000 f82b 	bl	8008f08 <raise>
 8008eb2:	2001      	movs	r0, #1
 8008eb4:	f7f8 fa60 	bl	8001378 <_exit>

08008eb8 <_raise_r>:
 8008eb8:	291f      	cmp	r1, #31
 8008eba:	b538      	push	{r3, r4, r5, lr}
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	460d      	mov	r5, r1
 8008ec0:	d904      	bls.n	8008ecc <_raise_r+0x14>
 8008ec2:	2316      	movs	r3, #22
 8008ec4:	6003      	str	r3, [r0, #0]
 8008ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eca:	bd38      	pop	{r3, r4, r5, pc}
 8008ecc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008ece:	b112      	cbz	r2, 8008ed6 <_raise_r+0x1e>
 8008ed0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ed4:	b94b      	cbnz	r3, 8008eea <_raise_r+0x32>
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f000 f830 	bl	8008f3c <_getpid_r>
 8008edc:	462a      	mov	r2, r5
 8008ede:	4601      	mov	r1, r0
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ee6:	f000 b817 	b.w	8008f18 <_kill_r>
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d00a      	beq.n	8008f04 <_raise_r+0x4c>
 8008eee:	1c59      	adds	r1, r3, #1
 8008ef0:	d103      	bne.n	8008efa <_raise_r+0x42>
 8008ef2:	2316      	movs	r3, #22
 8008ef4:	6003      	str	r3, [r0, #0]
 8008ef6:	2001      	movs	r0, #1
 8008ef8:	e7e7      	b.n	8008eca <_raise_r+0x12>
 8008efa:	2400      	movs	r4, #0
 8008efc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f00:	4628      	mov	r0, r5
 8008f02:	4798      	blx	r3
 8008f04:	2000      	movs	r0, #0
 8008f06:	e7e0      	b.n	8008eca <_raise_r+0x12>

08008f08 <raise>:
 8008f08:	4b02      	ldr	r3, [pc, #8]	; (8008f14 <raise+0xc>)
 8008f0a:	4601      	mov	r1, r0
 8008f0c:	6818      	ldr	r0, [r3, #0]
 8008f0e:	f7ff bfd3 	b.w	8008eb8 <_raise_r>
 8008f12:	bf00      	nop
 8008f14:	2000002c 	.word	0x2000002c

08008f18 <_kill_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4d07      	ldr	r5, [pc, #28]	; (8008f38 <_kill_r+0x20>)
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	4604      	mov	r4, r0
 8008f20:	4608      	mov	r0, r1
 8008f22:	4611      	mov	r1, r2
 8008f24:	602b      	str	r3, [r5, #0]
 8008f26:	f7f8 fa17 	bl	8001358 <_kill>
 8008f2a:	1c43      	adds	r3, r0, #1
 8008f2c:	d102      	bne.n	8008f34 <_kill_r+0x1c>
 8008f2e:	682b      	ldr	r3, [r5, #0]
 8008f30:	b103      	cbz	r3, 8008f34 <_kill_r+0x1c>
 8008f32:	6023      	str	r3, [r4, #0]
 8008f34:	bd38      	pop	{r3, r4, r5, pc}
 8008f36:	bf00      	nop
 8008f38:	20000860 	.word	0x20000860

08008f3c <_getpid_r>:
 8008f3c:	f7f8 ba04 	b.w	8001348 <_getpid>

08008f40 <_init>:
 8008f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f42:	bf00      	nop
 8008f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f46:	bc08      	pop	{r3}
 8008f48:	469e      	mov	lr, r3
 8008f4a:	4770      	bx	lr

08008f4c <_fini>:
 8008f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4e:	bf00      	nop
 8008f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f52:	bc08      	pop	{r3}
 8008f54:	469e      	mov	lr, r3
 8008f56:	4770      	bx	lr
